
motor_driver_144.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c728  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  0800c8c8  0800c8c8  0000d8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf00  0800cf00  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf00  0800cf00  0000df00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf08  0800cf08  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf08  0800cf08  0000df08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cf0c  0800cf0c  0000df0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800cf10  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d4  2**0
                  CONTENTS
 10 .bss          00000728  200001d4  200001d4  0000e1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008fc  200008fc  0000e1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001424b  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027fd  00000000  00000000  0002244f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00024c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d33  00000000  00000000  00025d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fb2  00000000  00000000  00026a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015365  00000000  00000000  00049a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5cc2  00000000  00000000  0005ed92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00134a54  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058b0  00000000  00000000  00134a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0013a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c8b0 	.word	0x0800c8b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800c8b0 	.word	0x0800c8b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <compute_ideal_speed>:
#include "drive_model.h"
#include "chassis_param.h"

void compute_ideal_speed(volatile float v, volatile float w,
		volatile float *lb_speed, volatile float *rb_speed,
		volatile float *lf_speed, volatile float *rf_speed) {
 8000c58:	b5b0      	push	{r4, r5, r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000c62:	edc7 0a04 	vstr	s1, [r7, #16]
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	603b      	str	r3, [r7, #0]
	*lb_speed = v - w * CHASSIS_WIDTH / 2.0;
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fc71 	bl	8000558 <__aeabi_f2d>
 8000c76:	4604      	mov	r4, r0
 8000c78:	460d      	mov	r5, r1
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fc6b 	bl	8000558 <__aeabi_f2d>
 8000c82:	a329      	add	r3, pc, #164	@ (adr r3, 8000d28 <compute_ideal_speed+0xd0>)
 8000c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c88:	f7ff fcbe 	bl	8000608 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4610      	mov	r0, r2
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c9c:	f7ff fdde 	bl	800085c <__aeabi_ddiv>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	f7ff faf6 	bl	8000298 <__aeabi_dsub>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f7ff ff80 	bl	8000bb8 <__aeabi_d2f>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	601a      	str	r2, [r3, #0]
	*rb_speed = v + w * CHASSIS_WIDTH / 2.0;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fc49 	bl	8000558 <__aeabi_f2d>
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fc43 	bl	8000558 <__aeabi_f2d>
 8000cd2:	a315      	add	r3, pc, #84	@ (adr r3, 8000d28 <compute_ideal_speed+0xd0>)
 8000cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd8:	f7ff fc96 	bl	8000608 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cec:	f7ff fdb6 	bl	800085c <__aeabi_ddiv>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	4629      	mov	r1, r5
 8000cf8:	f7ff fad0 	bl	800029c <__adddf3>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4610      	mov	r0, r2
 8000d02:	4619      	mov	r1, r3
 8000d04:	f7ff ff58 	bl	8000bb8 <__aeabi_d2f>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	601a      	str	r2, [r3, #0]
	*lf_speed = *lb_speed;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	601a      	str	r2, [r3, #0]
	*rf_speed = *rb_speed;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	601a      	str	r2, [r3, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bdb0      	pop	{r4, r5, r7, pc}
 8000d26:	bf00      	nop
 8000d28:	9999999a 	.word	0x9999999a
 8000d2c:	3fc99999 	.word	0x3fc99999

08000d30 <lb_forward>:
 */
#include "h_bridge_control.h"
#include "main.h"

//LB
void lb_forward(void){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d3a:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <lb_forward+0x20>)
 8000d3c:	f002 fb5c 	bl	80033f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d46:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <lb_forward+0x20>)
 8000d48:	f002 fb56 	bl	80033f8 <HAL_GPIO_WritePin>
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	48001400 	.word	0x48001400

08000d54 <lb_backward>:

void lb_backward(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <lb_backward+0x20>)
 8000d60:	f002 fb4a 	bl	80033f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d6a:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <lb_backward+0x20>)
 8000d6c:	f002 fb44 	bl	80033f8 <HAL_GPIO_WritePin>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	48001400 	.word	0x48001400

08000d78 <lb_stop>:

void lb_stop(void){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <lb_stop+0x20>)
 8000d84:	f002 fb38 	bl	80033f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d8e:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <lb_stop+0x20>)
 8000d90:	f002 fb32 	bl	80033f8 <HAL_GPIO_WritePin>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	48001400 	.word	0x48001400

08000d9c <rb_forward>:

//RB
void rb_forward(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2110      	movs	r1, #16
 8000da4:	4804      	ldr	r0, [pc, #16]	@ (8000db8 <rb_forward+0x1c>)
 8000da6:	f002 fb27 	bl	80033f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2120      	movs	r1, #32
 8000dae:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <rb_forward+0x1c>)
 8000db0:	f002 fb22 	bl	80033f8 <HAL_GPIO_WritePin>
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	48001000 	.word	0x48001000

08000dbc <rb_backward>:

void rb_backward(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <rb_backward+0x1c>)
 8000dc6:	f002 fb17 	bl	80033f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2120      	movs	r1, #32
 8000dce:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <rb_backward+0x1c>)
 8000dd0:	f002 fb12 	bl	80033f8 <HAL_GPIO_WritePin>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	48001000 	.word	0x48001000

08000ddc <rb_stop>:

void rb_stop(void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2110      	movs	r1, #16
 8000de4:	4804      	ldr	r0, [pc, #16]	@ (8000df8 <rb_stop+0x1c>)
 8000de6:	f002 fb07 	bl	80033f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2120      	movs	r1, #32
 8000dee:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <rb_stop+0x1c>)
 8000df0:	f002 fb02 	bl	80033f8 <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	48001000 	.word	0x48001000

08000dfc <lf_forward>:

//LF
void lf_forward(void){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e06:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <lf_forward+0x20>)
 8000e08:	f002 faf6 	bl	80033f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e12:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <lf_forward+0x20>)
 8000e14:	f002 faf0 	bl	80033f8 <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	48000800 	.word	0x48000800

08000e20 <lf_backward>:

void lf_backward(void){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <lf_backward+0x20>)
 8000e2c:	f002 fae4 	bl	80033f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e36:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <lf_backward+0x20>)
 8000e38:	f002 fade 	bl	80033f8 <HAL_GPIO_WritePin>
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	48000800 	.word	0x48000800

08000e44 <lf_stop>:

void lf_stop(void){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <lf_stop+0x20>)
 8000e50:	f002 fad2 	bl	80033f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e5a:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <lf_stop+0x20>)
 8000e5c:	f002 facc 	bl	80033f8 <HAL_GPIO_WritePin>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	48000800 	.word	0x48000800

08000e68 <rf_forward>:

//RF
void rf_forward(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2104      	movs	r1, #4
 8000e70:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <rf_forward+0x1c>)
 8000e72:	f002 fac1 	bl	80033f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2108      	movs	r1, #8
 8000e7a:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <rf_forward+0x1c>)
 8000e7c:	f002 fabc 	bl	80033f8 <HAL_GPIO_WritePin>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	48001800 	.word	0x48001800

08000e88 <rf_backward>:

void rf_backward(void){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2104      	movs	r1, #4
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <rf_backward+0x1c>)
 8000e92:	f002 fab1 	bl	80033f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2108      	movs	r1, #8
 8000e9a:	4802      	ldr	r0, [pc, #8]	@ (8000ea4 <rf_backward+0x1c>)
 8000e9c:	f002 faac 	bl	80033f8 <HAL_GPIO_WritePin>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	48001800 	.word	0x48001800

08000ea8 <rf_stop>:

void rf_stop(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2104      	movs	r1, #4
 8000eb0:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <rf_stop+0x1c>)
 8000eb2:	f002 faa1 	bl	80033f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2108      	movs	r1, #8
 8000eba:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <rf_stop+0x1c>)
 8000ebc:	f002 fa9c 	bl	80033f8 <HAL_GPIO_WritePin>
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	48001800 	.word	0x48001800

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f001 ff6d 	bl	8002dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f89f 	bl	8001014 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f000 fb8b 	bl	80015f0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000eda:	f000 f90d 	bl	80010f8 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000ede:	f000 fb31 	bl	8001544 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000ee2:	f000 fb5f 	bl	80015a4 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000ee6:	f000 f92d 	bl	8001144 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eea:	f000 f985 	bl	80011f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eee:	f000 f9fd 	bl	80012ec <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ef2:	f000 fa51 	bl	8001398 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000ef6:	f000 faa5 	bl	8001444 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000efa:	f000 fafd 	bl	80014f8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim16);
 8000efe:	4837      	ldr	r0, [pc, #220]	@ (8000fdc <main+0x114>)
 8000f00:	f005 fb66 	bl	80065d0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000f04:	213c      	movs	r1, #60	@ 0x3c
 8000f06:	4836      	ldr	r0, [pc, #216]	@ (8000fe0 <main+0x118>)
 8000f08:	f005 fddc 	bl	8006ac4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f0c:	213c      	movs	r1, #60	@ 0x3c
 8000f0e:	4835      	ldr	r0, [pc, #212]	@ (8000fe4 <main+0x11c>)
 8000f10:	f005 fdd8 	bl	8006ac4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000f14:	213c      	movs	r1, #60	@ 0x3c
 8000f16:	4834      	ldr	r0, [pc, #208]	@ (8000fe8 <main+0x120>)
 8000f18:	f005 fdd4 	bl	8006ac4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000f1c:	213c      	movs	r1, #60	@ 0x3c
 8000f1e:	4833      	ldr	r0, [pc, #204]	@ (8000fec <main+0x124>)
 8000f20:	f005 fdd0 	bl	8006ac4 <HAL_TIM_Encoder_Start>

	//start PWM
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
	set_direction(LB, BREAK);
 8000f24:	2300      	movs	r3, #0
 8000f26:	2203      	movs	r2, #3
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fd58 	bl	80019e0 <set_direction>
	set_direction(RB, BREAK);
 8000f30:	2301      	movs	r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fd52 	bl	80019e0 <set_direction>
	set_direction(LF, BREAK);
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	2203      	movs	r2, #3
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fd4c 	bl	80019e0 <set_direction>
	set_direction(RF, BREAK);
 8000f48:	2303      	movs	r3, #3
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fd46 	bl	80019e0 <set_direction>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000f54:	4b26      	ldr	r3, [pc, #152]	@ (8000ff0 <main+0x128>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000f5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <main+0x128>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2200      	movs	r2, #0
 8000f62:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000f64:	4b22      	ldr	r3, [pc, #136]	@ (8000ff0 <main+0x128>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000f6c:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <main+0x128>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2200      	movs	r2, #0
 8000f72:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f74:	2100      	movs	r1, #0
 8000f76:	481e      	ldr	r0, [pc, #120]	@ (8000ff0 <main+0x128>)
 8000f78:	f005 fbf2 	bl	8006760 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	481c      	ldr	r0, [pc, #112]	@ (8000ff0 <main+0x128>)
 8000f80:	f005 fbee 	bl	8006760 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f84:	2108      	movs	r1, #8
 8000f86:	481a      	ldr	r0, [pc, #104]	@ (8000ff0 <main+0x128>)
 8000f88:	f005 fbea 	bl	8006760 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000f8c:	210c      	movs	r1, #12
 8000f8e:	4818      	ldr	r0, [pc, #96]	@ (8000ff0 <main+0x128>)
 8000f90:	f005 fbe6 	bl	8006760 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	log_to_uart("Hello\n\r");
 8000f94:	4817      	ldr	r0, [pc, #92]	@ (8000ff4 <main+0x12c>)
 8000f96:	f001 fb3b 	bl	8002610 <log_to_uart>
	char str[30];
//	sprintf(str, "%d", HAL_RCC_GetPCLK1Freq());
//	log_to_uart(str);

	lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
 8000f9a:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <main+0x11c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa0:	4a15      	ldr	r2, [pc, #84]	@ (8000ff8 <main+0x130>)
 8000fa2:	6013      	str	r3, [r2, #0]
	rb_count_last = __HAL_TIM_GET_COUNTER(&htim4);
 8000fa4:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <main+0x120>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000faa:	4a14      	ldr	r2, [pc, #80]	@ (8000ffc <main+0x134>)
 8000fac:	6013      	str	r3, [r2, #0]
	lf_count_last = __HAL_TIM_GET_COUNTER(&htim1);
 8000fae:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <main+0x118>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb4:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <main+0x138>)
 8000fb6:	6013      	str	r3, [r2, #0]
	rf_count_last = __HAL_TIM_GET_COUNTER(&htim8);
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <main+0x124>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fbe:	4a11      	ldr	r2, [pc, #68]	@ (8001004 <main+0x13c>)
 8000fc0:	6013      	str	r3, [r2, #0]

	HAL_Delay(3000);
 8000fc2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc6:	f001 ff57 	bl	8002e78 <HAL_Delay>
	v_desired = 0.0;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <main+0x140>)
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
	w_desired = -0.3;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <main+0x144>)
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8001010 <main+0x148>)
 8000fd6:	601a      	str	r2, [r3, #0]


	while (1) {
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <main+0x110>
 8000fdc:	2000038c 	.word	0x2000038c
 8000fe0:	20000210 	.word	0x20000210
 8000fe4:	200002a8 	.word	0x200002a8
 8000fe8:	200002f4 	.word	0x200002f4
 8000fec:	20000340 	.word	0x20000340
 8000ff0:	2000025c 	.word	0x2000025c
 8000ff4:	0800c8c8 	.word	0x0800c8c8
 8000ff8:	20000748 	.word	0x20000748
 8000ffc:	2000074c 	.word	0x2000074c
 8001000:	20000750 	.word	0x20000750
 8001004:	20000754 	.word	0x20000754
 8001008:	200007a0 	.word	0x200007a0
 800100c:	200007a4 	.word	0x200007a4
 8001010:	be99999a 	.word	0xbe99999a

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b0a6      	sub	sp, #152	@ 0x98
 8001018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800101e:	2228      	movs	r2, #40	@ 0x28
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f009 fb7b 	bl	800a71e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001028:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2258      	movs	r2, #88	@ 0x58
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f009 fb6d 	bl	800a71e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001044:	2309      	movs	r3, #9
 8001046:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001048:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800104c:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104e:	2301      	movs	r3, #1
 8001050:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001052:	2301      	movs	r3, #1
 8001054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001058:	2302      	movs	r3, #2
 800105a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001066:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800106a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fcb9 	bl	80049f0 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001084:	f001 fada 	bl	800263c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
 800108a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108c:	2302      	movs	r3, #2
 800108e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001094:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001098:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800109e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010a2:	2102      	movs	r1, #2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 fcf7 	bl	8005a98 <HAL_RCC_ClockConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80010b0:	f001 fac4 	bl	800263c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <SystemClock_Config+0xe0>)
 80010b6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80010c2:	2300      	movs	r3, #0
 80010c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4618      	mov	r0, r3
 80010de:	f004 fefb 	bl	8005ed8 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80010e8:	f001 faa8 	bl	800263c <Error_Handler>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3798      	adds	r7, #152	@ 0x98
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	00b33004 	.word	0x00b33004

080010f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_RTC_Init+0x44>)
 80010fe:	4a10      	ldr	r2, [pc, #64]	@ (8001140 <MX_RTC_Init+0x48>)
 8001100:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_RTC_Init+0x44>)
 8001104:	2200      	movs	r2, #0
 8001106:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_RTC_Init+0x44>)
 800110a:	227f      	movs	r2, #127	@ 0x7f
 800110c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <MX_RTC_Init+0x44>)
 8001110:	22ff      	movs	r2, #255	@ 0xff
 8001112:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_RTC_Init+0x44>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <MX_RTC_Init+0x44>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_RTC_Init+0x44>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_RTC_Init+0x44>)
 8001128:	f005 f8f4 	bl	8006314 <HAL_RTC_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001132:	f001 fa83 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200001f0 	.word	0x200001f0
 8001140:	40002800 	.word	0x40002800

08001144 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	@ 0x30
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	2224      	movs	r2, #36	@ 0x24
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f009 fae3 	bl	800a71e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001162:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <MX_TIM1_Init+0xac>)
 8001164:	4a23      	ldr	r2, [pc, #140]	@ (80011f4 <MX_TIM1_Init+0xb0>)
 8001166:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001168:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <MX_TIM1_Init+0xac>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b20      	ldr	r3, [pc, #128]	@ (80011f0 <MX_TIM1_Init+0xac>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001174:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <MX_TIM1_Init+0xac>)
 8001176:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800117a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <MX_TIM1_Init+0xac>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001182:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <MX_TIM1_Init+0xac>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <MX_TIM1_Init+0xac>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800118e:	2303      	movs	r3, #3
 8001190:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001196:	2301      	movs	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011a6:	2301      	movs	r3, #1
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4619      	mov	r1, r3
 80011b8:	480d      	ldr	r0, [pc, #52]	@ (80011f0 <MX_TIM1_Init+0xac>)
 80011ba:	f005 fbdd 	bl	8006978 <HAL_TIM_Encoder_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80011c4:	f001 fa3a 	bl	800263c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <MX_TIM1_Init+0xac>)
 80011da:	f006 fb15 	bl	8007808 <HAL_TIMEx_MasterConfigSynchronization>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80011e4:	f001 fa2a 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3730      	adds	r7, #48	@ 0x30
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000210 	.word	0x20000210
 80011f4:	40012c00 	.word	0x40012c00

080011f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120a:	463b      	mov	r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	615a      	str	r2, [r3, #20]
 800121a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800121c:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <MX_TIM2_Init+0xf0>)
 800121e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001222:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = APB1_FREQ / TIM2_FREQ - 1;
 8001224:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <MX_TIM2_Init+0xf0>)
 8001226:	2202      	movs	r2, #2
 8001228:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <MX_TIM2_Init+0xf0>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_FREQ / PWM_FREQ - 1;
 8001230:	4b2d      	ldr	r3, [pc, #180]	@ (80012e8 <MX_TIM2_Init+0xf0>)
 8001232:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001236:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <MX_TIM2_Init+0xf0>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <MX_TIM2_Init+0xf0>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001244:	4828      	ldr	r0, [pc, #160]	@ (80012e8 <MX_TIM2_Init+0xf0>)
 8001246:	f005 fa33 	bl	80066b0 <HAL_TIM_PWM_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001250:	f001 f9f4 	bl	800263c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4821      	ldr	r0, [pc, #132]	@ (80012e8 <MX_TIM2_Init+0xf0>)
 8001264:	f006 fad0 	bl	8007808 <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800126e:	f001 f9e5 	bl	800263c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001272:	2360      	movs	r3, #96	@ 0x60
 8001274:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	2200      	movs	r2, #0
 8001286:	4619      	mov	r1, r3
 8001288:	4817      	ldr	r0, [pc, #92]	@ (80012e8 <MX_TIM2_Init+0xf0>)
 800128a:	f005 fdab 	bl	8006de4 <HAL_TIM_PWM_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001294:	f001 f9d2 	bl	800263c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	2204      	movs	r2, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4812      	ldr	r0, [pc, #72]	@ (80012e8 <MX_TIM2_Init+0xf0>)
 80012a0:	f005 fda0 	bl	8006de4 <HAL_TIM_PWM_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80012aa:	f001 f9c7 	bl	800263c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	2208      	movs	r2, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <MX_TIM2_Init+0xf0>)
 80012b6:	f005 fd95 	bl	8006de4 <HAL_TIM_PWM_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80012c0:	f001 f9bc 	bl	800263c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	220c      	movs	r2, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <MX_TIM2_Init+0xf0>)
 80012cc:	f005 fd8a 	bl	8006de4 <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80012d6:	f001 f9b1 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012da:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <MX_TIM2_Init+0xf0>)
 80012dc:	f001 fb5e 	bl	800299c <HAL_TIM_MspPostInit>

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	@ 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000025c 	.word	0x2000025c

080012ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	@ 0x30
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	2224      	movs	r2, #36	@ 0x24
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f009 fa0f 	bl	800a71e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <MX_TIM3_Init+0xa4>)
 800130c:	4a21      	ldr	r2, [pc, #132]	@ (8001394 <MX_TIM3_Init+0xa8>)
 800130e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001310:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <MX_TIM3_Init+0xa4>)
 8001312:	2200      	movs	r2, #0
 8001314:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <MX_TIM3_Init+0xa4>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800131c:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <MX_TIM3_Init+0xa4>)
 800131e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001322:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <MX_TIM3_Init+0xa4>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132a:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <MX_TIM3_Init+0xa4>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001330:	2301      	movs	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001338:	2301      	movs	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001348:	2301      	movs	r3, #1
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4619      	mov	r1, r3
 800135a:	480d      	ldr	r0, [pc, #52]	@ (8001390 <MX_TIM3_Init+0xa4>)
 800135c:	f005 fb0c 	bl	8006978 <HAL_TIM_Encoder_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001366:	f001 f969 	bl	800263c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	@ (8001390 <MX_TIM3_Init+0xa4>)
 8001378:	f006 fa46 	bl	8007808 <HAL_TIMEx_MasterConfigSynchronization>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001382:	f001 f95b 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	3730      	adds	r7, #48	@ 0x30
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200002a8 	.word	0x200002a8
 8001394:	40000400 	.word	0x40000400

08001398 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	@ 0x30
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	2224      	movs	r2, #36	@ 0x24
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f009 f9b9 	bl	800a71e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	463b      	mov	r3, r7
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013b6:	4b21      	ldr	r3, [pc, #132]	@ (800143c <MX_TIM4_Init+0xa4>)
 80013b8:	4a21      	ldr	r2, [pc, #132]	@ (8001440 <MX_TIM4_Init+0xa8>)
 80013ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <MX_TIM4_Init+0xa4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	@ (800143c <MX_TIM4_Init+0xa4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <MX_TIM4_Init+0xa4>)
 80013ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <MX_TIM4_Init+0xa4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <MX_TIM4_Init+0xa4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013dc:	2303      	movs	r3, #3
 80013de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013e4:	2301      	movs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013f4:	2301      	movs	r3, #1
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	4619      	mov	r1, r3
 8001406:	480d      	ldr	r0, [pc, #52]	@ (800143c <MX_TIM4_Init+0xa4>)
 8001408:	f005 fab6 	bl	8006978 <HAL_TIM_Encoder_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001412:	f001 f913 	bl	800263c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	4806      	ldr	r0, [pc, #24]	@ (800143c <MX_TIM4_Init+0xa4>)
 8001424:	f006 f9f0 	bl	8007808 <HAL_TIMEx_MasterConfigSynchronization>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800142e:	f001 f905 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	3730      	adds	r7, #48	@ 0x30
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200002f4 	.word	0x200002f4
 8001440:	40000800 	.word	0x40000800

08001444 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	@ 0x30
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	2224      	movs	r2, #36	@ 0x24
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f009 f963 	bl	800a71e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001462:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <MX_TIM8_Init+0xac>)
 8001464:	4a23      	ldr	r2, [pc, #140]	@ (80014f4 <MX_TIM8_Init+0xb0>)
 8001466:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001468:	4b21      	ldr	r3, [pc, #132]	@ (80014f0 <MX_TIM8_Init+0xac>)
 800146a:	2200      	movs	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <MX_TIM8_Init+0xac>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001474:	4b1e      	ldr	r3, [pc, #120]	@ (80014f0 <MX_TIM8_Init+0xac>)
 8001476:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800147a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <MX_TIM8_Init+0xac>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001482:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <MX_TIM8_Init+0xac>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001488:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <MX_TIM8_Init+0xac>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800148e:	2303      	movs	r3, #3
 8001490:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001496:	2301      	movs	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014a6:	2301      	movs	r3, #1
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	4619      	mov	r1, r3
 80014b8:	480d      	ldr	r0, [pc, #52]	@ (80014f0 <MX_TIM8_Init+0xac>)
 80014ba:	f005 fa5d 	bl	8006978 <HAL_TIM_Encoder_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80014c4:	f001 f8ba 	bl	800263c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014d4:	463b      	mov	r3, r7
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_TIM8_Init+0xac>)
 80014da:	f006 f995 	bl	8007808 <HAL_TIMEx_MasterConfigSynchronization>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80014e4:	f001 f8aa 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3730      	adds	r7, #48	@ 0x30
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000340 	.word	0x20000340
 80014f4:	40013400 	.word	0x40013400

080014f8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <MX_TIM16_Init+0x44>)
 80014fe:	4a10      	ldr	r2, [pc, #64]	@ (8001540 <MX_TIM16_Init+0x48>)
 8001500:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = APB2_FREQ / TIM16_FREQ - 1;
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MX_TIM16_Init+0x44>)
 8001504:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8001508:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150a:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <MX_TIM16_Init+0x44>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_FREQ / ENCODER_SAMPLE_FREQ -1;
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <MX_TIM16_Init+0x44>)
 8001512:	22c7      	movs	r2, #199	@ 0xc7
 8001514:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <MX_TIM16_Init+0x44>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800151c:	4b07      	ldr	r3, [pc, #28]	@ (800153c <MX_TIM16_Init+0x44>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <MX_TIM16_Init+0x44>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	@ (800153c <MX_TIM16_Init+0x44>)
 800152a:	f004 fff9 	bl	8006520 <HAL_TIM_Base_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001534:	f001 f882 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	2000038c 	.word	0x2000038c
 8001540:	40014400 	.word	0x40014400

08001544 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001548:	4b14      	ldr	r3, [pc, #80]	@ (800159c <MX_USART3_UART_Init+0x58>)
 800154a:	4a15      	ldr	r2, [pc, #84]	@ (80015a0 <MX_USART3_UART_Init+0x5c>)
 800154c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800154e:	4b13      	ldr	r3, [pc, #76]	@ (800159c <MX_USART3_UART_Init+0x58>)
 8001550:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001554:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <MX_USART3_UART_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <MX_USART3_UART_Init+0x58>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <MX_USART3_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <MX_USART3_UART_Init+0x58>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <MX_USART3_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <MX_USART3_UART_Init+0x58>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <MX_USART3_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <MX_USART3_UART_Init+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	@ (800159c <MX_USART3_UART_Init+0x58>)
 8001588:	f006 f9e8 	bl	800795c <HAL_UART_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001592:	f001 f853 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200003d8 	.word	0x200003d8
 80015a0:	40004800 	.word	0x40004800

080015a4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <MX_USB_PCD_Init+0x44>)
 80015aa:	4a10      	ldr	r2, [pc, #64]	@ (80015ec <MX_USB_PCD_Init+0x48>)
 80015ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <MX_USB_PCD_Init+0x44>)
 80015b0:	2208      	movs	r2, #8
 80015b2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <MX_USB_PCD_Init+0x44>)
 80015b6:	2202      	movs	r2, #2
 80015b8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <MX_USB_PCD_Init+0x44>)
 80015bc:	2202      	movs	r2, #2
 80015be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80015c0:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <MX_USB_PCD_Init+0x44>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <MX_USB_PCD_Init+0x44>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <MX_USB_PCD_Init+0x44>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <MX_USB_PCD_Init+0x44>)
 80015d4:	f001 ff42 	bl	800345c <HAL_PCD_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80015de:	f001 f82d 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000460 	.word	0x20000460
 80015ec:	40005c00 	.word	0x40005c00

080015f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	@ 0x30
 80015f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001606:	4b6b      	ldr	r3, [pc, #428]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	4a6a      	ldr	r2, [pc, #424]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 800160c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001610:	6153      	str	r3, [r2, #20]
 8001612:	4b68      	ldr	r3, [pc, #416]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161e:	4b65      	ldr	r3, [pc, #404]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	4a64      	ldr	r2, [pc, #400]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 8001624:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001628:	6153      	str	r3, [r2, #20]
 800162a:	4b62      	ldr	r3, [pc, #392]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001636:	4b5f      	ldr	r3, [pc, #380]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	4a5e      	ldr	r2, [pc, #376]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 800163c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001640:	6153      	str	r3, [r2, #20]
 8001642:	4b5c      	ldr	r3, [pc, #368]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4b59      	ldr	r3, [pc, #356]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	4a58      	ldr	r2, [pc, #352]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 8001654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001658:	6153      	str	r3, [r2, #20]
 800165a:	4b56      	ldr	r3, [pc, #344]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	4b53      	ldr	r3, [pc, #332]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4a52      	ldr	r2, [pc, #328]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 800166c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001670:	6153      	str	r3, [r2, #20]
 8001672:	4b50      	ldr	r3, [pc, #320]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800167e:	4b4d      	ldr	r3, [pc, #308]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	4a4c      	ldr	r2, [pc, #304]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 8001684:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001688:	6153      	str	r3, [r2, #20]
 800168a:	4b4a      	ldr	r3, [pc, #296]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001696:	4b47      	ldr	r3, [pc, #284]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	4a46      	ldr	r2, [pc, #280]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 800169c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016a0:	6153      	str	r3, [r2, #20]
 80016a2:	4b44      	ldr	r3, [pc, #272]	@ (80017b4 <MX_GPIO_Init+0x1c4>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2130      	movs	r1, #48	@ 0x30
 80016b2:	4841      	ldr	r0, [pc, #260]	@ (80017b8 <MX_GPIO_Init+0x1c8>)
 80016b4:	f001 fea0 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f244 3101 	movw	r1, #17153	@ 0x4301
 80016be:	483f      	ldr	r0, [pc, #252]	@ (80017bc <MX_GPIO_Init+0x1cc>)
 80016c0:	f001 fe9a 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80016ca:	483d      	ldr	r0, [pc, #244]	@ (80017c0 <MX_GPIO_Init+0x1d0>)
 80016cc:	f001 fe94 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	214e      	movs	r1, #78	@ 0x4e
 80016d4:	483b      	ldr	r0, [pc, #236]	@ (80017c4 <MX_GPIO_Init+0x1d4>)
 80016d6:	f001 fe8f 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80016e0:	4839      	ldr	r0, [pc, #228]	@ (80017c8 <MX_GPIO_Init+0x1d8>)
 80016e2:	f001 fe89 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016e6:	2330      	movs	r3, #48	@ 0x30
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	482e      	ldr	r0, [pc, #184]	@ (80017b8 <MX_GPIO_Init+0x1c8>)
 80016fe:	f001 fcf1 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001702:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001708:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800170c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	482b      	ldr	r0, [pc, #172]	@ (80017c8 <MX_GPIO_Init+0x1d8>)
 800171a:	f001 fce3 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_8|GPIO_PIN_9;
 800171e:	f244 3301 	movw	r3, #17153	@ 0x4301
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	4821      	ldr	r0, [pc, #132]	@ (80017bc <MX_GPIO_Init+0x1cc>)
 8001738:	f001 fcd4 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800173c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	481a      	ldr	r0, [pc, #104]	@ (80017c0 <MX_GPIO_Init+0x1d0>)
 8001756:	f001 fcc5 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG2 PG3 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|USB_PowerSwitchOn_Pin;
 800175a:	234e      	movs	r3, #78	@ 0x4e
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	4619      	mov	r1, r3
 8001770:	4814      	ldr	r0, [pc, #80]	@ (80017c4 <MX_GPIO_Init+0x1d4>)
 8001772:	f001 fcb7 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001776:	2380      	movs	r3, #128	@ 0x80
 8001778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	480e      	ldr	r0, [pc, #56]	@ (80017c4 <MX_GPIO_Init+0x1d4>)
 800178a:	f001 fcab 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800178e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001794:	2301      	movs	r3, #1
 8001796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	4619      	mov	r1, r3
 80017a6:	4808      	ldr	r0, [pc, #32]	@ (80017c8 <MX_GPIO_Init+0x1d8>)
 80017a8:	f001 fc9c 	bl	80030e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ac:	bf00      	nop
 80017ae:	3730      	adds	r7, #48	@ 0x30
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000
 80017b8:	48001000 	.word	0x48001000
 80017bc:	48000400 	.word	0x48000400
 80017c0:	48001400 	.word	0x48001400
 80017c4:	48001800 	.word	0x48001800
 80017c8:	48000800 	.word	0x48000800

080017cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) {
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1c      	ldr	r2, [pc, #112]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d132      	bne.n	8001844 <HAL_TIM_PeriodElapsedCallback+0x78>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80017de:	2101      	movs	r1, #1
 80017e0:	481b      	ldr	r0, [pc, #108]	@ (8001850 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017e2:	f001 fe21 	bl	8003428 <HAL_GPIO_TogglePin>
		float time_gap = (float) (HAL_GetTick() - last_interrupt_time) / 1000.0;
 80017e6:	f001 fb3b 	bl	8002e60 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017fa:	ee17 0a90 	vmov	r0, s15
 80017fe:	f7fe feab 	bl	8000558 <__aeabi_f2d>
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001808:	f7ff f828 	bl	800085c <__aeabi_ddiv>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff f9d0 	bl	8000bb8 <__aeabi_d2f>
 8001818:	4603      	mov	r3, r0
 800181a:	60fb      	str	r3, [r7, #12]
		if (time_gap < EPSILON) {
 800181c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800185c <HAL_TIM_PeriodElapsedCallback+0x90>
 8001820:	edd7 7a03 	vldr	s15, [r7, #12]
 8001824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182c:	d501      	bpl.n	8001832 <HAL_TIM_PeriodElapsedCallback+0x66>
			time_gap = EPSILON;
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001830:	60fb      	str	r3, [r7, #12]
		}

		last_interrupt_time = HAL_GetTick();
 8001832:	f001 fb15 	bl	8002e60 <HAL_GetTick>
 8001836:	4603      	mov	r3, r0
 8001838:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800183a:	6013      	str	r3, [r2, #0]
		compute_control(time_gap);
 800183c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001840:	f000 f93a 	bl	8001ab8 <compute_control>
//		}
//		if (duty_cycle_lb > TIM2_PRD) {
//			duty_cycle_lb = TIM2_PRD;
//		}
	}
}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40014400 	.word	0x40014400
 8001850:	48000400 	.word	0x48000400
 8001854:	20000734 	.word	0x20000734
 8001858:	408f4000 	.word	0x408f4000
 800185c:	3a83126f 	.word	0x3a83126f
 8001860:	3a83126f 	.word	0x3a83126f

08001864 <pwm_mapping>:

int pwm_mapping(int duty_cycle) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
//	if(duty_cycle < PWM_MIN) {
//		return PWM_MIN;
//	}
	return (int) ((float) duty_cycle / (float) TIM2_PRD
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	ee07 3a90 	vmov	s15, r3
 8001872:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001876:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80018b8 <pwm_mapping+0x54>
 800187a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			* (float) (TIM2_PRD - PWM_MIN) + (float) PWM_MIN);
 8001882:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001886:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001898:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80018bc <pwm_mapping+0x58>
 800189c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a0:	ee77 7a27 	vadd.f32	s15, s14, s15
	return (int) ((float) duty_cycle / (float) TIM2_PRD
 80018a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a8:	ee17 3a90 	vmov	r3, s15
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	000003e7 	.word	0x000003e7
 80018bc:	00000258 	.word	0x00000258

080018c0 <motor_control>:

void motor_control(int motor, int control, float v_desired) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_cycle = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
	if (fabs(v_desired) > DEAD_BAND) {
 80018d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d6:	eef0 7ae7 	vabs.f32	s15, s15
 80018da:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80019c4 <motor_control+0x104>
 80018de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	dd29      	ble.n	800193c <motor_control+0x7c>
		if (control > 0) {
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	dd1e      	ble.n	800192c <motor_control+0x6c>
			duty_cycle = control;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	617b      	str	r3, [r7, #20]
			if (v_desired > 0) {
 80018f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	dd0a      	ble.n	8001916 <motor_control+0x56>
				set_direction(motor, FORWARD);
 8001900:	2301      	movs	r3, #1
 8001902:	4619      	mov	r1, r3
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 f86b 	bl	80019e0 <set_direction>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800190a:	2201      	movs	r2, #1
 800190c:	2101      	movs	r1, #1
 800190e:	482e      	ldr	r0, [pc, #184]	@ (80019c8 <motor_control+0x108>)
 8001910:	f001 fd72 	bl	80033f8 <HAL_GPIO_WritePin>
 8001914:	e017      	b.n	8001946 <motor_control+0x86>
			} else {
				set_direction(motor, BACKWARD);
 8001916:	2302      	movs	r3, #2
 8001918:	4619      	mov	r1, r3
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 f860 	bl	80019e0 <set_direction>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	2101      	movs	r1, #1
 8001924:	4828      	ldr	r0, [pc, #160]	@ (80019c8 <motor_control+0x108>)
 8001926:	f001 fd67 	bl	80033f8 <HAL_GPIO_WritePin>
 800192a:	e00c      	b.n	8001946 <motor_control+0x86>
			}
		} else {
			duty_cycle = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
			set_direction(motor, BREAK);
 8001930:	2303      	movs	r3, #3
 8001932:	4619      	mov	r1, r3
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 f853 	bl	80019e0 <set_direction>
 800193a:	e004      	b.n	8001946 <motor_control+0x86>
		}
	} else {
		set_direction(motor, BREAK);
 800193c:	2303      	movs	r3, #3
 800193e:	4619      	mov	r1, r3
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f84d 	bl	80019e0 <set_direction>
	}

	if (duty_cycle > TIM2_PRD) {
 8001946:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	4293      	cmp	r3, r2
 800194e:	dd02      	ble.n	8001956 <motor_control+0x96>
		duty_cycle = TIM2_PRD;
 8001950:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001954:	617b      	str	r3, [r7, #20]
	}

	duty_cycle = pwm_mapping(duty_cycle);
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff84 	bl	8001864 <pwm_mapping>
 800195c:	6178      	str	r0, [r7, #20]
	if (motor == LB) {
 800195e:	2200      	movs	r2, #0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4293      	cmp	r3, r2
 8001964:	d107      	bne.n	8001976 <motor_control+0xb6>
		duty_cycle_lb = duty_cycle;
 8001966:	4a19      	ldr	r2, [pc, #100]	@ (80019cc <motor_control+0x10c>)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 800196c:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <motor_control+0x110>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	63da      	str	r2, [r3, #60]	@ 0x3c
	else if (motor == RF) {
		duty_cycle_rf = duty_cycle;
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);

	}
}
 8001974:	e022      	b.n	80019bc <motor_control+0xfc>
	else if (motor == RB) {
 8001976:	2201      	movs	r2, #1
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4293      	cmp	r3, r2
 800197c:	d107      	bne.n	800198e <motor_control+0xce>
		duty_cycle_rb = duty_cycle;
 800197e:	4a15      	ldr	r2, [pc, #84]	@ (80019d4 <motor_control+0x114>)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycle);
 8001984:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <motor_control+0x110>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800198c:	e016      	b.n	80019bc <motor_control+0xfc>
	else if (motor == LF) {
 800198e:	2202      	movs	r2, #2
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4293      	cmp	r3, r2
 8001994:	d107      	bne.n	80019a6 <motor_control+0xe6>
		duty_cycle_lf = duty_cycle;
 8001996:	4a10      	ldr	r2, [pc, #64]	@ (80019d8 <motor_control+0x118>)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 800199c:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <motor_control+0x110>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80019a4:	e00a      	b.n	80019bc <motor_control+0xfc>
	else if (motor == RF) {
 80019a6:	2203      	movs	r2, #3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d106      	bne.n	80019bc <motor_control+0xfc>
		duty_cycle_rf = duty_cycle;
 80019ae:	4a0b      	ldr	r2, [pc, #44]	@ (80019dc <motor_control+0x11c>)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <motor_control+0x110>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80019bc:	bf00      	nop
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	3d4ccccd 	.word	0x3d4ccccd
 80019c8:	48000400 	.word	0x48000400
 80019cc:	20000738 	.word	0x20000738
 80019d0:	2000025c 	.word	0x2000025c
 80019d4:	2000073c 	.word	0x2000073c
 80019d8:	20000740 	.word	0x20000740
 80019dc:	20000744 	.word	0x20000744

080019e0 <set_direction>:

void set_direction(int motor, int direction) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
	if (motor == LB){
 80019ea:	2200      	movs	r2, #0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d114      	bne.n	8001a1c <set_direction+0x3c>
		if (direction == FORWARD) {
 80019f2:	2201      	movs	r2, #1
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d102      	bne.n	8001a00 <set_direction+0x20>
			lb_forward();
 80019fa:	f7ff f999 	bl	8000d30 <lb_forward>
		}
		else if (direction == BREAK) {
			rf_stop();
		}
	}
}
 80019fe:	e057      	b.n	8001ab0 <set_direction+0xd0>
		else if (direction == BACKWARD) {
 8001a00:	2202      	movs	r2, #2
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d102      	bne.n	8001a0e <set_direction+0x2e>
			lb_backward();
 8001a08:	f7ff f9a4 	bl	8000d54 <lb_backward>
}
 8001a0c:	e050      	b.n	8001ab0 <set_direction+0xd0>
		else if (direction == BREAK) {
 8001a0e:	2203      	movs	r2, #3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d14c      	bne.n	8001ab0 <set_direction+0xd0>
			lb_stop();
 8001a16:	f7ff f9af 	bl	8000d78 <lb_stop>
}
 8001a1a:	e049      	b.n	8001ab0 <set_direction+0xd0>
	else if (motor == RB) {
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d114      	bne.n	8001a4e <set_direction+0x6e>
		if (direction == FORWARD) {
 8001a24:	2201      	movs	r2, #1
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d102      	bne.n	8001a32 <set_direction+0x52>
			rb_forward();
 8001a2c:	f7ff f9b6 	bl	8000d9c <rb_forward>
}
 8001a30:	e03e      	b.n	8001ab0 <set_direction+0xd0>
		else if (direction == BACKWARD) {
 8001a32:	2202      	movs	r2, #2
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d102      	bne.n	8001a40 <set_direction+0x60>
			rb_backward();
 8001a3a:	f7ff f9bf 	bl	8000dbc <rb_backward>
}
 8001a3e:	e037      	b.n	8001ab0 <set_direction+0xd0>
		else if (direction == BREAK) {
 8001a40:	2203      	movs	r2, #3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d133      	bne.n	8001ab0 <set_direction+0xd0>
			rb_stop();
 8001a48:	f7ff f9c8 	bl	8000ddc <rb_stop>
}
 8001a4c:	e030      	b.n	8001ab0 <set_direction+0xd0>
	else if (motor == LF) {
 8001a4e:	2202      	movs	r2, #2
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d114      	bne.n	8001a80 <set_direction+0xa0>
		if (direction == FORWARD) {
 8001a56:	2201      	movs	r2, #1
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d102      	bne.n	8001a64 <set_direction+0x84>
			lf_forward();
 8001a5e:	f7ff f9cd 	bl	8000dfc <lf_forward>
}
 8001a62:	e025      	b.n	8001ab0 <set_direction+0xd0>
		} else if (direction == BACKWARD) {
 8001a64:	2202      	movs	r2, #2
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d102      	bne.n	8001a72 <set_direction+0x92>
			lf_backward();
 8001a6c:	f7ff f9d8 	bl	8000e20 <lf_backward>
}
 8001a70:	e01e      	b.n	8001ab0 <set_direction+0xd0>
		} else if (direction == BREAK) {
 8001a72:	2203      	movs	r2, #3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d11a      	bne.n	8001ab0 <set_direction+0xd0>
			lf_stop();
 8001a7a:	f7ff f9e3 	bl	8000e44 <lf_stop>
}
 8001a7e:	e017      	b.n	8001ab0 <set_direction+0xd0>
	else if (motor == RF) {
 8001a80:	2203      	movs	r2, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d113      	bne.n	8001ab0 <set_direction+0xd0>
		if (direction == FORWARD) {
 8001a88:	2201      	movs	r2, #1
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d102      	bne.n	8001a96 <set_direction+0xb6>
			rf_forward();
 8001a90:	f7ff f9ea 	bl	8000e68 <rf_forward>
}
 8001a94:	e00c      	b.n	8001ab0 <set_direction+0xd0>
		else if (direction == BACKWARD) {
 8001a96:	2202      	movs	r2, #2
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d102      	bne.n	8001aa4 <set_direction+0xc4>
			rf_backward();
 8001a9e:	f7ff f9f3 	bl	8000e88 <rf_backward>
}
 8001aa2:	e005      	b.n	8001ab0 <set_direction+0xd0>
		else if (direction == BREAK) {
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d101      	bne.n	8001ab0 <set_direction+0xd0>
			rf_stop();
 8001aac:	f7ff f9fc 	bl	8000ea8 <rf_stop>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <compute_control>:
void reset_pid(void) {
	lb_integral = 0.0;
	lb_previous_err = 0.0;
}

void compute_control(float time_gap) {
 8001ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001abc:	b0df      	sub	sp, #380	@ 0x17c
 8001abe:	af10      	add	r7, sp, #64	@ 0x40
 8001ac0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ac4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ac8:	ed83 0a00 	vstr	s0, [r3]
	int lb_control = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	int rb_control = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	int lf_control = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	int rf_control = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	const float Kp = 1000, Ki = 7500, Kd = 0.0;
 8001ae4:	4be5      	ldr	r3, [pc, #916]	@ (8001e7c <compute_control+0x3c4>)
 8001ae6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001aea:	4be5      	ldr	r3, [pc, #916]	@ (8001e80 <compute_control+0x3c8>)
 8001aec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

	if (v_desired > V_MAX) {
 8001af8:	4be2      	ldr	r3, [pc, #904]	@ (8001e84 <compute_control+0x3cc>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	dd03      	ble.n	8001b14 <compute_control+0x5c>
		v_desired = V_MAX;
 8001b0c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b10:	4bdc      	ldr	r3, [pc, #880]	@ (8001e84 <compute_control+0x3cc>)
 8001b12:	601a      	str	r2, [r3, #0]
	}

	compute_ideal_speed(v_desired, w_desired, &lb_speed_ideal,
 8001b14:	4bdb      	ldr	r3, [pc, #876]	@ (8001e84 <compute_control+0x3cc>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	4bdb      	ldr	r3, [pc, #876]	@ (8001e88 <compute_control+0x3d0>)
 8001b1c:	ed93 7a00 	vldr	s14, [r3]
 8001b20:	4bda      	ldr	r3, [pc, #872]	@ (8001e8c <compute_control+0x3d4>)
 8001b22:	4adb      	ldr	r2, [pc, #876]	@ (8001e90 <compute_control+0x3d8>)
 8001b24:	49db      	ldr	r1, [pc, #876]	@ (8001e94 <compute_control+0x3dc>)
 8001b26:	48dc      	ldr	r0, [pc, #880]	@ (8001e98 <compute_control+0x3e0>)
 8001b28:	eef0 0a47 	vmov.f32	s1, s14
 8001b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b30:	f7ff f892 	bl	8000c58 <compute_ideal_speed>
			&rb_speed_ideal, &lf_speed_ideal, &rf_speed_ideal);

	// compute control for left side
	lb_speed_real = compute_real_speed(time_gap, LB);
 8001b34:	2200      	movs	r2, #0
 8001b36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b3e:	4610      	mov	r0, r2
 8001b40:	ed93 0a00 	vldr	s0, [r3]
 8001b44:	f000 fbf8 	bl	8002338 <compute_real_speed>
 8001b48:	eef0 7a40 	vmov.f32	s15, s0
 8001b4c:	4bd3      	ldr	r3, [pc, #844]	@ (8001e9c <compute_control+0x3e4>)
 8001b4e:	edc3 7a00 	vstr	s15, [r3]
	float lb_error = fabs(lb_speed_ideal) - fabs(lb_speed_real);
 8001b52:	4bd1      	ldr	r3, [pc, #836]	@ (8001e98 <compute_control+0x3e0>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	eef0 7ae7 	vabs.f32	s15, s15
 8001b5c:	ee17 0a90 	vmov	r0, s15
 8001b60:	f7fe fcfa 	bl	8000558 <__aeabi_f2d>
 8001b64:	4604      	mov	r4, r0
 8001b66:	460d      	mov	r5, r1
 8001b68:	4bcc      	ldr	r3, [pc, #816]	@ (8001e9c <compute_control+0x3e4>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	eef0 7ae7 	vabs.f32	s15, s15
 8001b72:	ee17 0a90 	vmov	r0, s15
 8001b76:	f7fe fcef 	bl	8000558 <__aeabi_f2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4620      	mov	r0, r4
 8001b80:	4629      	mov	r1, r5
 8001b82:	f7fe fb89 	bl	8000298 <__aeabi_dsub>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7ff f813 	bl	8000bb8 <__aeabi_d2f>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	lb_integral += lb_error * time_gap;
 8001b98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ba0:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bac:	4bbc      	ldr	r3, [pc, #752]	@ (8001ea0 <compute_control+0x3e8>)
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb6:	4bba      	ldr	r3, [pc, #744]	@ (8001ea0 <compute_control+0x3e8>)
 8001bb8:	edc3 7a00 	vstr	s15, [r3]
	float lb_derivative = (lb_error - lb_previous_err) / time_gap;
 8001bbc:	4bb9      	ldr	r3, [pc, #740]	@ (8001ea4 <compute_control+0x3ec>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8001bc6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001bce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bd2:	ed93 7a00 	vldr	s14, [r3]
 8001bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bda:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114
	lb_previous_err = lb_error;
 8001bde:	4ab1      	ldr	r2, [pc, #708]	@ (8001ea4 <compute_control+0x3ec>)
 8001be0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001be4:	6013      	str	r3, [r2, #0]
	lb_control = (int) (Kp * lb_error + Ki * lb_integral
 8001be6:	ed97 7a49 	vldr	s14, [r7, #292]	@ 0x124
 8001bea:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8001bee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf2:	4bab      	ldr	r3, [pc, #684]	@ (8001ea0 <compute_control+0x3e8>)
 8001bf4:	edd3 6a00 	vldr	s13, [r3]
 8001bf8:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8001bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c00:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * lb_derivative);
 8001c04:	edd7 6a47 	vldr	s13, [r7, #284]	@ 0x11c
 8001c08:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8001c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
	lb_control = (int) (Kp * lb_error + Ki * lb_integral
 8001c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c18:	ee17 3a90 	vmov	r3, s15
 8001c1c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

	lf_speed_real = compute_real_speed(time_gap, LF);
 8001c20:	2202      	movs	r2, #2
 8001c22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001c26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	ed93 0a00 	vldr	s0, [r3]
 8001c30:	f000 fb82 	bl	8002338 <compute_real_speed>
 8001c34:	eef0 7a40 	vmov.f32	s15, s0
 8001c38:	4b9b      	ldr	r3, [pc, #620]	@ (8001ea8 <compute_control+0x3f0>)
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
	float lf_error = fabs(lf_speed_ideal) - fabs(lf_speed_real);
 8001c3e:	4b94      	ldr	r3, [pc, #592]	@ (8001e90 <compute_control+0x3d8>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	eef0 7ae7 	vabs.f32	s15, s15
 8001c48:	ee17 0a90 	vmov	r0, s15
 8001c4c:	f7fe fc84 	bl	8000558 <__aeabi_f2d>
 8001c50:	4604      	mov	r4, r0
 8001c52:	460d      	mov	r5, r1
 8001c54:	4b94      	ldr	r3, [pc, #592]	@ (8001ea8 <compute_control+0x3f0>)
 8001c56:	edd3 7a00 	vldr	s15, [r3]
 8001c5a:	eef0 7ae7 	vabs.f32	s15, s15
 8001c5e:	ee17 0a90 	vmov	r0, s15
 8001c62:	f7fe fc79 	bl	8000558 <__aeabi_f2d>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	f7fe fb13 	bl	8000298 <__aeabi_dsub>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe ff9d 	bl	8000bb8 <__aeabi_d2f>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	lf_integral += lf_error * time_gap;
 8001c84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001c88:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c8c:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c98:	4b84      	ldr	r3, [pc, #528]	@ (8001eac <compute_control+0x3f4>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca2:	4b82      	ldr	r3, [pc, #520]	@ (8001eac <compute_control+0x3f4>)
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
	float lf_derivative = (lf_error - lf_previous_err) / time_gap;
 8001ca8:	4b81      	ldr	r3, [pc, #516]	@ (8001eb0 <compute_control+0x3f8>)
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 8001cb2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001cba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cbe:	ed93 7a00 	vldr	s14, [r3]
 8001cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc6:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
	lf_previous_err = lf_error;
 8001cca:	4a79      	ldr	r2, [pc, #484]	@ (8001eb0 <compute_control+0x3f8>)
 8001ccc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001cd0:	6013      	str	r3, [r2, #0]
	lf_control = (int) (Kp * lf_error + Ki * lf_integral
 8001cd2:	ed97 7a49 	vldr	s14, [r7, #292]	@ 0x124
 8001cd6:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8001cda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cde:	4b73      	ldr	r3, [pc, #460]	@ (8001eac <compute_control+0x3f4>)
 8001ce0:	edd3 6a00 	vldr	s13, [r3]
 8001ce4:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8001ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cec:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * lf_derivative);
 8001cf0:	edd7 6a47 	vldr	s13, [r7, #284]	@ 0x11c
 8001cf4:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8001cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
	lf_control = (int) (Kp * lf_error + Ki * lf_integral
 8001d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d04:	ee17 3a90 	vmov	r3, s15
 8001d08:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	//compute control for right speed
	rb_speed_real = compute_real_speed(time_gap, RB);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d16:	4610      	mov	r0, r2
 8001d18:	ed93 0a00 	vldr	s0, [r3]
 8001d1c:	f000 fb0c 	bl	8002338 <compute_real_speed>
 8001d20:	eef0 7a40 	vmov.f32	s15, s0
 8001d24:	4b63      	ldr	r3, [pc, #396]	@ (8001eb4 <compute_control+0x3fc>)
 8001d26:	edc3 7a00 	vstr	s15, [r3]
	float rb_error = fabs(rb_speed_ideal) - fabs(rb_speed_real);
 8001d2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001e94 <compute_control+0x3dc>)
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	eef0 7ae7 	vabs.f32	s15, s15
 8001d34:	ee17 0a90 	vmov	r0, s15
 8001d38:	f7fe fc0e 	bl	8000558 <__aeabi_f2d>
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	460d      	mov	r5, r1
 8001d40:	4b5c      	ldr	r3, [pc, #368]	@ (8001eb4 <compute_control+0x3fc>)
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	eef0 7ae7 	vabs.f32	s15, s15
 8001d4a:	ee17 0a90 	vmov	r0, s15
 8001d4e:	f7fe fc03 	bl	8000558 <__aeabi_f2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4620      	mov	r0, r4
 8001d58:	4629      	mov	r1, r5
 8001d5a:	f7fe fa9d 	bl	8000298 <__aeabi_dsub>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7fe ff27 	bl	8000bb8 <__aeabi_d2f>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	rb_integral += rb_error * time_gap;
 8001d70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d78:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d84:	4b4c      	ldr	r3, [pc, #304]	@ (8001eb8 <compute_control+0x400>)
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb8 <compute_control+0x400>)
 8001d90:	edc3 7a00 	vstr	s15, [r3]
	float rb_derivative = (rb_error - rb_previous_err) / time_gap;
 8001d94:	4b49      	ldr	r3, [pc, #292]	@ (8001ebc <compute_control+0x404>)
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 8001d9e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001da2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001da6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001daa:	ed93 7a00 	vldr	s14, [r3]
 8001dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db2:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
	rb_previous_err = rb_error;
 8001db6:	4a41      	ldr	r2, [pc, #260]	@ (8001ebc <compute_control+0x404>)
 8001db8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001dbc:	6013      	str	r3, [r2, #0]
	rb_control = (int) (Kp * rb_error + Ki * rb_integral
 8001dbe:	ed97 7a49 	vldr	s14, [r7, #292]	@ 0x124
 8001dc2:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8001dc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dca:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb8 <compute_control+0x400>)
 8001dcc:	edd3 6a00 	vldr	s13, [r3]
 8001dd0:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8001dd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd8:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * rb_derivative);
 8001ddc:	edd7 6a47 	vldr	s13, [r7, #284]	@ 0x11c
 8001de0:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8001de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de8:	ee77 7a27 	vadd.f32	s15, s14, s15
	rb_control = (int) (Kp * rb_error + Ki * rb_integral
 8001dec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001df0:	ee17 3a90 	vmov	r3, s15
 8001df4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	rf_speed_real = compute_real_speed(time_gap, RF);
 8001df8:	2203      	movs	r2, #3
 8001dfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001dfe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e02:	4610      	mov	r0, r2
 8001e04:	ed93 0a00 	vldr	s0, [r3]
 8001e08:	f000 fa96 	bl	8002338 <compute_real_speed>
 8001e0c:	eef0 7a40 	vmov.f32	s15, s0
 8001e10:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec0 <compute_control+0x408>)
 8001e12:	edc3 7a00 	vstr	s15, [r3]
	float rf_error = fabs(rf_speed_ideal) - fabs(rf_speed_real);
 8001e16:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <compute_control+0x3d4>)
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	eef0 7ae7 	vabs.f32	s15, s15
 8001e20:	ee17 0a90 	vmov	r0, s15
 8001e24:	f7fe fb98 	bl	8000558 <__aeabi_f2d>
 8001e28:	4604      	mov	r4, r0
 8001e2a:	460d      	mov	r5, r1
 8001e2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ec0 <compute_control+0x408>)
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	eef0 7ae7 	vabs.f32	s15, s15
 8001e36:	ee17 0a90 	vmov	r0, s15
 8001e3a:	f7fe fb8d 	bl	8000558 <__aeabi_f2d>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4620      	mov	r0, r4
 8001e44:	4629      	mov	r1, r5
 8001e46:	f7fe fa27 	bl	8000298 <__aeabi_dsub>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7fe feb1 	bl	8000bb8 <__aeabi_d2f>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	rf_integral += rf_error * time_gap;
 8001e5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e64:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e70:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <compute_control+0x40c>)
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7a:	e025      	b.n	8001ec8 <compute_control+0x410>
 8001e7c:	447a0000 	.word	0x447a0000
 8001e80:	45ea6000 	.word	0x45ea6000
 8001e84:	200007a0 	.word	0x200007a0
 8001e88:	200007a4 	.word	0x200007a4
 8001e8c:	2000077c 	.word	0x2000077c
 8001e90:	20000778 	.word	0x20000778
 8001e94:	20000774 	.word	0x20000774
 8001e98:	20000770 	.word	0x20000770
 8001e9c:	20000760 	.word	0x20000760
 8001ea0:	20000780 	.word	0x20000780
 8001ea4:	20000784 	.word	0x20000784
 8001ea8:	20000768 	.word	0x20000768
 8001eac:	20000790 	.word	0x20000790
 8001eb0:	20000794 	.word	0x20000794
 8001eb4:	20000764 	.word	0x20000764
 8001eb8:	20000788 	.word	0x20000788
 8001ebc:	2000078c 	.word	0x2000078c
 8001ec0:	2000076c 	.word	0x2000076c
 8001ec4:	20000798 	.word	0x20000798
 8001ec8:	4bba      	ldr	r3, [pc, #744]	@ (80021b4 <compute_control+0x6fc>)
 8001eca:	edc3 7a00 	vstr	s15, [r3]
	float rf_derivative = (rf_error - rf_previous_err) / time_gap;
 8001ece:	4bba      	ldr	r3, [pc, #744]	@ (80021b8 <compute_control+0x700>)
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8001ed8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001edc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ee0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ee4:	ed93 7a00 	vldr	s14, [r3]
 8001ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eec:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc
	rf_previous_err = rf_error;
 8001ef0:	4ab1      	ldr	r2, [pc, #708]	@ (80021b8 <compute_control+0x700>)
 8001ef2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001ef6:	6013      	str	r3, [r2, #0]
	rf_control = (int) (Kp * rf_error + Ki * rf_integral
 8001ef8:	ed97 7a49 	vldr	s14, [r7, #292]	@ 0x124
 8001efc:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8001f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f04:	4bab      	ldr	r3, [pc, #684]	@ (80021b4 <compute_control+0x6fc>)
 8001f06:	edd3 6a00 	vldr	s13, [r3]
 8001f0a:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8001f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f12:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * rf_derivative);
 8001f16:	edd7 6a47 	vldr	s13, [r7, #284]	@ 0x11c
 8001f1a:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8001f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f22:	ee77 7a27 	vadd.f32	s15, s14, s15
	rf_control = (int) (Kp * rf_error + Ki * rf_integral
 8001f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f2a:	ee17 3a90 	vmov	r3, s15
 8001f2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	motor_control(LB, lb_control, lb_speed_ideal);
 8001f32:	2200      	movs	r2, #0
 8001f34:	4ba1      	ldr	r3, [pc, #644]	@ (80021bc <compute_control+0x704>)
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3e:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8001f42:	4610      	mov	r0, r2
 8001f44:	f7ff fcbc 	bl	80018c0 <motor_control>
	motor_control(LF, lf_control, lf_speed_ideal);
 8001f48:	2202      	movs	r2, #2
 8001f4a:	4b9d      	ldr	r3, [pc, #628]	@ (80021c0 <compute_control+0x708>)
 8001f4c:	edd3 7a00 	vldr	s15, [r3]
 8001f50:	eeb0 0a67 	vmov.f32	s0, s15
 8001f54:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8001f58:	4610      	mov	r0, r2
 8001f5a:	f7ff fcb1 	bl	80018c0 <motor_control>
	motor_control(RB, rb_control, rb_speed_ideal);
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4b98      	ldr	r3, [pc, #608]	@ (80021c4 <compute_control+0x70c>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6a:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8001f6e:	4610      	mov	r0, r2
 8001f70:	f7ff fca6 	bl	80018c0 <motor_control>
	motor_control(RF, rf_control, rf_speed_ideal);
 8001f74:	2203      	movs	r2, #3
 8001f76:	4b94      	ldr	r3, [pc, #592]	@ (80021c8 <compute_control+0x710>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f80:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8001f84:	4610      	mov	r0, r2
 8001f86:	f7ff fc9b 	bl	80018c0 <motor_control>

	char temp_str[200];

	lb_count_current = __HAL_TIM_GET_COUNTER(&htim3);
 8001f8a:	4b90      	ldr	r3, [pc, #576]	@ (80021cc <compute_control+0x714>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f90:	4a8f      	ldr	r2, [pc, #572]	@ (80021d0 <compute_control+0x718>)
 8001f92:	6013      	str	r3, [r2, #0]
	rb_count_current = __HAL_TIM_GET_COUNTER(&htim4);
 8001f94:	4b8f      	ldr	r3, [pc, #572]	@ (80021d4 <compute_control+0x71c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	4a8f      	ldr	r2, [pc, #572]	@ (80021d8 <compute_control+0x720>)
 8001f9c:	6013      	str	r3, [r2, #0]

	sprintf(temp_str,
 8001f9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001fa2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	f7fe fad6 	bl	8000558 <__aeabi_f2d>
 8001fac:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001fb0:	4b8a      	ldr	r3, [pc, #552]	@ (80021dc <compute_control+0x724>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe facf 	bl	8000558 <__aeabi_f2d>
 8001fba:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001fbe:	4b88      	ldr	r3, [pc, #544]	@ (80021e0 <compute_control+0x728>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fac8 	bl	8000558 <__aeabi_f2d>
 8001fc8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001fcc:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8001fd0:	f7fe fac2 	bl	8000558 <__aeabi_f2d>
 8001fd4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001fd8:	4b82      	ldr	r3, [pc, #520]	@ (80021e4 <compute_control+0x72c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fabb 	bl	8000558 <__aeabi_f2d>
 8001fe2:	e9c7 0100 	strd	r0, r1, [r7]
 8001fe6:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8001fea:	f7fe fab5 	bl	8000558 <__aeabi_f2d>
 8001fee:	4682      	mov	sl, r0
 8001ff0:	468b      	mov	fp, r1
 8001ff2:	4b72      	ldr	r3, [pc, #456]	@ (80021bc <compute_control+0x704>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe faae 	bl	8000558 <__aeabi_f2d>
 8001ffc:	4680      	mov	r8, r0
 8001ffe:	4689      	mov	r9, r1
 8002000:	4b79      	ldr	r3, [pc, #484]	@ (80021e8 <compute_control+0x730>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe faa7 	bl	8000558 <__aeabi_f2d>
 800200a:	4604      	mov	r4, r0
 800200c:	460d      	mov	r5, r1
 800200e:	4b70      	ldr	r3, [pc, #448]	@ (80021d0 <compute_control+0x718>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b76      	ldr	r3, [pc, #472]	@ (80021ec <compute_control+0x734>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800201a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800201c:	920e      	str	r2, [sp, #56]	@ 0x38
 800201e:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8002022:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8002026:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800202a:	ed97 7b00 	vldr	d7, [r7]
 800202e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002032:	ed97 7b02 	vldr	d7, [r7, #8]
 8002036:	ed8d 7b04 	vstr	d7, [sp, #16]
 800203a:	ed97 7b04 	vldr	d7, [r7, #16]
 800203e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002042:	ed97 7b06 	vldr	d7, [r7, #24]
 8002046:	ed8d 7b00 	vstr	d7, [sp]
 800204a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800204e:	4968      	ldr	r1, [pc, #416]	@ (80021f0 <compute_control+0x738>)
 8002050:	f008 fb02 	bl	800a658 <siprintf>
			"[Δt: %6.2f s] v: %+6.2f | w: %+6.2f | err: %+6.2f | int: %+6.2f | der: %+6.2f | LB Ideal: %+6.2f | LB Real: %+6.2f | LB Control: %04u | LB Duty Cycle: %03d\r\n",
			time_gap, v_desired, w_desired, lb_error, lb_integral,
			lb_derivative, lb_speed_ideal, lb_speed_real, lb_count_current,
			duty_cycle_lb);
	log_to_uart(temp_str);
 8002054:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002058:	4618      	mov	r0, r3
 800205a:	f000 fad9 	bl	8002610 <log_to_uart>

	sprintf(temp_str,
 800205e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002062:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	f7fe fa76 	bl	8000558 <__aeabi_f2d>
 800206c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8002070:	4b5a      	ldr	r3, [pc, #360]	@ (80021dc <compute_control+0x724>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fa6f 	bl	8000558 <__aeabi_f2d>
 800207a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800207e:	4b58      	ldr	r3, [pc, #352]	@ (80021e0 <compute_control+0x728>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fa68 	bl	8000558 <__aeabi_f2d>
 8002088:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800208c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8002090:	f7fe fa62 	bl	8000558 <__aeabi_f2d>
 8002094:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002098:	4b56      	ldr	r3, [pc, #344]	@ (80021f4 <compute_control+0x73c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fa5b 	bl	8000558 <__aeabi_f2d>
 80020a2:	e9c7 0100 	strd	r0, r1, [r7]
 80020a6:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80020aa:	f7fe fa55 	bl	8000558 <__aeabi_f2d>
 80020ae:	4682      	mov	sl, r0
 80020b0:	468b      	mov	fp, r1
 80020b2:	4b44      	ldr	r3, [pc, #272]	@ (80021c4 <compute_control+0x70c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa4e 	bl	8000558 <__aeabi_f2d>
 80020bc:	4680      	mov	r8, r0
 80020be:	4689      	mov	r9, r1
 80020c0:	4b4d      	ldr	r3, [pc, #308]	@ (80021f8 <compute_control+0x740>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fa47 	bl	8000558 <__aeabi_f2d>
 80020ca:	4604      	mov	r4, r0
 80020cc:	460d      	mov	r5, r1
 80020ce:	4b42      	ldr	r3, [pc, #264]	@ (80021d8 <compute_control+0x720>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b4a      	ldr	r3, [pc, #296]	@ (80021fc <compute_control+0x744>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80020da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80020dc:	920e      	str	r2, [sp, #56]	@ 0x38
 80020de:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 80020e2:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 80020e6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80020ea:	ed97 7b00 	vldr	d7, [r7]
 80020ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80020f2:	ed97 7b02 	vldr	d7, [r7, #8]
 80020f6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80020fa:	ed97 7b04 	vldr	d7, [r7, #16]
 80020fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002102:	ed97 7b06 	vldr	d7, [r7, #24]
 8002106:	ed8d 7b00 	vstr	d7, [sp]
 800210a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800210e:	493c      	ldr	r1, [pc, #240]	@ (8002200 <compute_control+0x748>)
 8002110:	f008 faa2 	bl	800a658 <siprintf>
			"[Δt: %6.2f s] v: %+6.2f | w: %+6.2f | err: %+6.2f | int: %+6.2f | der: %+6.2f | RB Ideal: %+6.2f | RB Real: %+6.2f | RB Control: %04u | RB Duty Cycle: %03d\r\n",
			time_gap, v_desired, w_desired, rb_error, rb_integral,
			rb_derivative, rb_speed_ideal, rb_speed_real, rb_count_current,
			duty_cycle_rb);
	log_to_uart(temp_str);
 8002114:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fa79 	bl	8002610 <log_to_uart>

	sprintf(temp_str,
 800211e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002122:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	f7fe fa16 	bl	8000558 <__aeabi_f2d>
 800212c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8002130:	4b2a      	ldr	r3, [pc, #168]	@ (80021dc <compute_control+0x724>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fa0f 	bl	8000558 <__aeabi_f2d>
 800213a:	4605      	mov	r5, r0
 800213c:	460e      	mov	r6, r1
 800213e:	4b28      	ldr	r3, [pc, #160]	@ (80021e0 <compute_control+0x728>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa08 	bl	8000558 <__aeabi_f2d>
 8002148:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800214c:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8002150:	f7fe fa02 	bl	8000558 <__aeabi_f2d>
 8002154:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002158:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <compute_control+0x74c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe f9fb 	bl	8000558 <__aeabi_f2d>
 8002162:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002166:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800216a:	f7fe f9f5 	bl	8000558 <__aeabi_f2d>
 800216e:	4682      	mov	sl, r0
 8002170:	468b      	mov	fp, r1
 8002172:	4b13      	ldr	r3, [pc, #76]	@ (80021c0 <compute_control+0x708>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9ee 	bl	8000558 <__aeabi_f2d>
 800217c:	4680      	mov	r8, r0
 800217e:	4689      	mov	r9, r1
 8002180:	4b21      	ldr	r3, [pc, #132]	@ (8002208 <compute_control+0x750>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f9e7 	bl	8000558 <__aeabi_f2d>
 800218a:	4b20      	ldr	r3, [pc, #128]	@ (800220c <compute_control+0x754>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002192:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002194:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002198:	930e      	str	r3, [sp, #56]	@ 0x38
 800219a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800219e:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 80021a2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80021a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80021aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80021ae:	ed97 7b04 	vldr	d7, [r7, #16]
 80021b2:	e02d      	b.n	8002210 <compute_control+0x758>
 80021b4:	20000798 	.word	0x20000798
 80021b8:	2000079c 	.word	0x2000079c
 80021bc:	20000770 	.word	0x20000770
 80021c0:	20000778 	.word	0x20000778
 80021c4:	20000774 	.word	0x20000774
 80021c8:	2000077c 	.word	0x2000077c
 80021cc:	200002a8 	.word	0x200002a8
 80021d0:	20000758 	.word	0x20000758
 80021d4:	200002f4 	.word	0x200002f4
 80021d8:	2000075c 	.word	0x2000075c
 80021dc:	200007a0 	.word	0x200007a0
 80021e0:	200007a4 	.word	0x200007a4
 80021e4:	20000780 	.word	0x20000780
 80021e8:	20000760 	.word	0x20000760
 80021ec:	20000738 	.word	0x20000738
 80021f0:	0800c8d0 	.word	0x0800c8d0
 80021f4:	20000788 	.word	0x20000788
 80021f8:	20000764 	.word	0x20000764
 80021fc:	2000073c 	.word	0x2000073c
 8002200:	0800c970 	.word	0x0800c970
 8002204:	20000790 	.word	0x20000790
 8002208:	20000768 	.word	0x20000768
 800220c:	20000740 	.word	0x20000740
 8002210:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002214:	ed97 7b06 	vldr	d7, [r7, #24]
 8002218:	ed8d 7b02 	vstr	d7, [sp, #8]
 800221c:	e9cd 5600 	strd	r5, r6, [sp]
 8002220:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002224:	493b      	ldr	r1, [pc, #236]	@ (8002314 <compute_control+0x85c>)
 8002226:	4620      	mov	r0, r4
 8002228:	f008 fa16 	bl	800a658 <siprintf>
			"[Δt: %6.2f s] v: %+6.2f | w: %+6.2f | err: %+6.2f | int: %+6.2f | der: %+6.2f | LF Ideal: %+6.2f | LF Real: %+6.2f | LF Control: %04d | LF Duty Cycle: %03d\r\n",
			time_gap, v_desired, w_desired, lb_error, lf_integral,
			lf_derivative, lf_speed_ideal, lf_speed_real, lf_control,
			duty_cycle_lf);
	log_to_uart(temp_str);
 800222c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002230:	4618      	mov	r0, r3
 8002232:	f000 f9ed 	bl	8002610 <log_to_uart>

	sprintf(temp_str,
 8002236:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800223a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	f7fe f98a 	bl	8000558 <__aeabi_f2d>
 8002244:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8002248:	4b33      	ldr	r3, [pc, #204]	@ (8002318 <compute_control+0x860>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f983 	bl	8000558 <__aeabi_f2d>
 8002252:	4605      	mov	r5, r0
 8002254:	460e      	mov	r6, r1
 8002256:	4b31      	ldr	r3, [pc, #196]	@ (800231c <compute_control+0x864>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f97c 	bl	8000558 <__aeabi_f2d>
 8002260:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002264:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8002268:	f7fe f976 	bl	8000558 <__aeabi_f2d>
 800226c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002270:	4b2b      	ldr	r3, [pc, #172]	@ (8002320 <compute_control+0x868>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f96f 	bl	8000558 <__aeabi_f2d>
 800227a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800227e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002282:	f7fe f969 	bl	8000558 <__aeabi_f2d>
 8002286:	4682      	mov	sl, r0
 8002288:	468b      	mov	fp, r1
 800228a:	4b26      	ldr	r3, [pc, #152]	@ (8002324 <compute_control+0x86c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe f962 	bl	8000558 <__aeabi_f2d>
 8002294:	4680      	mov	r8, r0
 8002296:	4689      	mov	r9, r1
 8002298:	4b23      	ldr	r3, [pc, #140]	@ (8002328 <compute_control+0x870>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f95b 	bl	8000558 <__aeabi_f2d>
 80022a2:	4b22      	ldr	r3, [pc, #136]	@ (800232c <compute_control+0x874>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80022aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80022ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80022b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80022b2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80022b6:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 80022ba:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80022be:	ed97 7b02 	vldr	d7, [r7, #8]
 80022c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80022c6:	ed97 7b04 	vldr	d7, [r7, #16]
 80022ca:	ed8d 7b04 	vstr	d7, [sp, #16]
 80022ce:	ed97 7b06 	vldr	d7, [r7, #24]
 80022d2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80022d6:	e9cd 5600 	strd	r5, r6, [sp]
 80022da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022de:	4914      	ldr	r1, [pc, #80]	@ (8002330 <compute_control+0x878>)
 80022e0:	4620      	mov	r0, r4
 80022e2:	f008 f9b9 	bl	800a658 <siprintf>
			"[Δt: %6.2f s] v: %+6.2f | w: %+6.2f | err: %+6.2f | int: %+6.2f | der: %+6.2f | RF Ideal: %+6.2f | RF Real: %+6.2f | RF Control: %04d | RF Duty Cycle: %03d\r\n",
			time_gap, v_desired, w_desired, rf_error, rf_integral,
			rf_derivative, rf_speed_ideal, rf_speed_real, rf_control,
			duty_cycle_rf);
	log_to_uart(temp_str);
 80022e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f990 	bl	8002610 <log_to_uart>

	sprintf(temp_str, "\r\n");
 80022f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022f4:	490f      	ldr	r1, [pc, #60]	@ (8002334 <compute_control+0x87c>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f008 f9ae 	bl	800a658 <siprintf>
	log_to_uart(temp_str);
 80022fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002300:	4618      	mov	r0, r3
 8002302:	f000 f985 	bl	8002610 <log_to_uart>
}
 8002306:	bf00      	nop
 8002308:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800230c:	46bd      	mov	sp, r7
 800230e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002312:	bf00      	nop
 8002314:	0800ca10 	.word	0x0800ca10
 8002318:	200007a0 	.word	0x200007a0
 800231c:	200007a4 	.word	0x200007a4
 8002320:	20000798 	.word	0x20000798
 8002324:	2000077c 	.word	0x2000077c
 8002328:	2000076c 	.word	0x2000076c
 800232c:	20000744 	.word	0x20000744
 8002330:	0800cab0 	.word	0x0800cab0
 8002334:	0800cb50 	.word	0x0800cb50

08002338 <compute_real_speed>:


float compute_real_speed(float time_gap, int motor) {
 8002338:	b5b0      	push	{r4, r5, r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002342:	6038      	str	r0, [r7, #0]
	int16_t count_diff = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	817b      	strh	r3, [r7, #10]
	float speed_real = 0.0;
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
	if (motor == LB) {
 800234e:	2200      	movs	r2, #0
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	4293      	cmp	r3, r2
 8002354:	d149      	bne.n	80023ea <compute_real_speed+0xb2>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim3) - lb_count_last);
 8002356:	4ba4      	ldr	r3, [pc, #656]	@ (80025e8 <compute_real_speed+0x2b0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235c:	b29a      	uxth	r2, r3
 800235e:	4ba3      	ldr	r3, [pc, #652]	@ (80025ec <compute_real_speed+0x2b4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	b29b      	uxth	r3, r3
 8002368:	817b      	strh	r3, [r7, #10]
		speed_real = -1 * count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 800236a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800236e:	425b      	negs	r3, r3
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f8df 	bl	8000534 <__aeabi_i2d>
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	4b9d      	ldr	r3, [pc, #628]	@ (80025f0 <compute_real_speed+0x2b8>)
 800237c:	f7fe fa6e 	bl	800085c <__aeabi_ddiv>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4610      	mov	r0, r2
 8002386:	4619      	mov	r1, r3
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	f7fd ff86 	bl	800029c <__adddf3>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	a38f      	add	r3, pc, #572	@ (adr r3, 80025d8 <compute_real_speed+0x2a0>)
 800239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239e:	f7fe f933 	bl	8000608 <__aeabi_dmul>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	a38d      	add	r3, pc, #564	@ (adr r3, 80025e0 <compute_real_speed+0x2a8>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fe f92a 	bl	8000608 <__aeabi_dmul>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4614      	mov	r4, r2
 80023ba:	461d      	mov	r5, r3
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7fe f8cb 	bl	8000558 <__aeabi_f2d>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4620      	mov	r0, r4
 80023c8:	4629      	mov	r1, r5
 80023ca:	f7fe fa47 	bl	800085c <__aeabi_ddiv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7fe fbef 	bl	8000bb8 <__aeabi_d2f>
 80023da:	4603      	mov	r3, r0
 80023dc:	60fb      	str	r3, [r7, #12]
		lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
 80023de:	4b82      	ldr	r3, [pc, #520]	@ (80025e8 <compute_real_speed+0x2b0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e4:	4a81      	ldr	r2, [pc, #516]	@ (80025ec <compute_real_speed+0x2b4>)
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	e0eb      	b.n	80025c2 <compute_real_speed+0x28a>
	}
	else if (motor == RB) {
 80023ea:	2201      	movs	r2, #1
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d148      	bne.n	8002484 <compute_real_speed+0x14c>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim4) - rb_count_last);
 80023f2:	4b80      	ldr	r3, [pc, #512]	@ (80025f4 <compute_real_speed+0x2bc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	4b7f      	ldr	r3, [pc, #508]	@ (80025f8 <compute_real_speed+0x2c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	b29b      	uxth	r3, r3
 8002404:	817b      	strh	r3, [r7, #10]
		speed_real = count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 8002406:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe f892 	bl	8000534 <__aeabi_i2d>
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	4b76      	ldr	r3, [pc, #472]	@ (80025f0 <compute_real_speed+0x2b8>)
 8002416:	f7fe fa21 	bl	800085c <__aeabi_ddiv>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	f7fd ff39 	bl	800029c <__adddf3>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	a369      	add	r3, pc, #420	@ (adr r3, 80025d8 <compute_real_speed+0x2a0>)
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	f7fe f8e6 	bl	8000608 <__aeabi_dmul>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	a366      	add	r3, pc, #408	@ (adr r3, 80025e0 <compute_real_speed+0x2a8>)
 8002446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244a:	f7fe f8dd 	bl	8000608 <__aeabi_dmul>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4614      	mov	r4, r2
 8002454:	461d      	mov	r5, r3
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe f87e 	bl	8000558 <__aeabi_f2d>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4620      	mov	r0, r4
 8002462:	4629      	mov	r1, r5
 8002464:	f7fe f9fa 	bl	800085c <__aeabi_ddiv>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	f7fe fba2 	bl	8000bb8 <__aeabi_d2f>
 8002474:	4603      	mov	r3, r0
 8002476:	60fb      	str	r3, [r7, #12]
		rb_count_last = __HAL_TIM_GET_COUNTER(&htim4);
 8002478:	4b5e      	ldr	r3, [pc, #376]	@ (80025f4 <compute_real_speed+0x2bc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	4a5e      	ldr	r2, [pc, #376]	@ (80025f8 <compute_real_speed+0x2c0>)
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e09e      	b.n	80025c2 <compute_real_speed+0x28a>
	}
	else if (motor == LF) {
 8002484:	2202      	movs	r2, #2
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	4293      	cmp	r3, r2
 800248a:	d14e      	bne.n	800252a <compute_real_speed+0x1f2>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim1) - lf_count_last);
 800248c:	4b5b      	ldr	r3, [pc, #364]	@ (80025fc <compute_real_speed+0x2c4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	b29a      	uxth	r2, r3
 8002494:	4b5a      	ldr	r3, [pc, #360]	@ (8002600 <compute_real_speed+0x2c8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	b29b      	uxth	r3, r3
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	b29b      	uxth	r3, r3
 800249e:	817b      	strh	r3, [r7, #10]
		speed_real = -1 * count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 80024a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024a4:	425b      	negs	r3, r3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe f844 	bl	8000534 <__aeabi_i2d>
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	4b4f      	ldr	r3, [pc, #316]	@ (80025f0 <compute_real_speed+0x2b8>)
 80024b2:	f7fe f9d3 	bl	800085c <__aeabi_ddiv>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	f7fd feeb 	bl	800029c <__adddf3>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	a342      	add	r3, pc, #264	@ (adr r3, 80025d8 <compute_real_speed+0x2a0>)
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	f7fe f898 	bl	8000608 <__aeabi_dmul>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	a33f      	add	r3, pc, #252	@ (adr r3, 80025e0 <compute_real_speed+0x2a8>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	f7fe f88f 	bl	8000608 <__aeabi_dmul>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4614      	mov	r4, r2
 80024f0:	461d      	mov	r5, r3
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe f830 	bl	8000558 <__aeabi_f2d>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4620      	mov	r0, r4
 80024fe:	4629      	mov	r1, r5
 8002500:	f7fe f9ac 	bl	800085c <__aeabi_ddiv>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f7fe fb54 	bl	8000bb8 <__aeabi_d2f>
 8002510:	4603      	mov	r3, r0
 8002512:	60fb      	str	r3, [r7, #12]
		lf_count_last = __HAL_TIM_GET_COUNTER(&htim1);
 8002514:	4b39      	ldr	r3, [pc, #228]	@ (80025fc <compute_real_speed+0x2c4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	4a39      	ldr	r2, [pc, #228]	@ (8002600 <compute_real_speed+0x2c8>)
 800251c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800251e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002522:	4838      	ldr	r0, [pc, #224]	@ (8002604 <compute_real_speed+0x2cc>)
 8002524:	f000 ff80 	bl	8003428 <HAL_GPIO_TogglePin>
 8002528:	e04b      	b.n	80025c2 <compute_real_speed+0x28a>
	}
	else if (motor == RF) {
 800252a:	2203      	movs	r2, #3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4293      	cmp	r3, r2
 8002530:	d147      	bne.n	80025c2 <compute_real_speed+0x28a>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim8) - rf_count_last);
 8002532:	4b35      	ldr	r3, [pc, #212]	@ (8002608 <compute_real_speed+0x2d0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	b29a      	uxth	r2, r3
 800253a:	4b34      	ldr	r3, [pc, #208]	@ (800260c <compute_real_speed+0x2d4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	b29b      	uxth	r3, r3
 8002544:	817b      	strh	r3, [r7, #10]
		speed_real = count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 8002546:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fd fff2 	bl	8000534 <__aeabi_i2d>
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	4b26      	ldr	r3, [pc, #152]	@ (80025f0 <compute_real_speed+0x2b8>)
 8002556:	f7fe f981 	bl	800085c <__aeabi_ddiv>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	f7fd fe99 	bl	800029c <__adddf3>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	a319      	add	r3, pc, #100	@ (adr r3, 80025d8 <compute_real_speed+0x2a0>)
 8002574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002578:	f7fe f846 	bl	8000608 <__aeabi_dmul>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	a316      	add	r3, pc, #88	@ (adr r3, 80025e0 <compute_real_speed+0x2a8>)
 8002586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258a:	f7fe f83d 	bl	8000608 <__aeabi_dmul>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4614      	mov	r4, r2
 8002594:	461d      	mov	r5, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fd ffde 	bl	8000558 <__aeabi_f2d>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4620      	mov	r0, r4
 80025a2:	4629      	mov	r1, r5
 80025a4:	f7fe f95a 	bl	800085c <__aeabi_ddiv>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f7fe fb02 	bl	8000bb8 <__aeabi_d2f>
 80025b4:	4603      	mov	r3, r0
 80025b6:	60fb      	str	r3, [r7, #12]
		rf_count_last = __HAL_TIM_GET_COUNTER(&htim8);
 80025b8:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <compute_real_speed+0x2d0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	4a13      	ldr	r2, [pc, #76]	@ (800260c <compute_real_speed+0x2d4>)
 80025c0:	6013      	str	r3, [r2, #0]
	}
	return speed_real;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	ee07 3a90 	vmov	s15, r3
}
 80025c8:	eeb0 0a67 	vmov.f32	s0, s15
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bdb0      	pop	{r4, r5, r7, pc}
 80025d2:	bf00      	nop
 80025d4:	f3af 8000 	nop.w
 80025d8:	54442d18 	.word	0x54442d18
 80025dc:	400921fb 	.word	0x400921fb
 80025e0:	25460aa6 	.word	0x25460aa6
 80025e4:	3f9a0275 	.word	0x3f9a0275
 80025e8:	200002a8 	.word	0x200002a8
 80025ec:	20000748 	.word	0x20000748
 80025f0:	4094a000 	.word	0x4094a000
 80025f4:	200002f4 	.word	0x200002f4
 80025f8:	2000074c 	.word	0x2000074c
 80025fc:	20000210 	.word	0x20000210
 8002600:	20000750 	.word	0x20000750
 8002604:	48000400 	.word	0x48000400
 8002608:	20000340 	.word	0x20000340
 800260c:	20000754 	.word	0x20000754

08002610 <log_to_uart>:

void log_to_uart(const char *msg) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7fd fe31 	bl	8000280 <strlen>
 800261e:	4603      	mov	r3, r0
 8002620:	b29a      	uxth	r2, r3
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4803      	ldr	r0, [pc, #12]	@ (8002638 <log_to_uart+0x28>)
 800262a:	f005 f9e5 	bl	80079f8 <HAL_UART_Transmit>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200003d8 	.word	0x200003d8

0800263c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002640:	b672      	cpsid	i
}
 8002642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <Error_Handler+0x8>

08002648 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <HAL_MspInit+0x44>)
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	4a0e      	ldr	r2, [pc, #56]	@ (800268c <HAL_MspInit+0x44>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6193      	str	r3, [r2, #24]
 800265a:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <HAL_MspInit+0x44>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	4b09      	ldr	r3, [pc, #36]	@ (800268c <HAL_MspInit+0x44>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	4a08      	ldr	r2, [pc, #32]	@ (800268c <HAL_MspInit+0x44>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002670:	61d3      	str	r3, [r2, #28]
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_MspInit+0x44>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0d      	ldr	r2, [pc, #52]	@ (80026d4 <HAL_RTC_MspInit+0x44>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d111      	bne.n	80026c6 <HAL_RTC_MspInit+0x36>
 80026a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026a6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026b0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <HAL_RTC_MspInit+0x48>)
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	461a      	mov	r2, r3
 80026c2:	2301      	movs	r3, #1
 80026c4:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40002800 	.word	0x40002800
 80026d8:	10908100 	.word	0x10908100

080026dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b092      	sub	sp, #72	@ 0x48
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a7d      	ldr	r2, [pc, #500]	@ (80028f0 <HAL_TIM_Encoder_MspInit+0x214>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d14e      	bne.n	800279c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026fe:	4b7d      	ldr	r3, [pc, #500]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	4a7c      	ldr	r2, [pc, #496]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002704:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002708:	6193      	str	r3, [r2, #24]
 800270a:	4b7a      	ldr	r3, [pc, #488]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002712:	633b      	str	r3, [r7, #48]	@ 0x30
 8002714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002716:	4b77      	ldr	r3, [pc, #476]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	4a76      	ldr	r2, [pc, #472]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 800271c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002720:	6153      	str	r3, [r2, #20]
 8002722:	4b74      	ldr	r3, [pc, #464]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800272a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800272c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272e:	4b71      	ldr	r3, [pc, #452]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	4a70      	ldr	r2, [pc, #448]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002738:	6153      	str	r3, [r2, #20]
 800273a:	4b6e      	ldr	r3, [pc, #440]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002746:	2301      	movs	r3, #1
 8002748:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002756:	2302      	movs	r3, #2
 8002758:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800275e:	4619      	mov	r1, r3
 8002760:	4865      	ldr	r0, [pc, #404]	@ (80028f8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8002762:	f000 fcbf 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002766:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800276a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002778:	2306      	movs	r3, #6
 800277a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002780:	4619      	mov	r1, r3
 8002782:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002786:	f000 fcad 	bl	80030e4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	2100      	movs	r1, #0
 800278e:	2019      	movs	r0, #25
 8002790:	f000 fc71 	bl	8003076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002794:	2019      	movs	r0, #25
 8002796:	f000 fc8a 	bl	80030ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800279a:	e0a5      	b.n	80028e8 <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM3)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a56      	ldr	r2, [pc, #344]	@ (80028fc <HAL_TIM_Encoder_MspInit+0x220>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d128      	bne.n	80027f8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027a6:	4b53      	ldr	r3, [pc, #332]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	4a52      	ldr	r2, [pc, #328]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	61d3      	str	r3, [r2, #28]
 80027b2:	4b50      	ldr	r3, [pc, #320]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027be:	4b4d      	ldr	r3, [pc, #308]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	4a4c      	ldr	r2, [pc, #304]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 80027c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027c8:	6153      	str	r3, [r2, #20]
 80027ca:	4b4a      	ldr	r3, [pc, #296]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d2:	623b      	str	r3, [r7, #32]
 80027d4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027d6:	230c      	movs	r3, #12
 80027d8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2300      	movs	r3, #0
 80027e4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027e6:	2302      	movs	r3, #2
 80027e8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027ee:	4619      	mov	r1, r3
 80027f0:	4843      	ldr	r0, [pc, #268]	@ (8002900 <HAL_TIM_Encoder_MspInit+0x224>)
 80027f2:	f000 fc77 	bl	80030e4 <HAL_GPIO_Init>
}
 80027f6:	e077      	b.n	80028e8 <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM4)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a41      	ldr	r2, [pc, #260]	@ (8002904 <HAL_TIM_Encoder_MspInit+0x228>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d145      	bne.n	800288e <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002802:	4b3c      	ldr	r3, [pc, #240]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4a3b      	ldr	r2, [pc, #236]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002808:	f043 0304 	orr.w	r3, r3, #4
 800280c:	61d3      	str	r3, [r2, #28]
 800280e:	4b39      	ldr	r3, [pc, #228]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800281a:	4b36      	ldr	r3, [pc, #216]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	4a35      	ldr	r2, [pc, #212]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002820:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002824:	6153      	str	r3, [r2, #20]
 8002826:	4b33      	ldr	r3, [pc, #204]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002832:	4b30      	ldr	r3, [pc, #192]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	4a2f      	ldr	r2, [pc, #188]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800283c:	6153      	str	r3, [r2, #20]
 800283e:	4b2d      	ldr	r3, [pc, #180]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800284a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800284e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800285c:	2302      	movs	r3, #2
 800285e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002860:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002864:	4619      	mov	r1, r3
 8002866:	4828      	ldr	r0, [pc, #160]	@ (8002908 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002868:	f000 fc3c 	bl	80030e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800286c:	2340      	movs	r3, #64	@ 0x40
 800286e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	2300      	movs	r3, #0
 800287a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800287c:	2302      	movs	r3, #2
 800287e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002880:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002884:	4619      	mov	r1, r3
 8002886:	4821      	ldr	r0, [pc, #132]	@ (800290c <HAL_TIM_Encoder_MspInit+0x230>)
 8002888:	f000 fc2c 	bl	80030e4 <HAL_GPIO_Init>
}
 800288c:	e02c      	b.n	80028e8 <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM8)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1f      	ldr	r2, [pc, #124]	@ (8002910 <HAL_TIM_Encoder_MspInit+0x234>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d127      	bne.n	80028e8 <HAL_TIM_Encoder_MspInit+0x20c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002898:	4b16      	ldr	r3, [pc, #88]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	4a15      	ldr	r2, [pc, #84]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 800289e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028a2:	6193      	str	r3, [r2, #24]
 80028a4:	4b13      	ldr	r3, [pc, #76]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b0:	4b10      	ldr	r3, [pc, #64]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	4a0f      	ldr	r2, [pc, #60]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 80028b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80028ba:	6153      	str	r3, [r2, #20]
 80028bc:	4b0d      	ldr	r3, [pc, #52]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0x218>)
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028c8:	23c0      	movs	r3, #192	@ 0xc0
 80028ca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80028d8:	2304      	movs	r3, #4
 80028da:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028e0:	4619      	mov	r1, r3
 80028e2:	4805      	ldr	r0, [pc, #20]	@ (80028f8 <HAL_TIM_Encoder_MspInit+0x21c>)
 80028e4:	f000 fbfe 	bl	80030e4 <HAL_GPIO_Init>
}
 80028e8:	bf00      	nop
 80028ea:	3748      	adds	r7, #72	@ 0x48
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40012c00 	.word	0x40012c00
 80028f4:	40021000 	.word	0x40021000
 80028f8:	48000800 	.word	0x48000800
 80028fc:	40000400 	.word	0x40000400
 8002900:	48001000 	.word	0x48001000
 8002904:	40000800 	.word	0x40000800
 8002908:	48000c00 	.word	0x48000c00
 800290c:	48000400 	.word	0x48000400
 8002910:	40013400 	.word	0x40013400

08002914 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002924:	d10b      	bne.n	800293e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002926:	4b09      	ldr	r3, [pc, #36]	@ (800294c <HAL_TIM_PWM_MspInit+0x38>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4a08      	ldr	r2, [pc, #32]	@ (800294c <HAL_TIM_PWM_MspInit+0x38>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	61d3      	str	r3, [r2, #28]
 8002932:	4b06      	ldr	r3, [pc, #24]	@ (800294c <HAL_TIM_PWM_MspInit+0x38>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000

08002950 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0d      	ldr	r2, [pc, #52]	@ (8002994 <HAL_TIM_Base_MspInit+0x44>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d113      	bne.n	800298a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002962:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <HAL_TIM_Base_MspInit+0x48>)
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	4a0c      	ldr	r2, [pc, #48]	@ (8002998 <HAL_TIM_Base_MspInit+0x48>)
 8002968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800296c:	6193      	str	r3, [r2, #24]
 800296e:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <HAL_TIM_Base_MspInit+0x48>)
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	2019      	movs	r0, #25
 8002980:	f000 fb79 	bl	8003076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002984:	2019      	movs	r0, #25
 8002986:	f000 fb92 	bl	80030ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40014400 	.word	0x40014400
 8002998:	40021000 	.word	0x40021000

0800299c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	@ 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029bc:	d139      	bne.n	8002a32 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	4b1f      	ldr	r3, [pc, #124]	@ (8002a3c <HAL_TIM_MspPostInit+0xa0>)
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a3c <HAL_TIM_MspPostInit+0xa0>)
 80029c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029c8:	6153      	str	r3, [r2, #20]
 80029ca:	4b1c      	ldr	r3, [pc, #112]	@ (8002a3c <HAL_TIM_MspPostInit+0xa0>)
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d6:	4b19      	ldr	r3, [pc, #100]	@ (8002a3c <HAL_TIM_MspPostInit+0xa0>)
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	4a18      	ldr	r2, [pc, #96]	@ (8002a3c <HAL_TIM_MspPostInit+0xa0>)
 80029dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e0:	6153      	str	r3, [r2, #20]
 80029e2:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <HAL_TIM_MspPostInit+0xa0>)
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029ee:	2303      	movs	r3, #3
 80029f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fa:	2300      	movs	r3, #0
 80029fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029fe:	2301      	movs	r3, #1
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4619      	mov	r1, r3
 8002a08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a0c:	f000 fb6a 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a10:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a22:	2301      	movs	r3, #1
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4804      	ldr	r0, [pc, #16]	@ (8002a40 <HAL_TIM_MspPostInit+0xa4>)
 8002a2e:	f000 fb59 	bl	80030e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a32:	bf00      	nop
 8002a34:	3728      	adds	r7, #40	@ 0x28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	48000400 	.word	0x48000400

08002a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	@ 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a17      	ldr	r2, [pc, #92]	@ (8002ac0 <HAL_UART_MspInit+0x7c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d128      	bne.n	8002ab8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a66:	4b17      	ldr	r3, [pc, #92]	@ (8002ac4 <HAL_UART_MspInit+0x80>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	4a16      	ldr	r2, [pc, #88]	@ (8002ac4 <HAL_UART_MspInit+0x80>)
 8002a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a70:	61d3      	str	r3, [r2, #28]
 8002a72:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <HAL_UART_MspInit+0x80>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a7e:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <HAL_UART_MspInit+0x80>)
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	4a10      	ldr	r2, [pc, #64]	@ (8002ac4 <HAL_UART_MspInit+0x80>)
 8002a84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a88:	6153      	str	r3, [r2, #20]
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac4 <HAL_UART_MspInit+0x80>)
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002aa8:	2307      	movs	r3, #7
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aac:	f107 0314 	add.w	r3, r7, #20
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4805      	ldr	r0, [pc, #20]	@ (8002ac8 <HAL_UART_MspInit+0x84>)
 8002ab4:	f000 fb16 	bl	80030e4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002ab8:	bf00      	nop
 8002aba:	3728      	adds	r7, #40	@ 0x28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40004800 	.word	0x40004800
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	48000c00 	.word	0x48000c00

08002acc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b10 <HAL_PCD_MspInit+0x44>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d113      	bne.n	8002b06 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002ade:	4b0d      	ldr	r3, [pc, #52]	@ (8002b14 <HAL_PCD_MspInit+0x48>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8002b14 <HAL_PCD_MspInit+0x48>)
 8002ae4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ae8:	61d3      	str	r3, [r2, #28]
 8002aea:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <HAL_PCD_MspInit+0x48>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2100      	movs	r1, #0
 8002afa:	2014      	movs	r0, #20
 8002afc:	f000 fabb 	bl	8003076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8002b00:	2014      	movs	r0, #20
 8002b02:	f000 fad4 	bl	80030ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40005c00 	.word	0x40005c00
 8002b14:	40021000 	.word	0x40021000

08002b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <NMI_Handler+0x4>

08002b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <HardFault_Handler+0x4>

08002b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b2c:	bf00      	nop
 8002b2e:	e7fd      	b.n	8002b2c <MemManage_Handler+0x4>

08002b30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <BusFault_Handler+0x4>

08002b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <UsageFault_Handler+0x4>

08002b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b6e:	f000 f963 	bl	8002e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b7c:	4802      	ldr	r0, [pc, #8]	@ (8002b88 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002b7e:	f000 fd34 	bl	80035ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000460 	.word	0x20000460

08002b8c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b90:	4803      	ldr	r0, [pc, #12]	@ (8002ba0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002b92:	f004 f825 	bl	8006be0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002b96:	4803      	ldr	r0, [pc, #12]	@ (8002ba4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002b98:	f004 f822 	bl	8006be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000210 	.word	0x20000210
 8002ba4:	2000038c 	.word	0x2000038c

08002ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return 1;
 8002bac:	2301      	movs	r3, #1
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <_kill>:

int _kill(int pid, int sig)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bc2:	f007 fdff 	bl	800a7c4 <__errno>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2216      	movs	r2, #22
 8002bca:	601a      	str	r2, [r3, #0]
  return -1;
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_exit>:

void _exit (int status)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002be0:	f04f 31ff 	mov.w	r1, #4294967295
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ffe7 	bl	8002bb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bea:	bf00      	nop
 8002bec:	e7fd      	b.n	8002bea <_exit+0x12>

08002bee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e00a      	b.n	8002c16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c00:	f3af 8000 	nop.w
 8002c04:	4601      	mov	r1, r0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	60ba      	str	r2, [r7, #8]
 8002c0c:	b2ca      	uxtb	r2, r1
 8002c0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3301      	adds	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	dbf0      	blt.n	8002c00 <_read+0x12>
  }

  return len;
 8002c1e:	687b      	ldr	r3, [r7, #4]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e009      	b.n	8002c4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	60ba      	str	r2, [r7, #8]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	dbf1      	blt.n	8002c3a <_write+0x12>
  }
  return len;
 8002c56:	687b      	ldr	r3, [r7, #4]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_close>:

int _close(int file)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c88:	605a      	str	r2, [r3, #4]
  return 0;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_isatty>:

int _isatty(int file)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ca0:	2301      	movs	r3, #1
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cd0:	4a14      	ldr	r2, [pc, #80]	@ (8002d24 <_sbrk+0x5c>)
 8002cd2:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <_sbrk+0x60>)
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cdc:	4b13      	ldr	r3, [pc, #76]	@ (8002d2c <_sbrk+0x64>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <_sbrk+0x64>)
 8002ce6:	4a12      	ldr	r2, [pc, #72]	@ (8002d30 <_sbrk+0x68>)
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <_sbrk+0x64>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d207      	bcs.n	8002d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cf8:	f007 fd64 	bl	800a7c4 <__errno>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	220c      	movs	r2, #12
 8002d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	e009      	b.n	8002d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d08:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <_sbrk+0x64>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d0e:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <_sbrk+0x64>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	4a05      	ldr	r2, [pc, #20]	@ (8002d2c <_sbrk+0x64>)
 8002d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20010000 	.word	0x20010000
 8002d28:	00000400 	.word	0x00000400
 8002d2c:	200007a8 	.word	0x200007a8
 8002d30:	20000900 	.word	0x20000900

08002d34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d38:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <SystemInit+0x20>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3e:	4a05      	ldr	r2, [pc, #20]	@ (8002d54 <SystemInit+0x20>)
 8002d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d90 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d5c:	f7ff ffea 	bl	8002d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d60:	480c      	ldr	r0, [pc, #48]	@ (8002d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d62:	490d      	ldr	r1, [pc, #52]	@ (8002d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d64:	4a0d      	ldr	r2, [pc, #52]	@ (8002d9c <LoopForever+0xe>)
  movs r3, #0
 8002d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d68:	e002      	b.n	8002d70 <LoopCopyDataInit>

08002d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d6e:	3304      	adds	r3, #4

08002d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d74:	d3f9      	bcc.n	8002d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d76:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d78:	4c0a      	ldr	r4, [pc, #40]	@ (8002da4 <LoopForever+0x16>)
  movs r3, #0
 8002d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d7c:	e001      	b.n	8002d82 <LoopFillZerobss>

08002d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d80:	3204      	adds	r2, #4

08002d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d84:	d3fb      	bcc.n	8002d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d86:	f007 fd23 	bl	800a7d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d8a:	f7fe f89d 	bl	8000ec8 <main>

08002d8e <LoopForever>:

LoopForever:
    b LoopForever
 8002d8e:	e7fe      	b.n	8002d8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d98:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002d9c:	0800cf10 	.word	0x0800cf10
  ldr r2, =_sbss
 8002da0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002da4:	200008fc 	.word	0x200008fc

08002da8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002da8:	e7fe      	b.n	8002da8 <ADC1_2_IRQHandler>
	...

08002dac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db0:	4b08      	ldr	r3, [pc, #32]	@ (8002dd4 <HAL_Init+0x28>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a07      	ldr	r2, [pc, #28]	@ (8002dd4 <HAL_Init+0x28>)
 8002db6:	f043 0310 	orr.w	r3, r3, #16
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dbc:	2003      	movs	r0, #3
 8002dbe:	f000 f94f 	bl	8003060 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f000 f808 	bl	8002dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc8:	f7ff fc3e 	bl	8002648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40022000 	.word	0x40022000

08002dd8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de0:	4b12      	ldr	r3, [pc, #72]	@ (8002e2c <HAL_InitTick+0x54>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <HAL_InitTick+0x58>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4619      	mov	r1, r3
 8002dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f967 	bl	80030ca <HAL_SYSTICK_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00e      	b.n	8002e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d80a      	bhi.n	8002e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f000 f92f 	bl	8003076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e18:	4a06      	ldr	r2, [pc, #24]	@ (8002e34 <HAL_InitTick+0x5c>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e000      	b.n	8002e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	20000008 	.word	0x20000008
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_IncTick+0x20>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_IncTick+0x24>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	4a04      	ldr	r2, [pc, #16]	@ (8002e5c <HAL_IncTick+0x24>)
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000008 	.word	0x20000008
 8002e5c:	200007ac 	.word	0x200007ac

08002e60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return uwTick;  
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <HAL_GetTick+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	200007ac 	.word	0x200007ac

08002e78 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff ffee 	bl	8002e60 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d005      	beq.n	8002e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_Delay+0x44>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002e9e:	bf00      	nop
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8f7      	bhi.n	8002ea0 <HAL_Delay+0x28>
  {
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000008 	.word	0x20000008

08002ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002edc:	4013      	ands	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef2:	4a04      	ldr	r2, [pc, #16]	@ (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	60d3      	str	r3, [r2, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f0c:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <__NVIC_GetPriorityGrouping+0x18>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 0307 	and.w	r3, r3, #7
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db0b      	blt.n	8002f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	4907      	ldr	r1, [pc, #28]	@ (8002f5c <__NVIC_EnableIRQ+0x38>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2001      	movs	r0, #1
 8002f46:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000e100 	.word	0xe000e100

08002f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	6039      	str	r1, [r7, #0]
 8002f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	db0a      	blt.n	8002f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	490c      	ldr	r1, [pc, #48]	@ (8002fac <__NVIC_SetPriority+0x4c>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	440b      	add	r3, r1
 8002f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f88:	e00a      	b.n	8002fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4908      	ldr	r1, [pc, #32]	@ (8002fb0 <__NVIC_SetPriority+0x50>)
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	3b04      	subs	r3, #4
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	761a      	strb	r2, [r3, #24]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000e100 	.word	0xe000e100
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	@ 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f1c3 0307 	rsb	r3, r3, #7
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	bf28      	it	cs
 8002fd2:	2304      	movcs	r3, #4
 8002fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d902      	bls.n	8002fe4 <NVIC_EncodePriority+0x30>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3b03      	subs	r3, #3
 8002fe2:	e000      	b.n	8002fe6 <NVIC_EncodePriority+0x32>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43d9      	mvns	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	4313      	orrs	r3, r2
         );
}
 800300e:	4618      	mov	r0, r3
 8003010:	3724      	adds	r7, #36	@ 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800302c:	d301      	bcc.n	8003032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302e:	2301      	movs	r3, #1
 8003030:	e00f      	b.n	8003052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003032:	4a0a      	ldr	r2, [pc, #40]	@ (800305c <SysTick_Config+0x40>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303a:	210f      	movs	r1, #15
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	f7ff ff8e 	bl	8002f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003044:	4b05      	ldr	r3, [pc, #20]	@ (800305c <SysTick_Config+0x40>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304a:	4b04      	ldr	r3, [pc, #16]	@ (800305c <SysTick_Config+0x40>)
 800304c:	2207      	movs	r2, #7
 800304e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	e000e010 	.word	0xe000e010

08003060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff29 	bl	8002ec0 <__NVIC_SetPriorityGrouping>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003088:	f7ff ff3e 	bl	8002f08 <__NVIC_GetPriorityGrouping>
 800308c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f7ff ff8e 	bl	8002fb4 <NVIC_EncodePriority>
 8003098:	4602      	mov	r2, r0
 800309a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff5d 	bl	8002f60 <__NVIC_SetPriority>
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff31 	bl	8002f24 <__NVIC_EnableIRQ>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ffa2 	bl	800301c <SysTick_Config>
 80030d8:	4603      	mov	r3, r0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f2:	e160      	b.n	80033b6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2101      	movs	r1, #1
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	4013      	ands	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 8152 	beq.w	80033b0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d005      	beq.n	8003124 <HAL_GPIO_Init+0x40>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d130      	bne.n	8003186 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2203      	movs	r2, #3
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800315a:	2201      	movs	r2, #1
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	f003 0201 	and.w	r2, r3, #1
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b03      	cmp	r3, #3
 8003190:	d017      	beq.n	80031c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2203      	movs	r2, #3
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d123      	bne.n	8003216 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	08da      	lsrs	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3208      	adds	r2, #8
 80031d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	220f      	movs	r2, #15
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	08da      	lsrs	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3208      	adds	r2, #8
 8003210:	6939      	ldr	r1, [r7, #16]
 8003212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	2203      	movs	r2, #3
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 0203 	and.w	r2, r3, #3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80ac 	beq.w	80033b0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003258:	4b5e      	ldr	r3, [pc, #376]	@ (80033d4 <HAL_GPIO_Init+0x2f0>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	4a5d      	ldr	r2, [pc, #372]	@ (80033d4 <HAL_GPIO_Init+0x2f0>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6193      	str	r3, [r2, #24]
 8003264:	4b5b      	ldr	r3, [pc, #364]	@ (80033d4 <HAL_GPIO_Init+0x2f0>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003270:	4a59      	ldr	r2, [pc, #356]	@ (80033d8 <HAL_GPIO_Init+0x2f4>)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	3302      	adds	r3, #2
 8003278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	220f      	movs	r2, #15
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800329a:	d025      	beq.n	80032e8 <HAL_GPIO_Init+0x204>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a4f      	ldr	r2, [pc, #316]	@ (80033dc <HAL_GPIO_Init+0x2f8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d01f      	beq.n	80032e4 <HAL_GPIO_Init+0x200>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a4e      	ldr	r2, [pc, #312]	@ (80033e0 <HAL_GPIO_Init+0x2fc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d019      	beq.n	80032e0 <HAL_GPIO_Init+0x1fc>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a4d      	ldr	r2, [pc, #308]	@ (80033e4 <HAL_GPIO_Init+0x300>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d013      	beq.n	80032dc <HAL_GPIO_Init+0x1f8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a4c      	ldr	r2, [pc, #304]	@ (80033e8 <HAL_GPIO_Init+0x304>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00d      	beq.n	80032d8 <HAL_GPIO_Init+0x1f4>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a4b      	ldr	r2, [pc, #300]	@ (80033ec <HAL_GPIO_Init+0x308>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d007      	beq.n	80032d4 <HAL_GPIO_Init+0x1f0>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a4a      	ldr	r2, [pc, #296]	@ (80033f0 <HAL_GPIO_Init+0x30c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_GPIO_Init+0x1ec>
 80032cc:	2306      	movs	r3, #6
 80032ce:	e00c      	b.n	80032ea <HAL_GPIO_Init+0x206>
 80032d0:	2307      	movs	r3, #7
 80032d2:	e00a      	b.n	80032ea <HAL_GPIO_Init+0x206>
 80032d4:	2305      	movs	r3, #5
 80032d6:	e008      	b.n	80032ea <HAL_GPIO_Init+0x206>
 80032d8:	2304      	movs	r3, #4
 80032da:	e006      	b.n	80032ea <HAL_GPIO_Init+0x206>
 80032dc:	2303      	movs	r3, #3
 80032de:	e004      	b.n	80032ea <HAL_GPIO_Init+0x206>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e002      	b.n	80032ea <HAL_GPIO_Init+0x206>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <HAL_GPIO_Init+0x206>
 80032e8:	2300      	movs	r3, #0
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	f002 0203 	and.w	r2, r2, #3
 80032f0:	0092      	lsls	r2, r2, #2
 80032f2:	4093      	lsls	r3, r2
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032fa:	4937      	ldr	r1, [pc, #220]	@ (80033d8 <HAL_GPIO_Init+0x2f4>)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	3302      	adds	r3, #2
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003308:	4b3a      	ldr	r3, [pc, #232]	@ (80033f4 <HAL_GPIO_Init+0x310>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	43db      	mvns	r3, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800332c:	4a31      	ldr	r2, [pc, #196]	@ (80033f4 <HAL_GPIO_Init+0x310>)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003332:	4b30      	ldr	r3, [pc, #192]	@ (80033f4 <HAL_GPIO_Init+0x310>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003356:	4a27      	ldr	r2, [pc, #156]	@ (80033f4 <HAL_GPIO_Init+0x310>)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800335c:	4b25      	ldr	r3, [pc, #148]	@ (80033f4 <HAL_GPIO_Init+0x310>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	43db      	mvns	r3, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003380:	4a1c      	ldr	r2, [pc, #112]	@ (80033f4 <HAL_GPIO_Init+0x310>)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003386:	4b1b      	ldr	r3, [pc, #108]	@ (80033f4 <HAL_GPIO_Init+0x310>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	43db      	mvns	r3, r3
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033aa:	4a12      	ldr	r2, [pc, #72]	@ (80033f4 <HAL_GPIO_Init+0x310>)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	3301      	adds	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f47f ae97 	bne.w	80030f4 <HAL_GPIO_Init+0x10>
  }
}
 80033c6:	bf00      	nop
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40010000 	.word	0x40010000
 80033dc:	48000400 	.word	0x48000400
 80033e0:	48000800 	.word	0x48000800
 80033e4:	48000c00 	.word	0x48000c00
 80033e8:	48001000 	.word	0x48001000
 80033ec:	48001400 	.word	0x48001400
 80033f0:	48001800 	.word	0x48001800
 80033f4:	40010400 	.word	0x40010400

080033f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
 8003404:	4613      	mov	r3, r2
 8003406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003408:	787b      	ldrb	r3, [r7, #1]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003414:	e002      	b.n	800341c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003416:	887a      	ldrh	r2, [r7, #2]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800343a:	887a      	ldrh	r2, [r7, #2]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4013      	ands	r3, r2
 8003440:	041a      	lsls	r2, r3, #16
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	43d9      	mvns	r1, r3
 8003446:	887b      	ldrh	r3, [r7, #2]
 8003448:	400b      	ands	r3, r1
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	619a      	str	r2, [r3, #24]
}
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0b9      	b.n	80035e2 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff fb22 	bl	8002acc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2203      	movs	r2, #3
 800348c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f004 ff28 	bl	80082ea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]
 800349e:	e03e      	b.n	800351e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	440b      	add	r3, r1
 80034ae:	3311      	adds	r3, #17
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034b4:	7bfa      	ldrb	r2, [r7, #15]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	3310      	adds	r3, #16
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	3313      	adds	r3, #19
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	3320      	adds	r3, #32
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	3324      	adds	r3, #36	@ 0x24
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	440b      	add	r3, r1
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	3301      	adds	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	791b      	ldrb	r3, [r3, #4]
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	429a      	cmp	r2, r3
 8003526:	d3bb      	bcc.n	80034a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	e044      	b.n	80035b8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800352e:	7bfa      	ldrb	r2, [r7, #15]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	440b      	add	r3, r1
 800353c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	440b      	add	r3, r1
 8003552:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003556:	7bfa      	ldrb	r2, [r7, #15]
 8003558:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	440b      	add	r3, r1
 8003568:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	440b      	add	r3, r1
 800357e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	440b      	add	r3, r1
 8003594:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	440b      	add	r3, r1
 80035aa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	3301      	adds	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	791b      	ldrb	r3, [r3, #4]
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d3b5      	bcc.n	800352e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3304      	adds	r3, #4
 80035ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80035ce:	f004 fea7 	bl	8008320 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f006 fa76 	bl	8009ae8 <USB_ReadInterrupts>
 80035fc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f930 	bl	800386e <PCD_EP_ISR_Handler>

    return;
 800360e:	e0bd      	b.n	800378c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003616:	2b00      	cmp	r3, #0
 8003618:	d013      	beq.n	8003642 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800362c:	b292      	uxth	r2, r2
 800362e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8d9 	bl	80037ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003638:	2100      	movs	r1, #0
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8f3 	bl	8003826 <HAL_PCD_SetAddress>

    return;
 8003640:	e0a4      	b.n	800378c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00c      	beq.n	8003666 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003654:	b29a      	uxth	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800365e:	b292      	uxth	r2, r2
 8003660:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003664:	e092      	b.n	800378c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00c      	beq.n	800368a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003678:	b29a      	uxth	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003682:	b292      	uxth	r2, r2
 8003684:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003688:	e080      	b.n	800378c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d027      	beq.n	80036e4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800369c:	b29a      	uxth	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0204 	bic.w	r2, r2, #4
 80036a6:	b292      	uxth	r2, r2
 80036a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0208 	bic.w	r2, r2, #8
 80036be:	b292      	uxth	r2, r2
 80036c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f8a4 	bl	8003812 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036dc:	b292      	uxth	r2, r2
 80036de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80036e2:	e053      	b.n	800378c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d027      	beq.n	800373e <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0208 	orr.w	r2, r2, #8
 8003700:	b292      	uxth	r2, r2
 8003702:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800370e:	b29a      	uxth	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003718:	b292      	uxth	r2, r2
 800371a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003726:	b29a      	uxth	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0204 	orr.w	r2, r2, #4
 8003730:	b292      	uxth	r2, r2
 8003732:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f861 	bl	80037fe <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800373c:	e026      	b.n	800378c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00f      	beq.n	8003768 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003750:	b29a      	uxth	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800375a:	b292      	uxth	r2, r2
 800375c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f838 	bl	80037d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003766:	e011      	b.n	800378c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00c      	beq.n	800378c <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003784:	b292      	uxth	r2, r2
 8003786:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800378a:	bf00      	nop
  }
}
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	460b      	mov	r3, r1
 80037b4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	460b      	mov	r3, r1
 8003830:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_PCD_SetAddress+0x1a>
 800383c:	2302      	movs	r3, #2
 800383e:	e012      	b.n	8003866 <HAL_PCD_SetAddress+0x40>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	78fa      	ldrb	r2, [r7, #3]
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f006 f932 	bl	8009ac0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b096      	sub	sp, #88	@ 0x58
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003876:	e3ad      	b.n	8003fd4 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003880:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003884:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8003892:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003896:	2b00      	cmp	r3, #0
 8003898:	f040 816f 	bne.w	8003b7a <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800389c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d14c      	bne.n	8003942 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80038b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038b8:	81fb      	strh	r3, [r7, #14]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	89fb      	ldrh	r3, [r7, #14]
 80038c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3310      	adds	r3, #16
 80038d0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038da:	b29b      	uxth	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4413      	add	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	4413      	add	r3, r2
 80038ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80038fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	441a      	add	r2, r3
 8003904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003906:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003908:	2100      	movs	r1, #0
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff ff4d 	bl	80037aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7b1b      	ldrb	r3, [r3, #12]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 835c 	beq.w	8003fd4 <PCD_EP_ISR_Handler+0x766>
 800391c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f040 8357 	bne.w	8003fd4 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	7b1b      	ldrb	r3, [r3, #12]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003930:	b2da      	uxtb	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	731a      	strb	r2, [r3, #12]
 8003940:	e348      	b.n	8003fd4 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003948:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003954:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800395c:	2b00      	cmp	r3, #0
 800395e:	d032      	beq.n	80039c6 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003968:	b29b      	uxth	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	4413      	add	r3, r2
 800397a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003986:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003994:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003998:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800399a:	b29b      	uxth	r3, r3
 800399c:	f006 f8f6 	bl	8009b8c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80039ac:	4013      	ands	r3, r2
 80039ae:	823b      	strh	r3, [r7, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	8a3a      	ldrh	r2, [r7, #16]
 80039b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039ba:	b292      	uxth	r2, r2
 80039bc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff feff 	bl	80037c2 <HAL_PCD_SetupStageCallback>
 80039c4:	e306      	b.n	8003fd4 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80039c6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f280 8302 	bge.w	8003fd4 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80039dc:	4013      	ands	r3, r2
 80039de:	83fb      	strh	r3, [r7, #30]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	8bfa      	ldrh	r2, [r7, #30]
 80039e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039ea:	b292      	uxth	r2, r2
 80039ec:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	4413      	add	r3, r2
 8003a08:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a14:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d019      	beq.n	8003a52 <PCD_EP_ISR_Handler+0x1e4>
 8003a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d015      	beq.n	8003a52 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a2c:	6959      	ldr	r1, [r3, #20]
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a30:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a34:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f006 f8a8 	bl	8009b8c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	441a      	add	r2, r3
 8003a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a48:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff fea0 	bl	8003792 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003a5c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003a60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f040 82b5 	bne.w	8003fd4 <PCD_EP_ISR_Handler+0x766>
 8003a6a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003a6e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003a72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a76:	f000 82ad 	beq.w	8003fd4 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	4413      	add	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	801a      	strh	r2, [r3, #0]
 8003aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <PCD_EP_ISR_Handler+0x25a>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	801a      	strh	r2, [r3, #0]
 8003ac6:	e039      	b.n	8003b3c <PCD_EP_ISR_Handler+0x2ce>
 8003ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ace:	d818      	bhi.n	8003b02 <PCD_EP_ISR_Handler+0x294>
 8003ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <PCD_EP_ISR_Handler+0x27c>
 8003ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	029b      	lsls	r3, r3, #10
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	4313      	orrs	r3, r2
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	801a      	strh	r2, [r3, #0]
 8003b00:	e01c      	b.n	8003b3c <PCD_EP_ISR_Handler+0x2ce>
 8003b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d102      	bne.n	8003b1c <PCD_EP_ISR_Handler+0x2ae>
 8003b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	029b      	lsls	r3, r3, #10
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b4c:	827b      	strh	r3, [r7, #18]
 8003b4e:	8a7b      	ldrh	r3, [r7, #18]
 8003b50:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003b54:	827b      	strh	r3, [r7, #18]
 8003b56:	8a7b      	ldrh	r3, [r7, #18]
 8003b58:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b5c:	827b      	strh	r3, [r7, #18]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	8a7b      	ldrh	r3, [r7, #18]
 8003b64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	8013      	strh	r3, [r2, #0]
 8003b78:	e22c      	b.n	8003fd4 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b8e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f280 80f6 	bge.w	8003d84 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003bae:	4013      	ands	r3, r2
 8003bb0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8003bc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bca:	b292      	uxth	r2, r2
 8003bcc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003bce:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be6:	7b1b      	ldrb	r3, [r3, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d123      	bne.n	8003c34 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4413      	add	r3, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	4413      	add	r3, r2
 8003c06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c10:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003c14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 808e 	beq.w	8003d3a <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c24:	6959      	ldr	r1, [r3, #20]
 8003c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c28:	88da      	ldrh	r2, [r3, #6]
 8003c2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c2e:	f005 ffad 	bl	8009b8c <USB_ReadPMA>
 8003c32:	e082      	b.n	8003d3a <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c36:	78db      	ldrb	r3, [r3, #3]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d10a      	bne.n	8003c52 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003c3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003c40:	461a      	mov	r2, r3
 8003c42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f9d3 	bl	8003ff0 <HAL_PCD_EP_DB_Receive>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003c50:	e073      	b.n	8003d3a <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c6c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	441a      	add	r2, r3
 8003c7e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d022      	beq.n	8003cf6 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cd4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003cd8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d02c      	beq.n	8003d3a <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce6:	6959      	ldr	r1, [r3, #20]
 8003ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cea:	891a      	ldrh	r2, [r3, #8]
 8003cec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cf0:	f005 ff4c 	bl	8009b8c <USB_ReadPMA>
 8003cf4:	e021      	b.n	8003d3a <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d1a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003d1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2c:	6959      	ldr	r1, [r3, #20]
 8003d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d30:	895a      	ldrh	r2, [r3, #10]
 8003d32:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d36:	f005 ff29 	bl	8009b8c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d3c:	69da      	ldr	r2, [r3, #28]
 8003d3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d42:	441a      	add	r2, r3
 8003d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d50:	441a      	add	r2, r3
 8003d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d54:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <PCD_EP_ISR_Handler+0x4fc>
 8003d5e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d206      	bcs.n	8003d78 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff fd0e 	bl	8003792 <HAL_PCD_DataOutStageCallback>
 8003d76:	e005      	b.n	8003d84 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f004 faec 	bl	800835c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d84:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 8121 	beq.w	8003fd4 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d92:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	3310      	adds	r3, #16
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4413      	add	r3, r2
 8003da4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dc0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	441a      	add	r2, r3
 8003dd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de4:	78db      	ldrb	r3, [r3, #3]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	f040 80a2 	bne.w	8003f30 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8003dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dee:	2200      	movs	r2, #0
 8003df0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df4:	7b1b      	ldrb	r3, [r3, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 8093 	beq.w	8003f22 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003dfc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d046      	beq.n	8003e96 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e0a:	785b      	ldrb	r3, [r3, #1]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d126      	bne.n	8003e5e <PCD_EP_ISR_Handler+0x5f0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	4413      	add	r3, r2
 8003e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	00da      	lsls	r2, r3, #3
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	4413      	add	r3, r2
 8003e32:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e36:	623b      	str	r3, [r7, #32]
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	801a      	strh	r2, [r3, #0]
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	801a      	strh	r2, [r3, #0]
 8003e5c:	e061      	b.n	8003f22 <PCD_EP_ISR_Handler+0x6b4>
 8003e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e60:	785b      	ldrb	r3, [r3, #1]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d15d      	bne.n	8003f22 <PCD_EP_ISR_Handler+0x6b4>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7a:	4413      	add	r3, r2
 8003e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	00da      	lsls	r2, r3, #3
 8003e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e86:	4413      	add	r3, r2
 8003e88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e90:	2200      	movs	r2, #0
 8003e92:	801a      	strh	r2, [r3, #0]
 8003e94:	e045      	b.n	8003f22 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9e:	785b      	ldrb	r3, [r3, #1]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d126      	bne.n	8003ef2 <PCD_EP_ISR_Handler+0x684>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb8:	4413      	add	r3, r2
 8003eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	00da      	lsls	r2, r3, #3
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003eca:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eda:	801a      	strh	r2, [r3, #0]
 8003edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eee:	801a      	strh	r2, [r3, #0]
 8003ef0:	e017      	b.n	8003f22 <PCD_EP_ISR_Handler+0x6b4>
 8003ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef4:	785b      	ldrb	r3, [r3, #1]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d113      	bne.n	8003f22 <PCD_EP_ISR_Handler+0x6b4>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f08:	4413      	add	r3, r2
 8003f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	00da      	lsls	r2, r3, #3
 8003f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f14:	4413      	add	r3, r2
 8003f16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1e:	2200      	movs	r2, #0
 8003f20:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	4619      	mov	r1, r3
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fc3e 	bl	80037aa <HAL_PCD_DataInStageCallback>
 8003f2e:	e051      	b.n	8003fd4 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003f30:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d144      	bne.n	8003fc6 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4413      	add	r3, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	4413      	add	r3, r2
 8003f56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f60:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d907      	bls.n	8003f80 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8003f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f72:	699a      	ldr	r2, [r3, #24]
 8003f74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f78:	1ad2      	subs	r2, r2, r3
 8003f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7c:	619a      	str	r2, [r3, #24]
 8003f7e:	e002      	b.n	8003f86 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8003f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f82:	2200      	movs	r2, #0
 8003f84:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff fc08 	bl	80037aa <HAL_PCD_DataInStageCallback>
 8003f9a:	e01b      	b.n	8003fd4 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003fa4:	441a      	add	r2, r3
 8003fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003fb2:	441a      	add	r2, r3
 8003fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f004 f9cc 	bl	800835c <USB_EPStartXfer>
 8003fc4:	e006      	b.n	8003fd4 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003fc6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003fca:	461a      	mov	r2, r3
 8003fcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f917 	bl	8004202 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	b21b      	sxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f6ff ac49 	blt.w	8003878 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3758      	adds	r7, #88	@ 0x58
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d07c      	beq.n	8004102 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004010:	b29b      	uxth	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	4413      	add	r3, r2
 8004022:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800402c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	8b7b      	ldrh	r3, [r7, #26]
 8004034:	429a      	cmp	r2, r3
 8004036:	d306      	bcc.n	8004046 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	699a      	ldr	r2, [r3, #24]
 800403c:	8b7b      	ldrh	r3, [r7, #26]
 800403e:	1ad2      	subs	r2, r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	619a      	str	r2, [r3, #24]
 8004044:	e002      	b.n	800404c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2200      	movs	r2, #0
 800404a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d123      	bne.n	800409c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800406a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800406e:	833b      	strh	r3, [r7, #24]
 8004070:	8b3b      	ldrh	r3, [r7, #24]
 8004072:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004076:	833b      	strh	r3, [r7, #24]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	441a      	add	r2, r3
 8004086:	8b3b      	ldrh	r3, [r7, #24]
 8004088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800408c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004098:	b29b      	uxth	r3, r3
 800409a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800409c:	88fb      	ldrh	r3, [r7, #6]
 800409e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01f      	beq.n	80040e6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040c0:	82fb      	strh	r3, [r7, #22]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	441a      	add	r2, r3
 80040d0:	8afb      	ldrh	r3, [r7, #22]
 80040d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80040e6:	8b7b      	ldrh	r3, [r7, #26]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8085 	beq.w	80041f8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	6959      	ldr	r1, [r3, #20]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	891a      	ldrh	r2, [r3, #8]
 80040fa:	8b7b      	ldrh	r3, [r7, #26]
 80040fc:	f005 fd46 	bl	8009b8c <USB_ReadPMA>
 8004100:	e07a      	b.n	80041f8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800410a:	b29b      	uxth	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	6812      	ldr	r2, [r2, #0]
 800411a:	4413      	add	r3, r2
 800411c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004126:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	699a      	ldr	r2, [r3, #24]
 800412c:	8b7b      	ldrh	r3, [r7, #26]
 800412e:	429a      	cmp	r2, r3
 8004130:	d306      	bcc.n	8004140 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	8b7b      	ldrh	r3, [r7, #26]
 8004138:	1ad2      	subs	r2, r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	619a      	str	r2, [r3, #24]
 800413e:	e002      	b.n	8004146 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2200      	movs	r2, #0
 8004144:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d123      	bne.n	8004196 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29b      	uxth	r3, r3
 8004160:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004168:	83fb      	strh	r3, [r7, #30]
 800416a:	8bfb      	ldrh	r3, [r7, #30]
 800416c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004170:	83fb      	strh	r3, [r7, #30]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	8bfb      	ldrh	r3, [r7, #30]
 8004182:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004186:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800418a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800418e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004192:	b29b      	uxth	r3, r3
 8004194:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d11f      	bne.n	80041e0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ba:	83bb      	strh	r3, [r7, #28]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	441a      	add	r2, r3
 80041ca:	8bbb      	ldrh	r3, [r7, #28]
 80041cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80041dc:	b29b      	uxth	r3, r3
 80041de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80041e0:	8b7b      	ldrh	r3, [r7, #26]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	6959      	ldr	r1, [r3, #20]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	895a      	ldrh	r2, [r3, #10]
 80041f2:	8b7b      	ldrh	r3, [r7, #26]
 80041f4:	f005 fcca 	bl	8009b8c <USB_ReadPMA>
    }
  }

  return count;
 80041f8:	8b7b      	ldrh	r3, [r7, #26]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b0a4      	sub	sp, #144	@ 0x90
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	4613      	mov	r3, r2
 800420e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 81db 	beq.w	80045d2 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004224:	b29b      	uxth	r3, r3
 8004226:	461a      	mov	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4413      	add	r3, r2
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	4413      	add	r3, r2
 8004236:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004240:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	699a      	ldr	r2, [r3, #24]
 8004248:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800424c:	429a      	cmp	r2, r3
 800424e:	d907      	bls.n	8004260 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004258:	1ad2      	subs	r2, r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	619a      	str	r2, [r3, #24]
 800425e:	e002      	b.n	8004266 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2200      	movs	r2, #0
 8004264:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f040 80b9 	bne.w	80043e2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	785b      	ldrb	r3, [r3, #1]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d126      	bne.n	80042c6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004286:	b29b      	uxth	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428c:	4413      	add	r3, r2
 800428e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	00da      	lsls	r2, r3, #3
 8004296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004298:	4413      	add	r3, r2
 800429a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800429e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ae:	801a      	strh	r2, [r3, #0]
 80042b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042be:	b29a      	uxth	r2, r3
 80042c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c2:	801a      	strh	r2, [r3, #0]
 80042c4:	e01a      	b.n	80042fc <HAL_PCD_EP_DB_Transmit+0xfa>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	785b      	ldrb	r3, [r3, #1]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d116      	bne.n	80042fc <HAL_PCD_EP_DB_Transmit+0xfa>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042dc:	b29b      	uxth	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e2:	4413      	add	r3, r2
 80042e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	00da      	lsls	r2, r3, #3
 80042ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ee:	4413      	add	r3, r2
 80042f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	2200      	movs	r2, #0
 80042fa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	785b      	ldrb	r3, [r3, #1]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d126      	bne.n	8004358 <HAL_PCD_EP_DB_Transmit+0x156>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004318:	b29b      	uxth	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	4413      	add	r3, r2
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	00da      	lsls	r2, r3, #3
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	4413      	add	r3, r2
 800432c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800433c:	b29a      	uxth	r2, r3
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800434c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004350:	b29a      	uxth	r2, r3
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	801a      	strh	r2, [r3, #0]
 8004356:	e017      	b.n	8004388 <HAL_PCD_EP_DB_Transmit+0x186>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d113      	bne.n	8004388 <HAL_PCD_EP_DB_Transmit+0x186>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004368:	b29b      	uxth	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	4413      	add	r3, r2
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	00da      	lsls	r2, r3, #3
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	4413      	add	r3, r2
 800437c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004380:	623b      	str	r3, [r7, #32]
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	2200      	movs	r2, #0
 8004386:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	4619      	mov	r1, r3
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f7ff fa0b 	bl	80037aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 82fa 	beq.w	8004994 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ba:	82fb      	strh	r3, [r7, #22]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	441a      	add	r2, r3
 80043ca:	8afb      	ldrh	r3, [r7, #22]
 80043cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043dc:	b29b      	uxth	r3, r3
 80043de:	8013      	strh	r3, [r2, #0]
 80043e0:	e2d8      	b.n	8004994 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d021      	beq.n	8004430 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004406:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	441a      	add	r2, r3
 8004418:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800441c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004424:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800442c:	b29b      	uxth	r3, r3
 800442e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004436:	2b01      	cmp	r3, #1
 8004438:	f040 82ac 	bne.w	8004994 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004444:	441a      	add	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	69da      	ldr	r2, [r3, #28]
 800444e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004452:	441a      	add	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	6a1a      	ldr	r2, [r3, #32]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	429a      	cmp	r2, r3
 8004462:	d30b      	bcc.n	800447c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	6a1a      	ldr	r2, [r3, #32]
 8004470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004474:	1ad2      	subs	r2, r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	621a      	str	r2, [r3, #32]
 800447a:	e017      	b.n	80044ac <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d108      	bne.n	8004496 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004484:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004488:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004494:	e00a      	b.n	80044ac <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2200      	movs	r2, #0
 80044aa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	785b      	ldrb	r3, [r3, #1]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d165      	bne.n	8004580 <HAL_PCD_EP_DB_Transmit+0x37e>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c8:	4413      	add	r3, r2
 80044ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	00da      	lsls	r2, r3, #3
 80044d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044d4:	4413      	add	r3, r2
 80044d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80044da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ea:	801a      	strh	r2, [r3, #0]
 80044ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <HAL_PCD_EP_DB_Transmit+0x308>
 80044f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004502:	b29a      	uxth	r2, r3
 8004504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004506:	801a      	strh	r2, [r3, #0]
 8004508:	e057      	b.n	80045ba <HAL_PCD_EP_DB_Transmit+0x3b8>
 800450a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800450e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004510:	d818      	bhi.n	8004544 <HAL_PCD_EP_DB_Transmit+0x342>
 8004512:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004516:	085b      	lsrs	r3, r3, #1
 8004518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800451a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <HAL_PCD_EP_DB_Transmit+0x32a>
 8004526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004528:	3301      	adds	r3, #1
 800452a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800452c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	b29a      	uxth	r2, r3
 8004532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004534:	b29b      	uxth	r3, r3
 8004536:	029b      	lsls	r3, r3, #10
 8004538:	b29b      	uxth	r3, r3
 800453a:	4313      	orrs	r3, r2
 800453c:	b29a      	uxth	r2, r3
 800453e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004540:	801a      	strh	r2, [r3, #0]
 8004542:	e03a      	b.n	80045ba <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004544:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800454c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	2b00      	cmp	r3, #0
 8004556:	d102      	bne.n	800455e <HAL_PCD_EP_DB_Transmit+0x35c>
 8004558:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800455a:	3b01      	subs	r3, #1
 800455c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800455e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29a      	uxth	r2, r3
 8004564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004566:	b29b      	uxth	r3, r3
 8004568:	029b      	lsls	r3, r3, #10
 800456a:	b29b      	uxth	r3, r3
 800456c:	4313      	orrs	r3, r2
 800456e:	b29b      	uxth	r3, r3
 8004570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004578:	b29a      	uxth	r2, r3
 800457a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457c:	801a      	strh	r2, [r3, #0]
 800457e:	e01c      	b.n	80045ba <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	785b      	ldrb	r3, [r3, #1]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d118      	bne.n	80045ba <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	647b      	str	r3, [r7, #68]	@ 0x44
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004596:	b29b      	uxth	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800459c:	4413      	add	r3, r2
 800459e:	647b      	str	r3, [r7, #68]	@ 0x44
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	00da      	lsls	r2, r3, #3
 80045a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045a8:	4413      	add	r3, r2
 80045aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80045b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045b8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	6959      	ldr	r1, [r3, #20]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	891a      	ldrh	r2, [r3, #8]
 80045c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f005 fa9c 	bl	8009b08 <USB_WritePMA>
 80045d0:	e1e0      	b.n	8004994 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045da:	b29b      	uxth	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4413      	add	r3, r2
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	4413      	add	r3, r2
 80045ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045f6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004602:	429a      	cmp	r2, r3
 8004604:	d307      	bcc.n	8004616 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800460e:	1ad2      	subs	r2, r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	619a      	str	r2, [r3, #24]
 8004614:	e002      	b.n	800461c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2200      	movs	r2, #0
 800461a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f040 80c0 	bne.w	80047a6 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	785b      	ldrb	r3, [r3, #1]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d126      	bne.n	800467c <HAL_PCD_EP_DB_Transmit+0x47a>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800463c:	b29b      	uxth	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004642:	4413      	add	r3, r2
 8004644:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	00da      	lsls	r2, r3, #3
 800464c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800464e:	4413      	add	r3, r2
 8004650:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004654:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004656:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004660:	b29a      	uxth	r2, r3
 8004662:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004664:	801a      	strh	r2, [r3, #0]
 8004666:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004674:	b29a      	uxth	r2, r3
 8004676:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	e01a      	b.n	80046b2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	785b      	ldrb	r3, [r3, #1]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d116      	bne.n	80046b2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	667b      	str	r3, [r7, #100]	@ 0x64
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004692:	b29b      	uxth	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004698:	4413      	add	r3, r2
 800469a:	667b      	str	r3, [r7, #100]	@ 0x64
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	00da      	lsls	r2, r3, #3
 80046a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046a4:	4413      	add	r3, r2
 80046a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80046ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046ae:	2200      	movs	r2, #0
 80046b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d12b      	bne.n	8004718 <HAL_PCD_EP_DB_Transmit+0x516>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046d4:	4413      	add	r3, r2
 80046d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	00da      	lsls	r2, r3, #3
 80046de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046e0:	4413      	add	r3, r2
 80046e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046fc:	801a      	strh	r2, [r3, #0]
 80046fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800470a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800470e:	b29a      	uxth	r2, r3
 8004710:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004714:	801a      	strh	r2, [r3, #0]
 8004716:	e017      	b.n	8004748 <HAL_PCD_EP_DB_Transmit+0x546>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	785b      	ldrb	r3, [r3, #1]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d113      	bne.n	8004748 <HAL_PCD_EP_DB_Transmit+0x546>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004728:	b29b      	uxth	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800472e:	4413      	add	r3, r2
 8004730:	677b      	str	r3, [r7, #116]	@ 0x74
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	00da      	lsls	r2, r3, #3
 8004738:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800473a:	4413      	add	r3, r2
 800473c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004740:	673b      	str	r3, [r7, #112]	@ 0x70
 8004742:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004744:	2200      	movs	r2, #0
 8004746:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	4619      	mov	r1, r3
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7ff f82b 	bl	80037aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800475a:	2b00      	cmp	r3, #0
 800475c:	f040 811a 	bne.w	8004994 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800477a:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	441a      	add	r2, r3
 800478c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004790:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004794:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004798:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800479c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	8013      	strh	r3, [r2, #0]
 80047a4:	e0f6      	b.n	8004994 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d121      	bne.n	80047f4 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	441a      	add	r2, r3
 80047dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80047e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	f040 80ca 	bne.w	8004994 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004808:	441a      	add	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	69da      	ldr	r2, [r3, #28]
 8004812:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004816:	441a      	add	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	6a1a      	ldr	r2, [r3, #32]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	429a      	cmp	r2, r3
 8004826:	d30b      	bcc.n	8004840 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6a1a      	ldr	r2, [r3, #32]
 8004834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004838:	1ad2      	subs	r2, r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	621a      	str	r2, [r3, #32]
 800483e:	e017      	b.n	8004870 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d108      	bne.n	800485a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004848:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800484c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004858:	e00a      	b.n	8004870 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2200      	movs	r2, #0
 8004866:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	657b      	str	r3, [r7, #84]	@ 0x54
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	785b      	ldrb	r3, [r3, #1]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d165      	bne.n	800494a <HAL_PCD_EP_DB_Transmit+0x748>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800488c:	b29b      	uxth	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004892:	4413      	add	r3, r2
 8004894:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	00da      	lsls	r2, r3, #3
 800489c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800489e:	4413      	add	r3, r2
 80048a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048b4:	801a      	strh	r2, [r3, #0]
 80048b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <HAL_PCD_EP_DB_Transmit+0x6d2>
 80048be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	e054      	b.n	800497e <HAL_PCD_EP_DB_Transmit+0x77c>
 80048d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80048da:	d818      	bhi.n	800490e <HAL_PCD_EP_DB_Transmit+0x70c>
 80048dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_PCD_EP_DB_Transmit+0x6f4>
 80048f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048f2:	3301      	adds	r3, #1
 80048f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048fe:	b29b      	uxth	r3, r3
 8004900:	029b      	lsls	r3, r3, #10
 8004902:	b29b      	uxth	r3, r3
 8004904:	4313      	orrs	r3, r2
 8004906:	b29a      	uxth	r2, r3
 8004908:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800490a:	801a      	strh	r2, [r3, #0]
 800490c:	e037      	b.n	800497e <HAL_PCD_EP_DB_Transmit+0x77c>
 800490e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004916:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	2b00      	cmp	r3, #0
 8004920:	d102      	bne.n	8004928 <HAL_PCD_EP_DB_Transmit+0x726>
 8004922:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004924:	3b01      	subs	r3, #1
 8004926:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004928:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29a      	uxth	r2, r3
 800492e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004930:	b29b      	uxth	r3, r3
 8004932:	029b      	lsls	r3, r3, #10
 8004934:	b29b      	uxth	r3, r3
 8004936:	4313      	orrs	r3, r2
 8004938:	b29b      	uxth	r3, r3
 800493a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004942:	b29a      	uxth	r2, r3
 8004944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	e019      	b.n	800497e <HAL_PCD_EP_DB_Transmit+0x77c>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	785b      	ldrb	r3, [r3, #1]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d115      	bne.n	800497e <HAL_PCD_EP_DB_Transmit+0x77c>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800495a:	b29b      	uxth	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004960:	4413      	add	r3, r2
 8004962:	657b      	str	r3, [r7, #84]	@ 0x54
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	00da      	lsls	r2, r3, #3
 800496a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800496c:	4413      	add	r3, r2
 800496e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004972:	653b      	str	r3, [r7, #80]	@ 0x50
 8004974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004978:	b29a      	uxth	r2, r3
 800497a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800497c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	6959      	ldr	r1, [r3, #20]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	895a      	ldrh	r2, [r3, #10]
 800498a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800498e:	b29b      	uxth	r3, r3
 8004990:	f005 f8ba 	bl	8009b08 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ae:	82bb      	strh	r3, [r7, #20]
 80049b0:	8abb      	ldrh	r3, [r7, #20]
 80049b2:	f083 0310 	eor.w	r3, r3, #16
 80049b6:	82bb      	strh	r3, [r7, #20]
 80049b8:	8abb      	ldrh	r3, [r7, #20]
 80049ba:	f083 0320 	eor.w	r3, r3, #32
 80049be:	82bb      	strh	r3, [r7, #20]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	441a      	add	r2, r3
 80049ce:	8abb      	ldrh	r3, [r7, #20]
 80049d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3790      	adds	r7, #144	@ 0x90
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a00:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a06:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d102      	bne.n	8004a16 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	f001 b83a 	b.w	8005a8a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 816f 	beq.w	8004d0a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a2c:	4bb5      	ldr	r3, [pc, #724]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d00c      	beq.n	8004a52 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a38:	4bb2      	ldr	r3, [pc, #712]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 030c 	and.w	r3, r3, #12
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d15c      	bne.n	8004afe <HAL_RCC_OscConfig+0x10e>
 8004a44:	4baf      	ldr	r3, [pc, #700]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a50:	d155      	bne.n	8004afe <HAL_RCC_OscConfig+0x10e>
 8004a52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a56:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004a5e:	fa93 f3a3 	rbit	r3, r3
 8004a62:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 8004a66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6a:	fab3 f383 	clz	r3, r3
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d102      	bne.n	8004a84 <HAL_RCC_OscConfig+0x94>
 8004a7e:	4ba1      	ldr	r3, [pc, #644]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	e015      	b.n	8004ab0 <HAL_RCC_OscConfig+0xc0>
 8004a84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a88:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8004a90:	fa93 f3a3 	rbit	r3, r3
 8004a94:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8004a98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a9c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004aa0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004aa4:	fa93 f3a3 	rbit	r3, r3
 8004aa8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004aac:	4b95      	ldr	r3, [pc, #596]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004ab4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8004ab8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8004abc:	fa92 f2a2 	rbit	r2, r2
 8004ac0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8004ac4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004ac8:	fab2 f282 	clz	r2, r2
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	f042 0220 	orr.w	r2, r2, #32
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	f002 021f 	and.w	r2, r2, #31
 8004ad8:	2101      	movs	r1, #1
 8004ada:	fa01 f202 	lsl.w	r2, r1, r2
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8111 	beq.w	8004d08 <HAL_RCC_OscConfig+0x318>
 8004ae6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004aea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 8108 	bne.w	8004d08 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f000 bfc6 	b.w	8005a8a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b0e:	d106      	bne.n	8004b1e <HAL_RCC_OscConfig+0x12e>
 8004b10:	4b7c      	ldr	r3, [pc, #496]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a7b      	ldr	r2, [pc, #492]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	e036      	b.n	8004b8c <HAL_RCC_OscConfig+0x19c>
 8004b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x158>
 8004b2e:	4b75      	ldr	r3, [pc, #468]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a74      	ldr	r2, [pc, #464]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	4b72      	ldr	r3, [pc, #456]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a71      	ldr	r2, [pc, #452]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004b40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e021      	b.n	8004b8c <HAL_RCC_OscConfig+0x19c>
 8004b48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCC_OscConfig+0x184>
 8004b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a69      	ldr	r2, [pc, #420]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	4b67      	ldr	r3, [pc, #412]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a66      	ldr	r2, [pc, #408]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e00b      	b.n	8004b8c <HAL_RCC_OscConfig+0x19c>
 8004b74:	4b63      	ldr	r3, [pc, #396]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a62      	ldr	r2, [pc, #392]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	4b60      	ldr	r3, [pc, #384]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a5f      	ldr	r2, [pc, #380]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b8a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d059      	beq.n	8004c50 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fe f960 	bl	8002e60 <HAL_GetTick>
 8004ba0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba4:	e00a      	b.n	8004bbc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba6:	f7fe f95b 	bl	8002e60 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	@ 0x64
 8004bb4:	d902      	bls.n	8004bbc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	f000 bf67 	b.w	8005a8a <HAL_RCC_OscConfig+0x109a>
 8004bbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bc0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8004bc8:	fa93 f3a3 	rbit	r3, r3
 8004bcc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8004bd0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd4:	fab3 f383 	clz	r3, r3
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d102      	bne.n	8004bee <HAL_RCC_OscConfig+0x1fe>
 8004be8:	4b46      	ldr	r3, [pc, #280]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	e015      	b.n	8004c1a <HAL_RCC_OscConfig+0x22a>
 8004bee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bf2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8004bfa:	fa93 f3a3 	rbit	r3, r3
 8004bfe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8004c02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c06:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004c0a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8004c0e:	fa93 f3a3 	rbit	r3, r3
 8004c12:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004c16:	4b3b      	ldr	r3, [pc, #236]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c1e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8004c22:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8004c26:	fa92 f2a2 	rbit	r2, r2
 8004c2a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8004c2e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004c32:	fab2 f282 	clz	r2, r2
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	f042 0220 	orr.w	r2, r2, #32
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	f002 021f 	and.w	r2, r2, #31
 8004c42:	2101      	movs	r1, #1
 8004c44:	fa01 f202 	lsl.w	r2, r1, r2
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0ab      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x1b6>
 8004c4e:	e05c      	b.n	8004d0a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c50:	f7fe f906 	bl	8002e60 <HAL_GetTick>
 8004c54:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c58:	e00a      	b.n	8004c70 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c5a:	f7fe f901 	bl	8002e60 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b64      	cmp	r3, #100	@ 0x64
 8004c68:	d902      	bls.n	8004c70 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	f000 bf0d 	b.w	8005a8a <HAL_RCC_OscConfig+0x109a>
 8004c70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c74:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004c7c:	fa93 f3a3 	rbit	r3, r3
 8004c80:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8004c84:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c88:	fab3 f383 	clz	r3, r3
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d102      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x2b2>
 8004c9c:	4b19      	ldr	r3, [pc, #100]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	e015      	b.n	8004cce <HAL_RCC_OscConfig+0x2de>
 8004ca2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004ca6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004caa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004cae:	fa93 f3a3 	rbit	r3, r3
 8004cb2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004cb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004cba:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004cbe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004cc2:	fa93 f3a3 	rbit	r3, r3
 8004cc6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004cca:	4b0e      	ldr	r3, [pc, #56]	@ (8004d04 <HAL_RCC_OscConfig+0x314>)
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004cd2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8004cd6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8004cda:	fa92 f2a2 	rbit	r2, r2
 8004cde:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8004ce2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004ce6:	fab2 f282 	clz	r2, r2
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	f042 0220 	orr.w	r2, r2, #32
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	f002 021f 	and.w	r2, r2, #31
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1ab      	bne.n	8004c5a <HAL_RCC_OscConfig+0x26a>
 8004d02:	e002      	b.n	8004d0a <HAL_RCC_OscConfig+0x31a>
 8004d04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 817f 	beq.w	800501e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004d20:	4ba7      	ldr	r3, [pc, #668]	@ (8004fc0 <HAL_RCC_OscConfig+0x5d0>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 030c 	and.w	r3, r3, #12
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00c      	beq.n	8004d46 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d2c:	4ba4      	ldr	r3, [pc, #656]	@ (8004fc0 <HAL_RCC_OscConfig+0x5d0>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f003 030c 	and.w	r3, r3, #12
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d173      	bne.n	8004e20 <HAL_RCC_OscConfig+0x430>
 8004d38:	4ba1      	ldr	r3, [pc, #644]	@ (8004fc0 <HAL_RCC_OscConfig+0x5d0>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d44:	d16c      	bne.n	8004e20 <HAL_RCC_OscConfig+0x430>
 8004d46:	2302      	movs	r3, #2
 8004d48:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004d50:	fa93 f3a3 	rbit	r3, r3
 8004d54:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8004d58:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5c:	fab3 f383 	clz	r3, r3
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d102      	bne.n	8004d76 <HAL_RCC_OscConfig+0x386>
 8004d70:	4b93      	ldr	r3, [pc, #588]	@ (8004fc0 <HAL_RCC_OscConfig+0x5d0>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	e013      	b.n	8004d9e <HAL_RCC_OscConfig+0x3ae>
 8004d76:	2302      	movs	r3, #2
 8004d78:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004d80:	fa93 f3a3 	rbit	r3, r3
 8004d84:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004d88:	2302      	movs	r3, #2
 8004d8a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004d8e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004d92:	fa93 f3a3 	rbit	r3, r3
 8004d96:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004d9a:	4b89      	ldr	r3, [pc, #548]	@ (8004fc0 <HAL_RCC_OscConfig+0x5d0>)
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004da4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8004da8:	fa92 f2a2 	rbit	r2, r2
 8004dac:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8004db0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004db4:	fab2 f282 	clz	r2, r2
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	f042 0220 	orr.w	r2, r2, #32
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	f002 021f 	and.w	r2, r2, #31
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <HAL_RCC_OscConfig+0x3f6>
 8004dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dd4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d002      	beq.n	8004de6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f000 be52 	b.w	8005a8a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de6:	4b76      	ldr	r3, [pc, #472]	@ (8004fc0 <HAL_RCC_OscConfig+0x5d0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004df2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	21f8      	movs	r1, #248	@ 0xf8
 8004dfc:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e00:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8004e04:	fa91 f1a1 	rbit	r1, r1
 8004e08:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8004e0c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004e10:	fab1 f181 	clz	r1, r1
 8004e14:	b2c9      	uxtb	r1, r1
 8004e16:	408b      	lsls	r3, r1
 8004e18:	4969      	ldr	r1, [pc, #420]	@ (8004fc0 <HAL_RCC_OscConfig+0x5d0>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e1e:	e0fe      	b.n	800501e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8088 	beq.w	8004f42 <HAL_RCC_OscConfig+0x552>
 8004e32:	2301      	movs	r3, #1
 8004e34:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e38:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004e3c:	fa93 f3a3 	rbit	r3, r3
 8004e40:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8004e44:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e48:	fab3 f383 	clz	r3, r3
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004e52:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	461a      	mov	r2, r3
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5e:	f7fd ffff 	bl	8002e60 <HAL_GetTick>
 8004e62:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e66:	e00a      	b.n	8004e7e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e68:	f7fd fffa 	bl	8002e60 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d902      	bls.n	8004e7e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	f000 be06 	b.w	8005a8a <HAL_RCC_OscConfig+0x109a>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e84:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004e88:	fa93 f3a3 	rbit	r3, r3
 8004e8c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8004e90:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e94:	fab3 f383 	clz	r3, r3
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d102      	bne.n	8004eae <HAL_RCC_OscConfig+0x4be>
 8004ea8:	4b45      	ldr	r3, [pc, #276]	@ (8004fc0 <HAL_RCC_OscConfig+0x5d0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	e013      	b.n	8004ed6 <HAL_RCC_OscConfig+0x4e6>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004eb8:	fa93 f3a3 	rbit	r3, r3
 8004ebc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004ec6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004eca:	fa93 f3a3 	rbit	r3, r3
 8004ece:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8004fc0 <HAL_RCC_OscConfig+0x5d0>)
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004edc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8004ee0:	fa92 f2a2 	rbit	r2, r2
 8004ee4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8004ee8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004eec:	fab2 f282 	clz	r2, r2
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	f042 0220 	orr.w	r2, r2, #32
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	f002 021f 	and.w	r2, r2, #31
 8004efc:	2101      	movs	r1, #1
 8004efe:	fa01 f202 	lsl.w	r2, r1, r2
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0af      	beq.n	8004e68 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f08:	4b2d      	ldr	r3, [pc, #180]	@ (8004fc0 <HAL_RCC_OscConfig+0x5d0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	21f8      	movs	r1, #248	@ 0xf8
 8004f1e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f22:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8004f26:	fa91 f1a1 	rbit	r1, r1
 8004f2a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8004f2e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004f32:	fab1 f181 	clz	r1, r1
 8004f36:	b2c9      	uxtb	r1, r1
 8004f38:	408b      	lsls	r3, r1
 8004f3a:	4921      	ldr	r1, [pc, #132]	@ (8004fc0 <HAL_RCC_OscConfig+0x5d0>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]
 8004f40:	e06d      	b.n	800501e <HAL_RCC_OscConfig+0x62e>
 8004f42:	2301      	movs	r3, #1
 8004f44:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f48:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004f4c:	fa93 f3a3 	rbit	r3, r3
 8004f50:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8004f54:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f58:	fab3 f383 	clz	r3, r3
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004f62:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	461a      	mov	r2, r3
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6e:	f7fd ff77 	bl	8002e60 <HAL_GetTick>
 8004f72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f76:	e00a      	b.n	8004f8e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f78:	f7fd ff72 	bl	8002e60 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d902      	bls.n	8004f8e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	f000 bd7e 	b.w	8005a8a <HAL_RCC_OscConfig+0x109a>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f94:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004f98:	fa93 f3a3 	rbit	r3, r3
 8004f9c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8004fa0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa4:	fab3 f383 	clz	r3, r3
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d105      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x5d4>
 8004fb8:	4b01      	ldr	r3, [pc, #4]	@ (8004fc0 <HAL_RCC_OscConfig+0x5d0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	e016      	b.n	8004fec <HAL_RCC_OscConfig+0x5fc>
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004fce:	fa93 f3a3 	rbit	r3, r3
 8004fd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004fdc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004fe0:	fa93 f3a3 	rbit	r3, r3
 8004fe4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004fe8:	4bbf      	ldr	r3, [pc, #764]	@ (80052e8 <HAL_RCC_OscConfig+0x8f8>)
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	2202      	movs	r2, #2
 8004fee:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004ff2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004ff6:	fa92 f2a2 	rbit	r2, r2
 8004ffa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8004ffe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005002:	fab2 f282 	clz	r2, r2
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	f042 0220 	orr.w	r2, r2, #32
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	f002 021f 	and.w	r2, r2, #31
 8005012:	2101      	movs	r1, #1
 8005014:	fa01 f202 	lsl.w	r2, r1, r2
 8005018:	4013      	ands	r3, r2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1ac      	bne.n	8004f78 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800501e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005022:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 8113 	beq.w	800525a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005034:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005038:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d07c      	beq.n	800513e <HAL_RCC_OscConfig+0x74e>
 8005044:	2301      	movs	r3, #1
 8005046:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504e:	fa93 f3a3 	rbit	r3, r3
 8005052:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8005056:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800505a:	fab3 f383 	clz	r3, r3
 800505e:	b2db      	uxtb	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	4ba2      	ldr	r3, [pc, #648]	@ (80052ec <HAL_RCC_OscConfig+0x8fc>)
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	461a      	mov	r2, r3
 800506a:	2301      	movs	r3, #1
 800506c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506e:	f7fd fef7 	bl	8002e60 <HAL_GetTick>
 8005072:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005076:	e00a      	b.n	800508e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005078:	f7fd fef2 	bl	8002e60 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d902      	bls.n	800508e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	f000 bcfe 	b.w	8005a8a <HAL_RCC_OscConfig+0x109a>
 800508e:	2302      	movs	r3, #2
 8005090:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005098:	fa93 f2a3 	rbit	r2, r3
 800509c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ae:	2202      	movs	r2, #2
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	fa93 f2a3 	rbit	r2, r3
 80050c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80050d2:	2202      	movs	r2, #2
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	fa93 f2a3 	rbit	r2, r3
 80050e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80050ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ee:	4b7e      	ldr	r3, [pc, #504]	@ (80052e8 <HAL_RCC_OscConfig+0x8f8>)
 80050f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80050fa:	2102      	movs	r1, #2
 80050fc:	6019      	str	r1, [r3, #0]
 80050fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005102:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	fa93 f1a3 	rbit	r1, r3
 800510c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005110:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005114:	6019      	str	r1, [r3, #0]
  return result;
 8005116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800511a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	fab3 f383 	clz	r3, r3
 8005124:	b2db      	uxtb	r3, r3
 8005126:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	2101      	movs	r1, #1
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	4013      	ands	r3, r2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d09d      	beq.n	8005078 <HAL_RCC_OscConfig+0x688>
 800513c:	e08d      	b.n	800525a <HAL_RCC_OscConfig+0x86a>
 800513e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005142:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005146:	2201      	movs	r2, #1
 8005148:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800514e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	fa93 f2a3 	rbit	r2, r3
 8005158:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800515c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005160:	601a      	str	r2, [r3, #0]
  return result;
 8005162:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005166:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800516a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800516c:	fab3 f383 	clz	r3, r3
 8005170:	b2db      	uxtb	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	4b5d      	ldr	r3, [pc, #372]	@ (80052ec <HAL_RCC_OscConfig+0x8fc>)
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	461a      	mov	r2, r3
 800517c:	2300      	movs	r3, #0
 800517e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005180:	f7fd fe6e 	bl	8002e60 <HAL_GetTick>
 8005184:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005188:	e00a      	b.n	80051a0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800518a:	f7fd fe69 	bl	8002e60 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d902      	bls.n	80051a0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	f000 bc75 	b.w	8005a8a <HAL_RCC_OscConfig+0x109a>
 80051a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80051a8:	2202      	movs	r2, #2
 80051aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	fa93 f2a3 	rbit	r2, r3
 80051ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80051cc:	2202      	movs	r2, #2
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	fa93 f2a3 	rbit	r2, r3
 80051de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80051f0:	2202      	movs	r2, #2
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	fa93 f2a3 	rbit	r2, r3
 8005202:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005206:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800520a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800520c:	4b36      	ldr	r3, [pc, #216]	@ (80052e8 <HAL_RCC_OscConfig+0x8f8>)
 800520e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005210:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005214:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005218:	2102      	movs	r1, #2
 800521a:	6019      	str	r1, [r3, #0]
 800521c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005220:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	fa93 f1a3 	rbit	r1, r3
 800522a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800522e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005232:	6019      	str	r1, [r3, #0]
  return result;
 8005234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005238:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	fab3 f383 	clz	r3, r3
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	2101      	movs	r1, #1
 8005250:	fa01 f303 	lsl.w	r3, r1, r3
 8005254:	4013      	ands	r3, r2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d197      	bne.n	800518a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800525a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800525e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 81a5 	beq.w	80055ba <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005270:	2300      	movs	r3, #0
 8005272:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005276:	4b1c      	ldr	r3, [pc, #112]	@ (80052e8 <HAL_RCC_OscConfig+0x8f8>)
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d116      	bne.n	80052b0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005282:	4b19      	ldr	r3, [pc, #100]	@ (80052e8 <HAL_RCC_OscConfig+0x8f8>)
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	4a18      	ldr	r2, [pc, #96]	@ (80052e8 <HAL_RCC_OscConfig+0x8f8>)
 8005288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800528c:	61d3      	str	r3, [r2, #28]
 800528e:	4b16      	ldr	r3, [pc, #88]	@ (80052e8 <HAL_RCC_OscConfig+0x8f8>)
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8005296:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800529a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052a8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b0:	4b0f      	ldr	r3, [pc, #60]	@ (80052f0 <HAL_RCC_OscConfig+0x900>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d121      	bne.n	8005300 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052bc:	4b0c      	ldr	r3, [pc, #48]	@ (80052f0 <HAL_RCC_OscConfig+0x900>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0b      	ldr	r2, [pc, #44]	@ (80052f0 <HAL_RCC_OscConfig+0x900>)
 80052c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c8:	f7fd fdca 	bl	8002e60 <HAL_GetTick>
 80052cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d0:	e010      	b.n	80052f4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d2:	f7fd fdc5 	bl	8002e60 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b64      	cmp	r3, #100	@ 0x64
 80052e0:	d908      	bls.n	80052f4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e3d1      	b.n	8005a8a <HAL_RCC_OscConfig+0x109a>
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000
 80052ec:	10908120 	.word	0x10908120
 80052f0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f4:	4b8d      	ldr	r3, [pc, #564]	@ (800552c <HAL_RCC_OscConfig+0xb3c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0e8      	beq.n	80052d2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005300:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005304:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d106      	bne.n	800531e <HAL_RCC_OscConfig+0x92e>
 8005310:	4b87      	ldr	r3, [pc, #540]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	4a86      	ldr	r2, [pc, #536]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	6213      	str	r3, [r2, #32]
 800531c:	e035      	b.n	800538a <HAL_RCC_OscConfig+0x99a>
 800531e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005322:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x958>
 800532e:	4b80      	ldr	r3, [pc, #512]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	4a7f      	ldr	r2, [pc, #508]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 8005334:	f023 0301 	bic.w	r3, r3, #1
 8005338:	6213      	str	r3, [r2, #32]
 800533a:	4b7d      	ldr	r3, [pc, #500]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	4a7c      	ldr	r2, [pc, #496]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 8005340:	f023 0304 	bic.w	r3, r3, #4
 8005344:	6213      	str	r3, [r2, #32]
 8005346:	e020      	b.n	800538a <HAL_RCC_OscConfig+0x99a>
 8005348:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800534c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b05      	cmp	r3, #5
 8005356:	d10c      	bne.n	8005372 <HAL_RCC_OscConfig+0x982>
 8005358:	4b75      	ldr	r3, [pc, #468]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	4a74      	ldr	r2, [pc, #464]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 800535e:	f043 0304 	orr.w	r3, r3, #4
 8005362:	6213      	str	r3, [r2, #32]
 8005364:	4b72      	ldr	r3, [pc, #456]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	4a71      	ldr	r2, [pc, #452]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	6213      	str	r3, [r2, #32]
 8005370:	e00b      	b.n	800538a <HAL_RCC_OscConfig+0x99a>
 8005372:	4b6f      	ldr	r3, [pc, #444]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	4a6e      	ldr	r2, [pc, #440]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 8005378:	f023 0301 	bic.w	r3, r3, #1
 800537c:	6213      	str	r3, [r2, #32]
 800537e:	4b6c      	ldr	r3, [pc, #432]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	4a6b      	ldr	r2, [pc, #428]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 8005384:	f023 0304 	bic.w	r3, r3, #4
 8005388:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800538a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800538e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 8081 	beq.w	800549e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800539c:	f7fd fd60 	bl	8002e60 <HAL_GetTick>
 80053a0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a4:	e00b      	b.n	80053be <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a6:	f7fd fd5b 	bl	8002e60 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e365      	b.n	8005a8a <HAL_RCC_OscConfig+0x109a>
 80053be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053c2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80053c6:	2202      	movs	r2, #2
 80053c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	fa93 f2a3 	rbit	r2, r3
 80053d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053e6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80053ea:	2202      	movs	r2, #2
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053f2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	fa93 f2a3 	rbit	r2, r3
 80053fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005400:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005404:	601a      	str	r2, [r3, #0]
  return result;
 8005406:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800540a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800540e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005410:	fab3 f383 	clz	r3, r3
 8005414:	b2db      	uxtb	r3, r3
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f043 0302 	orr.w	r3, r3, #2
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d102      	bne.n	800542a <HAL_RCC_OscConfig+0xa3a>
 8005424:	4b42      	ldr	r3, [pc, #264]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	e013      	b.n	8005452 <HAL_RCC_OscConfig+0xa62>
 800542a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800542e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005432:	2202      	movs	r2, #2
 8005434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800543a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	fa93 f2a3 	rbit	r2, r3
 8005444:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005448:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	4b38      	ldr	r3, [pc, #224]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 8005450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005452:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005456:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800545a:	2102      	movs	r1, #2
 800545c:	6011      	str	r1, [r2, #0]
 800545e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005462:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005466:	6812      	ldr	r2, [r2, #0]
 8005468:	fa92 f1a2 	rbit	r1, r2
 800546c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005470:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8005474:	6011      	str	r1, [r2, #0]
  return result;
 8005476:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800547a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	fab2 f282 	clz	r2, r2
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	f002 021f 	and.w	r2, r2, #31
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f202 	lsl.w	r2, r1, r2
 8005496:	4013      	ands	r3, r2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d084      	beq.n	80053a6 <HAL_RCC_OscConfig+0x9b6>
 800549c:	e083      	b.n	80055a6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800549e:	f7fd fcdf 	bl	8002e60 <HAL_GetTick>
 80054a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a6:	e00b      	b.n	80054c0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054a8:	f7fd fcda 	bl	8002e60 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e2e4      	b.n	8005a8a <HAL_RCC_OscConfig+0x109a>
 80054c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054c4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80054c8:	2202      	movs	r2, #2
 80054ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054d0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	fa93 f2a3 	rbit	r2, r3
 80054da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054de:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054e8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80054ec:	2202      	movs	r2, #2
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	fa93 f2a3 	rbit	r2, r3
 80054fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005502:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005506:	601a      	str	r2, [r3, #0]
  return result;
 8005508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800550c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005510:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005512:	fab3 f383 	clz	r3, r3
 8005516:	b2db      	uxtb	r3, r3
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f043 0302 	orr.w	r3, r3, #2
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d106      	bne.n	8005534 <HAL_RCC_OscConfig+0xb44>
 8005526:	4b02      	ldr	r3, [pc, #8]	@ (8005530 <HAL_RCC_OscConfig+0xb40>)
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	e017      	b.n	800555c <HAL_RCC_OscConfig+0xb6c>
 800552c:	40007000 	.word	0x40007000
 8005530:	40021000 	.word	0x40021000
 8005534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005538:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800553c:	2202      	movs	r2, #2
 800553e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005540:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005544:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	fa93 f2a3 	rbit	r2, r3
 800554e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005552:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	4bb3      	ldr	r3, [pc, #716]	@ (8005828 <HAL_RCC_OscConfig+0xe38>)
 800555a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005560:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005564:	2102      	movs	r1, #2
 8005566:	6011      	str	r1, [r2, #0]
 8005568:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800556c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	fa92 f1a2 	rbit	r1, r2
 8005576:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800557a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800557e:	6011      	str	r1, [r2, #0]
  return result;
 8005580:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005584:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	fab2 f282 	clz	r2, r2
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	f002 021f 	and.w	r2, r2, #31
 800559a:	2101      	movs	r1, #1
 800559c:	fa01 f202 	lsl.w	r2, r1, r2
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d180      	bne.n	80054a8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055a6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d105      	bne.n	80055ba <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ae:	4b9e      	ldr	r3, [pc, #632]	@ (8005828 <HAL_RCC_OscConfig+0xe38>)
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	4a9d      	ldr	r2, [pc, #628]	@ (8005828 <HAL_RCC_OscConfig+0xe38>)
 80055b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055b8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 825e 	beq.w	8005a88 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055cc:	4b96      	ldr	r3, [pc, #600]	@ (8005828 <HAL_RCC_OscConfig+0xe38>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f003 030c 	and.w	r3, r3, #12
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	f000 821f 	beq.w	8005a18 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	f040 8170 	bne.w	80058cc <HAL_RCC_OscConfig+0xedc>
 80055ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055f0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80055f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80055f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055fe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	fa93 f2a3 	rbit	r2, r3
 8005608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800560c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005610:	601a      	str	r2, [r3, #0]
  return result;
 8005612:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005616:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800561a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561c:	fab3 f383 	clz	r3, r3
 8005620:	b2db      	uxtb	r3, r3
 8005622:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005626:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	461a      	mov	r2, r3
 800562e:	2300      	movs	r3, #0
 8005630:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005632:	f7fd fc15 	bl	8002e60 <HAL_GetTick>
 8005636:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800563a:	e009      	b.n	8005650 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800563c:	f7fd fc10 	bl	8002e60 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e21c      	b.n	8005a8a <HAL_RCC_OscConfig+0x109a>
 8005650:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005654:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005658:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800565c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005662:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	fa93 f2a3 	rbit	r2, r3
 800566c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005670:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005674:	601a      	str	r2, [r3, #0]
  return result;
 8005676:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800567a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800567e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005680:	fab3 f383 	clz	r3, r3
 8005684:	b2db      	uxtb	r3, r3
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d102      	bne.n	800569a <HAL_RCC_OscConfig+0xcaa>
 8005694:	4b64      	ldr	r3, [pc, #400]	@ (8005828 <HAL_RCC_OscConfig+0xe38>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	e027      	b.n	80056ea <HAL_RCC_OscConfig+0xcfa>
 800569a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800569e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80056a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80056a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056ac:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	fa93 f2a3 	rbit	r2, r3
 80056b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056ba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056c4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80056c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056d2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	fa93 f2a3 	rbit	r2, r3
 80056dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056e0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	4b50      	ldr	r3, [pc, #320]	@ (8005828 <HAL_RCC_OscConfig+0xe38>)
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80056ee:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80056f2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80056f6:	6011      	str	r1, [r2, #0]
 80056f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80056fc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005700:	6812      	ldr	r2, [r2, #0]
 8005702:	fa92 f1a2 	rbit	r1, r2
 8005706:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800570a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800570e:	6011      	str	r1, [r2, #0]
  return result;
 8005710:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005714:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	fab2 f282 	clz	r2, r2
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	f042 0220 	orr.w	r2, r2, #32
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	f002 021f 	and.w	r2, r2, #31
 800572a:	2101      	movs	r1, #1
 800572c:	fa01 f202 	lsl.w	r2, r1, r2
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d182      	bne.n	800563c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005736:	4b3c      	ldr	r3, [pc, #240]	@ (8005828 <HAL_RCC_OscConfig+0xe38>)
 8005738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573a:	f023 020f 	bic.w	r2, r3, #15
 800573e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005742:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	4937      	ldr	r1, [pc, #220]	@ (8005828 <HAL_RCC_OscConfig+0xe38>)
 800574c:	4313      	orrs	r3, r2
 800574e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005750:	4b35      	ldr	r3, [pc, #212]	@ (8005828 <HAL_RCC_OscConfig+0xe38>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8005758:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800575c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6a19      	ldr	r1, [r3, #32]
 8005764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005768:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	430b      	orrs	r3, r1
 8005772:	492d      	ldr	r1, [pc, #180]	@ (8005828 <HAL_RCC_OscConfig+0xe38>)
 8005774:	4313      	orrs	r3, r2
 8005776:	604b      	str	r3, [r1, #4]
 8005778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800577c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005780:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005784:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800578a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	fa93 f2a3 	rbit	r2, r3
 8005794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005798:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800579c:	601a      	str	r2, [r3, #0]
  return result;
 800579e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057a2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80057a6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057a8:	fab3 f383 	clz	r3, r3
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80057b2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	461a      	mov	r2, r3
 80057ba:	2301      	movs	r3, #1
 80057bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057be:	f7fd fb4f 	bl	8002e60 <HAL_GetTick>
 80057c2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057c6:	e009      	b.n	80057dc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c8:	f7fd fb4a 	bl	8002e60 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e156      	b.n	8005a8a <HAL_RCC_OscConfig+0x109a>
 80057dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057e0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80057e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80057e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057ee:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	fa93 f2a3 	rbit	r2, r3
 80057f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057fc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005800:	601a      	str	r2, [r3, #0]
  return result;
 8005802:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005806:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800580a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800580c:	fab3 f383 	clz	r3, r3
 8005810:	b2db      	uxtb	r3, r3
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	b2db      	uxtb	r3, r3
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	d105      	bne.n	800582c <HAL_RCC_OscConfig+0xe3c>
 8005820:	4b01      	ldr	r3, [pc, #4]	@ (8005828 <HAL_RCC_OscConfig+0xe38>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	e02a      	b.n	800587c <HAL_RCC_OscConfig+0xe8c>
 8005826:	bf00      	nop
 8005828:	40021000 	.word	0x40021000
 800582c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005830:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005834:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800583e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	fa93 f2a3 	rbit	r2, r3
 8005848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800584c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005856:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800585a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005864:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	fa93 f2a3 	rbit	r2, r3
 800586e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005872:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	4b86      	ldr	r3, [pc, #536]	@ (8005a94 <HAL_RCC_OscConfig+0x10a4>)
 800587a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005880:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005884:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005888:	6011      	str	r1, [r2, #0]
 800588a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800588e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	fa92 f1a2 	rbit	r1, r2
 8005898:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800589c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80058a0:	6011      	str	r1, [r2, #0]
  return result;
 80058a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80058a6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	fab2 f282 	clz	r2, r2
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	f042 0220 	orr.w	r2, r2, #32
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	f002 021f 	and.w	r2, r2, #31
 80058bc:	2101      	movs	r1, #1
 80058be:	fa01 f202 	lsl.w	r2, r1, r2
 80058c2:	4013      	ands	r3, r2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f43f af7f 	beq.w	80057c8 <HAL_RCC_OscConfig+0xdd8>
 80058ca:	e0dd      	b.n	8005a88 <HAL_RCC_OscConfig+0x1098>
 80058cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058d0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80058d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80058d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058de:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	fa93 f2a3 	rbit	r2, r3
 80058e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058ec:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80058f0:	601a      	str	r2, [r3, #0]
  return result;
 80058f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058f6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80058fa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058fc:	fab3 f383 	clz	r3, r3
 8005900:	b2db      	uxtb	r3, r3
 8005902:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005906:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	461a      	mov	r2, r3
 800590e:	2300      	movs	r3, #0
 8005910:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005912:	f7fd faa5 	bl	8002e60 <HAL_GetTick>
 8005916:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800591a:	e009      	b.n	8005930 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800591c:	f7fd faa0 	bl	8002e60 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e0ac      	b.n	8005a8a <HAL_RCC_OscConfig+0x109a>
 8005930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005934:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005938:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800593c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005942:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	fa93 f2a3 	rbit	r2, r3
 800594c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005950:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005954:	601a      	str	r2, [r3, #0]
  return result;
 8005956:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800595a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800595e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005960:	fab3 f383 	clz	r3, r3
 8005964:	b2db      	uxtb	r3, r3
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b01      	cmp	r3, #1
 8005972:	d102      	bne.n	800597a <HAL_RCC_OscConfig+0xf8a>
 8005974:	4b47      	ldr	r3, [pc, #284]	@ (8005a94 <HAL_RCC_OscConfig+0x10a4>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	e027      	b.n	80059ca <HAL_RCC_OscConfig+0xfda>
 800597a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800597e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005982:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005986:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005988:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800598c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	fa93 f2a3 	rbit	r2, r3
 8005996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800599a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059a4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80059a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059b2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	fa93 f2a3 	rbit	r2, r3
 80059bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059c0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	4b33      	ldr	r3, [pc, #204]	@ (8005a94 <HAL_RCC_OscConfig+0x10a4>)
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80059ce:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80059d2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80059d6:	6011      	str	r1, [r2, #0]
 80059d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80059dc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	fa92 f1a2 	rbit	r1, r2
 80059e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80059ea:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80059ee:	6011      	str	r1, [r2, #0]
  return result;
 80059f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80059f4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	fab2 f282 	clz	r2, r2
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	f042 0220 	orr.w	r2, r2, #32
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	f002 021f 	and.w	r2, r2, #31
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a10:	4013      	ands	r3, r2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d182      	bne.n	800591c <HAL_RCC_OscConfig+0xf2c>
 8005a16:	e037      	b.n	8005a88 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a1c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e02e      	b.n	8005a8a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a2c:	4b19      	ldr	r3, [pc, #100]	@ (8005a94 <HAL_RCC_OscConfig+0x10a4>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005a34:	4b17      	ldr	r3, [pc, #92]	@ (8005a94 <HAL_RCC_OscConfig+0x10a4>)
 8005a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a38:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005a40:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8005a44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d117      	bne.n	8005a84 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005a54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005a58:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d10b      	bne.n	8005a84 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005a6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005a70:	f003 020f 	and.w	r2, r3, #15
 8005a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40021000 	.word	0x40021000

08005a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b09e      	sub	sp, #120	@ 0x78
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e162      	b.n	8005d76 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ab0:	4b90      	ldr	r3, [pc, #576]	@ (8005cf4 <HAL_RCC_ClockConfig+0x25c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d910      	bls.n	8005ae0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005abe:	4b8d      	ldr	r3, [pc, #564]	@ (8005cf4 <HAL_RCC_ClockConfig+0x25c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f023 0207 	bic.w	r2, r3, #7
 8005ac6:	498b      	ldr	r1, [pc, #556]	@ (8005cf4 <HAL_RCC_ClockConfig+0x25c>)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ace:	4b89      	ldr	r3, [pc, #548]	@ (8005cf4 <HAL_RCC_ClockConfig+0x25c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e14a      	b.n	8005d76 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d008      	beq.n	8005afe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aec:	4b82      	ldr	r3, [pc, #520]	@ (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	497f      	ldr	r1, [pc, #508]	@ (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80dc 	beq.w	8005cc4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d13c      	bne.n	8005b8e <HAL_RCC_ClockConfig+0xf6>
 8005b14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b18:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b1c:	fa93 f3a3 	rbit	r3, r3
 8005b20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005b22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b24:	fab3 f383 	clz	r3, r3
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d102      	bne.n	8005b3e <HAL_RCC_ClockConfig+0xa6>
 8005b38:	4b6f      	ldr	r3, [pc, #444]	@ (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	e00f      	b.n	8005b5e <HAL_RCC_ClockConfig+0xc6>
 8005b3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b42:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b46:	fa93 f3a3 	rbit	r3, r3
 8005b4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b50:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b54:	fa93 f3a3 	rbit	r3, r3
 8005b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b5a:	4b67      	ldr	r3, [pc, #412]	@ (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005b62:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b66:	fa92 f2a2 	rbit	r2, r2
 8005b6a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005b6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b6e:	fab2 f282 	clz	r2, r2
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	f042 0220 	orr.w	r2, r2, #32
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	f002 021f 	and.w	r2, r2, #31
 8005b7e:	2101      	movs	r1, #1
 8005b80:	fa01 f202 	lsl.w	r2, r1, r2
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d17b      	bne.n	8005c82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e0f3      	b.n	8005d76 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d13c      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x178>
 8005b96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b9a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b9e:	fa93 f3a3 	rbit	r3, r3
 8005ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005ba4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba6:	fab3 f383 	clz	r3, r3
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d102      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x128>
 8005bba:	4b4f      	ldr	r3, [pc, #316]	@ (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	e00f      	b.n	8005be0 <HAL_RCC_ClockConfig+0x148>
 8005bc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bc8:	fa93 f3a3 	rbit	r3, r3
 8005bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bd6:	fa93 f3a3 	rbit	r3, r3
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bdc:	4b46      	ldr	r3, [pc, #280]	@ (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005be4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005be6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005be8:	fa92 f2a2 	rbit	r2, r2
 8005bec:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005bee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005bf0:	fab2 f282 	clz	r2, r2
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	f042 0220 	orr.w	r2, r2, #32
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	f002 021f 	and.w	r2, r2, #31
 8005c00:	2101      	movs	r1, #1
 8005c02:	fa01 f202 	lsl.w	r2, r1, r2
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d13a      	bne.n	8005c82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0b2      	b.n	8005d76 <HAL_RCC_ClockConfig+0x2de>
 8005c10:	2302      	movs	r3, #2
 8005c12:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c16:	fa93 f3a3 	rbit	r3, r3
 8005c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c1e:	fab3 f383 	clz	r3, r3
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	f043 0301 	orr.w	r3, r3, #1
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d102      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x1a0>
 8005c32:	4b31      	ldr	r3, [pc, #196]	@ (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	e00d      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1bc>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3e:	fa93 f3a3 	rbit	r3, r3
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c44:	2302      	movs	r3, #2
 8005c46:	623b      	str	r3, [r7, #32]
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	fa93 f3a3 	rbit	r3, r3
 8005c4e:	61fb      	str	r3, [r7, #28]
 8005c50:	4b29      	ldr	r3, [pc, #164]	@ (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c54:	2202      	movs	r2, #2
 8005c56:	61ba      	str	r2, [r7, #24]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	fa92 f2a2 	rbit	r2, r2
 8005c5e:	617a      	str	r2, [r7, #20]
  return result;
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	fab2 f282 	clz	r2, r2
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	f042 0220 	orr.w	r2, r2, #32
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	f002 021f 	and.w	r2, r2, #31
 8005c72:	2101      	movs	r1, #1
 8005c74:	fa01 f202 	lsl.w	r2, r1, r2
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e079      	b.n	8005d76 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c82:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f023 0203 	bic.w	r2, r3, #3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	491a      	ldr	r1, [pc, #104]	@ (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c94:	f7fd f8e4 	bl	8002e60 <HAL_GetTick>
 8005c98:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9a:	e00a      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c9c:	f7fd f8e0 	bl	8002e60 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e061      	b.n	8005d76 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb2:	4b11      	ldr	r3, [pc, #68]	@ (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f003 020c 	and.w	r2, r3, #12
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d1eb      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf4 <HAL_RCC_ClockConfig+0x25c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d214      	bcs.n	8005cfc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd2:	4b08      	ldr	r3, [pc, #32]	@ (8005cf4 <HAL_RCC_ClockConfig+0x25c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f023 0207 	bic.w	r2, r3, #7
 8005cda:	4906      	ldr	r1, [pc, #24]	@ (8005cf4 <HAL_RCC_ClockConfig+0x25c>)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce2:	4b04      	ldr	r3, [pc, #16]	@ (8005cf4 <HAL_RCC_ClockConfig+0x25c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d005      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e040      	b.n	8005d76 <HAL_RCC_ClockConfig+0x2de>
 8005cf4:	40022000 	.word	0x40022000
 8005cf8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d08:	4b1d      	ldr	r3, [pc, #116]	@ (8005d80 <HAL_RCC_ClockConfig+0x2e8>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	491a      	ldr	r1, [pc, #104]	@ (8005d80 <HAL_RCC_ClockConfig+0x2e8>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d26:	4b16      	ldr	r3, [pc, #88]	@ (8005d80 <HAL_RCC_ClockConfig+0x2e8>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	4912      	ldr	r1, [pc, #72]	@ (8005d80 <HAL_RCC_ClockConfig+0x2e8>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005d3a:	f000 f829 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8005d3e:	4601      	mov	r1, r0
 8005d40:	4b0f      	ldr	r3, [pc, #60]	@ (8005d80 <HAL_RCC_ClockConfig+0x2e8>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d48:	22f0      	movs	r2, #240	@ 0xf0
 8005d4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	fa92 f2a2 	rbit	r2, r2
 8005d52:	60fa      	str	r2, [r7, #12]
  return result;
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	fab2 f282 	clz	r2, r2
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	40d3      	lsrs	r3, r2
 8005d5e:	4a09      	ldr	r2, [pc, #36]	@ (8005d84 <HAL_RCC_ClockConfig+0x2ec>)
 8005d60:	5cd3      	ldrb	r3, [r2, r3]
 8005d62:	fa21 f303 	lsr.w	r3, r1, r3
 8005d66:	4a08      	ldr	r2, [pc, #32]	@ (8005d88 <HAL_RCC_ClockConfig+0x2f0>)
 8005d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005d6a:	4b08      	ldr	r3, [pc, #32]	@ (8005d8c <HAL_RCC_ClockConfig+0x2f4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fd f832 	bl	8002dd8 <HAL_InitTick>
  
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3778      	adds	r7, #120	@ 0x78
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40021000 	.word	0x40021000
 8005d84:	0800cb54 	.word	0x0800cb54
 8005d88:	20000000 	.word	0x20000000
 8005d8c:	20000004 	.word	0x20000004

08005d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60bb      	str	r3, [r7, #8]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	2300      	movs	r3, #0
 8005da4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005daa:	4b1f      	ldr	r3, [pc, #124]	@ (8005e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 030c 	and.w	r3, r3, #12
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d002      	beq.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x30>
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d003      	beq.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x36>
 8005dbe:	e029      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005dc2:	613b      	str	r3, [r7, #16]
      break;
 8005dc4:	e029      	b.n	8005e1a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	0c9b      	lsrs	r3, r3, #18
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	4a18      	ldr	r2, [pc, #96]	@ (8005e30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005dd0:	5cd3      	ldrb	r3, [r2, r3]
 8005dd2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005dd4:	4b14      	ldr	r3, [pc, #80]	@ (8005e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	4a15      	ldr	r2, [pc, #84]	@ (8005e34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005dde:	5cd3      	ldrb	r3, [r2, r3]
 8005de0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005dec:	4a0f      	ldr	r2, [pc, #60]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	fb02 f303 	mul.w	r3, r2, r3
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	e007      	b.n	8005e0e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005dfe:	4a0b      	ldr	r2, [pc, #44]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	fb02 f303 	mul.w	r3, r2, r3
 8005e0c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	613b      	str	r3, [r7, #16]
      break;
 8005e12:	e002      	b.n	8005e1a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e14:	4b05      	ldr	r3, [pc, #20]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e16:	613b      	str	r3, [r7, #16]
      break;
 8005e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e1a:	693b      	ldr	r3, [r7, #16]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	007a1200 	.word	0x007a1200
 8005e30:	0800cb6c 	.word	0x0800cb6c
 8005e34:	0800cb7c 	.word	0x0800cb7c

08005e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e3c:	4b03      	ldr	r3, [pc, #12]	@ (8005e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000000 	.word	0x20000000

08005e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005e56:	f7ff ffef 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005e5a:	4601      	mov	r1, r0
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e64:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005e68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	fa92 f2a2 	rbit	r2, r2
 8005e70:	603a      	str	r2, [r7, #0]
  return result;
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	fab2 f282 	clz	r2, r2
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	40d3      	lsrs	r3, r2
 8005e7c:	4a04      	ldr	r2, [pc, #16]	@ (8005e90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005e7e:	5cd3      	ldrb	r3, [r2, r3]
 8005e80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	0800cb64 	.word	0x0800cb64

08005e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005e9a:	f7ff ffcd 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005e9e:	4601      	mov	r1, r0
 8005ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005ea8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005eac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	fa92 f2a2 	rbit	r2, r2
 8005eb4:	603a      	str	r2, [r7, #0]
  return result;
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	fab2 f282 	clz	r2, r2
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	40d3      	lsrs	r3, r2
 8005ec0:	4a04      	ldr	r2, [pc, #16]	@ (8005ed4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005ec2:	5cd3      	ldrb	r3, [r2, r3]
 8005ec4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	0800cb64 	.word	0x0800cb64

08005ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b092      	sub	sp, #72	@ 0x48
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 80d4 	beq.w	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005efc:	4b4e      	ldr	r3, [pc, #312]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10e      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f08:	4b4b      	ldr	r3, [pc, #300]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	4a4a      	ldr	r2, [pc, #296]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f12:	61d3      	str	r3, [r2, #28]
 8005f14:	4b48      	ldr	r3, [pc, #288]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f1c:	60bb      	str	r3, [r7, #8]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f26:	4b45      	ldr	r3, [pc, #276]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d118      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f32:	4b42      	ldr	r3, [pc, #264]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a41      	ldr	r2, [pc, #260]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f3e:	f7fc ff8f 	bl	8002e60 <HAL_GetTick>
 8005f42:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f44:	e008      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f46:	f7fc ff8b 	bl	8002e60 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b64      	cmp	r3, #100	@ 0x64
 8005f52:	d901      	bls.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e1d6      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f58:	4b38      	ldr	r3, [pc, #224]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0f0      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f64:	4b34      	ldr	r3, [pc, #208]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 8084 	beq.w	800607e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d07c      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f84:	4b2c      	ldr	r3, [pc, #176]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f92:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f96:	fa93 f3a3 	rbit	r3, r3
 8005f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f9e:	fab3 f383 	clz	r3, r3
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4b26      	ldr	r3, [pc, #152]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	461a      	mov	r2, r3
 8005fae:	2301      	movs	r3, #1
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fba:	fa93 f3a3 	rbit	r3, r3
 8005fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fc2:	fab3 f383 	clz	r3, r3
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4b1d      	ldr	r3, [pc, #116]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005fd6:	4a18      	ldr	r2, [pc, #96]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fda:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d04b      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe6:	f7fc ff3b 	bl	8002e60 <HAL_GetTick>
 8005fea:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fec:	e00a      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fee:	f7fc ff37 	bl	8002e60 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e180      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006004:	2302      	movs	r3, #2
 8006006:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600a:	fa93 f3a3 	rbit	r3, r3
 800600e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006010:	2302      	movs	r3, #2
 8006012:	623b      	str	r3, [r7, #32]
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	fa93 f3a3 	rbit	r3, r3
 800601a:	61fb      	str	r3, [r7, #28]
  return result;
 800601c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800601e:	fab3 f383 	clz	r3, r3
 8006022:	b2db      	uxtb	r3, r3
 8006024:	095b      	lsrs	r3, r3, #5
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f043 0302 	orr.w	r3, r3, #2
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d108      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006032:	4b01      	ldr	r3, [pc, #4]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	e00d      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006038:	40021000 	.word	0x40021000
 800603c:	40007000 	.word	0x40007000
 8006040:	10908100 	.word	0x10908100
 8006044:	2302      	movs	r3, #2
 8006046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	fa93 f3a3 	rbit	r3, r3
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	4b9a      	ldr	r3, [pc, #616]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006054:	2202      	movs	r2, #2
 8006056:	613a      	str	r2, [r7, #16]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	fa92 f2a2 	rbit	r2, r2
 800605e:	60fa      	str	r2, [r7, #12]
  return result;
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	fab2 f282 	clz	r2, r2
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	f002 021f 	and.w	r2, r2, #31
 8006072:	2101      	movs	r1, #1
 8006074:	fa01 f202 	lsl.w	r2, r1, r2
 8006078:	4013      	ands	r3, r2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0b7      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800607e:	4b8f      	ldr	r3, [pc, #572]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	498c      	ldr	r1, [pc, #560]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800608c:	4313      	orrs	r3, r2
 800608e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006090:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006094:	2b01      	cmp	r3, #1
 8006096:	d105      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006098:	4b88      	ldr	r3, [pc, #544]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	4a87      	ldr	r2, [pc, #540]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800609e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060b0:	4b82      	ldr	r3, [pc, #520]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b4:	f023 0203 	bic.w	r2, r3, #3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	497f      	ldr	r1, [pc, #508]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d008      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060ce:	4b7b      	ldr	r3, [pc, #492]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	4978      	ldr	r1, [pc, #480]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060ec:	4b73      	ldr	r3, [pc, #460]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	4970      	ldr	r1, [pc, #448]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d008      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800610a:	4b6c      	ldr	r3, [pc, #432]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800610c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610e:	f023 0210 	bic.w	r2, r3, #16
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	4969      	ldr	r1, [pc, #420]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006118:	4313      	orrs	r3, r2
 800611a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d008      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006128:	4b64      	ldr	r3, [pc, #400]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006134:	4961      	ldr	r1, [pc, #388]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006136:	4313      	orrs	r3, r2
 8006138:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d008      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006146:	4b5d      	ldr	r3, [pc, #372]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614a:	f023 0220 	bic.w	r2, r3, #32
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	495a      	ldr	r1, [pc, #360]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006154:	4313      	orrs	r3, r2
 8006156:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006164:	4b55      	ldr	r3, [pc, #340]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006168:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006170:	4952      	ldr	r1, [pc, #328]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006172:	4313      	orrs	r3, r2
 8006174:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b00      	cmp	r3, #0
 8006180:	d008      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006182:	4b4e      	ldr	r3, [pc, #312]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006186:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	494b      	ldr	r1, [pc, #300]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006190:	4313      	orrs	r3, r2
 8006192:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061a0:	4b46      	ldr	r3, [pc, #280]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	4943      	ldr	r1, [pc, #268]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d008      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061be:	4b3f      	ldr	r3, [pc, #252]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ca:	493c      	ldr	r1, [pc, #240]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80061dc:	4b37      	ldr	r3, [pc, #220]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e8:	4934      	ldr	r1, [pc, #208]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d008      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80061fa:	4b30      	ldr	r3, [pc, #192]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fe:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006206:	492d      	ldr	r1, [pc, #180]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006208:	4313      	orrs	r3, r2
 800620a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006218:	4b28      	ldr	r3, [pc, #160]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800621a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006224:	4925      	ldr	r1, [pc, #148]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006226:	4313      	orrs	r3, r2
 8006228:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d008      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006236:	4b21      	ldr	r3, [pc, #132]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006242:	491e      	ldr	r1, [pc, #120]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006244:	4313      	orrs	r3, r2
 8006246:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d008      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006254:	4b19      	ldr	r3, [pc, #100]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006258:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006260:	4916      	ldr	r1, [pc, #88]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006262:	4313      	orrs	r3, r2
 8006264:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d008      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006272:	4b12      	ldr	r3, [pc, #72]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006276:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627e:	490f      	ldr	r1, [pc, #60]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006280:	4313      	orrs	r3, r2
 8006282:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d008      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006290:	4b0a      	ldr	r3, [pc, #40]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006294:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629c:	4907      	ldr	r1, [pc, #28]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00c      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80062ae:	4b03      	ldr	r3, [pc, #12]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	e002      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80062ba:	bf00      	nop
 80062bc:	40021000 	.word	0x40021000
 80062c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062c2:	4913      	ldr	r1, [pc, #76]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d008      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80062d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062e0:	490b      	ldr	r1, [pc, #44]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d008      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80062f2:	4b07      	ldr	r3, [pc, #28]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062fe:	4904      	ldr	r1, [pc, #16]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006300:	4313      	orrs	r3, r2
 8006302:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3748      	adds	r7, #72	@ 0x48
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	40021000 	.word	0x40021000

08006314 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e073      	b.n	8006412 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	7f5b      	ldrb	r3, [r3, #29]
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d105      	bne.n	8006340 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7fc f9a8 	bl	8002690 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	2b10      	cmp	r3, #16
 8006352:	d055      	beq.n	8006400 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	22ca      	movs	r2, #202	@ 0xca
 800635a:	625a      	str	r2, [r3, #36]	@ 0x24
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2253      	movs	r2, #83	@ 0x53
 8006362:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f87f 	bl	8006468 <RTC_EnterInitMode>
 800636a:	4603      	mov	r3, r0
 800636c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d12c      	bne.n	80063ce <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006382:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006386:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6899      	ldr	r1, [r3, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	68d2      	ldr	r2, [r2, #12]
 80063ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6919      	ldr	r1, [r3, #16]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	041a      	lsls	r2, r3, #16
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f886 	bl	80064d6 <RTC_ExitInitMode>
 80063ca:	4603      	mov	r3, r0
 80063cc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d110      	bne.n	80063f6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80063e2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	22ff      	movs	r2, #255	@ 0xff
 80063fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80063fe:	e001      	b.n	8006404 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d102      	bne.n	8006410 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a0d      	ldr	r2, [pc, #52]	@ (8006464 <HAL_RTC_WaitForSynchro+0x48>)
 800642e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006430:	f7fc fd16 	bl	8002e60 <HAL_GetTick>
 8006434:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006436:	e009      	b.n	800644c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006438:	f7fc fd12 	bl	8002e60 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006446:	d901      	bls.n	800644c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e007      	b.n	800645c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0ee      	beq.n	8006438 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	0001ff5f 	.word	0x0001ff5f

08006468 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006482:	2b00      	cmp	r3, #0
 8006484:	d122      	bne.n	80064cc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006494:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006496:	f7fc fce3 	bl	8002e60 <HAL_GetTick>
 800649a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800649c:	e00c      	b.n	80064b8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800649e:	f7fc fcdf 	bl	8002e60 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064ac:	d904      	bls.n	80064b8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2204      	movs	r2, #4
 80064b2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <RTC_EnterInitMode+0x64>
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d1e8      	bne.n	800649e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064f0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f003 0320 	and.w	r3, r3, #32
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10a      	bne.n	8006516 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff ff8b 	bl	800641c <HAL_RTC_WaitForSynchro>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2204      	movs	r2, #4
 8006510:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006516:	7bfb      	ldrb	r3, [r7, #15]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e049      	b.n	80065c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fc fa02 	bl	8002950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3304      	adds	r3, #4
 800655c:	4619      	mov	r1, r3
 800655e:	4610      	mov	r0, r2
 8006560:	f000 fd7c 	bl	800705c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d001      	beq.n	80065e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e04f      	b.n	8006688 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0201 	orr.w	r2, r2, #1
 80065fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a23      	ldr	r2, [pc, #140]	@ (8006694 <HAL_TIM_Base_Start_IT+0xc4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d01d      	beq.n	8006646 <HAL_TIM_Base_Start_IT+0x76>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006612:	d018      	beq.n	8006646 <HAL_TIM_Base_Start_IT+0x76>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a1f      	ldr	r2, [pc, #124]	@ (8006698 <HAL_TIM_Base_Start_IT+0xc8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d013      	beq.n	8006646 <HAL_TIM_Base_Start_IT+0x76>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a1e      	ldr	r2, [pc, #120]	@ (800669c <HAL_TIM_Base_Start_IT+0xcc>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00e      	beq.n	8006646 <HAL_TIM_Base_Start_IT+0x76>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a1c      	ldr	r2, [pc, #112]	@ (80066a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d009      	beq.n	8006646 <HAL_TIM_Base_Start_IT+0x76>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a1b      	ldr	r2, [pc, #108]	@ (80066a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d004      	beq.n	8006646 <HAL_TIM_Base_Start_IT+0x76>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a19      	ldr	r2, [pc, #100]	@ (80066a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d115      	bne.n	8006672 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	4b17      	ldr	r3, [pc, #92]	@ (80066ac <HAL_TIM_Base_Start_IT+0xdc>)
 800664e:	4013      	ands	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b06      	cmp	r3, #6
 8006656:	d015      	beq.n	8006684 <HAL_TIM_Base_Start_IT+0xb4>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800665e:	d011      	beq.n	8006684 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006670:	e008      	b.n	8006684 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 0201 	orr.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	e000      	b.n	8006686 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006684:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40000400 	.word	0x40000400
 800669c:	40000800 	.word	0x40000800
 80066a0:	40013400 	.word	0x40013400
 80066a4:	40014000 	.word	0x40014000
 80066a8:	40015000 	.word	0x40015000
 80066ac:	00010007 	.word	0x00010007

080066b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e049      	b.n	8006756 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d106      	bne.n	80066dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fc f91c 	bl	8002914 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3304      	adds	r3, #4
 80066ec:	4619      	mov	r1, r3
 80066ee:	4610      	mov	r0, r2
 80066f0:	f000 fcb4 	bl	800705c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d109      	bne.n	8006784 <HAL_TIM_PWM_Start+0x24>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b01      	cmp	r3, #1
 800677a:	bf14      	ite	ne
 800677c:	2301      	movne	r3, #1
 800677e:	2300      	moveq	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	e03c      	b.n	80067fe <HAL_TIM_PWM_Start+0x9e>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b04      	cmp	r3, #4
 8006788:	d109      	bne.n	800679e <HAL_TIM_PWM_Start+0x3e>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b01      	cmp	r3, #1
 8006794:	bf14      	ite	ne
 8006796:	2301      	movne	r3, #1
 8006798:	2300      	moveq	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	e02f      	b.n	80067fe <HAL_TIM_PWM_Start+0x9e>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d109      	bne.n	80067b8 <HAL_TIM_PWM_Start+0x58>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	bf14      	ite	ne
 80067b0:	2301      	movne	r3, #1
 80067b2:	2300      	moveq	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	e022      	b.n	80067fe <HAL_TIM_PWM_Start+0x9e>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b0c      	cmp	r3, #12
 80067bc:	d109      	bne.n	80067d2 <HAL_TIM_PWM_Start+0x72>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	bf14      	ite	ne
 80067ca:	2301      	movne	r3, #1
 80067cc:	2300      	moveq	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	e015      	b.n	80067fe <HAL_TIM_PWM_Start+0x9e>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b10      	cmp	r3, #16
 80067d6:	d109      	bne.n	80067ec <HAL_TIM_PWM_Start+0x8c>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	bf14      	ite	ne
 80067e4:	2301      	movne	r3, #1
 80067e6:	2300      	moveq	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	e008      	b.n	80067fe <HAL_TIM_PWM_Start+0x9e>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	bf14      	ite	ne
 80067f8:	2301      	movne	r3, #1
 80067fa:	2300      	moveq	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e0a1      	b.n	800694a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d104      	bne.n	8006816 <HAL_TIM_PWM_Start+0xb6>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006814:	e023      	b.n	800685e <HAL_TIM_PWM_Start+0xfe>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b04      	cmp	r3, #4
 800681a:	d104      	bne.n	8006826 <HAL_TIM_PWM_Start+0xc6>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006824:	e01b      	b.n	800685e <HAL_TIM_PWM_Start+0xfe>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b08      	cmp	r3, #8
 800682a:	d104      	bne.n	8006836 <HAL_TIM_PWM_Start+0xd6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006834:	e013      	b.n	800685e <HAL_TIM_PWM_Start+0xfe>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b0c      	cmp	r3, #12
 800683a:	d104      	bne.n	8006846 <HAL_TIM_PWM_Start+0xe6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006844:	e00b      	b.n	800685e <HAL_TIM_PWM_Start+0xfe>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b10      	cmp	r3, #16
 800684a:	d104      	bne.n	8006856 <HAL_TIM_PWM_Start+0xf6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006854:	e003      	b.n	800685e <HAL_TIM_PWM_Start+0xfe>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2201      	movs	r2, #1
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f000 ffa8 	bl	80077bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a38      	ldr	r2, [pc, #224]	@ (8006954 <HAL_TIM_PWM_Start+0x1f4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d018      	beq.n	80068a8 <HAL_TIM_PWM_Start+0x148>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a37      	ldr	r2, [pc, #220]	@ (8006958 <HAL_TIM_PWM_Start+0x1f8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d013      	beq.n	80068a8 <HAL_TIM_PWM_Start+0x148>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a35      	ldr	r2, [pc, #212]	@ (800695c <HAL_TIM_PWM_Start+0x1fc>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00e      	beq.n	80068a8 <HAL_TIM_PWM_Start+0x148>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a34      	ldr	r2, [pc, #208]	@ (8006960 <HAL_TIM_PWM_Start+0x200>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d009      	beq.n	80068a8 <HAL_TIM_PWM_Start+0x148>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a32      	ldr	r2, [pc, #200]	@ (8006964 <HAL_TIM_PWM_Start+0x204>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d004      	beq.n	80068a8 <HAL_TIM_PWM_Start+0x148>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a31      	ldr	r2, [pc, #196]	@ (8006968 <HAL_TIM_PWM_Start+0x208>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d101      	bne.n	80068ac <HAL_TIM_PWM_Start+0x14c>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e000      	b.n	80068ae <HAL_TIM_PWM_Start+0x14e>
 80068ac:	2300      	movs	r3, #0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d007      	beq.n	80068c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a23      	ldr	r2, [pc, #140]	@ (8006954 <HAL_TIM_PWM_Start+0x1f4>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d01d      	beq.n	8006908 <HAL_TIM_PWM_Start+0x1a8>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d4:	d018      	beq.n	8006908 <HAL_TIM_PWM_Start+0x1a8>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a24      	ldr	r2, [pc, #144]	@ (800696c <HAL_TIM_PWM_Start+0x20c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d013      	beq.n	8006908 <HAL_TIM_PWM_Start+0x1a8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a22      	ldr	r2, [pc, #136]	@ (8006970 <HAL_TIM_PWM_Start+0x210>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00e      	beq.n	8006908 <HAL_TIM_PWM_Start+0x1a8>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006958 <HAL_TIM_PWM_Start+0x1f8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d009      	beq.n	8006908 <HAL_TIM_PWM_Start+0x1a8>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a18      	ldr	r2, [pc, #96]	@ (800695c <HAL_TIM_PWM_Start+0x1fc>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d004      	beq.n	8006908 <HAL_TIM_PWM_Start+0x1a8>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a19      	ldr	r2, [pc, #100]	@ (8006968 <HAL_TIM_PWM_Start+0x208>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d115      	bne.n	8006934 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	4b19      	ldr	r3, [pc, #100]	@ (8006974 <HAL_TIM_PWM_Start+0x214>)
 8006910:	4013      	ands	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b06      	cmp	r3, #6
 8006918:	d015      	beq.n	8006946 <HAL_TIM_PWM_Start+0x1e6>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006920:	d011      	beq.n	8006946 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f042 0201 	orr.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006932:	e008      	b.n	8006946 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0201 	orr.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	e000      	b.n	8006948 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006946:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40012c00 	.word	0x40012c00
 8006958:	40013400 	.word	0x40013400
 800695c:	40014000 	.word	0x40014000
 8006960:	40014400 	.word	0x40014400
 8006964:	40014800 	.word	0x40014800
 8006968:	40015000 	.word	0x40015000
 800696c:	40000400 	.word	0x40000400
 8006970:	40000800 	.word	0x40000800
 8006974:	00010007 	.word	0x00010007

08006978 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e097      	b.n	8006abc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d106      	bne.n	80069a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7fb fe9b 	bl	80026dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2202      	movs	r2, #2
 80069aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80069bc:	f023 0307 	bic.w	r3, r3, #7
 80069c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3304      	adds	r3, #4
 80069ca:	4619      	mov	r1, r3
 80069cc:	4610      	mov	r0, r2
 80069ce:	f000 fb45 	bl	800705c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069fa:	f023 0303 	bic.w	r3, r3, #3
 80069fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006a18:	f023 030c 	bic.w	r3, r3, #12
 8006a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	021b      	lsls	r3, r3, #8
 8006a34:	4313      	orrs	r3, r2
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	011a      	lsls	r2, r3, #4
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	031b      	lsls	r3, r3, #12
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006a56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006a5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ad4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006adc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ae4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006aec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d110      	bne.n	8006b16 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d102      	bne.n	8006b00 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006afa:	7b7b      	ldrb	r3, [r7, #13]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d001      	beq.n	8006b04 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e069      	b.n	8006bd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b14:	e031      	b.n	8006b7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d110      	bne.n	8006b3e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d102      	bne.n	8006b28 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b22:	7b3b      	ldrb	r3, [r7, #12]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d001      	beq.n	8006b2c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e055      	b.n	8006bd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b3c:	e01d      	b.n	8006b7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d108      	bne.n	8006b56 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d105      	bne.n	8006b56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b4a:	7b7b      	ldrb	r3, [r7, #13]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d102      	bne.n	8006b56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b50:	7b3b      	ldrb	r3, [r7, #12]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d001      	beq.n	8006b5a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e03e      	b.n	8006bd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2202      	movs	r2, #2
 8006b66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_TIM_Encoder_Start+0xc4>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d008      	beq.n	8006b98 <HAL_TIM_Encoder_Start+0xd4>
 8006b86:	e00f      	b.n	8006ba8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	2100      	movs	r1, #0
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 fe13 	bl	80077bc <TIM_CCxChannelCmd>
      break;
 8006b96:	e016      	b.n	8006bc6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	2104      	movs	r1, #4
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 fe0b 	bl	80077bc <TIM_CCxChannelCmd>
      break;
 8006ba6:	e00e      	b.n	8006bc6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2201      	movs	r2, #1
 8006bae:	2100      	movs	r1, #0
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fe03 	bl	80077bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	2104      	movs	r1, #4
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fdfc 	bl	80077bc <TIM_CCxChannelCmd>
      break;
 8006bc4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f042 0201 	orr.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d020      	beq.n	8006c44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01b      	beq.n	8006c44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0202 	mvn.w	r2, #2
 8006c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f9f8 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 8006c30:	e005      	b.n	8006c3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f9ea 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f9fb 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d020      	beq.n	8006c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f003 0304 	and.w	r3, r3, #4
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01b      	beq.n	8006c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f06f 0204 	mvn.w	r2, #4
 8006c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2202      	movs	r2, #2
 8006c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f9d2 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 8006c7c:	e005      	b.n	8006c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f9c4 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f9d5 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f003 0308 	and.w	r3, r3, #8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d020      	beq.n	8006cdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01b      	beq.n	8006cdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f06f 0208 	mvn.w	r2, #8
 8006cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2204      	movs	r2, #4
 8006cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	f003 0303 	and.w	r3, r3, #3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f9ac 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 8006cc8:	e005      	b.n	8006cd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f99e 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f9af 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f003 0310 	and.w	r3, r3, #16
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d020      	beq.n	8006d28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f003 0310 	and.w	r3, r3, #16
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01b      	beq.n	8006d28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f06f 0210 	mvn.w	r2, #16
 8006cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2208      	movs	r2, #8
 8006cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f986 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 8006d14:	e005      	b.n	8006d22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f978 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f989 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00c      	beq.n	8006d4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d007      	beq.n	8006d4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f06f 0201 	mvn.w	r2, #1
 8006d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fa fd40 	bl	80017cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00c      	beq.n	8006d70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d007      	beq.n	8006d70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fde2 	bl	8007934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00c      	beq.n	8006d94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d007      	beq.n	8006d94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fdda 	bl	8007948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00c      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d007      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f948 	bl	8007048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d007      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0220 	mvn.w	r2, #32
 8006dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fda2 	bl	8007920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ddc:	bf00      	nop
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e0ff      	b.n	8007002 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b14      	cmp	r3, #20
 8006e0e:	f200 80f0 	bhi.w	8006ff2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e12:	a201      	add	r2, pc, #4	@ (adr r2, 8006e18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e6d 	.word	0x08006e6d
 8006e1c:	08006ff3 	.word	0x08006ff3
 8006e20:	08006ff3 	.word	0x08006ff3
 8006e24:	08006ff3 	.word	0x08006ff3
 8006e28:	08006ead 	.word	0x08006ead
 8006e2c:	08006ff3 	.word	0x08006ff3
 8006e30:	08006ff3 	.word	0x08006ff3
 8006e34:	08006ff3 	.word	0x08006ff3
 8006e38:	08006eef 	.word	0x08006eef
 8006e3c:	08006ff3 	.word	0x08006ff3
 8006e40:	08006ff3 	.word	0x08006ff3
 8006e44:	08006ff3 	.word	0x08006ff3
 8006e48:	08006f2f 	.word	0x08006f2f
 8006e4c:	08006ff3 	.word	0x08006ff3
 8006e50:	08006ff3 	.word	0x08006ff3
 8006e54:	08006ff3 	.word	0x08006ff3
 8006e58:	08006f71 	.word	0x08006f71
 8006e5c:	08006ff3 	.word	0x08006ff3
 8006e60:	08006ff3 	.word	0x08006ff3
 8006e64:	08006ff3 	.word	0x08006ff3
 8006e68:	08006fb1 	.word	0x08006fb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68b9      	ldr	r1, [r7, #8]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 f99c 	bl	80071b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0208 	orr.w	r2, r2, #8
 8006e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	699a      	ldr	r2, [r3, #24]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0204 	bic.w	r2, r2, #4
 8006e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6999      	ldr	r1, [r3, #24]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	691a      	ldr	r2, [r3, #16]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	619a      	str	r2, [r3, #24]
      break;
 8006eaa:	e0a5      	b.n	8006ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fa16 	bl	80072e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6999      	ldr	r1, [r3, #24]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	021a      	lsls	r2, r3, #8
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	619a      	str	r2, [r3, #24]
      break;
 8006eec:	e084      	b.n	8006ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 fa89 	bl	800740c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69da      	ldr	r2, [r3, #28]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f042 0208 	orr.w	r2, r2, #8
 8006f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69da      	ldr	r2, [r3, #28]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0204 	bic.w	r2, r2, #4
 8006f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69d9      	ldr	r1, [r3, #28]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	61da      	str	r2, [r3, #28]
      break;
 8006f2c:	e064      	b.n	8006ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68b9      	ldr	r1, [r7, #8]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 fafb 	bl	8007530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69da      	ldr	r2, [r3, #28]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69da      	ldr	r2, [r3, #28]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69d9      	ldr	r1, [r3, #28]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	021a      	lsls	r2, r3, #8
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	61da      	str	r2, [r3, #28]
      break;
 8006f6e:	e043      	b.n	8006ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68b9      	ldr	r1, [r7, #8]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fb4a 	bl	8007610 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0208 	orr.w	r2, r2, #8
 8006f8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0204 	bic.w	r2, r2, #4
 8006f9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	691a      	ldr	r2, [r3, #16]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006fae:	e023      	b.n	8006ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fb94 	bl	80076e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	021a      	lsls	r2, r3, #8
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006ff0:	e002      	b.n	8006ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007000:	7dfb      	ldrb	r3, [r7, #23]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop

0800700c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a48      	ldr	r2, [pc, #288]	@ (8007190 <TIM_Base_SetConfig+0x134>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d013      	beq.n	800709c <TIM_Base_SetConfig+0x40>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800707a:	d00f      	beq.n	800709c <TIM_Base_SetConfig+0x40>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a45      	ldr	r2, [pc, #276]	@ (8007194 <TIM_Base_SetConfig+0x138>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00b      	beq.n	800709c <TIM_Base_SetConfig+0x40>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a44      	ldr	r2, [pc, #272]	@ (8007198 <TIM_Base_SetConfig+0x13c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d007      	beq.n	800709c <TIM_Base_SetConfig+0x40>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a43      	ldr	r2, [pc, #268]	@ (800719c <TIM_Base_SetConfig+0x140>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <TIM_Base_SetConfig+0x40>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a42      	ldr	r2, [pc, #264]	@ (80071a0 <TIM_Base_SetConfig+0x144>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d108      	bne.n	80070ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a37      	ldr	r2, [pc, #220]	@ (8007190 <TIM_Base_SetConfig+0x134>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d01f      	beq.n	80070f6 <TIM_Base_SetConfig+0x9a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070bc:	d01b      	beq.n	80070f6 <TIM_Base_SetConfig+0x9a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a34      	ldr	r2, [pc, #208]	@ (8007194 <TIM_Base_SetConfig+0x138>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d017      	beq.n	80070f6 <TIM_Base_SetConfig+0x9a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a33      	ldr	r2, [pc, #204]	@ (8007198 <TIM_Base_SetConfig+0x13c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d013      	beq.n	80070f6 <TIM_Base_SetConfig+0x9a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a32      	ldr	r2, [pc, #200]	@ (800719c <TIM_Base_SetConfig+0x140>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00f      	beq.n	80070f6 <TIM_Base_SetConfig+0x9a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a32      	ldr	r2, [pc, #200]	@ (80071a4 <TIM_Base_SetConfig+0x148>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00b      	beq.n	80070f6 <TIM_Base_SetConfig+0x9a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a31      	ldr	r2, [pc, #196]	@ (80071a8 <TIM_Base_SetConfig+0x14c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d007      	beq.n	80070f6 <TIM_Base_SetConfig+0x9a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a30      	ldr	r2, [pc, #192]	@ (80071ac <TIM_Base_SetConfig+0x150>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d003      	beq.n	80070f6 <TIM_Base_SetConfig+0x9a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a2b      	ldr	r2, [pc, #172]	@ (80071a0 <TIM_Base_SetConfig+0x144>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d108      	bne.n	8007108 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a18      	ldr	r2, [pc, #96]	@ (8007190 <TIM_Base_SetConfig+0x134>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d013      	beq.n	800715c <TIM_Base_SetConfig+0x100>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a19      	ldr	r2, [pc, #100]	@ (800719c <TIM_Base_SetConfig+0x140>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00f      	beq.n	800715c <TIM_Base_SetConfig+0x100>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a19      	ldr	r2, [pc, #100]	@ (80071a4 <TIM_Base_SetConfig+0x148>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d00b      	beq.n	800715c <TIM_Base_SetConfig+0x100>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a18      	ldr	r2, [pc, #96]	@ (80071a8 <TIM_Base_SetConfig+0x14c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d007      	beq.n	800715c <TIM_Base_SetConfig+0x100>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a17      	ldr	r2, [pc, #92]	@ (80071ac <TIM_Base_SetConfig+0x150>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_Base_SetConfig+0x100>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a12      	ldr	r2, [pc, #72]	@ (80071a0 <TIM_Base_SetConfig+0x144>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d103      	bne.n	8007164 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b01      	cmp	r3, #1
 8007174:	d105      	bne.n	8007182 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f023 0201 	bic.w	r2, r3, #1
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	611a      	str	r2, [r3, #16]
  }
}
 8007182:	bf00      	nop
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	40012c00 	.word	0x40012c00
 8007194:	40000400 	.word	0x40000400
 8007198:	40000800 	.word	0x40000800
 800719c:	40013400 	.word	0x40013400
 80071a0:	40015000 	.word	0x40015000
 80071a4:	40014000 	.word	0x40014000
 80071a8:	40014400 	.word	0x40014400
 80071ac:	40014800 	.word	0x40014800

080071b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	f023 0201 	bic.w	r2, r3, #1
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0303 	bic.w	r3, r3, #3
 80071ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f023 0302 	bic.w	r3, r3, #2
 80071fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	4313      	orrs	r3, r2
 8007206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a30      	ldr	r2, [pc, #192]	@ (80072cc <TIM_OC1_SetConfig+0x11c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d013      	beq.n	8007238 <TIM_OC1_SetConfig+0x88>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a2f      	ldr	r2, [pc, #188]	@ (80072d0 <TIM_OC1_SetConfig+0x120>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d00f      	beq.n	8007238 <TIM_OC1_SetConfig+0x88>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a2e      	ldr	r2, [pc, #184]	@ (80072d4 <TIM_OC1_SetConfig+0x124>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00b      	beq.n	8007238 <TIM_OC1_SetConfig+0x88>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a2d      	ldr	r2, [pc, #180]	@ (80072d8 <TIM_OC1_SetConfig+0x128>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d007      	beq.n	8007238 <TIM_OC1_SetConfig+0x88>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a2c      	ldr	r2, [pc, #176]	@ (80072dc <TIM_OC1_SetConfig+0x12c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d003      	beq.n	8007238 <TIM_OC1_SetConfig+0x88>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a2b      	ldr	r2, [pc, #172]	@ (80072e0 <TIM_OC1_SetConfig+0x130>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d10c      	bne.n	8007252 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f023 0308 	bic.w	r3, r3, #8
 800723e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	4313      	orrs	r3, r2
 8007248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f023 0304 	bic.w	r3, r3, #4
 8007250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a1d      	ldr	r2, [pc, #116]	@ (80072cc <TIM_OC1_SetConfig+0x11c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d013      	beq.n	8007282 <TIM_OC1_SetConfig+0xd2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a1c      	ldr	r2, [pc, #112]	@ (80072d0 <TIM_OC1_SetConfig+0x120>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00f      	beq.n	8007282 <TIM_OC1_SetConfig+0xd2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a1b      	ldr	r2, [pc, #108]	@ (80072d4 <TIM_OC1_SetConfig+0x124>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00b      	beq.n	8007282 <TIM_OC1_SetConfig+0xd2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a1a      	ldr	r2, [pc, #104]	@ (80072d8 <TIM_OC1_SetConfig+0x128>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d007      	beq.n	8007282 <TIM_OC1_SetConfig+0xd2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a19      	ldr	r2, [pc, #100]	@ (80072dc <TIM_OC1_SetConfig+0x12c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d003      	beq.n	8007282 <TIM_OC1_SetConfig+0xd2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a18      	ldr	r2, [pc, #96]	@ (80072e0 <TIM_OC1_SetConfig+0x130>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d111      	bne.n	80072a6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	621a      	str	r2, [r3, #32]
}
 80072c0:	bf00      	nop
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	40012c00 	.word	0x40012c00
 80072d0:	40013400 	.word	0x40013400
 80072d4:	40014000 	.word	0x40014000
 80072d8:	40014400 	.word	0x40014400
 80072dc:	40014800 	.word	0x40014800
 80072e0:	40015000 	.word	0x40015000

080072e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	f023 0210 	bic.w	r2, r3, #16
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800731e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	021b      	lsls	r3, r3, #8
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	4313      	orrs	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f023 0320 	bic.w	r3, r3, #32
 8007332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	011b      	lsls	r3, r3, #4
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a2c      	ldr	r2, [pc, #176]	@ (80073f4 <TIM_OC2_SetConfig+0x110>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d007      	beq.n	8007358 <TIM_OC2_SetConfig+0x74>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a2b      	ldr	r2, [pc, #172]	@ (80073f8 <TIM_OC2_SetConfig+0x114>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d003      	beq.n	8007358 <TIM_OC2_SetConfig+0x74>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a2a      	ldr	r2, [pc, #168]	@ (80073fc <TIM_OC2_SetConfig+0x118>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d10d      	bne.n	8007374 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800735e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	4313      	orrs	r3, r2
 800736a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007372:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a1f      	ldr	r2, [pc, #124]	@ (80073f4 <TIM_OC2_SetConfig+0x110>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d013      	beq.n	80073a4 <TIM_OC2_SetConfig+0xc0>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a1e      	ldr	r2, [pc, #120]	@ (80073f8 <TIM_OC2_SetConfig+0x114>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00f      	beq.n	80073a4 <TIM_OC2_SetConfig+0xc0>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a1e      	ldr	r2, [pc, #120]	@ (8007400 <TIM_OC2_SetConfig+0x11c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00b      	beq.n	80073a4 <TIM_OC2_SetConfig+0xc0>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a1d      	ldr	r2, [pc, #116]	@ (8007404 <TIM_OC2_SetConfig+0x120>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d007      	beq.n	80073a4 <TIM_OC2_SetConfig+0xc0>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a1c      	ldr	r2, [pc, #112]	@ (8007408 <TIM_OC2_SetConfig+0x124>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d003      	beq.n	80073a4 <TIM_OC2_SetConfig+0xc0>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a17      	ldr	r2, [pc, #92]	@ (80073fc <TIM_OC2_SetConfig+0x118>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d113      	bne.n	80073cc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073aa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073b2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	4313      	orrs	r3, r2
 80073be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	621a      	str	r2, [r3, #32]
}
 80073e6:	bf00      	nop
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	40012c00 	.word	0x40012c00
 80073f8:	40013400 	.word	0x40013400
 80073fc:	40015000 	.word	0x40015000
 8007400:	40014000 	.word	0x40014000
 8007404:	40014400 	.word	0x40014400
 8007408:	40014800 	.word	0x40014800

0800740c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800743a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800743e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 0303 	bic.w	r3, r3, #3
 8007446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a2b      	ldr	r2, [pc, #172]	@ (8007518 <TIM_OC3_SetConfig+0x10c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d007      	beq.n	800747e <TIM_OC3_SetConfig+0x72>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a2a      	ldr	r2, [pc, #168]	@ (800751c <TIM_OC3_SetConfig+0x110>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d003      	beq.n	800747e <TIM_OC3_SetConfig+0x72>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a29      	ldr	r2, [pc, #164]	@ (8007520 <TIM_OC3_SetConfig+0x114>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d10d      	bne.n	800749a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007484:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	021b      	lsls	r3, r3, #8
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	4313      	orrs	r3, r2
 8007490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007498:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a1e      	ldr	r2, [pc, #120]	@ (8007518 <TIM_OC3_SetConfig+0x10c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d013      	beq.n	80074ca <TIM_OC3_SetConfig+0xbe>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a1d      	ldr	r2, [pc, #116]	@ (800751c <TIM_OC3_SetConfig+0x110>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d00f      	beq.n	80074ca <TIM_OC3_SetConfig+0xbe>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007524 <TIM_OC3_SetConfig+0x118>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00b      	beq.n	80074ca <TIM_OC3_SetConfig+0xbe>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007528 <TIM_OC3_SetConfig+0x11c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d007      	beq.n	80074ca <TIM_OC3_SetConfig+0xbe>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a1b      	ldr	r2, [pc, #108]	@ (800752c <TIM_OC3_SetConfig+0x120>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d003      	beq.n	80074ca <TIM_OC3_SetConfig+0xbe>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a16      	ldr	r2, [pc, #88]	@ (8007520 <TIM_OC3_SetConfig+0x114>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d113      	bne.n	80074f2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	621a      	str	r2, [r3, #32]
}
 800750c:	bf00      	nop
 800750e:	371c      	adds	r7, #28
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	40012c00 	.word	0x40012c00
 800751c:	40013400 	.word	0x40013400
 8007520:	40015000 	.word	0x40015000
 8007524:	40014000 	.word	0x40014000
 8007528:	40014400 	.word	0x40014400
 800752c:	40014800 	.word	0x40014800

08007530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800755e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800756a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4313      	orrs	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800757e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	031b      	lsls	r3, r3, #12
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	4313      	orrs	r3, r2
 800758a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a1a      	ldr	r2, [pc, #104]	@ (80075f8 <TIM_OC4_SetConfig+0xc8>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d013      	beq.n	80075bc <TIM_OC4_SetConfig+0x8c>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a19      	ldr	r2, [pc, #100]	@ (80075fc <TIM_OC4_SetConfig+0xcc>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00f      	beq.n	80075bc <TIM_OC4_SetConfig+0x8c>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a18      	ldr	r2, [pc, #96]	@ (8007600 <TIM_OC4_SetConfig+0xd0>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00b      	beq.n	80075bc <TIM_OC4_SetConfig+0x8c>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a17      	ldr	r2, [pc, #92]	@ (8007604 <TIM_OC4_SetConfig+0xd4>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d007      	beq.n	80075bc <TIM_OC4_SetConfig+0x8c>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a16      	ldr	r2, [pc, #88]	@ (8007608 <TIM_OC4_SetConfig+0xd8>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <TIM_OC4_SetConfig+0x8c>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a15      	ldr	r2, [pc, #84]	@ (800760c <TIM_OC4_SetConfig+0xdc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d109      	bne.n	80075d0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	019b      	lsls	r3, r3, #6
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	621a      	str	r2, [r3, #32]
}
 80075ea:	bf00      	nop
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	40012c00 	.word	0x40012c00
 80075fc:	40013400 	.word	0x40013400
 8007600:	40014000 	.word	0x40014000
 8007604:	40014400 	.word	0x40014400
 8007608:	40014800 	.word	0x40014800
 800760c:	40015000 	.word	0x40015000

08007610 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800763e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	4313      	orrs	r3, r2
 800764c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007654:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	041b      	lsls	r3, r3, #16
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	4313      	orrs	r3, r2
 8007660:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a19      	ldr	r2, [pc, #100]	@ (80076cc <TIM_OC5_SetConfig+0xbc>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d013      	beq.n	8007692 <TIM_OC5_SetConfig+0x82>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a18      	ldr	r2, [pc, #96]	@ (80076d0 <TIM_OC5_SetConfig+0xc0>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d00f      	beq.n	8007692 <TIM_OC5_SetConfig+0x82>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a17      	ldr	r2, [pc, #92]	@ (80076d4 <TIM_OC5_SetConfig+0xc4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d00b      	beq.n	8007692 <TIM_OC5_SetConfig+0x82>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a16      	ldr	r2, [pc, #88]	@ (80076d8 <TIM_OC5_SetConfig+0xc8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d007      	beq.n	8007692 <TIM_OC5_SetConfig+0x82>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a15      	ldr	r2, [pc, #84]	@ (80076dc <TIM_OC5_SetConfig+0xcc>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d003      	beq.n	8007692 <TIM_OC5_SetConfig+0x82>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a14      	ldr	r2, [pc, #80]	@ (80076e0 <TIM_OC5_SetConfig+0xd0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d109      	bne.n	80076a6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007698:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	621a      	str	r2, [r3, #32]
}
 80076c0:	bf00      	nop
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	40012c00 	.word	0x40012c00
 80076d0:	40013400 	.word	0x40013400
 80076d4:	40014000 	.word	0x40014000
 80076d8:	40014400 	.word	0x40014400
 80076dc:	40014800 	.word	0x40014800
 80076e0:	40015000 	.word	0x40015000

080076e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800770a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	021b      	lsls	r3, r3, #8
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	4313      	orrs	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800772a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	051b      	lsls	r3, r3, #20
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	4313      	orrs	r3, r2
 8007736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a1a      	ldr	r2, [pc, #104]	@ (80077a4 <TIM_OC6_SetConfig+0xc0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d013      	beq.n	8007768 <TIM_OC6_SetConfig+0x84>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a19      	ldr	r2, [pc, #100]	@ (80077a8 <TIM_OC6_SetConfig+0xc4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00f      	beq.n	8007768 <TIM_OC6_SetConfig+0x84>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a18      	ldr	r2, [pc, #96]	@ (80077ac <TIM_OC6_SetConfig+0xc8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d00b      	beq.n	8007768 <TIM_OC6_SetConfig+0x84>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a17      	ldr	r2, [pc, #92]	@ (80077b0 <TIM_OC6_SetConfig+0xcc>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d007      	beq.n	8007768 <TIM_OC6_SetConfig+0x84>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a16      	ldr	r2, [pc, #88]	@ (80077b4 <TIM_OC6_SetConfig+0xd0>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d003      	beq.n	8007768 <TIM_OC6_SetConfig+0x84>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a15      	ldr	r2, [pc, #84]	@ (80077b8 <TIM_OC6_SetConfig+0xd4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d109      	bne.n	800777c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800776e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	029b      	lsls	r3, r3, #10
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	4313      	orrs	r3, r2
 800777a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	621a      	str	r2, [r3, #32]
}
 8007796:	bf00      	nop
 8007798:	371c      	adds	r7, #28
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	40012c00 	.word	0x40012c00
 80077a8:	40013400 	.word	0x40013400
 80077ac:	40014000 	.word	0x40014000
 80077b0:	40014400 	.word	0x40014400
 80077b4:	40014800 	.word	0x40014800
 80077b8:	40015000 	.word	0x40015000

080077bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f003 031f 	and.w	r3, r3, #31
 80077ce:	2201      	movs	r2, #1
 80077d0:	fa02 f303 	lsl.w	r3, r2, r3
 80077d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a1a      	ldr	r2, [r3, #32]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	43db      	mvns	r3, r3
 80077de:	401a      	ands	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6a1a      	ldr	r2, [r3, #32]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f003 031f 	and.w	r3, r3, #31
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	fa01 f303 	lsl.w	r3, r1, r3
 80077f4:	431a      	orrs	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	621a      	str	r2, [r3, #32]
}
 80077fa:	bf00      	nop
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
	...

08007808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007818:	2b01      	cmp	r3, #1
 800781a:	d101      	bne.n	8007820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800781c:	2302      	movs	r3, #2
 800781e:	e06d      	b.n	80078fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a30      	ldr	r2, [pc, #192]	@ (8007908 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d009      	beq.n	800785e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a2f      	ldr	r2, [pc, #188]	@ (800790c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d004      	beq.n	800785e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a2d      	ldr	r2, [pc, #180]	@ (8007910 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d108      	bne.n	8007870 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007864:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	4313      	orrs	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	4313      	orrs	r3, r2
 8007880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a1e      	ldr	r2, [pc, #120]	@ (8007908 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d01d      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800789c:	d018      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a1c      	ldr	r2, [pc, #112]	@ (8007914 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d013      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a1a      	ldr	r2, [pc, #104]	@ (8007918 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d00e      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a15      	ldr	r2, [pc, #84]	@ (800790c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d009      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a16      	ldr	r2, [pc, #88]	@ (800791c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d004      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a11      	ldr	r2, [pc, #68]	@ (8007910 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d10c      	bne.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	40012c00 	.word	0x40012c00
 800790c:	40013400 	.word	0x40013400
 8007910:	40015000 	.word	0x40015000
 8007914:	40000400 	.word	0x40000400
 8007918:	40000800 	.word	0x40000800
 800791c:	40014000 	.word	0x40014000

08007920 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e040      	b.n	80079f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fb f860 	bl	8002a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2224      	movs	r2, #36	@ 0x24
 8007988:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0201 	bic.w	r2, r2, #1
 8007998:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fa86 	bl	8007eb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f8af 	bl	8007b0c <UART_SetConfig>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d101      	bne.n	80079b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e01b      	b.n	80079f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0201 	orr.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fb05 	bl	8007ff8 <UART_CheckIdleState>
 80079ee:	4603      	mov	r3, r0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08a      	sub	sp, #40	@ 0x28
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	4613      	mov	r3, r2
 8007a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d177      	bne.n	8007b00 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <HAL_UART_Transmit+0x24>
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e070      	b.n	8007b02 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2221      	movs	r2, #33	@ 0x21
 8007a2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a2e:	f7fb fa17 	bl	8002e60 <HAL_GetTick>
 8007a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	88fa      	ldrh	r2, [r7, #6]
 8007a38:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	88fa      	ldrh	r2, [r7, #6]
 8007a40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a4c:	d108      	bne.n	8007a60 <HAL_UART_Transmit+0x68>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d104      	bne.n	8007a60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	e003      	b.n	8007a68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a68:	e02f      	b.n	8007aca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2200      	movs	r2, #0
 8007a72:	2180      	movs	r1, #128	@ 0x80
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 fb67 	bl	8008148 <UART_WaitOnFlagUntilTimeout>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2220      	movs	r2, #32
 8007a84:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e03b      	b.n	8007b02 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10b      	bne.n	8007aa8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	881a      	ldrh	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a9c:	b292      	uxth	r2, r2
 8007a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	3302      	adds	r3, #2
 8007aa4:	61bb      	str	r3, [r7, #24]
 8007aa6:	e007      	b.n	8007ab8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	781a      	ldrb	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1c9      	bne.n	8007a6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2200      	movs	r2, #0
 8007ade:	2140      	movs	r1, #64	@ 0x40
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 fb31 	bl	8008148 <UART_WaitOnFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d004      	beq.n	8007af6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2220      	movs	r2, #32
 8007af0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e005      	b.n	8007b02 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2220      	movs	r2, #32
 8007afa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	e000      	b.n	8007b02 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007b00:	2302      	movs	r3, #2
  }
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3720      	adds	r7, #32
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	431a      	orrs	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	4b92      	ldr	r3, [pc, #584]	@ (8007d80 <UART_SetConfig+0x274>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6812      	ldr	r2, [r2, #0]
 8007b3e:	6979      	ldr	r1, [r7, #20]
 8007b40:	430b      	orrs	r3, r1
 8007b42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a80      	ldr	r2, [pc, #512]	@ (8007d84 <UART_SetConfig+0x278>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d120      	bne.n	8007bca <UART_SetConfig+0xbe>
 8007b88:	4b7f      	ldr	r3, [pc, #508]	@ (8007d88 <UART_SetConfig+0x27c>)
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8c:	f003 0303 	and.w	r3, r3, #3
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d817      	bhi.n	8007bc4 <UART_SetConfig+0xb8>
 8007b94:	a201      	add	r2, pc, #4	@ (adr r2, 8007b9c <UART_SetConfig+0x90>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007bad 	.word	0x08007bad
 8007ba0:	08007bb9 	.word	0x08007bb9
 8007ba4:	08007bbf 	.word	0x08007bbf
 8007ba8:	08007bb3 	.word	0x08007bb3
 8007bac:	2301      	movs	r3, #1
 8007bae:	77fb      	strb	r3, [r7, #31]
 8007bb0:	e0b5      	b.n	8007d1e <UART_SetConfig+0x212>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	77fb      	strb	r3, [r7, #31]
 8007bb6:	e0b2      	b.n	8007d1e <UART_SetConfig+0x212>
 8007bb8:	2304      	movs	r3, #4
 8007bba:	77fb      	strb	r3, [r7, #31]
 8007bbc:	e0af      	b.n	8007d1e <UART_SetConfig+0x212>
 8007bbe:	2308      	movs	r3, #8
 8007bc0:	77fb      	strb	r3, [r7, #31]
 8007bc2:	e0ac      	b.n	8007d1e <UART_SetConfig+0x212>
 8007bc4:	2310      	movs	r3, #16
 8007bc6:	77fb      	strb	r3, [r7, #31]
 8007bc8:	e0a9      	b.n	8007d1e <UART_SetConfig+0x212>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a6f      	ldr	r2, [pc, #444]	@ (8007d8c <UART_SetConfig+0x280>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d124      	bne.n	8007c1e <UART_SetConfig+0x112>
 8007bd4:	4b6c      	ldr	r3, [pc, #432]	@ (8007d88 <UART_SetConfig+0x27c>)
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007bdc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007be0:	d011      	beq.n	8007c06 <UART_SetConfig+0xfa>
 8007be2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007be6:	d817      	bhi.n	8007c18 <UART_SetConfig+0x10c>
 8007be8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bec:	d011      	beq.n	8007c12 <UART_SetConfig+0x106>
 8007bee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bf2:	d811      	bhi.n	8007c18 <UART_SetConfig+0x10c>
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <UART_SetConfig+0xf4>
 8007bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bfc:	d006      	beq.n	8007c0c <UART_SetConfig+0x100>
 8007bfe:	e00b      	b.n	8007c18 <UART_SetConfig+0x10c>
 8007c00:	2300      	movs	r3, #0
 8007c02:	77fb      	strb	r3, [r7, #31]
 8007c04:	e08b      	b.n	8007d1e <UART_SetConfig+0x212>
 8007c06:	2302      	movs	r3, #2
 8007c08:	77fb      	strb	r3, [r7, #31]
 8007c0a:	e088      	b.n	8007d1e <UART_SetConfig+0x212>
 8007c0c:	2304      	movs	r3, #4
 8007c0e:	77fb      	strb	r3, [r7, #31]
 8007c10:	e085      	b.n	8007d1e <UART_SetConfig+0x212>
 8007c12:	2308      	movs	r3, #8
 8007c14:	77fb      	strb	r3, [r7, #31]
 8007c16:	e082      	b.n	8007d1e <UART_SetConfig+0x212>
 8007c18:	2310      	movs	r3, #16
 8007c1a:	77fb      	strb	r3, [r7, #31]
 8007c1c:	e07f      	b.n	8007d1e <UART_SetConfig+0x212>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a5b      	ldr	r2, [pc, #364]	@ (8007d90 <UART_SetConfig+0x284>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d124      	bne.n	8007c72 <UART_SetConfig+0x166>
 8007c28:	4b57      	ldr	r3, [pc, #348]	@ (8007d88 <UART_SetConfig+0x27c>)
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c2c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007c30:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007c34:	d011      	beq.n	8007c5a <UART_SetConfig+0x14e>
 8007c36:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007c3a:	d817      	bhi.n	8007c6c <UART_SetConfig+0x160>
 8007c3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007c40:	d011      	beq.n	8007c66 <UART_SetConfig+0x15a>
 8007c42:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007c46:	d811      	bhi.n	8007c6c <UART_SetConfig+0x160>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <UART_SetConfig+0x148>
 8007c4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c50:	d006      	beq.n	8007c60 <UART_SetConfig+0x154>
 8007c52:	e00b      	b.n	8007c6c <UART_SetConfig+0x160>
 8007c54:	2300      	movs	r3, #0
 8007c56:	77fb      	strb	r3, [r7, #31]
 8007c58:	e061      	b.n	8007d1e <UART_SetConfig+0x212>
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	77fb      	strb	r3, [r7, #31]
 8007c5e:	e05e      	b.n	8007d1e <UART_SetConfig+0x212>
 8007c60:	2304      	movs	r3, #4
 8007c62:	77fb      	strb	r3, [r7, #31]
 8007c64:	e05b      	b.n	8007d1e <UART_SetConfig+0x212>
 8007c66:	2308      	movs	r3, #8
 8007c68:	77fb      	strb	r3, [r7, #31]
 8007c6a:	e058      	b.n	8007d1e <UART_SetConfig+0x212>
 8007c6c:	2310      	movs	r3, #16
 8007c6e:	77fb      	strb	r3, [r7, #31]
 8007c70:	e055      	b.n	8007d1e <UART_SetConfig+0x212>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a47      	ldr	r2, [pc, #284]	@ (8007d94 <UART_SetConfig+0x288>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d124      	bne.n	8007cc6 <UART_SetConfig+0x1ba>
 8007c7c:	4b42      	ldr	r3, [pc, #264]	@ (8007d88 <UART_SetConfig+0x27c>)
 8007c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c80:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007c84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c88:	d011      	beq.n	8007cae <UART_SetConfig+0x1a2>
 8007c8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c8e:	d817      	bhi.n	8007cc0 <UART_SetConfig+0x1b4>
 8007c90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c94:	d011      	beq.n	8007cba <UART_SetConfig+0x1ae>
 8007c96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c9a:	d811      	bhi.n	8007cc0 <UART_SetConfig+0x1b4>
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <UART_SetConfig+0x19c>
 8007ca0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ca4:	d006      	beq.n	8007cb4 <UART_SetConfig+0x1a8>
 8007ca6:	e00b      	b.n	8007cc0 <UART_SetConfig+0x1b4>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	77fb      	strb	r3, [r7, #31]
 8007cac:	e037      	b.n	8007d1e <UART_SetConfig+0x212>
 8007cae:	2302      	movs	r3, #2
 8007cb0:	77fb      	strb	r3, [r7, #31]
 8007cb2:	e034      	b.n	8007d1e <UART_SetConfig+0x212>
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	77fb      	strb	r3, [r7, #31]
 8007cb8:	e031      	b.n	8007d1e <UART_SetConfig+0x212>
 8007cba:	2308      	movs	r3, #8
 8007cbc:	77fb      	strb	r3, [r7, #31]
 8007cbe:	e02e      	b.n	8007d1e <UART_SetConfig+0x212>
 8007cc0:	2310      	movs	r3, #16
 8007cc2:	77fb      	strb	r3, [r7, #31]
 8007cc4:	e02b      	b.n	8007d1e <UART_SetConfig+0x212>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a33      	ldr	r2, [pc, #204]	@ (8007d98 <UART_SetConfig+0x28c>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d124      	bne.n	8007d1a <UART_SetConfig+0x20e>
 8007cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8007d88 <UART_SetConfig+0x27c>)
 8007cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007cd8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007cdc:	d011      	beq.n	8007d02 <UART_SetConfig+0x1f6>
 8007cde:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007ce2:	d817      	bhi.n	8007d14 <UART_SetConfig+0x208>
 8007ce4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ce8:	d011      	beq.n	8007d0e <UART_SetConfig+0x202>
 8007cea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007cee:	d811      	bhi.n	8007d14 <UART_SetConfig+0x208>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <UART_SetConfig+0x1f0>
 8007cf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cf8:	d006      	beq.n	8007d08 <UART_SetConfig+0x1fc>
 8007cfa:	e00b      	b.n	8007d14 <UART_SetConfig+0x208>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	77fb      	strb	r3, [r7, #31]
 8007d00:	e00d      	b.n	8007d1e <UART_SetConfig+0x212>
 8007d02:	2302      	movs	r3, #2
 8007d04:	77fb      	strb	r3, [r7, #31]
 8007d06:	e00a      	b.n	8007d1e <UART_SetConfig+0x212>
 8007d08:	2304      	movs	r3, #4
 8007d0a:	77fb      	strb	r3, [r7, #31]
 8007d0c:	e007      	b.n	8007d1e <UART_SetConfig+0x212>
 8007d0e:	2308      	movs	r3, #8
 8007d10:	77fb      	strb	r3, [r7, #31]
 8007d12:	e004      	b.n	8007d1e <UART_SetConfig+0x212>
 8007d14:	2310      	movs	r3, #16
 8007d16:	77fb      	strb	r3, [r7, #31]
 8007d18:	e001      	b.n	8007d1e <UART_SetConfig+0x212>
 8007d1a:	2310      	movs	r3, #16
 8007d1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d26:	d16b      	bne.n	8007e00 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007d28:	7ffb      	ldrb	r3, [r7, #31]
 8007d2a:	2b08      	cmp	r3, #8
 8007d2c:	d838      	bhi.n	8007da0 <UART_SetConfig+0x294>
 8007d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d34 <UART_SetConfig+0x228>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007d59 	.word	0x08007d59
 8007d38:	08007d61 	.word	0x08007d61
 8007d3c:	08007d69 	.word	0x08007d69
 8007d40:	08007da1 	.word	0x08007da1
 8007d44:	08007d6f 	.word	0x08007d6f
 8007d48:	08007da1 	.word	0x08007da1
 8007d4c:	08007da1 	.word	0x08007da1
 8007d50:	08007da1 	.word	0x08007da1
 8007d54:	08007d77 	.word	0x08007d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d58:	f7fe f87a 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8007d5c:	61b8      	str	r0, [r7, #24]
        break;
 8007d5e:	e024      	b.n	8007daa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d60:	f7fe f898 	bl	8005e94 <HAL_RCC_GetPCLK2Freq>
 8007d64:	61b8      	str	r0, [r7, #24]
        break;
 8007d66:	e020      	b.n	8007daa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d68:	4b0c      	ldr	r3, [pc, #48]	@ (8007d9c <UART_SetConfig+0x290>)
 8007d6a:	61bb      	str	r3, [r7, #24]
        break;
 8007d6c:	e01d      	b.n	8007daa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d6e:	f7fe f80f 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8007d72:	61b8      	str	r0, [r7, #24]
        break;
 8007d74:	e019      	b.n	8007daa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d7a:	61bb      	str	r3, [r7, #24]
        break;
 8007d7c:	e015      	b.n	8007daa <UART_SetConfig+0x29e>
 8007d7e:	bf00      	nop
 8007d80:	efff69f3 	.word	0xefff69f3
 8007d84:	40013800 	.word	0x40013800
 8007d88:	40021000 	.word	0x40021000
 8007d8c:	40004400 	.word	0x40004400
 8007d90:	40004800 	.word	0x40004800
 8007d94:	40004c00 	.word	0x40004c00
 8007d98:	40005000 	.word	0x40005000
 8007d9c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	77bb      	strb	r3, [r7, #30]
        break;
 8007da8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d073      	beq.n	8007e98 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	005a      	lsls	r2, r3, #1
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	085b      	lsrs	r3, r3, #1
 8007dba:	441a      	add	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	2b0f      	cmp	r3, #15
 8007dca:	d916      	bls.n	8007dfa <UART_SetConfig+0x2ee>
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dd2:	d212      	bcs.n	8007dfa <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	f023 030f 	bic.w	r3, r3, #15
 8007ddc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	085b      	lsrs	r3, r3, #1
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	89fb      	ldrh	r3, [r7, #14]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	89fa      	ldrh	r2, [r7, #14]
 8007df6:	60da      	str	r2, [r3, #12]
 8007df8:	e04e      	b.n	8007e98 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	77bb      	strb	r3, [r7, #30]
 8007dfe:	e04b      	b.n	8007e98 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e00:	7ffb      	ldrb	r3, [r7, #31]
 8007e02:	2b08      	cmp	r3, #8
 8007e04:	d827      	bhi.n	8007e56 <UART_SetConfig+0x34a>
 8007e06:	a201      	add	r2, pc, #4	@ (adr r2, 8007e0c <UART_SetConfig+0x300>)
 8007e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0c:	08007e31 	.word	0x08007e31
 8007e10:	08007e39 	.word	0x08007e39
 8007e14:	08007e41 	.word	0x08007e41
 8007e18:	08007e57 	.word	0x08007e57
 8007e1c:	08007e47 	.word	0x08007e47
 8007e20:	08007e57 	.word	0x08007e57
 8007e24:	08007e57 	.word	0x08007e57
 8007e28:	08007e57 	.word	0x08007e57
 8007e2c:	08007e4f 	.word	0x08007e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e30:	f7fe f80e 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8007e34:	61b8      	str	r0, [r7, #24]
        break;
 8007e36:	e013      	b.n	8007e60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e38:	f7fe f82c 	bl	8005e94 <HAL_RCC_GetPCLK2Freq>
 8007e3c:	61b8      	str	r0, [r7, #24]
        break;
 8007e3e:	e00f      	b.n	8007e60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e40:	4b1b      	ldr	r3, [pc, #108]	@ (8007eb0 <UART_SetConfig+0x3a4>)
 8007e42:	61bb      	str	r3, [r7, #24]
        break;
 8007e44:	e00c      	b.n	8007e60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e46:	f7fd ffa3 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8007e4a:	61b8      	str	r0, [r7, #24]
        break;
 8007e4c:	e008      	b.n	8007e60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e52:	61bb      	str	r3, [r7, #24]
        break;
 8007e54:	e004      	b.n	8007e60 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	77bb      	strb	r3, [r7, #30]
        break;
 8007e5e:	bf00      	nop
    }

    if (pclk != 0U)
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d018      	beq.n	8007e98 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	085a      	lsrs	r2, r3, #1
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	441a      	add	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	2b0f      	cmp	r3, #15
 8007e7e:	d909      	bls.n	8007e94 <UART_SetConfig+0x388>
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e86:	d205      	bcs.n	8007e94 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	60da      	str	r2, [r3, #12]
 8007e92:	e001      	b.n	8007e98 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007ea4:	7fbb      	ldrb	r3, [r7, #30]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3720      	adds	r7, #32
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	007a1200 	.word	0x007a1200

08007eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec0:	f003 0308 	and.w	r3, r3, #8
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00a      	beq.n	8007ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	430a      	orrs	r2, r1
 8007efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f04:	f003 0302 	and.w	r3, r3, #2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00a      	beq.n	8007f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f26:	f003 0304 	and.w	r3, r3, #4
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f48:	f003 0310 	and.w	r3, r3, #16
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00a      	beq.n	8007f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6a:	f003 0320 	and.w	r3, r3, #32
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	430a      	orrs	r2, r1
 8007f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d01a      	beq.n	8007fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fb2:	d10a      	bne.n	8007fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00a      	beq.n	8007fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	605a      	str	r2, [r3, #4]
  }
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b098      	sub	sp, #96	@ 0x60
 8007ffc:	af02      	add	r7, sp, #8
 8007ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008008:	f7fa ff2a 	bl	8002e60 <HAL_GetTick>
 800800c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0308 	and.w	r3, r3, #8
 8008018:	2b08      	cmp	r3, #8
 800801a:	d12e      	bne.n	800807a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800801c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008024:	2200      	movs	r2, #0
 8008026:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f88c 	bl	8008148 <UART_WaitOnFlagUntilTimeout>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d021      	beq.n	800807a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803e:	e853 3f00 	ldrex	r3, [r3]
 8008042:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008046:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800804a:	653b      	str	r3, [r7, #80]	@ 0x50
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	461a      	mov	r2, r3
 8008052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008054:	647b      	str	r3, [r7, #68]	@ 0x44
 8008056:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008058:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800805a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800805c:	e841 2300 	strex	r3, r2, [r1]
 8008060:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1e6      	bne.n	8008036 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2220      	movs	r2, #32
 800806c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e062      	b.n	8008140 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b04      	cmp	r3, #4
 8008086:	d149      	bne.n	800811c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008088:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008090:	2200      	movs	r2, #0
 8008092:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f856 	bl	8008148 <UART_WaitOnFlagUntilTimeout>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d03c      	beq.n	800811c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	623b      	str	r3, [r7, #32]
   return(result);
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	461a      	mov	r2, r3
 80080be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80080c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e6      	bne.n	80080a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3308      	adds	r3, #8
 80080da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 0301 	bic.w	r3, r3, #1
 80080ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3308      	adds	r3, #8
 80080f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080f4:	61fa      	str	r2, [r7, #28]
 80080f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f8:	69b9      	ldr	r1, [r7, #24]
 80080fa:	69fa      	ldr	r2, [r7, #28]
 80080fc:	e841 2300 	strex	r3, r2, [r1]
 8008100:	617b      	str	r3, [r7, #20]
   return(result);
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e5      	bne.n	80080d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2220      	movs	r2, #32
 800810c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e011      	b.n	8008140 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2220      	movs	r2, #32
 8008120:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3758      	adds	r7, #88	@ 0x58
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	4613      	mov	r3, r2
 8008156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008158:	e04f      	b.n	80081fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008160:	d04b      	beq.n	80081fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008162:	f7fa fe7d 	bl	8002e60 <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	429a      	cmp	r2, r3
 8008170:	d302      	bcc.n	8008178 <UART_WaitOnFlagUntilTimeout+0x30>
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e04e      	b.n	800821a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0304 	and.w	r3, r3, #4
 8008186:	2b00      	cmp	r3, #0
 8008188:	d037      	beq.n	80081fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2b80      	cmp	r3, #128	@ 0x80
 800818e:	d034      	beq.n	80081fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	2b40      	cmp	r3, #64	@ 0x40
 8008194:	d031      	beq.n	80081fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	f003 0308 	and.w	r3, r3, #8
 80081a0:	2b08      	cmp	r3, #8
 80081a2:	d110      	bne.n	80081c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2208      	movs	r2, #8
 80081aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f000 f838 	bl	8008222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2208      	movs	r2, #8
 80081b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e029      	b.n	800821a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	69db      	ldr	r3, [r3, #28]
 80081cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081d4:	d111      	bne.n	80081fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 f81e 	bl	8008222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e00f      	b.n	800821a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	69da      	ldr	r2, [r3, #28]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	4013      	ands	r3, r2
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	429a      	cmp	r2, r3
 8008208:	bf0c      	ite	eq
 800820a:	2301      	moveq	r3, #1
 800820c:	2300      	movne	r3, #0
 800820e:	b2db      	uxtb	r3, r3
 8008210:	461a      	mov	r2, r3
 8008212:	79fb      	ldrb	r3, [r7, #7]
 8008214:	429a      	cmp	r2, r3
 8008216:	d0a0      	beq.n	800815a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008222:	b480      	push	{r7}
 8008224:	b095      	sub	sp, #84	@ 0x54
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008232:	e853 3f00 	ldrex	r3, [r3]
 8008236:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800823e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	461a      	mov	r2, r3
 8008246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008248:	643b      	str	r3, [r7, #64]	@ 0x40
 800824a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800824e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008250:	e841 2300 	strex	r3, r2, [r1]
 8008254:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1e6      	bne.n	800822a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3308      	adds	r3, #8
 8008262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	e853 3f00 	ldrex	r3, [r3]
 800826a:	61fb      	str	r3, [r7, #28]
   return(result);
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	f023 0301 	bic.w	r3, r3, #1
 8008272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3308      	adds	r3, #8
 800827a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800827c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800827e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008284:	e841 2300 	strex	r3, r2, [r1]
 8008288:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e5      	bne.n	800825c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008294:	2b01      	cmp	r3, #1
 8008296:	d118      	bne.n	80082ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	e853 3f00 	ldrex	r3, [r3]
 80082a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	f023 0310 	bic.w	r3, r3, #16
 80082ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b6:	61bb      	str	r3, [r7, #24]
 80082b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ba:	6979      	ldr	r1, [r7, #20]
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	e841 2300 	strex	r3, r2, [r1]
 80082c2:	613b      	str	r3, [r7, #16]
   return(result);
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1e6      	bne.n	8008298 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80082de:	bf00      	nop
 80082e0:	3754      	adds	r7, #84	@ 0x54
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b085      	sub	sp, #20
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80082f2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80082f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80082fe:	b29a      	uxth	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	b29b      	uxth	r3, r3
 8008304:	43db      	mvns	r3, r3
 8008306:	b29b      	uxth	r3, r3
 8008308:	4013      	ands	r3, r2
 800830a:	b29a      	uxth	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	1d3b      	adds	r3, r7, #4
 800832a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b0c2      	sub	sp, #264	@ 0x108
 8008360:	af00      	add	r7, sp, #0
 8008362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800836a:	6018      	str	r0, [r3, #0]
 800836c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008374:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	2b01      	cmp	r3, #1
 8008384:	f040 86b7 	bne.w	80090f6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800838c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	699a      	ldr	r2, [r3, #24]
 8008394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d908      	bls.n	80083b6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80083a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80083b4:	e007      	b.n	80083c6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80083b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80083c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	7b1b      	ldrb	r3, [r3, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d13a      	bne.n	800844c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80083d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6959      	ldr	r1, [r3, #20]
 80083e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	88da      	ldrh	r2, [r3, #6]
 80083ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80083f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80083fc:	6800      	ldr	r0, [r0, #0]
 80083fe:	f001 fb83 	bl	8009b08 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008406:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	613b      	str	r3, [r7, #16]
 800840e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800841c:	b29b      	uxth	r3, r3
 800841e:	461a      	mov	r2, r3
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	4413      	add	r3, r2
 8008424:	613b      	str	r3, [r7, #16]
 8008426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	00da      	lsls	r2, r3, #3
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	4413      	add	r3, r2
 8008438:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008442:	b29a      	uxth	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	801a      	strh	r2, [r3, #0]
 8008448:	f000 be1f 	b.w	800908a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800844c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	78db      	ldrb	r3, [r3, #3]
 8008458:	2b02      	cmp	r3, #2
 800845a:	f040 8462 	bne.w	8008d22 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800845e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6a1a      	ldr	r2, [r3, #32]
 800846a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	429a      	cmp	r2, r3
 8008478:	f240 83df 	bls.w	8008c3a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800847c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	b29b      	uxth	r3, r3
 800849a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800849e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084a2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80084a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	441a      	add	r2, r3
 80084c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80084c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084cc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80084d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80084d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6a1a      	ldr	r2, [r3, #32]
 80084e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e8:	1ad2      	subs	r2, r2, r3
 80084ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80084f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29b      	uxth	r3, r3
 8008514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 81c7 	beq.w	80088ac <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800851e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008522:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	633b      	str	r3, [r7, #48]	@ 0x30
 800852a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	785b      	ldrb	r3, [r3, #1]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d177      	bne.n	800862a <USB_EPStartXfer+0x2ce>
 800853a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008554:	b29b      	uxth	r3, r3
 8008556:	461a      	mov	r2, r3
 8008558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855a:	4413      	add	r3, r2
 800855c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800855e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	00da      	lsls	r2, r3, #3
 800856c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856e:	4413      	add	r3, r2
 8008570:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008574:	627b      	str	r3, [r7, #36]	@ 0x24
 8008576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	b29b      	uxth	r3, r3
 800857c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008580:	b29a      	uxth	r2, r3
 8008582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008584:	801a      	strh	r2, [r3, #0]
 8008586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10a      	bne.n	80085a4 <USB_EPStartXfer+0x248>
 800858e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008590:	881b      	ldrh	r3, [r3, #0]
 8008592:	b29b      	uxth	r3, r3
 8008594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800859c:	b29a      	uxth	r2, r3
 800859e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a0:	801a      	strh	r2, [r3, #0]
 80085a2:	e067      	b.n	8008674 <USB_EPStartXfer+0x318>
 80085a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80085aa:	d81c      	bhi.n	80085e6 <USB_EPStartXfer+0x28a>
 80085ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b0:	085b      	lsrs	r3, r3, #1
 80085b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80085b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d004      	beq.n	80085cc <USB_EPStartXfer+0x270>
 80085c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80085c6:	3301      	adds	r3, #1
 80085c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80085cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	029b      	lsls	r3, r3, #10
 80085da:	b29b      	uxth	r3, r3
 80085dc:	4313      	orrs	r3, r2
 80085de:	b29a      	uxth	r2, r3
 80085e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e2:	801a      	strh	r2, [r3, #0]
 80085e4:	e046      	b.n	8008674 <USB_EPStartXfer+0x318>
 80085e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ea:	095b      	lsrs	r3, r3, #5
 80085ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80085f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f4:	f003 031f 	and.w	r3, r3, #31
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d104      	bne.n	8008606 <USB_EPStartXfer+0x2aa>
 80085fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008600:	3b01      	subs	r3, #1
 8008602:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	b29a      	uxth	r2, r3
 800860c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008610:	b29b      	uxth	r3, r3
 8008612:	029b      	lsls	r3, r3, #10
 8008614:	b29b      	uxth	r3, r3
 8008616:	4313      	orrs	r3, r2
 8008618:	b29b      	uxth	r3, r3
 800861a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800861e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008622:	b29a      	uxth	r2, r3
 8008624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008626:	801a      	strh	r2, [r3, #0]
 8008628:	e024      	b.n	8008674 <USB_EPStartXfer+0x318>
 800862a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800862e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d11c      	bne.n	8008674 <USB_EPStartXfer+0x318>
 800863a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800863e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008648:	b29b      	uxth	r3, r3
 800864a:	461a      	mov	r2, r3
 800864c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864e:	4413      	add	r3, r2
 8008650:	633b      	str	r3, [r7, #48]	@ 0x30
 8008652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	00da      	lsls	r2, r3, #3
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	4413      	add	r3, r2
 8008664:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800866a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800866e:	b29a      	uxth	r2, r3
 8008670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008672:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	895b      	ldrh	r3, [r3, #10]
 8008680:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6959      	ldr	r1, [r3, #20]
 8008690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008694:	b29b      	uxth	r3, r3
 8008696:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800869a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800869e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80086a2:	6800      	ldr	r0, [r0, #0]
 80086a4:	f001 fa30 	bl	8009b08 <USB_WritePMA>
            ep->xfer_buff += len;
 80086a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	695a      	ldr	r2, [r3, #20]
 80086b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b8:	441a      	add	r2, r3
 80086ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80086c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6a1a      	ldr	r2, [r3, #32]
 80086d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d90f      	bls.n	8008702 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80086e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6a1a      	ldr	r2, [r3, #32]
 80086ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086f2:	1ad2      	subs	r2, r2, r3
 80086f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	621a      	str	r2, [r3, #32]
 8008700:	e00e      	b.n	8008720 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2200      	movs	r2, #0
 800871e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	785b      	ldrb	r3, [r3, #1]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d177      	bne.n	8008820 <USB_EPStartXfer+0x4c4>
 8008730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008734:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	61bb      	str	r3, [r7, #24]
 800873c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008740:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800874a:	b29b      	uxth	r3, r3
 800874c:	461a      	mov	r2, r3
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	4413      	add	r3, r2
 8008752:	61bb      	str	r3, [r7, #24]
 8008754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	00da      	lsls	r2, r3, #3
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	4413      	add	r3, r2
 8008766:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800876a:	617b      	str	r3, [r7, #20]
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	b29b      	uxth	r3, r3
 8008772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008776:	b29a      	uxth	r2, r3
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	801a      	strh	r2, [r3, #0]
 800877c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10a      	bne.n	800879a <USB_EPStartXfer+0x43e>
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800878e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008792:	b29a      	uxth	r2, r3
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	801a      	strh	r2, [r3, #0]
 8008798:	e06d      	b.n	8008876 <USB_EPStartXfer+0x51a>
 800879a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800879e:	2b3e      	cmp	r3, #62	@ 0x3e
 80087a0:	d81c      	bhi.n	80087dc <USB_EPStartXfer+0x480>
 80087a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a6:	085b      	lsrs	r3, r3, #1
 80087a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80087ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <USB_EPStartXfer+0x466>
 80087b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087bc:	3301      	adds	r3, #1
 80087be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	029b      	lsls	r3, r3, #10
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	4313      	orrs	r3, r2
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	801a      	strh	r2, [r3, #0]
 80087da:	e04c      	b.n	8008876 <USB_EPStartXfer+0x51a>
 80087dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e0:	095b      	lsrs	r3, r3, #5
 80087e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80087e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ea:	f003 031f 	and.w	r3, r3, #31
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d104      	bne.n	80087fc <USB_EPStartXfer+0x4a0>
 80087f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087f6:	3b01      	subs	r3, #1
 80087f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	b29a      	uxth	r2, r3
 8008802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008806:	b29b      	uxth	r3, r3
 8008808:	029b      	lsls	r3, r3, #10
 800880a:	b29b      	uxth	r3, r3
 800880c:	4313      	orrs	r3, r2
 800880e:	b29b      	uxth	r3, r3
 8008810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008818:	b29a      	uxth	r2, r3
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	801a      	strh	r2, [r3, #0]
 800881e:	e02a      	b.n	8008876 <USB_EPStartXfer+0x51a>
 8008820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	785b      	ldrb	r3, [r3, #1]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d122      	bne.n	8008876 <USB_EPStartXfer+0x51a>
 8008830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008834:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	623b      	str	r3, [r7, #32]
 800883c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008840:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800884a:	b29b      	uxth	r3, r3
 800884c:	461a      	mov	r2, r3
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	4413      	add	r3, r2
 8008852:	623b      	str	r3, [r7, #32]
 8008854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	00da      	lsls	r2, r3, #3
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	4413      	add	r3, r2
 8008866:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800886a:	61fb      	str	r3, [r7, #28]
 800886c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008870:	b29a      	uxth	r2, r3
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800887a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	891b      	ldrh	r3, [r3, #8]
 8008882:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800888a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6959      	ldr	r1, [r3, #20]
 8008892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008896:	b29b      	uxth	r3, r3
 8008898:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800889c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80088a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80088a4:	6800      	ldr	r0, [r0, #0]
 80088a6:	f001 f92f 	bl	8009b08 <USB_WritePMA>
 80088aa:	e3ee      	b.n	800908a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	785b      	ldrb	r3, [r3, #1]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d177      	bne.n	80089ac <USB_EPStartXfer+0x650>
 80088bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	461a      	mov	r2, r3
 80088da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088dc:	4413      	add	r3, r2
 80088de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	00da      	lsls	r2, r3, #3
 80088ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088f0:	4413      	add	r3, r2
 80088f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80088f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80088f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008902:	b29a      	uxth	r2, r3
 8008904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008906:	801a      	strh	r2, [r3, #0]
 8008908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10a      	bne.n	8008926 <USB_EPStartXfer+0x5ca>
 8008910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	b29b      	uxth	r3, r3
 8008916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800891a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800891e:	b29a      	uxth	r2, r3
 8008920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008922:	801a      	strh	r2, [r3, #0]
 8008924:	e06d      	b.n	8008a02 <USB_EPStartXfer+0x6a6>
 8008926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800892a:	2b3e      	cmp	r3, #62	@ 0x3e
 800892c:	d81c      	bhi.n	8008968 <USB_EPStartXfer+0x60c>
 800892e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008932:	085b      	lsrs	r3, r3, #1
 8008934:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d004      	beq.n	800894e <USB_EPStartXfer+0x5f2>
 8008944:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008948:	3301      	adds	r3, #1
 800894a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800894e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	b29a      	uxth	r2, r3
 8008954:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008958:	b29b      	uxth	r3, r3
 800895a:	029b      	lsls	r3, r3, #10
 800895c:	b29b      	uxth	r3, r3
 800895e:	4313      	orrs	r3, r2
 8008960:	b29a      	uxth	r2, r3
 8008962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008964:	801a      	strh	r2, [r3, #0]
 8008966:	e04c      	b.n	8008a02 <USB_EPStartXfer+0x6a6>
 8008968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800896c:	095b      	lsrs	r3, r3, #5
 800896e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008976:	f003 031f 	and.w	r3, r3, #31
 800897a:	2b00      	cmp	r3, #0
 800897c:	d104      	bne.n	8008988 <USB_EPStartXfer+0x62c>
 800897e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008982:	3b01      	subs	r3, #1
 8008984:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800898a:	881b      	ldrh	r3, [r3, #0]
 800898c:	b29a      	uxth	r2, r3
 800898e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008992:	b29b      	uxth	r3, r3
 8008994:	029b      	lsls	r3, r3, #10
 8008996:	b29b      	uxth	r3, r3
 8008998:	4313      	orrs	r3, r2
 800899a:	b29b      	uxth	r3, r3
 800899c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089a8:	801a      	strh	r2, [r3, #0]
 80089aa:	e02a      	b.n	8008a02 <USB_EPStartXfer+0x6a6>
 80089ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	785b      	ldrb	r3, [r3, #1]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d122      	bne.n	8008a02 <USB_EPStartXfer+0x6a6>
 80089bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80089c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	461a      	mov	r2, r3
 80089da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089dc:	4413      	add	r3, r2
 80089de:	653b      	str	r3, [r7, #80]	@ 0x50
 80089e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	00da      	lsls	r2, r3, #3
 80089ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089f0:	4413      	add	r3, r2
 80089f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	891b      	ldrh	r3, [r3, #8]
 8008a0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6959      	ldr	r1, [r3, #20]
 8008a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008a2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008a30:	6800      	ldr	r0, [r0, #0]
 8008a32:	f001 f869 	bl	8009b08 <USB_WritePMA>
            ep->xfer_buff += len;
 8008a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	695a      	ldr	r2, [r3, #20]
 8008a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a46:	441a      	add	r2, r3
 8008a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6a1a      	ldr	r2, [r3, #32]
 8008a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d90f      	bls.n	8008a90 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6a1a      	ldr	r2, [r3, #32]
 8008a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a80:	1ad2      	subs	r2, r2, r3
 8008a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	621a      	str	r2, [r3, #32]
 8008a8e:	e00e      	b.n	8008aae <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6a1b      	ldr	r3, [r3, #32]
 8008a9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	785b      	ldrb	r3, [r3, #1]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d177      	bne.n	8008bba <USB_EPStartXfer+0x85e>
 8008aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ace:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ada:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aea:	4413      	add	r3, r2
 8008aec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	00da      	lsls	r2, r3, #3
 8008afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afe:	4413      	add	r3, r2
 8008b00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b14:	801a      	strh	r2, [r3, #0]
 8008b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10a      	bne.n	8008b34 <USB_EPStartXfer+0x7d8>
 8008b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b30:	801a      	strh	r2, [r3, #0]
 8008b32:	e067      	b.n	8008c04 <USB_EPStartXfer+0x8a8>
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b38:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b3a:	d81c      	bhi.n	8008b76 <USB_EPStartXfer+0x81a>
 8008b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b40:	085b      	lsrs	r3, r3, #1
 8008b42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d004      	beq.n	8008b5c <USB_EPStartXfer+0x800>
 8008b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b56:	3301      	adds	r3, #1
 8008b58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	029b      	lsls	r3, r3, #10
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b72:	801a      	strh	r2, [r3, #0]
 8008b74:	e046      	b.n	8008c04 <USB_EPStartXfer+0x8a8>
 8008b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b7a:	095b      	lsrs	r3, r3, #5
 8008b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b84:	f003 031f 	and.w	r3, r3, #31
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d104      	bne.n	8008b96 <USB_EPStartXfer+0x83a>
 8008b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b90:	3b01      	subs	r3, #1
 8008b92:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	029b      	lsls	r3, r3, #10
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bb6:	801a      	strh	r2, [r3, #0]
 8008bb8:	e024      	b.n	8008c04 <USB_EPStartXfer+0x8a8>
 8008bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	785b      	ldrb	r3, [r3, #1]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d11c      	bne.n	8008c04 <USB_EPStartXfer+0x8a8>
 8008bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	461a      	mov	r2, r3
 8008bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bde:	4413      	add	r3, r2
 8008be0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	00da      	lsls	r2, r3, #3
 8008bf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	895b      	ldrh	r3, [r3, #10]
 8008c10:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6959      	ldr	r1, [r3, #20]
 8008c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c2a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c2e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008c32:	6800      	ldr	r0, [r0, #0]
 8008c34:	f000 ff68 	bl	8009b08 <USB_WritePMA>
 8008c38:	e227      	b.n	800908a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008c6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c70:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	441a      	add	r2, r3
 8008c8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008c92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cc6:	4413      	add	r3, r2
 8008cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	00da      	lsls	r2, r3, #3
 8008cd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cda:	4413      	add	r3, r2
 8008cdc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008ce0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	891b      	ldrh	r3, [r3, #8]
 8008cf8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6959      	ldr	r1, [r3, #20]
 8008d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008d12:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008d16:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008d1a:	6800      	ldr	r0, [r0, #0]
 8008d1c:	f000 fef4 	bl	8009b08 <USB_WritePMA>
 8008d20:	e1b3      	b.n	800908a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6a1a      	ldr	r2, [r3, #32]
 8008d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d32:	1ad2      	subs	r2, r2, r3
 8008d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 80c6 	beq.w	8008ef4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	785b      	ldrb	r3, [r3, #1]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d177      	bne.n	8008e74 <USB_EPStartXfer+0xb18>
 8008d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	461a      	mov	r2, r3
 8008da2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008da4:	4413      	add	r3, r2
 8008da6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	00da      	lsls	r2, r3, #3
 8008db6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008db8:	4413      	add	r3, r2
 8008dba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008dbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8008dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dce:	801a      	strh	r2, [r3, #0]
 8008dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10a      	bne.n	8008dee <USB_EPStartXfer+0xa92>
 8008dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dea:	801a      	strh	r2, [r3, #0]
 8008dec:	e067      	b.n	8008ebe <USB_EPStartXfer+0xb62>
 8008dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008df2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008df4:	d81c      	bhi.n	8008e30 <USB_EPStartXfer+0xad4>
 8008df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dfa:	085b      	lsrs	r3, r3, #1
 8008dfc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d004      	beq.n	8008e16 <USB_EPStartXfer+0xaba>
 8008e0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e10:	3301      	adds	r3, #1
 8008e12:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	029b      	lsls	r3, r3, #10
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	4313      	orrs	r3, r2
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e2c:	801a      	strh	r2, [r3, #0]
 8008e2e:	e046      	b.n	8008ebe <USB_EPStartXfer+0xb62>
 8008e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e34:	095b      	lsrs	r3, r3, #5
 8008e36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e3e:	f003 031f 	and.w	r3, r3, #31
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d104      	bne.n	8008e50 <USB_EPStartXfer+0xaf4>
 8008e46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	029b      	lsls	r3, r3, #10
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	4313      	orrs	r3, r2
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e70:	801a      	strh	r2, [r3, #0]
 8008e72:	e024      	b.n	8008ebe <USB_EPStartXfer+0xb62>
 8008e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	785b      	ldrb	r3, [r3, #1]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d11c      	bne.n	8008ebe <USB_EPStartXfer+0xb62>
 8008e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	461a      	mov	r2, r3
 8008e96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e98:	4413      	add	r3, r2
 8008e9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	00da      	lsls	r2, r3, #3
 8008eaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008eac:	4413      	add	r3, r2
 8008eae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008eb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ebc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	895b      	ldrh	r3, [r3, #10]
 8008eca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6959      	ldr	r1, [r3, #20]
 8008eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008ee4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008ee8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008eec:	6800      	ldr	r0, [r0, #0]
 8008eee:	f000 fe0b 	bl	8009b08 <USB_WritePMA>
 8008ef2:	e0ca      	b.n	800908a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	785b      	ldrb	r3, [r3, #1]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d177      	bne.n	8008ff4 <USB_EPStartXfer+0xc98>
 8008f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	461a      	mov	r2, r3
 8008f22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008f24:	4413      	add	r3, r2
 8008f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	00da      	lsls	r2, r3, #3
 8008f36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008f38:	4413      	add	r3, r2
 8008f3a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f4e:	801a      	strh	r2, [r3, #0]
 8008f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10a      	bne.n	8008f6e <USB_EPStartXfer+0xc12>
 8008f58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f6a:	801a      	strh	r2, [r3, #0]
 8008f6c:	e073      	b.n	8009056 <USB_EPStartXfer+0xcfa>
 8008f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f72:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f74:	d81c      	bhi.n	8008fb0 <USB_EPStartXfer+0xc54>
 8008f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f7a:	085b      	lsrs	r3, r3, #1
 8008f7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d004      	beq.n	8008f96 <USB_EPStartXfer+0xc3a>
 8008f8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008f90:	3301      	adds	r3, #1
 8008f92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	029b      	lsls	r3, r3, #10
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fac:	801a      	strh	r2, [r3, #0]
 8008fae:	e052      	b.n	8009056 <USB_EPStartXfer+0xcfa>
 8008fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb4:	095b      	lsrs	r3, r3, #5
 8008fb6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fbe:	f003 031f 	and.w	r3, r3, #31
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d104      	bne.n	8008fd0 <USB_EPStartXfer+0xc74>
 8008fc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008fd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fd2:	881b      	ldrh	r3, [r3, #0]
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	029b      	lsls	r3, r3, #10
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	e030      	b.n	8009056 <USB_EPStartXfer+0xcfa>
 8008ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	785b      	ldrb	r3, [r3, #1]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d128      	bne.n	8009056 <USB_EPStartXfer+0xcfa>
 8009004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009008:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009016:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009020:	b29b      	uxth	r3, r3
 8009022:	461a      	mov	r2, r3
 8009024:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009028:	4413      	add	r3, r2
 800902a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800902e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	00da      	lsls	r2, r3, #3
 800903c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009040:	4413      	add	r3, r2
 8009042:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009046:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800904a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800904e:	b29a      	uxth	r2, r3
 8009050:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009054:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800905a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	891b      	ldrh	r3, [r3, #8]
 8009062:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800906a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6959      	ldr	r1, [r3, #20]
 8009072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009076:	b29b      	uxth	r3, r3
 8009078:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800907c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009080:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009084:	6800      	ldr	r0, [r0, #0]
 8009086:	f000 fd3f 	bl	8009b08 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800908a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800908e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090b0:	817b      	strh	r3, [r7, #10]
 80090b2:	897b      	ldrh	r3, [r7, #10]
 80090b4:	f083 0310 	eor.w	r3, r3, #16
 80090b8:	817b      	strh	r3, [r7, #10]
 80090ba:	897b      	ldrh	r3, [r7, #10]
 80090bc:	f083 0320 	eor.w	r3, r3, #32
 80090c0:	817b      	strh	r3, [r7, #10]
 80090c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	441a      	add	r2, r3
 80090dc:	897b      	ldrh	r3, [r7, #10]
 80090de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	8013      	strh	r3, [r2, #0]
 80090f2:	f000 bcdf 	b.w	8009ab4 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80090f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	7b1b      	ldrb	r3, [r3, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	f040 80bc 	bne.w	8009280 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800910c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	699a      	ldr	r2, [r3, #24]
 8009114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	429a      	cmp	r2, r3
 8009122:	d917      	bls.n	8009154 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8009134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	699a      	ldr	r2, [r3, #24]
 8009140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009144:	1ad2      	subs	r2, r2, r3
 8009146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800914a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	619a      	str	r2, [r3, #24]
 8009152:	e00e      	b.n	8009172 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8009164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2200      	movs	r2, #0
 8009170:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009184:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800918e:	b29b      	uxth	r3, r3
 8009190:	461a      	mov	r2, r3
 8009192:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009196:	4413      	add	r3, r2
 8009198:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800919c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	00da      	lsls	r2, r3, #3
 80091aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091ae:	4413      	add	r3, r2
 80091b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80091b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091ca:	801a      	strh	r2, [r3, #0]
 80091cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10d      	bne.n	80091f0 <USB_EPStartXfer+0xe94>
 80091d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091ea:	801a      	strh	r2, [r3, #0]
 80091ec:	f000 bc28 	b.w	8009a40 <USB_EPStartXfer+0x16e4>
 80091f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80091f6:	d81f      	bhi.n	8009238 <USB_EPStartXfer+0xedc>
 80091f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091fc:	085b      	lsrs	r3, r3, #1
 80091fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d004      	beq.n	8009218 <USB_EPStartXfer+0xebc>
 800920e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009212:	3301      	adds	r3, #1
 8009214:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009218:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	b29a      	uxth	r2, r3
 8009220:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009224:	b29b      	uxth	r3, r3
 8009226:	029b      	lsls	r3, r3, #10
 8009228:	b29b      	uxth	r3, r3
 800922a:	4313      	orrs	r3, r2
 800922c:	b29a      	uxth	r2, r3
 800922e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009232:	801a      	strh	r2, [r3, #0]
 8009234:	f000 bc04 	b.w	8009a40 <USB_EPStartXfer+0x16e4>
 8009238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800923c:	095b      	lsrs	r3, r3, #5
 800923e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009246:	f003 031f 	and.w	r3, r3, #31
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <USB_EPStartXfer+0xefc>
 800924e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009252:	3b01      	subs	r3, #1
 8009254:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009258:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	b29a      	uxth	r2, r3
 8009260:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009264:	b29b      	uxth	r3, r3
 8009266:	029b      	lsls	r3, r3, #10
 8009268:	b29b      	uxth	r3, r3
 800926a:	4313      	orrs	r3, r2
 800926c:	b29b      	uxth	r3, r3
 800926e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009276:	b29a      	uxth	r2, r3
 8009278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800927c:	801a      	strh	r2, [r3, #0]
 800927e:	e3df      	b.n	8009a40 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	78db      	ldrb	r3, [r3, #3]
 800928c:	2b02      	cmp	r3, #2
 800928e:	f040 8218 	bne.w	80096c2 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	785b      	ldrb	r3, [r3, #1]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f040 809d 	bne.w	80093de <USB_EPStartXfer+0x1082>
 80092a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80092b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	461a      	mov	r2, r3
 80092c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092c8:	4413      	add	r3, r2
 80092ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80092ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	00da      	lsls	r2, r3, #3
 80092dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092e0:	4413      	add	r3, r2
 80092e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80092e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092fc:	801a      	strh	r2, [r3, #0]
 80092fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10c      	bne.n	8009328 <USB_EPStartXfer+0xfcc>
 800930e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009312:	881b      	ldrh	r3, [r3, #0]
 8009314:	b29b      	uxth	r3, r3
 8009316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800931a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800931e:	b29a      	uxth	r2, r3
 8009320:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009324:	801a      	strh	r2, [r3, #0]
 8009326:	e08f      	b.n	8009448 <USB_EPStartXfer+0x10ec>
 8009328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800932c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	2b3e      	cmp	r3, #62	@ 0x3e
 8009336:	d826      	bhi.n	8009386 <USB_EPStartXfer+0x102a>
 8009338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800933c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	085b      	lsrs	r3, r3, #1
 8009346:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800934a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800934e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	2b00      	cmp	r3, #0
 800935c:	d004      	beq.n	8009368 <USB_EPStartXfer+0x100c>
 800935e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009362:	3301      	adds	r3, #1
 8009364:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009368:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800936c:	881b      	ldrh	r3, [r3, #0]
 800936e:	b29a      	uxth	r2, r3
 8009370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009374:	b29b      	uxth	r3, r3
 8009376:	029b      	lsls	r3, r3, #10
 8009378:	b29b      	uxth	r3, r3
 800937a:	4313      	orrs	r3, r2
 800937c:	b29a      	uxth	r2, r3
 800937e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009382:	801a      	strh	r2, [r3, #0]
 8009384:	e060      	b.n	8009448 <USB_EPStartXfer+0x10ec>
 8009386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800938a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	095b      	lsrs	r3, r3, #5
 8009394:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800939c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	f003 031f 	and.w	r3, r3, #31
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d104      	bne.n	80093b6 <USB_EPStartXfer+0x105a>
 80093ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b0:	3b01      	subs	r3, #1
 80093b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093ba:	881b      	ldrh	r3, [r3, #0]
 80093bc:	b29a      	uxth	r2, r3
 80093be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	029b      	lsls	r3, r3, #10
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	4313      	orrs	r3, r2
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093da:	801a      	strh	r2, [r3, #0]
 80093dc:	e034      	b.n	8009448 <USB_EPStartXfer+0x10ec>
 80093de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	785b      	ldrb	r3, [r3, #1]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d12c      	bne.n	8009448 <USB_EPStartXfer+0x10ec>
 80093ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80093fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009400:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800940a:	b29b      	uxth	r3, r3
 800940c:	461a      	mov	r2, r3
 800940e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009412:	4413      	add	r3, r2
 8009414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800941c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	00da      	lsls	r2, r3, #3
 8009426:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800942a:	4413      	add	r3, r2
 800942c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009430:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	b29a      	uxth	r2, r3
 8009442:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009446:	801a      	strh	r2, [r3, #0]
 8009448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800944c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800945a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	785b      	ldrb	r3, [r3, #1]
 8009462:	2b00      	cmp	r3, #0
 8009464:	f040 809d 	bne.w	80095a2 <USB_EPStartXfer+0x1246>
 8009468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800946c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800947a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009484:	b29b      	uxth	r3, r3
 8009486:	461a      	mov	r2, r3
 8009488:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800948c:	4413      	add	r3, r2
 800948e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	00da      	lsls	r2, r3, #3
 80094a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094a4:	4413      	add	r3, r2
 80094a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094c0:	801a      	strh	r2, [r3, #0]
 80094c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10c      	bne.n	80094ec <USB_EPStartXfer+0x1190>
 80094d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094e8:	801a      	strh	r2, [r3, #0]
 80094ea:	e088      	b.n	80095fe <USB_EPStartXfer+0x12a2>
 80094ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80094fa:	d826      	bhi.n	800954a <USB_EPStartXfer+0x11ee>
 80094fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	085b      	lsrs	r3, r3, #1
 800950a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800950e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	d004      	beq.n	800952c <USB_EPStartXfer+0x11d0>
 8009522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009526:	3301      	adds	r3, #1
 8009528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800952c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	b29a      	uxth	r2, r3
 8009534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009538:	b29b      	uxth	r3, r3
 800953a:	029b      	lsls	r3, r3, #10
 800953c:	b29b      	uxth	r3, r3
 800953e:	4313      	orrs	r3, r2
 8009540:	b29a      	uxth	r2, r3
 8009542:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009546:	801a      	strh	r2, [r3, #0]
 8009548:	e059      	b.n	80095fe <USB_EPStartXfer+0x12a2>
 800954a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800954e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	095b      	lsrs	r3, r3, #5
 8009558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800955c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	f003 031f 	and.w	r3, r3, #31
 800956c:	2b00      	cmp	r3, #0
 800956e:	d104      	bne.n	800957a <USB_EPStartXfer+0x121e>
 8009570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009574:	3b01      	subs	r3, #1
 8009576:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800957a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800957e:	881b      	ldrh	r3, [r3, #0]
 8009580:	b29a      	uxth	r2, r3
 8009582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009586:	b29b      	uxth	r3, r3
 8009588:	029b      	lsls	r3, r3, #10
 800958a:	b29b      	uxth	r3, r3
 800958c:	4313      	orrs	r3, r2
 800958e:	b29b      	uxth	r3, r3
 8009590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009598:	b29a      	uxth	r2, r3
 800959a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800959e:	801a      	strh	r2, [r3, #0]
 80095a0:	e02d      	b.n	80095fe <USB_EPStartXfer+0x12a2>
 80095a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	785b      	ldrb	r3, [r3, #1]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d125      	bne.n	80095fe <USB_EPStartXfer+0x12a2>
 80095b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	461a      	mov	r2, r3
 80095c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80095c8:	4413      	add	r3, r2
 80095ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80095ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	00da      	lsls	r2, r3, #3
 80095dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80095e0:	4413      	add	r3, r2
 80095e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80095e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80095ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80095fc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80095fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 8218 	beq.w	8009a40 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009614:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800961e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	881b      	ldrh	r3, [r3, #0]
 800962c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009630:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d005      	beq.n	8009648 <USB_EPStartXfer+0x12ec>
 800963c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10d      	bne.n	8009664 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009648:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800964c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009650:	2b00      	cmp	r3, #0
 8009652:	f040 81f5 	bne.w	8009a40 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009656:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800965a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800965e:	2b00      	cmp	r3, #0
 8009660:	f040 81ee 	bne.w	8009a40 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009668:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	b29b      	uxth	r3, r3
 8009682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800968a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800968e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009692:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800969c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	441a      	add	r2, r3
 80096a8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80096ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80096bc:	b29b      	uxth	r3, r3
 80096be:	8013      	strh	r3, [r2, #0]
 80096c0:	e1be      	b.n	8009a40 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80096c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	78db      	ldrb	r3, [r3, #3]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	f040 81b4 	bne.w	8009a3c <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80096d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	699a      	ldr	r2, [r3, #24]
 80096e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d917      	bls.n	8009720 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 80096f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	699a      	ldr	r2, [r3, #24]
 800970c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009710:	1ad2      	subs	r2, r2, r3
 8009712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	619a      	str	r2, [r3, #24]
 800971e:	e00e      	b.n	800973e <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8009720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2200      	movs	r2, #0
 800973c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800973e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	785b      	ldrb	r3, [r3, #1]
 800974a:	2b00      	cmp	r3, #0
 800974c:	f040 8085 	bne.w	800985a <USB_EPStartXfer+0x14fe>
 8009750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800975e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009762:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800976c:	b29b      	uxth	r3, r3
 800976e:	461a      	mov	r2, r3
 8009770:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009774:	4413      	add	r3, r2
 8009776:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800977a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800977e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	00da      	lsls	r2, r3, #3
 8009788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800978c:	4413      	add	r3, r2
 800978e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009792:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009796:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	b29b      	uxth	r3, r3
 800979e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097a8:	801a      	strh	r2, [r3, #0]
 80097aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10c      	bne.n	80097cc <USB_EPStartXfer+0x1470>
 80097b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097c8:	801a      	strh	r2, [r3, #0]
 80097ca:	e077      	b.n	80098bc <USB_EPStartXfer+0x1560>
 80097cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80097d2:	d81e      	bhi.n	8009812 <USB_EPStartXfer+0x14b6>
 80097d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d8:	085b      	lsrs	r3, r3, #1
 80097da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80097de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d004      	beq.n	80097f4 <USB_EPStartXfer+0x1498>
 80097ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097ee:	3301      	adds	r3, #1
 80097f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80097f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009800:	b29b      	uxth	r3, r3
 8009802:	029b      	lsls	r3, r3, #10
 8009804:	b29b      	uxth	r3, r3
 8009806:	4313      	orrs	r3, r2
 8009808:	b29a      	uxth	r2, r3
 800980a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800980e:	801a      	strh	r2, [r3, #0]
 8009810:	e054      	b.n	80098bc <USB_EPStartXfer+0x1560>
 8009812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009816:	095b      	lsrs	r3, r3, #5
 8009818:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800981c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009820:	f003 031f 	and.w	r3, r3, #31
 8009824:	2b00      	cmp	r3, #0
 8009826:	d104      	bne.n	8009832 <USB_EPStartXfer+0x14d6>
 8009828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800982c:	3b01      	subs	r3, #1
 800982e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009832:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	b29a      	uxth	r2, r3
 800983a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800983e:	b29b      	uxth	r3, r3
 8009840:	029b      	lsls	r3, r3, #10
 8009842:	b29b      	uxth	r3, r3
 8009844:	4313      	orrs	r3, r2
 8009846:	b29b      	uxth	r3, r3
 8009848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800984c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009850:	b29a      	uxth	r2, r3
 8009852:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009856:	801a      	strh	r2, [r3, #0]
 8009858:	e030      	b.n	80098bc <USB_EPStartXfer+0x1560>
 800985a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800985e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	785b      	ldrb	r3, [r3, #1]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d128      	bne.n	80098bc <USB_EPStartXfer+0x1560>
 800986a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800986e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800987c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009886:	b29b      	uxth	r3, r3
 8009888:	461a      	mov	r2, r3
 800988a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800988e:	4413      	add	r3, r2
 8009890:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	00da      	lsls	r2, r3, #3
 80098a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80098a6:	4413      	add	r3, r2
 80098a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80098ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80098ba:	801a      	strh	r2, [r3, #0]
 80098bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80098ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	785b      	ldrb	r3, [r3, #1]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f040 8085 	bne.w	80099e6 <USB_EPStartXfer+0x168a>
 80098dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80098ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	461a      	mov	r2, r3
 80098fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009900:	4413      	add	r3, r2
 8009902:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800990a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	00da      	lsls	r2, r3, #3
 8009914:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009918:	4413      	add	r3, r2
 800991a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800991e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009922:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	b29b      	uxth	r3, r3
 800992a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800992e:	b29a      	uxth	r2, r3
 8009930:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009934:	801a      	strh	r2, [r3, #0]
 8009936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10c      	bne.n	8009958 <USB_EPStartXfer+0x15fc>
 800993e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	b29b      	uxth	r3, r3
 8009946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800994a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800994e:	b29a      	uxth	r2, r3
 8009950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009954:	801a      	strh	r2, [r3, #0]
 8009956:	e073      	b.n	8009a40 <USB_EPStartXfer+0x16e4>
 8009958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800995c:	2b3e      	cmp	r3, #62	@ 0x3e
 800995e:	d81e      	bhi.n	800999e <USB_EPStartXfer+0x1642>
 8009960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009964:	085b      	lsrs	r3, r3, #1
 8009966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800996a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	2b00      	cmp	r3, #0
 8009974:	d004      	beq.n	8009980 <USB_EPStartXfer+0x1624>
 8009976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800997a:	3301      	adds	r3, #1
 800997c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009980:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	b29a      	uxth	r2, r3
 8009988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800998c:	b29b      	uxth	r3, r3
 800998e:	029b      	lsls	r3, r3, #10
 8009990:	b29b      	uxth	r3, r3
 8009992:	4313      	orrs	r3, r2
 8009994:	b29a      	uxth	r2, r3
 8009996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800999a:	801a      	strh	r2, [r3, #0]
 800999c:	e050      	b.n	8009a40 <USB_EPStartXfer+0x16e4>
 800999e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a2:	095b      	lsrs	r3, r3, #5
 80099a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ac:	f003 031f 	and.w	r3, r3, #31
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d104      	bne.n	80099be <USB_EPStartXfer+0x1662>
 80099b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099b8:	3b01      	subs	r3, #1
 80099ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099c2:	881b      	ldrh	r3, [r3, #0]
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	029b      	lsls	r3, r3, #10
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	4313      	orrs	r3, r2
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099dc:	b29a      	uxth	r2, r3
 80099de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099e2:	801a      	strh	r2, [r3, #0]
 80099e4:	e02c      	b.n	8009a40 <USB_EPStartXfer+0x16e4>
 80099e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	785b      	ldrb	r3, [r3, #1]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d124      	bne.n	8009a40 <USB_EPStartXfer+0x16e4>
 80099f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	461a      	mov	r2, r3
 8009a08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	00da      	lsls	r2, r3, #3
 8009a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009a24:	4413      	add	r3, r2
 8009a26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009a38:	801a      	strh	r2, [r3, #0]
 8009a3a:	e001      	b.n	8009a40 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e03a      	b.n	8009ab6 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a66:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009a6a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a6e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009a72:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009a76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a7a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009a7e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	441a      	add	r2, r3
 8009a9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009aa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009aa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009aa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009acc:	78fb      	ldrb	r3, [r7, #3]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d103      	bne.n	8009ada <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2280      	movs	r2, #128	@ 0x80
 8009ad6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009afa:	68fb      	ldr	r3, [r7, #12]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3714      	adds	r7, #20
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b08b      	sub	sp, #44	@ 0x2c
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	4611      	mov	r1, r2
 8009b14:	461a      	mov	r2, r3
 8009b16:	460b      	mov	r3, r1
 8009b18:	80fb      	strh	r3, [r7, #6]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009b1e:	88bb      	ldrh	r3, [r7, #4]
 8009b20:	3301      	adds	r3, #1
 8009b22:	085b      	lsrs	r3, r3, #1
 8009b24:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b2e:	88fa      	ldrh	r2, [r7, #6]
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	4413      	add	r3, r2
 8009b34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b38:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b3e:	e01b      	b.n	8009b78 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	b21a      	sxth	r2, r3
 8009b50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	b21b      	sxth	r3, r3
 8009b58:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	8a7a      	ldrh	r2, [r7, #18]
 8009b5e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	3302      	adds	r3, #2
 8009b64:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b74:	3b01      	subs	r3, #1
 8009b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1e0      	bne.n	8009b40 <USB_WritePMA+0x38>
  }
}
 8009b7e:	bf00      	nop
 8009b80:	bf00      	nop
 8009b82:	372c      	adds	r7, #44	@ 0x2c
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b08b      	sub	sp, #44	@ 0x2c
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	4611      	mov	r1, r2
 8009b98:	461a      	mov	r2, r3
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	80fb      	strh	r3, [r7, #6]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009ba2:	88bb      	ldrh	r3, [r7, #4]
 8009ba4:	085b      	lsrs	r3, r3, #1
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009bb2:	88fa      	ldrh	r2, [r7, #6]
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bbc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bc2:	e018      	b.n	8009bf6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009bc4:	6a3b      	ldr	r3, [r7, #32]
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009bcc:	6a3b      	ldr	r3, [r7, #32]
 8009bce:	3302      	adds	r3, #2
 8009bd0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	0a1b      	lsrs	r3, r3, #8
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	3301      	adds	r3, #1
 8009bee:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e3      	bne.n	8009bc4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009bfc:	88bb      	ldrh	r3, [r7, #4]
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d007      	beq.n	8009c18 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	881b      	ldrh	r3, [r3, #0]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	701a      	strb	r2, [r3, #0]
  }
}
 8009c18:	bf00      	nop
 8009c1a:	372c      	adds	r7, #44	@ 0x2c
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <__cvt>:
 8009c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c28:	ec57 6b10 	vmov	r6, r7, d0
 8009c2c:	2f00      	cmp	r7, #0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	4619      	mov	r1, r3
 8009c32:	463b      	mov	r3, r7
 8009c34:	bfbb      	ittet	lt
 8009c36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009c3a:	461f      	movlt	r7, r3
 8009c3c:	2300      	movge	r3, #0
 8009c3e:	232d      	movlt	r3, #45	@ 0x2d
 8009c40:	700b      	strb	r3, [r1, #0]
 8009c42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009c48:	4691      	mov	r9, r2
 8009c4a:	f023 0820 	bic.w	r8, r3, #32
 8009c4e:	bfbc      	itt	lt
 8009c50:	4632      	movlt	r2, r6
 8009c52:	4616      	movlt	r6, r2
 8009c54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c58:	d005      	beq.n	8009c66 <__cvt+0x42>
 8009c5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009c5e:	d100      	bne.n	8009c62 <__cvt+0x3e>
 8009c60:	3401      	adds	r4, #1
 8009c62:	2102      	movs	r1, #2
 8009c64:	e000      	b.n	8009c68 <__cvt+0x44>
 8009c66:	2103      	movs	r1, #3
 8009c68:	ab03      	add	r3, sp, #12
 8009c6a:	9301      	str	r3, [sp, #4]
 8009c6c:	ab02      	add	r3, sp, #8
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	ec47 6b10 	vmov	d0, r6, r7
 8009c74:	4653      	mov	r3, sl
 8009c76:	4622      	mov	r2, r4
 8009c78:	f000 fe5a 	bl	800a930 <_dtoa_r>
 8009c7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009c80:	4605      	mov	r5, r0
 8009c82:	d119      	bne.n	8009cb8 <__cvt+0x94>
 8009c84:	f019 0f01 	tst.w	r9, #1
 8009c88:	d00e      	beq.n	8009ca8 <__cvt+0x84>
 8009c8a:	eb00 0904 	add.w	r9, r0, r4
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2300      	movs	r3, #0
 8009c92:	4630      	mov	r0, r6
 8009c94:	4639      	mov	r1, r7
 8009c96:	f7f6 ff1f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c9a:	b108      	cbz	r0, 8009ca0 <__cvt+0x7c>
 8009c9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ca0:	2230      	movs	r2, #48	@ 0x30
 8009ca2:	9b03      	ldr	r3, [sp, #12]
 8009ca4:	454b      	cmp	r3, r9
 8009ca6:	d31e      	bcc.n	8009ce6 <__cvt+0xc2>
 8009ca8:	9b03      	ldr	r3, [sp, #12]
 8009caa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cac:	1b5b      	subs	r3, r3, r5
 8009cae:	4628      	mov	r0, r5
 8009cb0:	6013      	str	r3, [r2, #0]
 8009cb2:	b004      	add	sp, #16
 8009cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009cbc:	eb00 0904 	add.w	r9, r0, r4
 8009cc0:	d1e5      	bne.n	8009c8e <__cvt+0x6a>
 8009cc2:	7803      	ldrb	r3, [r0, #0]
 8009cc4:	2b30      	cmp	r3, #48	@ 0x30
 8009cc6:	d10a      	bne.n	8009cde <__cvt+0xba>
 8009cc8:	2200      	movs	r2, #0
 8009cca:	2300      	movs	r3, #0
 8009ccc:	4630      	mov	r0, r6
 8009cce:	4639      	mov	r1, r7
 8009cd0:	f7f6 ff02 	bl	8000ad8 <__aeabi_dcmpeq>
 8009cd4:	b918      	cbnz	r0, 8009cde <__cvt+0xba>
 8009cd6:	f1c4 0401 	rsb	r4, r4, #1
 8009cda:	f8ca 4000 	str.w	r4, [sl]
 8009cde:	f8da 3000 	ldr.w	r3, [sl]
 8009ce2:	4499      	add	r9, r3
 8009ce4:	e7d3      	b.n	8009c8e <__cvt+0x6a>
 8009ce6:	1c59      	adds	r1, r3, #1
 8009ce8:	9103      	str	r1, [sp, #12]
 8009cea:	701a      	strb	r2, [r3, #0]
 8009cec:	e7d9      	b.n	8009ca2 <__cvt+0x7e>

08009cee <__exponent>:
 8009cee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cf0:	2900      	cmp	r1, #0
 8009cf2:	bfba      	itte	lt
 8009cf4:	4249      	neglt	r1, r1
 8009cf6:	232d      	movlt	r3, #45	@ 0x2d
 8009cf8:	232b      	movge	r3, #43	@ 0x2b
 8009cfa:	2909      	cmp	r1, #9
 8009cfc:	7002      	strb	r2, [r0, #0]
 8009cfe:	7043      	strb	r3, [r0, #1]
 8009d00:	dd29      	ble.n	8009d56 <__exponent+0x68>
 8009d02:	f10d 0307 	add.w	r3, sp, #7
 8009d06:	461d      	mov	r5, r3
 8009d08:	270a      	movs	r7, #10
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009d10:	fb07 1416 	mls	r4, r7, r6, r1
 8009d14:	3430      	adds	r4, #48	@ 0x30
 8009d16:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	2c63      	cmp	r4, #99	@ 0x63
 8009d1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d22:	4631      	mov	r1, r6
 8009d24:	dcf1      	bgt.n	8009d0a <__exponent+0x1c>
 8009d26:	3130      	adds	r1, #48	@ 0x30
 8009d28:	1e94      	subs	r4, r2, #2
 8009d2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d2e:	1c41      	adds	r1, r0, #1
 8009d30:	4623      	mov	r3, r4
 8009d32:	42ab      	cmp	r3, r5
 8009d34:	d30a      	bcc.n	8009d4c <__exponent+0x5e>
 8009d36:	f10d 0309 	add.w	r3, sp, #9
 8009d3a:	1a9b      	subs	r3, r3, r2
 8009d3c:	42ac      	cmp	r4, r5
 8009d3e:	bf88      	it	hi
 8009d40:	2300      	movhi	r3, #0
 8009d42:	3302      	adds	r3, #2
 8009d44:	4403      	add	r3, r0
 8009d46:	1a18      	subs	r0, r3, r0
 8009d48:	b003      	add	sp, #12
 8009d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009d50:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009d54:	e7ed      	b.n	8009d32 <__exponent+0x44>
 8009d56:	2330      	movs	r3, #48	@ 0x30
 8009d58:	3130      	adds	r1, #48	@ 0x30
 8009d5a:	7083      	strb	r3, [r0, #2]
 8009d5c:	70c1      	strb	r1, [r0, #3]
 8009d5e:	1d03      	adds	r3, r0, #4
 8009d60:	e7f1      	b.n	8009d46 <__exponent+0x58>
	...

08009d64 <_printf_float>:
 8009d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d68:	b08d      	sub	sp, #52	@ 0x34
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009d70:	4616      	mov	r6, r2
 8009d72:	461f      	mov	r7, r3
 8009d74:	4605      	mov	r5, r0
 8009d76:	f000 fcdb 	bl	800a730 <_localeconv_r>
 8009d7a:	6803      	ldr	r3, [r0, #0]
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7f6 fa7e 	bl	8000280 <strlen>
 8009d84:	2300      	movs	r3, #0
 8009d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d88:	f8d8 3000 	ldr.w	r3, [r8]
 8009d8c:	9005      	str	r0, [sp, #20]
 8009d8e:	3307      	adds	r3, #7
 8009d90:	f023 0307 	bic.w	r3, r3, #7
 8009d94:	f103 0208 	add.w	r2, r3, #8
 8009d98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009d9c:	f8d4 b000 	ldr.w	fp, [r4]
 8009da0:	f8c8 2000 	str.w	r2, [r8]
 8009da4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009da8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009dac:	9307      	str	r3, [sp, #28]
 8009dae:	f8cd 8018 	str.w	r8, [sp, #24]
 8009db2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009db6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dba:	4b9c      	ldr	r3, [pc, #624]	@ (800a02c <_printf_float+0x2c8>)
 8009dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc0:	f7f6 febc 	bl	8000b3c <__aeabi_dcmpun>
 8009dc4:	bb70      	cbnz	r0, 8009e24 <_printf_float+0xc0>
 8009dc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dca:	4b98      	ldr	r3, [pc, #608]	@ (800a02c <_printf_float+0x2c8>)
 8009dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd0:	f7f6 fe96 	bl	8000b00 <__aeabi_dcmple>
 8009dd4:	bb30      	cbnz	r0, 8009e24 <_printf_float+0xc0>
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2300      	movs	r3, #0
 8009dda:	4640      	mov	r0, r8
 8009ddc:	4649      	mov	r1, r9
 8009dde:	f7f6 fe85 	bl	8000aec <__aeabi_dcmplt>
 8009de2:	b110      	cbz	r0, 8009dea <_printf_float+0x86>
 8009de4:	232d      	movs	r3, #45	@ 0x2d
 8009de6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dea:	4a91      	ldr	r2, [pc, #580]	@ (800a030 <_printf_float+0x2cc>)
 8009dec:	4b91      	ldr	r3, [pc, #580]	@ (800a034 <_printf_float+0x2d0>)
 8009dee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009df2:	bf94      	ite	ls
 8009df4:	4690      	movls	r8, r2
 8009df6:	4698      	movhi	r8, r3
 8009df8:	2303      	movs	r3, #3
 8009dfa:	6123      	str	r3, [r4, #16]
 8009dfc:	f02b 0304 	bic.w	r3, fp, #4
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	f04f 0900 	mov.w	r9, #0
 8009e06:	9700      	str	r7, [sp, #0]
 8009e08:	4633      	mov	r3, r6
 8009e0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f000 f9d2 	bl	800a1b8 <_printf_common>
 8009e14:	3001      	adds	r0, #1
 8009e16:	f040 808d 	bne.w	8009f34 <_printf_float+0x1d0>
 8009e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e1e:	b00d      	add	sp, #52	@ 0x34
 8009e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e24:	4642      	mov	r2, r8
 8009e26:	464b      	mov	r3, r9
 8009e28:	4640      	mov	r0, r8
 8009e2a:	4649      	mov	r1, r9
 8009e2c:	f7f6 fe86 	bl	8000b3c <__aeabi_dcmpun>
 8009e30:	b140      	cbz	r0, 8009e44 <_printf_float+0xe0>
 8009e32:	464b      	mov	r3, r9
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	bfbc      	itt	lt
 8009e38:	232d      	movlt	r3, #45	@ 0x2d
 8009e3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009e3e:	4a7e      	ldr	r2, [pc, #504]	@ (800a038 <_printf_float+0x2d4>)
 8009e40:	4b7e      	ldr	r3, [pc, #504]	@ (800a03c <_printf_float+0x2d8>)
 8009e42:	e7d4      	b.n	8009dee <_printf_float+0x8a>
 8009e44:	6863      	ldr	r3, [r4, #4]
 8009e46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009e4a:	9206      	str	r2, [sp, #24]
 8009e4c:	1c5a      	adds	r2, r3, #1
 8009e4e:	d13b      	bne.n	8009ec8 <_printf_float+0x164>
 8009e50:	2306      	movs	r3, #6
 8009e52:	6063      	str	r3, [r4, #4]
 8009e54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009e58:	2300      	movs	r3, #0
 8009e5a:	6022      	str	r2, [r4, #0]
 8009e5c:	9303      	str	r3, [sp, #12]
 8009e5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009e60:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009e64:	ab09      	add	r3, sp, #36	@ 0x24
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	6861      	ldr	r1, [r4, #4]
 8009e6a:	ec49 8b10 	vmov	d0, r8, r9
 8009e6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009e72:	4628      	mov	r0, r5
 8009e74:	f7ff fed6 	bl	8009c24 <__cvt>
 8009e78:	9b06      	ldr	r3, [sp, #24]
 8009e7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e7c:	2b47      	cmp	r3, #71	@ 0x47
 8009e7e:	4680      	mov	r8, r0
 8009e80:	d129      	bne.n	8009ed6 <_printf_float+0x172>
 8009e82:	1cc8      	adds	r0, r1, #3
 8009e84:	db02      	blt.n	8009e8c <_printf_float+0x128>
 8009e86:	6863      	ldr	r3, [r4, #4]
 8009e88:	4299      	cmp	r1, r3
 8009e8a:	dd41      	ble.n	8009f10 <_printf_float+0x1ac>
 8009e8c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009e90:	fa5f fa8a 	uxtb.w	sl, sl
 8009e94:	3901      	subs	r1, #1
 8009e96:	4652      	mov	r2, sl
 8009e98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009e9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e9e:	f7ff ff26 	bl	8009cee <__exponent>
 8009ea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ea4:	1813      	adds	r3, r2, r0
 8009ea6:	2a01      	cmp	r2, #1
 8009ea8:	4681      	mov	r9, r0
 8009eaa:	6123      	str	r3, [r4, #16]
 8009eac:	dc02      	bgt.n	8009eb4 <_printf_float+0x150>
 8009eae:	6822      	ldr	r2, [r4, #0]
 8009eb0:	07d2      	lsls	r2, r2, #31
 8009eb2:	d501      	bpl.n	8009eb8 <_printf_float+0x154>
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	6123      	str	r3, [r4, #16]
 8009eb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d0a2      	beq.n	8009e06 <_printf_float+0xa2>
 8009ec0:	232d      	movs	r3, #45	@ 0x2d
 8009ec2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ec6:	e79e      	b.n	8009e06 <_printf_float+0xa2>
 8009ec8:	9a06      	ldr	r2, [sp, #24]
 8009eca:	2a47      	cmp	r2, #71	@ 0x47
 8009ecc:	d1c2      	bne.n	8009e54 <_printf_float+0xf0>
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1c0      	bne.n	8009e54 <_printf_float+0xf0>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e7bd      	b.n	8009e52 <_printf_float+0xee>
 8009ed6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009eda:	d9db      	bls.n	8009e94 <_printf_float+0x130>
 8009edc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009ee0:	d118      	bne.n	8009f14 <_printf_float+0x1b0>
 8009ee2:	2900      	cmp	r1, #0
 8009ee4:	6863      	ldr	r3, [r4, #4]
 8009ee6:	dd0b      	ble.n	8009f00 <_printf_float+0x19c>
 8009ee8:	6121      	str	r1, [r4, #16]
 8009eea:	b913      	cbnz	r3, 8009ef2 <_printf_float+0x18e>
 8009eec:	6822      	ldr	r2, [r4, #0]
 8009eee:	07d0      	lsls	r0, r2, #31
 8009ef0:	d502      	bpl.n	8009ef8 <_printf_float+0x194>
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	440b      	add	r3, r1
 8009ef6:	6123      	str	r3, [r4, #16]
 8009ef8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009efa:	f04f 0900 	mov.w	r9, #0
 8009efe:	e7db      	b.n	8009eb8 <_printf_float+0x154>
 8009f00:	b913      	cbnz	r3, 8009f08 <_printf_float+0x1a4>
 8009f02:	6822      	ldr	r2, [r4, #0]
 8009f04:	07d2      	lsls	r2, r2, #31
 8009f06:	d501      	bpl.n	8009f0c <_printf_float+0x1a8>
 8009f08:	3302      	adds	r3, #2
 8009f0a:	e7f4      	b.n	8009ef6 <_printf_float+0x192>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e7f2      	b.n	8009ef6 <_printf_float+0x192>
 8009f10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f16:	4299      	cmp	r1, r3
 8009f18:	db05      	blt.n	8009f26 <_printf_float+0x1c2>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	6121      	str	r1, [r4, #16]
 8009f1e:	07d8      	lsls	r0, r3, #31
 8009f20:	d5ea      	bpl.n	8009ef8 <_printf_float+0x194>
 8009f22:	1c4b      	adds	r3, r1, #1
 8009f24:	e7e7      	b.n	8009ef6 <_printf_float+0x192>
 8009f26:	2900      	cmp	r1, #0
 8009f28:	bfd4      	ite	le
 8009f2a:	f1c1 0202 	rsble	r2, r1, #2
 8009f2e:	2201      	movgt	r2, #1
 8009f30:	4413      	add	r3, r2
 8009f32:	e7e0      	b.n	8009ef6 <_printf_float+0x192>
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	055a      	lsls	r2, r3, #21
 8009f38:	d407      	bmi.n	8009f4a <_printf_float+0x1e6>
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	4642      	mov	r2, r8
 8009f3e:	4631      	mov	r1, r6
 8009f40:	4628      	mov	r0, r5
 8009f42:	47b8      	blx	r7
 8009f44:	3001      	adds	r0, #1
 8009f46:	d12b      	bne.n	8009fa0 <_printf_float+0x23c>
 8009f48:	e767      	b.n	8009e1a <_printf_float+0xb6>
 8009f4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f4e:	f240 80dd 	bls.w	800a10c <_printf_float+0x3a8>
 8009f52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f56:	2200      	movs	r2, #0
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f7f6 fdbd 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d033      	beq.n	8009fca <_printf_float+0x266>
 8009f62:	4a37      	ldr	r2, [pc, #220]	@ (800a040 <_printf_float+0x2dc>)
 8009f64:	2301      	movs	r3, #1
 8009f66:	4631      	mov	r1, r6
 8009f68:	4628      	mov	r0, r5
 8009f6a:	47b8      	blx	r7
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	f43f af54 	beq.w	8009e1a <_printf_float+0xb6>
 8009f72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009f76:	4543      	cmp	r3, r8
 8009f78:	db02      	blt.n	8009f80 <_printf_float+0x21c>
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	07d8      	lsls	r0, r3, #31
 8009f7e:	d50f      	bpl.n	8009fa0 <_printf_float+0x23c>
 8009f80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f84:	4631      	mov	r1, r6
 8009f86:	4628      	mov	r0, r5
 8009f88:	47b8      	blx	r7
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	f43f af45 	beq.w	8009e1a <_printf_float+0xb6>
 8009f90:	f04f 0900 	mov.w	r9, #0
 8009f94:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f98:	f104 0a1a 	add.w	sl, r4, #26
 8009f9c:	45c8      	cmp	r8, r9
 8009f9e:	dc09      	bgt.n	8009fb4 <_printf_float+0x250>
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	079b      	lsls	r3, r3, #30
 8009fa4:	f100 8103 	bmi.w	800a1ae <_printf_float+0x44a>
 8009fa8:	68e0      	ldr	r0, [r4, #12]
 8009faa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fac:	4298      	cmp	r0, r3
 8009fae:	bfb8      	it	lt
 8009fb0:	4618      	movlt	r0, r3
 8009fb2:	e734      	b.n	8009e1e <_printf_float+0xba>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	4652      	mov	r2, sl
 8009fb8:	4631      	mov	r1, r6
 8009fba:	4628      	mov	r0, r5
 8009fbc:	47b8      	blx	r7
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	f43f af2b 	beq.w	8009e1a <_printf_float+0xb6>
 8009fc4:	f109 0901 	add.w	r9, r9, #1
 8009fc8:	e7e8      	b.n	8009f9c <_printf_float+0x238>
 8009fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	dc39      	bgt.n	800a044 <_printf_float+0x2e0>
 8009fd0:	4a1b      	ldr	r2, [pc, #108]	@ (800a040 <_printf_float+0x2dc>)
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	4631      	mov	r1, r6
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	47b8      	blx	r7
 8009fda:	3001      	adds	r0, #1
 8009fdc:	f43f af1d 	beq.w	8009e1a <_printf_float+0xb6>
 8009fe0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009fe4:	ea59 0303 	orrs.w	r3, r9, r3
 8009fe8:	d102      	bne.n	8009ff0 <_printf_float+0x28c>
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	07d9      	lsls	r1, r3, #31
 8009fee:	d5d7      	bpl.n	8009fa0 <_printf_float+0x23c>
 8009ff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ff4:	4631      	mov	r1, r6
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	47b8      	blx	r7
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	f43f af0d 	beq.w	8009e1a <_printf_float+0xb6>
 800a000:	f04f 0a00 	mov.w	sl, #0
 800a004:	f104 0b1a 	add.w	fp, r4, #26
 800a008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a00a:	425b      	negs	r3, r3
 800a00c:	4553      	cmp	r3, sl
 800a00e:	dc01      	bgt.n	800a014 <_printf_float+0x2b0>
 800a010:	464b      	mov	r3, r9
 800a012:	e793      	b.n	8009f3c <_printf_float+0x1d8>
 800a014:	2301      	movs	r3, #1
 800a016:	465a      	mov	r2, fp
 800a018:	4631      	mov	r1, r6
 800a01a:	4628      	mov	r0, r5
 800a01c:	47b8      	blx	r7
 800a01e:	3001      	adds	r0, #1
 800a020:	f43f aefb 	beq.w	8009e1a <_printf_float+0xb6>
 800a024:	f10a 0a01 	add.w	sl, sl, #1
 800a028:	e7ee      	b.n	800a008 <_printf_float+0x2a4>
 800a02a:	bf00      	nop
 800a02c:	7fefffff 	.word	0x7fefffff
 800a030:	0800cb8c 	.word	0x0800cb8c
 800a034:	0800cb90 	.word	0x0800cb90
 800a038:	0800cb94 	.word	0x0800cb94
 800a03c:	0800cb98 	.word	0x0800cb98
 800a040:	0800cb9c 	.word	0x0800cb9c
 800a044:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a046:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a04a:	4553      	cmp	r3, sl
 800a04c:	bfa8      	it	ge
 800a04e:	4653      	movge	r3, sl
 800a050:	2b00      	cmp	r3, #0
 800a052:	4699      	mov	r9, r3
 800a054:	dc36      	bgt.n	800a0c4 <_printf_float+0x360>
 800a056:	f04f 0b00 	mov.w	fp, #0
 800a05a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a05e:	f104 021a 	add.w	r2, r4, #26
 800a062:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a064:	9306      	str	r3, [sp, #24]
 800a066:	eba3 0309 	sub.w	r3, r3, r9
 800a06a:	455b      	cmp	r3, fp
 800a06c:	dc31      	bgt.n	800a0d2 <_printf_float+0x36e>
 800a06e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a070:	459a      	cmp	sl, r3
 800a072:	dc3a      	bgt.n	800a0ea <_printf_float+0x386>
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	07da      	lsls	r2, r3, #31
 800a078:	d437      	bmi.n	800a0ea <_printf_float+0x386>
 800a07a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a07c:	ebaa 0903 	sub.w	r9, sl, r3
 800a080:	9b06      	ldr	r3, [sp, #24]
 800a082:	ebaa 0303 	sub.w	r3, sl, r3
 800a086:	4599      	cmp	r9, r3
 800a088:	bfa8      	it	ge
 800a08a:	4699      	movge	r9, r3
 800a08c:	f1b9 0f00 	cmp.w	r9, #0
 800a090:	dc33      	bgt.n	800a0fa <_printf_float+0x396>
 800a092:	f04f 0800 	mov.w	r8, #0
 800a096:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a09a:	f104 0b1a 	add.w	fp, r4, #26
 800a09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0a0:	ebaa 0303 	sub.w	r3, sl, r3
 800a0a4:	eba3 0309 	sub.w	r3, r3, r9
 800a0a8:	4543      	cmp	r3, r8
 800a0aa:	f77f af79 	ble.w	8009fa0 <_printf_float+0x23c>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	465a      	mov	r2, fp
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	47b8      	blx	r7
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	f43f aeae 	beq.w	8009e1a <_printf_float+0xb6>
 800a0be:	f108 0801 	add.w	r8, r8, #1
 800a0c2:	e7ec      	b.n	800a09e <_printf_float+0x33a>
 800a0c4:	4642      	mov	r2, r8
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b8      	blx	r7
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	d1c2      	bne.n	800a056 <_printf_float+0x2f2>
 800a0d0:	e6a3      	b.n	8009e1a <_printf_float+0xb6>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	4631      	mov	r1, r6
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	9206      	str	r2, [sp, #24]
 800a0da:	47b8      	blx	r7
 800a0dc:	3001      	adds	r0, #1
 800a0de:	f43f ae9c 	beq.w	8009e1a <_printf_float+0xb6>
 800a0e2:	9a06      	ldr	r2, [sp, #24]
 800a0e4:	f10b 0b01 	add.w	fp, fp, #1
 800a0e8:	e7bb      	b.n	800a062 <_printf_float+0x2fe>
 800a0ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0ee:	4631      	mov	r1, r6
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b8      	blx	r7
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	d1c0      	bne.n	800a07a <_printf_float+0x316>
 800a0f8:	e68f      	b.n	8009e1a <_printf_float+0xb6>
 800a0fa:	9a06      	ldr	r2, [sp, #24]
 800a0fc:	464b      	mov	r3, r9
 800a0fe:	4442      	add	r2, r8
 800a100:	4631      	mov	r1, r6
 800a102:	4628      	mov	r0, r5
 800a104:	47b8      	blx	r7
 800a106:	3001      	adds	r0, #1
 800a108:	d1c3      	bne.n	800a092 <_printf_float+0x32e>
 800a10a:	e686      	b.n	8009e1a <_printf_float+0xb6>
 800a10c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a110:	f1ba 0f01 	cmp.w	sl, #1
 800a114:	dc01      	bgt.n	800a11a <_printf_float+0x3b6>
 800a116:	07db      	lsls	r3, r3, #31
 800a118:	d536      	bpl.n	800a188 <_printf_float+0x424>
 800a11a:	2301      	movs	r3, #1
 800a11c:	4642      	mov	r2, r8
 800a11e:	4631      	mov	r1, r6
 800a120:	4628      	mov	r0, r5
 800a122:	47b8      	blx	r7
 800a124:	3001      	adds	r0, #1
 800a126:	f43f ae78 	beq.w	8009e1a <_printf_float+0xb6>
 800a12a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a12e:	4631      	mov	r1, r6
 800a130:	4628      	mov	r0, r5
 800a132:	47b8      	blx	r7
 800a134:	3001      	adds	r0, #1
 800a136:	f43f ae70 	beq.w	8009e1a <_printf_float+0xb6>
 800a13a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a13e:	2200      	movs	r2, #0
 800a140:	2300      	movs	r3, #0
 800a142:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a146:	f7f6 fcc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a14a:	b9c0      	cbnz	r0, 800a17e <_printf_float+0x41a>
 800a14c:	4653      	mov	r3, sl
 800a14e:	f108 0201 	add.w	r2, r8, #1
 800a152:	4631      	mov	r1, r6
 800a154:	4628      	mov	r0, r5
 800a156:	47b8      	blx	r7
 800a158:	3001      	adds	r0, #1
 800a15a:	d10c      	bne.n	800a176 <_printf_float+0x412>
 800a15c:	e65d      	b.n	8009e1a <_printf_float+0xb6>
 800a15e:	2301      	movs	r3, #1
 800a160:	465a      	mov	r2, fp
 800a162:	4631      	mov	r1, r6
 800a164:	4628      	mov	r0, r5
 800a166:	47b8      	blx	r7
 800a168:	3001      	adds	r0, #1
 800a16a:	f43f ae56 	beq.w	8009e1a <_printf_float+0xb6>
 800a16e:	f108 0801 	add.w	r8, r8, #1
 800a172:	45d0      	cmp	r8, sl
 800a174:	dbf3      	blt.n	800a15e <_printf_float+0x3fa>
 800a176:	464b      	mov	r3, r9
 800a178:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a17c:	e6df      	b.n	8009f3e <_printf_float+0x1da>
 800a17e:	f04f 0800 	mov.w	r8, #0
 800a182:	f104 0b1a 	add.w	fp, r4, #26
 800a186:	e7f4      	b.n	800a172 <_printf_float+0x40e>
 800a188:	2301      	movs	r3, #1
 800a18a:	4642      	mov	r2, r8
 800a18c:	e7e1      	b.n	800a152 <_printf_float+0x3ee>
 800a18e:	2301      	movs	r3, #1
 800a190:	464a      	mov	r2, r9
 800a192:	4631      	mov	r1, r6
 800a194:	4628      	mov	r0, r5
 800a196:	47b8      	blx	r7
 800a198:	3001      	adds	r0, #1
 800a19a:	f43f ae3e 	beq.w	8009e1a <_printf_float+0xb6>
 800a19e:	f108 0801 	add.w	r8, r8, #1
 800a1a2:	68e3      	ldr	r3, [r4, #12]
 800a1a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a1a6:	1a5b      	subs	r3, r3, r1
 800a1a8:	4543      	cmp	r3, r8
 800a1aa:	dcf0      	bgt.n	800a18e <_printf_float+0x42a>
 800a1ac:	e6fc      	b.n	8009fa8 <_printf_float+0x244>
 800a1ae:	f04f 0800 	mov.w	r8, #0
 800a1b2:	f104 0919 	add.w	r9, r4, #25
 800a1b6:	e7f4      	b.n	800a1a2 <_printf_float+0x43e>

0800a1b8 <_printf_common>:
 800a1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1bc:	4616      	mov	r6, r2
 800a1be:	4698      	mov	r8, r3
 800a1c0:	688a      	ldr	r2, [r1, #8]
 800a1c2:	690b      	ldr	r3, [r1, #16]
 800a1c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	bfb8      	it	lt
 800a1cc:	4613      	movlt	r3, r2
 800a1ce:	6033      	str	r3, [r6, #0]
 800a1d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1d4:	4607      	mov	r7, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	b10a      	cbz	r2, 800a1de <_printf_common+0x26>
 800a1da:	3301      	adds	r3, #1
 800a1dc:	6033      	str	r3, [r6, #0]
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	0699      	lsls	r1, r3, #26
 800a1e2:	bf42      	ittt	mi
 800a1e4:	6833      	ldrmi	r3, [r6, #0]
 800a1e6:	3302      	addmi	r3, #2
 800a1e8:	6033      	strmi	r3, [r6, #0]
 800a1ea:	6825      	ldr	r5, [r4, #0]
 800a1ec:	f015 0506 	ands.w	r5, r5, #6
 800a1f0:	d106      	bne.n	800a200 <_printf_common+0x48>
 800a1f2:	f104 0a19 	add.w	sl, r4, #25
 800a1f6:	68e3      	ldr	r3, [r4, #12]
 800a1f8:	6832      	ldr	r2, [r6, #0]
 800a1fa:	1a9b      	subs	r3, r3, r2
 800a1fc:	42ab      	cmp	r3, r5
 800a1fe:	dc26      	bgt.n	800a24e <_printf_common+0x96>
 800a200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a204:	6822      	ldr	r2, [r4, #0]
 800a206:	3b00      	subs	r3, #0
 800a208:	bf18      	it	ne
 800a20a:	2301      	movne	r3, #1
 800a20c:	0692      	lsls	r2, r2, #26
 800a20e:	d42b      	bmi.n	800a268 <_printf_common+0xb0>
 800a210:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a214:	4641      	mov	r1, r8
 800a216:	4638      	mov	r0, r7
 800a218:	47c8      	blx	r9
 800a21a:	3001      	adds	r0, #1
 800a21c:	d01e      	beq.n	800a25c <_printf_common+0xa4>
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	6922      	ldr	r2, [r4, #16]
 800a222:	f003 0306 	and.w	r3, r3, #6
 800a226:	2b04      	cmp	r3, #4
 800a228:	bf02      	ittt	eq
 800a22a:	68e5      	ldreq	r5, [r4, #12]
 800a22c:	6833      	ldreq	r3, [r6, #0]
 800a22e:	1aed      	subeq	r5, r5, r3
 800a230:	68a3      	ldr	r3, [r4, #8]
 800a232:	bf0c      	ite	eq
 800a234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a238:	2500      	movne	r5, #0
 800a23a:	4293      	cmp	r3, r2
 800a23c:	bfc4      	itt	gt
 800a23e:	1a9b      	subgt	r3, r3, r2
 800a240:	18ed      	addgt	r5, r5, r3
 800a242:	2600      	movs	r6, #0
 800a244:	341a      	adds	r4, #26
 800a246:	42b5      	cmp	r5, r6
 800a248:	d11a      	bne.n	800a280 <_printf_common+0xc8>
 800a24a:	2000      	movs	r0, #0
 800a24c:	e008      	b.n	800a260 <_printf_common+0xa8>
 800a24e:	2301      	movs	r3, #1
 800a250:	4652      	mov	r2, sl
 800a252:	4641      	mov	r1, r8
 800a254:	4638      	mov	r0, r7
 800a256:	47c8      	blx	r9
 800a258:	3001      	adds	r0, #1
 800a25a:	d103      	bne.n	800a264 <_printf_common+0xac>
 800a25c:	f04f 30ff 	mov.w	r0, #4294967295
 800a260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a264:	3501      	adds	r5, #1
 800a266:	e7c6      	b.n	800a1f6 <_printf_common+0x3e>
 800a268:	18e1      	adds	r1, r4, r3
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	2030      	movs	r0, #48	@ 0x30
 800a26e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a272:	4422      	add	r2, r4
 800a274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a27c:	3302      	adds	r3, #2
 800a27e:	e7c7      	b.n	800a210 <_printf_common+0x58>
 800a280:	2301      	movs	r3, #1
 800a282:	4622      	mov	r2, r4
 800a284:	4641      	mov	r1, r8
 800a286:	4638      	mov	r0, r7
 800a288:	47c8      	blx	r9
 800a28a:	3001      	adds	r0, #1
 800a28c:	d0e6      	beq.n	800a25c <_printf_common+0xa4>
 800a28e:	3601      	adds	r6, #1
 800a290:	e7d9      	b.n	800a246 <_printf_common+0x8e>
	...

0800a294 <_printf_i>:
 800a294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a298:	7e0f      	ldrb	r7, [r1, #24]
 800a29a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a29c:	2f78      	cmp	r7, #120	@ 0x78
 800a29e:	4691      	mov	r9, r2
 800a2a0:	4680      	mov	r8, r0
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	469a      	mov	sl, r3
 800a2a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2aa:	d807      	bhi.n	800a2bc <_printf_i+0x28>
 800a2ac:	2f62      	cmp	r7, #98	@ 0x62
 800a2ae:	d80a      	bhi.n	800a2c6 <_printf_i+0x32>
 800a2b0:	2f00      	cmp	r7, #0
 800a2b2:	f000 80d2 	beq.w	800a45a <_printf_i+0x1c6>
 800a2b6:	2f58      	cmp	r7, #88	@ 0x58
 800a2b8:	f000 80b9 	beq.w	800a42e <_printf_i+0x19a>
 800a2bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a2c4:	e03a      	b.n	800a33c <_printf_i+0xa8>
 800a2c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a2ca:	2b15      	cmp	r3, #21
 800a2cc:	d8f6      	bhi.n	800a2bc <_printf_i+0x28>
 800a2ce:	a101      	add	r1, pc, #4	@ (adr r1, 800a2d4 <_printf_i+0x40>)
 800a2d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2d4:	0800a32d 	.word	0x0800a32d
 800a2d8:	0800a341 	.word	0x0800a341
 800a2dc:	0800a2bd 	.word	0x0800a2bd
 800a2e0:	0800a2bd 	.word	0x0800a2bd
 800a2e4:	0800a2bd 	.word	0x0800a2bd
 800a2e8:	0800a2bd 	.word	0x0800a2bd
 800a2ec:	0800a341 	.word	0x0800a341
 800a2f0:	0800a2bd 	.word	0x0800a2bd
 800a2f4:	0800a2bd 	.word	0x0800a2bd
 800a2f8:	0800a2bd 	.word	0x0800a2bd
 800a2fc:	0800a2bd 	.word	0x0800a2bd
 800a300:	0800a441 	.word	0x0800a441
 800a304:	0800a36b 	.word	0x0800a36b
 800a308:	0800a3fb 	.word	0x0800a3fb
 800a30c:	0800a2bd 	.word	0x0800a2bd
 800a310:	0800a2bd 	.word	0x0800a2bd
 800a314:	0800a463 	.word	0x0800a463
 800a318:	0800a2bd 	.word	0x0800a2bd
 800a31c:	0800a36b 	.word	0x0800a36b
 800a320:	0800a2bd 	.word	0x0800a2bd
 800a324:	0800a2bd 	.word	0x0800a2bd
 800a328:	0800a403 	.word	0x0800a403
 800a32c:	6833      	ldr	r3, [r6, #0]
 800a32e:	1d1a      	adds	r2, r3, #4
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	6032      	str	r2, [r6, #0]
 800a334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a33c:	2301      	movs	r3, #1
 800a33e:	e09d      	b.n	800a47c <_printf_i+0x1e8>
 800a340:	6833      	ldr	r3, [r6, #0]
 800a342:	6820      	ldr	r0, [r4, #0]
 800a344:	1d19      	adds	r1, r3, #4
 800a346:	6031      	str	r1, [r6, #0]
 800a348:	0606      	lsls	r6, r0, #24
 800a34a:	d501      	bpl.n	800a350 <_printf_i+0xbc>
 800a34c:	681d      	ldr	r5, [r3, #0]
 800a34e:	e003      	b.n	800a358 <_printf_i+0xc4>
 800a350:	0645      	lsls	r5, r0, #25
 800a352:	d5fb      	bpl.n	800a34c <_printf_i+0xb8>
 800a354:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a358:	2d00      	cmp	r5, #0
 800a35a:	da03      	bge.n	800a364 <_printf_i+0xd0>
 800a35c:	232d      	movs	r3, #45	@ 0x2d
 800a35e:	426d      	negs	r5, r5
 800a360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a364:	4859      	ldr	r0, [pc, #356]	@ (800a4cc <_printf_i+0x238>)
 800a366:	230a      	movs	r3, #10
 800a368:	e011      	b.n	800a38e <_printf_i+0xfa>
 800a36a:	6821      	ldr	r1, [r4, #0]
 800a36c:	6833      	ldr	r3, [r6, #0]
 800a36e:	0608      	lsls	r0, r1, #24
 800a370:	f853 5b04 	ldr.w	r5, [r3], #4
 800a374:	d402      	bmi.n	800a37c <_printf_i+0xe8>
 800a376:	0649      	lsls	r1, r1, #25
 800a378:	bf48      	it	mi
 800a37a:	b2ad      	uxthmi	r5, r5
 800a37c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a37e:	4853      	ldr	r0, [pc, #332]	@ (800a4cc <_printf_i+0x238>)
 800a380:	6033      	str	r3, [r6, #0]
 800a382:	bf14      	ite	ne
 800a384:	230a      	movne	r3, #10
 800a386:	2308      	moveq	r3, #8
 800a388:	2100      	movs	r1, #0
 800a38a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a38e:	6866      	ldr	r6, [r4, #4]
 800a390:	60a6      	str	r6, [r4, #8]
 800a392:	2e00      	cmp	r6, #0
 800a394:	bfa2      	ittt	ge
 800a396:	6821      	ldrge	r1, [r4, #0]
 800a398:	f021 0104 	bicge.w	r1, r1, #4
 800a39c:	6021      	strge	r1, [r4, #0]
 800a39e:	b90d      	cbnz	r5, 800a3a4 <_printf_i+0x110>
 800a3a0:	2e00      	cmp	r6, #0
 800a3a2:	d04b      	beq.n	800a43c <_printf_i+0x1a8>
 800a3a4:	4616      	mov	r6, r2
 800a3a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3aa:	fb03 5711 	mls	r7, r3, r1, r5
 800a3ae:	5dc7      	ldrb	r7, [r0, r7]
 800a3b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a3b4:	462f      	mov	r7, r5
 800a3b6:	42bb      	cmp	r3, r7
 800a3b8:	460d      	mov	r5, r1
 800a3ba:	d9f4      	bls.n	800a3a6 <_printf_i+0x112>
 800a3bc:	2b08      	cmp	r3, #8
 800a3be:	d10b      	bne.n	800a3d8 <_printf_i+0x144>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	07df      	lsls	r7, r3, #31
 800a3c4:	d508      	bpl.n	800a3d8 <_printf_i+0x144>
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	6861      	ldr	r1, [r4, #4]
 800a3ca:	4299      	cmp	r1, r3
 800a3cc:	bfde      	ittt	le
 800a3ce:	2330      	movle	r3, #48	@ 0x30
 800a3d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a3d8:	1b92      	subs	r2, r2, r6
 800a3da:	6122      	str	r2, [r4, #16]
 800a3dc:	f8cd a000 	str.w	sl, [sp]
 800a3e0:	464b      	mov	r3, r9
 800a3e2:	aa03      	add	r2, sp, #12
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	f7ff fee6 	bl	800a1b8 <_printf_common>
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	d14a      	bne.n	800a486 <_printf_i+0x1f2>
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f4:	b004      	add	sp, #16
 800a3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	f043 0320 	orr.w	r3, r3, #32
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	4833      	ldr	r0, [pc, #204]	@ (800a4d0 <_printf_i+0x23c>)
 800a404:	2778      	movs	r7, #120	@ 0x78
 800a406:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	6831      	ldr	r1, [r6, #0]
 800a40e:	061f      	lsls	r7, r3, #24
 800a410:	f851 5b04 	ldr.w	r5, [r1], #4
 800a414:	d402      	bmi.n	800a41c <_printf_i+0x188>
 800a416:	065f      	lsls	r7, r3, #25
 800a418:	bf48      	it	mi
 800a41a:	b2ad      	uxthmi	r5, r5
 800a41c:	6031      	str	r1, [r6, #0]
 800a41e:	07d9      	lsls	r1, r3, #31
 800a420:	bf44      	itt	mi
 800a422:	f043 0320 	orrmi.w	r3, r3, #32
 800a426:	6023      	strmi	r3, [r4, #0]
 800a428:	b11d      	cbz	r5, 800a432 <_printf_i+0x19e>
 800a42a:	2310      	movs	r3, #16
 800a42c:	e7ac      	b.n	800a388 <_printf_i+0xf4>
 800a42e:	4827      	ldr	r0, [pc, #156]	@ (800a4cc <_printf_i+0x238>)
 800a430:	e7e9      	b.n	800a406 <_printf_i+0x172>
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	f023 0320 	bic.w	r3, r3, #32
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	e7f6      	b.n	800a42a <_printf_i+0x196>
 800a43c:	4616      	mov	r6, r2
 800a43e:	e7bd      	b.n	800a3bc <_printf_i+0x128>
 800a440:	6833      	ldr	r3, [r6, #0]
 800a442:	6825      	ldr	r5, [r4, #0]
 800a444:	6961      	ldr	r1, [r4, #20]
 800a446:	1d18      	adds	r0, r3, #4
 800a448:	6030      	str	r0, [r6, #0]
 800a44a:	062e      	lsls	r6, r5, #24
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	d501      	bpl.n	800a454 <_printf_i+0x1c0>
 800a450:	6019      	str	r1, [r3, #0]
 800a452:	e002      	b.n	800a45a <_printf_i+0x1c6>
 800a454:	0668      	lsls	r0, r5, #25
 800a456:	d5fb      	bpl.n	800a450 <_printf_i+0x1bc>
 800a458:	8019      	strh	r1, [r3, #0]
 800a45a:	2300      	movs	r3, #0
 800a45c:	6123      	str	r3, [r4, #16]
 800a45e:	4616      	mov	r6, r2
 800a460:	e7bc      	b.n	800a3dc <_printf_i+0x148>
 800a462:	6833      	ldr	r3, [r6, #0]
 800a464:	1d1a      	adds	r2, r3, #4
 800a466:	6032      	str	r2, [r6, #0]
 800a468:	681e      	ldr	r6, [r3, #0]
 800a46a:	6862      	ldr	r2, [r4, #4]
 800a46c:	2100      	movs	r1, #0
 800a46e:	4630      	mov	r0, r6
 800a470:	f7f5 feb6 	bl	80001e0 <memchr>
 800a474:	b108      	cbz	r0, 800a47a <_printf_i+0x1e6>
 800a476:	1b80      	subs	r0, r0, r6
 800a478:	6060      	str	r0, [r4, #4]
 800a47a:	6863      	ldr	r3, [r4, #4]
 800a47c:	6123      	str	r3, [r4, #16]
 800a47e:	2300      	movs	r3, #0
 800a480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a484:	e7aa      	b.n	800a3dc <_printf_i+0x148>
 800a486:	6923      	ldr	r3, [r4, #16]
 800a488:	4632      	mov	r2, r6
 800a48a:	4649      	mov	r1, r9
 800a48c:	4640      	mov	r0, r8
 800a48e:	47d0      	blx	sl
 800a490:	3001      	adds	r0, #1
 800a492:	d0ad      	beq.n	800a3f0 <_printf_i+0x15c>
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	079b      	lsls	r3, r3, #30
 800a498:	d413      	bmi.n	800a4c2 <_printf_i+0x22e>
 800a49a:	68e0      	ldr	r0, [r4, #12]
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	4298      	cmp	r0, r3
 800a4a0:	bfb8      	it	lt
 800a4a2:	4618      	movlt	r0, r3
 800a4a4:	e7a6      	b.n	800a3f4 <_printf_i+0x160>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	4632      	mov	r2, r6
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	4640      	mov	r0, r8
 800a4ae:	47d0      	blx	sl
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	d09d      	beq.n	800a3f0 <_printf_i+0x15c>
 800a4b4:	3501      	adds	r5, #1
 800a4b6:	68e3      	ldr	r3, [r4, #12]
 800a4b8:	9903      	ldr	r1, [sp, #12]
 800a4ba:	1a5b      	subs	r3, r3, r1
 800a4bc:	42ab      	cmp	r3, r5
 800a4be:	dcf2      	bgt.n	800a4a6 <_printf_i+0x212>
 800a4c0:	e7eb      	b.n	800a49a <_printf_i+0x206>
 800a4c2:	2500      	movs	r5, #0
 800a4c4:	f104 0619 	add.w	r6, r4, #25
 800a4c8:	e7f5      	b.n	800a4b6 <_printf_i+0x222>
 800a4ca:	bf00      	nop
 800a4cc:	0800cb9e 	.word	0x0800cb9e
 800a4d0:	0800cbaf 	.word	0x0800cbaf

0800a4d4 <std>:
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	b510      	push	{r4, lr}
 800a4d8:	4604      	mov	r4, r0
 800a4da:	e9c0 3300 	strd	r3, r3, [r0]
 800a4de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4e2:	6083      	str	r3, [r0, #8]
 800a4e4:	8181      	strh	r1, [r0, #12]
 800a4e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a4e8:	81c2      	strh	r2, [r0, #14]
 800a4ea:	6183      	str	r3, [r0, #24]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	2208      	movs	r2, #8
 800a4f0:	305c      	adds	r0, #92	@ 0x5c
 800a4f2:	f000 f914 	bl	800a71e <memset>
 800a4f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a52c <std+0x58>)
 800a4f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a4fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a530 <std+0x5c>)
 800a4fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a534 <std+0x60>)
 800a500:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a502:	4b0d      	ldr	r3, [pc, #52]	@ (800a538 <std+0x64>)
 800a504:	6323      	str	r3, [r4, #48]	@ 0x30
 800a506:	4b0d      	ldr	r3, [pc, #52]	@ (800a53c <std+0x68>)
 800a508:	6224      	str	r4, [r4, #32]
 800a50a:	429c      	cmp	r4, r3
 800a50c:	d006      	beq.n	800a51c <std+0x48>
 800a50e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a512:	4294      	cmp	r4, r2
 800a514:	d002      	beq.n	800a51c <std+0x48>
 800a516:	33d0      	adds	r3, #208	@ 0xd0
 800a518:	429c      	cmp	r4, r3
 800a51a:	d105      	bne.n	800a528 <std+0x54>
 800a51c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a524:	f000 b978 	b.w	800a818 <__retarget_lock_init_recursive>
 800a528:	bd10      	pop	{r4, pc}
 800a52a:	bf00      	nop
 800a52c:	0800a699 	.word	0x0800a699
 800a530:	0800a6bb 	.word	0x0800a6bb
 800a534:	0800a6f3 	.word	0x0800a6f3
 800a538:	0800a717 	.word	0x0800a717
 800a53c:	200007b0 	.word	0x200007b0

0800a540 <stdio_exit_handler>:
 800a540:	4a02      	ldr	r2, [pc, #8]	@ (800a54c <stdio_exit_handler+0xc>)
 800a542:	4903      	ldr	r1, [pc, #12]	@ (800a550 <stdio_exit_handler+0x10>)
 800a544:	4803      	ldr	r0, [pc, #12]	@ (800a554 <stdio_exit_handler+0x14>)
 800a546:	f000 b869 	b.w	800a61c <_fwalk_sglue>
 800a54a:	bf00      	nop
 800a54c:	2000000c 	.word	0x2000000c
 800a550:	0800c175 	.word	0x0800c175
 800a554:	2000001c 	.word	0x2000001c

0800a558 <cleanup_stdio>:
 800a558:	6841      	ldr	r1, [r0, #4]
 800a55a:	4b0c      	ldr	r3, [pc, #48]	@ (800a58c <cleanup_stdio+0x34>)
 800a55c:	4299      	cmp	r1, r3
 800a55e:	b510      	push	{r4, lr}
 800a560:	4604      	mov	r4, r0
 800a562:	d001      	beq.n	800a568 <cleanup_stdio+0x10>
 800a564:	f001 fe06 	bl	800c174 <_fflush_r>
 800a568:	68a1      	ldr	r1, [r4, #8]
 800a56a:	4b09      	ldr	r3, [pc, #36]	@ (800a590 <cleanup_stdio+0x38>)
 800a56c:	4299      	cmp	r1, r3
 800a56e:	d002      	beq.n	800a576 <cleanup_stdio+0x1e>
 800a570:	4620      	mov	r0, r4
 800a572:	f001 fdff 	bl	800c174 <_fflush_r>
 800a576:	68e1      	ldr	r1, [r4, #12]
 800a578:	4b06      	ldr	r3, [pc, #24]	@ (800a594 <cleanup_stdio+0x3c>)
 800a57a:	4299      	cmp	r1, r3
 800a57c:	d004      	beq.n	800a588 <cleanup_stdio+0x30>
 800a57e:	4620      	mov	r0, r4
 800a580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a584:	f001 bdf6 	b.w	800c174 <_fflush_r>
 800a588:	bd10      	pop	{r4, pc}
 800a58a:	bf00      	nop
 800a58c:	200007b0 	.word	0x200007b0
 800a590:	20000818 	.word	0x20000818
 800a594:	20000880 	.word	0x20000880

0800a598 <global_stdio_init.part.0>:
 800a598:	b510      	push	{r4, lr}
 800a59a:	4b0b      	ldr	r3, [pc, #44]	@ (800a5c8 <global_stdio_init.part.0+0x30>)
 800a59c:	4c0b      	ldr	r4, [pc, #44]	@ (800a5cc <global_stdio_init.part.0+0x34>)
 800a59e:	4a0c      	ldr	r2, [pc, #48]	@ (800a5d0 <global_stdio_init.part.0+0x38>)
 800a5a0:	601a      	str	r2, [r3, #0]
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2104      	movs	r1, #4
 800a5a8:	f7ff ff94 	bl	800a4d4 <std>
 800a5ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	2109      	movs	r1, #9
 800a5b4:	f7ff ff8e 	bl	800a4d4 <std>
 800a5b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a5bc:	2202      	movs	r2, #2
 800a5be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5c2:	2112      	movs	r1, #18
 800a5c4:	f7ff bf86 	b.w	800a4d4 <std>
 800a5c8:	200008e8 	.word	0x200008e8
 800a5cc:	200007b0 	.word	0x200007b0
 800a5d0:	0800a541 	.word	0x0800a541

0800a5d4 <__sfp_lock_acquire>:
 800a5d4:	4801      	ldr	r0, [pc, #4]	@ (800a5dc <__sfp_lock_acquire+0x8>)
 800a5d6:	f000 b920 	b.w	800a81a <__retarget_lock_acquire_recursive>
 800a5da:	bf00      	nop
 800a5dc:	200008f1 	.word	0x200008f1

0800a5e0 <__sfp_lock_release>:
 800a5e0:	4801      	ldr	r0, [pc, #4]	@ (800a5e8 <__sfp_lock_release+0x8>)
 800a5e2:	f000 b91b 	b.w	800a81c <__retarget_lock_release_recursive>
 800a5e6:	bf00      	nop
 800a5e8:	200008f1 	.word	0x200008f1

0800a5ec <__sinit>:
 800a5ec:	b510      	push	{r4, lr}
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	f7ff fff0 	bl	800a5d4 <__sfp_lock_acquire>
 800a5f4:	6a23      	ldr	r3, [r4, #32]
 800a5f6:	b11b      	cbz	r3, 800a600 <__sinit+0x14>
 800a5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5fc:	f7ff bff0 	b.w	800a5e0 <__sfp_lock_release>
 800a600:	4b04      	ldr	r3, [pc, #16]	@ (800a614 <__sinit+0x28>)
 800a602:	6223      	str	r3, [r4, #32]
 800a604:	4b04      	ldr	r3, [pc, #16]	@ (800a618 <__sinit+0x2c>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1f5      	bne.n	800a5f8 <__sinit+0xc>
 800a60c:	f7ff ffc4 	bl	800a598 <global_stdio_init.part.0>
 800a610:	e7f2      	b.n	800a5f8 <__sinit+0xc>
 800a612:	bf00      	nop
 800a614:	0800a559 	.word	0x0800a559
 800a618:	200008e8 	.word	0x200008e8

0800a61c <_fwalk_sglue>:
 800a61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a620:	4607      	mov	r7, r0
 800a622:	4688      	mov	r8, r1
 800a624:	4614      	mov	r4, r2
 800a626:	2600      	movs	r6, #0
 800a628:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a62c:	f1b9 0901 	subs.w	r9, r9, #1
 800a630:	d505      	bpl.n	800a63e <_fwalk_sglue+0x22>
 800a632:	6824      	ldr	r4, [r4, #0]
 800a634:	2c00      	cmp	r4, #0
 800a636:	d1f7      	bne.n	800a628 <_fwalk_sglue+0xc>
 800a638:	4630      	mov	r0, r6
 800a63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a63e:	89ab      	ldrh	r3, [r5, #12]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d907      	bls.n	800a654 <_fwalk_sglue+0x38>
 800a644:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a648:	3301      	adds	r3, #1
 800a64a:	d003      	beq.n	800a654 <_fwalk_sglue+0x38>
 800a64c:	4629      	mov	r1, r5
 800a64e:	4638      	mov	r0, r7
 800a650:	47c0      	blx	r8
 800a652:	4306      	orrs	r6, r0
 800a654:	3568      	adds	r5, #104	@ 0x68
 800a656:	e7e9      	b.n	800a62c <_fwalk_sglue+0x10>

0800a658 <siprintf>:
 800a658:	b40e      	push	{r1, r2, r3}
 800a65a:	b500      	push	{lr}
 800a65c:	b09c      	sub	sp, #112	@ 0x70
 800a65e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a660:	9002      	str	r0, [sp, #8]
 800a662:	9006      	str	r0, [sp, #24]
 800a664:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a668:	4809      	ldr	r0, [pc, #36]	@ (800a690 <siprintf+0x38>)
 800a66a:	9107      	str	r1, [sp, #28]
 800a66c:	9104      	str	r1, [sp, #16]
 800a66e:	4909      	ldr	r1, [pc, #36]	@ (800a694 <siprintf+0x3c>)
 800a670:	f853 2b04 	ldr.w	r2, [r3], #4
 800a674:	9105      	str	r1, [sp, #20]
 800a676:	6800      	ldr	r0, [r0, #0]
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	a902      	add	r1, sp, #8
 800a67c:	f001 fbfa 	bl	800be74 <_svfiprintf_r>
 800a680:	9b02      	ldr	r3, [sp, #8]
 800a682:	2200      	movs	r2, #0
 800a684:	701a      	strb	r2, [r3, #0]
 800a686:	b01c      	add	sp, #112	@ 0x70
 800a688:	f85d eb04 	ldr.w	lr, [sp], #4
 800a68c:	b003      	add	sp, #12
 800a68e:	4770      	bx	lr
 800a690:	20000018 	.word	0x20000018
 800a694:	ffff0208 	.word	0xffff0208

0800a698 <__sread>:
 800a698:	b510      	push	{r4, lr}
 800a69a:	460c      	mov	r4, r1
 800a69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a0:	f000 f86c 	bl	800a77c <_read_r>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	bfab      	itete	ge
 800a6a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a6aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a6ac:	181b      	addge	r3, r3, r0
 800a6ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a6b2:	bfac      	ite	ge
 800a6b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a6b6:	81a3      	strhlt	r3, [r4, #12]
 800a6b8:	bd10      	pop	{r4, pc}

0800a6ba <__swrite>:
 800a6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6be:	461f      	mov	r7, r3
 800a6c0:	898b      	ldrh	r3, [r1, #12]
 800a6c2:	05db      	lsls	r3, r3, #23
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	4616      	mov	r6, r2
 800a6ca:	d505      	bpl.n	800a6d8 <__swrite+0x1e>
 800a6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f000 f840 	bl	800a758 <_lseek_r>
 800a6d8:	89a3      	ldrh	r3, [r4, #12]
 800a6da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6e2:	81a3      	strh	r3, [r4, #12]
 800a6e4:	4632      	mov	r2, r6
 800a6e6:	463b      	mov	r3, r7
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ee:	f000 b857 	b.w	800a7a0 <_write_r>

0800a6f2 <__sseek>:
 800a6f2:	b510      	push	{r4, lr}
 800a6f4:	460c      	mov	r4, r1
 800a6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6fa:	f000 f82d 	bl	800a758 <_lseek_r>
 800a6fe:	1c43      	adds	r3, r0, #1
 800a700:	89a3      	ldrh	r3, [r4, #12]
 800a702:	bf15      	itete	ne
 800a704:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a706:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a70a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a70e:	81a3      	strheq	r3, [r4, #12]
 800a710:	bf18      	it	ne
 800a712:	81a3      	strhne	r3, [r4, #12]
 800a714:	bd10      	pop	{r4, pc}

0800a716 <__sclose>:
 800a716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a71a:	f000 b80d 	b.w	800a738 <_close_r>

0800a71e <memset>:
 800a71e:	4402      	add	r2, r0
 800a720:	4603      	mov	r3, r0
 800a722:	4293      	cmp	r3, r2
 800a724:	d100      	bne.n	800a728 <memset+0xa>
 800a726:	4770      	bx	lr
 800a728:	f803 1b01 	strb.w	r1, [r3], #1
 800a72c:	e7f9      	b.n	800a722 <memset+0x4>
	...

0800a730 <_localeconv_r>:
 800a730:	4800      	ldr	r0, [pc, #0]	@ (800a734 <_localeconv_r+0x4>)
 800a732:	4770      	bx	lr
 800a734:	20000158 	.word	0x20000158

0800a738 <_close_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	4d06      	ldr	r5, [pc, #24]	@ (800a754 <_close_r+0x1c>)
 800a73c:	2300      	movs	r3, #0
 800a73e:	4604      	mov	r4, r0
 800a740:	4608      	mov	r0, r1
 800a742:	602b      	str	r3, [r5, #0]
 800a744:	f7f8 fa8c 	bl	8002c60 <_close>
 800a748:	1c43      	adds	r3, r0, #1
 800a74a:	d102      	bne.n	800a752 <_close_r+0x1a>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	b103      	cbz	r3, 800a752 <_close_r+0x1a>
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	bd38      	pop	{r3, r4, r5, pc}
 800a754:	200008ec 	.word	0x200008ec

0800a758 <_lseek_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4d07      	ldr	r5, [pc, #28]	@ (800a778 <_lseek_r+0x20>)
 800a75c:	4604      	mov	r4, r0
 800a75e:	4608      	mov	r0, r1
 800a760:	4611      	mov	r1, r2
 800a762:	2200      	movs	r2, #0
 800a764:	602a      	str	r2, [r5, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	f7f8 faa1 	bl	8002cae <_lseek>
 800a76c:	1c43      	adds	r3, r0, #1
 800a76e:	d102      	bne.n	800a776 <_lseek_r+0x1e>
 800a770:	682b      	ldr	r3, [r5, #0]
 800a772:	b103      	cbz	r3, 800a776 <_lseek_r+0x1e>
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	bd38      	pop	{r3, r4, r5, pc}
 800a778:	200008ec 	.word	0x200008ec

0800a77c <_read_r>:
 800a77c:	b538      	push	{r3, r4, r5, lr}
 800a77e:	4d07      	ldr	r5, [pc, #28]	@ (800a79c <_read_r+0x20>)
 800a780:	4604      	mov	r4, r0
 800a782:	4608      	mov	r0, r1
 800a784:	4611      	mov	r1, r2
 800a786:	2200      	movs	r2, #0
 800a788:	602a      	str	r2, [r5, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	f7f8 fa2f 	bl	8002bee <_read>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d102      	bne.n	800a79a <_read_r+0x1e>
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	b103      	cbz	r3, 800a79a <_read_r+0x1e>
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	bd38      	pop	{r3, r4, r5, pc}
 800a79c:	200008ec 	.word	0x200008ec

0800a7a0 <_write_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4d07      	ldr	r5, [pc, #28]	@ (800a7c0 <_write_r+0x20>)
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	4608      	mov	r0, r1
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	602a      	str	r2, [r5, #0]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f7f8 fa3a 	bl	8002c28 <_write>
 800a7b4:	1c43      	adds	r3, r0, #1
 800a7b6:	d102      	bne.n	800a7be <_write_r+0x1e>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	b103      	cbz	r3, 800a7be <_write_r+0x1e>
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
 800a7c0:	200008ec 	.word	0x200008ec

0800a7c4 <__errno>:
 800a7c4:	4b01      	ldr	r3, [pc, #4]	@ (800a7cc <__errno+0x8>)
 800a7c6:	6818      	ldr	r0, [r3, #0]
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	20000018 	.word	0x20000018

0800a7d0 <__libc_init_array>:
 800a7d0:	b570      	push	{r4, r5, r6, lr}
 800a7d2:	4d0d      	ldr	r5, [pc, #52]	@ (800a808 <__libc_init_array+0x38>)
 800a7d4:	4c0d      	ldr	r4, [pc, #52]	@ (800a80c <__libc_init_array+0x3c>)
 800a7d6:	1b64      	subs	r4, r4, r5
 800a7d8:	10a4      	asrs	r4, r4, #2
 800a7da:	2600      	movs	r6, #0
 800a7dc:	42a6      	cmp	r6, r4
 800a7de:	d109      	bne.n	800a7f4 <__libc_init_array+0x24>
 800a7e0:	4d0b      	ldr	r5, [pc, #44]	@ (800a810 <__libc_init_array+0x40>)
 800a7e2:	4c0c      	ldr	r4, [pc, #48]	@ (800a814 <__libc_init_array+0x44>)
 800a7e4:	f002 f864 	bl	800c8b0 <_init>
 800a7e8:	1b64      	subs	r4, r4, r5
 800a7ea:	10a4      	asrs	r4, r4, #2
 800a7ec:	2600      	movs	r6, #0
 800a7ee:	42a6      	cmp	r6, r4
 800a7f0:	d105      	bne.n	800a7fe <__libc_init_array+0x2e>
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
 800a7f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7f8:	4798      	blx	r3
 800a7fa:	3601      	adds	r6, #1
 800a7fc:	e7ee      	b.n	800a7dc <__libc_init_array+0xc>
 800a7fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a802:	4798      	blx	r3
 800a804:	3601      	adds	r6, #1
 800a806:	e7f2      	b.n	800a7ee <__libc_init_array+0x1e>
 800a808:	0800cf08 	.word	0x0800cf08
 800a80c:	0800cf08 	.word	0x0800cf08
 800a810:	0800cf08 	.word	0x0800cf08
 800a814:	0800cf0c 	.word	0x0800cf0c

0800a818 <__retarget_lock_init_recursive>:
 800a818:	4770      	bx	lr

0800a81a <__retarget_lock_acquire_recursive>:
 800a81a:	4770      	bx	lr

0800a81c <__retarget_lock_release_recursive>:
 800a81c:	4770      	bx	lr

0800a81e <quorem>:
 800a81e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a822:	6903      	ldr	r3, [r0, #16]
 800a824:	690c      	ldr	r4, [r1, #16]
 800a826:	42a3      	cmp	r3, r4
 800a828:	4607      	mov	r7, r0
 800a82a:	db7e      	blt.n	800a92a <quorem+0x10c>
 800a82c:	3c01      	subs	r4, #1
 800a82e:	f101 0814 	add.w	r8, r1, #20
 800a832:	00a3      	lsls	r3, r4, #2
 800a834:	f100 0514 	add.w	r5, r0, #20
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a844:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a848:	3301      	adds	r3, #1
 800a84a:	429a      	cmp	r2, r3
 800a84c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a850:	fbb2 f6f3 	udiv	r6, r2, r3
 800a854:	d32e      	bcc.n	800a8b4 <quorem+0x96>
 800a856:	f04f 0a00 	mov.w	sl, #0
 800a85a:	46c4      	mov	ip, r8
 800a85c:	46ae      	mov	lr, r5
 800a85e:	46d3      	mov	fp, sl
 800a860:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a864:	b298      	uxth	r0, r3
 800a866:	fb06 a000 	mla	r0, r6, r0, sl
 800a86a:	0c02      	lsrs	r2, r0, #16
 800a86c:	0c1b      	lsrs	r3, r3, #16
 800a86e:	fb06 2303 	mla	r3, r6, r3, r2
 800a872:	f8de 2000 	ldr.w	r2, [lr]
 800a876:	b280      	uxth	r0, r0
 800a878:	b292      	uxth	r2, r2
 800a87a:	1a12      	subs	r2, r2, r0
 800a87c:	445a      	add	r2, fp
 800a87e:	f8de 0000 	ldr.w	r0, [lr]
 800a882:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a886:	b29b      	uxth	r3, r3
 800a888:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a88c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a890:	b292      	uxth	r2, r2
 800a892:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a896:	45e1      	cmp	r9, ip
 800a898:	f84e 2b04 	str.w	r2, [lr], #4
 800a89c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a8a0:	d2de      	bcs.n	800a860 <quorem+0x42>
 800a8a2:	9b00      	ldr	r3, [sp, #0]
 800a8a4:	58eb      	ldr	r3, [r5, r3]
 800a8a6:	b92b      	cbnz	r3, 800a8b4 <quorem+0x96>
 800a8a8:	9b01      	ldr	r3, [sp, #4]
 800a8aa:	3b04      	subs	r3, #4
 800a8ac:	429d      	cmp	r5, r3
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	d32f      	bcc.n	800a912 <quorem+0xf4>
 800a8b2:	613c      	str	r4, [r7, #16]
 800a8b4:	4638      	mov	r0, r7
 800a8b6:	f001 f979 	bl	800bbac <__mcmp>
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	db25      	blt.n	800a90a <quorem+0xec>
 800a8be:	4629      	mov	r1, r5
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8c6:	f8d1 c000 	ldr.w	ip, [r1]
 800a8ca:	fa1f fe82 	uxth.w	lr, r2
 800a8ce:	fa1f f38c 	uxth.w	r3, ip
 800a8d2:	eba3 030e 	sub.w	r3, r3, lr
 800a8d6:	4403      	add	r3, r0
 800a8d8:	0c12      	lsrs	r2, r2, #16
 800a8da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a8de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8e8:	45c1      	cmp	r9, r8
 800a8ea:	f841 3b04 	str.w	r3, [r1], #4
 800a8ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a8f2:	d2e6      	bcs.n	800a8c2 <quorem+0xa4>
 800a8f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8fc:	b922      	cbnz	r2, 800a908 <quorem+0xea>
 800a8fe:	3b04      	subs	r3, #4
 800a900:	429d      	cmp	r5, r3
 800a902:	461a      	mov	r2, r3
 800a904:	d30b      	bcc.n	800a91e <quorem+0x100>
 800a906:	613c      	str	r4, [r7, #16]
 800a908:	3601      	adds	r6, #1
 800a90a:	4630      	mov	r0, r6
 800a90c:	b003      	add	sp, #12
 800a90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a912:	6812      	ldr	r2, [r2, #0]
 800a914:	3b04      	subs	r3, #4
 800a916:	2a00      	cmp	r2, #0
 800a918:	d1cb      	bne.n	800a8b2 <quorem+0x94>
 800a91a:	3c01      	subs	r4, #1
 800a91c:	e7c6      	b.n	800a8ac <quorem+0x8e>
 800a91e:	6812      	ldr	r2, [r2, #0]
 800a920:	3b04      	subs	r3, #4
 800a922:	2a00      	cmp	r2, #0
 800a924:	d1ef      	bne.n	800a906 <quorem+0xe8>
 800a926:	3c01      	subs	r4, #1
 800a928:	e7ea      	b.n	800a900 <quorem+0xe2>
 800a92a:	2000      	movs	r0, #0
 800a92c:	e7ee      	b.n	800a90c <quorem+0xee>
	...

0800a930 <_dtoa_r>:
 800a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	69c7      	ldr	r7, [r0, #28]
 800a936:	b099      	sub	sp, #100	@ 0x64
 800a938:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a93c:	ec55 4b10 	vmov	r4, r5, d0
 800a940:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a942:	9109      	str	r1, [sp, #36]	@ 0x24
 800a944:	4683      	mov	fp, r0
 800a946:	920e      	str	r2, [sp, #56]	@ 0x38
 800a948:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a94a:	b97f      	cbnz	r7, 800a96c <_dtoa_r+0x3c>
 800a94c:	2010      	movs	r0, #16
 800a94e:	f000 fdfd 	bl	800b54c <malloc>
 800a952:	4602      	mov	r2, r0
 800a954:	f8cb 001c 	str.w	r0, [fp, #28]
 800a958:	b920      	cbnz	r0, 800a964 <_dtoa_r+0x34>
 800a95a:	4ba7      	ldr	r3, [pc, #668]	@ (800abf8 <_dtoa_r+0x2c8>)
 800a95c:	21ef      	movs	r1, #239	@ 0xef
 800a95e:	48a7      	ldr	r0, [pc, #668]	@ (800abfc <_dtoa_r+0x2cc>)
 800a960:	f001 fc68 	bl	800c234 <__assert_func>
 800a964:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a968:	6007      	str	r7, [r0, #0]
 800a96a:	60c7      	str	r7, [r0, #12]
 800a96c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a970:	6819      	ldr	r1, [r3, #0]
 800a972:	b159      	cbz	r1, 800a98c <_dtoa_r+0x5c>
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	604a      	str	r2, [r1, #4]
 800a978:	2301      	movs	r3, #1
 800a97a:	4093      	lsls	r3, r2
 800a97c:	608b      	str	r3, [r1, #8]
 800a97e:	4658      	mov	r0, fp
 800a980:	f000 feda 	bl	800b738 <_Bfree>
 800a984:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a988:	2200      	movs	r2, #0
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	1e2b      	subs	r3, r5, #0
 800a98e:	bfb9      	ittee	lt
 800a990:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a994:	9303      	strlt	r3, [sp, #12]
 800a996:	2300      	movge	r3, #0
 800a998:	6033      	strge	r3, [r6, #0]
 800a99a:	9f03      	ldr	r7, [sp, #12]
 800a99c:	4b98      	ldr	r3, [pc, #608]	@ (800ac00 <_dtoa_r+0x2d0>)
 800a99e:	bfbc      	itt	lt
 800a9a0:	2201      	movlt	r2, #1
 800a9a2:	6032      	strlt	r2, [r6, #0]
 800a9a4:	43bb      	bics	r3, r7
 800a9a6:	d112      	bne.n	800a9ce <_dtoa_r+0x9e>
 800a9a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a9aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a9ae:	6013      	str	r3, [r2, #0]
 800a9b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9b4:	4323      	orrs	r3, r4
 800a9b6:	f000 854d 	beq.w	800b454 <_dtoa_r+0xb24>
 800a9ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ac14 <_dtoa_r+0x2e4>
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 854f 	beq.w	800b464 <_dtoa_r+0xb34>
 800a9c6:	f10a 0303 	add.w	r3, sl, #3
 800a9ca:	f000 bd49 	b.w	800b460 <_dtoa_r+0xb30>
 800a9ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	ec51 0b17 	vmov	r0, r1, d7
 800a9d8:	2300      	movs	r3, #0
 800a9da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a9de:	f7f6 f87b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9e2:	4680      	mov	r8, r0
 800a9e4:	b158      	cbz	r0, 800a9fe <_dtoa_r+0xce>
 800a9e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	6013      	str	r3, [r2, #0]
 800a9ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9ee:	b113      	cbz	r3, 800a9f6 <_dtoa_r+0xc6>
 800a9f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a9f2:	4b84      	ldr	r3, [pc, #528]	@ (800ac04 <_dtoa_r+0x2d4>)
 800a9f4:	6013      	str	r3, [r2, #0]
 800a9f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ac18 <_dtoa_r+0x2e8>
 800a9fa:	f000 bd33 	b.w	800b464 <_dtoa_r+0xb34>
 800a9fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aa02:	aa16      	add	r2, sp, #88	@ 0x58
 800aa04:	a917      	add	r1, sp, #92	@ 0x5c
 800aa06:	4658      	mov	r0, fp
 800aa08:	f001 f980 	bl	800bd0c <__d2b>
 800aa0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aa10:	4681      	mov	r9, r0
 800aa12:	2e00      	cmp	r6, #0
 800aa14:	d077      	beq.n	800ab06 <_dtoa_r+0x1d6>
 800aa16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aa1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aa28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aa2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aa30:	4619      	mov	r1, r3
 800aa32:	2200      	movs	r2, #0
 800aa34:	4b74      	ldr	r3, [pc, #464]	@ (800ac08 <_dtoa_r+0x2d8>)
 800aa36:	f7f5 fc2f 	bl	8000298 <__aeabi_dsub>
 800aa3a:	a369      	add	r3, pc, #420	@ (adr r3, 800abe0 <_dtoa_r+0x2b0>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f7f5 fde2 	bl	8000608 <__aeabi_dmul>
 800aa44:	a368      	add	r3, pc, #416	@ (adr r3, 800abe8 <_dtoa_r+0x2b8>)
 800aa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4a:	f7f5 fc27 	bl	800029c <__adddf3>
 800aa4e:	4604      	mov	r4, r0
 800aa50:	4630      	mov	r0, r6
 800aa52:	460d      	mov	r5, r1
 800aa54:	f7f5 fd6e 	bl	8000534 <__aeabi_i2d>
 800aa58:	a365      	add	r3, pc, #404	@ (adr r3, 800abf0 <_dtoa_r+0x2c0>)
 800aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5e:	f7f5 fdd3 	bl	8000608 <__aeabi_dmul>
 800aa62:	4602      	mov	r2, r0
 800aa64:	460b      	mov	r3, r1
 800aa66:	4620      	mov	r0, r4
 800aa68:	4629      	mov	r1, r5
 800aa6a:	f7f5 fc17 	bl	800029c <__adddf3>
 800aa6e:	4604      	mov	r4, r0
 800aa70:	460d      	mov	r5, r1
 800aa72:	f7f6 f879 	bl	8000b68 <__aeabi_d2iz>
 800aa76:	2200      	movs	r2, #0
 800aa78:	4607      	mov	r7, r0
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	4629      	mov	r1, r5
 800aa80:	f7f6 f834 	bl	8000aec <__aeabi_dcmplt>
 800aa84:	b140      	cbz	r0, 800aa98 <_dtoa_r+0x168>
 800aa86:	4638      	mov	r0, r7
 800aa88:	f7f5 fd54 	bl	8000534 <__aeabi_i2d>
 800aa8c:	4622      	mov	r2, r4
 800aa8e:	462b      	mov	r3, r5
 800aa90:	f7f6 f822 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa94:	b900      	cbnz	r0, 800aa98 <_dtoa_r+0x168>
 800aa96:	3f01      	subs	r7, #1
 800aa98:	2f16      	cmp	r7, #22
 800aa9a:	d851      	bhi.n	800ab40 <_dtoa_r+0x210>
 800aa9c:	4b5b      	ldr	r3, [pc, #364]	@ (800ac0c <_dtoa_r+0x2dc>)
 800aa9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaaa:	f7f6 f81f 	bl	8000aec <__aeabi_dcmplt>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d048      	beq.n	800ab44 <_dtoa_r+0x214>
 800aab2:	3f01      	subs	r7, #1
 800aab4:	2300      	movs	r3, #0
 800aab6:	9312      	str	r3, [sp, #72]	@ 0x48
 800aab8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aaba:	1b9b      	subs	r3, r3, r6
 800aabc:	1e5a      	subs	r2, r3, #1
 800aabe:	bf44      	itt	mi
 800aac0:	f1c3 0801 	rsbmi	r8, r3, #1
 800aac4:	2300      	movmi	r3, #0
 800aac6:	9208      	str	r2, [sp, #32]
 800aac8:	bf54      	ite	pl
 800aaca:	f04f 0800 	movpl.w	r8, #0
 800aace:	9308      	strmi	r3, [sp, #32]
 800aad0:	2f00      	cmp	r7, #0
 800aad2:	db39      	blt.n	800ab48 <_dtoa_r+0x218>
 800aad4:	9b08      	ldr	r3, [sp, #32]
 800aad6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800aad8:	443b      	add	r3, r7
 800aada:	9308      	str	r3, [sp, #32]
 800aadc:	2300      	movs	r3, #0
 800aade:	930a      	str	r3, [sp, #40]	@ 0x28
 800aae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aae2:	2b09      	cmp	r3, #9
 800aae4:	d864      	bhi.n	800abb0 <_dtoa_r+0x280>
 800aae6:	2b05      	cmp	r3, #5
 800aae8:	bfc4      	itt	gt
 800aaea:	3b04      	subgt	r3, #4
 800aaec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800aaee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf0:	f1a3 0302 	sub.w	r3, r3, #2
 800aaf4:	bfcc      	ite	gt
 800aaf6:	2400      	movgt	r4, #0
 800aaf8:	2401      	movle	r4, #1
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d863      	bhi.n	800abc6 <_dtoa_r+0x296>
 800aafe:	e8df f003 	tbb	[pc, r3]
 800ab02:	372a      	.short	0x372a
 800ab04:	5535      	.short	0x5535
 800ab06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ab0a:	441e      	add	r6, r3
 800ab0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ab10:	2b20      	cmp	r3, #32
 800ab12:	bfc1      	itttt	gt
 800ab14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ab18:	409f      	lslgt	r7, r3
 800ab1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ab1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ab22:	bfd6      	itet	le
 800ab24:	f1c3 0320 	rsble	r3, r3, #32
 800ab28:	ea47 0003 	orrgt.w	r0, r7, r3
 800ab2c:	fa04 f003 	lslle.w	r0, r4, r3
 800ab30:	f7f5 fcf0 	bl	8000514 <__aeabi_ui2d>
 800ab34:	2201      	movs	r2, #1
 800ab36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ab3a:	3e01      	subs	r6, #1
 800ab3c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ab3e:	e777      	b.n	800aa30 <_dtoa_r+0x100>
 800ab40:	2301      	movs	r3, #1
 800ab42:	e7b8      	b.n	800aab6 <_dtoa_r+0x186>
 800ab44:	9012      	str	r0, [sp, #72]	@ 0x48
 800ab46:	e7b7      	b.n	800aab8 <_dtoa_r+0x188>
 800ab48:	427b      	negs	r3, r7
 800ab4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	eba8 0807 	sub.w	r8, r8, r7
 800ab52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab54:	e7c4      	b.n	800aae0 <_dtoa_r+0x1b0>
 800ab56:	2300      	movs	r3, #0
 800ab58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	dc35      	bgt.n	800abcc <_dtoa_r+0x29c>
 800ab60:	2301      	movs	r3, #1
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	9307      	str	r3, [sp, #28]
 800ab66:	461a      	mov	r2, r3
 800ab68:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab6a:	e00b      	b.n	800ab84 <_dtoa_r+0x254>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e7f3      	b.n	800ab58 <_dtoa_r+0x228>
 800ab70:	2300      	movs	r3, #0
 800ab72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab76:	18fb      	adds	r3, r7, r3
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	9307      	str	r3, [sp, #28]
 800ab80:	bfb8      	it	lt
 800ab82:	2301      	movlt	r3, #1
 800ab84:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ab88:	2100      	movs	r1, #0
 800ab8a:	2204      	movs	r2, #4
 800ab8c:	f102 0514 	add.w	r5, r2, #20
 800ab90:	429d      	cmp	r5, r3
 800ab92:	d91f      	bls.n	800abd4 <_dtoa_r+0x2a4>
 800ab94:	6041      	str	r1, [r0, #4]
 800ab96:	4658      	mov	r0, fp
 800ab98:	f000 fd8e 	bl	800b6b8 <_Balloc>
 800ab9c:	4682      	mov	sl, r0
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d13c      	bne.n	800ac1c <_dtoa_r+0x2ec>
 800aba2:	4b1b      	ldr	r3, [pc, #108]	@ (800ac10 <_dtoa_r+0x2e0>)
 800aba4:	4602      	mov	r2, r0
 800aba6:	f240 11af 	movw	r1, #431	@ 0x1af
 800abaa:	e6d8      	b.n	800a95e <_dtoa_r+0x2e>
 800abac:	2301      	movs	r3, #1
 800abae:	e7e0      	b.n	800ab72 <_dtoa_r+0x242>
 800abb0:	2401      	movs	r4, #1
 800abb2:	2300      	movs	r3, #0
 800abb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800abb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800abb8:	f04f 33ff 	mov.w	r3, #4294967295
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	9307      	str	r3, [sp, #28]
 800abc0:	2200      	movs	r2, #0
 800abc2:	2312      	movs	r3, #18
 800abc4:	e7d0      	b.n	800ab68 <_dtoa_r+0x238>
 800abc6:	2301      	movs	r3, #1
 800abc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abca:	e7f5      	b.n	800abb8 <_dtoa_r+0x288>
 800abcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	9307      	str	r3, [sp, #28]
 800abd2:	e7d7      	b.n	800ab84 <_dtoa_r+0x254>
 800abd4:	3101      	adds	r1, #1
 800abd6:	0052      	lsls	r2, r2, #1
 800abd8:	e7d8      	b.n	800ab8c <_dtoa_r+0x25c>
 800abda:	bf00      	nop
 800abdc:	f3af 8000 	nop.w
 800abe0:	636f4361 	.word	0x636f4361
 800abe4:	3fd287a7 	.word	0x3fd287a7
 800abe8:	8b60c8b3 	.word	0x8b60c8b3
 800abec:	3fc68a28 	.word	0x3fc68a28
 800abf0:	509f79fb 	.word	0x509f79fb
 800abf4:	3fd34413 	.word	0x3fd34413
 800abf8:	0800cbcd 	.word	0x0800cbcd
 800abfc:	0800cbe4 	.word	0x0800cbe4
 800ac00:	7ff00000 	.word	0x7ff00000
 800ac04:	0800cb9d 	.word	0x0800cb9d
 800ac08:	3ff80000 	.word	0x3ff80000
 800ac0c:	0800cce0 	.word	0x0800cce0
 800ac10:	0800cc3c 	.word	0x0800cc3c
 800ac14:	0800cbc9 	.word	0x0800cbc9
 800ac18:	0800cb9c 	.word	0x0800cb9c
 800ac1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac20:	6018      	str	r0, [r3, #0]
 800ac22:	9b07      	ldr	r3, [sp, #28]
 800ac24:	2b0e      	cmp	r3, #14
 800ac26:	f200 80a4 	bhi.w	800ad72 <_dtoa_r+0x442>
 800ac2a:	2c00      	cmp	r4, #0
 800ac2c:	f000 80a1 	beq.w	800ad72 <_dtoa_r+0x442>
 800ac30:	2f00      	cmp	r7, #0
 800ac32:	dd33      	ble.n	800ac9c <_dtoa_r+0x36c>
 800ac34:	4bad      	ldr	r3, [pc, #692]	@ (800aeec <_dtoa_r+0x5bc>)
 800ac36:	f007 020f 	and.w	r2, r7, #15
 800ac3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac3e:	ed93 7b00 	vldr	d7, [r3]
 800ac42:	05f8      	lsls	r0, r7, #23
 800ac44:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ac48:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ac4c:	d516      	bpl.n	800ac7c <_dtoa_r+0x34c>
 800ac4e:	4ba8      	ldr	r3, [pc, #672]	@ (800aef0 <_dtoa_r+0x5c0>)
 800ac50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac58:	f7f5 fe00 	bl	800085c <__aeabi_ddiv>
 800ac5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac60:	f004 040f 	and.w	r4, r4, #15
 800ac64:	2603      	movs	r6, #3
 800ac66:	4da2      	ldr	r5, [pc, #648]	@ (800aef0 <_dtoa_r+0x5c0>)
 800ac68:	b954      	cbnz	r4, 800ac80 <_dtoa_r+0x350>
 800ac6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac72:	f7f5 fdf3 	bl	800085c <__aeabi_ddiv>
 800ac76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac7a:	e028      	b.n	800acce <_dtoa_r+0x39e>
 800ac7c:	2602      	movs	r6, #2
 800ac7e:	e7f2      	b.n	800ac66 <_dtoa_r+0x336>
 800ac80:	07e1      	lsls	r1, r4, #31
 800ac82:	d508      	bpl.n	800ac96 <_dtoa_r+0x366>
 800ac84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac8c:	f7f5 fcbc 	bl	8000608 <__aeabi_dmul>
 800ac90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac94:	3601      	adds	r6, #1
 800ac96:	1064      	asrs	r4, r4, #1
 800ac98:	3508      	adds	r5, #8
 800ac9a:	e7e5      	b.n	800ac68 <_dtoa_r+0x338>
 800ac9c:	f000 80d2 	beq.w	800ae44 <_dtoa_r+0x514>
 800aca0:	427c      	negs	r4, r7
 800aca2:	4b92      	ldr	r3, [pc, #584]	@ (800aeec <_dtoa_r+0x5bc>)
 800aca4:	4d92      	ldr	r5, [pc, #584]	@ (800aef0 <_dtoa_r+0x5c0>)
 800aca6:	f004 020f 	and.w	r2, r4, #15
 800acaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acb6:	f7f5 fca7 	bl	8000608 <__aeabi_dmul>
 800acba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acbe:	1124      	asrs	r4, r4, #4
 800acc0:	2300      	movs	r3, #0
 800acc2:	2602      	movs	r6, #2
 800acc4:	2c00      	cmp	r4, #0
 800acc6:	f040 80b2 	bne.w	800ae2e <_dtoa_r+0x4fe>
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1d3      	bne.n	800ac76 <_dtoa_r+0x346>
 800acce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800acd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 80b7 	beq.w	800ae48 <_dtoa_r+0x518>
 800acda:	4b86      	ldr	r3, [pc, #536]	@ (800aef4 <_dtoa_r+0x5c4>)
 800acdc:	2200      	movs	r2, #0
 800acde:	4620      	mov	r0, r4
 800ace0:	4629      	mov	r1, r5
 800ace2:	f7f5 ff03 	bl	8000aec <__aeabi_dcmplt>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f000 80ae 	beq.w	800ae48 <_dtoa_r+0x518>
 800acec:	9b07      	ldr	r3, [sp, #28]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 80aa 	beq.w	800ae48 <_dtoa_r+0x518>
 800acf4:	9b00      	ldr	r3, [sp, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	dd37      	ble.n	800ad6a <_dtoa_r+0x43a>
 800acfa:	1e7b      	subs	r3, r7, #1
 800acfc:	9304      	str	r3, [sp, #16]
 800acfe:	4620      	mov	r0, r4
 800ad00:	4b7d      	ldr	r3, [pc, #500]	@ (800aef8 <_dtoa_r+0x5c8>)
 800ad02:	2200      	movs	r2, #0
 800ad04:	4629      	mov	r1, r5
 800ad06:	f7f5 fc7f 	bl	8000608 <__aeabi_dmul>
 800ad0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad0e:	9c00      	ldr	r4, [sp, #0]
 800ad10:	3601      	adds	r6, #1
 800ad12:	4630      	mov	r0, r6
 800ad14:	f7f5 fc0e 	bl	8000534 <__aeabi_i2d>
 800ad18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad1c:	f7f5 fc74 	bl	8000608 <__aeabi_dmul>
 800ad20:	4b76      	ldr	r3, [pc, #472]	@ (800aefc <_dtoa_r+0x5cc>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	f7f5 faba 	bl	800029c <__adddf3>
 800ad28:	4605      	mov	r5, r0
 800ad2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ad2e:	2c00      	cmp	r4, #0
 800ad30:	f040 808d 	bne.w	800ae4e <_dtoa_r+0x51e>
 800ad34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad38:	4b71      	ldr	r3, [pc, #452]	@ (800af00 <_dtoa_r+0x5d0>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f7f5 faac 	bl	8000298 <__aeabi_dsub>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad48:	462a      	mov	r2, r5
 800ad4a:	4633      	mov	r3, r6
 800ad4c:	f7f5 feec 	bl	8000b28 <__aeabi_dcmpgt>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	f040 828b 	bne.w	800b26c <_dtoa_r+0x93c>
 800ad56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad5a:	462a      	mov	r2, r5
 800ad5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ad60:	f7f5 fec4 	bl	8000aec <__aeabi_dcmplt>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	f040 8128 	bne.w	800afba <_dtoa_r+0x68a>
 800ad6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ad6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ad72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f2c0 815a 	blt.w	800b02e <_dtoa_r+0x6fe>
 800ad7a:	2f0e      	cmp	r7, #14
 800ad7c:	f300 8157 	bgt.w	800b02e <_dtoa_r+0x6fe>
 800ad80:	4b5a      	ldr	r3, [pc, #360]	@ (800aeec <_dtoa_r+0x5bc>)
 800ad82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad86:	ed93 7b00 	vldr	d7, [r3]
 800ad8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	ed8d 7b00 	vstr	d7, [sp]
 800ad92:	da03      	bge.n	800ad9c <_dtoa_r+0x46c>
 800ad94:	9b07      	ldr	r3, [sp, #28]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f340 8101 	ble.w	800af9e <_dtoa_r+0x66e>
 800ad9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ada0:	4656      	mov	r6, sl
 800ada2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7f5 fd57 	bl	800085c <__aeabi_ddiv>
 800adae:	f7f5 fedb 	bl	8000b68 <__aeabi_d2iz>
 800adb2:	4680      	mov	r8, r0
 800adb4:	f7f5 fbbe 	bl	8000534 <__aeabi_i2d>
 800adb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adbc:	f7f5 fc24 	bl	8000608 <__aeabi_dmul>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4620      	mov	r0, r4
 800adc6:	4629      	mov	r1, r5
 800adc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800adcc:	f7f5 fa64 	bl	8000298 <__aeabi_dsub>
 800add0:	f806 4b01 	strb.w	r4, [r6], #1
 800add4:	9d07      	ldr	r5, [sp, #28]
 800add6:	eba6 040a 	sub.w	r4, r6, sl
 800adda:	42a5      	cmp	r5, r4
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	f040 8117 	bne.w	800b012 <_dtoa_r+0x6e2>
 800ade4:	f7f5 fa5a 	bl	800029c <__adddf3>
 800ade8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adec:	4604      	mov	r4, r0
 800adee:	460d      	mov	r5, r1
 800adf0:	f7f5 fe9a 	bl	8000b28 <__aeabi_dcmpgt>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	f040 80f9 	bne.w	800afec <_dtoa_r+0x6bc>
 800adfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adfe:	4620      	mov	r0, r4
 800ae00:	4629      	mov	r1, r5
 800ae02:	f7f5 fe69 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae06:	b118      	cbz	r0, 800ae10 <_dtoa_r+0x4e0>
 800ae08:	f018 0f01 	tst.w	r8, #1
 800ae0c:	f040 80ee 	bne.w	800afec <_dtoa_r+0x6bc>
 800ae10:	4649      	mov	r1, r9
 800ae12:	4658      	mov	r0, fp
 800ae14:	f000 fc90 	bl	800b738 <_Bfree>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	7033      	strb	r3, [r6, #0]
 800ae1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae1e:	3701      	adds	r7, #1
 800ae20:	601f      	str	r7, [r3, #0]
 800ae22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 831d 	beq.w	800b464 <_dtoa_r+0xb34>
 800ae2a:	601e      	str	r6, [r3, #0]
 800ae2c:	e31a      	b.n	800b464 <_dtoa_r+0xb34>
 800ae2e:	07e2      	lsls	r2, r4, #31
 800ae30:	d505      	bpl.n	800ae3e <_dtoa_r+0x50e>
 800ae32:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae36:	f7f5 fbe7 	bl	8000608 <__aeabi_dmul>
 800ae3a:	3601      	adds	r6, #1
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	1064      	asrs	r4, r4, #1
 800ae40:	3508      	adds	r5, #8
 800ae42:	e73f      	b.n	800acc4 <_dtoa_r+0x394>
 800ae44:	2602      	movs	r6, #2
 800ae46:	e742      	b.n	800acce <_dtoa_r+0x39e>
 800ae48:	9c07      	ldr	r4, [sp, #28]
 800ae4a:	9704      	str	r7, [sp, #16]
 800ae4c:	e761      	b.n	800ad12 <_dtoa_r+0x3e2>
 800ae4e:	4b27      	ldr	r3, [pc, #156]	@ (800aeec <_dtoa_r+0x5bc>)
 800ae50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae5a:	4454      	add	r4, sl
 800ae5c:	2900      	cmp	r1, #0
 800ae5e:	d053      	beq.n	800af08 <_dtoa_r+0x5d8>
 800ae60:	4928      	ldr	r1, [pc, #160]	@ (800af04 <_dtoa_r+0x5d4>)
 800ae62:	2000      	movs	r0, #0
 800ae64:	f7f5 fcfa 	bl	800085c <__aeabi_ddiv>
 800ae68:	4633      	mov	r3, r6
 800ae6a:	462a      	mov	r2, r5
 800ae6c:	f7f5 fa14 	bl	8000298 <__aeabi_dsub>
 800ae70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae74:	4656      	mov	r6, sl
 800ae76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae7a:	f7f5 fe75 	bl	8000b68 <__aeabi_d2iz>
 800ae7e:	4605      	mov	r5, r0
 800ae80:	f7f5 fb58 	bl	8000534 <__aeabi_i2d>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae8c:	f7f5 fa04 	bl	8000298 <__aeabi_dsub>
 800ae90:	3530      	adds	r5, #48	@ 0x30
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae9a:	f806 5b01 	strb.w	r5, [r6], #1
 800ae9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aea2:	f7f5 fe23 	bl	8000aec <__aeabi_dcmplt>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d171      	bne.n	800af8e <_dtoa_r+0x65e>
 800aeaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeae:	4911      	ldr	r1, [pc, #68]	@ (800aef4 <_dtoa_r+0x5c4>)
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	f7f5 f9f1 	bl	8000298 <__aeabi_dsub>
 800aeb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aeba:	f7f5 fe17 	bl	8000aec <__aeabi_dcmplt>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f040 8095 	bne.w	800afee <_dtoa_r+0x6be>
 800aec4:	42a6      	cmp	r6, r4
 800aec6:	f43f af50 	beq.w	800ad6a <_dtoa_r+0x43a>
 800aeca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aece:	4b0a      	ldr	r3, [pc, #40]	@ (800aef8 <_dtoa_r+0x5c8>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	f7f5 fb99 	bl	8000608 <__aeabi_dmul>
 800aed6:	4b08      	ldr	r3, [pc, #32]	@ (800aef8 <_dtoa_r+0x5c8>)
 800aed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aedc:	2200      	movs	r2, #0
 800aede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aee2:	f7f5 fb91 	bl	8000608 <__aeabi_dmul>
 800aee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aeea:	e7c4      	b.n	800ae76 <_dtoa_r+0x546>
 800aeec:	0800cce0 	.word	0x0800cce0
 800aef0:	0800ccb8 	.word	0x0800ccb8
 800aef4:	3ff00000 	.word	0x3ff00000
 800aef8:	40240000 	.word	0x40240000
 800aefc:	401c0000 	.word	0x401c0000
 800af00:	40140000 	.word	0x40140000
 800af04:	3fe00000 	.word	0x3fe00000
 800af08:	4631      	mov	r1, r6
 800af0a:	4628      	mov	r0, r5
 800af0c:	f7f5 fb7c 	bl	8000608 <__aeabi_dmul>
 800af10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af14:	9415      	str	r4, [sp, #84]	@ 0x54
 800af16:	4656      	mov	r6, sl
 800af18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af1c:	f7f5 fe24 	bl	8000b68 <__aeabi_d2iz>
 800af20:	4605      	mov	r5, r0
 800af22:	f7f5 fb07 	bl	8000534 <__aeabi_i2d>
 800af26:	4602      	mov	r2, r0
 800af28:	460b      	mov	r3, r1
 800af2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af2e:	f7f5 f9b3 	bl	8000298 <__aeabi_dsub>
 800af32:	3530      	adds	r5, #48	@ 0x30
 800af34:	f806 5b01 	strb.w	r5, [r6], #1
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	42a6      	cmp	r6, r4
 800af3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af42:	f04f 0200 	mov.w	r2, #0
 800af46:	d124      	bne.n	800af92 <_dtoa_r+0x662>
 800af48:	4bac      	ldr	r3, [pc, #688]	@ (800b1fc <_dtoa_r+0x8cc>)
 800af4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af4e:	f7f5 f9a5 	bl	800029c <__adddf3>
 800af52:	4602      	mov	r2, r0
 800af54:	460b      	mov	r3, r1
 800af56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af5a:	f7f5 fde5 	bl	8000b28 <__aeabi_dcmpgt>
 800af5e:	2800      	cmp	r0, #0
 800af60:	d145      	bne.n	800afee <_dtoa_r+0x6be>
 800af62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af66:	49a5      	ldr	r1, [pc, #660]	@ (800b1fc <_dtoa_r+0x8cc>)
 800af68:	2000      	movs	r0, #0
 800af6a:	f7f5 f995 	bl	8000298 <__aeabi_dsub>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af76:	f7f5 fdb9 	bl	8000aec <__aeabi_dcmplt>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	f43f aef5 	beq.w	800ad6a <_dtoa_r+0x43a>
 800af80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800af82:	1e73      	subs	r3, r6, #1
 800af84:	9315      	str	r3, [sp, #84]	@ 0x54
 800af86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af8a:	2b30      	cmp	r3, #48	@ 0x30
 800af8c:	d0f8      	beq.n	800af80 <_dtoa_r+0x650>
 800af8e:	9f04      	ldr	r7, [sp, #16]
 800af90:	e73e      	b.n	800ae10 <_dtoa_r+0x4e0>
 800af92:	4b9b      	ldr	r3, [pc, #620]	@ (800b200 <_dtoa_r+0x8d0>)
 800af94:	f7f5 fb38 	bl	8000608 <__aeabi_dmul>
 800af98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af9c:	e7bc      	b.n	800af18 <_dtoa_r+0x5e8>
 800af9e:	d10c      	bne.n	800afba <_dtoa_r+0x68a>
 800afa0:	4b98      	ldr	r3, [pc, #608]	@ (800b204 <_dtoa_r+0x8d4>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afa8:	f7f5 fb2e 	bl	8000608 <__aeabi_dmul>
 800afac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afb0:	f7f5 fdb0 	bl	8000b14 <__aeabi_dcmpge>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	f000 8157 	beq.w	800b268 <_dtoa_r+0x938>
 800afba:	2400      	movs	r4, #0
 800afbc:	4625      	mov	r5, r4
 800afbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afc0:	43db      	mvns	r3, r3
 800afc2:	9304      	str	r3, [sp, #16]
 800afc4:	4656      	mov	r6, sl
 800afc6:	2700      	movs	r7, #0
 800afc8:	4621      	mov	r1, r4
 800afca:	4658      	mov	r0, fp
 800afcc:	f000 fbb4 	bl	800b738 <_Bfree>
 800afd0:	2d00      	cmp	r5, #0
 800afd2:	d0dc      	beq.n	800af8e <_dtoa_r+0x65e>
 800afd4:	b12f      	cbz	r7, 800afe2 <_dtoa_r+0x6b2>
 800afd6:	42af      	cmp	r7, r5
 800afd8:	d003      	beq.n	800afe2 <_dtoa_r+0x6b2>
 800afda:	4639      	mov	r1, r7
 800afdc:	4658      	mov	r0, fp
 800afde:	f000 fbab 	bl	800b738 <_Bfree>
 800afe2:	4629      	mov	r1, r5
 800afe4:	4658      	mov	r0, fp
 800afe6:	f000 fba7 	bl	800b738 <_Bfree>
 800afea:	e7d0      	b.n	800af8e <_dtoa_r+0x65e>
 800afec:	9704      	str	r7, [sp, #16]
 800afee:	4633      	mov	r3, r6
 800aff0:	461e      	mov	r6, r3
 800aff2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aff6:	2a39      	cmp	r2, #57	@ 0x39
 800aff8:	d107      	bne.n	800b00a <_dtoa_r+0x6da>
 800affa:	459a      	cmp	sl, r3
 800affc:	d1f8      	bne.n	800aff0 <_dtoa_r+0x6c0>
 800affe:	9a04      	ldr	r2, [sp, #16]
 800b000:	3201      	adds	r2, #1
 800b002:	9204      	str	r2, [sp, #16]
 800b004:	2230      	movs	r2, #48	@ 0x30
 800b006:	f88a 2000 	strb.w	r2, [sl]
 800b00a:	781a      	ldrb	r2, [r3, #0]
 800b00c:	3201      	adds	r2, #1
 800b00e:	701a      	strb	r2, [r3, #0]
 800b010:	e7bd      	b.n	800af8e <_dtoa_r+0x65e>
 800b012:	4b7b      	ldr	r3, [pc, #492]	@ (800b200 <_dtoa_r+0x8d0>)
 800b014:	2200      	movs	r2, #0
 800b016:	f7f5 faf7 	bl	8000608 <__aeabi_dmul>
 800b01a:	2200      	movs	r2, #0
 800b01c:	2300      	movs	r3, #0
 800b01e:	4604      	mov	r4, r0
 800b020:	460d      	mov	r5, r1
 800b022:	f7f5 fd59 	bl	8000ad8 <__aeabi_dcmpeq>
 800b026:	2800      	cmp	r0, #0
 800b028:	f43f aebb 	beq.w	800ada2 <_dtoa_r+0x472>
 800b02c:	e6f0      	b.n	800ae10 <_dtoa_r+0x4e0>
 800b02e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b030:	2a00      	cmp	r2, #0
 800b032:	f000 80db 	beq.w	800b1ec <_dtoa_r+0x8bc>
 800b036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b038:	2a01      	cmp	r2, #1
 800b03a:	f300 80bf 	bgt.w	800b1bc <_dtoa_r+0x88c>
 800b03e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b040:	2a00      	cmp	r2, #0
 800b042:	f000 80b7 	beq.w	800b1b4 <_dtoa_r+0x884>
 800b046:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b04a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b04c:	4646      	mov	r6, r8
 800b04e:	9a08      	ldr	r2, [sp, #32]
 800b050:	2101      	movs	r1, #1
 800b052:	441a      	add	r2, r3
 800b054:	4658      	mov	r0, fp
 800b056:	4498      	add	r8, r3
 800b058:	9208      	str	r2, [sp, #32]
 800b05a:	f000 fc21 	bl	800b8a0 <__i2b>
 800b05e:	4605      	mov	r5, r0
 800b060:	b15e      	cbz	r6, 800b07a <_dtoa_r+0x74a>
 800b062:	9b08      	ldr	r3, [sp, #32]
 800b064:	2b00      	cmp	r3, #0
 800b066:	dd08      	ble.n	800b07a <_dtoa_r+0x74a>
 800b068:	42b3      	cmp	r3, r6
 800b06a:	9a08      	ldr	r2, [sp, #32]
 800b06c:	bfa8      	it	ge
 800b06e:	4633      	movge	r3, r6
 800b070:	eba8 0803 	sub.w	r8, r8, r3
 800b074:	1af6      	subs	r6, r6, r3
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	9308      	str	r3, [sp, #32]
 800b07a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b07c:	b1f3      	cbz	r3, 800b0bc <_dtoa_r+0x78c>
 800b07e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 80b7 	beq.w	800b1f4 <_dtoa_r+0x8c4>
 800b086:	b18c      	cbz	r4, 800b0ac <_dtoa_r+0x77c>
 800b088:	4629      	mov	r1, r5
 800b08a:	4622      	mov	r2, r4
 800b08c:	4658      	mov	r0, fp
 800b08e:	f000 fcc7 	bl	800ba20 <__pow5mult>
 800b092:	464a      	mov	r2, r9
 800b094:	4601      	mov	r1, r0
 800b096:	4605      	mov	r5, r0
 800b098:	4658      	mov	r0, fp
 800b09a:	f000 fc17 	bl	800b8cc <__multiply>
 800b09e:	4649      	mov	r1, r9
 800b0a0:	9004      	str	r0, [sp, #16]
 800b0a2:	4658      	mov	r0, fp
 800b0a4:	f000 fb48 	bl	800b738 <_Bfree>
 800b0a8:	9b04      	ldr	r3, [sp, #16]
 800b0aa:	4699      	mov	r9, r3
 800b0ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0ae:	1b1a      	subs	r2, r3, r4
 800b0b0:	d004      	beq.n	800b0bc <_dtoa_r+0x78c>
 800b0b2:	4649      	mov	r1, r9
 800b0b4:	4658      	mov	r0, fp
 800b0b6:	f000 fcb3 	bl	800ba20 <__pow5mult>
 800b0ba:	4681      	mov	r9, r0
 800b0bc:	2101      	movs	r1, #1
 800b0be:	4658      	mov	r0, fp
 800b0c0:	f000 fbee 	bl	800b8a0 <__i2b>
 800b0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 81cf 	beq.w	800b46c <_dtoa_r+0xb3c>
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	4658      	mov	r0, fp
 800b0d4:	f000 fca4 	bl	800ba20 <__pow5mult>
 800b0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	4604      	mov	r4, r0
 800b0de:	f300 8095 	bgt.w	800b20c <_dtoa_r+0x8dc>
 800b0e2:	9b02      	ldr	r3, [sp, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f040 8087 	bne.w	800b1f8 <_dtoa_r+0x8c8>
 800b0ea:	9b03      	ldr	r3, [sp, #12]
 800b0ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f040 8089 	bne.w	800b208 <_dtoa_r+0x8d8>
 800b0f6:	9b03      	ldr	r3, [sp, #12]
 800b0f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0fc:	0d1b      	lsrs	r3, r3, #20
 800b0fe:	051b      	lsls	r3, r3, #20
 800b100:	b12b      	cbz	r3, 800b10e <_dtoa_r+0x7de>
 800b102:	9b08      	ldr	r3, [sp, #32]
 800b104:	3301      	adds	r3, #1
 800b106:	9308      	str	r3, [sp, #32]
 800b108:	f108 0801 	add.w	r8, r8, #1
 800b10c:	2301      	movs	r3, #1
 800b10e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b112:	2b00      	cmp	r3, #0
 800b114:	f000 81b0 	beq.w	800b478 <_dtoa_r+0xb48>
 800b118:	6923      	ldr	r3, [r4, #16]
 800b11a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b11e:	6918      	ldr	r0, [r3, #16]
 800b120:	f000 fb72 	bl	800b808 <__hi0bits>
 800b124:	f1c0 0020 	rsb	r0, r0, #32
 800b128:	9b08      	ldr	r3, [sp, #32]
 800b12a:	4418      	add	r0, r3
 800b12c:	f010 001f 	ands.w	r0, r0, #31
 800b130:	d077      	beq.n	800b222 <_dtoa_r+0x8f2>
 800b132:	f1c0 0320 	rsb	r3, r0, #32
 800b136:	2b04      	cmp	r3, #4
 800b138:	dd6b      	ble.n	800b212 <_dtoa_r+0x8e2>
 800b13a:	9b08      	ldr	r3, [sp, #32]
 800b13c:	f1c0 001c 	rsb	r0, r0, #28
 800b140:	4403      	add	r3, r0
 800b142:	4480      	add	r8, r0
 800b144:	4406      	add	r6, r0
 800b146:	9308      	str	r3, [sp, #32]
 800b148:	f1b8 0f00 	cmp.w	r8, #0
 800b14c:	dd05      	ble.n	800b15a <_dtoa_r+0x82a>
 800b14e:	4649      	mov	r1, r9
 800b150:	4642      	mov	r2, r8
 800b152:	4658      	mov	r0, fp
 800b154:	f000 fcbe 	bl	800bad4 <__lshift>
 800b158:	4681      	mov	r9, r0
 800b15a:	9b08      	ldr	r3, [sp, #32]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	dd05      	ble.n	800b16c <_dtoa_r+0x83c>
 800b160:	4621      	mov	r1, r4
 800b162:	461a      	mov	r2, r3
 800b164:	4658      	mov	r0, fp
 800b166:	f000 fcb5 	bl	800bad4 <__lshift>
 800b16a:	4604      	mov	r4, r0
 800b16c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d059      	beq.n	800b226 <_dtoa_r+0x8f6>
 800b172:	4621      	mov	r1, r4
 800b174:	4648      	mov	r0, r9
 800b176:	f000 fd19 	bl	800bbac <__mcmp>
 800b17a:	2800      	cmp	r0, #0
 800b17c:	da53      	bge.n	800b226 <_dtoa_r+0x8f6>
 800b17e:	1e7b      	subs	r3, r7, #1
 800b180:	9304      	str	r3, [sp, #16]
 800b182:	4649      	mov	r1, r9
 800b184:	2300      	movs	r3, #0
 800b186:	220a      	movs	r2, #10
 800b188:	4658      	mov	r0, fp
 800b18a:	f000 faf7 	bl	800b77c <__multadd>
 800b18e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b190:	4681      	mov	r9, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	f000 8172 	beq.w	800b47c <_dtoa_r+0xb4c>
 800b198:	2300      	movs	r3, #0
 800b19a:	4629      	mov	r1, r5
 800b19c:	220a      	movs	r2, #10
 800b19e:	4658      	mov	r0, fp
 800b1a0:	f000 faec 	bl	800b77c <__multadd>
 800b1a4:	9b00      	ldr	r3, [sp, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	dc67      	bgt.n	800b27c <_dtoa_r+0x94c>
 800b1ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	dc41      	bgt.n	800b236 <_dtoa_r+0x906>
 800b1b2:	e063      	b.n	800b27c <_dtoa_r+0x94c>
 800b1b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b1b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b1ba:	e746      	b.n	800b04a <_dtoa_r+0x71a>
 800b1bc:	9b07      	ldr	r3, [sp, #28]
 800b1be:	1e5c      	subs	r4, r3, #1
 800b1c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1c2:	42a3      	cmp	r3, r4
 800b1c4:	bfbf      	itttt	lt
 800b1c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b1c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b1ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b1cc:	1ae3      	sublt	r3, r4, r3
 800b1ce:	bfb4      	ite	lt
 800b1d0:	18d2      	addlt	r2, r2, r3
 800b1d2:	1b1c      	subge	r4, r3, r4
 800b1d4:	9b07      	ldr	r3, [sp, #28]
 800b1d6:	bfbc      	itt	lt
 800b1d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b1da:	2400      	movlt	r4, #0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	bfb5      	itete	lt
 800b1e0:	eba8 0603 	sublt.w	r6, r8, r3
 800b1e4:	9b07      	ldrge	r3, [sp, #28]
 800b1e6:	2300      	movlt	r3, #0
 800b1e8:	4646      	movge	r6, r8
 800b1ea:	e730      	b.n	800b04e <_dtoa_r+0x71e>
 800b1ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b1ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b1f0:	4646      	mov	r6, r8
 800b1f2:	e735      	b.n	800b060 <_dtoa_r+0x730>
 800b1f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1f6:	e75c      	b.n	800b0b2 <_dtoa_r+0x782>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	e788      	b.n	800b10e <_dtoa_r+0x7de>
 800b1fc:	3fe00000 	.word	0x3fe00000
 800b200:	40240000 	.word	0x40240000
 800b204:	40140000 	.word	0x40140000
 800b208:	9b02      	ldr	r3, [sp, #8]
 800b20a:	e780      	b.n	800b10e <_dtoa_r+0x7de>
 800b20c:	2300      	movs	r3, #0
 800b20e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b210:	e782      	b.n	800b118 <_dtoa_r+0x7e8>
 800b212:	d099      	beq.n	800b148 <_dtoa_r+0x818>
 800b214:	9a08      	ldr	r2, [sp, #32]
 800b216:	331c      	adds	r3, #28
 800b218:	441a      	add	r2, r3
 800b21a:	4498      	add	r8, r3
 800b21c:	441e      	add	r6, r3
 800b21e:	9208      	str	r2, [sp, #32]
 800b220:	e792      	b.n	800b148 <_dtoa_r+0x818>
 800b222:	4603      	mov	r3, r0
 800b224:	e7f6      	b.n	800b214 <_dtoa_r+0x8e4>
 800b226:	9b07      	ldr	r3, [sp, #28]
 800b228:	9704      	str	r7, [sp, #16]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	dc20      	bgt.n	800b270 <_dtoa_r+0x940>
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b232:	2b02      	cmp	r3, #2
 800b234:	dd1e      	ble.n	800b274 <_dtoa_r+0x944>
 800b236:	9b00      	ldr	r3, [sp, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f47f aec0 	bne.w	800afbe <_dtoa_r+0x68e>
 800b23e:	4621      	mov	r1, r4
 800b240:	2205      	movs	r2, #5
 800b242:	4658      	mov	r0, fp
 800b244:	f000 fa9a 	bl	800b77c <__multadd>
 800b248:	4601      	mov	r1, r0
 800b24a:	4604      	mov	r4, r0
 800b24c:	4648      	mov	r0, r9
 800b24e:	f000 fcad 	bl	800bbac <__mcmp>
 800b252:	2800      	cmp	r0, #0
 800b254:	f77f aeb3 	ble.w	800afbe <_dtoa_r+0x68e>
 800b258:	4656      	mov	r6, sl
 800b25a:	2331      	movs	r3, #49	@ 0x31
 800b25c:	f806 3b01 	strb.w	r3, [r6], #1
 800b260:	9b04      	ldr	r3, [sp, #16]
 800b262:	3301      	adds	r3, #1
 800b264:	9304      	str	r3, [sp, #16]
 800b266:	e6ae      	b.n	800afc6 <_dtoa_r+0x696>
 800b268:	9c07      	ldr	r4, [sp, #28]
 800b26a:	9704      	str	r7, [sp, #16]
 800b26c:	4625      	mov	r5, r4
 800b26e:	e7f3      	b.n	800b258 <_dtoa_r+0x928>
 800b270:	9b07      	ldr	r3, [sp, #28]
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b276:	2b00      	cmp	r3, #0
 800b278:	f000 8104 	beq.w	800b484 <_dtoa_r+0xb54>
 800b27c:	2e00      	cmp	r6, #0
 800b27e:	dd05      	ble.n	800b28c <_dtoa_r+0x95c>
 800b280:	4629      	mov	r1, r5
 800b282:	4632      	mov	r2, r6
 800b284:	4658      	mov	r0, fp
 800b286:	f000 fc25 	bl	800bad4 <__lshift>
 800b28a:	4605      	mov	r5, r0
 800b28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d05a      	beq.n	800b348 <_dtoa_r+0xa18>
 800b292:	6869      	ldr	r1, [r5, #4]
 800b294:	4658      	mov	r0, fp
 800b296:	f000 fa0f 	bl	800b6b8 <_Balloc>
 800b29a:	4606      	mov	r6, r0
 800b29c:	b928      	cbnz	r0, 800b2aa <_dtoa_r+0x97a>
 800b29e:	4b84      	ldr	r3, [pc, #528]	@ (800b4b0 <_dtoa_r+0xb80>)
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b2a6:	f7ff bb5a 	b.w	800a95e <_dtoa_r+0x2e>
 800b2aa:	692a      	ldr	r2, [r5, #16]
 800b2ac:	3202      	adds	r2, #2
 800b2ae:	0092      	lsls	r2, r2, #2
 800b2b0:	f105 010c 	add.w	r1, r5, #12
 800b2b4:	300c      	adds	r0, #12
 800b2b6:	f000 ffaf 	bl	800c218 <memcpy>
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	4631      	mov	r1, r6
 800b2be:	4658      	mov	r0, fp
 800b2c0:	f000 fc08 	bl	800bad4 <__lshift>
 800b2c4:	f10a 0301 	add.w	r3, sl, #1
 800b2c8:	9307      	str	r3, [sp, #28]
 800b2ca:	9b00      	ldr	r3, [sp, #0]
 800b2cc:	4453      	add	r3, sl
 800b2ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2d0:	9b02      	ldr	r3, [sp, #8]
 800b2d2:	f003 0301 	and.w	r3, r3, #1
 800b2d6:	462f      	mov	r7, r5
 800b2d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2da:	4605      	mov	r5, r0
 800b2dc:	9b07      	ldr	r3, [sp, #28]
 800b2de:	4621      	mov	r1, r4
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	4648      	mov	r0, r9
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	f7ff fa9a 	bl	800a81e <quorem>
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	9002      	str	r0, [sp, #8]
 800b2ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b2f2:	4648      	mov	r0, r9
 800b2f4:	f000 fc5a 	bl	800bbac <__mcmp>
 800b2f8:	462a      	mov	r2, r5
 800b2fa:	9008      	str	r0, [sp, #32]
 800b2fc:	4621      	mov	r1, r4
 800b2fe:	4658      	mov	r0, fp
 800b300:	f000 fc70 	bl	800bbe4 <__mdiff>
 800b304:	68c2      	ldr	r2, [r0, #12]
 800b306:	4606      	mov	r6, r0
 800b308:	bb02      	cbnz	r2, 800b34c <_dtoa_r+0xa1c>
 800b30a:	4601      	mov	r1, r0
 800b30c:	4648      	mov	r0, r9
 800b30e:	f000 fc4d 	bl	800bbac <__mcmp>
 800b312:	4602      	mov	r2, r0
 800b314:	4631      	mov	r1, r6
 800b316:	4658      	mov	r0, fp
 800b318:	920e      	str	r2, [sp, #56]	@ 0x38
 800b31a:	f000 fa0d 	bl	800b738 <_Bfree>
 800b31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b320:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b322:	9e07      	ldr	r6, [sp, #28]
 800b324:	ea43 0102 	orr.w	r1, r3, r2
 800b328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b32a:	4319      	orrs	r1, r3
 800b32c:	d110      	bne.n	800b350 <_dtoa_r+0xa20>
 800b32e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b332:	d029      	beq.n	800b388 <_dtoa_r+0xa58>
 800b334:	9b08      	ldr	r3, [sp, #32]
 800b336:	2b00      	cmp	r3, #0
 800b338:	dd02      	ble.n	800b340 <_dtoa_r+0xa10>
 800b33a:	9b02      	ldr	r3, [sp, #8]
 800b33c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b340:	9b00      	ldr	r3, [sp, #0]
 800b342:	f883 8000 	strb.w	r8, [r3]
 800b346:	e63f      	b.n	800afc8 <_dtoa_r+0x698>
 800b348:	4628      	mov	r0, r5
 800b34a:	e7bb      	b.n	800b2c4 <_dtoa_r+0x994>
 800b34c:	2201      	movs	r2, #1
 800b34e:	e7e1      	b.n	800b314 <_dtoa_r+0x9e4>
 800b350:	9b08      	ldr	r3, [sp, #32]
 800b352:	2b00      	cmp	r3, #0
 800b354:	db04      	blt.n	800b360 <_dtoa_r+0xa30>
 800b356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b358:	430b      	orrs	r3, r1
 800b35a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b35c:	430b      	orrs	r3, r1
 800b35e:	d120      	bne.n	800b3a2 <_dtoa_r+0xa72>
 800b360:	2a00      	cmp	r2, #0
 800b362:	dded      	ble.n	800b340 <_dtoa_r+0xa10>
 800b364:	4649      	mov	r1, r9
 800b366:	2201      	movs	r2, #1
 800b368:	4658      	mov	r0, fp
 800b36a:	f000 fbb3 	bl	800bad4 <__lshift>
 800b36e:	4621      	mov	r1, r4
 800b370:	4681      	mov	r9, r0
 800b372:	f000 fc1b 	bl	800bbac <__mcmp>
 800b376:	2800      	cmp	r0, #0
 800b378:	dc03      	bgt.n	800b382 <_dtoa_r+0xa52>
 800b37a:	d1e1      	bne.n	800b340 <_dtoa_r+0xa10>
 800b37c:	f018 0f01 	tst.w	r8, #1
 800b380:	d0de      	beq.n	800b340 <_dtoa_r+0xa10>
 800b382:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b386:	d1d8      	bne.n	800b33a <_dtoa_r+0xa0a>
 800b388:	9a00      	ldr	r2, [sp, #0]
 800b38a:	2339      	movs	r3, #57	@ 0x39
 800b38c:	7013      	strb	r3, [r2, #0]
 800b38e:	4633      	mov	r3, r6
 800b390:	461e      	mov	r6, r3
 800b392:	3b01      	subs	r3, #1
 800b394:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b398:	2a39      	cmp	r2, #57	@ 0x39
 800b39a:	d052      	beq.n	800b442 <_dtoa_r+0xb12>
 800b39c:	3201      	adds	r2, #1
 800b39e:	701a      	strb	r2, [r3, #0]
 800b3a0:	e612      	b.n	800afc8 <_dtoa_r+0x698>
 800b3a2:	2a00      	cmp	r2, #0
 800b3a4:	dd07      	ble.n	800b3b6 <_dtoa_r+0xa86>
 800b3a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3aa:	d0ed      	beq.n	800b388 <_dtoa_r+0xa58>
 800b3ac:	9a00      	ldr	r2, [sp, #0]
 800b3ae:	f108 0301 	add.w	r3, r8, #1
 800b3b2:	7013      	strb	r3, [r2, #0]
 800b3b4:	e608      	b.n	800afc8 <_dtoa_r+0x698>
 800b3b6:	9b07      	ldr	r3, [sp, #28]
 800b3b8:	9a07      	ldr	r2, [sp, #28]
 800b3ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b3be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d028      	beq.n	800b416 <_dtoa_r+0xae6>
 800b3c4:	4649      	mov	r1, r9
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	220a      	movs	r2, #10
 800b3ca:	4658      	mov	r0, fp
 800b3cc:	f000 f9d6 	bl	800b77c <__multadd>
 800b3d0:	42af      	cmp	r7, r5
 800b3d2:	4681      	mov	r9, r0
 800b3d4:	f04f 0300 	mov.w	r3, #0
 800b3d8:	f04f 020a 	mov.w	r2, #10
 800b3dc:	4639      	mov	r1, r7
 800b3de:	4658      	mov	r0, fp
 800b3e0:	d107      	bne.n	800b3f2 <_dtoa_r+0xac2>
 800b3e2:	f000 f9cb 	bl	800b77c <__multadd>
 800b3e6:	4607      	mov	r7, r0
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	9b07      	ldr	r3, [sp, #28]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	9307      	str	r3, [sp, #28]
 800b3f0:	e774      	b.n	800b2dc <_dtoa_r+0x9ac>
 800b3f2:	f000 f9c3 	bl	800b77c <__multadd>
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	220a      	movs	r2, #10
 800b3fe:	4658      	mov	r0, fp
 800b400:	f000 f9bc 	bl	800b77c <__multadd>
 800b404:	4605      	mov	r5, r0
 800b406:	e7f0      	b.n	800b3ea <_dtoa_r+0xaba>
 800b408:	9b00      	ldr	r3, [sp, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	bfcc      	ite	gt
 800b40e:	461e      	movgt	r6, r3
 800b410:	2601      	movle	r6, #1
 800b412:	4456      	add	r6, sl
 800b414:	2700      	movs	r7, #0
 800b416:	4649      	mov	r1, r9
 800b418:	2201      	movs	r2, #1
 800b41a:	4658      	mov	r0, fp
 800b41c:	f000 fb5a 	bl	800bad4 <__lshift>
 800b420:	4621      	mov	r1, r4
 800b422:	4681      	mov	r9, r0
 800b424:	f000 fbc2 	bl	800bbac <__mcmp>
 800b428:	2800      	cmp	r0, #0
 800b42a:	dcb0      	bgt.n	800b38e <_dtoa_r+0xa5e>
 800b42c:	d102      	bne.n	800b434 <_dtoa_r+0xb04>
 800b42e:	f018 0f01 	tst.w	r8, #1
 800b432:	d1ac      	bne.n	800b38e <_dtoa_r+0xa5e>
 800b434:	4633      	mov	r3, r6
 800b436:	461e      	mov	r6, r3
 800b438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b43c:	2a30      	cmp	r2, #48	@ 0x30
 800b43e:	d0fa      	beq.n	800b436 <_dtoa_r+0xb06>
 800b440:	e5c2      	b.n	800afc8 <_dtoa_r+0x698>
 800b442:	459a      	cmp	sl, r3
 800b444:	d1a4      	bne.n	800b390 <_dtoa_r+0xa60>
 800b446:	9b04      	ldr	r3, [sp, #16]
 800b448:	3301      	adds	r3, #1
 800b44a:	9304      	str	r3, [sp, #16]
 800b44c:	2331      	movs	r3, #49	@ 0x31
 800b44e:	f88a 3000 	strb.w	r3, [sl]
 800b452:	e5b9      	b.n	800afc8 <_dtoa_r+0x698>
 800b454:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b456:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b4b4 <_dtoa_r+0xb84>
 800b45a:	b11b      	cbz	r3, 800b464 <_dtoa_r+0xb34>
 800b45c:	f10a 0308 	add.w	r3, sl, #8
 800b460:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b462:	6013      	str	r3, [r2, #0]
 800b464:	4650      	mov	r0, sl
 800b466:	b019      	add	sp, #100	@ 0x64
 800b468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b46e:	2b01      	cmp	r3, #1
 800b470:	f77f ae37 	ble.w	800b0e2 <_dtoa_r+0x7b2>
 800b474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b476:	930a      	str	r3, [sp, #40]	@ 0x28
 800b478:	2001      	movs	r0, #1
 800b47a:	e655      	b.n	800b128 <_dtoa_r+0x7f8>
 800b47c:	9b00      	ldr	r3, [sp, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f77f aed6 	ble.w	800b230 <_dtoa_r+0x900>
 800b484:	4656      	mov	r6, sl
 800b486:	4621      	mov	r1, r4
 800b488:	4648      	mov	r0, r9
 800b48a:	f7ff f9c8 	bl	800a81e <quorem>
 800b48e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b492:	f806 8b01 	strb.w	r8, [r6], #1
 800b496:	9b00      	ldr	r3, [sp, #0]
 800b498:	eba6 020a 	sub.w	r2, r6, sl
 800b49c:	4293      	cmp	r3, r2
 800b49e:	ddb3      	ble.n	800b408 <_dtoa_r+0xad8>
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	220a      	movs	r2, #10
 800b4a6:	4658      	mov	r0, fp
 800b4a8:	f000 f968 	bl	800b77c <__multadd>
 800b4ac:	4681      	mov	r9, r0
 800b4ae:	e7ea      	b.n	800b486 <_dtoa_r+0xb56>
 800b4b0:	0800cc3c 	.word	0x0800cc3c
 800b4b4:	0800cbc0 	.word	0x0800cbc0

0800b4b8 <_free_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	4605      	mov	r5, r0
 800b4bc:	2900      	cmp	r1, #0
 800b4be:	d041      	beq.n	800b544 <_free_r+0x8c>
 800b4c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4c4:	1f0c      	subs	r4, r1, #4
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	bfb8      	it	lt
 800b4ca:	18e4      	addlt	r4, r4, r3
 800b4cc:	f000 f8e8 	bl	800b6a0 <__malloc_lock>
 800b4d0:	4a1d      	ldr	r2, [pc, #116]	@ (800b548 <_free_r+0x90>)
 800b4d2:	6813      	ldr	r3, [r2, #0]
 800b4d4:	b933      	cbnz	r3, 800b4e4 <_free_r+0x2c>
 800b4d6:	6063      	str	r3, [r4, #4]
 800b4d8:	6014      	str	r4, [r2, #0]
 800b4da:	4628      	mov	r0, r5
 800b4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4e0:	f000 b8e4 	b.w	800b6ac <__malloc_unlock>
 800b4e4:	42a3      	cmp	r3, r4
 800b4e6:	d908      	bls.n	800b4fa <_free_r+0x42>
 800b4e8:	6820      	ldr	r0, [r4, #0]
 800b4ea:	1821      	adds	r1, r4, r0
 800b4ec:	428b      	cmp	r3, r1
 800b4ee:	bf01      	itttt	eq
 800b4f0:	6819      	ldreq	r1, [r3, #0]
 800b4f2:	685b      	ldreq	r3, [r3, #4]
 800b4f4:	1809      	addeq	r1, r1, r0
 800b4f6:	6021      	streq	r1, [r4, #0]
 800b4f8:	e7ed      	b.n	800b4d6 <_free_r+0x1e>
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	b10b      	cbz	r3, 800b504 <_free_r+0x4c>
 800b500:	42a3      	cmp	r3, r4
 800b502:	d9fa      	bls.n	800b4fa <_free_r+0x42>
 800b504:	6811      	ldr	r1, [r2, #0]
 800b506:	1850      	adds	r0, r2, r1
 800b508:	42a0      	cmp	r0, r4
 800b50a:	d10b      	bne.n	800b524 <_free_r+0x6c>
 800b50c:	6820      	ldr	r0, [r4, #0]
 800b50e:	4401      	add	r1, r0
 800b510:	1850      	adds	r0, r2, r1
 800b512:	4283      	cmp	r3, r0
 800b514:	6011      	str	r1, [r2, #0]
 800b516:	d1e0      	bne.n	800b4da <_free_r+0x22>
 800b518:	6818      	ldr	r0, [r3, #0]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	6053      	str	r3, [r2, #4]
 800b51e:	4408      	add	r0, r1
 800b520:	6010      	str	r0, [r2, #0]
 800b522:	e7da      	b.n	800b4da <_free_r+0x22>
 800b524:	d902      	bls.n	800b52c <_free_r+0x74>
 800b526:	230c      	movs	r3, #12
 800b528:	602b      	str	r3, [r5, #0]
 800b52a:	e7d6      	b.n	800b4da <_free_r+0x22>
 800b52c:	6820      	ldr	r0, [r4, #0]
 800b52e:	1821      	adds	r1, r4, r0
 800b530:	428b      	cmp	r3, r1
 800b532:	bf04      	itt	eq
 800b534:	6819      	ldreq	r1, [r3, #0]
 800b536:	685b      	ldreq	r3, [r3, #4]
 800b538:	6063      	str	r3, [r4, #4]
 800b53a:	bf04      	itt	eq
 800b53c:	1809      	addeq	r1, r1, r0
 800b53e:	6021      	streq	r1, [r4, #0]
 800b540:	6054      	str	r4, [r2, #4]
 800b542:	e7ca      	b.n	800b4da <_free_r+0x22>
 800b544:	bd38      	pop	{r3, r4, r5, pc}
 800b546:	bf00      	nop
 800b548:	200008f8 	.word	0x200008f8

0800b54c <malloc>:
 800b54c:	4b02      	ldr	r3, [pc, #8]	@ (800b558 <malloc+0xc>)
 800b54e:	4601      	mov	r1, r0
 800b550:	6818      	ldr	r0, [r3, #0]
 800b552:	f000 b825 	b.w	800b5a0 <_malloc_r>
 800b556:	bf00      	nop
 800b558:	20000018 	.word	0x20000018

0800b55c <sbrk_aligned>:
 800b55c:	b570      	push	{r4, r5, r6, lr}
 800b55e:	4e0f      	ldr	r6, [pc, #60]	@ (800b59c <sbrk_aligned+0x40>)
 800b560:	460c      	mov	r4, r1
 800b562:	6831      	ldr	r1, [r6, #0]
 800b564:	4605      	mov	r5, r0
 800b566:	b911      	cbnz	r1, 800b56e <sbrk_aligned+0x12>
 800b568:	f000 fe46 	bl	800c1f8 <_sbrk_r>
 800b56c:	6030      	str	r0, [r6, #0]
 800b56e:	4621      	mov	r1, r4
 800b570:	4628      	mov	r0, r5
 800b572:	f000 fe41 	bl	800c1f8 <_sbrk_r>
 800b576:	1c43      	adds	r3, r0, #1
 800b578:	d103      	bne.n	800b582 <sbrk_aligned+0x26>
 800b57a:	f04f 34ff 	mov.w	r4, #4294967295
 800b57e:	4620      	mov	r0, r4
 800b580:	bd70      	pop	{r4, r5, r6, pc}
 800b582:	1cc4      	adds	r4, r0, #3
 800b584:	f024 0403 	bic.w	r4, r4, #3
 800b588:	42a0      	cmp	r0, r4
 800b58a:	d0f8      	beq.n	800b57e <sbrk_aligned+0x22>
 800b58c:	1a21      	subs	r1, r4, r0
 800b58e:	4628      	mov	r0, r5
 800b590:	f000 fe32 	bl	800c1f8 <_sbrk_r>
 800b594:	3001      	adds	r0, #1
 800b596:	d1f2      	bne.n	800b57e <sbrk_aligned+0x22>
 800b598:	e7ef      	b.n	800b57a <sbrk_aligned+0x1e>
 800b59a:	bf00      	nop
 800b59c:	200008f4 	.word	0x200008f4

0800b5a0 <_malloc_r>:
 800b5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a4:	1ccd      	adds	r5, r1, #3
 800b5a6:	f025 0503 	bic.w	r5, r5, #3
 800b5aa:	3508      	adds	r5, #8
 800b5ac:	2d0c      	cmp	r5, #12
 800b5ae:	bf38      	it	cc
 800b5b0:	250c      	movcc	r5, #12
 800b5b2:	2d00      	cmp	r5, #0
 800b5b4:	4606      	mov	r6, r0
 800b5b6:	db01      	blt.n	800b5bc <_malloc_r+0x1c>
 800b5b8:	42a9      	cmp	r1, r5
 800b5ba:	d904      	bls.n	800b5c6 <_malloc_r+0x26>
 800b5bc:	230c      	movs	r3, #12
 800b5be:	6033      	str	r3, [r6, #0]
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b69c <_malloc_r+0xfc>
 800b5ca:	f000 f869 	bl	800b6a0 <__malloc_lock>
 800b5ce:	f8d8 3000 	ldr.w	r3, [r8]
 800b5d2:	461c      	mov	r4, r3
 800b5d4:	bb44      	cbnz	r4, 800b628 <_malloc_r+0x88>
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f7ff ffbf 	bl	800b55c <sbrk_aligned>
 800b5de:	1c43      	adds	r3, r0, #1
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	d158      	bne.n	800b696 <_malloc_r+0xf6>
 800b5e4:	f8d8 4000 	ldr.w	r4, [r8]
 800b5e8:	4627      	mov	r7, r4
 800b5ea:	2f00      	cmp	r7, #0
 800b5ec:	d143      	bne.n	800b676 <_malloc_r+0xd6>
 800b5ee:	2c00      	cmp	r4, #0
 800b5f0:	d04b      	beq.n	800b68a <_malloc_r+0xea>
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	eb04 0903 	add.w	r9, r4, r3
 800b5fc:	f000 fdfc 	bl	800c1f8 <_sbrk_r>
 800b600:	4581      	cmp	r9, r0
 800b602:	d142      	bne.n	800b68a <_malloc_r+0xea>
 800b604:	6821      	ldr	r1, [r4, #0]
 800b606:	1a6d      	subs	r5, r5, r1
 800b608:	4629      	mov	r1, r5
 800b60a:	4630      	mov	r0, r6
 800b60c:	f7ff ffa6 	bl	800b55c <sbrk_aligned>
 800b610:	3001      	adds	r0, #1
 800b612:	d03a      	beq.n	800b68a <_malloc_r+0xea>
 800b614:	6823      	ldr	r3, [r4, #0]
 800b616:	442b      	add	r3, r5
 800b618:	6023      	str	r3, [r4, #0]
 800b61a:	f8d8 3000 	ldr.w	r3, [r8]
 800b61e:	685a      	ldr	r2, [r3, #4]
 800b620:	bb62      	cbnz	r2, 800b67c <_malloc_r+0xdc>
 800b622:	f8c8 7000 	str.w	r7, [r8]
 800b626:	e00f      	b.n	800b648 <_malloc_r+0xa8>
 800b628:	6822      	ldr	r2, [r4, #0]
 800b62a:	1b52      	subs	r2, r2, r5
 800b62c:	d420      	bmi.n	800b670 <_malloc_r+0xd0>
 800b62e:	2a0b      	cmp	r2, #11
 800b630:	d917      	bls.n	800b662 <_malloc_r+0xc2>
 800b632:	1961      	adds	r1, r4, r5
 800b634:	42a3      	cmp	r3, r4
 800b636:	6025      	str	r5, [r4, #0]
 800b638:	bf18      	it	ne
 800b63a:	6059      	strne	r1, [r3, #4]
 800b63c:	6863      	ldr	r3, [r4, #4]
 800b63e:	bf08      	it	eq
 800b640:	f8c8 1000 	streq.w	r1, [r8]
 800b644:	5162      	str	r2, [r4, r5]
 800b646:	604b      	str	r3, [r1, #4]
 800b648:	4630      	mov	r0, r6
 800b64a:	f000 f82f 	bl	800b6ac <__malloc_unlock>
 800b64e:	f104 000b 	add.w	r0, r4, #11
 800b652:	1d23      	adds	r3, r4, #4
 800b654:	f020 0007 	bic.w	r0, r0, #7
 800b658:	1ac2      	subs	r2, r0, r3
 800b65a:	bf1c      	itt	ne
 800b65c:	1a1b      	subne	r3, r3, r0
 800b65e:	50a3      	strne	r3, [r4, r2]
 800b660:	e7af      	b.n	800b5c2 <_malloc_r+0x22>
 800b662:	6862      	ldr	r2, [r4, #4]
 800b664:	42a3      	cmp	r3, r4
 800b666:	bf0c      	ite	eq
 800b668:	f8c8 2000 	streq.w	r2, [r8]
 800b66c:	605a      	strne	r2, [r3, #4]
 800b66e:	e7eb      	b.n	800b648 <_malloc_r+0xa8>
 800b670:	4623      	mov	r3, r4
 800b672:	6864      	ldr	r4, [r4, #4]
 800b674:	e7ae      	b.n	800b5d4 <_malloc_r+0x34>
 800b676:	463c      	mov	r4, r7
 800b678:	687f      	ldr	r7, [r7, #4]
 800b67a:	e7b6      	b.n	800b5ea <_malloc_r+0x4a>
 800b67c:	461a      	mov	r2, r3
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	42a3      	cmp	r3, r4
 800b682:	d1fb      	bne.n	800b67c <_malloc_r+0xdc>
 800b684:	2300      	movs	r3, #0
 800b686:	6053      	str	r3, [r2, #4]
 800b688:	e7de      	b.n	800b648 <_malloc_r+0xa8>
 800b68a:	230c      	movs	r3, #12
 800b68c:	6033      	str	r3, [r6, #0]
 800b68e:	4630      	mov	r0, r6
 800b690:	f000 f80c 	bl	800b6ac <__malloc_unlock>
 800b694:	e794      	b.n	800b5c0 <_malloc_r+0x20>
 800b696:	6005      	str	r5, [r0, #0]
 800b698:	e7d6      	b.n	800b648 <_malloc_r+0xa8>
 800b69a:	bf00      	nop
 800b69c:	200008f8 	.word	0x200008f8

0800b6a0 <__malloc_lock>:
 800b6a0:	4801      	ldr	r0, [pc, #4]	@ (800b6a8 <__malloc_lock+0x8>)
 800b6a2:	f7ff b8ba 	b.w	800a81a <__retarget_lock_acquire_recursive>
 800b6a6:	bf00      	nop
 800b6a8:	200008f0 	.word	0x200008f0

0800b6ac <__malloc_unlock>:
 800b6ac:	4801      	ldr	r0, [pc, #4]	@ (800b6b4 <__malloc_unlock+0x8>)
 800b6ae:	f7ff b8b5 	b.w	800a81c <__retarget_lock_release_recursive>
 800b6b2:	bf00      	nop
 800b6b4:	200008f0 	.word	0x200008f0

0800b6b8 <_Balloc>:
 800b6b8:	b570      	push	{r4, r5, r6, lr}
 800b6ba:	69c6      	ldr	r6, [r0, #28]
 800b6bc:	4604      	mov	r4, r0
 800b6be:	460d      	mov	r5, r1
 800b6c0:	b976      	cbnz	r6, 800b6e0 <_Balloc+0x28>
 800b6c2:	2010      	movs	r0, #16
 800b6c4:	f7ff ff42 	bl	800b54c <malloc>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	61e0      	str	r0, [r4, #28]
 800b6cc:	b920      	cbnz	r0, 800b6d8 <_Balloc+0x20>
 800b6ce:	4b18      	ldr	r3, [pc, #96]	@ (800b730 <_Balloc+0x78>)
 800b6d0:	4818      	ldr	r0, [pc, #96]	@ (800b734 <_Balloc+0x7c>)
 800b6d2:	216b      	movs	r1, #107	@ 0x6b
 800b6d4:	f000 fdae 	bl	800c234 <__assert_func>
 800b6d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6dc:	6006      	str	r6, [r0, #0]
 800b6de:	60c6      	str	r6, [r0, #12]
 800b6e0:	69e6      	ldr	r6, [r4, #28]
 800b6e2:	68f3      	ldr	r3, [r6, #12]
 800b6e4:	b183      	cbz	r3, 800b708 <_Balloc+0x50>
 800b6e6:	69e3      	ldr	r3, [r4, #28]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6ee:	b9b8      	cbnz	r0, 800b720 <_Balloc+0x68>
 800b6f0:	2101      	movs	r1, #1
 800b6f2:	fa01 f605 	lsl.w	r6, r1, r5
 800b6f6:	1d72      	adds	r2, r6, #5
 800b6f8:	0092      	lsls	r2, r2, #2
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f000 fdb8 	bl	800c270 <_calloc_r>
 800b700:	b160      	cbz	r0, 800b71c <_Balloc+0x64>
 800b702:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b706:	e00e      	b.n	800b726 <_Balloc+0x6e>
 800b708:	2221      	movs	r2, #33	@ 0x21
 800b70a:	2104      	movs	r1, #4
 800b70c:	4620      	mov	r0, r4
 800b70e:	f000 fdaf 	bl	800c270 <_calloc_r>
 800b712:	69e3      	ldr	r3, [r4, #28]
 800b714:	60f0      	str	r0, [r6, #12]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1e4      	bne.n	800b6e6 <_Balloc+0x2e>
 800b71c:	2000      	movs	r0, #0
 800b71e:	bd70      	pop	{r4, r5, r6, pc}
 800b720:	6802      	ldr	r2, [r0, #0]
 800b722:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b726:	2300      	movs	r3, #0
 800b728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b72c:	e7f7      	b.n	800b71e <_Balloc+0x66>
 800b72e:	bf00      	nop
 800b730:	0800cbcd 	.word	0x0800cbcd
 800b734:	0800cc4d 	.word	0x0800cc4d

0800b738 <_Bfree>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	69c6      	ldr	r6, [r0, #28]
 800b73c:	4605      	mov	r5, r0
 800b73e:	460c      	mov	r4, r1
 800b740:	b976      	cbnz	r6, 800b760 <_Bfree+0x28>
 800b742:	2010      	movs	r0, #16
 800b744:	f7ff ff02 	bl	800b54c <malloc>
 800b748:	4602      	mov	r2, r0
 800b74a:	61e8      	str	r0, [r5, #28]
 800b74c:	b920      	cbnz	r0, 800b758 <_Bfree+0x20>
 800b74e:	4b09      	ldr	r3, [pc, #36]	@ (800b774 <_Bfree+0x3c>)
 800b750:	4809      	ldr	r0, [pc, #36]	@ (800b778 <_Bfree+0x40>)
 800b752:	218f      	movs	r1, #143	@ 0x8f
 800b754:	f000 fd6e 	bl	800c234 <__assert_func>
 800b758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b75c:	6006      	str	r6, [r0, #0]
 800b75e:	60c6      	str	r6, [r0, #12]
 800b760:	b13c      	cbz	r4, 800b772 <_Bfree+0x3a>
 800b762:	69eb      	ldr	r3, [r5, #28]
 800b764:	6862      	ldr	r2, [r4, #4]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b76c:	6021      	str	r1, [r4, #0]
 800b76e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b772:	bd70      	pop	{r4, r5, r6, pc}
 800b774:	0800cbcd 	.word	0x0800cbcd
 800b778:	0800cc4d 	.word	0x0800cc4d

0800b77c <__multadd>:
 800b77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b780:	690d      	ldr	r5, [r1, #16]
 800b782:	4607      	mov	r7, r0
 800b784:	460c      	mov	r4, r1
 800b786:	461e      	mov	r6, r3
 800b788:	f101 0c14 	add.w	ip, r1, #20
 800b78c:	2000      	movs	r0, #0
 800b78e:	f8dc 3000 	ldr.w	r3, [ip]
 800b792:	b299      	uxth	r1, r3
 800b794:	fb02 6101 	mla	r1, r2, r1, r6
 800b798:	0c1e      	lsrs	r6, r3, #16
 800b79a:	0c0b      	lsrs	r3, r1, #16
 800b79c:	fb02 3306 	mla	r3, r2, r6, r3
 800b7a0:	b289      	uxth	r1, r1
 800b7a2:	3001      	adds	r0, #1
 800b7a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b7a8:	4285      	cmp	r5, r0
 800b7aa:	f84c 1b04 	str.w	r1, [ip], #4
 800b7ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7b2:	dcec      	bgt.n	800b78e <__multadd+0x12>
 800b7b4:	b30e      	cbz	r6, 800b7fa <__multadd+0x7e>
 800b7b6:	68a3      	ldr	r3, [r4, #8]
 800b7b8:	42ab      	cmp	r3, r5
 800b7ba:	dc19      	bgt.n	800b7f0 <__multadd+0x74>
 800b7bc:	6861      	ldr	r1, [r4, #4]
 800b7be:	4638      	mov	r0, r7
 800b7c0:	3101      	adds	r1, #1
 800b7c2:	f7ff ff79 	bl	800b6b8 <_Balloc>
 800b7c6:	4680      	mov	r8, r0
 800b7c8:	b928      	cbnz	r0, 800b7d6 <__multadd+0x5a>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b800 <__multadd+0x84>)
 800b7ce:	480d      	ldr	r0, [pc, #52]	@ (800b804 <__multadd+0x88>)
 800b7d0:	21ba      	movs	r1, #186	@ 0xba
 800b7d2:	f000 fd2f 	bl	800c234 <__assert_func>
 800b7d6:	6922      	ldr	r2, [r4, #16]
 800b7d8:	3202      	adds	r2, #2
 800b7da:	f104 010c 	add.w	r1, r4, #12
 800b7de:	0092      	lsls	r2, r2, #2
 800b7e0:	300c      	adds	r0, #12
 800b7e2:	f000 fd19 	bl	800c218 <memcpy>
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	4638      	mov	r0, r7
 800b7ea:	f7ff ffa5 	bl	800b738 <_Bfree>
 800b7ee:	4644      	mov	r4, r8
 800b7f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7f4:	3501      	adds	r5, #1
 800b7f6:	615e      	str	r6, [r3, #20]
 800b7f8:	6125      	str	r5, [r4, #16]
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b800:	0800cc3c 	.word	0x0800cc3c
 800b804:	0800cc4d 	.word	0x0800cc4d

0800b808 <__hi0bits>:
 800b808:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b80c:	4603      	mov	r3, r0
 800b80e:	bf36      	itet	cc
 800b810:	0403      	lslcc	r3, r0, #16
 800b812:	2000      	movcs	r0, #0
 800b814:	2010      	movcc	r0, #16
 800b816:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b81a:	bf3c      	itt	cc
 800b81c:	021b      	lslcc	r3, r3, #8
 800b81e:	3008      	addcc	r0, #8
 800b820:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b824:	bf3c      	itt	cc
 800b826:	011b      	lslcc	r3, r3, #4
 800b828:	3004      	addcc	r0, #4
 800b82a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b82e:	bf3c      	itt	cc
 800b830:	009b      	lslcc	r3, r3, #2
 800b832:	3002      	addcc	r0, #2
 800b834:	2b00      	cmp	r3, #0
 800b836:	db05      	blt.n	800b844 <__hi0bits+0x3c>
 800b838:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b83c:	f100 0001 	add.w	r0, r0, #1
 800b840:	bf08      	it	eq
 800b842:	2020      	moveq	r0, #32
 800b844:	4770      	bx	lr

0800b846 <__lo0bits>:
 800b846:	6803      	ldr	r3, [r0, #0]
 800b848:	4602      	mov	r2, r0
 800b84a:	f013 0007 	ands.w	r0, r3, #7
 800b84e:	d00b      	beq.n	800b868 <__lo0bits+0x22>
 800b850:	07d9      	lsls	r1, r3, #31
 800b852:	d421      	bmi.n	800b898 <__lo0bits+0x52>
 800b854:	0798      	lsls	r0, r3, #30
 800b856:	bf49      	itett	mi
 800b858:	085b      	lsrmi	r3, r3, #1
 800b85a:	089b      	lsrpl	r3, r3, #2
 800b85c:	2001      	movmi	r0, #1
 800b85e:	6013      	strmi	r3, [r2, #0]
 800b860:	bf5c      	itt	pl
 800b862:	6013      	strpl	r3, [r2, #0]
 800b864:	2002      	movpl	r0, #2
 800b866:	4770      	bx	lr
 800b868:	b299      	uxth	r1, r3
 800b86a:	b909      	cbnz	r1, 800b870 <__lo0bits+0x2a>
 800b86c:	0c1b      	lsrs	r3, r3, #16
 800b86e:	2010      	movs	r0, #16
 800b870:	b2d9      	uxtb	r1, r3
 800b872:	b909      	cbnz	r1, 800b878 <__lo0bits+0x32>
 800b874:	3008      	adds	r0, #8
 800b876:	0a1b      	lsrs	r3, r3, #8
 800b878:	0719      	lsls	r1, r3, #28
 800b87a:	bf04      	itt	eq
 800b87c:	091b      	lsreq	r3, r3, #4
 800b87e:	3004      	addeq	r0, #4
 800b880:	0799      	lsls	r1, r3, #30
 800b882:	bf04      	itt	eq
 800b884:	089b      	lsreq	r3, r3, #2
 800b886:	3002      	addeq	r0, #2
 800b888:	07d9      	lsls	r1, r3, #31
 800b88a:	d403      	bmi.n	800b894 <__lo0bits+0x4e>
 800b88c:	085b      	lsrs	r3, r3, #1
 800b88e:	f100 0001 	add.w	r0, r0, #1
 800b892:	d003      	beq.n	800b89c <__lo0bits+0x56>
 800b894:	6013      	str	r3, [r2, #0]
 800b896:	4770      	bx	lr
 800b898:	2000      	movs	r0, #0
 800b89a:	4770      	bx	lr
 800b89c:	2020      	movs	r0, #32
 800b89e:	4770      	bx	lr

0800b8a0 <__i2b>:
 800b8a0:	b510      	push	{r4, lr}
 800b8a2:	460c      	mov	r4, r1
 800b8a4:	2101      	movs	r1, #1
 800b8a6:	f7ff ff07 	bl	800b6b8 <_Balloc>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	b928      	cbnz	r0, 800b8ba <__i2b+0x1a>
 800b8ae:	4b05      	ldr	r3, [pc, #20]	@ (800b8c4 <__i2b+0x24>)
 800b8b0:	4805      	ldr	r0, [pc, #20]	@ (800b8c8 <__i2b+0x28>)
 800b8b2:	f240 1145 	movw	r1, #325	@ 0x145
 800b8b6:	f000 fcbd 	bl	800c234 <__assert_func>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	6144      	str	r4, [r0, #20]
 800b8be:	6103      	str	r3, [r0, #16]
 800b8c0:	bd10      	pop	{r4, pc}
 800b8c2:	bf00      	nop
 800b8c4:	0800cc3c 	.word	0x0800cc3c
 800b8c8:	0800cc4d 	.word	0x0800cc4d

0800b8cc <__multiply>:
 800b8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d0:	4614      	mov	r4, r2
 800b8d2:	690a      	ldr	r2, [r1, #16]
 800b8d4:	6923      	ldr	r3, [r4, #16]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	bfa8      	it	ge
 800b8da:	4623      	movge	r3, r4
 800b8dc:	460f      	mov	r7, r1
 800b8de:	bfa4      	itt	ge
 800b8e0:	460c      	movge	r4, r1
 800b8e2:	461f      	movge	r7, r3
 800b8e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b8e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b8ec:	68a3      	ldr	r3, [r4, #8]
 800b8ee:	6861      	ldr	r1, [r4, #4]
 800b8f0:	eb0a 0609 	add.w	r6, sl, r9
 800b8f4:	42b3      	cmp	r3, r6
 800b8f6:	b085      	sub	sp, #20
 800b8f8:	bfb8      	it	lt
 800b8fa:	3101      	addlt	r1, #1
 800b8fc:	f7ff fedc 	bl	800b6b8 <_Balloc>
 800b900:	b930      	cbnz	r0, 800b910 <__multiply+0x44>
 800b902:	4602      	mov	r2, r0
 800b904:	4b44      	ldr	r3, [pc, #272]	@ (800ba18 <__multiply+0x14c>)
 800b906:	4845      	ldr	r0, [pc, #276]	@ (800ba1c <__multiply+0x150>)
 800b908:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b90c:	f000 fc92 	bl	800c234 <__assert_func>
 800b910:	f100 0514 	add.w	r5, r0, #20
 800b914:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b918:	462b      	mov	r3, r5
 800b91a:	2200      	movs	r2, #0
 800b91c:	4543      	cmp	r3, r8
 800b91e:	d321      	bcc.n	800b964 <__multiply+0x98>
 800b920:	f107 0114 	add.w	r1, r7, #20
 800b924:	f104 0214 	add.w	r2, r4, #20
 800b928:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b92c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b930:	9302      	str	r3, [sp, #8]
 800b932:	1b13      	subs	r3, r2, r4
 800b934:	3b15      	subs	r3, #21
 800b936:	f023 0303 	bic.w	r3, r3, #3
 800b93a:	3304      	adds	r3, #4
 800b93c:	f104 0715 	add.w	r7, r4, #21
 800b940:	42ba      	cmp	r2, r7
 800b942:	bf38      	it	cc
 800b944:	2304      	movcc	r3, #4
 800b946:	9301      	str	r3, [sp, #4]
 800b948:	9b02      	ldr	r3, [sp, #8]
 800b94a:	9103      	str	r1, [sp, #12]
 800b94c:	428b      	cmp	r3, r1
 800b94e:	d80c      	bhi.n	800b96a <__multiply+0x9e>
 800b950:	2e00      	cmp	r6, #0
 800b952:	dd03      	ble.n	800b95c <__multiply+0x90>
 800b954:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d05b      	beq.n	800ba14 <__multiply+0x148>
 800b95c:	6106      	str	r6, [r0, #16]
 800b95e:	b005      	add	sp, #20
 800b960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b964:	f843 2b04 	str.w	r2, [r3], #4
 800b968:	e7d8      	b.n	800b91c <__multiply+0x50>
 800b96a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b96e:	f1ba 0f00 	cmp.w	sl, #0
 800b972:	d024      	beq.n	800b9be <__multiply+0xf2>
 800b974:	f104 0e14 	add.w	lr, r4, #20
 800b978:	46a9      	mov	r9, r5
 800b97a:	f04f 0c00 	mov.w	ip, #0
 800b97e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b982:	f8d9 3000 	ldr.w	r3, [r9]
 800b986:	fa1f fb87 	uxth.w	fp, r7
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b990:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b994:	f8d9 7000 	ldr.w	r7, [r9]
 800b998:	4463      	add	r3, ip
 800b99a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b99e:	fb0a c70b 	mla	r7, sl, fp, ip
 800b9a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b9ac:	4572      	cmp	r2, lr
 800b9ae:	f849 3b04 	str.w	r3, [r9], #4
 800b9b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b9b6:	d8e2      	bhi.n	800b97e <__multiply+0xb2>
 800b9b8:	9b01      	ldr	r3, [sp, #4]
 800b9ba:	f845 c003 	str.w	ip, [r5, r3]
 800b9be:	9b03      	ldr	r3, [sp, #12]
 800b9c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b9c4:	3104      	adds	r1, #4
 800b9c6:	f1b9 0f00 	cmp.w	r9, #0
 800b9ca:	d021      	beq.n	800ba10 <__multiply+0x144>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	f104 0c14 	add.w	ip, r4, #20
 800b9d2:	46ae      	mov	lr, r5
 800b9d4:	f04f 0a00 	mov.w	sl, #0
 800b9d8:	f8bc b000 	ldrh.w	fp, [ip]
 800b9dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b9e0:	fb09 770b 	mla	r7, r9, fp, r7
 800b9e4:	4457      	add	r7, sl
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b9ec:	f84e 3b04 	str.w	r3, [lr], #4
 800b9f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b9f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9f8:	f8be 3000 	ldrh.w	r3, [lr]
 800b9fc:	fb09 330a 	mla	r3, r9, sl, r3
 800ba00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ba04:	4562      	cmp	r2, ip
 800ba06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba0a:	d8e5      	bhi.n	800b9d8 <__multiply+0x10c>
 800ba0c:	9f01      	ldr	r7, [sp, #4]
 800ba0e:	51eb      	str	r3, [r5, r7]
 800ba10:	3504      	adds	r5, #4
 800ba12:	e799      	b.n	800b948 <__multiply+0x7c>
 800ba14:	3e01      	subs	r6, #1
 800ba16:	e79b      	b.n	800b950 <__multiply+0x84>
 800ba18:	0800cc3c 	.word	0x0800cc3c
 800ba1c:	0800cc4d 	.word	0x0800cc4d

0800ba20 <__pow5mult>:
 800ba20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba24:	4615      	mov	r5, r2
 800ba26:	f012 0203 	ands.w	r2, r2, #3
 800ba2a:	4607      	mov	r7, r0
 800ba2c:	460e      	mov	r6, r1
 800ba2e:	d007      	beq.n	800ba40 <__pow5mult+0x20>
 800ba30:	4c25      	ldr	r4, [pc, #148]	@ (800bac8 <__pow5mult+0xa8>)
 800ba32:	3a01      	subs	r2, #1
 800ba34:	2300      	movs	r3, #0
 800ba36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba3a:	f7ff fe9f 	bl	800b77c <__multadd>
 800ba3e:	4606      	mov	r6, r0
 800ba40:	10ad      	asrs	r5, r5, #2
 800ba42:	d03d      	beq.n	800bac0 <__pow5mult+0xa0>
 800ba44:	69fc      	ldr	r4, [r7, #28]
 800ba46:	b97c      	cbnz	r4, 800ba68 <__pow5mult+0x48>
 800ba48:	2010      	movs	r0, #16
 800ba4a:	f7ff fd7f 	bl	800b54c <malloc>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	61f8      	str	r0, [r7, #28]
 800ba52:	b928      	cbnz	r0, 800ba60 <__pow5mult+0x40>
 800ba54:	4b1d      	ldr	r3, [pc, #116]	@ (800bacc <__pow5mult+0xac>)
 800ba56:	481e      	ldr	r0, [pc, #120]	@ (800bad0 <__pow5mult+0xb0>)
 800ba58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ba5c:	f000 fbea 	bl	800c234 <__assert_func>
 800ba60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba64:	6004      	str	r4, [r0, #0]
 800ba66:	60c4      	str	r4, [r0, #12]
 800ba68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ba6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba70:	b94c      	cbnz	r4, 800ba86 <__pow5mult+0x66>
 800ba72:	f240 2171 	movw	r1, #625	@ 0x271
 800ba76:	4638      	mov	r0, r7
 800ba78:	f7ff ff12 	bl	800b8a0 <__i2b>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba82:	4604      	mov	r4, r0
 800ba84:	6003      	str	r3, [r0, #0]
 800ba86:	f04f 0900 	mov.w	r9, #0
 800ba8a:	07eb      	lsls	r3, r5, #31
 800ba8c:	d50a      	bpl.n	800baa4 <__pow5mult+0x84>
 800ba8e:	4631      	mov	r1, r6
 800ba90:	4622      	mov	r2, r4
 800ba92:	4638      	mov	r0, r7
 800ba94:	f7ff ff1a 	bl	800b8cc <__multiply>
 800ba98:	4631      	mov	r1, r6
 800ba9a:	4680      	mov	r8, r0
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	f7ff fe4b 	bl	800b738 <_Bfree>
 800baa2:	4646      	mov	r6, r8
 800baa4:	106d      	asrs	r5, r5, #1
 800baa6:	d00b      	beq.n	800bac0 <__pow5mult+0xa0>
 800baa8:	6820      	ldr	r0, [r4, #0]
 800baaa:	b938      	cbnz	r0, 800babc <__pow5mult+0x9c>
 800baac:	4622      	mov	r2, r4
 800baae:	4621      	mov	r1, r4
 800bab0:	4638      	mov	r0, r7
 800bab2:	f7ff ff0b 	bl	800b8cc <__multiply>
 800bab6:	6020      	str	r0, [r4, #0]
 800bab8:	f8c0 9000 	str.w	r9, [r0]
 800babc:	4604      	mov	r4, r0
 800babe:	e7e4      	b.n	800ba8a <__pow5mult+0x6a>
 800bac0:	4630      	mov	r0, r6
 800bac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bac6:	bf00      	nop
 800bac8:	0800cca8 	.word	0x0800cca8
 800bacc:	0800cbcd 	.word	0x0800cbcd
 800bad0:	0800cc4d 	.word	0x0800cc4d

0800bad4 <__lshift>:
 800bad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bad8:	460c      	mov	r4, r1
 800bada:	6849      	ldr	r1, [r1, #4]
 800badc:	6923      	ldr	r3, [r4, #16]
 800bade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bae2:	68a3      	ldr	r3, [r4, #8]
 800bae4:	4607      	mov	r7, r0
 800bae6:	4691      	mov	r9, r2
 800bae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800baec:	f108 0601 	add.w	r6, r8, #1
 800baf0:	42b3      	cmp	r3, r6
 800baf2:	db0b      	blt.n	800bb0c <__lshift+0x38>
 800baf4:	4638      	mov	r0, r7
 800baf6:	f7ff fddf 	bl	800b6b8 <_Balloc>
 800bafa:	4605      	mov	r5, r0
 800bafc:	b948      	cbnz	r0, 800bb12 <__lshift+0x3e>
 800bafe:	4602      	mov	r2, r0
 800bb00:	4b28      	ldr	r3, [pc, #160]	@ (800bba4 <__lshift+0xd0>)
 800bb02:	4829      	ldr	r0, [pc, #164]	@ (800bba8 <__lshift+0xd4>)
 800bb04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bb08:	f000 fb94 	bl	800c234 <__assert_func>
 800bb0c:	3101      	adds	r1, #1
 800bb0e:	005b      	lsls	r3, r3, #1
 800bb10:	e7ee      	b.n	800baf0 <__lshift+0x1c>
 800bb12:	2300      	movs	r3, #0
 800bb14:	f100 0114 	add.w	r1, r0, #20
 800bb18:	f100 0210 	add.w	r2, r0, #16
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	4553      	cmp	r3, sl
 800bb20:	db33      	blt.n	800bb8a <__lshift+0xb6>
 800bb22:	6920      	ldr	r0, [r4, #16]
 800bb24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb28:	f104 0314 	add.w	r3, r4, #20
 800bb2c:	f019 091f 	ands.w	r9, r9, #31
 800bb30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb38:	d02b      	beq.n	800bb92 <__lshift+0xbe>
 800bb3a:	f1c9 0e20 	rsb	lr, r9, #32
 800bb3e:	468a      	mov	sl, r1
 800bb40:	2200      	movs	r2, #0
 800bb42:	6818      	ldr	r0, [r3, #0]
 800bb44:	fa00 f009 	lsl.w	r0, r0, r9
 800bb48:	4310      	orrs	r0, r2
 800bb4a:	f84a 0b04 	str.w	r0, [sl], #4
 800bb4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb52:	459c      	cmp	ip, r3
 800bb54:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb58:	d8f3      	bhi.n	800bb42 <__lshift+0x6e>
 800bb5a:	ebac 0304 	sub.w	r3, ip, r4
 800bb5e:	3b15      	subs	r3, #21
 800bb60:	f023 0303 	bic.w	r3, r3, #3
 800bb64:	3304      	adds	r3, #4
 800bb66:	f104 0015 	add.w	r0, r4, #21
 800bb6a:	4584      	cmp	ip, r0
 800bb6c:	bf38      	it	cc
 800bb6e:	2304      	movcc	r3, #4
 800bb70:	50ca      	str	r2, [r1, r3]
 800bb72:	b10a      	cbz	r2, 800bb78 <__lshift+0xa4>
 800bb74:	f108 0602 	add.w	r6, r8, #2
 800bb78:	3e01      	subs	r6, #1
 800bb7a:	4638      	mov	r0, r7
 800bb7c:	612e      	str	r6, [r5, #16]
 800bb7e:	4621      	mov	r1, r4
 800bb80:	f7ff fdda 	bl	800b738 <_Bfree>
 800bb84:	4628      	mov	r0, r5
 800bb86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb8e:	3301      	adds	r3, #1
 800bb90:	e7c5      	b.n	800bb1e <__lshift+0x4a>
 800bb92:	3904      	subs	r1, #4
 800bb94:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb98:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb9c:	459c      	cmp	ip, r3
 800bb9e:	d8f9      	bhi.n	800bb94 <__lshift+0xc0>
 800bba0:	e7ea      	b.n	800bb78 <__lshift+0xa4>
 800bba2:	bf00      	nop
 800bba4:	0800cc3c 	.word	0x0800cc3c
 800bba8:	0800cc4d 	.word	0x0800cc4d

0800bbac <__mcmp>:
 800bbac:	690a      	ldr	r2, [r1, #16]
 800bbae:	4603      	mov	r3, r0
 800bbb0:	6900      	ldr	r0, [r0, #16]
 800bbb2:	1a80      	subs	r0, r0, r2
 800bbb4:	b530      	push	{r4, r5, lr}
 800bbb6:	d10e      	bne.n	800bbd6 <__mcmp+0x2a>
 800bbb8:	3314      	adds	r3, #20
 800bbba:	3114      	adds	r1, #20
 800bbbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bbc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bbc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bbc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bbcc:	4295      	cmp	r5, r2
 800bbce:	d003      	beq.n	800bbd8 <__mcmp+0x2c>
 800bbd0:	d205      	bcs.n	800bbde <__mcmp+0x32>
 800bbd2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd6:	bd30      	pop	{r4, r5, pc}
 800bbd8:	42a3      	cmp	r3, r4
 800bbda:	d3f3      	bcc.n	800bbc4 <__mcmp+0x18>
 800bbdc:	e7fb      	b.n	800bbd6 <__mcmp+0x2a>
 800bbde:	2001      	movs	r0, #1
 800bbe0:	e7f9      	b.n	800bbd6 <__mcmp+0x2a>
	...

0800bbe4 <__mdiff>:
 800bbe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe8:	4689      	mov	r9, r1
 800bbea:	4606      	mov	r6, r0
 800bbec:	4611      	mov	r1, r2
 800bbee:	4648      	mov	r0, r9
 800bbf0:	4614      	mov	r4, r2
 800bbf2:	f7ff ffdb 	bl	800bbac <__mcmp>
 800bbf6:	1e05      	subs	r5, r0, #0
 800bbf8:	d112      	bne.n	800bc20 <__mdiff+0x3c>
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f7ff fd5b 	bl	800b6b8 <_Balloc>
 800bc02:	4602      	mov	r2, r0
 800bc04:	b928      	cbnz	r0, 800bc12 <__mdiff+0x2e>
 800bc06:	4b3f      	ldr	r3, [pc, #252]	@ (800bd04 <__mdiff+0x120>)
 800bc08:	f240 2137 	movw	r1, #567	@ 0x237
 800bc0c:	483e      	ldr	r0, [pc, #248]	@ (800bd08 <__mdiff+0x124>)
 800bc0e:	f000 fb11 	bl	800c234 <__assert_func>
 800bc12:	2301      	movs	r3, #1
 800bc14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc18:	4610      	mov	r0, r2
 800bc1a:	b003      	add	sp, #12
 800bc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc20:	bfbc      	itt	lt
 800bc22:	464b      	movlt	r3, r9
 800bc24:	46a1      	movlt	r9, r4
 800bc26:	4630      	mov	r0, r6
 800bc28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bc2c:	bfba      	itte	lt
 800bc2e:	461c      	movlt	r4, r3
 800bc30:	2501      	movlt	r5, #1
 800bc32:	2500      	movge	r5, #0
 800bc34:	f7ff fd40 	bl	800b6b8 <_Balloc>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	b918      	cbnz	r0, 800bc44 <__mdiff+0x60>
 800bc3c:	4b31      	ldr	r3, [pc, #196]	@ (800bd04 <__mdiff+0x120>)
 800bc3e:	f240 2145 	movw	r1, #581	@ 0x245
 800bc42:	e7e3      	b.n	800bc0c <__mdiff+0x28>
 800bc44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bc48:	6926      	ldr	r6, [r4, #16]
 800bc4a:	60c5      	str	r5, [r0, #12]
 800bc4c:	f109 0310 	add.w	r3, r9, #16
 800bc50:	f109 0514 	add.w	r5, r9, #20
 800bc54:	f104 0e14 	add.w	lr, r4, #20
 800bc58:	f100 0b14 	add.w	fp, r0, #20
 800bc5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bc60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bc64:	9301      	str	r3, [sp, #4]
 800bc66:	46d9      	mov	r9, fp
 800bc68:	f04f 0c00 	mov.w	ip, #0
 800bc6c:	9b01      	ldr	r3, [sp, #4]
 800bc6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bc72:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bc76:	9301      	str	r3, [sp, #4]
 800bc78:	fa1f f38a 	uxth.w	r3, sl
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	b283      	uxth	r3, r0
 800bc80:	1acb      	subs	r3, r1, r3
 800bc82:	0c00      	lsrs	r0, r0, #16
 800bc84:	4463      	add	r3, ip
 800bc86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bc8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bc94:	4576      	cmp	r6, lr
 800bc96:	f849 3b04 	str.w	r3, [r9], #4
 800bc9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc9e:	d8e5      	bhi.n	800bc6c <__mdiff+0x88>
 800bca0:	1b33      	subs	r3, r6, r4
 800bca2:	3b15      	subs	r3, #21
 800bca4:	f023 0303 	bic.w	r3, r3, #3
 800bca8:	3415      	adds	r4, #21
 800bcaa:	3304      	adds	r3, #4
 800bcac:	42a6      	cmp	r6, r4
 800bcae:	bf38      	it	cc
 800bcb0:	2304      	movcc	r3, #4
 800bcb2:	441d      	add	r5, r3
 800bcb4:	445b      	add	r3, fp
 800bcb6:	461e      	mov	r6, r3
 800bcb8:	462c      	mov	r4, r5
 800bcba:	4544      	cmp	r4, r8
 800bcbc:	d30e      	bcc.n	800bcdc <__mdiff+0xf8>
 800bcbe:	f108 0103 	add.w	r1, r8, #3
 800bcc2:	1b49      	subs	r1, r1, r5
 800bcc4:	f021 0103 	bic.w	r1, r1, #3
 800bcc8:	3d03      	subs	r5, #3
 800bcca:	45a8      	cmp	r8, r5
 800bccc:	bf38      	it	cc
 800bcce:	2100      	movcc	r1, #0
 800bcd0:	440b      	add	r3, r1
 800bcd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bcd6:	b191      	cbz	r1, 800bcfe <__mdiff+0x11a>
 800bcd8:	6117      	str	r7, [r2, #16]
 800bcda:	e79d      	b.n	800bc18 <__mdiff+0x34>
 800bcdc:	f854 1b04 	ldr.w	r1, [r4], #4
 800bce0:	46e6      	mov	lr, ip
 800bce2:	0c08      	lsrs	r0, r1, #16
 800bce4:	fa1c fc81 	uxtah	ip, ip, r1
 800bce8:	4471      	add	r1, lr
 800bcea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bcee:	b289      	uxth	r1, r1
 800bcf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bcf4:	f846 1b04 	str.w	r1, [r6], #4
 800bcf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bcfc:	e7dd      	b.n	800bcba <__mdiff+0xd6>
 800bcfe:	3f01      	subs	r7, #1
 800bd00:	e7e7      	b.n	800bcd2 <__mdiff+0xee>
 800bd02:	bf00      	nop
 800bd04:	0800cc3c 	.word	0x0800cc3c
 800bd08:	0800cc4d 	.word	0x0800cc4d

0800bd0c <__d2b>:
 800bd0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd10:	460f      	mov	r7, r1
 800bd12:	2101      	movs	r1, #1
 800bd14:	ec59 8b10 	vmov	r8, r9, d0
 800bd18:	4616      	mov	r6, r2
 800bd1a:	f7ff fccd 	bl	800b6b8 <_Balloc>
 800bd1e:	4604      	mov	r4, r0
 800bd20:	b930      	cbnz	r0, 800bd30 <__d2b+0x24>
 800bd22:	4602      	mov	r2, r0
 800bd24:	4b23      	ldr	r3, [pc, #140]	@ (800bdb4 <__d2b+0xa8>)
 800bd26:	4824      	ldr	r0, [pc, #144]	@ (800bdb8 <__d2b+0xac>)
 800bd28:	f240 310f 	movw	r1, #783	@ 0x30f
 800bd2c:	f000 fa82 	bl	800c234 <__assert_func>
 800bd30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd38:	b10d      	cbz	r5, 800bd3e <__d2b+0x32>
 800bd3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd3e:	9301      	str	r3, [sp, #4]
 800bd40:	f1b8 0300 	subs.w	r3, r8, #0
 800bd44:	d023      	beq.n	800bd8e <__d2b+0x82>
 800bd46:	4668      	mov	r0, sp
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	f7ff fd7c 	bl	800b846 <__lo0bits>
 800bd4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd52:	b1d0      	cbz	r0, 800bd8a <__d2b+0x7e>
 800bd54:	f1c0 0320 	rsb	r3, r0, #32
 800bd58:	fa02 f303 	lsl.w	r3, r2, r3
 800bd5c:	430b      	orrs	r3, r1
 800bd5e:	40c2      	lsrs	r2, r0
 800bd60:	6163      	str	r3, [r4, #20]
 800bd62:	9201      	str	r2, [sp, #4]
 800bd64:	9b01      	ldr	r3, [sp, #4]
 800bd66:	61a3      	str	r3, [r4, #24]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	bf0c      	ite	eq
 800bd6c:	2201      	moveq	r2, #1
 800bd6e:	2202      	movne	r2, #2
 800bd70:	6122      	str	r2, [r4, #16]
 800bd72:	b1a5      	cbz	r5, 800bd9e <__d2b+0x92>
 800bd74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bd78:	4405      	add	r5, r0
 800bd7a:	603d      	str	r5, [r7, #0]
 800bd7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bd80:	6030      	str	r0, [r6, #0]
 800bd82:	4620      	mov	r0, r4
 800bd84:	b003      	add	sp, #12
 800bd86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd8a:	6161      	str	r1, [r4, #20]
 800bd8c:	e7ea      	b.n	800bd64 <__d2b+0x58>
 800bd8e:	a801      	add	r0, sp, #4
 800bd90:	f7ff fd59 	bl	800b846 <__lo0bits>
 800bd94:	9b01      	ldr	r3, [sp, #4]
 800bd96:	6163      	str	r3, [r4, #20]
 800bd98:	3020      	adds	r0, #32
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	e7e8      	b.n	800bd70 <__d2b+0x64>
 800bd9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bda2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bda6:	6038      	str	r0, [r7, #0]
 800bda8:	6918      	ldr	r0, [r3, #16]
 800bdaa:	f7ff fd2d 	bl	800b808 <__hi0bits>
 800bdae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bdb2:	e7e5      	b.n	800bd80 <__d2b+0x74>
 800bdb4:	0800cc3c 	.word	0x0800cc3c
 800bdb8:	0800cc4d 	.word	0x0800cc4d

0800bdbc <__ssputs_r>:
 800bdbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc0:	688e      	ldr	r6, [r1, #8]
 800bdc2:	461f      	mov	r7, r3
 800bdc4:	42be      	cmp	r6, r7
 800bdc6:	680b      	ldr	r3, [r1, #0]
 800bdc8:	4682      	mov	sl, r0
 800bdca:	460c      	mov	r4, r1
 800bdcc:	4690      	mov	r8, r2
 800bdce:	d82d      	bhi.n	800be2c <__ssputs_r+0x70>
 800bdd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bdd8:	d026      	beq.n	800be28 <__ssputs_r+0x6c>
 800bdda:	6965      	ldr	r5, [r4, #20]
 800bddc:	6909      	ldr	r1, [r1, #16]
 800bdde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bde2:	eba3 0901 	sub.w	r9, r3, r1
 800bde6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdea:	1c7b      	adds	r3, r7, #1
 800bdec:	444b      	add	r3, r9
 800bdee:	106d      	asrs	r5, r5, #1
 800bdf0:	429d      	cmp	r5, r3
 800bdf2:	bf38      	it	cc
 800bdf4:	461d      	movcc	r5, r3
 800bdf6:	0553      	lsls	r3, r2, #21
 800bdf8:	d527      	bpl.n	800be4a <__ssputs_r+0x8e>
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	f7ff fbd0 	bl	800b5a0 <_malloc_r>
 800be00:	4606      	mov	r6, r0
 800be02:	b360      	cbz	r0, 800be5e <__ssputs_r+0xa2>
 800be04:	6921      	ldr	r1, [r4, #16]
 800be06:	464a      	mov	r2, r9
 800be08:	f000 fa06 	bl	800c218 <memcpy>
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be16:	81a3      	strh	r3, [r4, #12]
 800be18:	6126      	str	r6, [r4, #16]
 800be1a:	6165      	str	r5, [r4, #20]
 800be1c:	444e      	add	r6, r9
 800be1e:	eba5 0509 	sub.w	r5, r5, r9
 800be22:	6026      	str	r6, [r4, #0]
 800be24:	60a5      	str	r5, [r4, #8]
 800be26:	463e      	mov	r6, r7
 800be28:	42be      	cmp	r6, r7
 800be2a:	d900      	bls.n	800be2e <__ssputs_r+0x72>
 800be2c:	463e      	mov	r6, r7
 800be2e:	6820      	ldr	r0, [r4, #0]
 800be30:	4632      	mov	r2, r6
 800be32:	4641      	mov	r1, r8
 800be34:	f000 f9c6 	bl	800c1c4 <memmove>
 800be38:	68a3      	ldr	r3, [r4, #8]
 800be3a:	1b9b      	subs	r3, r3, r6
 800be3c:	60a3      	str	r3, [r4, #8]
 800be3e:	6823      	ldr	r3, [r4, #0]
 800be40:	4433      	add	r3, r6
 800be42:	6023      	str	r3, [r4, #0]
 800be44:	2000      	movs	r0, #0
 800be46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be4a:	462a      	mov	r2, r5
 800be4c:	f000 fa36 	bl	800c2bc <_realloc_r>
 800be50:	4606      	mov	r6, r0
 800be52:	2800      	cmp	r0, #0
 800be54:	d1e0      	bne.n	800be18 <__ssputs_r+0x5c>
 800be56:	6921      	ldr	r1, [r4, #16]
 800be58:	4650      	mov	r0, sl
 800be5a:	f7ff fb2d 	bl	800b4b8 <_free_r>
 800be5e:	230c      	movs	r3, #12
 800be60:	f8ca 3000 	str.w	r3, [sl]
 800be64:	89a3      	ldrh	r3, [r4, #12]
 800be66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be6a:	81a3      	strh	r3, [r4, #12]
 800be6c:	f04f 30ff 	mov.w	r0, #4294967295
 800be70:	e7e9      	b.n	800be46 <__ssputs_r+0x8a>
	...

0800be74 <_svfiprintf_r>:
 800be74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be78:	4698      	mov	r8, r3
 800be7a:	898b      	ldrh	r3, [r1, #12]
 800be7c:	061b      	lsls	r3, r3, #24
 800be7e:	b09d      	sub	sp, #116	@ 0x74
 800be80:	4607      	mov	r7, r0
 800be82:	460d      	mov	r5, r1
 800be84:	4614      	mov	r4, r2
 800be86:	d510      	bpl.n	800beaa <_svfiprintf_r+0x36>
 800be88:	690b      	ldr	r3, [r1, #16]
 800be8a:	b973      	cbnz	r3, 800beaa <_svfiprintf_r+0x36>
 800be8c:	2140      	movs	r1, #64	@ 0x40
 800be8e:	f7ff fb87 	bl	800b5a0 <_malloc_r>
 800be92:	6028      	str	r0, [r5, #0]
 800be94:	6128      	str	r0, [r5, #16]
 800be96:	b930      	cbnz	r0, 800bea6 <_svfiprintf_r+0x32>
 800be98:	230c      	movs	r3, #12
 800be9a:	603b      	str	r3, [r7, #0]
 800be9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bea0:	b01d      	add	sp, #116	@ 0x74
 800bea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea6:	2340      	movs	r3, #64	@ 0x40
 800bea8:	616b      	str	r3, [r5, #20]
 800beaa:	2300      	movs	r3, #0
 800beac:	9309      	str	r3, [sp, #36]	@ 0x24
 800beae:	2320      	movs	r3, #32
 800beb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800beb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800beb8:	2330      	movs	r3, #48	@ 0x30
 800beba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c058 <_svfiprintf_r+0x1e4>
 800bebe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bec2:	f04f 0901 	mov.w	r9, #1
 800bec6:	4623      	mov	r3, r4
 800bec8:	469a      	mov	sl, r3
 800beca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bece:	b10a      	cbz	r2, 800bed4 <_svfiprintf_r+0x60>
 800bed0:	2a25      	cmp	r2, #37	@ 0x25
 800bed2:	d1f9      	bne.n	800bec8 <_svfiprintf_r+0x54>
 800bed4:	ebba 0b04 	subs.w	fp, sl, r4
 800bed8:	d00b      	beq.n	800bef2 <_svfiprintf_r+0x7e>
 800beda:	465b      	mov	r3, fp
 800bedc:	4622      	mov	r2, r4
 800bede:	4629      	mov	r1, r5
 800bee0:	4638      	mov	r0, r7
 800bee2:	f7ff ff6b 	bl	800bdbc <__ssputs_r>
 800bee6:	3001      	adds	r0, #1
 800bee8:	f000 80a7 	beq.w	800c03a <_svfiprintf_r+0x1c6>
 800beec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800beee:	445a      	add	r2, fp
 800bef0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bef2:	f89a 3000 	ldrb.w	r3, [sl]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f000 809f 	beq.w	800c03a <_svfiprintf_r+0x1c6>
 800befc:	2300      	movs	r3, #0
 800befe:	f04f 32ff 	mov.w	r2, #4294967295
 800bf02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf06:	f10a 0a01 	add.w	sl, sl, #1
 800bf0a:	9304      	str	r3, [sp, #16]
 800bf0c:	9307      	str	r3, [sp, #28]
 800bf0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf12:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf14:	4654      	mov	r4, sl
 800bf16:	2205      	movs	r2, #5
 800bf18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf1c:	484e      	ldr	r0, [pc, #312]	@ (800c058 <_svfiprintf_r+0x1e4>)
 800bf1e:	f7f4 f95f 	bl	80001e0 <memchr>
 800bf22:	9a04      	ldr	r2, [sp, #16]
 800bf24:	b9d8      	cbnz	r0, 800bf5e <_svfiprintf_r+0xea>
 800bf26:	06d0      	lsls	r0, r2, #27
 800bf28:	bf44      	itt	mi
 800bf2a:	2320      	movmi	r3, #32
 800bf2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf30:	0711      	lsls	r1, r2, #28
 800bf32:	bf44      	itt	mi
 800bf34:	232b      	movmi	r3, #43	@ 0x2b
 800bf36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf3a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf40:	d015      	beq.n	800bf6e <_svfiprintf_r+0xfa>
 800bf42:	9a07      	ldr	r2, [sp, #28]
 800bf44:	4654      	mov	r4, sl
 800bf46:	2000      	movs	r0, #0
 800bf48:	f04f 0c0a 	mov.w	ip, #10
 800bf4c:	4621      	mov	r1, r4
 800bf4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf52:	3b30      	subs	r3, #48	@ 0x30
 800bf54:	2b09      	cmp	r3, #9
 800bf56:	d94b      	bls.n	800bff0 <_svfiprintf_r+0x17c>
 800bf58:	b1b0      	cbz	r0, 800bf88 <_svfiprintf_r+0x114>
 800bf5a:	9207      	str	r2, [sp, #28]
 800bf5c:	e014      	b.n	800bf88 <_svfiprintf_r+0x114>
 800bf5e:	eba0 0308 	sub.w	r3, r0, r8
 800bf62:	fa09 f303 	lsl.w	r3, r9, r3
 800bf66:	4313      	orrs	r3, r2
 800bf68:	9304      	str	r3, [sp, #16]
 800bf6a:	46a2      	mov	sl, r4
 800bf6c:	e7d2      	b.n	800bf14 <_svfiprintf_r+0xa0>
 800bf6e:	9b03      	ldr	r3, [sp, #12]
 800bf70:	1d19      	adds	r1, r3, #4
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	9103      	str	r1, [sp, #12]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	bfbb      	ittet	lt
 800bf7a:	425b      	neglt	r3, r3
 800bf7c:	f042 0202 	orrlt.w	r2, r2, #2
 800bf80:	9307      	strge	r3, [sp, #28]
 800bf82:	9307      	strlt	r3, [sp, #28]
 800bf84:	bfb8      	it	lt
 800bf86:	9204      	strlt	r2, [sp, #16]
 800bf88:	7823      	ldrb	r3, [r4, #0]
 800bf8a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf8c:	d10a      	bne.n	800bfa4 <_svfiprintf_r+0x130>
 800bf8e:	7863      	ldrb	r3, [r4, #1]
 800bf90:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf92:	d132      	bne.n	800bffa <_svfiprintf_r+0x186>
 800bf94:	9b03      	ldr	r3, [sp, #12]
 800bf96:	1d1a      	adds	r2, r3, #4
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	9203      	str	r2, [sp, #12]
 800bf9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfa0:	3402      	adds	r4, #2
 800bfa2:	9305      	str	r3, [sp, #20]
 800bfa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c068 <_svfiprintf_r+0x1f4>
 800bfa8:	7821      	ldrb	r1, [r4, #0]
 800bfaa:	2203      	movs	r2, #3
 800bfac:	4650      	mov	r0, sl
 800bfae:	f7f4 f917 	bl	80001e0 <memchr>
 800bfb2:	b138      	cbz	r0, 800bfc4 <_svfiprintf_r+0x150>
 800bfb4:	9b04      	ldr	r3, [sp, #16]
 800bfb6:	eba0 000a 	sub.w	r0, r0, sl
 800bfba:	2240      	movs	r2, #64	@ 0x40
 800bfbc:	4082      	lsls	r2, r0
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	3401      	adds	r4, #1
 800bfc2:	9304      	str	r3, [sp, #16]
 800bfc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc8:	4824      	ldr	r0, [pc, #144]	@ (800c05c <_svfiprintf_r+0x1e8>)
 800bfca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfce:	2206      	movs	r2, #6
 800bfd0:	f7f4 f906 	bl	80001e0 <memchr>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d036      	beq.n	800c046 <_svfiprintf_r+0x1d2>
 800bfd8:	4b21      	ldr	r3, [pc, #132]	@ (800c060 <_svfiprintf_r+0x1ec>)
 800bfda:	bb1b      	cbnz	r3, 800c024 <_svfiprintf_r+0x1b0>
 800bfdc:	9b03      	ldr	r3, [sp, #12]
 800bfde:	3307      	adds	r3, #7
 800bfe0:	f023 0307 	bic.w	r3, r3, #7
 800bfe4:	3308      	adds	r3, #8
 800bfe6:	9303      	str	r3, [sp, #12]
 800bfe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfea:	4433      	add	r3, r6
 800bfec:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfee:	e76a      	b.n	800bec6 <_svfiprintf_r+0x52>
 800bff0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bff4:	460c      	mov	r4, r1
 800bff6:	2001      	movs	r0, #1
 800bff8:	e7a8      	b.n	800bf4c <_svfiprintf_r+0xd8>
 800bffa:	2300      	movs	r3, #0
 800bffc:	3401      	adds	r4, #1
 800bffe:	9305      	str	r3, [sp, #20]
 800c000:	4619      	mov	r1, r3
 800c002:	f04f 0c0a 	mov.w	ip, #10
 800c006:	4620      	mov	r0, r4
 800c008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c00c:	3a30      	subs	r2, #48	@ 0x30
 800c00e:	2a09      	cmp	r2, #9
 800c010:	d903      	bls.n	800c01a <_svfiprintf_r+0x1a6>
 800c012:	2b00      	cmp	r3, #0
 800c014:	d0c6      	beq.n	800bfa4 <_svfiprintf_r+0x130>
 800c016:	9105      	str	r1, [sp, #20]
 800c018:	e7c4      	b.n	800bfa4 <_svfiprintf_r+0x130>
 800c01a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c01e:	4604      	mov	r4, r0
 800c020:	2301      	movs	r3, #1
 800c022:	e7f0      	b.n	800c006 <_svfiprintf_r+0x192>
 800c024:	ab03      	add	r3, sp, #12
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	462a      	mov	r2, r5
 800c02a:	4b0e      	ldr	r3, [pc, #56]	@ (800c064 <_svfiprintf_r+0x1f0>)
 800c02c:	a904      	add	r1, sp, #16
 800c02e:	4638      	mov	r0, r7
 800c030:	f7fd fe98 	bl	8009d64 <_printf_float>
 800c034:	1c42      	adds	r2, r0, #1
 800c036:	4606      	mov	r6, r0
 800c038:	d1d6      	bne.n	800bfe8 <_svfiprintf_r+0x174>
 800c03a:	89ab      	ldrh	r3, [r5, #12]
 800c03c:	065b      	lsls	r3, r3, #25
 800c03e:	f53f af2d 	bmi.w	800be9c <_svfiprintf_r+0x28>
 800c042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c044:	e72c      	b.n	800bea0 <_svfiprintf_r+0x2c>
 800c046:	ab03      	add	r3, sp, #12
 800c048:	9300      	str	r3, [sp, #0]
 800c04a:	462a      	mov	r2, r5
 800c04c:	4b05      	ldr	r3, [pc, #20]	@ (800c064 <_svfiprintf_r+0x1f0>)
 800c04e:	a904      	add	r1, sp, #16
 800c050:	4638      	mov	r0, r7
 800c052:	f7fe f91f 	bl	800a294 <_printf_i>
 800c056:	e7ed      	b.n	800c034 <_svfiprintf_r+0x1c0>
 800c058:	0800cda8 	.word	0x0800cda8
 800c05c:	0800cdb2 	.word	0x0800cdb2
 800c060:	08009d65 	.word	0x08009d65
 800c064:	0800bdbd 	.word	0x0800bdbd
 800c068:	0800cdae 	.word	0x0800cdae

0800c06c <__sflush_r>:
 800c06c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c074:	0716      	lsls	r6, r2, #28
 800c076:	4605      	mov	r5, r0
 800c078:	460c      	mov	r4, r1
 800c07a:	d454      	bmi.n	800c126 <__sflush_r+0xba>
 800c07c:	684b      	ldr	r3, [r1, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	dc02      	bgt.n	800c088 <__sflush_r+0x1c>
 800c082:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c084:	2b00      	cmp	r3, #0
 800c086:	dd48      	ble.n	800c11a <__sflush_r+0xae>
 800c088:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c08a:	2e00      	cmp	r6, #0
 800c08c:	d045      	beq.n	800c11a <__sflush_r+0xae>
 800c08e:	2300      	movs	r3, #0
 800c090:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c094:	682f      	ldr	r7, [r5, #0]
 800c096:	6a21      	ldr	r1, [r4, #32]
 800c098:	602b      	str	r3, [r5, #0]
 800c09a:	d030      	beq.n	800c0fe <__sflush_r+0x92>
 800c09c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	0759      	lsls	r1, r3, #29
 800c0a2:	d505      	bpl.n	800c0b0 <__sflush_r+0x44>
 800c0a4:	6863      	ldr	r3, [r4, #4]
 800c0a6:	1ad2      	subs	r2, r2, r3
 800c0a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0aa:	b10b      	cbz	r3, 800c0b0 <__sflush_r+0x44>
 800c0ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0ae:	1ad2      	subs	r2, r2, r3
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0b4:	6a21      	ldr	r1, [r4, #32]
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	47b0      	blx	r6
 800c0ba:	1c43      	adds	r3, r0, #1
 800c0bc:	89a3      	ldrh	r3, [r4, #12]
 800c0be:	d106      	bne.n	800c0ce <__sflush_r+0x62>
 800c0c0:	6829      	ldr	r1, [r5, #0]
 800c0c2:	291d      	cmp	r1, #29
 800c0c4:	d82b      	bhi.n	800c11e <__sflush_r+0xb2>
 800c0c6:	4a2a      	ldr	r2, [pc, #168]	@ (800c170 <__sflush_r+0x104>)
 800c0c8:	410a      	asrs	r2, r1
 800c0ca:	07d6      	lsls	r6, r2, #31
 800c0cc:	d427      	bmi.n	800c11e <__sflush_r+0xb2>
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	6062      	str	r2, [r4, #4]
 800c0d2:	04d9      	lsls	r1, r3, #19
 800c0d4:	6922      	ldr	r2, [r4, #16]
 800c0d6:	6022      	str	r2, [r4, #0]
 800c0d8:	d504      	bpl.n	800c0e4 <__sflush_r+0x78>
 800c0da:	1c42      	adds	r2, r0, #1
 800c0dc:	d101      	bne.n	800c0e2 <__sflush_r+0x76>
 800c0de:	682b      	ldr	r3, [r5, #0]
 800c0e0:	b903      	cbnz	r3, 800c0e4 <__sflush_r+0x78>
 800c0e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c0e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0e6:	602f      	str	r7, [r5, #0]
 800c0e8:	b1b9      	cbz	r1, 800c11a <__sflush_r+0xae>
 800c0ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0ee:	4299      	cmp	r1, r3
 800c0f0:	d002      	beq.n	800c0f8 <__sflush_r+0x8c>
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f7ff f9e0 	bl	800b4b8 <_free_r>
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0fc:	e00d      	b.n	800c11a <__sflush_r+0xae>
 800c0fe:	2301      	movs	r3, #1
 800c100:	4628      	mov	r0, r5
 800c102:	47b0      	blx	r6
 800c104:	4602      	mov	r2, r0
 800c106:	1c50      	adds	r0, r2, #1
 800c108:	d1c9      	bne.n	800c09e <__sflush_r+0x32>
 800c10a:	682b      	ldr	r3, [r5, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d0c6      	beq.n	800c09e <__sflush_r+0x32>
 800c110:	2b1d      	cmp	r3, #29
 800c112:	d001      	beq.n	800c118 <__sflush_r+0xac>
 800c114:	2b16      	cmp	r3, #22
 800c116:	d11e      	bne.n	800c156 <__sflush_r+0xea>
 800c118:	602f      	str	r7, [r5, #0]
 800c11a:	2000      	movs	r0, #0
 800c11c:	e022      	b.n	800c164 <__sflush_r+0xf8>
 800c11e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c122:	b21b      	sxth	r3, r3
 800c124:	e01b      	b.n	800c15e <__sflush_r+0xf2>
 800c126:	690f      	ldr	r7, [r1, #16]
 800c128:	2f00      	cmp	r7, #0
 800c12a:	d0f6      	beq.n	800c11a <__sflush_r+0xae>
 800c12c:	0793      	lsls	r3, r2, #30
 800c12e:	680e      	ldr	r6, [r1, #0]
 800c130:	bf08      	it	eq
 800c132:	694b      	ldreq	r3, [r1, #20]
 800c134:	600f      	str	r7, [r1, #0]
 800c136:	bf18      	it	ne
 800c138:	2300      	movne	r3, #0
 800c13a:	eba6 0807 	sub.w	r8, r6, r7
 800c13e:	608b      	str	r3, [r1, #8]
 800c140:	f1b8 0f00 	cmp.w	r8, #0
 800c144:	dde9      	ble.n	800c11a <__sflush_r+0xae>
 800c146:	6a21      	ldr	r1, [r4, #32]
 800c148:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c14a:	4643      	mov	r3, r8
 800c14c:	463a      	mov	r2, r7
 800c14e:	4628      	mov	r0, r5
 800c150:	47b0      	blx	r6
 800c152:	2800      	cmp	r0, #0
 800c154:	dc08      	bgt.n	800c168 <__sflush_r+0xfc>
 800c156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c15a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c15e:	81a3      	strh	r3, [r4, #12]
 800c160:	f04f 30ff 	mov.w	r0, #4294967295
 800c164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c168:	4407      	add	r7, r0
 800c16a:	eba8 0800 	sub.w	r8, r8, r0
 800c16e:	e7e7      	b.n	800c140 <__sflush_r+0xd4>
 800c170:	dfbffffe 	.word	0xdfbffffe

0800c174 <_fflush_r>:
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	690b      	ldr	r3, [r1, #16]
 800c178:	4605      	mov	r5, r0
 800c17a:	460c      	mov	r4, r1
 800c17c:	b913      	cbnz	r3, 800c184 <_fflush_r+0x10>
 800c17e:	2500      	movs	r5, #0
 800c180:	4628      	mov	r0, r5
 800c182:	bd38      	pop	{r3, r4, r5, pc}
 800c184:	b118      	cbz	r0, 800c18e <_fflush_r+0x1a>
 800c186:	6a03      	ldr	r3, [r0, #32]
 800c188:	b90b      	cbnz	r3, 800c18e <_fflush_r+0x1a>
 800c18a:	f7fe fa2f 	bl	800a5ec <__sinit>
 800c18e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d0f3      	beq.n	800c17e <_fflush_r+0xa>
 800c196:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c198:	07d0      	lsls	r0, r2, #31
 800c19a:	d404      	bmi.n	800c1a6 <_fflush_r+0x32>
 800c19c:	0599      	lsls	r1, r3, #22
 800c19e:	d402      	bmi.n	800c1a6 <_fflush_r+0x32>
 800c1a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1a2:	f7fe fb3a 	bl	800a81a <__retarget_lock_acquire_recursive>
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	f7ff ff5f 	bl	800c06c <__sflush_r>
 800c1ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1b0:	07da      	lsls	r2, r3, #31
 800c1b2:	4605      	mov	r5, r0
 800c1b4:	d4e4      	bmi.n	800c180 <_fflush_r+0xc>
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	059b      	lsls	r3, r3, #22
 800c1ba:	d4e1      	bmi.n	800c180 <_fflush_r+0xc>
 800c1bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1be:	f7fe fb2d 	bl	800a81c <__retarget_lock_release_recursive>
 800c1c2:	e7dd      	b.n	800c180 <_fflush_r+0xc>

0800c1c4 <memmove>:
 800c1c4:	4288      	cmp	r0, r1
 800c1c6:	b510      	push	{r4, lr}
 800c1c8:	eb01 0402 	add.w	r4, r1, r2
 800c1cc:	d902      	bls.n	800c1d4 <memmove+0x10>
 800c1ce:	4284      	cmp	r4, r0
 800c1d0:	4623      	mov	r3, r4
 800c1d2:	d807      	bhi.n	800c1e4 <memmove+0x20>
 800c1d4:	1e43      	subs	r3, r0, #1
 800c1d6:	42a1      	cmp	r1, r4
 800c1d8:	d008      	beq.n	800c1ec <memmove+0x28>
 800c1da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1e2:	e7f8      	b.n	800c1d6 <memmove+0x12>
 800c1e4:	4402      	add	r2, r0
 800c1e6:	4601      	mov	r1, r0
 800c1e8:	428a      	cmp	r2, r1
 800c1ea:	d100      	bne.n	800c1ee <memmove+0x2a>
 800c1ec:	bd10      	pop	{r4, pc}
 800c1ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1f6:	e7f7      	b.n	800c1e8 <memmove+0x24>

0800c1f8 <_sbrk_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4d06      	ldr	r5, [pc, #24]	@ (800c214 <_sbrk_r+0x1c>)
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	4604      	mov	r4, r0
 800c200:	4608      	mov	r0, r1
 800c202:	602b      	str	r3, [r5, #0]
 800c204:	f7f6 fd60 	bl	8002cc8 <_sbrk>
 800c208:	1c43      	adds	r3, r0, #1
 800c20a:	d102      	bne.n	800c212 <_sbrk_r+0x1a>
 800c20c:	682b      	ldr	r3, [r5, #0]
 800c20e:	b103      	cbz	r3, 800c212 <_sbrk_r+0x1a>
 800c210:	6023      	str	r3, [r4, #0]
 800c212:	bd38      	pop	{r3, r4, r5, pc}
 800c214:	200008ec 	.word	0x200008ec

0800c218 <memcpy>:
 800c218:	440a      	add	r2, r1
 800c21a:	4291      	cmp	r1, r2
 800c21c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c220:	d100      	bne.n	800c224 <memcpy+0xc>
 800c222:	4770      	bx	lr
 800c224:	b510      	push	{r4, lr}
 800c226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c22a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c22e:	4291      	cmp	r1, r2
 800c230:	d1f9      	bne.n	800c226 <memcpy+0xe>
 800c232:	bd10      	pop	{r4, pc}

0800c234 <__assert_func>:
 800c234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c236:	4614      	mov	r4, r2
 800c238:	461a      	mov	r2, r3
 800c23a:	4b09      	ldr	r3, [pc, #36]	@ (800c260 <__assert_func+0x2c>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4605      	mov	r5, r0
 800c240:	68d8      	ldr	r0, [r3, #12]
 800c242:	b954      	cbnz	r4, 800c25a <__assert_func+0x26>
 800c244:	4b07      	ldr	r3, [pc, #28]	@ (800c264 <__assert_func+0x30>)
 800c246:	461c      	mov	r4, r3
 800c248:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c24c:	9100      	str	r1, [sp, #0]
 800c24e:	462b      	mov	r3, r5
 800c250:	4905      	ldr	r1, [pc, #20]	@ (800c268 <__assert_func+0x34>)
 800c252:	f000 f86f 	bl	800c334 <fiprintf>
 800c256:	f000 f87f 	bl	800c358 <abort>
 800c25a:	4b04      	ldr	r3, [pc, #16]	@ (800c26c <__assert_func+0x38>)
 800c25c:	e7f4      	b.n	800c248 <__assert_func+0x14>
 800c25e:	bf00      	nop
 800c260:	20000018 	.word	0x20000018
 800c264:	0800cdfe 	.word	0x0800cdfe
 800c268:	0800cdd0 	.word	0x0800cdd0
 800c26c:	0800cdc3 	.word	0x0800cdc3

0800c270 <_calloc_r>:
 800c270:	b570      	push	{r4, r5, r6, lr}
 800c272:	fba1 5402 	umull	r5, r4, r1, r2
 800c276:	b93c      	cbnz	r4, 800c288 <_calloc_r+0x18>
 800c278:	4629      	mov	r1, r5
 800c27a:	f7ff f991 	bl	800b5a0 <_malloc_r>
 800c27e:	4606      	mov	r6, r0
 800c280:	b928      	cbnz	r0, 800c28e <_calloc_r+0x1e>
 800c282:	2600      	movs	r6, #0
 800c284:	4630      	mov	r0, r6
 800c286:	bd70      	pop	{r4, r5, r6, pc}
 800c288:	220c      	movs	r2, #12
 800c28a:	6002      	str	r2, [r0, #0]
 800c28c:	e7f9      	b.n	800c282 <_calloc_r+0x12>
 800c28e:	462a      	mov	r2, r5
 800c290:	4621      	mov	r1, r4
 800c292:	f7fe fa44 	bl	800a71e <memset>
 800c296:	e7f5      	b.n	800c284 <_calloc_r+0x14>

0800c298 <__ascii_mbtowc>:
 800c298:	b082      	sub	sp, #8
 800c29a:	b901      	cbnz	r1, 800c29e <__ascii_mbtowc+0x6>
 800c29c:	a901      	add	r1, sp, #4
 800c29e:	b142      	cbz	r2, 800c2b2 <__ascii_mbtowc+0x1a>
 800c2a0:	b14b      	cbz	r3, 800c2b6 <__ascii_mbtowc+0x1e>
 800c2a2:	7813      	ldrb	r3, [r2, #0]
 800c2a4:	600b      	str	r3, [r1, #0]
 800c2a6:	7812      	ldrb	r2, [r2, #0]
 800c2a8:	1e10      	subs	r0, r2, #0
 800c2aa:	bf18      	it	ne
 800c2ac:	2001      	movne	r0, #1
 800c2ae:	b002      	add	sp, #8
 800c2b0:	4770      	bx	lr
 800c2b2:	4610      	mov	r0, r2
 800c2b4:	e7fb      	b.n	800c2ae <__ascii_mbtowc+0x16>
 800c2b6:	f06f 0001 	mvn.w	r0, #1
 800c2ba:	e7f8      	b.n	800c2ae <__ascii_mbtowc+0x16>

0800c2bc <_realloc_r>:
 800c2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c0:	4680      	mov	r8, r0
 800c2c2:	4615      	mov	r5, r2
 800c2c4:	460c      	mov	r4, r1
 800c2c6:	b921      	cbnz	r1, 800c2d2 <_realloc_r+0x16>
 800c2c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	f7ff b967 	b.w	800b5a0 <_malloc_r>
 800c2d2:	b92a      	cbnz	r2, 800c2e0 <_realloc_r+0x24>
 800c2d4:	f7ff f8f0 	bl	800b4b8 <_free_r>
 800c2d8:	2400      	movs	r4, #0
 800c2da:	4620      	mov	r0, r4
 800c2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2e0:	f000 f841 	bl	800c366 <_malloc_usable_size_r>
 800c2e4:	4285      	cmp	r5, r0
 800c2e6:	4606      	mov	r6, r0
 800c2e8:	d802      	bhi.n	800c2f0 <_realloc_r+0x34>
 800c2ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c2ee:	d8f4      	bhi.n	800c2da <_realloc_r+0x1e>
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	f7ff f954 	bl	800b5a0 <_malloc_r>
 800c2f8:	4607      	mov	r7, r0
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	d0ec      	beq.n	800c2d8 <_realloc_r+0x1c>
 800c2fe:	42b5      	cmp	r5, r6
 800c300:	462a      	mov	r2, r5
 800c302:	4621      	mov	r1, r4
 800c304:	bf28      	it	cs
 800c306:	4632      	movcs	r2, r6
 800c308:	f7ff ff86 	bl	800c218 <memcpy>
 800c30c:	4621      	mov	r1, r4
 800c30e:	4640      	mov	r0, r8
 800c310:	f7ff f8d2 	bl	800b4b8 <_free_r>
 800c314:	463c      	mov	r4, r7
 800c316:	e7e0      	b.n	800c2da <_realloc_r+0x1e>

0800c318 <__ascii_wctomb>:
 800c318:	4603      	mov	r3, r0
 800c31a:	4608      	mov	r0, r1
 800c31c:	b141      	cbz	r1, 800c330 <__ascii_wctomb+0x18>
 800c31e:	2aff      	cmp	r2, #255	@ 0xff
 800c320:	d904      	bls.n	800c32c <__ascii_wctomb+0x14>
 800c322:	228a      	movs	r2, #138	@ 0x8a
 800c324:	601a      	str	r2, [r3, #0]
 800c326:	f04f 30ff 	mov.w	r0, #4294967295
 800c32a:	4770      	bx	lr
 800c32c:	700a      	strb	r2, [r1, #0]
 800c32e:	2001      	movs	r0, #1
 800c330:	4770      	bx	lr
	...

0800c334 <fiprintf>:
 800c334:	b40e      	push	{r1, r2, r3}
 800c336:	b503      	push	{r0, r1, lr}
 800c338:	4601      	mov	r1, r0
 800c33a:	ab03      	add	r3, sp, #12
 800c33c:	4805      	ldr	r0, [pc, #20]	@ (800c354 <fiprintf+0x20>)
 800c33e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c342:	6800      	ldr	r0, [r0, #0]
 800c344:	9301      	str	r3, [sp, #4]
 800c346:	f000 f83f 	bl	800c3c8 <_vfiprintf_r>
 800c34a:	b002      	add	sp, #8
 800c34c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c350:	b003      	add	sp, #12
 800c352:	4770      	bx	lr
 800c354:	20000018 	.word	0x20000018

0800c358 <abort>:
 800c358:	b508      	push	{r3, lr}
 800c35a:	2006      	movs	r0, #6
 800c35c:	f000 fa08 	bl	800c770 <raise>
 800c360:	2001      	movs	r0, #1
 800c362:	f7f6 fc39 	bl	8002bd8 <_exit>

0800c366 <_malloc_usable_size_r>:
 800c366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c36a:	1f18      	subs	r0, r3, #4
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	bfbc      	itt	lt
 800c370:	580b      	ldrlt	r3, [r1, r0]
 800c372:	18c0      	addlt	r0, r0, r3
 800c374:	4770      	bx	lr

0800c376 <__sfputc_r>:
 800c376:	6893      	ldr	r3, [r2, #8]
 800c378:	3b01      	subs	r3, #1
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	b410      	push	{r4}
 800c37e:	6093      	str	r3, [r2, #8]
 800c380:	da08      	bge.n	800c394 <__sfputc_r+0x1e>
 800c382:	6994      	ldr	r4, [r2, #24]
 800c384:	42a3      	cmp	r3, r4
 800c386:	db01      	blt.n	800c38c <__sfputc_r+0x16>
 800c388:	290a      	cmp	r1, #10
 800c38a:	d103      	bne.n	800c394 <__sfputc_r+0x1e>
 800c38c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c390:	f000 b932 	b.w	800c5f8 <__swbuf_r>
 800c394:	6813      	ldr	r3, [r2, #0]
 800c396:	1c58      	adds	r0, r3, #1
 800c398:	6010      	str	r0, [r2, #0]
 800c39a:	7019      	strb	r1, [r3, #0]
 800c39c:	4608      	mov	r0, r1
 800c39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <__sfputs_r>:
 800c3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	460f      	mov	r7, r1
 800c3aa:	4614      	mov	r4, r2
 800c3ac:	18d5      	adds	r5, r2, r3
 800c3ae:	42ac      	cmp	r4, r5
 800c3b0:	d101      	bne.n	800c3b6 <__sfputs_r+0x12>
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	e007      	b.n	800c3c6 <__sfputs_r+0x22>
 800c3b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3ba:	463a      	mov	r2, r7
 800c3bc:	4630      	mov	r0, r6
 800c3be:	f7ff ffda 	bl	800c376 <__sfputc_r>
 800c3c2:	1c43      	adds	r3, r0, #1
 800c3c4:	d1f3      	bne.n	800c3ae <__sfputs_r+0xa>
 800c3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c3c8 <_vfiprintf_r>:
 800c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3cc:	460d      	mov	r5, r1
 800c3ce:	b09d      	sub	sp, #116	@ 0x74
 800c3d0:	4614      	mov	r4, r2
 800c3d2:	4698      	mov	r8, r3
 800c3d4:	4606      	mov	r6, r0
 800c3d6:	b118      	cbz	r0, 800c3e0 <_vfiprintf_r+0x18>
 800c3d8:	6a03      	ldr	r3, [r0, #32]
 800c3da:	b90b      	cbnz	r3, 800c3e0 <_vfiprintf_r+0x18>
 800c3dc:	f7fe f906 	bl	800a5ec <__sinit>
 800c3e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3e2:	07d9      	lsls	r1, r3, #31
 800c3e4:	d405      	bmi.n	800c3f2 <_vfiprintf_r+0x2a>
 800c3e6:	89ab      	ldrh	r3, [r5, #12]
 800c3e8:	059a      	lsls	r2, r3, #22
 800c3ea:	d402      	bmi.n	800c3f2 <_vfiprintf_r+0x2a>
 800c3ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3ee:	f7fe fa14 	bl	800a81a <__retarget_lock_acquire_recursive>
 800c3f2:	89ab      	ldrh	r3, [r5, #12]
 800c3f4:	071b      	lsls	r3, r3, #28
 800c3f6:	d501      	bpl.n	800c3fc <_vfiprintf_r+0x34>
 800c3f8:	692b      	ldr	r3, [r5, #16]
 800c3fa:	b99b      	cbnz	r3, 800c424 <_vfiprintf_r+0x5c>
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	4630      	mov	r0, r6
 800c400:	f000 f938 	bl	800c674 <__swsetup_r>
 800c404:	b170      	cbz	r0, 800c424 <_vfiprintf_r+0x5c>
 800c406:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c408:	07dc      	lsls	r4, r3, #31
 800c40a:	d504      	bpl.n	800c416 <_vfiprintf_r+0x4e>
 800c40c:	f04f 30ff 	mov.w	r0, #4294967295
 800c410:	b01d      	add	sp, #116	@ 0x74
 800c412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c416:	89ab      	ldrh	r3, [r5, #12]
 800c418:	0598      	lsls	r0, r3, #22
 800c41a:	d4f7      	bmi.n	800c40c <_vfiprintf_r+0x44>
 800c41c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c41e:	f7fe f9fd 	bl	800a81c <__retarget_lock_release_recursive>
 800c422:	e7f3      	b.n	800c40c <_vfiprintf_r+0x44>
 800c424:	2300      	movs	r3, #0
 800c426:	9309      	str	r3, [sp, #36]	@ 0x24
 800c428:	2320      	movs	r3, #32
 800c42a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c42e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c432:	2330      	movs	r3, #48	@ 0x30
 800c434:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c5e4 <_vfiprintf_r+0x21c>
 800c438:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c43c:	f04f 0901 	mov.w	r9, #1
 800c440:	4623      	mov	r3, r4
 800c442:	469a      	mov	sl, r3
 800c444:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c448:	b10a      	cbz	r2, 800c44e <_vfiprintf_r+0x86>
 800c44a:	2a25      	cmp	r2, #37	@ 0x25
 800c44c:	d1f9      	bne.n	800c442 <_vfiprintf_r+0x7a>
 800c44e:	ebba 0b04 	subs.w	fp, sl, r4
 800c452:	d00b      	beq.n	800c46c <_vfiprintf_r+0xa4>
 800c454:	465b      	mov	r3, fp
 800c456:	4622      	mov	r2, r4
 800c458:	4629      	mov	r1, r5
 800c45a:	4630      	mov	r0, r6
 800c45c:	f7ff ffa2 	bl	800c3a4 <__sfputs_r>
 800c460:	3001      	adds	r0, #1
 800c462:	f000 80a7 	beq.w	800c5b4 <_vfiprintf_r+0x1ec>
 800c466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c468:	445a      	add	r2, fp
 800c46a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c46c:	f89a 3000 	ldrb.w	r3, [sl]
 800c470:	2b00      	cmp	r3, #0
 800c472:	f000 809f 	beq.w	800c5b4 <_vfiprintf_r+0x1ec>
 800c476:	2300      	movs	r3, #0
 800c478:	f04f 32ff 	mov.w	r2, #4294967295
 800c47c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c480:	f10a 0a01 	add.w	sl, sl, #1
 800c484:	9304      	str	r3, [sp, #16]
 800c486:	9307      	str	r3, [sp, #28]
 800c488:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c48c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c48e:	4654      	mov	r4, sl
 800c490:	2205      	movs	r2, #5
 800c492:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c496:	4853      	ldr	r0, [pc, #332]	@ (800c5e4 <_vfiprintf_r+0x21c>)
 800c498:	f7f3 fea2 	bl	80001e0 <memchr>
 800c49c:	9a04      	ldr	r2, [sp, #16]
 800c49e:	b9d8      	cbnz	r0, 800c4d8 <_vfiprintf_r+0x110>
 800c4a0:	06d1      	lsls	r1, r2, #27
 800c4a2:	bf44      	itt	mi
 800c4a4:	2320      	movmi	r3, #32
 800c4a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4aa:	0713      	lsls	r3, r2, #28
 800c4ac:	bf44      	itt	mi
 800c4ae:	232b      	movmi	r3, #43	@ 0x2b
 800c4b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4ba:	d015      	beq.n	800c4e8 <_vfiprintf_r+0x120>
 800c4bc:	9a07      	ldr	r2, [sp, #28]
 800c4be:	4654      	mov	r4, sl
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	f04f 0c0a 	mov.w	ip, #10
 800c4c6:	4621      	mov	r1, r4
 800c4c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4cc:	3b30      	subs	r3, #48	@ 0x30
 800c4ce:	2b09      	cmp	r3, #9
 800c4d0:	d94b      	bls.n	800c56a <_vfiprintf_r+0x1a2>
 800c4d2:	b1b0      	cbz	r0, 800c502 <_vfiprintf_r+0x13a>
 800c4d4:	9207      	str	r2, [sp, #28]
 800c4d6:	e014      	b.n	800c502 <_vfiprintf_r+0x13a>
 800c4d8:	eba0 0308 	sub.w	r3, r0, r8
 800c4dc:	fa09 f303 	lsl.w	r3, r9, r3
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	9304      	str	r3, [sp, #16]
 800c4e4:	46a2      	mov	sl, r4
 800c4e6:	e7d2      	b.n	800c48e <_vfiprintf_r+0xc6>
 800c4e8:	9b03      	ldr	r3, [sp, #12]
 800c4ea:	1d19      	adds	r1, r3, #4
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	9103      	str	r1, [sp, #12]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	bfbb      	ittet	lt
 800c4f4:	425b      	neglt	r3, r3
 800c4f6:	f042 0202 	orrlt.w	r2, r2, #2
 800c4fa:	9307      	strge	r3, [sp, #28]
 800c4fc:	9307      	strlt	r3, [sp, #28]
 800c4fe:	bfb8      	it	lt
 800c500:	9204      	strlt	r2, [sp, #16]
 800c502:	7823      	ldrb	r3, [r4, #0]
 800c504:	2b2e      	cmp	r3, #46	@ 0x2e
 800c506:	d10a      	bne.n	800c51e <_vfiprintf_r+0x156>
 800c508:	7863      	ldrb	r3, [r4, #1]
 800c50a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c50c:	d132      	bne.n	800c574 <_vfiprintf_r+0x1ac>
 800c50e:	9b03      	ldr	r3, [sp, #12]
 800c510:	1d1a      	adds	r2, r3, #4
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	9203      	str	r2, [sp, #12]
 800c516:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c51a:	3402      	adds	r4, #2
 800c51c:	9305      	str	r3, [sp, #20]
 800c51e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c5f4 <_vfiprintf_r+0x22c>
 800c522:	7821      	ldrb	r1, [r4, #0]
 800c524:	2203      	movs	r2, #3
 800c526:	4650      	mov	r0, sl
 800c528:	f7f3 fe5a 	bl	80001e0 <memchr>
 800c52c:	b138      	cbz	r0, 800c53e <_vfiprintf_r+0x176>
 800c52e:	9b04      	ldr	r3, [sp, #16]
 800c530:	eba0 000a 	sub.w	r0, r0, sl
 800c534:	2240      	movs	r2, #64	@ 0x40
 800c536:	4082      	lsls	r2, r0
 800c538:	4313      	orrs	r3, r2
 800c53a:	3401      	adds	r4, #1
 800c53c:	9304      	str	r3, [sp, #16]
 800c53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c542:	4829      	ldr	r0, [pc, #164]	@ (800c5e8 <_vfiprintf_r+0x220>)
 800c544:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c548:	2206      	movs	r2, #6
 800c54a:	f7f3 fe49 	bl	80001e0 <memchr>
 800c54e:	2800      	cmp	r0, #0
 800c550:	d03f      	beq.n	800c5d2 <_vfiprintf_r+0x20a>
 800c552:	4b26      	ldr	r3, [pc, #152]	@ (800c5ec <_vfiprintf_r+0x224>)
 800c554:	bb1b      	cbnz	r3, 800c59e <_vfiprintf_r+0x1d6>
 800c556:	9b03      	ldr	r3, [sp, #12]
 800c558:	3307      	adds	r3, #7
 800c55a:	f023 0307 	bic.w	r3, r3, #7
 800c55e:	3308      	adds	r3, #8
 800c560:	9303      	str	r3, [sp, #12]
 800c562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c564:	443b      	add	r3, r7
 800c566:	9309      	str	r3, [sp, #36]	@ 0x24
 800c568:	e76a      	b.n	800c440 <_vfiprintf_r+0x78>
 800c56a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c56e:	460c      	mov	r4, r1
 800c570:	2001      	movs	r0, #1
 800c572:	e7a8      	b.n	800c4c6 <_vfiprintf_r+0xfe>
 800c574:	2300      	movs	r3, #0
 800c576:	3401      	adds	r4, #1
 800c578:	9305      	str	r3, [sp, #20]
 800c57a:	4619      	mov	r1, r3
 800c57c:	f04f 0c0a 	mov.w	ip, #10
 800c580:	4620      	mov	r0, r4
 800c582:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c586:	3a30      	subs	r2, #48	@ 0x30
 800c588:	2a09      	cmp	r2, #9
 800c58a:	d903      	bls.n	800c594 <_vfiprintf_r+0x1cc>
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d0c6      	beq.n	800c51e <_vfiprintf_r+0x156>
 800c590:	9105      	str	r1, [sp, #20]
 800c592:	e7c4      	b.n	800c51e <_vfiprintf_r+0x156>
 800c594:	fb0c 2101 	mla	r1, ip, r1, r2
 800c598:	4604      	mov	r4, r0
 800c59a:	2301      	movs	r3, #1
 800c59c:	e7f0      	b.n	800c580 <_vfiprintf_r+0x1b8>
 800c59e:	ab03      	add	r3, sp, #12
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	462a      	mov	r2, r5
 800c5a4:	4b12      	ldr	r3, [pc, #72]	@ (800c5f0 <_vfiprintf_r+0x228>)
 800c5a6:	a904      	add	r1, sp, #16
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f7fd fbdb 	bl	8009d64 <_printf_float>
 800c5ae:	4607      	mov	r7, r0
 800c5b0:	1c78      	adds	r0, r7, #1
 800c5b2:	d1d6      	bne.n	800c562 <_vfiprintf_r+0x19a>
 800c5b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5b6:	07d9      	lsls	r1, r3, #31
 800c5b8:	d405      	bmi.n	800c5c6 <_vfiprintf_r+0x1fe>
 800c5ba:	89ab      	ldrh	r3, [r5, #12]
 800c5bc:	059a      	lsls	r2, r3, #22
 800c5be:	d402      	bmi.n	800c5c6 <_vfiprintf_r+0x1fe>
 800c5c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5c2:	f7fe f92b 	bl	800a81c <__retarget_lock_release_recursive>
 800c5c6:	89ab      	ldrh	r3, [r5, #12]
 800c5c8:	065b      	lsls	r3, r3, #25
 800c5ca:	f53f af1f 	bmi.w	800c40c <_vfiprintf_r+0x44>
 800c5ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5d0:	e71e      	b.n	800c410 <_vfiprintf_r+0x48>
 800c5d2:	ab03      	add	r3, sp, #12
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	462a      	mov	r2, r5
 800c5d8:	4b05      	ldr	r3, [pc, #20]	@ (800c5f0 <_vfiprintf_r+0x228>)
 800c5da:	a904      	add	r1, sp, #16
 800c5dc:	4630      	mov	r0, r6
 800c5de:	f7fd fe59 	bl	800a294 <_printf_i>
 800c5e2:	e7e4      	b.n	800c5ae <_vfiprintf_r+0x1e6>
 800c5e4:	0800cda8 	.word	0x0800cda8
 800c5e8:	0800cdb2 	.word	0x0800cdb2
 800c5ec:	08009d65 	.word	0x08009d65
 800c5f0:	0800c3a5 	.word	0x0800c3a5
 800c5f4:	0800cdae 	.word	0x0800cdae

0800c5f8 <__swbuf_r>:
 800c5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fa:	460e      	mov	r6, r1
 800c5fc:	4614      	mov	r4, r2
 800c5fe:	4605      	mov	r5, r0
 800c600:	b118      	cbz	r0, 800c60a <__swbuf_r+0x12>
 800c602:	6a03      	ldr	r3, [r0, #32]
 800c604:	b90b      	cbnz	r3, 800c60a <__swbuf_r+0x12>
 800c606:	f7fd fff1 	bl	800a5ec <__sinit>
 800c60a:	69a3      	ldr	r3, [r4, #24]
 800c60c:	60a3      	str	r3, [r4, #8]
 800c60e:	89a3      	ldrh	r3, [r4, #12]
 800c610:	071a      	lsls	r2, r3, #28
 800c612:	d501      	bpl.n	800c618 <__swbuf_r+0x20>
 800c614:	6923      	ldr	r3, [r4, #16]
 800c616:	b943      	cbnz	r3, 800c62a <__swbuf_r+0x32>
 800c618:	4621      	mov	r1, r4
 800c61a:	4628      	mov	r0, r5
 800c61c:	f000 f82a 	bl	800c674 <__swsetup_r>
 800c620:	b118      	cbz	r0, 800c62a <__swbuf_r+0x32>
 800c622:	f04f 37ff 	mov.w	r7, #4294967295
 800c626:	4638      	mov	r0, r7
 800c628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c62a:	6823      	ldr	r3, [r4, #0]
 800c62c:	6922      	ldr	r2, [r4, #16]
 800c62e:	1a98      	subs	r0, r3, r2
 800c630:	6963      	ldr	r3, [r4, #20]
 800c632:	b2f6      	uxtb	r6, r6
 800c634:	4283      	cmp	r3, r0
 800c636:	4637      	mov	r7, r6
 800c638:	dc05      	bgt.n	800c646 <__swbuf_r+0x4e>
 800c63a:	4621      	mov	r1, r4
 800c63c:	4628      	mov	r0, r5
 800c63e:	f7ff fd99 	bl	800c174 <_fflush_r>
 800c642:	2800      	cmp	r0, #0
 800c644:	d1ed      	bne.n	800c622 <__swbuf_r+0x2a>
 800c646:	68a3      	ldr	r3, [r4, #8]
 800c648:	3b01      	subs	r3, #1
 800c64a:	60a3      	str	r3, [r4, #8]
 800c64c:	6823      	ldr	r3, [r4, #0]
 800c64e:	1c5a      	adds	r2, r3, #1
 800c650:	6022      	str	r2, [r4, #0]
 800c652:	701e      	strb	r6, [r3, #0]
 800c654:	6962      	ldr	r2, [r4, #20]
 800c656:	1c43      	adds	r3, r0, #1
 800c658:	429a      	cmp	r2, r3
 800c65a:	d004      	beq.n	800c666 <__swbuf_r+0x6e>
 800c65c:	89a3      	ldrh	r3, [r4, #12]
 800c65e:	07db      	lsls	r3, r3, #31
 800c660:	d5e1      	bpl.n	800c626 <__swbuf_r+0x2e>
 800c662:	2e0a      	cmp	r6, #10
 800c664:	d1df      	bne.n	800c626 <__swbuf_r+0x2e>
 800c666:	4621      	mov	r1, r4
 800c668:	4628      	mov	r0, r5
 800c66a:	f7ff fd83 	bl	800c174 <_fflush_r>
 800c66e:	2800      	cmp	r0, #0
 800c670:	d0d9      	beq.n	800c626 <__swbuf_r+0x2e>
 800c672:	e7d6      	b.n	800c622 <__swbuf_r+0x2a>

0800c674 <__swsetup_r>:
 800c674:	b538      	push	{r3, r4, r5, lr}
 800c676:	4b29      	ldr	r3, [pc, #164]	@ (800c71c <__swsetup_r+0xa8>)
 800c678:	4605      	mov	r5, r0
 800c67a:	6818      	ldr	r0, [r3, #0]
 800c67c:	460c      	mov	r4, r1
 800c67e:	b118      	cbz	r0, 800c688 <__swsetup_r+0x14>
 800c680:	6a03      	ldr	r3, [r0, #32]
 800c682:	b90b      	cbnz	r3, 800c688 <__swsetup_r+0x14>
 800c684:	f7fd ffb2 	bl	800a5ec <__sinit>
 800c688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c68c:	0719      	lsls	r1, r3, #28
 800c68e:	d422      	bmi.n	800c6d6 <__swsetup_r+0x62>
 800c690:	06da      	lsls	r2, r3, #27
 800c692:	d407      	bmi.n	800c6a4 <__swsetup_r+0x30>
 800c694:	2209      	movs	r2, #9
 800c696:	602a      	str	r2, [r5, #0]
 800c698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c69c:	81a3      	strh	r3, [r4, #12]
 800c69e:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a2:	e033      	b.n	800c70c <__swsetup_r+0x98>
 800c6a4:	0758      	lsls	r0, r3, #29
 800c6a6:	d512      	bpl.n	800c6ce <__swsetup_r+0x5a>
 800c6a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6aa:	b141      	cbz	r1, 800c6be <__swsetup_r+0x4a>
 800c6ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6b0:	4299      	cmp	r1, r3
 800c6b2:	d002      	beq.n	800c6ba <__swsetup_r+0x46>
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	f7fe feff 	bl	800b4b8 <_free_r>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c6be:	89a3      	ldrh	r3, [r4, #12]
 800c6c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c6c4:	81a3      	strh	r3, [r4, #12]
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	6063      	str	r3, [r4, #4]
 800c6ca:	6923      	ldr	r3, [r4, #16]
 800c6cc:	6023      	str	r3, [r4, #0]
 800c6ce:	89a3      	ldrh	r3, [r4, #12]
 800c6d0:	f043 0308 	orr.w	r3, r3, #8
 800c6d4:	81a3      	strh	r3, [r4, #12]
 800c6d6:	6923      	ldr	r3, [r4, #16]
 800c6d8:	b94b      	cbnz	r3, 800c6ee <__swsetup_r+0x7a>
 800c6da:	89a3      	ldrh	r3, [r4, #12]
 800c6dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c6e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6e4:	d003      	beq.n	800c6ee <__swsetup_r+0x7a>
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	f000 f883 	bl	800c7f4 <__smakebuf_r>
 800c6ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6f2:	f013 0201 	ands.w	r2, r3, #1
 800c6f6:	d00a      	beq.n	800c70e <__swsetup_r+0x9a>
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	60a2      	str	r2, [r4, #8]
 800c6fc:	6962      	ldr	r2, [r4, #20]
 800c6fe:	4252      	negs	r2, r2
 800c700:	61a2      	str	r2, [r4, #24]
 800c702:	6922      	ldr	r2, [r4, #16]
 800c704:	b942      	cbnz	r2, 800c718 <__swsetup_r+0xa4>
 800c706:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c70a:	d1c5      	bne.n	800c698 <__swsetup_r+0x24>
 800c70c:	bd38      	pop	{r3, r4, r5, pc}
 800c70e:	0799      	lsls	r1, r3, #30
 800c710:	bf58      	it	pl
 800c712:	6962      	ldrpl	r2, [r4, #20]
 800c714:	60a2      	str	r2, [r4, #8]
 800c716:	e7f4      	b.n	800c702 <__swsetup_r+0x8e>
 800c718:	2000      	movs	r0, #0
 800c71a:	e7f7      	b.n	800c70c <__swsetup_r+0x98>
 800c71c:	20000018 	.word	0x20000018

0800c720 <_raise_r>:
 800c720:	291f      	cmp	r1, #31
 800c722:	b538      	push	{r3, r4, r5, lr}
 800c724:	4605      	mov	r5, r0
 800c726:	460c      	mov	r4, r1
 800c728:	d904      	bls.n	800c734 <_raise_r+0x14>
 800c72a:	2316      	movs	r3, #22
 800c72c:	6003      	str	r3, [r0, #0]
 800c72e:	f04f 30ff 	mov.w	r0, #4294967295
 800c732:	bd38      	pop	{r3, r4, r5, pc}
 800c734:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c736:	b112      	cbz	r2, 800c73e <_raise_r+0x1e>
 800c738:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c73c:	b94b      	cbnz	r3, 800c752 <_raise_r+0x32>
 800c73e:	4628      	mov	r0, r5
 800c740:	f000 f830 	bl	800c7a4 <_getpid_r>
 800c744:	4622      	mov	r2, r4
 800c746:	4601      	mov	r1, r0
 800c748:	4628      	mov	r0, r5
 800c74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c74e:	f000 b817 	b.w	800c780 <_kill_r>
 800c752:	2b01      	cmp	r3, #1
 800c754:	d00a      	beq.n	800c76c <_raise_r+0x4c>
 800c756:	1c59      	adds	r1, r3, #1
 800c758:	d103      	bne.n	800c762 <_raise_r+0x42>
 800c75a:	2316      	movs	r3, #22
 800c75c:	6003      	str	r3, [r0, #0]
 800c75e:	2001      	movs	r0, #1
 800c760:	e7e7      	b.n	800c732 <_raise_r+0x12>
 800c762:	2100      	movs	r1, #0
 800c764:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c768:	4620      	mov	r0, r4
 800c76a:	4798      	blx	r3
 800c76c:	2000      	movs	r0, #0
 800c76e:	e7e0      	b.n	800c732 <_raise_r+0x12>

0800c770 <raise>:
 800c770:	4b02      	ldr	r3, [pc, #8]	@ (800c77c <raise+0xc>)
 800c772:	4601      	mov	r1, r0
 800c774:	6818      	ldr	r0, [r3, #0]
 800c776:	f7ff bfd3 	b.w	800c720 <_raise_r>
 800c77a:	bf00      	nop
 800c77c:	20000018 	.word	0x20000018

0800c780 <_kill_r>:
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4d07      	ldr	r5, [pc, #28]	@ (800c7a0 <_kill_r+0x20>)
 800c784:	2300      	movs	r3, #0
 800c786:	4604      	mov	r4, r0
 800c788:	4608      	mov	r0, r1
 800c78a:	4611      	mov	r1, r2
 800c78c:	602b      	str	r3, [r5, #0]
 800c78e:	f7f6 fa13 	bl	8002bb8 <_kill>
 800c792:	1c43      	adds	r3, r0, #1
 800c794:	d102      	bne.n	800c79c <_kill_r+0x1c>
 800c796:	682b      	ldr	r3, [r5, #0]
 800c798:	b103      	cbz	r3, 800c79c <_kill_r+0x1c>
 800c79a:	6023      	str	r3, [r4, #0]
 800c79c:	bd38      	pop	{r3, r4, r5, pc}
 800c79e:	bf00      	nop
 800c7a0:	200008ec 	.word	0x200008ec

0800c7a4 <_getpid_r>:
 800c7a4:	f7f6 ba00 	b.w	8002ba8 <_getpid>

0800c7a8 <__swhatbuf_r>:
 800c7a8:	b570      	push	{r4, r5, r6, lr}
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7b0:	2900      	cmp	r1, #0
 800c7b2:	b096      	sub	sp, #88	@ 0x58
 800c7b4:	4615      	mov	r5, r2
 800c7b6:	461e      	mov	r6, r3
 800c7b8:	da0d      	bge.n	800c7d6 <__swhatbuf_r+0x2e>
 800c7ba:	89a3      	ldrh	r3, [r4, #12]
 800c7bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c7c0:	f04f 0100 	mov.w	r1, #0
 800c7c4:	bf14      	ite	ne
 800c7c6:	2340      	movne	r3, #64	@ 0x40
 800c7c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	6031      	str	r1, [r6, #0]
 800c7d0:	602b      	str	r3, [r5, #0]
 800c7d2:	b016      	add	sp, #88	@ 0x58
 800c7d4:	bd70      	pop	{r4, r5, r6, pc}
 800c7d6:	466a      	mov	r2, sp
 800c7d8:	f000 f848 	bl	800c86c <_fstat_r>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	dbec      	blt.n	800c7ba <__swhatbuf_r+0x12>
 800c7e0:	9901      	ldr	r1, [sp, #4]
 800c7e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c7e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c7ea:	4259      	negs	r1, r3
 800c7ec:	4159      	adcs	r1, r3
 800c7ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7f2:	e7eb      	b.n	800c7cc <__swhatbuf_r+0x24>

0800c7f4 <__smakebuf_r>:
 800c7f4:	898b      	ldrh	r3, [r1, #12]
 800c7f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7f8:	079d      	lsls	r5, r3, #30
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	d507      	bpl.n	800c810 <__smakebuf_r+0x1c>
 800c800:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	6123      	str	r3, [r4, #16]
 800c808:	2301      	movs	r3, #1
 800c80a:	6163      	str	r3, [r4, #20]
 800c80c:	b003      	add	sp, #12
 800c80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c810:	ab01      	add	r3, sp, #4
 800c812:	466a      	mov	r2, sp
 800c814:	f7ff ffc8 	bl	800c7a8 <__swhatbuf_r>
 800c818:	9f00      	ldr	r7, [sp, #0]
 800c81a:	4605      	mov	r5, r0
 800c81c:	4639      	mov	r1, r7
 800c81e:	4630      	mov	r0, r6
 800c820:	f7fe febe 	bl	800b5a0 <_malloc_r>
 800c824:	b948      	cbnz	r0, 800c83a <__smakebuf_r+0x46>
 800c826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c82a:	059a      	lsls	r2, r3, #22
 800c82c:	d4ee      	bmi.n	800c80c <__smakebuf_r+0x18>
 800c82e:	f023 0303 	bic.w	r3, r3, #3
 800c832:	f043 0302 	orr.w	r3, r3, #2
 800c836:	81a3      	strh	r3, [r4, #12]
 800c838:	e7e2      	b.n	800c800 <__smakebuf_r+0xc>
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	6020      	str	r0, [r4, #0]
 800c83e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c842:	81a3      	strh	r3, [r4, #12]
 800c844:	9b01      	ldr	r3, [sp, #4]
 800c846:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c84a:	b15b      	cbz	r3, 800c864 <__smakebuf_r+0x70>
 800c84c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c850:	4630      	mov	r0, r6
 800c852:	f000 f81d 	bl	800c890 <_isatty_r>
 800c856:	b128      	cbz	r0, 800c864 <__smakebuf_r+0x70>
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	f023 0303 	bic.w	r3, r3, #3
 800c85e:	f043 0301 	orr.w	r3, r3, #1
 800c862:	81a3      	strh	r3, [r4, #12]
 800c864:	89a3      	ldrh	r3, [r4, #12]
 800c866:	431d      	orrs	r5, r3
 800c868:	81a5      	strh	r5, [r4, #12]
 800c86a:	e7cf      	b.n	800c80c <__smakebuf_r+0x18>

0800c86c <_fstat_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	4d07      	ldr	r5, [pc, #28]	@ (800c88c <_fstat_r+0x20>)
 800c870:	2300      	movs	r3, #0
 800c872:	4604      	mov	r4, r0
 800c874:	4608      	mov	r0, r1
 800c876:	4611      	mov	r1, r2
 800c878:	602b      	str	r3, [r5, #0]
 800c87a:	f7f6 f9fd 	bl	8002c78 <_fstat>
 800c87e:	1c43      	adds	r3, r0, #1
 800c880:	d102      	bne.n	800c888 <_fstat_r+0x1c>
 800c882:	682b      	ldr	r3, [r5, #0]
 800c884:	b103      	cbz	r3, 800c888 <_fstat_r+0x1c>
 800c886:	6023      	str	r3, [r4, #0]
 800c888:	bd38      	pop	{r3, r4, r5, pc}
 800c88a:	bf00      	nop
 800c88c:	200008ec 	.word	0x200008ec

0800c890 <_isatty_r>:
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	4d06      	ldr	r5, [pc, #24]	@ (800c8ac <_isatty_r+0x1c>)
 800c894:	2300      	movs	r3, #0
 800c896:	4604      	mov	r4, r0
 800c898:	4608      	mov	r0, r1
 800c89a:	602b      	str	r3, [r5, #0]
 800c89c:	f7f6 f9fc 	bl	8002c98 <_isatty>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d102      	bne.n	800c8aa <_isatty_r+0x1a>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b103      	cbz	r3, 800c8aa <_isatty_r+0x1a>
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	200008ec 	.word	0x200008ec

0800c8b0 <_init>:
 800c8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b2:	bf00      	nop
 800c8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8b6:	bc08      	pop	{r3}
 800c8b8:	469e      	mov	lr, r3
 800c8ba:	4770      	bx	lr

0800c8bc <_fini>:
 800c8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8be:	bf00      	nop
 800c8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8c2:	bc08      	pop	{r3}
 800c8c4:	469e      	mov	lr, r3
 800c8c6:	4770      	bx	lr
