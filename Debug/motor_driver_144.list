
motor_driver_144.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800c650  0800c650  0000d650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800caa0  0800caa0  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800caa0  0800caa0  0000daa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800caa8  0800caa8  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800caa8  0800caa8  0000daa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800caac  0800caac  0000daac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800cab0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d4  2**0
                  CONTENTS
 10 .bss          00000720  200001d4  200001d4  0000e1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008f4  200008f4  0000e1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001427e  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027fd  00000000  00000000  00022482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00024c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d3a  00000000  00000000  00025d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fb2  00000000  00000000  00026aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153df  00000000  00000000  00049a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5ce6  00000000  00000000  0005ee4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00134b31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058d8  00000000  00000000  00134b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0013a44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c638 	.word	0x0800c638

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800c638 	.word	0x0800c638

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <compute_ideal_speed>:
#include "drive_model.h"
#include "chassis_param.h"

void compute_ideal_speed(volatile float v, volatile float w,
		volatile float *lb_speed, volatile float *rb_speed,
		volatile float *lf_speed, volatile float *rf_speed) {
 8000c58:	b5b0      	push	{r4, r5, r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000c62:	edc7 0a04 	vstr	s1, [r7, #16]
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	603b      	str	r3, [r7, #0]
	*lb_speed = v - w * CHASSIS_WIDTH / 2.0;
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fc71 	bl	8000558 <__aeabi_f2d>
 8000c76:	4604      	mov	r4, r0
 8000c78:	460d      	mov	r5, r1
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fc6b 	bl	8000558 <__aeabi_f2d>
 8000c82:	a329      	add	r3, pc, #164	@ (adr r3, 8000d28 <compute_ideal_speed+0xd0>)
 8000c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c88:	f7ff fcbe 	bl	8000608 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4610      	mov	r0, r2
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c9c:	f7ff fdde 	bl	800085c <__aeabi_ddiv>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	f7ff faf6 	bl	8000298 <__aeabi_dsub>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f7ff ff80 	bl	8000bb8 <__aeabi_d2f>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	601a      	str	r2, [r3, #0]
	*rb_speed = v + w * CHASSIS_WIDTH / 2.0;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fc49 	bl	8000558 <__aeabi_f2d>
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fc43 	bl	8000558 <__aeabi_f2d>
 8000cd2:	a315      	add	r3, pc, #84	@ (adr r3, 8000d28 <compute_ideal_speed+0xd0>)
 8000cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd8:	f7ff fc96 	bl	8000608 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cec:	f7ff fdb6 	bl	800085c <__aeabi_ddiv>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	4629      	mov	r1, r5
 8000cf8:	f7ff fad0 	bl	800029c <__adddf3>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4610      	mov	r0, r2
 8000d02:	4619      	mov	r1, r3
 8000d04:	f7ff ff58 	bl	8000bb8 <__aeabi_d2f>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	601a      	str	r2, [r3, #0]
	*lf_speed = *lb_speed;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	601a      	str	r2, [r3, #0]
	*rf_speed = *rb_speed;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	601a      	str	r2, [r3, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bdb0      	pop	{r4, r5, r7, pc}
 8000d26:	bf00      	nop
 8000d28:	9999999a 	.word	0x9999999a
 8000d2c:	3fc99999 	.word	0x3fc99999

08000d30 <lb_forward>:
 */
#include "h_bridge_control.h"
#include "main.h"

//LB
void lb_forward(void){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d3a:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <lb_forward+0x20>)
 8000d3c:	f002 fa20 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d46:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <lb_forward+0x20>)
 8000d48:	f002 fa1a 	bl	8003180 <HAL_GPIO_WritePin>
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	48001400 	.word	0x48001400

08000d54 <lb_backward>:

void lb_backward(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <lb_backward+0x20>)
 8000d60:	f002 fa0e 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d6a:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <lb_backward+0x20>)
 8000d6c:	f002 fa08 	bl	8003180 <HAL_GPIO_WritePin>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	48001400 	.word	0x48001400

08000d78 <lb_stop>:

void lb_stop(void){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <lb_stop+0x20>)
 8000d84:	f002 f9fc 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d8e:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <lb_stop+0x20>)
 8000d90:	f002 f9f6 	bl	8003180 <HAL_GPIO_WritePin>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	48001400 	.word	0x48001400

08000d9c <rb_forward>:

//RB
void rb_forward(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2110      	movs	r1, #16
 8000da4:	4804      	ldr	r0, [pc, #16]	@ (8000db8 <rb_forward+0x1c>)
 8000da6:	f002 f9eb 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2120      	movs	r1, #32
 8000dae:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <rb_forward+0x1c>)
 8000db0:	f002 f9e6 	bl	8003180 <HAL_GPIO_WritePin>
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	48001000 	.word	0x48001000

08000dbc <rb_backward>:

void rb_backward(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <rb_backward+0x1c>)
 8000dc6:	f002 f9db 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2120      	movs	r1, #32
 8000dce:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <rb_backward+0x1c>)
 8000dd0:	f002 f9d6 	bl	8003180 <HAL_GPIO_WritePin>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	48001000 	.word	0x48001000

08000ddc <rb_stop>:

void rb_stop(void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2110      	movs	r1, #16
 8000de4:	4804      	ldr	r0, [pc, #16]	@ (8000df8 <rb_stop+0x1c>)
 8000de6:	f002 f9cb 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2120      	movs	r1, #32
 8000dee:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <rb_stop+0x1c>)
 8000df0:	f002 f9c6 	bl	8003180 <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	48001000 	.word	0x48001000

08000dfc <lf_forward>:

//LF
void lf_forward(void){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e06:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <lf_forward+0x20>)
 8000e08:	f002 f9ba 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e12:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <lf_forward+0x20>)
 8000e14:	f002 f9b4 	bl	8003180 <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	48000800 	.word	0x48000800

08000e20 <lf_backward>:

void lf_backward(void){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <lf_backward+0x20>)
 8000e2c:	f002 f9a8 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e36:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <lf_backward+0x20>)
 8000e38:	f002 f9a2 	bl	8003180 <HAL_GPIO_WritePin>
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	48000800 	.word	0x48000800

08000e44 <lf_stop>:

void lf_stop(void){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <lf_stop+0x20>)
 8000e50:	f002 f996 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e5a:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <lf_stop+0x20>)
 8000e5c:	f002 f990 	bl	8003180 <HAL_GPIO_WritePin>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	48000800 	.word	0x48000800

08000e68 <rf_forward>:

//RF
void rf_forward(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2104      	movs	r1, #4
 8000e70:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <rf_forward+0x1c>)
 8000e72:	f002 f985 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2108      	movs	r1, #8
 8000e7a:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <rf_forward+0x1c>)
 8000e7c:	f002 f980 	bl	8003180 <HAL_GPIO_WritePin>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	48001800 	.word	0x48001800

08000e88 <rf_backward>:

void rf_backward(void){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2104      	movs	r1, #4
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <rf_backward+0x1c>)
 8000e92:	f002 f975 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2108      	movs	r1, #8
 8000e9a:	4802      	ldr	r0, [pc, #8]	@ (8000ea4 <rf_backward+0x1c>)
 8000e9c:	f002 f970 	bl	8003180 <HAL_GPIO_WritePin>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	48001800 	.word	0x48001800

08000ea8 <rf_stop>:

void rf_stop(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2104      	movs	r1, #4
 8000eb0:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <rf_stop+0x1c>)
 8000eb2:	f002 f965 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2108      	movs	r1, #8
 8000eba:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <rf_stop+0x1c>)
 8000ebc:	f002 f960 	bl	8003180 <HAL_GPIO_WritePin>
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	48001800 	.word	0x48001800

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f001 fe31 	bl	8002b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f8bd 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f000 fba9 	bl	800162c <MX_GPIO_Init>
  MX_RTC_Init();
 8000eda:	f000 f92b 	bl	8001134 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000ede:	f000 fb4f 	bl	8001580 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000ee2:	f000 fb7d 	bl	80015e0 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000ee6:	f000 f94b 	bl	8001180 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eea:	f000 f9a3 	bl	8001234 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eee:	f000 fa1b 	bl	8001328 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ef2:	f000 fa6f 	bl	80013d4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000ef6:	f000 fac3 	bl	8001480 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000efa:	f000 fb1b 	bl	8001534 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim16);
 8000efe:	4847      	ldr	r0, [pc, #284]	@ (800101c <main+0x154>)
 8000f00:	f005 fa2a 	bl	8006358 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000f04:	213c      	movs	r1, #60	@ 0x3c
 8000f06:	4846      	ldr	r0, [pc, #280]	@ (8001020 <main+0x158>)
 8000f08:	f005 fca0 	bl	800684c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f0c:	213c      	movs	r1, #60	@ 0x3c
 8000f0e:	4845      	ldr	r0, [pc, #276]	@ (8001024 <main+0x15c>)
 8000f10:	f005 fc9c 	bl	800684c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000f14:	213c      	movs	r1, #60	@ 0x3c
 8000f16:	4844      	ldr	r0, [pc, #272]	@ (8001028 <main+0x160>)
 8000f18:	f005 fc98 	bl	800684c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000f1c:	213c      	movs	r1, #60	@ 0x3c
 8000f1e:	4843      	ldr	r0, [pc, #268]	@ (800102c <main+0x164>)
 8000f20:	f005 fc94 	bl	800684c <HAL_TIM_Encoder_Start>

	//start PWM
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
	set_direction(LB, BREAK);
 8000f24:	2300      	movs	r3, #0
 8000f26:	2203      	movs	r2, #3
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fd70 	bl	8001a10 <set_direction>
	set_direction(RB, BREAK);
 8000f30:	2301      	movs	r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fd6a 	bl	8001a10 <set_direction>
	set_direction(LF, BREAK);
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	2203      	movs	r2, #3
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fd64 	bl	8001a10 <set_direction>
	set_direction(RF, BREAK);
 8000f48:	2303      	movs	r3, #3
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fd5e 	bl	8001a10 <set_direction>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000f54:	4b36      	ldr	r3, [pc, #216]	@ (8001030 <main+0x168>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000f5c:	4b34      	ldr	r3, [pc, #208]	@ (8001030 <main+0x168>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2200      	movs	r2, #0
 8000f62:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000f64:	4b32      	ldr	r3, [pc, #200]	@ (8001030 <main+0x168>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000f6c:	4b30      	ldr	r3, [pc, #192]	@ (8001030 <main+0x168>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2200      	movs	r2, #0
 8000f72:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f74:	2100      	movs	r1, #0
 8000f76:	482e      	ldr	r0, [pc, #184]	@ (8001030 <main+0x168>)
 8000f78:	f005 fab6 	bl	80064e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	482c      	ldr	r0, [pc, #176]	@ (8001030 <main+0x168>)
 8000f80:	f005 fab2 	bl	80064e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f84:	2108      	movs	r1, #8
 8000f86:	482a      	ldr	r0, [pc, #168]	@ (8001030 <main+0x168>)
 8000f88:	f005 faae 	bl	80064e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000f8c:	210c      	movs	r1, #12
 8000f8e:	4828      	ldr	r0, [pc, #160]	@ (8001030 <main+0x168>)
 8000f90:	f005 faaa 	bl	80064e8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	log_to_uart("Hello\n\r");
 8000f94:	4827      	ldr	r0, [pc, #156]	@ (8001034 <main+0x16c>)
 8000f96:	f001 f9ff 	bl	8002398 <log_to_uart>
	char str[30];
//	sprintf(str, "%d", HAL_RCC_GetPCLK1Freq());
//	log_to_uart(str);

	lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
 8000f9a:	4b22      	ldr	r3, [pc, #136]	@ (8001024 <main+0x15c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa0:	4a25      	ldr	r2, [pc, #148]	@ (8001038 <main+0x170>)
 8000fa2:	6013      	str	r3, [r2, #0]
	rb_count_last = __HAL_TIM_GET_COUNTER(&htim4);
 8000fa4:	4b20      	ldr	r3, [pc, #128]	@ (8001028 <main+0x160>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000faa:	4a24      	ldr	r2, [pc, #144]	@ (800103c <main+0x174>)
 8000fac:	6013      	str	r3, [r2, #0]
	lf_count_last = __HAL_TIM_GET_COUNTER(&htim1);
 8000fae:	4b1c      	ldr	r3, [pc, #112]	@ (8001020 <main+0x158>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb4:	4a22      	ldr	r2, [pc, #136]	@ (8001040 <main+0x178>)
 8000fb6:	6013      	str	r3, [r2, #0]
	rf_count_last = __HAL_TIM_GET_COUNTER(&htim8);
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <main+0x164>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fbe:	4a21      	ldr	r2, [pc, #132]	@ (8001044 <main+0x17c>)
 8000fc0:	6013      	str	r3, [r2, #0]

	HAL_Delay(3000);
 8000fc2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc6:	f001 fe1b 	bl	8002c00 <HAL_Delay>
//		angle = (float) counter / 1320.0 * 360.0;
//		sprintf(str, "count: %ld, angle: %.2f\r\n", counter, angle);
//		log_to_uart(str);
//		HAL_Delay(100);

		v_desired = 1;
 8000fca:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <main+0x180>)
 8000fcc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000fd0:	601a      	str	r2, [r3, #0]
		reset_pid();
 8000fd2:	f000 fd89 	bl	8001ae8 <reset_pid>
		HAL_Delay(3000);
 8000fd6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fda:	f001 fe11 	bl	8002c00 <HAL_Delay>
		v_desired = 0.5;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <main+0x180>)
 8000fe0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000fe4:	601a      	str	r2, [r3, #0]
		reset_pid();
 8000fe6:	f000 fd7f 	bl	8001ae8 <reset_pid>
		HAL_Delay(3000);
 8000fea:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fee:	f001 fe07 	bl	8002c00 <HAL_Delay>
		v_desired = -1;
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <main+0x180>)
 8000ff4:	4a15      	ldr	r2, [pc, #84]	@ (800104c <main+0x184>)
 8000ff6:	601a      	str	r2, [r3, #0]
		reset_pid();
 8000ff8:	f000 fd76 	bl	8001ae8 <reset_pid>
		HAL_Delay(3000);
 8000ffc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001000:	f001 fdfe 	bl	8002c00 <HAL_Delay>
		v_desired = -0.5;
 8001004:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <main+0x180>)
 8001006:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 800100a:	601a      	str	r2, [r3, #0]
		reset_pid();
 800100c:	f000 fd6c 	bl	8001ae8 <reset_pid>
		HAL_Delay(3000);
 8001010:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001014:	f001 fdf4 	bl	8002c00 <HAL_Delay>
		v_desired = 1;
 8001018:	bf00      	nop
 800101a:	e7d6      	b.n	8000fca <main+0x102>
 800101c:	2000038c 	.word	0x2000038c
 8001020:	20000210 	.word	0x20000210
 8001024:	200002a8 	.word	0x200002a8
 8001028:	200002f4 	.word	0x200002f4
 800102c:	20000340 	.word	0x20000340
 8001030:	2000025c 	.word	0x2000025c
 8001034:	0800c650 	.word	0x0800c650
 8001038:	20000748 	.word	0x20000748
 800103c:	2000074c 	.word	0x2000074c
 8001040:	20000750 	.word	0x20000750
 8001044:	20000754 	.word	0x20000754
 8001048:	20000798 	.word	0x20000798
 800104c:	bf800000 	.word	0xbf800000

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0a6      	sub	sp, #152	@ 0x98
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800105a:	2228      	movs	r2, #40	@ 0x28
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f009 fa21 	bl	800a4a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2258      	movs	r2, #88	@ 0x58
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f009 fa13 	bl	800a4a6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001080:	2309      	movs	r3, #9
 8001082:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001084:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001088:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108a:	2301      	movs	r3, #1
 800108c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800108e:	2301      	movs	r3, #1
 8001090:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001094:	2302      	movs	r3, #2
 8001096:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800109e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010a2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 fb5f 	bl	8004778 <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80010c0:	f001 f980 	bl	80023c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	230f      	movs	r3, #15
 80010c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c8:	2302      	movs	r3, #2
 80010ca:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010d4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010da:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010de:	2102      	movs	r1, #2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 fb9d 	bl	8005820 <HAL_RCC_ClockConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80010ec:	f001 f96a 	bl	80023c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <SystemClock_Config+0xe0>)
 80010f2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80010fe:	2300      	movs	r3, #0
 8001100:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001102:	2300      	movs	r3, #0
 8001104:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001106:	2300      	movs	r3, #0
 8001108:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800110a:	2300      	movs	r3, #0
 800110c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800110e:	2300      	movs	r3, #0
 8001110:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001112:	2300      	movs	r3, #0
 8001114:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4618      	mov	r0, r3
 800111a:	f004 fda1 	bl	8005c60 <HAL_RCCEx_PeriphCLKConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001124:	f001 f94e 	bl	80023c4 <Error_Handler>
  }
}
 8001128:	bf00      	nop
 800112a:	3798      	adds	r7, #152	@ 0x98
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	00b33004 	.word	0x00b33004

08001134 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_RTC_Init+0x44>)
 800113a:	4a10      	ldr	r2, [pc, #64]	@ (800117c <MX_RTC_Init+0x48>)
 800113c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MX_RTC_Init+0x44>)
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_RTC_Init+0x44>)
 8001146:	227f      	movs	r2, #127	@ 0x7f
 8001148:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_RTC_Init+0x44>)
 800114c:	22ff      	movs	r2, #255	@ 0xff
 800114e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_RTC_Init+0x44>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <MX_RTC_Init+0x44>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_RTC_Init+0x44>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_RTC_Init+0x44>)
 8001164:	f004 ff9a 	bl	800609c <HAL_RTC_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800116e:	f001 f929 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200001f0 	.word	0x200001f0
 800117c:	40002800 	.word	0x40002800

08001180 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	@ 0x30
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	2224      	movs	r2, #36	@ 0x24
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f009 f989 	bl	800a4a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800119e:	4b23      	ldr	r3, [pc, #140]	@ (800122c <MX_TIM1_Init+0xac>)
 80011a0:	4a23      	ldr	r2, [pc, #140]	@ (8001230 <MX_TIM1_Init+0xb0>)
 80011a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011a4:	4b21      	ldr	r3, [pc, #132]	@ (800122c <MX_TIM1_Init+0xac>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <MX_TIM1_Init+0xac>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <MX_TIM1_Init+0xac>)
 80011b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <MX_TIM1_Init+0xac>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011be:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <MX_TIM1_Init+0xac>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <MX_TIM1_Init+0xac>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011ca:	2303      	movs	r3, #3
 80011cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011d2:	2301      	movs	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011e2:	2301      	movs	r3, #1
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	480d      	ldr	r0, [pc, #52]	@ (800122c <MX_TIM1_Init+0xac>)
 80011f6:	f005 fa83 	bl	8006700 <HAL_TIM_Encoder_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001200:	f001 f8e0 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	@ (800122c <MX_TIM1_Init+0xac>)
 8001216:	f006 f9bb 	bl	8007590 <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001220:	f001 f8d0 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3730      	adds	r7, #48	@ 0x30
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000210 	.word	0x20000210
 8001230:	40012c00 	.word	0x40012c00

08001234 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	@ 0x28
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001258:	4b32      	ldr	r3, [pc, #200]	@ (8001324 <MX_TIM2_Init+0xf0>)
 800125a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800125e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = APB1_FREQ / TIM2_FREQ - 1;
 8001260:	4b30      	ldr	r3, [pc, #192]	@ (8001324 <MX_TIM2_Init+0xf0>)
 8001262:	2202      	movs	r2, #2
 8001264:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b2f      	ldr	r3, [pc, #188]	@ (8001324 <MX_TIM2_Init+0xf0>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_FREQ / PWM_FREQ - 1;
 800126c:	4b2d      	ldr	r3, [pc, #180]	@ (8001324 <MX_TIM2_Init+0xf0>)
 800126e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001272:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b2b      	ldr	r3, [pc, #172]	@ (8001324 <MX_TIM2_Init+0xf0>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <MX_TIM2_Init+0xf0>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001280:	4828      	ldr	r0, [pc, #160]	@ (8001324 <MX_TIM2_Init+0xf0>)
 8001282:	f005 f8d9 	bl	8006438 <HAL_TIM_PWM_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800128c:	f001 f89a 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4821      	ldr	r0, [pc, #132]	@ (8001324 <MX_TIM2_Init+0xf0>)
 80012a0:	f006 f976 	bl	8007590 <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80012aa:	f001 f88b 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ae:	2360      	movs	r3, #96	@ 0x60
 80012b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	4619      	mov	r1, r3
 80012c4:	4817      	ldr	r0, [pc, #92]	@ (8001324 <MX_TIM2_Init+0xf0>)
 80012c6:	f005 fc51 	bl	8006b6c <HAL_TIM_PWM_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80012d0:	f001 f878 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012d4:	463b      	mov	r3, r7
 80012d6:	2204      	movs	r2, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4812      	ldr	r0, [pc, #72]	@ (8001324 <MX_TIM2_Init+0xf0>)
 80012dc:	f005 fc46 	bl	8006b6c <HAL_TIM_PWM_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80012e6:	f001 f86d 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	2208      	movs	r2, #8
 80012ee:	4619      	mov	r1, r3
 80012f0:	480c      	ldr	r0, [pc, #48]	@ (8001324 <MX_TIM2_Init+0xf0>)
 80012f2:	f005 fc3b 	bl	8006b6c <HAL_TIM_PWM_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80012fc:	f001 f862 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	220c      	movs	r2, #12
 8001304:	4619      	mov	r1, r3
 8001306:	4807      	ldr	r0, [pc, #28]	@ (8001324 <MX_TIM2_Init+0xf0>)
 8001308:	f005 fc30 	bl	8006b6c <HAL_TIM_PWM_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8001312:	f001 f857 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001316:	4803      	ldr	r0, [pc, #12]	@ (8001324 <MX_TIM2_Init+0xf0>)
 8001318:	f001 fa04 	bl	8002724 <HAL_TIM_MspPostInit>

}
 800131c:	bf00      	nop
 800131e:	3728      	adds	r7, #40	@ 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000025c 	.word	0x2000025c

08001328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	@ 0x30
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	2224      	movs	r2, #36	@ 0x24
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f009 f8b5 	bl	800a4a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <MX_TIM3_Init+0xa4>)
 8001348:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <MX_TIM3_Init+0xa8>)
 800134a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <MX_TIM3_Init+0xa4>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001352:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <MX_TIM3_Init+0xa4>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001358:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <MX_TIM3_Init+0xa4>)
 800135a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800135e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <MX_TIM3_Init+0xa4>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <MX_TIM3_Init+0xa4>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800136c:	2303      	movs	r3, #3
 800136e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001374:	2301      	movs	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001384:	2301      	movs	r3, #1
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	4619      	mov	r1, r3
 8001396:	480d      	ldr	r0, [pc, #52]	@ (80013cc <MX_TIM3_Init+0xa4>)
 8001398:	f005 f9b2 	bl	8006700 <HAL_TIM_Encoder_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013a2:	f001 f80f 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	@ (80013cc <MX_TIM3_Init+0xa4>)
 80013b4:	f006 f8ec 	bl	8007590 <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013be:	f001 f801 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	@ 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200002a8 	.word	0x200002a8
 80013d0:	40000400 	.word	0x40000400

080013d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	@ 0x30
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2224      	movs	r2, #36	@ 0x24
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f009 f85f 	bl	800a4a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	463b      	mov	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <MX_TIM4_Init+0xa4>)
 80013f4:	4a21      	ldr	r2, [pc, #132]	@ (800147c <MX_TIM4_Init+0xa8>)
 80013f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <MX_TIM4_Init+0xa4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <MX_TIM4_Init+0xa4>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001404:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <MX_TIM4_Init+0xa4>)
 8001406:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800140a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_TIM4_Init+0xa4>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001412:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <MX_TIM4_Init+0xa4>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001418:	2303      	movs	r3, #3
 800141a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001420:	2301      	movs	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001430:	2301      	movs	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	4619      	mov	r1, r3
 8001442:	480d      	ldr	r0, [pc, #52]	@ (8001478 <MX_TIM4_Init+0xa4>)
 8001444:	f005 f95c 	bl	8006700 <HAL_TIM_Encoder_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800144e:	f000 ffb9 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800145a:	463b      	mov	r3, r7
 800145c:	4619      	mov	r1, r3
 800145e:	4806      	ldr	r0, [pc, #24]	@ (8001478 <MX_TIM4_Init+0xa4>)
 8001460:	f006 f896 	bl	8007590 <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800146a:	f000 ffab 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	3730      	adds	r7, #48	@ 0x30
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200002f4 	.word	0x200002f4
 800147c:	40000800 	.word	0x40000800

08001480 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	@ 0x30
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	2224      	movs	r2, #36	@ 0x24
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f009 f809 	bl	800a4a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800149e:	4b23      	ldr	r3, [pc, #140]	@ (800152c <MX_TIM8_Init+0xac>)
 80014a0:	4a23      	ldr	r2, [pc, #140]	@ (8001530 <MX_TIM8_Init+0xb0>)
 80014a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80014a4:	4b21      	ldr	r3, [pc, #132]	@ (800152c <MX_TIM8_Init+0xac>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b20      	ldr	r3, [pc, #128]	@ (800152c <MX_TIM8_Init+0xac>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80014b0:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <MX_TIM8_Init+0xac>)
 80014b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <MX_TIM8_Init+0xac>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014be:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <MX_TIM8_Init+0xac>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <MX_TIM8_Init+0xac>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ca:	2303      	movs	r3, #3
 80014cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014d2:	2301      	movs	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014e2:	2301      	movs	r3, #1
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	4619      	mov	r1, r3
 80014f4:	480d      	ldr	r0, [pc, #52]	@ (800152c <MX_TIM8_Init+0xac>)
 80014f6:	f005 f903 	bl	8006700 <HAL_TIM_Encoder_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001500:	f000 ff60 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_TIM8_Init+0xac>)
 8001516:	f006 f83b 	bl	8007590 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001520:	f000 ff50 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3730      	adds	r7, #48	@ 0x30
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000340 	.word	0x20000340
 8001530:	40013400 	.word	0x40013400

08001534 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <MX_TIM16_Init+0x44>)
 800153a:	4a10      	ldr	r2, [pc, #64]	@ (800157c <MX_TIM16_Init+0x48>)
 800153c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = APB2_FREQ / TIM16_FREQ - 1;
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <MX_TIM16_Init+0x44>)
 8001540:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8001544:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <MX_TIM16_Init+0x44>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_FREQ / ENCODER_SAMPLE_FREQ -1;
 800154c:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <MX_TIM16_Init+0x44>)
 800154e:	22c7      	movs	r2, #199	@ 0xc7
 8001550:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <MX_TIM16_Init+0x44>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001558:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <MX_TIM16_Init+0x44>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <MX_TIM16_Init+0x44>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	@ (8001578 <MX_TIM16_Init+0x44>)
 8001566:	f004 fe9f 	bl	80062a8 <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001570:	f000 ff28 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000038c 	.word	0x2000038c
 800157c:	40014400 	.word	0x40014400

08001580 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <MX_USART3_UART_Init+0x58>)
 8001586:	4a15      	ldr	r2, [pc, #84]	@ (80015dc <MX_USART3_UART_Init+0x5c>)
 8001588:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800158a:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <MX_USART3_UART_Init+0x58>)
 800158c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001590:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_USART3_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MX_USART3_UART_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_USART3_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_USART3_UART_Init+0x58>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <MX_USART3_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_USART3_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <MX_USART3_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_USART3_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_USART3_UART_Init+0x58>)
 80015c4:	f006 f88e 	bl	80076e4 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015ce:	f000 fef9 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200003d8 	.word	0x200003d8
 80015dc:	40004800 	.word	0x40004800

080015e0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <MX_USB_PCD_Init+0x44>)
 80015e6:	4a10      	ldr	r2, [pc, #64]	@ (8001628 <MX_USB_PCD_Init+0x48>)
 80015e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <MX_USB_PCD_Init+0x44>)
 80015ec:	2208      	movs	r2, #8
 80015ee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <MX_USB_PCD_Init+0x44>)
 80015f2:	2202      	movs	r2, #2
 80015f4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <MX_USB_PCD_Init+0x44>)
 80015f8:	2202      	movs	r2, #2
 80015fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <MX_USB_PCD_Init+0x44>)
 80015fe:	2200      	movs	r2, #0
 8001600:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001602:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <MX_USB_PCD_Init+0x44>)
 8001604:	2200      	movs	r2, #0
 8001606:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <MX_USB_PCD_Init+0x44>)
 800160a:	2200      	movs	r2, #0
 800160c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	@ (8001624 <MX_USB_PCD_Init+0x44>)
 8001610:	f001 fde8 	bl	80031e4 <HAL_PCD_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800161a:	f000 fed3 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000460 	.word	0x20000460
 8001628:	40005c00 	.word	0x40005c00

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	@ 0x30
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001642:	4b6b      	ldr	r3, [pc, #428]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	4a6a      	ldr	r2, [pc, #424]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001648:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800164c:	6153      	str	r3, [r2, #20]
 800164e:	4b68      	ldr	r3, [pc, #416]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	4b65      	ldr	r3, [pc, #404]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4a64      	ldr	r2, [pc, #400]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001660:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001664:	6153      	str	r3, [r2, #20]
 8001666:	4b62      	ldr	r3, [pc, #392]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	4b5f      	ldr	r3, [pc, #380]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	4a5e      	ldr	r2, [pc, #376]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001678:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800167c:	6153      	str	r3, [r2, #20]
 800167e:	4b5c      	ldr	r3, [pc, #368]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b59      	ldr	r3, [pc, #356]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	4a58      	ldr	r2, [pc, #352]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001694:	6153      	str	r3, [r2, #20]
 8001696:	4b56      	ldr	r3, [pc, #344]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	4b53      	ldr	r3, [pc, #332]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	4a52      	ldr	r2, [pc, #328]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ac:	6153      	str	r3, [r2, #20]
 80016ae:	4b50      	ldr	r3, [pc, #320]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ba:	4b4d      	ldr	r3, [pc, #308]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	4a4c      	ldr	r2, [pc, #304]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016c4:	6153      	str	r3, [r2, #20]
 80016c6:	4b4a      	ldr	r3, [pc, #296]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d2:	4b47      	ldr	r3, [pc, #284]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	4a46      	ldr	r2, [pc, #280]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016dc:	6153      	str	r3, [r2, #20]
 80016de:	4b44      	ldr	r3, [pc, #272]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2130      	movs	r1, #48	@ 0x30
 80016ee:	4841      	ldr	r0, [pc, #260]	@ (80017f4 <MX_GPIO_Init+0x1c8>)
 80016f0:	f001 fd46 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	f244 3101 	movw	r1, #17153	@ 0x4301
 80016fa:	483f      	ldr	r0, [pc, #252]	@ (80017f8 <MX_GPIO_Init+0x1cc>)
 80016fc:	f001 fd40 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001706:	483d      	ldr	r0, [pc, #244]	@ (80017fc <MX_GPIO_Init+0x1d0>)
 8001708:	f001 fd3a 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	214e      	movs	r1, #78	@ 0x4e
 8001710:	483b      	ldr	r0, [pc, #236]	@ (8001800 <MX_GPIO_Init+0x1d4>)
 8001712:	f001 fd35 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800171c:	4839      	ldr	r0, [pc, #228]	@ (8001804 <MX_GPIO_Init+0x1d8>)
 800171e:	f001 fd2f 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001722:	2330      	movs	r3, #48	@ 0x30
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	482e      	ldr	r0, [pc, #184]	@ (80017f4 <MX_GPIO_Init+0x1c8>)
 800173a:	f001 fb97 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800173e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001744:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	482b      	ldr	r0, [pc, #172]	@ (8001804 <MX_GPIO_Init+0x1d8>)
 8001756:	f001 fb89 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_8|GPIO_PIN_9;
 800175a:	f244 3301 	movw	r3, #17153	@ 0x4301
 800175e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4821      	ldr	r0, [pc, #132]	@ (80017f8 <MX_GPIO_Init+0x1cc>)
 8001774:	f001 fb7a 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001778:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	481a      	ldr	r0, [pc, #104]	@ (80017fc <MX_GPIO_Init+0x1d0>)
 8001792:	f001 fb6b 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG2 PG3 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|USB_PowerSwitchOn_Pin;
 8001796:	234e      	movs	r3, #78	@ 0x4e
 8001798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4619      	mov	r1, r3
 80017ac:	4814      	ldr	r0, [pc, #80]	@ (8001800 <MX_GPIO_Init+0x1d4>)
 80017ae:	f001 fb5d 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017b2:	2380      	movs	r3, #128	@ 0x80
 80017b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	480e      	ldr	r0, [pc, #56]	@ (8001800 <MX_GPIO_Init+0x1d4>)
 80017c6:	f001 fb51 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4808      	ldr	r0, [pc, #32]	@ (8001804 <MX_GPIO_Init+0x1d8>)
 80017e4:	f001 fb42 	bl	8002e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e8:	bf00      	nop
 80017ea:	3730      	adds	r7, #48	@ 0x30
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	48001000 	.word	0x48001000
 80017f8:	48000400 	.word	0x48000400
 80017fc:	48001400 	.word	0x48001400
 8001800:	48001800 	.word	0x48001800
 8001804:	48000800 	.word	0x48000800

08001808 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) {
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1a      	ldr	r2, [pc, #104]	@ (8001880 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d12e      	bne.n	8001878 <HAL_TIM_PeriodElapsedCallback+0x70>
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		float time_gap = (float) (HAL_GetTick() - last_interrupt_time) / 1000.0;
 800181a:	f001 f9e5 	bl	8002be8 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800182e:	ee17 0a90 	vmov	r0, s15
 8001832:	f7fe fe91 	bl	8000558 <__aeabi_f2d>
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800183c:	f7ff f80e 	bl	800085c <__aeabi_ddiv>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f9b6 	bl	8000bb8 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	60fb      	str	r3, [r7, #12]
		if (time_gap < EPSILON) {
 8001850:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800188c <HAL_TIM_PeriodElapsedCallback+0x84>
 8001854:	edd7 7a03 	vldr	s15, [r7, #12]
 8001858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	d501      	bpl.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x5e>
			time_gap = EPSILON;
 8001862:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001864:	60fb      	str	r3, [r7, #12]
		}

		last_interrupt_time = HAL_GetTick();
 8001866:	f001 f9bf 	bl	8002be8 <HAL_GetTick>
 800186a:	4603      	mov	r3, r0
 800186c:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800186e:	6013      	str	r3, [r2, #0]
		compute_control(time_gap);
 8001870:	ed97 0a03 	vldr	s0, [r7, #12]
 8001874:	f000 f94c 	bl	8001b10 <compute_control>
//		}
//		if (duty_cycle_lb > TIM2_PRD) {
//			duty_cycle_lb = TIM2_PRD;
//		}
	}
}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40014400 	.word	0x40014400
 8001884:	20000734 	.word	0x20000734
 8001888:	408f4000 	.word	0x408f4000
 800188c:	3a83126f 	.word	0x3a83126f
 8001890:	3a83126f 	.word	0x3a83126f

08001894 <pwm_mapping>:

int pwm_mapping(int duty_cycle) {
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
//	if(duty_cycle < PWM_MIN) {
//		return PWM_MIN;
//	}
	return (int) ((float) duty_cycle / (float) TIM2_PRD
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018a6:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80018e8 <pwm_mapping+0x54>
 80018aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			* (float) (TIM2_PRD - PWM_MIN) + (float) PWM_MIN);
 80018b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018b6:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80018ec <pwm_mapping+0x58>
 80018cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d0:	ee77 7a27 	vadd.f32	s15, s14, s15
	return (int) ((float) duty_cycle / (float) TIM2_PRD
 80018d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d8:	ee17 3a90 	vmov	r3, s15
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	000003e7 	.word	0x000003e7
 80018ec:	00000258 	.word	0x00000258

080018f0 <motor_control>:

void motor_control(int motor, int control, float v_desired) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_cycle = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
	if (fabs(v_desired) > DEAD_BAND) {
 8001902:	edd7 7a01 	vldr	s15, [r7, #4]
 8001906:	eef0 7ae7 	vabs.f32	s15, s15
 800190a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80019f4 <motor_control+0x104>
 800190e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001916:	dd29      	ble.n	800196c <motor_control+0x7c>
		if (control > 0) {
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	dd1e      	ble.n	800195c <motor_control+0x6c>
			duty_cycle = control;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	617b      	str	r3, [r7, #20]
			if (v_desired > 0) {
 8001922:	edd7 7a01 	vldr	s15, [r7, #4]
 8001926:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192e:	dd0a      	ble.n	8001946 <motor_control+0x56>
				set_direction(motor, FORWARD);
 8001930:	2301      	movs	r3, #1
 8001932:	4619      	mov	r1, r3
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 f86b 	bl	8001a10 <set_direction>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800193a:	2201      	movs	r2, #1
 800193c:	2101      	movs	r1, #1
 800193e:	482e      	ldr	r0, [pc, #184]	@ (80019f8 <motor_control+0x108>)
 8001940:	f001 fc1e 	bl	8003180 <HAL_GPIO_WritePin>
 8001944:	e017      	b.n	8001976 <motor_control+0x86>
			} else {
				set_direction(motor, BACKWARD);
 8001946:	2302      	movs	r3, #2
 8001948:	4619      	mov	r1, r3
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 f860 	bl	8001a10 <set_direction>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	2101      	movs	r1, #1
 8001954:	4828      	ldr	r0, [pc, #160]	@ (80019f8 <motor_control+0x108>)
 8001956:	f001 fc13 	bl	8003180 <HAL_GPIO_WritePin>
 800195a:	e00c      	b.n	8001976 <motor_control+0x86>
			}
		} else {
			duty_cycle = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
			set_direction(motor, BREAK);
 8001960:	2303      	movs	r3, #3
 8001962:	4619      	mov	r1, r3
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f853 	bl	8001a10 <set_direction>
 800196a:	e004      	b.n	8001976 <motor_control+0x86>
		}
	} else {
		set_direction(motor, BREAK);
 800196c:	2303      	movs	r3, #3
 800196e:	4619      	mov	r1, r3
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f84d 	bl	8001a10 <set_direction>
	}

	if (duty_cycle > TIM2_PRD) {
 8001976:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	4293      	cmp	r3, r2
 800197e:	dd02      	ble.n	8001986 <motor_control+0x96>
		duty_cycle = TIM2_PRD;
 8001980:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001984:	617b      	str	r3, [r7, #20]
	}

	duty_cycle = pwm_mapping(duty_cycle);
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff84 	bl	8001894 <pwm_mapping>
 800198c:	6178      	str	r0, [r7, #20]
	if (motor == LB) {
 800198e:	2200      	movs	r2, #0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4293      	cmp	r3, r2
 8001994:	d107      	bne.n	80019a6 <motor_control+0xb6>
		duty_cycle_lb = duty_cycle;
 8001996:	4a19      	ldr	r2, [pc, #100]	@ (80019fc <motor_control+0x10c>)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 800199c:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <motor_control+0x110>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	else if (motor == RF) {
		duty_cycle_rf = duty_cycle;
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);

	}
}
 80019a4:	e022      	b.n	80019ec <motor_control+0xfc>
	else if (motor == RB) {
 80019a6:	2201      	movs	r2, #1
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d107      	bne.n	80019be <motor_control+0xce>
		duty_cycle_rb = duty_cycle;
 80019ae:	4a15      	ldr	r2, [pc, #84]	@ (8001a04 <motor_control+0x114>)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycle);
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <motor_control+0x110>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80019bc:	e016      	b.n	80019ec <motor_control+0xfc>
	else if (motor == LF) {
 80019be:	2202      	movs	r2, #2
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d107      	bne.n	80019d6 <motor_control+0xe6>
		duty_cycle_lf = duty_cycle;
 80019c6:	4a10      	ldr	r2, [pc, #64]	@ (8001a08 <motor_control+0x118>)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <motor_control+0x110>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80019d4:	e00a      	b.n	80019ec <motor_control+0xfc>
	else if (motor == RF) {
 80019d6:	2203      	movs	r2, #3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4293      	cmp	r3, r2
 80019dc:	d106      	bne.n	80019ec <motor_control+0xfc>
		duty_cycle_rf = duty_cycle;
 80019de:	4a0b      	ldr	r2, [pc, #44]	@ (8001a0c <motor_control+0x11c>)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <motor_control+0x110>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80019ec:	bf00      	nop
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	3dcccccd 	.word	0x3dcccccd
 80019f8:	48000400 	.word	0x48000400
 80019fc:	20000738 	.word	0x20000738
 8001a00:	2000025c 	.word	0x2000025c
 8001a04:	2000073c 	.word	0x2000073c
 8001a08:	20000740 	.word	0x20000740
 8001a0c:	20000744 	.word	0x20000744

08001a10 <set_direction>:

void set_direction(int motor, int direction) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	if (motor == LB){
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d114      	bne.n	8001a4c <set_direction+0x3c>
		if (direction == FORWARD) {
 8001a22:	2201      	movs	r2, #1
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d102      	bne.n	8001a30 <set_direction+0x20>
			lb_forward();
 8001a2a:	f7ff f981 	bl	8000d30 <lb_forward>
		}
		else if (direction == BREAK) {
			rf_stop();
		}
	}
}
 8001a2e:	e057      	b.n	8001ae0 <set_direction+0xd0>
		else if (direction == BACKWARD) {
 8001a30:	2202      	movs	r2, #2
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d102      	bne.n	8001a3e <set_direction+0x2e>
			lb_backward();
 8001a38:	f7ff f98c 	bl	8000d54 <lb_backward>
}
 8001a3c:	e050      	b.n	8001ae0 <set_direction+0xd0>
		else if (direction == BREAK) {
 8001a3e:	2203      	movs	r2, #3
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d14c      	bne.n	8001ae0 <set_direction+0xd0>
			lb_stop();
 8001a46:	f7ff f997 	bl	8000d78 <lb_stop>
}
 8001a4a:	e049      	b.n	8001ae0 <set_direction+0xd0>
	else if (motor == RB) {
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d114      	bne.n	8001a7e <set_direction+0x6e>
		if (direction == FORWARD) {
 8001a54:	2201      	movs	r2, #1
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d102      	bne.n	8001a62 <set_direction+0x52>
			rb_forward();
 8001a5c:	f7ff f99e 	bl	8000d9c <rb_forward>
}
 8001a60:	e03e      	b.n	8001ae0 <set_direction+0xd0>
		else if (direction == BACKWARD) {
 8001a62:	2202      	movs	r2, #2
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d102      	bne.n	8001a70 <set_direction+0x60>
			rb_backward();
 8001a6a:	f7ff f9a7 	bl	8000dbc <rb_backward>
}
 8001a6e:	e037      	b.n	8001ae0 <set_direction+0xd0>
		else if (direction == BREAK) {
 8001a70:	2203      	movs	r2, #3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d133      	bne.n	8001ae0 <set_direction+0xd0>
			rb_stop();
 8001a78:	f7ff f9b0 	bl	8000ddc <rb_stop>
}
 8001a7c:	e030      	b.n	8001ae0 <set_direction+0xd0>
	else if (motor == LF) {
 8001a7e:	2202      	movs	r2, #2
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d114      	bne.n	8001ab0 <set_direction+0xa0>
		if (direction == FORWARD) {
 8001a86:	2201      	movs	r2, #1
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d102      	bne.n	8001a94 <set_direction+0x84>
			lf_forward();
 8001a8e:	f7ff f9b5 	bl	8000dfc <lf_forward>
}
 8001a92:	e025      	b.n	8001ae0 <set_direction+0xd0>
		} else if (direction == BACKWARD) {
 8001a94:	2202      	movs	r2, #2
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d102      	bne.n	8001aa2 <set_direction+0x92>
			lf_backward();
 8001a9c:	f7ff f9c0 	bl	8000e20 <lf_backward>
}
 8001aa0:	e01e      	b.n	8001ae0 <set_direction+0xd0>
		} else if (direction == BREAK) {
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d11a      	bne.n	8001ae0 <set_direction+0xd0>
			lf_stop();
 8001aaa:	f7ff f9cb 	bl	8000e44 <lf_stop>
}
 8001aae:	e017      	b.n	8001ae0 <set_direction+0xd0>
	else if (motor == RF) {
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d113      	bne.n	8001ae0 <set_direction+0xd0>
		if (direction == FORWARD) {
 8001ab8:	2201      	movs	r2, #1
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d102      	bne.n	8001ac6 <set_direction+0xb6>
			rf_forward();
 8001ac0:	f7ff f9d2 	bl	8000e68 <rf_forward>
}
 8001ac4:	e00c      	b.n	8001ae0 <set_direction+0xd0>
		else if (direction == BACKWARD) {
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d102      	bne.n	8001ad4 <set_direction+0xc4>
			rf_backward();
 8001ace:	f7ff f9db 	bl	8000e88 <rf_backward>
}
 8001ad2:	e005      	b.n	8001ae0 <set_direction+0xd0>
		else if (direction == BREAK) {
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d101      	bne.n	8001ae0 <set_direction+0xd0>
			rf_stop();
 8001adc:	f7ff f9e4 	bl	8000ea8 <rf_stop>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <reset_pid>:

void reset_pid(void) {
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
	lb_integral = 0.0;
 8001aec:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <reset_pid+0x20>)
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
	lb_previous_err = 0.0;
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <reset_pid+0x24>)
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000778 	.word	0x20000778
 8001b0c:	2000077c 	.word	0x2000077c

08001b10 <compute_control>:

void compute_control(float time_gap) {
 8001b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b14:	b0dd      	sub	sp, #372	@ 0x174
 8001b16:	af10      	add	r7, sp, #64	@ 0x40
 8001b18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b20:	ed83 0a00 	vstr	s0, [r3]
	int lb_control = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	int rb_control = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	int lf_control = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	int rf_control = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	const float Kp = 1000, Ki = 7500, Kd = 0.0;
 8001b3c:	4be7      	ldr	r3, [pc, #924]	@ (8001edc <compute_control+0x3cc>)
 8001b3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001b42:	4be7      	ldr	r3, [pc, #924]	@ (8001ee0 <compute_control+0x3d0>)
 8001b44:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	compute_ideal_speed(v_desired, w_desired, &lb_speed_ideal,
 8001b50:	4be4      	ldr	r3, [pc, #912]	@ (8001ee4 <compute_control+0x3d4>)
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	4be4      	ldr	r3, [pc, #912]	@ (8001ee8 <compute_control+0x3d8>)
 8001b58:	ed93 7a00 	vldr	s14, [r3]
 8001b5c:	4be3      	ldr	r3, [pc, #908]	@ (8001eec <compute_control+0x3dc>)
 8001b5e:	4ae4      	ldr	r2, [pc, #912]	@ (8001ef0 <compute_control+0x3e0>)
 8001b60:	49e4      	ldr	r1, [pc, #912]	@ (8001ef4 <compute_control+0x3e4>)
 8001b62:	48e5      	ldr	r0, [pc, #916]	@ (8001ef8 <compute_control+0x3e8>)
 8001b64:	eef0 0a47 	vmov.f32	s1, s14
 8001b68:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6c:	f7ff f874 	bl	8000c58 <compute_ideal_speed>
			&rb_speed_ideal, &lf_speed_ideal, &rf_speed_ideal);

	// compute control for left side
	lb_speed_real = compute_real_speed(time_gap, LB);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	ed93 0a00 	vldr	s0, [r3]
 8001b80:	f000 fa9e 	bl	80020c0 <compute_real_speed>
 8001b84:	eef0 7a40 	vmov.f32	s15, s0
 8001b88:	4bdc      	ldr	r3, [pc, #880]	@ (8001efc <compute_control+0x3ec>)
 8001b8a:	edc3 7a00 	vstr	s15, [r3]
	float lb_error = fabs(lb_speed_ideal) - fabs(lb_speed_real);
 8001b8e:	4bda      	ldr	r3, [pc, #872]	@ (8001ef8 <compute_control+0x3e8>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	eef0 7ae7 	vabs.f32	s15, s15
 8001b98:	ee17 0a90 	vmov	r0, s15
 8001b9c:	f7fe fcdc 	bl	8000558 <__aeabi_f2d>
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	460d      	mov	r5, r1
 8001ba4:	4bd5      	ldr	r3, [pc, #852]	@ (8001efc <compute_control+0x3ec>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	eef0 7ae7 	vabs.f32	s15, s15
 8001bae:	ee17 0a90 	vmov	r0, s15
 8001bb2:	f7fe fcd1 	bl	8000558 <__aeabi_f2d>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4620      	mov	r0, r4
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	f7fe fb6b 	bl	8000298 <__aeabi_dsub>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe fff5 	bl	8000bb8 <__aeabi_d2f>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	lb_integral += lb_error * time_gap;
 8001bd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001bd8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bdc:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be8:	4bc5      	ldr	r3, [pc, #788]	@ (8001f00 <compute_control+0x3f0>)
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf2:	4bc3      	ldr	r3, [pc, #780]	@ (8001f00 <compute_control+0x3f0>)
 8001bf4:	edc3 7a00 	vstr	s15, [r3]
	float lb_derivative = (lb_error - lb_previous_err) / time_gap;
 8001bf8:	4bc2      	ldr	r3, [pc, #776]	@ (8001f04 <compute_control+0x3f4>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 8001c02:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001c0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c0e:	ed93 7a00 	vldr	s14, [r3]
 8001c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c16:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
	lb_previous_err = lb_error;
 8001c1a:	4aba      	ldr	r2, [pc, #744]	@ (8001f04 <compute_control+0x3f4>)
 8001c1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001c20:	6013      	str	r3, [r2, #0]
	lb_control = (int) (Kp * lb_error + Ki * lb_integral
 8001c22:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8001c26:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8001c2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2e:	4bb4      	ldr	r3, [pc, #720]	@ (8001f00 <compute_control+0x3f0>)
 8001c30:	edd3 6a00 	vldr	s13, [r3]
 8001c34:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8001c38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * lb_derivative);
 8001c40:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 8001c44:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8001c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
	lb_control = (int) (Kp * lb_error + Ki * lb_integral
 8001c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c54:	ee17 3a90 	vmov	r3, s15
 8001c58:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	lf_speed_real = compute_real_speed(time_gap, LF);
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001c62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c66:	4610      	mov	r0, r2
 8001c68:	ed93 0a00 	vldr	s0, [r3]
 8001c6c:	f000 fa28 	bl	80020c0 <compute_real_speed>
 8001c70:	eef0 7a40 	vmov.f32	s15, s0
 8001c74:	4ba4      	ldr	r3, [pc, #656]	@ (8001f08 <compute_control+0x3f8>)
 8001c76:	edc3 7a00 	vstr	s15, [r3]
	float lf_error = fabs(lf_speed_ideal) - fabs(lf_speed_real);
 8001c7a:	4b9d      	ldr	r3, [pc, #628]	@ (8001ef0 <compute_control+0x3e0>)
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	eef0 7ae7 	vabs.f32	s15, s15
 8001c84:	ee17 0a90 	vmov	r0, s15
 8001c88:	f7fe fc66 	bl	8000558 <__aeabi_f2d>
 8001c8c:	4604      	mov	r4, r0
 8001c8e:	460d      	mov	r5, r1
 8001c90:	4b9d      	ldr	r3, [pc, #628]	@ (8001f08 <compute_control+0x3f8>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	eef0 7ae7 	vabs.f32	s15, s15
 8001c9a:	ee17 0a90 	vmov	r0, s15
 8001c9e:	f7fe fc5b 	bl	8000558 <__aeabi_f2d>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	f7fe faf5 	bl	8000298 <__aeabi_dsub>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe ff7f 	bl	8000bb8 <__aeabi_d2f>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	lf_integral += lf_error * time_gap;
 8001cc0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001cc4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cc8:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd4:	4b8d      	ldr	r3, [pc, #564]	@ (8001f0c <compute_control+0x3fc>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cde:	4b8b      	ldr	r3, [pc, #556]	@ (8001f0c <compute_control+0x3fc>)
 8001ce0:	edc3 7a00 	vstr	s15, [r3]
	float lf_derivative = (lf_error - lf_previous_err) / time_gap;
 8001ce4:	4b8a      	ldr	r3, [pc, #552]	@ (8001f10 <compute_control+0x400>)
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 8001cee:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cf2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001cf6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cfa:	ed93 7a00 	vldr	s14, [r3]
 8001cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d02:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
	lf_previous_err = lf_error;
 8001d06:	4a82      	ldr	r2, [pc, #520]	@ (8001f10 <compute_control+0x400>)
 8001d08:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001d0c:	6013      	str	r3, [r2, #0]
	lf_control = (int) (Kp * lf_error + Ki * lf_integral
 8001d0e:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8001d12:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8001d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f0c <compute_control+0x3fc>)
 8001d1c:	edd3 6a00 	vldr	s13, [r3]
 8001d20:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8001d24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d28:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * lf_derivative);
 8001d2c:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 8001d30:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8001d34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d38:	ee77 7a27 	vadd.f32	s15, s14, s15
	lf_control = (int) (Kp * lf_error + Ki * lf_integral
 8001d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d40:	ee17 3a90 	vmov	r3, s15
 8001d44:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

	//compute control for right speed
	rb_speed_real = compute_real_speed(time_gap, RB);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d52:	4610      	mov	r0, r2
 8001d54:	ed93 0a00 	vldr	s0, [r3]
 8001d58:	f000 f9b2 	bl	80020c0 <compute_real_speed>
 8001d5c:	eef0 7a40 	vmov.f32	s15, s0
 8001d60:	4b6c      	ldr	r3, [pc, #432]	@ (8001f14 <compute_control+0x404>)
 8001d62:	edc3 7a00 	vstr	s15, [r3]
	float rb_error = fabs(rb_speed_ideal) - fabs(rb_speed_real);
 8001d66:	4b63      	ldr	r3, [pc, #396]	@ (8001ef4 <compute_control+0x3e4>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	eef0 7ae7 	vabs.f32	s15, s15
 8001d70:	ee17 0a90 	vmov	r0, s15
 8001d74:	f7fe fbf0 	bl	8000558 <__aeabi_f2d>
 8001d78:	4604      	mov	r4, r0
 8001d7a:	460d      	mov	r5, r1
 8001d7c:	4b65      	ldr	r3, [pc, #404]	@ (8001f14 <compute_control+0x404>)
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	eef0 7ae7 	vabs.f32	s15, s15
 8001d86:	ee17 0a90 	vmov	r0, s15
 8001d8a:	f7fe fbe5 	bl	8000558 <__aeabi_f2d>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4620      	mov	r0, r4
 8001d94:	4629      	mov	r1, r5
 8001d96:	f7fe fa7f 	bl	8000298 <__aeabi_dsub>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7fe ff09 	bl	8000bb8 <__aeabi_d2f>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	rb_integral += rb_error * time_gap;
 8001dac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001db0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001db4:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc0:	4b55      	ldr	r3, [pc, #340]	@ (8001f18 <compute_control+0x408>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dca:	4b53      	ldr	r3, [pc, #332]	@ (8001f18 <compute_control+0x408>)
 8001dcc:	edc3 7a00 	vstr	s15, [r3]
	float rb_derivative = (rb_error - rb_previous_err) / time_gap;
 8001dd0:	4b52      	ldr	r3, [pc, #328]	@ (8001f1c <compute_control+0x40c>)
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8001dda:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001dde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001de2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dee:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc
	rb_previous_err = rb_error;
 8001df2:	4a4a      	ldr	r2, [pc, #296]	@ (8001f1c <compute_control+0x40c>)
 8001df4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001df8:	6013      	str	r3, [r2, #0]
	rb_control = (int) (Kp * rb_error + Ki * rb_integral
 8001dfa:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8001dfe:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8001e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e06:	4b44      	ldr	r3, [pc, #272]	@ (8001f18 <compute_control+0x408>)
 8001e08:	edd3 6a00 	vldr	s13, [r3]
 8001e0c:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8001e10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e14:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * rb_derivative);
 8001e18:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 8001e1c:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8001e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e24:	ee77 7a27 	vadd.f32	s15, s14, s15
	rb_control = (int) (Kp * rb_error + Ki * rb_integral
 8001e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2c:	ee17 3a90 	vmov	r3, s15
 8001e30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	rf_speed_real = compute_real_speed(time_gap, RF);
 8001e34:	2203      	movs	r2, #3
 8001e36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001e3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e3e:	4610      	mov	r0, r2
 8001e40:	ed93 0a00 	vldr	s0, [r3]
 8001e44:	f000 f93c 	bl	80020c0 <compute_real_speed>
 8001e48:	eef0 7a40 	vmov.f32	s15, s0
 8001e4c:	4b34      	ldr	r3, [pc, #208]	@ (8001f20 <compute_control+0x410>)
 8001e4e:	edc3 7a00 	vstr	s15, [r3]
	float rf_error = fabs(rf_speed_ideal) - fabs(rf_speed_real);
 8001e52:	4b26      	ldr	r3, [pc, #152]	@ (8001eec <compute_control+0x3dc>)
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	eef0 7ae7 	vabs.f32	s15, s15
 8001e5c:	ee17 0a90 	vmov	r0, s15
 8001e60:	f7fe fb7a 	bl	8000558 <__aeabi_f2d>
 8001e64:	4604      	mov	r4, r0
 8001e66:	460d      	mov	r5, r1
 8001e68:	4b2d      	ldr	r3, [pc, #180]	@ (8001f20 <compute_control+0x410>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	eef0 7ae7 	vabs.f32	s15, s15
 8001e72:	ee17 0a90 	vmov	r0, s15
 8001e76:	f7fe fb6f 	bl	8000558 <__aeabi_f2d>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4629      	mov	r1, r5
 8001e82:	f7fe fa09 	bl	8000298 <__aeabi_dsub>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f7fe fe93 	bl	8000bb8 <__aeabi_d2f>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
	rf_integral += rf_error * time_gap;
 8001e98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001e9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ea0:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eac:	4b1d      	ldr	r3, [pc, #116]	@ (8001f24 <compute_control+0x414>)
 8001eae:	edd3 7a00 	vldr	s15, [r3]
 8001eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <compute_control+0x414>)
 8001eb8:	edc3 7a00 	vstr	s15, [r3]
	float rf_derivative = (rf_error - rf_previous_err) / time_gap;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <compute_control+0x418>)
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8001ec6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001eca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ece:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ed2:	ed93 7a00 	vldr	s14, [r3]
 8001ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eda:	e027      	b.n	8001f2c <compute_control+0x41c>
 8001edc:	447a0000 	.word	0x447a0000
 8001ee0:	45ea6000 	.word	0x45ea6000
 8001ee4:	20000798 	.word	0x20000798
 8001ee8:	2000079c 	.word	0x2000079c
 8001eec:	20000774 	.word	0x20000774
 8001ef0:	20000770 	.word	0x20000770
 8001ef4:	2000076c 	.word	0x2000076c
 8001ef8:	20000768 	.word	0x20000768
 8001efc:	20000758 	.word	0x20000758
 8001f00:	20000778 	.word	0x20000778
 8001f04:	2000077c 	.word	0x2000077c
 8001f08:	20000760 	.word	0x20000760
 8001f0c:	20000788 	.word	0x20000788
 8001f10:	2000078c 	.word	0x2000078c
 8001f14:	2000075c 	.word	0x2000075c
 8001f18:	20000780 	.word	0x20000780
 8001f1c:	20000784 	.word	0x20000784
 8001f20:	20000764 	.word	0x20000764
 8001f24:	20000790 	.word	0x20000790
 8001f28:	20000794 	.word	0x20000794
 8001f2c:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
	rf_previous_err = rf_error;
 8001f30:	4a57      	ldr	r2, [pc, #348]	@ (8002090 <compute_control+0x580>)
 8001f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001f36:	6013      	str	r3, [r2, #0]
	rf_control = (int) (Kp * rf_error + Ki * rf_integral
 8001f38:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8001f3c:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8001f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f44:	4b53      	ldr	r3, [pc, #332]	@ (8002094 <compute_control+0x584>)
 8001f46:	edd3 6a00 	vldr	s13, [r3]
 8001f4a:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8001f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f52:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * rf_derivative);
 8001f56:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 8001f5a:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8001f5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f62:	ee77 7a27 	vadd.f32	s15, s14, s15
	rf_control = (int) (Kp * rf_error + Ki * rf_integral
 8001f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6a:	ee17 3a90 	vmov	r3, s15
 8001f6e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	motor_control(LB, lb_control, lb_speed_ideal);
 8001f72:	2200      	movs	r2, #0
 8001f74:	4b48      	ldr	r3, [pc, #288]	@ (8002098 <compute_control+0x588>)
 8001f76:	edd3 7a00 	vldr	s15, [r3]
 8001f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7e:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8001f82:	4610      	mov	r0, r2
 8001f84:	f7ff fcb4 	bl	80018f0 <motor_control>
	motor_control(LF, lf_control, lf_speed_ideal);
 8001f88:	2202      	movs	r2, #2
 8001f8a:	4b44      	ldr	r3, [pc, #272]	@ (800209c <compute_control+0x58c>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	eeb0 0a67 	vmov.f32	s0, s15
 8001f94:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8001f98:	4610      	mov	r0, r2
 8001f9a:	f7ff fca9 	bl	80018f0 <motor_control>
	motor_control(RB, rb_control, rb_speed_ideal);
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4b3f      	ldr	r3, [pc, #252]	@ (80020a0 <compute_control+0x590>)
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001faa:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f7ff fc9e 	bl	80018f0 <motor_control>
	motor_control(RF, rf_control, rf_speed_ideal);
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80020a4 <compute_control+0x594>)
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc0:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	f7ff fc93 	bl	80018f0 <motor_control>

	char temp_str[200];
	sprintf(temp_str,
 8001fca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001fce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	f7fe fac0 	bl	8000558 <__aeabi_f2d>
 8001fd8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001fdc:	4b32      	ldr	r3, [pc, #200]	@ (80020a8 <compute_control+0x598>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fab9 	bl	8000558 <__aeabi_f2d>
 8001fe6:	4605      	mov	r5, r0
 8001fe8:	460e      	mov	r6, r1
 8001fea:	4b30      	ldr	r3, [pc, #192]	@ (80020ac <compute_control+0x59c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fab2 	bl	8000558 <__aeabi_f2d>
 8001ff4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001ff8:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001ffc:	f7fe faac 	bl	8000558 <__aeabi_f2d>
 8002000:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002004:	4b2a      	ldr	r3, [pc, #168]	@ (80020b0 <compute_control+0x5a0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe faa5 	bl	8000558 <__aeabi_f2d>
 800200e:	e9c7 0100 	strd	r0, r1, [r7]
 8002012:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002016:	f7fe fa9f 	bl	8000558 <__aeabi_f2d>
 800201a:	4682      	mov	sl, r0
 800201c:	468b      	mov	fp, r1
 800201e:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <compute_control+0x588>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fa98 	bl	8000558 <__aeabi_f2d>
 8002028:	4680      	mov	r8, r0
 800202a:	4689      	mov	r9, r1
 800202c:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <compute_control+0x5a4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fa91 	bl	8000558 <__aeabi_f2d>
 8002036:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <compute_control+0x5a8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800203e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002040:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002044:	930e      	str	r3, [sp, #56]	@ 0x38
 8002046:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800204a:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 800204e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002052:	ed97 7b00 	vldr	d7, [r7]
 8002056:	ed8d 7b06 	vstr	d7, [sp, #24]
 800205a:	ed97 7b02 	vldr	d7, [r7, #8]
 800205e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002062:	ed97 7b04 	vldr	d7, [r7, #16]
 8002066:	ed8d 7b02 	vstr	d7, [sp, #8]
 800206a:	e9cd 5600 	strd	r5, r6, [sp]
 800206e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002072:	4912      	ldr	r1, [pc, #72]	@ (80020bc <compute_control+0x5ac>)
 8002074:	4620      	mov	r0, r4
 8002076:	f008 f9b3 	bl	800a3e0 <siprintf>
			"[Δt: %6.2f s] v: %+6.2f | w: %+6.2f | err: %+6.2f | int: %+6.2f | der: %+6.2f | LB Ideal: %+6.2f | LB Real: %+6.2f | LB Control: %04d | LB Duty Cycle: %03d\r\n",
			time_gap, v_desired, w_desired, lb_error, lb_integral,
			lb_derivative, lb_speed_ideal, lb_speed_real, lb_control,
			duty_cycle_lb);
	log_to_uart(temp_str);
 800207a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f98a 	bl	8002398 <log_to_uart>
//			"[Δt: %6.2f s] v: %+6.2f | w: %+6.2f | err: %+6.2f | int: %+6.2f | der: %+6.2f | LB Ideal: %+6.2f | LB Real: %+6.2f | LB Control: %04d | LB Duty Cycle: %03d\r\n",
//			time_gap, v_desired, w_desired, rf_error, rf_integral,
//			rf_derivative, rf_speed_ideal, rf_speed_real, rf_control,
//			duty_cycle_rf);
//	log_to_uart(temp_str);
}
 8002084:	bf00      	nop
 8002086:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800208a:	46bd      	mov	sp, r7
 800208c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002090:	20000794 	.word	0x20000794
 8002094:	20000790 	.word	0x20000790
 8002098:	20000768 	.word	0x20000768
 800209c:	20000770 	.word	0x20000770
 80020a0:	2000076c 	.word	0x2000076c
 80020a4:	20000774 	.word	0x20000774
 80020a8:	20000798 	.word	0x20000798
 80020ac:	2000079c 	.word	0x2000079c
 80020b0:	20000778 	.word	0x20000778
 80020b4:	20000758 	.word	0x20000758
 80020b8:	20000738 	.word	0x20000738
 80020bc:	0800c658 	.word	0x0800c658

080020c0 <compute_real_speed>:
//			lb_angle_current, lb_angle_diff);
//	log_to_uart(temp_str);
	lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
}

float compute_real_speed(float time_gap, int motor) {
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80020ca:	6038      	str	r0, [r7, #0]
	int16_t count_diff = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	817b      	strh	r3, [r7, #10]
	float speed_real = 0.0;
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
	if (motor == LB) {
 80020d6:	2200      	movs	r2, #0
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4293      	cmp	r3, r2
 80020dc:	d149      	bne.n	8002172 <compute_real_speed+0xb2>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim3) - lb_count_last);
 80020de:	4ba4      	ldr	r3, [pc, #656]	@ (8002370 <compute_real_speed+0x2b0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	4ba3      	ldr	r3, [pc, #652]	@ (8002374 <compute_real_speed+0x2b4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	817b      	strh	r3, [r7, #10]
		speed_real = -1 * count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 80020f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80020f6:	425b      	negs	r3, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fa1b 	bl	8000534 <__aeabi_i2d>
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	4b9d      	ldr	r3, [pc, #628]	@ (8002378 <compute_real_speed+0x2b8>)
 8002104:	f7fe fbaa 	bl	800085c <__aeabi_ddiv>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	f7fe f8c2 	bl	800029c <__adddf3>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	a38f      	add	r3, pc, #572	@ (adr r3, 8002360 <compute_real_speed+0x2a0>)
 8002122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002126:	f7fe fa6f 	bl	8000608 <__aeabi_dmul>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	a38d      	add	r3, pc, #564	@ (adr r3, 8002368 <compute_real_speed+0x2a8>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f7fe fa66 	bl	8000608 <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4614      	mov	r4, r2
 8002142:	461d      	mov	r5, r3
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7fe fa07 	bl	8000558 <__aeabi_f2d>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4620      	mov	r0, r4
 8002150:	4629      	mov	r1, r5
 8002152:	f7fe fb83 	bl	800085c <__aeabi_ddiv>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	f7fe fd2b 	bl	8000bb8 <__aeabi_d2f>
 8002162:	4603      	mov	r3, r0
 8002164:	60fb      	str	r3, [r7, #12]
		lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
 8002166:	4b82      	ldr	r3, [pc, #520]	@ (8002370 <compute_real_speed+0x2b0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216c:	4a81      	ldr	r2, [pc, #516]	@ (8002374 <compute_real_speed+0x2b4>)
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	e0eb      	b.n	800234a <compute_real_speed+0x28a>
	}
	else if (motor == RB) {
 8002172:	2201      	movs	r2, #1
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4293      	cmp	r3, r2
 8002178:	d148      	bne.n	800220c <compute_real_speed+0x14c>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim4) - rb_count_last);
 800217a:	4b80      	ldr	r3, [pc, #512]	@ (800237c <compute_real_speed+0x2bc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	b29a      	uxth	r2, r3
 8002182:	4b7f      	ldr	r3, [pc, #508]	@ (8002380 <compute_real_speed+0x2c0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	b29b      	uxth	r3, r3
 800218c:	817b      	strh	r3, [r7, #10]
		speed_real = count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 800218e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f9ce 	bl	8000534 <__aeabi_i2d>
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	4b76      	ldr	r3, [pc, #472]	@ (8002378 <compute_real_speed+0x2b8>)
 800219e:	f7fe fb5d 	bl	800085c <__aeabi_ddiv>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	f7fe f875 	bl	800029c <__adddf3>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	a369      	add	r3, pc, #420	@ (adr r3, 8002360 <compute_real_speed+0x2a0>)
 80021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c0:	f7fe fa22 	bl	8000608 <__aeabi_dmul>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	a366      	add	r3, pc, #408	@ (adr r3, 8002368 <compute_real_speed+0x2a8>)
 80021ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d2:	f7fe fa19 	bl	8000608 <__aeabi_dmul>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4614      	mov	r4, r2
 80021dc:	461d      	mov	r5, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe f9ba 	bl	8000558 <__aeabi_f2d>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4620      	mov	r0, r4
 80021ea:	4629      	mov	r1, r5
 80021ec:	f7fe fb36 	bl	800085c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f7fe fcde 	bl	8000bb8 <__aeabi_d2f>
 80021fc:	4603      	mov	r3, r0
 80021fe:	60fb      	str	r3, [r7, #12]
		rb_count_last = __HAL_TIM_GET_COUNTER(&htim4);
 8002200:	4b5e      	ldr	r3, [pc, #376]	@ (800237c <compute_real_speed+0x2bc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	4a5e      	ldr	r2, [pc, #376]	@ (8002380 <compute_real_speed+0x2c0>)
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e09e      	b.n	800234a <compute_real_speed+0x28a>
	}
	else if (motor == LF) {
 800220c:	2202      	movs	r2, #2
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	4293      	cmp	r3, r2
 8002212:	d14e      	bne.n	80022b2 <compute_real_speed+0x1f2>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim1) - lf_count_last);
 8002214:	4b5b      	ldr	r3, [pc, #364]	@ (8002384 <compute_real_speed+0x2c4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	b29a      	uxth	r2, r3
 800221c:	4b5a      	ldr	r3, [pc, #360]	@ (8002388 <compute_real_speed+0x2c8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	b29b      	uxth	r3, r3
 8002226:	817b      	strh	r3, [r7, #10]
		speed_real = -1 * count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 8002228:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800222c:	425b      	negs	r3, r3
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f980 	bl	8000534 <__aeabi_i2d>
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	4b4f      	ldr	r3, [pc, #316]	@ (8002378 <compute_real_speed+0x2b8>)
 800223a:	f7fe fb0f 	bl	800085c <__aeabi_ddiv>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	f7fe f827 	bl	800029c <__adddf3>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	a342      	add	r3, pc, #264	@ (adr r3, 8002360 <compute_real_speed+0x2a0>)
 8002258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225c:	f7fe f9d4 	bl	8000608 <__aeabi_dmul>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	a33f      	add	r3, pc, #252	@ (adr r3, 8002368 <compute_real_speed+0x2a8>)
 800226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226e:	f7fe f9cb 	bl	8000608 <__aeabi_dmul>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4614      	mov	r4, r2
 8002278:	461d      	mov	r5, r3
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe f96c 	bl	8000558 <__aeabi_f2d>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4620      	mov	r0, r4
 8002286:	4629      	mov	r1, r5
 8002288:	f7fe fae8 	bl	800085c <__aeabi_ddiv>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fc90 	bl	8000bb8 <__aeabi_d2f>
 8002298:	4603      	mov	r3, r0
 800229a:	60fb      	str	r3, [r7, #12]
		lf_count_last = __HAL_TIM_GET_COUNTER(&htim1);
 800229c:	4b39      	ldr	r3, [pc, #228]	@ (8002384 <compute_real_speed+0x2c4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	4a39      	ldr	r2, [pc, #228]	@ (8002388 <compute_real_speed+0x2c8>)
 80022a4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80022a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022aa:	4838      	ldr	r0, [pc, #224]	@ (800238c <compute_real_speed+0x2cc>)
 80022ac:	f000 ff80 	bl	80031b0 <HAL_GPIO_TogglePin>
 80022b0:	e04b      	b.n	800234a <compute_real_speed+0x28a>
	}
	else if (motor == RF) {
 80022b2:	2203      	movs	r2, #3
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d147      	bne.n	800234a <compute_real_speed+0x28a>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim8) - rf_count_last);
 80022ba:	4b35      	ldr	r3, [pc, #212]	@ (8002390 <compute_real_speed+0x2d0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <compute_real_speed+0x2d4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	817b      	strh	r3, [r7, #10]
		speed_real = count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 80022ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f92e 	bl	8000534 <__aeabi_i2d>
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	4b26      	ldr	r3, [pc, #152]	@ (8002378 <compute_real_speed+0x2b8>)
 80022de:	f7fe fabd 	bl	800085c <__aeabi_ddiv>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	f7fd ffd5 	bl	800029c <__adddf3>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	a319      	add	r3, pc, #100	@ (adr r3, 8002360 <compute_real_speed+0x2a0>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe f982 	bl	8000608 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	a316      	add	r3, pc, #88	@ (adr r3, 8002368 <compute_real_speed+0x2a8>)
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	f7fe f979 	bl	8000608 <__aeabi_dmul>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4614      	mov	r4, r2
 800231c:	461d      	mov	r5, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe f91a 	bl	8000558 <__aeabi_f2d>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4620      	mov	r0, r4
 800232a:	4629      	mov	r1, r5
 800232c:	f7fe fa96 	bl	800085c <__aeabi_ddiv>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f7fe fc3e 	bl	8000bb8 <__aeabi_d2f>
 800233c:	4603      	mov	r3, r0
 800233e:	60fb      	str	r3, [r7, #12]
		rf_count_last = __HAL_TIM_GET_COUNTER(&htim8);
 8002340:	4b13      	ldr	r3, [pc, #76]	@ (8002390 <compute_real_speed+0x2d0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	4a13      	ldr	r2, [pc, #76]	@ (8002394 <compute_real_speed+0x2d4>)
 8002348:	6013      	str	r3, [r2, #0]
	}
	return speed_real;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	ee07 3a90 	vmov	s15, r3
}
 8002350:	eeb0 0a67 	vmov.f32	s0, s15
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bdb0      	pop	{r4, r5, r7, pc}
 800235a:	bf00      	nop
 800235c:	f3af 8000 	nop.w
 8002360:	54442d18 	.word	0x54442d18
 8002364:	400921fb 	.word	0x400921fb
 8002368:	25460aa6 	.word	0x25460aa6
 800236c:	3f9a0275 	.word	0x3f9a0275
 8002370:	200002a8 	.word	0x200002a8
 8002374:	20000748 	.word	0x20000748
 8002378:	4094a000 	.word	0x4094a000
 800237c:	200002f4 	.word	0x200002f4
 8002380:	2000074c 	.word	0x2000074c
 8002384:	20000210 	.word	0x20000210
 8002388:	20000750 	.word	0x20000750
 800238c:	48000400 	.word	0x48000400
 8002390:	20000340 	.word	0x20000340
 8002394:	20000754 	.word	0x20000754

08002398 <log_to_uart>:

void log_to_uart(const char *msg) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7fd ff6d 	bl	8000280 <strlen>
 80023a6:	4603      	mov	r3, r0
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4803      	ldr	r0, [pc, #12]	@ (80023c0 <log_to_uart+0x28>)
 80023b2:	f005 f9e5 	bl	8007780 <HAL_UART_Transmit>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200003d8 	.word	0x200003d8

080023c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <Error_Handler+0x8>

080023d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002414 <HAL_MspInit+0x44>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	4a0e      	ldr	r2, [pc, #56]	@ (8002414 <HAL_MspInit+0x44>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6193      	str	r3, [r2, #24]
 80023e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <HAL_MspInit+0x44>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <HAL_MspInit+0x44>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	4a08      	ldr	r2, [pc, #32]	@ (8002414 <HAL_MspInit+0x44>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f8:	61d3      	str	r3, [r2, #28]
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_MspInit+0x44>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000

08002418 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0d      	ldr	r2, [pc, #52]	@ (800245c <HAL_RTC_MspInit+0x44>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d111      	bne.n	800244e <HAL_RTC_MspInit+0x36>
 800242a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800242e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002438:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	4b07      	ldr	r3, [pc, #28]	@ (8002460 <HAL_RTC_MspInit+0x48>)
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	461a      	mov	r2, r3
 800244a:	2301      	movs	r3, #1
 800244c:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40002800 	.word	0x40002800
 8002460:	10908100 	.word	0x10908100

08002464 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b092      	sub	sp, #72	@ 0x48
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a7d      	ldr	r2, [pc, #500]	@ (8002678 <HAL_TIM_Encoder_MspInit+0x214>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d14e      	bne.n	8002524 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002486:	4b7d      	ldr	r3, [pc, #500]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	4a7c      	ldr	r2, [pc, #496]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 800248c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002490:	6193      	str	r3, [r2, #24]
 8002492:	4b7a      	ldr	r3, [pc, #488]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800249a:	633b      	str	r3, [r7, #48]	@ 0x30
 800249c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800249e:	4b77      	ldr	r3, [pc, #476]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	4a76      	ldr	r2, [pc, #472]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 80024a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024a8:	6153      	str	r3, [r2, #20]
 80024aa:	4b74      	ldr	r3, [pc, #464]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b6:	4b71      	ldr	r3, [pc, #452]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	4a70      	ldr	r2, [pc, #448]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c0:	6153      	str	r3, [r2, #20]
 80024c2:	4b6e      	ldr	r3, [pc, #440]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024ce:	2301      	movs	r3, #1
 80024d0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80024de:	2302      	movs	r3, #2
 80024e0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024e6:	4619      	mov	r1, r3
 80024e8:	4865      	ldr	r0, [pc, #404]	@ (8002680 <HAL_TIM_Encoder_MspInit+0x21c>)
 80024ea:	f000 fcbf 	bl	8002e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024f2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002500:	2306      	movs	r3, #6
 8002502:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002504:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002508:	4619      	mov	r1, r3
 800250a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800250e:	f000 fcad 	bl	8002e6c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	2019      	movs	r0, #25
 8002518:	f000 fc71 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800251c:	2019      	movs	r0, #25
 800251e:	f000 fc8a 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002522:	e0a5      	b.n	8002670 <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM3)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a56      	ldr	r2, [pc, #344]	@ (8002684 <HAL_TIM_Encoder_MspInit+0x220>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d128      	bne.n	8002580 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800252e:	4b53      	ldr	r3, [pc, #332]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4a52      	ldr	r2, [pc, #328]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	61d3      	str	r3, [r2, #28]
 800253a:	4b50      	ldr	r3, [pc, #320]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002546:	4b4d      	ldr	r3, [pc, #308]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	4a4c      	ldr	r2, [pc, #304]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 800254c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002550:	6153      	str	r3, [r2, #20]
 8002552:	4b4a      	ldr	r3, [pc, #296]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800255a:	623b      	str	r3, [r7, #32]
 800255c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800255e:	230c      	movs	r3, #12
 8002560:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800256e:	2302      	movs	r3, #2
 8002570:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002572:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002576:	4619      	mov	r1, r3
 8002578:	4843      	ldr	r0, [pc, #268]	@ (8002688 <HAL_TIM_Encoder_MspInit+0x224>)
 800257a:	f000 fc77 	bl	8002e6c <HAL_GPIO_Init>
}
 800257e:	e077      	b.n	8002670 <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM4)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a41      	ldr	r2, [pc, #260]	@ (800268c <HAL_TIM_Encoder_MspInit+0x228>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d145      	bne.n	8002616 <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800258a:	4b3c      	ldr	r3, [pc, #240]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a3b      	ldr	r2, [pc, #236]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	61d3      	str	r3, [r2, #28]
 8002596:	4b39      	ldr	r3, [pc, #228]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a2:	4b36      	ldr	r3, [pc, #216]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	4a35      	ldr	r2, [pc, #212]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 80025a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025ac:	6153      	str	r3, [r2, #20]
 80025ae:	4b33      	ldr	r3, [pc, #204]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	4b30      	ldr	r3, [pc, #192]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	4a2f      	ldr	r2, [pc, #188]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025c4:	6153      	str	r3, [r2, #20]
 80025c6:	4b2d      	ldr	r3, [pc, #180]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025d6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025e4:	2302      	movs	r3, #2
 80025e6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025ec:	4619      	mov	r1, r3
 80025ee:	4828      	ldr	r0, [pc, #160]	@ (8002690 <HAL_TIM_Encoder_MspInit+0x22c>)
 80025f0:	f000 fc3c 	bl	8002e6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025f4:	2340      	movs	r3, #64	@ 0x40
 80025f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002604:	2302      	movs	r3, #2
 8002606:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002608:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800260c:	4619      	mov	r1, r3
 800260e:	4821      	ldr	r0, [pc, #132]	@ (8002694 <HAL_TIM_Encoder_MspInit+0x230>)
 8002610:	f000 fc2c 	bl	8002e6c <HAL_GPIO_Init>
}
 8002614:	e02c      	b.n	8002670 <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM8)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1f      	ldr	r2, [pc, #124]	@ (8002698 <HAL_TIM_Encoder_MspInit+0x234>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d127      	bne.n	8002670 <HAL_TIM_Encoder_MspInit+0x20c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002620:	4b16      	ldr	r3, [pc, #88]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	4a15      	ldr	r2, [pc, #84]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 8002626:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800262a:	6193      	str	r3, [r2, #24]
 800262c:	4b13      	ldr	r3, [pc, #76]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002638:	4b10      	ldr	r3, [pc, #64]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	4a0f      	ldr	r2, [pc, #60]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 800263e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002642:	6153      	str	r3, [r2, #20]
 8002644:	4b0d      	ldr	r3, [pc, #52]	@ (800267c <HAL_TIM_Encoder_MspInit+0x218>)
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002650:	23c0      	movs	r3, #192	@ 0xc0
 8002652:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2300      	movs	r3, #0
 800265e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002660:	2304      	movs	r3, #4
 8002662:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002664:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002668:	4619      	mov	r1, r3
 800266a:	4805      	ldr	r0, [pc, #20]	@ (8002680 <HAL_TIM_Encoder_MspInit+0x21c>)
 800266c:	f000 fbfe 	bl	8002e6c <HAL_GPIO_Init>
}
 8002670:	bf00      	nop
 8002672:	3748      	adds	r7, #72	@ 0x48
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40012c00 	.word	0x40012c00
 800267c:	40021000 	.word	0x40021000
 8002680:	48000800 	.word	0x48000800
 8002684:	40000400 	.word	0x40000400
 8002688:	48001000 	.word	0x48001000
 800268c:	40000800 	.word	0x40000800
 8002690:	48000c00 	.word	0x48000c00
 8002694:	48000400 	.word	0x48000400
 8002698:	40013400 	.word	0x40013400

0800269c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ac:	d10b      	bne.n	80026c6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ae:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <HAL_TIM_PWM_MspInit+0x38>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	4a08      	ldr	r2, [pc, #32]	@ (80026d4 <HAL_TIM_PWM_MspInit+0x38>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	61d3      	str	r3, [r2, #28]
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_TIM_PWM_MspInit+0x38>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000

080026d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0d      	ldr	r2, [pc, #52]	@ (800271c <HAL_TIM_Base_MspInit+0x44>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d113      	bne.n	8002712 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80026ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002720 <HAL_TIM_Base_MspInit+0x48>)
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002720 <HAL_TIM_Base_MspInit+0x48>)
 80026f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026f4:	6193      	str	r3, [r2, #24]
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <HAL_TIM_Base_MspInit+0x48>)
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	2019      	movs	r0, #25
 8002708:	f000 fb79 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800270c:	2019      	movs	r0, #25
 800270e:	f000 fb92 	bl	8002e36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40014400 	.word	0x40014400
 8002720:	40021000 	.word	0x40021000

08002724 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	@ 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002744:	d139      	bne.n	80027ba <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	4b1f      	ldr	r3, [pc, #124]	@ (80027c4 <HAL_TIM_MspPostInit+0xa0>)
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	4a1e      	ldr	r2, [pc, #120]	@ (80027c4 <HAL_TIM_MspPostInit+0xa0>)
 800274c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002750:	6153      	str	r3, [r2, #20]
 8002752:	4b1c      	ldr	r3, [pc, #112]	@ (80027c4 <HAL_TIM_MspPostInit+0xa0>)
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275e:	4b19      	ldr	r3, [pc, #100]	@ (80027c4 <HAL_TIM_MspPostInit+0xa0>)
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	4a18      	ldr	r2, [pc, #96]	@ (80027c4 <HAL_TIM_MspPostInit+0xa0>)
 8002764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002768:	6153      	str	r3, [r2, #20]
 800276a:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <HAL_TIM_MspPostInit+0xa0>)
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002776:	2303      	movs	r3, #3
 8002778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002786:	2301      	movs	r3, #1
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4619      	mov	r1, r3
 8002790:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002794:	f000 fb6a 	bl	8002e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002798:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800279c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027aa:	2301      	movs	r3, #1
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	4804      	ldr	r0, [pc, #16]	@ (80027c8 <HAL_TIM_MspPostInit+0xa4>)
 80027b6:	f000 fb59 	bl	8002e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027ba:	bf00      	nop
 80027bc:	3728      	adds	r7, #40	@ 0x28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	48000400 	.word	0x48000400

080027cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	@ 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a17      	ldr	r2, [pc, #92]	@ (8002848 <HAL_UART_MspInit+0x7c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d128      	bne.n	8002840 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027ee:	4b17      	ldr	r3, [pc, #92]	@ (800284c <HAL_UART_MspInit+0x80>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a16      	ldr	r2, [pc, #88]	@ (800284c <HAL_UART_MspInit+0x80>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f8:	61d3      	str	r3, [r2, #28]
 80027fa:	4b14      	ldr	r3, [pc, #80]	@ (800284c <HAL_UART_MspInit+0x80>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002806:	4b11      	ldr	r3, [pc, #68]	@ (800284c <HAL_UART_MspInit+0x80>)
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	4a10      	ldr	r2, [pc, #64]	@ (800284c <HAL_UART_MspInit+0x80>)
 800280c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002810:	6153      	str	r3, [r2, #20]
 8002812:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <HAL_UART_MspInit+0x80>)
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800281e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002830:	2307      	movs	r3, #7
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	4805      	ldr	r0, [pc, #20]	@ (8002850 <HAL_UART_MspInit+0x84>)
 800283c:	f000 fb16 	bl	8002e6c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002840:	bf00      	nop
 8002842:	3728      	adds	r7, #40	@ 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40004800 	.word	0x40004800
 800284c:	40021000 	.word	0x40021000
 8002850:	48000c00 	.word	0x48000c00

08002854 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0d      	ldr	r2, [pc, #52]	@ (8002898 <HAL_PCD_MspInit+0x44>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d113      	bne.n	800288e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002866:	4b0d      	ldr	r3, [pc, #52]	@ (800289c <HAL_PCD_MspInit+0x48>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4a0c      	ldr	r2, [pc, #48]	@ (800289c <HAL_PCD_MspInit+0x48>)
 800286c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002870:	61d3      	str	r3, [r2, #28]
 8002872:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <HAL_PCD_MspInit+0x48>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	2100      	movs	r1, #0
 8002882:	2014      	movs	r0, #20
 8002884:	f000 fabb 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8002888:	2014      	movs	r0, #20
 800288a:	f000 fad4 	bl	8002e36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_MspInit 1 */

  }

}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40005c00 	.word	0x40005c00
 800289c:	40021000 	.word	0x40021000

080028a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <NMI_Handler+0x4>

080028a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ac:	bf00      	nop
 80028ae:	e7fd      	b.n	80028ac <HardFault_Handler+0x4>

080028b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b4:	bf00      	nop
 80028b6:	e7fd      	b.n	80028b4 <MemManage_Handler+0x4>

080028b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028bc:	bf00      	nop
 80028be:	e7fd      	b.n	80028bc <BusFault_Handler+0x4>

080028c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c4:	bf00      	nop
 80028c6:	e7fd      	b.n	80028c4 <UsageFault_Handler+0x4>

080028c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028f6:	f000 f963 	bl	8002bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002904:	4802      	ldr	r0, [pc, #8]	@ (8002910 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002906:	f000 fd34 	bl	8003372 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000460 	.word	0x20000460

08002914 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002918:	4803      	ldr	r0, [pc, #12]	@ (8002928 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800291a:	f004 f825 	bl	8006968 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800291e:	4803      	ldr	r0, [pc, #12]	@ (800292c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002920:	f004 f822 	bl	8006968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000210 	.word	0x20000210
 800292c:	2000038c 	.word	0x2000038c

08002930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return 1;
 8002934:	2301      	movs	r3, #1
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <_kill>:

int _kill(int pid, int sig)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800294a:	f007 fdff 	bl	800a54c <__errno>
 800294e:	4603      	mov	r3, r0
 8002950:	2216      	movs	r2, #22
 8002952:	601a      	str	r2, [r3, #0]
  return -1;
 8002954:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <_exit>:

void _exit (int status)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002968:	f04f 31ff 	mov.w	r1, #4294967295
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ffe7 	bl	8002940 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002972:	bf00      	nop
 8002974:	e7fd      	b.n	8002972 <_exit+0x12>

08002976 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	e00a      	b.n	800299e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002988:	f3af 8000 	nop.w
 800298c:	4601      	mov	r1, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	60ba      	str	r2, [r7, #8]
 8002994:	b2ca      	uxtb	r2, r1
 8002996:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	3301      	adds	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	dbf0      	blt.n	8002988 <_read+0x12>
  }

  return len;
 80029a6:	687b      	ldr	r3, [r7, #4]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	e009      	b.n	80029d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	60ba      	str	r2, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3301      	adds	r3, #1
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	429a      	cmp	r2, r3
 80029dc:	dbf1      	blt.n	80029c2 <_write+0x12>
  }
  return len;
 80029de:	687b      	ldr	r3, [r7, #4]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <_close>:

int _close(int file)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a10:	605a      	str	r2, [r3, #4]
  return 0;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <_isatty>:

int _isatty(int file)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a28:	2301      	movs	r3, #1
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a58:	4a14      	ldr	r2, [pc, #80]	@ (8002aac <_sbrk+0x5c>)
 8002a5a:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <_sbrk+0x60>)
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a64:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <_sbrk+0x64>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <_sbrk+0x64>)
 8002a6e:	4a12      	ldr	r2, [pc, #72]	@ (8002ab8 <_sbrk+0x68>)
 8002a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a72:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <_sbrk+0x64>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d207      	bcs.n	8002a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a80:	f007 fd64 	bl	800a54c <__errno>
 8002a84:	4603      	mov	r3, r0
 8002a86:	220c      	movs	r2, #12
 8002a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8e:	e009      	b.n	8002aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a90:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <_sbrk+0x64>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a96:	4b07      	ldr	r3, [pc, #28]	@ (8002ab4 <_sbrk+0x64>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	4a05      	ldr	r2, [pc, #20]	@ (8002ab4 <_sbrk+0x64>)
 8002aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20010000 	.word	0x20010000
 8002ab0:	00000400 	.word	0x00000400
 8002ab4:	200007a0 	.word	0x200007a0
 8002ab8:	200008f8 	.word	0x200008f8

08002abc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <SystemInit+0x20>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac6:	4a05      	ldr	r2, [pc, #20]	@ (8002adc <SystemInit+0x20>)
 8002ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b18 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ae4:	f7ff ffea 	bl	8002abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ae8:	480c      	ldr	r0, [pc, #48]	@ (8002b1c <LoopForever+0x6>)
  ldr r1, =_edata
 8002aea:	490d      	ldr	r1, [pc, #52]	@ (8002b20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002aec:	4a0d      	ldr	r2, [pc, #52]	@ (8002b24 <LoopForever+0xe>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af0:	e002      	b.n	8002af8 <LoopCopyDataInit>

08002af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002af6:	3304      	adds	r3, #4

08002af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002afc:	d3f9      	bcc.n	8002af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002afe:	4a0a      	ldr	r2, [pc, #40]	@ (8002b28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b00:	4c0a      	ldr	r4, [pc, #40]	@ (8002b2c <LoopForever+0x16>)
  movs r3, #0
 8002b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b04:	e001      	b.n	8002b0a <LoopFillZerobss>

08002b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b08:	3204      	adds	r2, #4

08002b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b0c:	d3fb      	bcc.n	8002b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b0e:	f007 fd23 	bl	800a558 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b12:	f7fe f9d9 	bl	8000ec8 <main>

08002b16 <LoopForever>:

LoopForever:
    b LoopForever
 8002b16:	e7fe      	b.n	8002b16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b20:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002b24:	0800cab0 	.word	0x0800cab0
  ldr r2, =_sbss
 8002b28:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002b2c:	200008f4 	.word	0x200008f4

08002b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b30:	e7fe      	b.n	8002b30 <ADC1_2_IRQHandler>
	...

08002b34 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b38:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <HAL_Init+0x28>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a07      	ldr	r2, [pc, #28]	@ (8002b5c <HAL_Init+0x28>)
 8002b3e:	f043 0310 	orr.w	r3, r3, #16
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b44:	2003      	movs	r0, #3
 8002b46:	f000 f94f 	bl	8002de8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f000 f808 	bl	8002b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b50:	f7ff fc3e 	bl	80023d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40022000 	.word	0x40022000

08002b60 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b68:	4b12      	ldr	r3, [pc, #72]	@ (8002bb4 <HAL_InitTick+0x54>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b12      	ldr	r3, [pc, #72]	@ (8002bb8 <HAL_InitTick+0x58>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	4619      	mov	r1, r3
 8002b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f967 	bl	8002e52 <HAL_SYSTICK_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e00e      	b.n	8002bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b0f      	cmp	r3, #15
 8002b92:	d80a      	bhi.n	8002baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b94:	2200      	movs	r2, #0
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9c:	f000 f92f 	bl	8002dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ba0:	4a06      	ldr	r2, [pc, #24]	@ (8002bbc <HAL_InitTick+0x5c>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e000      	b.n	8002bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000000 	.word	0x20000000
 8002bb8:	20000008 	.word	0x20000008
 8002bbc:	20000004 	.word	0x20000004

08002bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc4:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_IncTick+0x20>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <HAL_IncTick+0x24>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4413      	add	r3, r2
 8002bd0:	4a04      	ldr	r2, [pc, #16]	@ (8002be4 <HAL_IncTick+0x24>)
 8002bd2:	6013      	str	r3, [r2, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20000008 	.word	0x20000008
 8002be4:	200007a4 	.word	0x200007a4

08002be8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return uwTick;  
 8002bec:	4b03      	ldr	r3, [pc, #12]	@ (8002bfc <HAL_GetTick+0x14>)
 8002bee:	681b      	ldr	r3, [r3, #0]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	200007a4 	.word	0x200007a4

08002c00 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c08:	f7ff ffee 	bl	8002be8 <HAL_GetTick>
 8002c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d005      	beq.n	8002c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c44 <HAL_Delay+0x44>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002c26:	bf00      	nop
 8002c28:	f7ff ffde 	bl	8002be8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d8f7      	bhi.n	8002c28 <HAL_Delay+0x28>
  {
  }
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000008 	.word	0x20000008

08002c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c58:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <__NVIC_SetPriorityGrouping+0x44>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c64:	4013      	ands	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c7a:	4a04      	ldr	r2, [pc, #16]	@ (8002c8c <__NVIC_SetPriorityGrouping+0x44>)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	60d3      	str	r3, [r2, #12]
}
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c94:	4b04      	ldr	r3, [pc, #16]	@ (8002ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	0a1b      	lsrs	r3, r3, #8
 8002c9a:	f003 0307 	and.w	r3, r3, #7
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	db0b      	blt.n	8002cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	f003 021f 	and.w	r2, r3, #31
 8002cc4:	4907      	ldr	r1, [pc, #28]	@ (8002ce4 <__NVIC_EnableIRQ+0x38>)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	2001      	movs	r0, #1
 8002cce:	fa00 f202 	lsl.w	r2, r0, r2
 8002cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	e000e100 	.word	0xe000e100

08002ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	6039      	str	r1, [r7, #0]
 8002cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	db0a      	blt.n	8002d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	490c      	ldr	r1, [pc, #48]	@ (8002d34 <__NVIC_SetPriority+0x4c>)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	0112      	lsls	r2, r2, #4
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d10:	e00a      	b.n	8002d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4908      	ldr	r1, [pc, #32]	@ (8002d38 <__NVIC_SetPriority+0x50>)
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	3b04      	subs	r3, #4
 8002d20:	0112      	lsls	r2, r2, #4
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	440b      	add	r3, r1
 8002d26:	761a      	strb	r2, [r3, #24]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000e100 	.word	0xe000e100
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	@ 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f1c3 0307 	rsb	r3, r3, #7
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	bf28      	it	cs
 8002d5a:	2304      	movcs	r3, #4
 8002d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3304      	adds	r3, #4
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d902      	bls.n	8002d6c <NVIC_EncodePriority+0x30>
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3b03      	subs	r3, #3
 8002d6a:	e000      	b.n	8002d6e <NVIC_EncodePriority+0x32>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d70:	f04f 32ff 	mov.w	r2, #4294967295
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	401a      	ands	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d84:	f04f 31ff 	mov.w	r1, #4294967295
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	43d9      	mvns	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	4313      	orrs	r3, r2
         );
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3724      	adds	r7, #36	@ 0x24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002db4:	d301      	bcc.n	8002dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002db6:	2301      	movs	r3, #1
 8002db8:	e00f      	b.n	8002dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dba:	4a0a      	ldr	r2, [pc, #40]	@ (8002de4 <SysTick_Config+0x40>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dc2:	210f      	movs	r1, #15
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	f7ff ff8e 	bl	8002ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dcc:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <SysTick_Config+0x40>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dd2:	4b04      	ldr	r3, [pc, #16]	@ (8002de4 <SysTick_Config+0x40>)
 8002dd4:	2207      	movs	r2, #7
 8002dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	e000e010 	.word	0xe000e010

08002de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff ff29 	bl	8002c48 <__NVIC_SetPriorityGrouping>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	4603      	mov	r3, r0
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e10:	f7ff ff3e 	bl	8002c90 <__NVIC_GetPriorityGrouping>
 8002e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	6978      	ldr	r0, [r7, #20]
 8002e1c:	f7ff ff8e 	bl	8002d3c <NVIC_EncodePriority>
 8002e20:	4602      	mov	r2, r0
 8002e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff5d 	bl	8002ce8 <__NVIC_SetPriority>
}
 8002e2e:	bf00      	nop
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff31 	bl	8002cac <__NVIC_EnableIRQ>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ffa2 	bl	8002da4 <SysTick_Config>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e7a:	e160      	b.n	800313e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	2101      	movs	r1, #1
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8152 	beq.w	8003138 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d005      	beq.n	8002eac <HAL_GPIO_Init+0x40>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d130      	bne.n	8002f0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	091b      	lsrs	r3, r3, #4
 8002ef8:	f003 0201 	and.w	r2, r3, #1
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d017      	beq.n	8002f4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	2203      	movs	r2, #3
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d123      	bne.n	8002f9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	08da      	lsrs	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3208      	adds	r2, #8
 8002f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	220f      	movs	r2, #15
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	08da      	lsrs	r2, r3, #3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3208      	adds	r2, #8
 8002f98:	6939      	ldr	r1, [r7, #16]
 8002f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	2203      	movs	r2, #3
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0203 	and.w	r2, r3, #3
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80ac 	beq.w	8003138 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800315c <HAL_GPIO_Init+0x2f0>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	4a5d      	ldr	r2, [pc, #372]	@ (800315c <HAL_GPIO_Init+0x2f0>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	6193      	str	r3, [r2, #24]
 8002fec:	4b5b      	ldr	r3, [pc, #364]	@ (800315c <HAL_GPIO_Init+0x2f0>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ff8:	4a59      	ldr	r2, [pc, #356]	@ (8003160 <HAL_GPIO_Init+0x2f4>)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	089b      	lsrs	r3, r3, #2
 8002ffe:	3302      	adds	r3, #2
 8003000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	220f      	movs	r2, #15
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003022:	d025      	beq.n	8003070 <HAL_GPIO_Init+0x204>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a4f      	ldr	r2, [pc, #316]	@ (8003164 <HAL_GPIO_Init+0x2f8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d01f      	beq.n	800306c <HAL_GPIO_Init+0x200>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a4e      	ldr	r2, [pc, #312]	@ (8003168 <HAL_GPIO_Init+0x2fc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d019      	beq.n	8003068 <HAL_GPIO_Init+0x1fc>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a4d      	ldr	r2, [pc, #308]	@ (800316c <HAL_GPIO_Init+0x300>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d013      	beq.n	8003064 <HAL_GPIO_Init+0x1f8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a4c      	ldr	r2, [pc, #304]	@ (8003170 <HAL_GPIO_Init+0x304>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00d      	beq.n	8003060 <HAL_GPIO_Init+0x1f4>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a4b      	ldr	r2, [pc, #300]	@ (8003174 <HAL_GPIO_Init+0x308>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d007      	beq.n	800305c <HAL_GPIO_Init+0x1f0>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a4a      	ldr	r2, [pc, #296]	@ (8003178 <HAL_GPIO_Init+0x30c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d101      	bne.n	8003058 <HAL_GPIO_Init+0x1ec>
 8003054:	2306      	movs	r3, #6
 8003056:	e00c      	b.n	8003072 <HAL_GPIO_Init+0x206>
 8003058:	2307      	movs	r3, #7
 800305a:	e00a      	b.n	8003072 <HAL_GPIO_Init+0x206>
 800305c:	2305      	movs	r3, #5
 800305e:	e008      	b.n	8003072 <HAL_GPIO_Init+0x206>
 8003060:	2304      	movs	r3, #4
 8003062:	e006      	b.n	8003072 <HAL_GPIO_Init+0x206>
 8003064:	2303      	movs	r3, #3
 8003066:	e004      	b.n	8003072 <HAL_GPIO_Init+0x206>
 8003068:	2302      	movs	r3, #2
 800306a:	e002      	b.n	8003072 <HAL_GPIO_Init+0x206>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <HAL_GPIO_Init+0x206>
 8003070:	2300      	movs	r3, #0
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	f002 0203 	and.w	r2, r2, #3
 8003078:	0092      	lsls	r2, r2, #2
 800307a:	4093      	lsls	r3, r2
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003082:	4937      	ldr	r1, [pc, #220]	@ (8003160 <HAL_GPIO_Init+0x2f4>)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	089b      	lsrs	r3, r3, #2
 8003088:	3302      	adds	r3, #2
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003090:	4b3a      	ldr	r3, [pc, #232]	@ (800317c <HAL_GPIO_Init+0x310>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	43db      	mvns	r3, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030b4:	4a31      	ldr	r2, [pc, #196]	@ (800317c <HAL_GPIO_Init+0x310>)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030ba:	4b30      	ldr	r3, [pc, #192]	@ (800317c <HAL_GPIO_Init+0x310>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4013      	ands	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030de:	4a27      	ldr	r2, [pc, #156]	@ (800317c <HAL_GPIO_Init+0x310>)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030e4:	4b25      	ldr	r3, [pc, #148]	@ (800317c <HAL_GPIO_Init+0x310>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003108:	4a1c      	ldr	r2, [pc, #112]	@ (800317c <HAL_GPIO_Init+0x310>)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800310e:	4b1b      	ldr	r3, [pc, #108]	@ (800317c <HAL_GPIO_Init+0x310>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	43db      	mvns	r3, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4013      	ands	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003132:	4a12      	ldr	r2, [pc, #72]	@ (800317c <HAL_GPIO_Init+0x310>)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	3301      	adds	r3, #1
 800313c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	f47f ae97 	bne.w	8002e7c <HAL_GPIO_Init+0x10>
  }
}
 800314e:	bf00      	nop
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40021000 	.word	0x40021000
 8003160:	40010000 	.word	0x40010000
 8003164:	48000400 	.word	0x48000400
 8003168:	48000800 	.word	0x48000800
 800316c:	48000c00 	.word	0x48000c00
 8003170:	48001000 	.word	0x48001000
 8003174:	48001400 	.word	0x48001400
 8003178:	48001800 	.word	0x48001800
 800317c:	40010400 	.word	0x40010400

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800319c:	e002      	b.n	80031a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4013      	ands	r3, r2
 80031c8:	041a      	lsls	r2, r3, #16
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	43d9      	mvns	r1, r3
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	400b      	ands	r3, r1
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	619a      	str	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0b9      	b.n	800336a <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fb22 	bl	8002854 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2203      	movs	r2, #3
 8003214:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f004 ff28 	bl	8008072 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
 8003226:	e03e      	b.n	80032a6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	440b      	add	r3, r1
 8003236:	3311      	adds	r3, #17
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	3310      	adds	r3, #16
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	440b      	add	r3, r1
 800325e:	3313      	adds	r3, #19
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	440b      	add	r3, r1
 8003272:	3320      	adds	r3, #32
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	440b      	add	r3, r1
 8003286:	3324      	adds	r3, #36	@ 0x24
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	440b      	add	r3, r1
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	3301      	adds	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	791b      	ldrb	r3, [r3, #4]
 80032aa:	7bfa      	ldrb	r2, [r7, #15]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d3bb      	bcc.n	8003228 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	73fb      	strb	r3, [r7, #15]
 80032b4:	e044      	b.n	8003340 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032b6:	7bfa      	ldrb	r2, [r7, #15]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	440b      	add	r3, r1
 80032f0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	440b      	add	r3, r1
 8003306:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	440b      	add	r3, r1
 800331c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	440b      	add	r3, r1
 8003332:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	3301      	adds	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	791b      	ldrb	r3, [r3, #4]
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	429a      	cmp	r2, r3
 8003348:	d3b5      	bcc.n	80032b6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3304      	adds	r3, #4
 8003352:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003356:	f004 fea7 	bl	80080a8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f006 fa76 	bl	8009870 <USB_ReadInterrupts>
 8003384:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f930 	bl	80035f6 <PCD_EP_ISR_Handler>

    return;
 8003396:	e0bd      	b.n	8003514 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d013      	beq.n	80033ca <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033b4:	b292      	uxth	r2, r2
 80033b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f8d9 	bl	8003572 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80033c0:	2100      	movs	r1, #0
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8f3 	bl	80035ae <HAL_PCD_SetAddress>

    return;
 80033c8:	e0a4      	b.n	8003514 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00c      	beq.n	80033ee <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033dc:	b29a      	uxth	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033e6:	b292      	uxth	r2, r2
 80033e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80033ec:	e092      	b.n	8003514 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00c      	beq.n	8003412 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003400:	b29a      	uxth	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800340a:	b292      	uxth	r2, r2
 800340c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003410:	e080      	b.n	8003514 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d027      	beq.n	800346c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003424:	b29a      	uxth	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0204 	bic.w	r2, r2, #4
 800342e:	b292      	uxth	r2, r2
 8003430:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800343c:	b29a      	uxth	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0208 	bic.w	r2, r2, #8
 8003446:	b292      	uxth	r2, r2
 8003448:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f8a4 	bl	800359a <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800345a:	b29a      	uxth	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003464:	b292      	uxth	r2, r2
 8003466:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800346a:	e053      	b.n	8003514 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003472:	2b00      	cmp	r3, #0
 8003474:	d027      	beq.n	80034c6 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800347e:	b29a      	uxth	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0208 	orr.w	r2, r2, #8
 8003488:	b292      	uxth	r2, r2
 800348a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003496:	b29a      	uxth	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034a0:	b292      	uxth	r2, r2
 80034a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0204 	orr.w	r2, r2, #4
 80034b8:	b292      	uxth	r2, r2
 80034ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f861 	bl	8003586 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80034c4:	e026      	b.n	8003514 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00f      	beq.n	80034f0 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034d8:	b29a      	uxth	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80034e2:	b292      	uxth	r2, r2
 80034e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f838 	bl	800355e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80034ee:	e011      	b.n	8003514 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003502:	b29a      	uxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800350c:	b292      	uxth	r2, r2
 800350e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003512:	bf00      	nop
  }
}
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	460b      	mov	r3, r1
 80035b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_PCD_SetAddress+0x1a>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e012      	b.n	80035ee <HAL_PCD_SetAddress+0x40>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f006 f932 	bl	8009848 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b096      	sub	sp, #88	@ 0x58
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035fe:	e3ad      	b.n	8003d5c <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003608:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800360c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 800361a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 816f 	bne.w	8003902 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003624:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	d14c      	bne.n	80036ca <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800363c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003640:	81fb      	strh	r3, [r7, #14]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	89fb      	ldrh	r3, [r7, #14]
 8003648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800364c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003650:	b29b      	uxth	r3, r3
 8003652:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3310      	adds	r3, #16
 8003658:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003662:	b29b      	uxth	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	4413      	add	r3, r2
 8003674:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800367e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003680:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	441a      	add	r2, r3
 800368c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003690:	2100      	movs	r1, #0
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff ff4d 	bl	8003532 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	7b1b      	ldrb	r3, [r3, #12]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 835c 	beq.w	8003d5c <PCD_EP_ISR_Handler+0x766>
 80036a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f040 8357 	bne.w	8003d5c <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7b1b      	ldrb	r3, [r3, #12]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	731a      	strb	r2, [r3, #12]
 80036c8:	e348      	b.n	8003d5c <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036d0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80036dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80036e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d032      	beq.n	800374e <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4413      	add	r3, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	4413      	add	r3, r2
 8003702:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800370c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800371a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800371c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800371e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003720:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003722:	b29b      	uxth	r3, r3
 8003724:	f006 f8f6 	bl	8009914 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29a      	uxth	r2, r3
 8003730:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003734:	4013      	ands	r3, r2
 8003736:	823b      	strh	r3, [r7, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	8a3a      	ldrh	r2, [r7, #16]
 800373e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003742:	b292      	uxth	r2, r2
 8003744:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff feff 	bl	800354a <HAL_PCD_SetupStageCallback>
 800374c:	e306      	b.n	8003d5c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800374e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003752:	2b00      	cmp	r3, #0
 8003754:	f280 8302 	bge.w	8003d5c <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	b29a      	uxth	r2, r3
 8003760:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003764:	4013      	ands	r3, r2
 8003766:	83fb      	strh	r3, [r7, #30]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	8bfa      	ldrh	r2, [r7, #30]
 800376e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003772:	b292      	uxth	r2, r2
 8003774:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800377e:	b29b      	uxth	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	4413      	add	r3, r2
 8003790:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800379a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800379e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d019      	beq.n	80037da <PCD_EP_ISR_Handler+0x1e4>
 80037a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d015      	beq.n	80037da <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b4:	6959      	ldr	r1, [r3, #20]
 80037b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80037ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037bc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f006 f8a8 	bl	8009914 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80037c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c6:	695a      	ldr	r2, [r3, #20]
 80037c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	441a      	add	r2, r3
 80037ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80037d2:	2100      	movs	r1, #0
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff fea0 	bl	800351a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80037e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80037e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f040 82b5 	bne.w	8003d5c <PCD_EP_ISR_Handler+0x766>
 80037f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80037f6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80037fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037fe:	f000 82ad 	beq.w	8003d5c <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003810:	b29b      	uxth	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	4413      	add	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800382c:	b29a      	uxth	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	801a      	strh	r2, [r3, #0]
 8003832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <PCD_EP_ISR_Handler+0x25a>
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003848:	b29a      	uxth	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	801a      	strh	r2, [r3, #0]
 800384e:	e039      	b.n	80038c4 <PCD_EP_ISR_Handler+0x2ce>
 8003850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	2b3e      	cmp	r3, #62	@ 0x3e
 8003856:	d818      	bhi.n	800388a <PCD_EP_ISR_Handler+0x294>
 8003858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <PCD_EP_ISR_Handler+0x27c>
 800386c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800386e:	3301      	adds	r3, #1
 8003870:	647b      	str	r3, [r7, #68]	@ 0x44
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	b29a      	uxth	r2, r3
 8003878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800387a:	b29b      	uxth	r3, r3
 800387c:	029b      	lsls	r3, r3, #10
 800387e:	b29b      	uxth	r3, r3
 8003880:	4313      	orrs	r3, r2
 8003882:	b29a      	uxth	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	e01c      	b.n	80038c4 <PCD_EP_ISR_Handler+0x2ce>
 800388a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	647b      	str	r3, [r7, #68]	@ 0x44
 8003892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <PCD_EP_ISR_Handler+0x2ae>
 800389e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038a0:	3b01      	subs	r3, #1
 80038a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	029b      	lsls	r3, r3, #10
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	4313      	orrs	r3, r2
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038be:	b29a      	uxth	r2, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d4:	827b      	strh	r3, [r7, #18]
 80038d6:	8a7b      	ldrh	r3, [r7, #18]
 80038d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80038dc:	827b      	strh	r3, [r7, #18]
 80038de:	8a7b      	ldrh	r3, [r7, #18]
 80038e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038e4:	827b      	strh	r3, [r7, #18]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	8a7b      	ldrh	r3, [r7, #18]
 80038ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	8013      	strh	r3, [r2, #0]
 8003900:	e22c      	b.n	8003d5c <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003916:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800391a:	2b00      	cmp	r3, #0
 800391c:	f280 80f6 	bge.w	8003b0c <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b29a      	uxth	r2, r3
 8003932:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003936:	4013      	ands	r3, r2
 8003938:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800394e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003952:	b292      	uxth	r2, r2
 8003954:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003956:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800396c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396e:	7b1b      	ldrb	r3, [r3, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d123      	bne.n	80039bc <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800397c:	b29b      	uxth	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	4413      	add	r3, r2
 800398e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003998:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800399c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 808e 	beq.w	8003ac2 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ac:	6959      	ldr	r1, [r3, #20]
 80039ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b0:	88da      	ldrh	r2, [r3, #6]
 80039b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80039b6:	f005 ffad 	bl	8009914 <USB_ReadPMA>
 80039ba:	e082      	b.n	8003ac2 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80039bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039be:	78db      	ldrb	r3, [r3, #3]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d10a      	bne.n	80039da <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80039c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80039c8:	461a      	mov	r2, r3
 80039ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f9d3 	bl	8003d78 <HAL_PCD_EP_DB_Receive>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80039d8:	e073      	b.n	8003ac2 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	441a      	add	r2, r3
 8003a06:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d022      	beq.n	8003a7e <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	4413      	add	r3, r2
 8003a52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a5c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003a60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d02c      	beq.n	8003ac2 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a6e:	6959      	ldr	r1, [r3, #20]
 8003a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a72:	891a      	ldrh	r2, [r3, #8]
 8003a74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a78:	f005 ff4c 	bl	8009914 <USB_ReadPMA>
 8003a7c:	e021      	b.n	8003ac2 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4413      	add	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	4413      	add	r3, r2
 8003a98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aa2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003aa6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab4:	6959      	ldr	r1, [r3, #20]
 8003ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab8:	895a      	ldrh	r2, [r3, #10]
 8003aba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003abe:	f005 ff29 	bl	8009914 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003aca:	441a      	add	r2, r3
 8003acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ace:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ad8:	441a      	add	r2, r3
 8003ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003adc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <PCD_EP_ISR_Handler+0x4fc>
 8003ae6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d206      	bcs.n	8003b00 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fd0e 	bl	800351a <HAL_PCD_DataOutStageCallback>
 8003afe:	e005      	b.n	8003b0c <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b06:	4618      	mov	r0, r3
 8003b08:	f004 faec 	bl	80080e4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003b0c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8121 	beq.w	8003d5c <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8003b1a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	3310      	adds	r3, #16
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b48:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	441a      	add	r2, r3
 8003b5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6c:	78db      	ldrb	r3, [r3, #3]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	f040 80a2 	bne.w	8003cb8 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8003b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b76:	2200      	movs	r2, #0
 8003b78:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7c:	7b1b      	ldrb	r3, [r3, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8093 	beq.w	8003caa <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b84:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d046      	beq.n	8003c1e <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d126      	bne.n	8003be6 <PCD_EP_ISR_Handler+0x5f0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	4413      	add	r3, r2
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	00da      	lsls	r2, r3, #3
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	4413      	add	r3, r2
 8003bba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003bbe:	623b      	str	r3, [r7, #32]
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	801a      	strh	r2, [r3, #0]
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	801a      	strh	r2, [r3, #0]
 8003be4:	e061      	b.n	8003caa <PCD_EP_ISR_Handler+0x6b4>
 8003be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d15d      	bne.n	8003caa <PCD_EP_ISR_Handler+0x6b4>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c02:	4413      	add	r3, r2
 8003c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	00da      	lsls	r2, r3, #3
 8003c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0e:	4413      	add	r3, r2
 8003c10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c18:	2200      	movs	r2, #0
 8003c1a:	801a      	strh	r2, [r3, #0]
 8003c1c:	e045      	b.n	8003caa <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c26:	785b      	ldrb	r3, [r3, #1]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d126      	bne.n	8003c7a <PCD_EP_ISR_Handler+0x684>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c40:	4413      	add	r3, r2
 8003c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	00da      	lsls	r2, r3, #3
 8003c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c52:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c62:	801a      	strh	r2, [r3, #0]
 8003c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c76:	801a      	strh	r2, [r3, #0]
 8003c78:	e017      	b.n	8003caa <PCD_EP_ISR_Handler+0x6b4>
 8003c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c7c:	785b      	ldrb	r3, [r3, #1]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d113      	bne.n	8003caa <PCD_EP_ISR_Handler+0x6b4>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c90:	4413      	add	r3, r2
 8003c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	00da      	lsls	r2, r3, #3
 8003c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff fc3e 	bl	8003532 <HAL_PCD_DataInStageCallback>
 8003cb6:	e051      	b.n	8003d5c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003cb8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d144      	bne.n	8003d4e <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d907      	bls.n	8003d08 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8003cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cfa:	699a      	ldr	r2, [r3, #24]
 8003cfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003d00:	1ad2      	subs	r2, r2, r3
 8003d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d04:	619a      	str	r2, [r3, #24]
 8003d06:	e002      	b.n	8003d0e <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8003d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fc08 	bl	8003532 <HAL_PCD_DataInStageCallback>
 8003d22:	e01b      	b.n	8003d5c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003d2c:	441a      	add	r2, r3
 8003d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d30:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d34:	69da      	ldr	r2, [r3, #28]
 8003d36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003d3a:	441a      	add	r2, r3
 8003d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d3e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d46:	4618      	mov	r0, r3
 8003d48:	f004 f9cc 	bl	80080e4 <USB_EPStartXfer>
 8003d4c:	e006      	b.n	8003d5c <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003d4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003d52:	461a      	mov	r2, r3
 8003d54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f917 	bl	8003f8a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f6ff ac49 	blt.w	8003600 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3758      	adds	r7, #88	@ 0x58
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	4613      	mov	r3, r2
 8003d84:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d86:	88fb      	ldrh	r3, [r7, #6]
 8003d88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d07c      	beq.n	8003e8a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	4413      	add	r3, r2
 8003daa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	8b7b      	ldrh	r3, [r7, #26]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d306      	bcc.n	8003dce <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	699a      	ldr	r2, [r3, #24]
 8003dc4:	8b7b      	ldrh	r3, [r7, #26]
 8003dc6:	1ad2      	subs	r2, r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	619a      	str	r2, [r3, #24]
 8003dcc:	e002      	b.n	8003dd4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d123      	bne.n	8003e24 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df6:	833b      	strh	r3, [r7, #24]
 8003df8:	8b3b      	ldrh	r3, [r7, #24]
 8003dfa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003dfe:	833b      	strh	r3, [r7, #24]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	441a      	add	r2, r3
 8003e0e:	8b3b      	ldrh	r3, [r7, #24]
 8003e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01f      	beq.n	8003e6e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e48:	82fb      	strh	r3, [r7, #22]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	441a      	add	r2, r3
 8003e58:	8afb      	ldrh	r3, [r7, #22]
 8003e5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e6e:	8b7b      	ldrh	r3, [r7, #26]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8085 	beq.w	8003f80 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6959      	ldr	r1, [r3, #20]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	891a      	ldrh	r2, [r3, #8]
 8003e82:	8b7b      	ldrh	r3, [r7, #26]
 8003e84:	f005 fd46 	bl	8009914 <USB_ReadPMA>
 8003e88:	e07a      	b.n	8003f80 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	699a      	ldr	r2, [r3, #24]
 8003eb4:	8b7b      	ldrh	r3, [r7, #26]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d306      	bcc.n	8003ec8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	8b7b      	ldrh	r3, [r7, #26]
 8003ec0:	1ad2      	subs	r2, r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	619a      	str	r2, [r3, #24]
 8003ec6:	e002      	b.n	8003ece <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d123      	bne.n	8003f1e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ef0:	83fb      	strh	r3, [r7, #30]
 8003ef2:	8bfb      	ldrh	r3, [r7, #30]
 8003ef4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ef8:	83fb      	strh	r3, [r7, #30]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	441a      	add	r2, r3
 8003f08:	8bfb      	ldrh	r3, [r7, #30]
 8003f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d11f      	bne.n	8003f68 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f42:	83bb      	strh	r3, [r7, #28]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	441a      	add	r2, r3
 8003f52:	8bbb      	ldrh	r3, [r7, #28]
 8003f54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f68:	8b7b      	ldrh	r3, [r7, #26]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6959      	ldr	r1, [r3, #20]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	895a      	ldrh	r2, [r3, #10]
 8003f7a:	8b7b      	ldrh	r3, [r7, #26]
 8003f7c:	f005 fcca 	bl	8009914 <USB_ReadPMA>
    }
  }

  return count;
 8003f80:	8b7b      	ldrh	r3, [r7, #26]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b0a4      	sub	sp, #144	@ 0x90
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	4613      	mov	r3, r2
 8003f96:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 81db 	beq.w	800435a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fc8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d907      	bls.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003fe0:	1ad2      	subs	r2, r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	619a      	str	r2, [r3, #24]
 8003fe6:	e002      	b.n	8003fee <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2200      	movs	r2, #0
 8003fec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f040 80b9 	bne.w	800416a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	785b      	ldrb	r3, [r3, #1]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d126      	bne.n	800404e <HAL_PCD_EP_DB_Transmit+0xc4>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800400e:	b29b      	uxth	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004014:	4413      	add	r3, r2
 8004016:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	00da      	lsls	r2, r3, #3
 800401e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004020:	4413      	add	r3, r2
 8004022:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004026:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004032:	b29a      	uxth	r2, r3
 8004034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004036:	801a      	strh	r2, [r3, #0]
 8004038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004046:	b29a      	uxth	r2, r3
 8004048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404a:	801a      	strh	r2, [r3, #0]
 800404c:	e01a      	b.n	8004084 <HAL_PCD_EP_DB_Transmit+0xfa>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	785b      	ldrb	r3, [r3, #1]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d116      	bne.n	8004084 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	637b      	str	r3, [r7, #52]	@ 0x34
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004064:	b29b      	uxth	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406a:	4413      	add	r3, r2
 800406c:	637b      	str	r3, [r7, #52]	@ 0x34
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	00da      	lsls	r2, r3, #3
 8004074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004076:	4413      	add	r3, r2
 8004078:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800407c:	633b      	str	r3, [r7, #48]	@ 0x30
 800407e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004080:	2200      	movs	r2, #0
 8004082:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	785b      	ldrb	r3, [r3, #1]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d126      	bne.n	80040e0 <HAL_PCD_EP_DB_Transmit+0x156>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	4413      	add	r3, r2
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	00da      	lsls	r2, r3, #3
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	801a      	strh	r2, [r3, #0]
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d8:	b29a      	uxth	r2, r3
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	801a      	strh	r2, [r3, #0]
 80040de:	e017      	b.n	8004110 <HAL_PCD_EP_DB_Transmit+0x186>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	785b      	ldrb	r3, [r3, #1]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d113      	bne.n	8004110 <HAL_PCD_EP_DB_Transmit+0x186>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	4413      	add	r3, r2
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	00da      	lsls	r2, r3, #3
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	4413      	add	r3, r2
 8004104:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004108:	623b      	str	r3, [r7, #32]
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	2200      	movs	r2, #0
 800410e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	4619      	mov	r1, r3
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f7ff fa0b 	bl	8003532 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 82fa 	beq.w	800471c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800413e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004142:	82fb      	strh	r3, [r7, #22]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	441a      	add	r2, r3
 8004152:	8afb      	ldrh	r3, [r7, #22]
 8004154:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004158:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800415c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004164:	b29b      	uxth	r3, r3
 8004166:	8013      	strh	r3, [r2, #0]
 8004168:	e2d8      	b.n	800471c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800416a:	88fb      	ldrh	r3, [r7, #6]
 800416c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d021      	beq.n	80041b8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	b29b      	uxth	r3, r3
 8004186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800418a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	441a      	add	r2, r3
 80041a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80041a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041be:	2b01      	cmp	r3, #1
 80041c0:	f040 82ac 	bne.w	800471c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80041cc:	441a      	add	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80041da:	441a      	add	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	6a1a      	ldr	r2, [r3, #32]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d30b      	bcc.n	8004204 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6a1a      	ldr	r2, [r3, #32]
 80041f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041fc:	1ad2      	subs	r2, r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	621a      	str	r2, [r3, #32]
 8004202:	e017      	b.n	8004234 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d108      	bne.n	800421e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800420c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004210:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800421c:	e00a      	b.n	8004234 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2200      	movs	r2, #0
 8004232:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	785b      	ldrb	r3, [r3, #1]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d165      	bne.n	8004308 <HAL_PCD_EP_DB_Transmit+0x37e>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004250:	4413      	add	r3, r2
 8004252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	00da      	lsls	r2, r3, #3
 800425a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800425c:	4413      	add	r3, r2
 800425e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004262:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	b29b      	uxth	r3, r3
 800426a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426e:	b29a      	uxth	r2, r3
 8004270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004272:	801a      	strh	r2, [r3, #0]
 8004274:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <HAL_PCD_EP_DB_Transmit+0x308>
 800427c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29b      	uxth	r3, r3
 8004282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800428a:	b29a      	uxth	r2, r3
 800428c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428e:	801a      	strh	r2, [r3, #0]
 8004290:	e057      	b.n	8004342 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004292:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004296:	2b3e      	cmp	r3, #62	@ 0x3e
 8004298:	d818      	bhi.n	80042cc <HAL_PCD_EP_DB_Transmit+0x342>
 800429a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800429e:	085b      	lsrs	r3, r3, #1
 80042a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_PCD_EP_DB_Transmit+0x32a>
 80042ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042b0:	3301      	adds	r3, #1
 80042b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042bc:	b29b      	uxth	r3, r3
 80042be:	029b      	lsls	r3, r3, #10
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	4313      	orrs	r3, r2
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c8:	801a      	strh	r2, [r3, #0]
 80042ca:	e03a      	b.n	8004342 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80042cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <HAL_PCD_EP_DB_Transmit+0x35c>
 80042e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042e2:	3b01      	subs	r3, #1
 80042e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	029b      	lsls	r3, r3, #10
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	4313      	orrs	r3, r2
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004300:	b29a      	uxth	r2, r3
 8004302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004304:	801a      	strh	r2, [r3, #0]
 8004306:	e01c      	b.n	8004342 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	785b      	ldrb	r3, [r3, #1]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d118      	bne.n	8004342 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	647b      	str	r3, [r7, #68]	@ 0x44
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800431e:	b29b      	uxth	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004324:	4413      	add	r3, r2
 8004326:	647b      	str	r3, [r7, #68]	@ 0x44
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	00da      	lsls	r2, r3, #3
 800432e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004330:	4413      	add	r3, r2
 8004332:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004336:	643b      	str	r3, [r7, #64]	@ 0x40
 8004338:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800433c:	b29a      	uxth	r2, r3
 800433e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004340:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	6959      	ldr	r1, [r3, #20]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	891a      	ldrh	r2, [r3, #8]
 800434e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004352:	b29b      	uxth	r3, r3
 8004354:	f005 fa9c 	bl	8009890 <USB_WritePMA>
 8004358:	e1e0      	b.n	800471c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004362:	b29b      	uxth	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	4413      	add	r3, r2
 8004374:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800437e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800438a:	429a      	cmp	r2, r3
 800438c:	d307      	bcc.n	800439e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004396:	1ad2      	subs	r2, r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	619a      	str	r2, [r3, #24]
 800439c:	e002      	b.n	80043a4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2200      	movs	r2, #0
 80043a2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f040 80c0 	bne.w	800452e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	785b      	ldrb	r3, [r3, #1]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d126      	bne.n	8004404 <HAL_PCD_EP_DB_Transmit+0x47a>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043ca:	4413      	add	r3, r2
 80043cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	00da      	lsls	r2, r3, #3
 80043d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043d6:	4413      	add	r3, r2
 80043d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043ec:	801a      	strh	r2, [r3, #0]
 80043ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	e01a      	b.n	800443a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	785b      	ldrb	r3, [r3, #1]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d116      	bne.n	800443a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	667b      	str	r3, [r7, #100]	@ 0x64
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800441a:	b29b      	uxth	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004420:	4413      	add	r3, r2
 8004422:	667b      	str	r3, [r7, #100]	@ 0x64
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	00da      	lsls	r2, r3, #3
 800442a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800442c:	4413      	add	r3, r2
 800442e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004432:	663b      	str	r3, [r7, #96]	@ 0x60
 8004434:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004436:	2200      	movs	r2, #0
 8004438:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d12b      	bne.n	80044a0 <HAL_PCD_EP_DB_Transmit+0x516>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004456:	b29b      	uxth	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800445c:	4413      	add	r3, r2
 800445e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	00da      	lsls	r2, r3, #3
 8004466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004468:	4413      	add	r3, r2
 800446a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800446e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004472:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800447e:	b29a      	uxth	r2, r3
 8004480:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004484:	801a      	strh	r2, [r3, #0]
 8004486:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b29b      	uxth	r3, r3
 800448e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004496:	b29a      	uxth	r2, r3
 8004498:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800449c:	801a      	strh	r2, [r3, #0]
 800449e:	e017      	b.n	80044d0 <HAL_PCD_EP_DB_Transmit+0x546>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	785b      	ldrb	r3, [r3, #1]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d113      	bne.n	80044d0 <HAL_PCD_EP_DB_Transmit+0x546>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044b6:	4413      	add	r3, r2
 80044b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	00da      	lsls	r2, r3, #3
 80044c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044c2:	4413      	add	r3, r2
 80044c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80044ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044cc:	2200      	movs	r2, #0
 80044ce:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	4619      	mov	r1, r3
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7ff f82b 	bl	8003532 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 811a 	bne.w	800471c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004502:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	441a      	add	r2, r3
 8004514:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800451c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004520:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004528:	b29b      	uxth	r3, r3
 800452a:	8013      	strh	r3, [r2, #0]
 800452c:	e0f6      	b.n	800471c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d121      	bne.n	800457c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b29b      	uxth	r3, r3
 800454a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800454e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004552:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	441a      	add	r2, r3
 8004564:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800456c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004570:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004578:	b29b      	uxth	r3, r3
 800457a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004582:	2b01      	cmp	r3, #1
 8004584:	f040 80ca 	bne.w	800471c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004590:	441a      	add	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	69da      	ldr	r2, [r3, #28]
 800459a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800459e:	441a      	add	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	6a1a      	ldr	r2, [r3, #32]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d30b      	bcc.n	80045c8 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6a1a      	ldr	r2, [r3, #32]
 80045bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045c0:	1ad2      	subs	r2, r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	621a      	str	r2, [r3, #32]
 80045c6:	e017      	b.n	80045f8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d108      	bne.n	80045e2 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80045d0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80045d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80045e0:	e00a      	b.n	80045f8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2200      	movs	r2, #0
 80045ee:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	785b      	ldrb	r3, [r3, #1]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d165      	bne.n	80046d2 <HAL_PCD_EP_DB_Transmit+0x748>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004614:	b29b      	uxth	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800461a:	4413      	add	r3, r2
 800461c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	00da      	lsls	r2, r3, #3
 8004624:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004626:	4413      	add	r3, r2
 8004628:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800462c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800462e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004638:	b29a      	uxth	r2, r3
 800463a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800463c:	801a      	strh	r2, [r3, #0]
 800463e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10a      	bne.n	800465c <HAL_PCD_EP_DB_Transmit+0x6d2>
 8004646:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004654:	b29a      	uxth	r2, r3
 8004656:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004658:	801a      	strh	r2, [r3, #0]
 800465a:	e054      	b.n	8004706 <HAL_PCD_EP_DB_Transmit+0x77c>
 800465c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004660:	2b3e      	cmp	r3, #62	@ 0x3e
 8004662:	d818      	bhi.n	8004696 <HAL_PCD_EP_DB_Transmit+0x70c>
 8004664:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800466c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <HAL_PCD_EP_DB_Transmit+0x6f4>
 8004678:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800467a:	3301      	adds	r3, #1
 800467c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800467e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	b29a      	uxth	r2, r3
 8004684:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004686:	b29b      	uxth	r3, r3
 8004688:	029b      	lsls	r3, r3, #10
 800468a:	b29b      	uxth	r3, r3
 800468c:	4313      	orrs	r3, r2
 800468e:	b29a      	uxth	r2, r3
 8004690:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004692:	801a      	strh	r2, [r3, #0]
 8004694:	e037      	b.n	8004706 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800469e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d102      	bne.n	80046b0 <HAL_PCD_EP_DB_Transmit+0x726>
 80046aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046ac:	3b01      	subs	r3, #1
 80046ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	029b      	lsls	r3, r3, #10
 80046bc:	b29b      	uxth	r3, r3
 80046be:	4313      	orrs	r3, r2
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046ce:	801a      	strh	r2, [r3, #0]
 80046d0:	e019      	b.n	8004706 <HAL_PCD_EP_DB_Transmit+0x77c>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	785b      	ldrb	r3, [r3, #1]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d115      	bne.n	8004706 <HAL_PCD_EP_DB_Transmit+0x77c>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e8:	4413      	add	r3, r2
 80046ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	00da      	lsls	r2, r3, #3
 80046f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f4:	4413      	add	r3, r2
 80046f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80046fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004700:	b29a      	uxth	r2, r3
 8004702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004704:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6959      	ldr	r1, [r3, #20]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	895a      	ldrh	r2, [r3, #10]
 8004712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004716:	b29b      	uxth	r3, r3
 8004718:	f005 f8ba 	bl	8009890 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004736:	82bb      	strh	r3, [r7, #20]
 8004738:	8abb      	ldrh	r3, [r7, #20]
 800473a:	f083 0310 	eor.w	r3, r3, #16
 800473e:	82bb      	strh	r3, [r7, #20]
 8004740:	8abb      	ldrh	r3, [r7, #20]
 8004742:	f083 0320 	eor.w	r3, r3, #32
 8004746:	82bb      	strh	r3, [r7, #20]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	441a      	add	r2, r3
 8004756:	8abb      	ldrh	r3, [r7, #20]
 8004758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800475c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004768:	b29b      	uxth	r3, r3
 800476a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3790      	adds	r7, #144	@ 0x90
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800477e:	af00      	add	r7, sp, #0
 8004780:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004784:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004788:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800478a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800478e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f001 b83a 	b.w	8005812 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800479e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 816f 	beq.w	8004a92 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047b4:	4bb5      	ldr	r3, [pc, #724]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 030c 	and.w	r3, r3, #12
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d00c      	beq.n	80047da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047c0:	4bb2      	ldr	r3, [pc, #712]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d15c      	bne.n	8004886 <HAL_RCC_OscConfig+0x10e>
 80047cc:	4baf      	ldr	r3, [pc, #700]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80047d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d8:	d155      	bne.n	8004886 <HAL_RCC_OscConfig+0x10e>
 80047da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047de:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80047e6:	fa93 f3a3 	rbit	r3, r3
 80047ea:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 80047ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b01      	cmp	r3, #1
 8004804:	d102      	bne.n	800480c <HAL_RCC_OscConfig+0x94>
 8004806:	4ba1      	ldr	r3, [pc, #644]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	e015      	b.n	8004838 <HAL_RCC_OscConfig+0xc0>
 800480c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004810:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004814:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8004818:	fa93 f3a3 	rbit	r3, r3
 800481c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8004820:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004824:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004828:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800482c:	fa93 f3a3 	rbit	r3, r3
 8004830:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004834:	4b95      	ldr	r3, [pc, #596]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800483c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8004840:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8004844:	fa92 f2a2 	rbit	r2, r2
 8004848:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800484c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004850:	fab2 f282 	clz	r2, r2
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	f042 0220 	orr.w	r2, r2, #32
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	f002 021f 	and.w	r2, r2, #31
 8004860:	2101      	movs	r1, #1
 8004862:	fa01 f202 	lsl.w	r2, r1, r2
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 8111 	beq.w	8004a90 <HAL_RCC_OscConfig+0x318>
 800486e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004872:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 8108 	bne.w	8004a90 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	f000 bfc6 	b.w	8005812 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004886:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800488a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004896:	d106      	bne.n	80048a6 <HAL_RCC_OscConfig+0x12e>
 8004898:	4b7c      	ldr	r3, [pc, #496]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a7b      	ldr	r2, [pc, #492]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 800489e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	e036      	b.n	8004914 <HAL_RCC_OscConfig+0x19c>
 80048a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x158>
 80048b6:	4b75      	ldr	r3, [pc, #468]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a74      	ldr	r2, [pc, #464]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 80048bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	4b72      	ldr	r3, [pc, #456]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a71      	ldr	r2, [pc, #452]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 80048c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e021      	b.n	8004914 <HAL_RCC_OscConfig+0x19c>
 80048d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x184>
 80048e2:	4b6a      	ldr	r3, [pc, #424]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a69      	ldr	r2, [pc, #420]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 80048e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4b67      	ldr	r3, [pc, #412]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a66      	ldr	r2, [pc, #408]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 80048f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0x19c>
 80048fc:	4b63      	ldr	r3, [pc, #396]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a62      	ldr	r2, [pc, #392]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 8004902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	4b60      	ldr	r3, [pc, #384]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a5f      	ldr	r2, [pc, #380]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 800490e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004912:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004914:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004918:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d059      	beq.n	80049d8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004924:	f7fe f960 	bl	8002be8 <HAL_GetTick>
 8004928:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492c:	e00a      	b.n	8004944 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800492e:	f7fe f95b 	bl	8002be8 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	@ 0x64
 800493c:	d902      	bls.n	8004944 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	f000 bf67 	b.w	8005812 <HAL_RCC_OscConfig+0x109a>
 8004944:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004948:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8004950:	fa93 f3a3 	rbit	r3, r3
 8004954:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8004958:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495c:	fab3 f383 	clz	r3, r3
 8004960:	b2db      	uxtb	r3, r3
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	d102      	bne.n	8004976 <HAL_RCC_OscConfig+0x1fe>
 8004970:	4b46      	ldr	r3, [pc, #280]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	e015      	b.n	80049a2 <HAL_RCC_OscConfig+0x22a>
 8004976:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800497a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8004982:	fa93 f3a3 	rbit	r3, r3
 8004986:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800498a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800498e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004992:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8004996:	fa93 f3a3 	rbit	r3, r3
 800499a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800499e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80049a6:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80049aa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80049ae:	fa92 f2a2 	rbit	r2, r2
 80049b2:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80049b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80049ba:	fab2 f282 	clz	r2, r2
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	f042 0220 	orr.w	r2, r2, #32
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	f002 021f 	and.w	r2, r2, #31
 80049ca:	2101      	movs	r1, #1
 80049cc:	fa01 f202 	lsl.w	r2, r1, r2
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0ab      	beq.n	800492e <HAL_RCC_OscConfig+0x1b6>
 80049d6:	e05c      	b.n	8004a92 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d8:	f7fe f906 	bl	8002be8 <HAL_GetTick>
 80049dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e0:	e00a      	b.n	80049f8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e2:	f7fe f901 	bl	8002be8 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b64      	cmp	r3, #100	@ 0x64
 80049f0:	d902      	bls.n	80049f8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	f000 bf0d 	b.w	8005812 <HAL_RCC_OscConfig+0x109a>
 80049f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049fc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004a04:	fa93 f3a3 	rbit	r3, r3
 8004a08:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8004a0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a10:	fab3 f383 	clz	r3, r3
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d102      	bne.n	8004a2a <HAL_RCC_OscConfig+0x2b2>
 8004a24:	4b19      	ldr	r3, [pc, #100]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	e015      	b.n	8004a56 <HAL_RCC_OscConfig+0x2de>
 8004a2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a2e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004a36:	fa93 f3a3 	rbit	r3, r3
 8004a3a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004a3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a42:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004a46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004a4a:	fa93 f3a3 	rbit	r3, r3
 8004a4e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004a52:	4b0e      	ldr	r3, [pc, #56]	@ (8004a8c <HAL_RCC_OscConfig+0x314>)
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a5a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8004a5e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8004a62:	fa92 f2a2 	rbit	r2, r2
 8004a66:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8004a6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004a6e:	fab2 f282 	clz	r2, r2
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	f042 0220 	orr.w	r2, r2, #32
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	f002 021f 	and.w	r2, r2, #31
 8004a7e:	2101      	movs	r1, #1
 8004a80:	fa01 f202 	lsl.w	r2, r1, r2
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1ab      	bne.n	80049e2 <HAL_RCC_OscConfig+0x26a>
 8004a8a:	e002      	b.n	8004a92 <HAL_RCC_OscConfig+0x31a>
 8004a8c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 817f 	beq.w	8004da6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004aa8:	4ba7      	ldr	r3, [pc, #668]	@ (8004d48 <HAL_RCC_OscConfig+0x5d0>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 030c 	and.w	r3, r3, #12
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00c      	beq.n	8004ace <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ab4:	4ba4      	ldr	r3, [pc, #656]	@ (8004d48 <HAL_RCC_OscConfig+0x5d0>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 030c 	and.w	r3, r3, #12
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d173      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x430>
 8004ac0:	4ba1      	ldr	r3, [pc, #644]	@ (8004d48 <HAL_RCC_OscConfig+0x5d0>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004acc:	d16c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x430>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004ad8:	fa93 f3a3 	rbit	r3, r3
 8004adc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8004ae0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae4:	fab3 f383 	clz	r3, r3
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d102      	bne.n	8004afe <HAL_RCC_OscConfig+0x386>
 8004af8:	4b93      	ldr	r3, [pc, #588]	@ (8004d48 <HAL_RCC_OscConfig+0x5d0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	e013      	b.n	8004b26 <HAL_RCC_OscConfig+0x3ae>
 8004afe:	2302      	movs	r3, #2
 8004b00:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b04:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004b08:	fa93 f3a3 	rbit	r3, r3
 8004b0c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004b10:	2302      	movs	r3, #2
 8004b12:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004b16:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004b1a:	fa93 f3a3 	rbit	r3, r3
 8004b1e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004b22:	4b89      	ldr	r3, [pc, #548]	@ (8004d48 <HAL_RCC_OscConfig+0x5d0>)
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	2202      	movs	r2, #2
 8004b28:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004b2c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8004b30:	fa92 f2a2 	rbit	r2, r2
 8004b34:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8004b38:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004b3c:	fab2 f282 	clz	r2, r2
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	f042 0220 	orr.w	r2, r2, #32
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	f002 021f 	and.w	r2, r2, #31
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCC_OscConfig+0x3f6>
 8004b58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b5c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d002      	beq.n	8004b6e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f000 be52 	b.w	8005812 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6e:	4b76      	ldr	r3, [pc, #472]	@ (8004d48 <HAL_RCC_OscConfig+0x5d0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	21f8      	movs	r1, #248	@ 0xf8
 8004b84:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b88:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8004b8c:	fa91 f1a1 	rbit	r1, r1
 8004b90:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8004b94:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004b98:	fab1 f181 	clz	r1, r1
 8004b9c:	b2c9      	uxtb	r1, r1
 8004b9e:	408b      	lsls	r3, r1
 8004ba0:	4969      	ldr	r1, [pc, #420]	@ (8004d48 <HAL_RCC_OscConfig+0x5d0>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba6:	e0fe      	b.n	8004da6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ba8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8088 	beq.w	8004cca <HAL_RCC_OscConfig+0x552>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004bc4:	fa93 f3a3 	rbit	r3, r3
 8004bc8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8004bcc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd0:	fab3 f383 	clz	r3, r3
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004bda:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	461a      	mov	r2, r3
 8004be2:	2301      	movs	r3, #1
 8004be4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be6:	f7fd ffff 	bl	8002be8 <HAL_GetTick>
 8004bea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bee:	e00a      	b.n	8004c06 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bf0:	f7fd fffa 	bl	8002be8 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d902      	bls.n	8004c06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	f000 be06 	b.w	8005812 <HAL_RCC_OscConfig+0x109a>
 8004c06:	2302      	movs	r3, #2
 8004c08:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004c10:	fa93 f3a3 	rbit	r3, r3
 8004c14:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8004c18:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1c:	fab3 f383 	clz	r3, r3
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d102      	bne.n	8004c36 <HAL_RCC_OscConfig+0x4be>
 8004c30:	4b45      	ldr	r3, [pc, #276]	@ (8004d48 <HAL_RCC_OscConfig+0x5d0>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	e013      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e6>
 8004c36:	2302      	movs	r3, #2
 8004c38:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004c40:	fa93 f3a3 	rbit	r3, r3
 8004c44:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004c48:	2302      	movs	r3, #2
 8004c4a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004c4e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004c52:	fa93 f3a3 	rbit	r3, r3
 8004c56:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d48 <HAL_RCC_OscConfig+0x5d0>)
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004c64:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8004c68:	fa92 f2a2 	rbit	r2, r2
 8004c6c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8004c70:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004c74:	fab2 f282 	clz	r2, r2
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	f042 0220 	orr.w	r2, r2, #32
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	f002 021f 	and.w	r2, r2, #31
 8004c84:	2101      	movs	r1, #1
 8004c86:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0af      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c90:	4b2d      	ldr	r3, [pc, #180]	@ (8004d48 <HAL_RCC_OscConfig+0x5d0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	21f8      	movs	r1, #248	@ 0xf8
 8004ca6:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004caa:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8004cae:	fa91 f1a1 	rbit	r1, r1
 8004cb2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8004cb6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004cba:	fab1 f181 	clz	r1, r1
 8004cbe:	b2c9      	uxtb	r1, r1
 8004cc0:	408b      	lsls	r3, r1
 8004cc2:	4921      	ldr	r1, [pc, #132]	@ (8004d48 <HAL_RCC_OscConfig+0x5d0>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	600b      	str	r3, [r1, #0]
 8004cc8:	e06d      	b.n	8004da6 <HAL_RCC_OscConfig+0x62e>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004cd4:	fa93 f3a3 	rbit	r3, r3
 8004cd8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8004cdc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce0:	fab3 f383 	clz	r3, r3
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004cea:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf6:	f7fd ff77 	bl	8002be8 <HAL_GetTick>
 8004cfa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cfe:	e00a      	b.n	8004d16 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d00:	f7fd ff72 	bl	8002be8 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d902      	bls.n	8004d16 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	f000 bd7e 	b.w	8005812 <HAL_RCC_OscConfig+0x109a>
 8004d16:	2302      	movs	r3, #2
 8004d18:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004d20:	fa93 f3a3 	rbit	r3, r3
 8004d24:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8004d28:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2c:	fab3 f383 	clz	r3, r3
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d105      	bne.n	8004d4c <HAL_RCC_OscConfig+0x5d4>
 8004d40:	4b01      	ldr	r3, [pc, #4]	@ (8004d48 <HAL_RCC_OscConfig+0x5d0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	e016      	b.n	8004d74 <HAL_RCC_OscConfig+0x5fc>
 8004d46:	bf00      	nop
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d56:	fa93 f3a3 	rbit	r3, r3
 8004d5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004d5e:	2302      	movs	r3, #2
 8004d60:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004d64:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004d68:	fa93 f3a3 	rbit	r3, r3
 8004d6c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004d70:	4bbf      	ldr	r3, [pc, #764]	@ (8005070 <HAL_RCC_OscConfig+0x8f8>)
 8004d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d74:	2202      	movs	r2, #2
 8004d76:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004d7a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004d7e:	fa92 f2a2 	rbit	r2, r2
 8004d82:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8004d86:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004d8a:	fab2 f282 	clz	r2, r2
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	f042 0220 	orr.w	r2, r2, #32
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	f002 021f 	and.w	r2, r2, #31
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004da0:	4013      	ands	r3, r2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1ac      	bne.n	8004d00 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004daa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 8113 	beq.w	8004fe2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d07c      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x74e>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd6:	fa93 f3a3 	rbit	r3, r3
 8004dda:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8004dde:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de2:	fab3 f383 	clz	r3, r3
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	4ba2      	ldr	r3, [pc, #648]	@ (8005074 <HAL_RCC_OscConfig+0x8fc>)
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	461a      	mov	r2, r3
 8004df2:	2301      	movs	r3, #1
 8004df4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df6:	f7fd fef7 	bl	8002be8 <HAL_GetTick>
 8004dfa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e00:	f7fd fef2 	bl	8002be8 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d902      	bls.n	8004e16 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	f000 bcfe 	b.w	8005812 <HAL_RCC_OscConfig+0x109a>
 8004e16:	2302      	movs	r3, #2
 8004e18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e20:	fa93 f2a3 	rbit	r2, r3
 8004e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e28:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e36:	2202      	movs	r2, #2
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	fa93 f2a3 	rbit	r2, r3
 8004e48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	fa93 f2a3 	rbit	r2, r3
 8004e6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e70:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004e74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e76:	4b7e      	ldr	r3, [pc, #504]	@ (8005070 <HAL_RCC_OscConfig+0x8f8>)
 8004e78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e7e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004e82:	2102      	movs	r1, #2
 8004e84:	6019      	str	r1, [r3, #0]
 8004e86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	fa93 f1a3 	rbit	r1, r3
 8004e94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004e9c:	6019      	str	r1, [r3, #0]
  return result;
 8004e9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ea2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	fab3 f383 	clz	r3, r3
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	2101      	movs	r1, #1
 8004eba:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d09d      	beq.n	8004e00 <HAL_RCC_OscConfig+0x688>
 8004ec4:	e08d      	b.n	8004fe2 <HAL_RCC_OscConfig+0x86a>
 8004ec6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004eca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ed6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	fa93 f2a3 	rbit	r2, r3
 8004ee0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ee4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004ee8:	601a      	str	r2, [r3, #0]
  return result;
 8004eea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004eee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004ef2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ef4:	fab3 f383 	clz	r3, r3
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	4b5d      	ldr	r3, [pc, #372]	@ (8005074 <HAL_RCC_OscConfig+0x8fc>)
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	461a      	mov	r2, r3
 8004f04:	2300      	movs	r3, #0
 8004f06:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f08:	f7fd fe6e 	bl	8002be8 <HAL_GetTick>
 8004f0c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f10:	e00a      	b.n	8004f28 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f12:	f7fd fe69 	bl	8002be8 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d902      	bls.n	8004f28 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	f000 bc75 	b.w	8005812 <HAL_RCC_OscConfig+0x109a>
 8004f28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f2c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004f30:	2202      	movs	r2, #2
 8004f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f38:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	fa93 f2a3 	rbit	r2, r3
 8004f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f46:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004f54:	2202      	movs	r2, #2
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	fa93 f2a3 	rbit	r2, r3
 8004f66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f6a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f74:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004f78:	2202      	movs	r2, #2
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f80:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	fa93 f2a3 	rbit	r2, r3
 8004f8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f8e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004f92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f94:	4b36      	ldr	r3, [pc, #216]	@ (8005070 <HAL_RCC_OscConfig+0x8f8>)
 8004f96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f9c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	6019      	str	r1, [r3, #0]
 8004fa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fa8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	fa93 f1a3 	rbit	r1, r3
 8004fb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fb6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004fba:	6019      	str	r1, [r3, #0]
  return result;
 8004fbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fc0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	fab3 f383 	clz	r3, r3
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d197      	bne.n	8004f12 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fe6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 81a5 	beq.w	8005342 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8005070 <HAL_RCC_OscConfig+0x8f8>)
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d116      	bne.n	8005038 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500a:	4b19      	ldr	r3, [pc, #100]	@ (8005070 <HAL_RCC_OscConfig+0x8f8>)
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	4a18      	ldr	r2, [pc, #96]	@ (8005070 <HAL_RCC_OscConfig+0x8f8>)
 8005010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005014:	61d3      	str	r3, [r2, #28]
 8005016:	4b16      	ldr	r3, [pc, #88]	@ (8005070 <HAL_RCC_OscConfig+0x8f8>)
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800501e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005022:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800502c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005030:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005038:	4b0f      	ldr	r3, [pc, #60]	@ (8005078 <HAL_RCC_OscConfig+0x900>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d121      	bne.n	8005088 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005044:	4b0c      	ldr	r3, [pc, #48]	@ (8005078 <HAL_RCC_OscConfig+0x900>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a0b      	ldr	r2, [pc, #44]	@ (8005078 <HAL_RCC_OscConfig+0x900>)
 800504a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800504e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005050:	f7fd fdca 	bl	8002be8 <HAL_GetTick>
 8005054:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005058:	e010      	b.n	800507c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505a:	f7fd fdc5 	bl	8002be8 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b64      	cmp	r3, #100	@ 0x64
 8005068:	d908      	bls.n	800507c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e3d1      	b.n	8005812 <HAL_RCC_OscConfig+0x109a>
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000
 8005074:	10908120 	.word	0x10908120
 8005078:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507c:	4b8d      	ldr	r3, [pc, #564]	@ (80052b4 <HAL_RCC_OscConfig+0xb3c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0e8      	beq.n	800505a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005088:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800508c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d106      	bne.n	80050a6 <HAL_RCC_OscConfig+0x92e>
 8005098:	4b87      	ldr	r3, [pc, #540]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	4a86      	ldr	r2, [pc, #536]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 800509e:	f043 0301 	orr.w	r3, r3, #1
 80050a2:	6213      	str	r3, [r2, #32]
 80050a4:	e035      	b.n	8005112 <HAL_RCC_OscConfig+0x99a>
 80050a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x958>
 80050b6:	4b80      	ldr	r3, [pc, #512]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	4a7f      	ldr	r2, [pc, #508]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 80050bc:	f023 0301 	bic.w	r3, r3, #1
 80050c0:	6213      	str	r3, [r2, #32]
 80050c2:	4b7d      	ldr	r3, [pc, #500]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	4a7c      	ldr	r2, [pc, #496]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 80050c8:	f023 0304 	bic.w	r3, r3, #4
 80050cc:	6213      	str	r3, [r2, #32]
 80050ce:	e020      	b.n	8005112 <HAL_RCC_OscConfig+0x99a>
 80050d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b05      	cmp	r3, #5
 80050de:	d10c      	bne.n	80050fa <HAL_RCC_OscConfig+0x982>
 80050e0:	4b75      	ldr	r3, [pc, #468]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	4a74      	ldr	r2, [pc, #464]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 80050e6:	f043 0304 	orr.w	r3, r3, #4
 80050ea:	6213      	str	r3, [r2, #32]
 80050ec:	4b72      	ldr	r3, [pc, #456]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	4a71      	ldr	r2, [pc, #452]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	6213      	str	r3, [r2, #32]
 80050f8:	e00b      	b.n	8005112 <HAL_RCC_OscConfig+0x99a>
 80050fa:	4b6f      	ldr	r3, [pc, #444]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	4a6e      	ldr	r2, [pc, #440]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 8005100:	f023 0301 	bic.w	r3, r3, #1
 8005104:	6213      	str	r3, [r2, #32]
 8005106:	4b6c      	ldr	r3, [pc, #432]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	4a6b      	ldr	r2, [pc, #428]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 800510c:	f023 0304 	bic.w	r3, r3, #4
 8005110:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005116:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 8081 	beq.w	8005226 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005124:	f7fd fd60 	bl	8002be8 <HAL_GetTick>
 8005128:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800512c:	e00b      	b.n	8005146 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800512e:	f7fd fd5b 	bl	8002be8 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800513e:	4293      	cmp	r3, r2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e365      	b.n	8005812 <HAL_RCC_OscConfig+0x109a>
 8005146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800514a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800514e:	2202      	movs	r2, #2
 8005150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005156:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	fa93 f2a3 	rbit	r2, r3
 8005160:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005164:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800516e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005172:	2202      	movs	r2, #2
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800517a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	fa93 f2a3 	rbit	r2, r3
 8005184:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005188:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800518c:	601a      	str	r2, [r3, #0]
  return result;
 800518e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005192:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005196:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005198:	fab3 f383 	clz	r3, r3
 800519c:	b2db      	uxtb	r3, r3
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	f043 0302 	orr.w	r3, r3, #2
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d102      	bne.n	80051b2 <HAL_RCC_OscConfig+0xa3a>
 80051ac:	4b42      	ldr	r3, [pc, #264]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	e013      	b.n	80051da <HAL_RCC_OscConfig+0xa62>
 80051b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051b6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80051ba:	2202      	movs	r2, #2
 80051bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051c2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	fa93 f2a3 	rbit	r2, r3
 80051cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051d0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	4b38      	ldr	r3, [pc, #224]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80051de:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80051e2:	2102      	movs	r1, #2
 80051e4:	6011      	str	r1, [r2, #0]
 80051e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80051ea:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	fa92 f1a2 	rbit	r1, r2
 80051f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80051f8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80051fc:	6011      	str	r1, [r2, #0]
  return result;
 80051fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005202:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	fab2 f282 	clz	r2, r2
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	f002 021f 	and.w	r2, r2, #31
 8005218:	2101      	movs	r1, #1
 800521a:	fa01 f202 	lsl.w	r2, r1, r2
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d084      	beq.n	800512e <HAL_RCC_OscConfig+0x9b6>
 8005224:	e083      	b.n	800532e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005226:	f7fd fcdf 	bl	8002be8 <HAL_GetTick>
 800522a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800522e:	e00b      	b.n	8005248 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005230:	f7fd fcda 	bl	8002be8 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005240:	4293      	cmp	r3, r2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e2e4      	b.n	8005812 <HAL_RCC_OscConfig+0x109a>
 8005248:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800524c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005250:	2202      	movs	r2, #2
 8005252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005258:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	fa93 f2a3 	rbit	r2, r3
 8005262:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005266:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005270:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005274:	2202      	movs	r2, #2
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800527c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	fa93 f2a3 	rbit	r2, r3
 8005286:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800528a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800528e:	601a      	str	r2, [r3, #0]
  return result;
 8005290:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005294:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005298:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800529a:	fab3 f383 	clz	r3, r3
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f043 0302 	orr.w	r3, r3, #2
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d106      	bne.n	80052bc <HAL_RCC_OscConfig+0xb44>
 80052ae:	4b02      	ldr	r3, [pc, #8]	@ (80052b8 <HAL_RCC_OscConfig+0xb40>)
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	e017      	b.n	80052e4 <HAL_RCC_OscConfig+0xb6c>
 80052b4:	40007000 	.word	0x40007000
 80052b8:	40021000 	.word	0x40021000
 80052bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052c0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80052c4:	2202      	movs	r2, #2
 80052c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052cc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	fa93 f2a3 	rbit	r2, r3
 80052d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052da:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	4bb3      	ldr	r3, [pc, #716]	@ (80055b0 <HAL_RCC_OscConfig+0xe38>)
 80052e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80052e8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80052ec:	2102      	movs	r1, #2
 80052ee:	6011      	str	r1, [r2, #0]
 80052f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80052f4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	fa92 f1a2 	rbit	r1, r2
 80052fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005302:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8005306:	6011      	str	r1, [r2, #0]
  return result;
 8005308:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800530c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	fab2 f282 	clz	r2, r2
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	f002 021f 	and.w	r2, r2, #31
 8005322:	2101      	movs	r1, #1
 8005324:	fa01 f202 	lsl.w	r2, r1, r2
 8005328:	4013      	ands	r3, r2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d180      	bne.n	8005230 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800532e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8005332:	2b01      	cmp	r3, #1
 8005334:	d105      	bne.n	8005342 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005336:	4b9e      	ldr	r3, [pc, #632]	@ (80055b0 <HAL_RCC_OscConfig+0xe38>)
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	4a9d      	ldr	r2, [pc, #628]	@ (80055b0 <HAL_RCC_OscConfig+0xe38>)
 800533c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005340:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005342:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005346:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 825e 	beq.w	8005810 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005354:	4b96      	ldr	r3, [pc, #600]	@ (80055b0 <HAL_RCC_OscConfig+0xe38>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 030c 	and.w	r3, r3, #12
 800535c:	2b08      	cmp	r3, #8
 800535e:	f000 821f 	beq.w	80057a0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005362:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005366:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	2b02      	cmp	r3, #2
 8005370:	f040 8170 	bne.w	8005654 <HAL_RCC_OscConfig+0xedc>
 8005374:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005378:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800537c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005382:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005386:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	fa93 f2a3 	rbit	r2, r3
 8005390:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005394:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005398:	601a      	str	r2, [r3, #0]
  return result;
 800539a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800539e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80053a2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a4:	fab3 f383 	clz	r3, r3
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80053ae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	461a      	mov	r2, r3
 80053b6:	2300      	movs	r3, #0
 80053b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ba:	f7fd fc15 	bl	8002be8 <HAL_GetTick>
 80053be:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053c2:	e009      	b.n	80053d8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c4:	f7fd fc10 	bl	8002be8 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e21c      	b.n	8005812 <HAL_RCC_OscConfig+0x109a>
 80053d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053dc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80053e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80053e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053ea:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	fa93 f2a3 	rbit	r2, r3
 80053f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053f8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80053fc:	601a      	str	r2, [r3, #0]
  return result;
 80053fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005402:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005406:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005408:	fab3 f383 	clz	r3, r3
 800540c:	b2db      	uxtb	r3, r3
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	d102      	bne.n	8005422 <HAL_RCC_OscConfig+0xcaa>
 800541c:	4b64      	ldr	r3, [pc, #400]	@ (80055b0 <HAL_RCC_OscConfig+0xe38>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	e027      	b.n	8005472 <HAL_RCC_OscConfig+0xcfa>
 8005422:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005426:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800542a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800542e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005434:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	fa93 f2a3 	rbit	r2, r3
 800543e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005442:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800544c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005450:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800545a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	fa93 f2a3 	rbit	r2, r3
 8005464:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005468:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	4b50      	ldr	r3, [pc, #320]	@ (80055b0 <HAL_RCC_OscConfig+0xe38>)
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005476:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800547a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800547e:	6011      	str	r1, [r2, #0]
 8005480:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005484:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	fa92 f1a2 	rbit	r1, r2
 800548e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005492:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8005496:	6011      	str	r1, [r2, #0]
  return result;
 8005498:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800549c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	fab2 f282 	clz	r2, r2
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	f042 0220 	orr.w	r2, r2, #32
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	f002 021f 	and.w	r2, r2, #31
 80054b2:	2101      	movs	r1, #1
 80054b4:	fa01 f202 	lsl.w	r2, r1, r2
 80054b8:	4013      	ands	r3, r2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d182      	bne.n	80053c4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054be:	4b3c      	ldr	r3, [pc, #240]	@ (80055b0 <HAL_RCC_OscConfig+0xe38>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	f023 020f 	bic.w	r2, r3, #15
 80054c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d2:	4937      	ldr	r1, [pc, #220]	@ (80055b0 <HAL_RCC_OscConfig+0xe38>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80054d8:	4b35      	ldr	r3, [pc, #212]	@ (80055b0 <HAL_RCC_OscConfig+0xe38>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80054e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6a19      	ldr	r1, [r3, #32]
 80054ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	430b      	orrs	r3, r1
 80054fa:	492d      	ldr	r1, [pc, #180]	@ (80055b0 <HAL_RCC_OscConfig+0xe38>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	604b      	str	r3, [r1, #4]
 8005500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005504:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005508:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800550c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005512:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	fa93 f2a3 	rbit	r2, r3
 800551c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005520:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005524:	601a      	str	r2, [r3, #0]
  return result;
 8005526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800552a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800552e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005530:	fab3 f383 	clz	r3, r3
 8005534:	b2db      	uxtb	r3, r3
 8005536:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800553a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	461a      	mov	r2, r3
 8005542:	2301      	movs	r3, #1
 8005544:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005546:	f7fd fb4f 	bl	8002be8 <HAL_GetTick>
 800554a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800554e:	e009      	b.n	8005564 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005550:	f7fd fb4a 	bl	8002be8 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e156      	b.n	8005812 <HAL_RCC_OscConfig+0x109a>
 8005564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005568:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800556c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005576:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	fa93 f2a3 	rbit	r2, r3
 8005580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005584:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005588:	601a      	str	r2, [r3, #0]
  return result;
 800558a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800558e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005592:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005594:	fab3 f383 	clz	r3, r3
 8005598:	b2db      	uxtb	r3, r3
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	b2db      	uxtb	r3, r3
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d105      	bne.n	80055b4 <HAL_RCC_OscConfig+0xe3c>
 80055a8:	4b01      	ldr	r3, [pc, #4]	@ (80055b0 <HAL_RCC_OscConfig+0xe38>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	e02a      	b.n	8005604 <HAL_RCC_OscConfig+0xe8c>
 80055ae:	bf00      	nop
 80055b0:	40021000 	.word	0x40021000
 80055b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055b8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80055bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80055c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055c6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	fa93 f2a3 	rbit	r2, r3
 80055d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055d4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055de:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80055e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055ec:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	fa93 f2a3 	rbit	r2, r3
 80055f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055fa:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	4b86      	ldr	r3, [pc, #536]	@ (800581c <HAL_RCC_OscConfig+0x10a4>)
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005608:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800560c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005610:	6011      	str	r1, [r2, #0]
 8005612:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005616:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	fa92 f1a2 	rbit	r1, r2
 8005620:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005624:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8005628:	6011      	str	r1, [r2, #0]
  return result;
 800562a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800562e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	fab2 f282 	clz	r2, r2
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	f042 0220 	orr.w	r2, r2, #32
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	f002 021f 	and.w	r2, r2, #31
 8005644:	2101      	movs	r1, #1
 8005646:	fa01 f202 	lsl.w	r2, r1, r2
 800564a:	4013      	ands	r3, r2
 800564c:	2b00      	cmp	r3, #0
 800564e:	f43f af7f 	beq.w	8005550 <HAL_RCC_OscConfig+0xdd8>
 8005652:	e0dd      	b.n	8005810 <HAL_RCC_OscConfig+0x1098>
 8005654:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005658:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800565c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005662:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005666:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	fa93 f2a3 	rbit	r2, r3
 8005670:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005674:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005678:	601a      	str	r2, [r3, #0]
  return result;
 800567a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800567e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005682:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005684:	fab3 f383 	clz	r3, r3
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800568e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	461a      	mov	r2, r3
 8005696:	2300      	movs	r3, #0
 8005698:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569a:	f7fd faa5 	bl	8002be8 <HAL_GetTick>
 800569e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056a2:	e009      	b.n	80056b8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a4:	f7fd faa0 	bl	8002be8 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e0ac      	b.n	8005812 <HAL_RCC_OscConfig+0x109a>
 80056b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056bc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80056c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80056c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056ca:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	fa93 f2a3 	rbit	r2, r3
 80056d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056d8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80056dc:	601a      	str	r2, [r3, #0]
  return result;
 80056de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056e2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80056e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056e8:	fab3 f383 	clz	r3, r3
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	095b      	lsrs	r3, r3, #5
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d102      	bne.n	8005702 <HAL_RCC_OscConfig+0xf8a>
 80056fc:	4b47      	ldr	r3, [pc, #284]	@ (800581c <HAL_RCC_OscConfig+0x10a4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	e027      	b.n	8005752 <HAL_RCC_OscConfig+0xfda>
 8005702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005706:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800570a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800570e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005710:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005714:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	fa93 f2a3 	rbit	r2, r3
 800571e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005722:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800572c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005730:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800573a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	fa93 f2a3 	rbit	r2, r3
 8005744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005748:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	4b33      	ldr	r3, [pc, #204]	@ (800581c <HAL_RCC_OscConfig+0x10a4>)
 8005750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005752:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005756:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800575a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800575e:	6011      	str	r1, [r2, #0]
 8005760:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005764:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	fa92 f1a2 	rbit	r1, r2
 800576e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005772:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8005776:	6011      	str	r1, [r2, #0]
  return result;
 8005778:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800577c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	fab2 f282 	clz	r2, r2
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	f042 0220 	orr.w	r2, r2, #32
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	f002 021f 	and.w	r2, r2, #31
 8005792:	2101      	movs	r1, #1
 8005794:	fa01 f202 	lsl.w	r2, r1, r2
 8005798:	4013      	ands	r3, r2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d182      	bne.n	80056a4 <HAL_RCC_OscConfig+0xf2c>
 800579e:	e037      	b.n	8005810 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e02e      	b.n	8005812 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057b4:	4b19      	ldr	r3, [pc, #100]	@ (800581c <HAL_RCC_OscConfig+0x10a4>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80057bc:	4b17      	ldr	r3, [pc, #92]	@ (800581c <HAL_RCC_OscConfig+0x10a4>)
 80057be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80057c8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80057cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d117      	bne.n	800580c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80057dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80057e0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80057e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d10b      	bne.n	800580c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80057f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80057f8:	f003 020f 	and.w	r2, r3, #15
 80057fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005800:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005808:	429a      	cmp	r2, r3
 800580a:	d001      	beq.n	8005810 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000

08005820 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b09e      	sub	sp, #120	@ 0x78
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e162      	b.n	8005afe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005838:	4b90      	ldr	r3, [pc, #576]	@ (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d910      	bls.n	8005868 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005846:	4b8d      	ldr	r3, [pc, #564]	@ (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f023 0207 	bic.w	r2, r3, #7
 800584e:	498b      	ldr	r1, [pc, #556]	@ (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	4313      	orrs	r3, r2
 8005854:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005856:	4b89      	ldr	r3, [pc, #548]	@ (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d001      	beq.n	8005868 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e14a      	b.n	8005afe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005874:	4b82      	ldr	r3, [pc, #520]	@ (8005a80 <HAL_RCC_ClockConfig+0x260>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	497f      	ldr	r1, [pc, #508]	@ (8005a80 <HAL_RCC_ClockConfig+0x260>)
 8005882:	4313      	orrs	r3, r2
 8005884:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80dc 	beq.w	8005a4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d13c      	bne.n	8005916 <HAL_RCC_ClockConfig+0xf6>
 800589c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058a0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058a4:	fa93 f3a3 	rbit	r3, r3
 80058a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80058aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ac:	fab3 f383 	clz	r3, r3
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	095b      	lsrs	r3, r3, #5
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	f043 0301 	orr.w	r3, r3, #1
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d102      	bne.n	80058c6 <HAL_RCC_ClockConfig+0xa6>
 80058c0:	4b6f      	ldr	r3, [pc, #444]	@ (8005a80 <HAL_RCC_ClockConfig+0x260>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	e00f      	b.n	80058e6 <HAL_RCC_ClockConfig+0xc6>
 80058c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058ce:	fa93 f3a3 	rbit	r3, r3
 80058d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80058d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80058da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058dc:	fa93 f3a3 	rbit	r3, r3
 80058e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058e2:	4b67      	ldr	r3, [pc, #412]	@ (8005a80 <HAL_RCC_ClockConfig+0x260>)
 80058e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80058ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80058ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058ee:	fa92 f2a2 	rbit	r2, r2
 80058f2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80058f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80058f6:	fab2 f282 	clz	r2, r2
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	f042 0220 	orr.w	r2, r2, #32
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	f002 021f 	and.w	r2, r2, #31
 8005906:	2101      	movs	r1, #1
 8005908:	fa01 f202 	lsl.w	r2, r1, r2
 800590c:	4013      	ands	r3, r2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d17b      	bne.n	8005a0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e0f3      	b.n	8005afe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b02      	cmp	r3, #2
 800591c:	d13c      	bne.n	8005998 <HAL_RCC_ClockConfig+0x178>
 800591e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005922:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005926:	fa93 f3a3 	rbit	r3, r3
 800592a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800592c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592e:	fab3 f383 	clz	r3, r3
 8005932:	b2db      	uxtb	r3, r3
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	b2db      	uxtb	r3, r3
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b01      	cmp	r3, #1
 8005940:	d102      	bne.n	8005948 <HAL_RCC_ClockConfig+0x128>
 8005942:	4b4f      	ldr	r3, [pc, #316]	@ (8005a80 <HAL_RCC_ClockConfig+0x260>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	e00f      	b.n	8005968 <HAL_RCC_ClockConfig+0x148>
 8005948:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800594c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005950:	fa93 f3a3 	rbit	r3, r3
 8005954:	647b      	str	r3, [r7, #68]	@ 0x44
 8005956:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800595a:	643b      	str	r3, [r7, #64]	@ 0x40
 800595c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800595e:	fa93 f3a3 	rbit	r3, r3
 8005962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005964:	4b46      	ldr	r3, [pc, #280]	@ (8005a80 <HAL_RCC_ClockConfig+0x260>)
 8005966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005968:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800596c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800596e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005970:	fa92 f2a2 	rbit	r2, r2
 8005974:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005976:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005978:	fab2 f282 	clz	r2, r2
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	f042 0220 	orr.w	r2, r2, #32
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	f002 021f 	and.w	r2, r2, #31
 8005988:	2101      	movs	r1, #1
 800598a:	fa01 f202 	lsl.w	r2, r1, r2
 800598e:	4013      	ands	r3, r2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d13a      	bne.n	8005a0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e0b2      	b.n	8005afe <HAL_RCC_ClockConfig+0x2de>
 8005998:	2302      	movs	r3, #2
 800599a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	fa93 f3a3 	rbit	r3, r3
 80059a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80059a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a6:	fab3 f383 	clz	r3, r3
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d102      	bne.n	80059c0 <HAL_RCC_ClockConfig+0x1a0>
 80059ba:	4b31      	ldr	r3, [pc, #196]	@ (8005a80 <HAL_RCC_ClockConfig+0x260>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	e00d      	b.n	80059dc <HAL_RCC_ClockConfig+0x1bc>
 80059c0:	2302      	movs	r3, #2
 80059c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80059cc:	2302      	movs	r3, #2
 80059ce:	623b      	str	r3, [r7, #32]
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	fa93 f3a3 	rbit	r3, r3
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	4b29      	ldr	r3, [pc, #164]	@ (8005a80 <HAL_RCC_ClockConfig+0x260>)
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	2202      	movs	r2, #2
 80059de:	61ba      	str	r2, [r7, #24]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	fa92 f2a2 	rbit	r2, r2
 80059e6:	617a      	str	r2, [r7, #20]
  return result;
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	fab2 f282 	clz	r2, r2
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	f042 0220 	orr.w	r2, r2, #32
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	f002 021f 	and.w	r2, r2, #31
 80059fa:	2101      	movs	r1, #1
 80059fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e079      	b.n	8005afe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005a80 <HAL_RCC_ClockConfig+0x260>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f023 0203 	bic.w	r2, r3, #3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	491a      	ldr	r1, [pc, #104]	@ (8005a80 <HAL_RCC_ClockConfig+0x260>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a1c:	f7fd f8e4 	bl	8002be8 <HAL_GetTick>
 8005a20:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a22:	e00a      	b.n	8005a3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a24:	f7fd f8e0 	bl	8002be8 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e061      	b.n	8005afe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3a:	4b11      	ldr	r3, [pc, #68]	@ (8005a80 <HAL_RCC_ClockConfig+0x260>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 020c 	and.w	r2, r3, #12
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d1eb      	bne.n	8005a24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d214      	bcs.n	8005a84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4b08      	ldr	r3, [pc, #32]	@ (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 0207 	bic.w	r2, r3, #7
 8005a62:	4906      	ldr	r1, [pc, #24]	@ (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6a:	4b04      	ldr	r3, [pc, #16]	@ (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d005      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e040      	b.n	8005afe <HAL_RCC_ClockConfig+0x2de>
 8005a7c:	40022000 	.word	0x40022000
 8005a80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a90:	4b1d      	ldr	r3, [pc, #116]	@ (8005b08 <HAL_RCC_ClockConfig+0x2e8>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	491a      	ldr	r1, [pc, #104]	@ (8005b08 <HAL_RCC_ClockConfig+0x2e8>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d009      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aae:	4b16      	ldr	r3, [pc, #88]	@ (8005b08 <HAL_RCC_ClockConfig+0x2e8>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	4912      	ldr	r1, [pc, #72]	@ (8005b08 <HAL_RCC_ClockConfig+0x2e8>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005ac2:	f000 f829 	bl	8005b18 <HAL_RCC_GetSysClockFreq>
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b08 <HAL_RCC_ClockConfig+0x2e8>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ad0:	22f0      	movs	r2, #240	@ 0xf0
 8005ad2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	fa92 f2a2 	rbit	r2, r2
 8005ada:	60fa      	str	r2, [r7, #12]
  return result;
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	fab2 f282 	clz	r2, r2
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	40d3      	lsrs	r3, r2
 8005ae6:	4a09      	ldr	r2, [pc, #36]	@ (8005b0c <HAL_RCC_ClockConfig+0x2ec>)
 8005ae8:	5cd3      	ldrb	r3, [r2, r3]
 8005aea:	fa21 f303 	lsr.w	r3, r1, r3
 8005aee:	4a08      	ldr	r2, [pc, #32]	@ (8005b10 <HAL_RCC_ClockConfig+0x2f0>)
 8005af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005af2:	4b08      	ldr	r3, [pc, #32]	@ (8005b14 <HAL_RCC_ClockConfig+0x2f4>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fd f832 	bl	8002b60 <HAL_InitTick>
  
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3778      	adds	r7, #120	@ 0x78
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	0800c6f8 	.word	0x0800c6f8
 8005b10:	20000000 	.word	0x20000000
 8005b14:	20000004 	.word	0x20000004

08005b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	2300      	movs	r3, #0
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005b32:	4b1f      	ldr	r3, [pc, #124]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f003 030c 	and.w	r3, r3, #12
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d002      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0x30>
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d003      	beq.n	8005b4e <HAL_RCC_GetSysClockFreq+0x36>
 8005b46:	e029      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b48:	4b1a      	ldr	r3, [pc, #104]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b4a:	613b      	str	r3, [r7, #16]
      break;
 8005b4c:	e029      	b.n	8005ba2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	0c9b      	lsrs	r3, r3, #18
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	4a18      	ldr	r2, [pc, #96]	@ (8005bb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b58:	5cd3      	ldrb	r3, [r2, r3]
 8005b5a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005b5c:	4b14      	ldr	r3, [pc, #80]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	4a15      	ldr	r2, [pc, #84]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b66:	5cd3      	ldrb	r3, [r2, r3]
 8005b68:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b74:	4a0f      	ldr	r2, [pc, #60]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	fb02 f303 	mul.w	r3, r2, r3
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	e007      	b.n	8005b96 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b86:	4a0b      	ldr	r2, [pc, #44]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	fb02 f303 	mul.w	r3, r2, r3
 8005b94:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	613b      	str	r3, [r7, #16]
      break;
 8005b9a:	e002      	b.n	8005ba2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b9c:	4b05      	ldr	r3, [pc, #20]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b9e:	613b      	str	r3, [r7, #16]
      break;
 8005ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ba2:	693b      	ldr	r3, [r7, #16]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	007a1200 	.word	0x007a1200
 8005bb8:	0800c710 	.word	0x0800c710
 8005bbc:	0800c720 	.word	0x0800c720

08005bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bc4:	4b03      	ldr	r3, [pc, #12]	@ (8005bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000000 	.word	0x20000000

08005bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005bde:	f7ff ffef 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005be2:	4601      	mov	r1, r0
 8005be4:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005bec:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005bf0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	fa92 f2a2 	rbit	r2, r2
 8005bf8:	603a      	str	r2, [r7, #0]
  return result;
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	fab2 f282 	clz	r2, r2
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	40d3      	lsrs	r3, r2
 8005c04:	4a04      	ldr	r2, [pc, #16]	@ (8005c18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005c06:	5cd3      	ldrb	r3, [r2, r3]
 8005c08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40021000 	.word	0x40021000
 8005c18:	0800c708 	.word	0x0800c708

08005c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005c22:	f7ff ffcd 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005c26:	4601      	mov	r1, r0
 8005c28:	4b0b      	ldr	r3, [pc, #44]	@ (8005c58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005c30:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005c34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	fa92 f2a2 	rbit	r2, r2
 8005c3c:	603a      	str	r2, [r7, #0]
  return result;
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	fab2 f282 	clz	r2, r2
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	40d3      	lsrs	r3, r2
 8005c48:	4a04      	ldr	r2, [pc, #16]	@ (8005c5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8005c4a:	5cd3      	ldrb	r3, [r2, r3]
 8005c4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005c50:	4618      	mov	r0, r3
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	0800c708 	.word	0x0800c708

08005c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b092      	sub	sp, #72	@ 0x48
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 80d4 	beq.w	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c84:	4b4e      	ldr	r3, [pc, #312]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10e      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c90:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	4a4a      	ldr	r2, [pc, #296]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c9a:	61d3      	str	r3, [r2, #28]
 8005c9c:	4b48      	ldr	r3, [pc, #288]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ca4:	60bb      	str	r3, [r7, #8]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cae:	4b45      	ldr	r3, [pc, #276]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d118      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cba:	4b42      	ldr	r3, [pc, #264]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a41      	ldr	r2, [pc, #260]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cc6:	f7fc ff8f 	bl	8002be8 <HAL_GetTick>
 8005cca:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cce:	f7fc ff8b 	bl	8002be8 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b64      	cmp	r3, #100	@ 0x64
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e1d6      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce0:	4b38      	ldr	r3, [pc, #224]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cec:	4b34      	ldr	r3, [pc, #208]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8084 	beq.w	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d07c      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1e:	fa93 f3a3 	rbit	r3, r3
 8005d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d26:	fab3 f383 	clz	r3, r3
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	4b26      	ldr	r3, [pc, #152]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	461a      	mov	r2, r3
 8005d36:	2301      	movs	r3, #1
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d42:	fa93 f3a3 	rbit	r3, r3
 8005d46:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d4a:	fab3 f383 	clz	r3, r3
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d5e:	4a18      	ldr	r2, [pc, #96]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d62:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d04b      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6e:	f7fc ff3b 	bl	8002be8 <HAL_GetTick>
 8005d72:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d74:	e00a      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d76:	f7fc ff37 	bl	8002be8 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e180      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d92:	fa93 f3a3 	rbit	r3, r3
 8005d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d98:	2302      	movs	r3, #2
 8005d9a:	623b      	str	r3, [r7, #32]
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	fa93 f3a3 	rbit	r3, r3
 8005da2:	61fb      	str	r3, [r7, #28]
  return result;
 8005da4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da6:	fab3 f383 	clz	r3, r3
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f043 0302 	orr.w	r3, r3, #2
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d108      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005dba:	4b01      	ldr	r3, [pc, #4]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	e00d      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	40007000 	.word	0x40007000
 8005dc8:	10908100 	.word	0x10908100
 8005dcc:	2302      	movs	r3, #2
 8005dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	fa93 f3a3 	rbit	r3, r3
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	4b9a      	ldr	r3, [pc, #616]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ddc:	2202      	movs	r2, #2
 8005dde:	613a      	str	r2, [r7, #16]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	fa92 f2a2 	rbit	r2, r2
 8005de6:	60fa      	str	r2, [r7, #12]
  return result;
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	fab2 f282 	clz	r2, r2
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	f002 021f 	and.w	r2, r2, #31
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0b7      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005e06:	4b8f      	ldr	r3, [pc, #572]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	498c      	ldr	r1, [pc, #560]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e18:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d105      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e20:	4b88      	ldr	r3, [pc, #544]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	4a87      	ldr	r2, [pc, #540]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d008      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e38:	4b82      	ldr	r3, [pc, #520]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3c:	f023 0203 	bic.w	r2, r3, #3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	497f      	ldr	r1, [pc, #508]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e56:	4b7b      	ldr	r3, [pc, #492]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	4978      	ldr	r1, [pc, #480]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e74:	4b73      	ldr	r3, [pc, #460]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	4970      	ldr	r1, [pc, #448]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d008      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e92:	4b6c      	ldr	r3, [pc, #432]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e96:	f023 0210 	bic.w	r2, r3, #16
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	4969      	ldr	r1, [pc, #420]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005eb0:	4b64      	ldr	r3, [pc, #400]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebc:	4961      	ldr	r1, [pc, #388]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ece:	4b5d      	ldr	r3, [pc, #372]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed2:	f023 0220 	bic.w	r2, r3, #32
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	495a      	ldr	r1, [pc, #360]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d008      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005eec:	4b55      	ldr	r3, [pc, #340]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	4952      	ldr	r1, [pc, #328]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d008      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	494b      	ldr	r1, [pc, #300]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d008      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f28:	4b46      	ldr	r3, [pc, #280]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	4943      	ldr	r1, [pc, #268]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d008      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f46:	4b3f      	ldr	r3, [pc, #252]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f52:	493c      	ldr	r1, [pc, #240]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d008      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f64:	4b37      	ldr	r3, [pc, #220]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f68:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f70:	4934      	ldr	r1, [pc, #208]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d008      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005f82:	4b30      	ldr	r3, [pc, #192]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f86:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8e:	492d      	ldr	r1, [pc, #180]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005fa0:	4b28      	ldr	r3, [pc, #160]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fac:	4925      	ldr	r1, [pc, #148]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d008      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005fbe:	4b21      	ldr	r3, [pc, #132]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fca:	491e      	ldr	r1, [pc, #120]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d008      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005fdc:	4b19      	ldr	r3, [pc, #100]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe8:	4916      	ldr	r1, [pc, #88]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d008      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005ffa:	4b12      	ldr	r3, [pc, #72]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ffe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006006:	490f      	ldr	r1, [pc, #60]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006008:	4313      	orrs	r3, r2
 800600a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006018:	4b0a      	ldr	r3, [pc, #40]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800601a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006024:	4907      	ldr	r1, [pc, #28]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006026:	4313      	orrs	r3, r2
 8006028:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00c      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006036:	4b03      	ldr	r3, [pc, #12]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	e002      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006042:	bf00      	nop
 8006044:	40021000 	.word	0x40021000
 8006048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800604a:	4913      	ldr	r1, [pc, #76]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800604c:	4313      	orrs	r3, r2
 800604e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d008      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800605c:	4b0e      	ldr	r3, [pc, #56]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800605e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006060:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006068:	490b      	ldr	r1, [pc, #44]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800606a:	4313      	orrs	r3, r2
 800606c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d008      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800607a:	4b07      	ldr	r3, [pc, #28]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800607c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800607e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006086:	4904      	ldr	r1, [pc, #16]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006088:	4313      	orrs	r3, r2
 800608a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3748      	adds	r7, #72	@ 0x48
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	40021000 	.word	0x40021000

0800609c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e073      	b.n	800619a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	7f5b      	ldrb	r3, [r3, #29]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d105      	bne.n	80060c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fc f9a8 	bl	8002418 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d055      	beq.n	8006188 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	22ca      	movs	r2, #202	@ 0xca
 80060e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2253      	movs	r2, #83	@ 0x53
 80060ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f87f 	bl	80061f0 <RTC_EnterInitMode>
 80060f2:	4603      	mov	r3, r0
 80060f4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d12c      	bne.n	8006156 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6812      	ldr	r2, [r2, #0]
 8006106:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800610a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800610e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6899      	ldr	r1, [r3, #8]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	68d2      	ldr	r2, [r2, #12]
 8006136:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6919      	ldr	r1, [r3, #16]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	041a      	lsls	r2, r3, #16
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f886 	bl	800625e <RTC_ExitInitMode>
 8006152:	4603      	mov	r3, r0
 8006154:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006156:	7bfb      	ldrb	r3, [r7, #15]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d110      	bne.n	800617e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800616a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	22ff      	movs	r2, #255	@ 0xff
 8006184:	625a      	str	r2, [r3, #36]	@ 0x24
 8006186:	e001      	b.n	800618c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d102      	bne.n	8006198 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a0d      	ldr	r2, [pc, #52]	@ (80061ec <HAL_RTC_WaitForSynchro+0x48>)
 80061b6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061b8:	f7fc fd16 	bl	8002be8 <HAL_GetTick>
 80061bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061be:	e009      	b.n	80061d4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061c0:	f7fc fd12 	bl	8002be8 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061ce:	d901      	bls.n	80061d4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e007      	b.n	80061e4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0ee      	beq.n	80061c0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	0001ff5f 	.word	0x0001ff5f

080061f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	d122      	bne.n	8006254 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800621c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800621e:	f7fc fce3 	bl	8002be8 <HAL_GetTick>
 8006222:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006224:	e00c      	b.n	8006240 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006226:	f7fc fcdf 	bl	8002be8 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006234:	d904      	bls.n	8006240 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2204      	movs	r2, #4
 800623a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d102      	bne.n	8006254 <RTC_EnterInitMode+0x64>
 800624e:	7bfb      	ldrb	r3, [r7, #15]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d1e8      	bne.n	8006226 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006278:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f003 0320 	and.w	r3, r3, #32
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff ff8b 	bl	80061a4 <HAL_RTC_WaitForSynchro>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d004      	beq.n	800629e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2204      	movs	r2, #4
 8006298:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800629e:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e049      	b.n	800634e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fc fa02 	bl	80026d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4619      	mov	r1, r3
 80062e6:	4610      	mov	r0, r2
 80062e8:	f000 fd7c 	bl	8006de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b01      	cmp	r3, #1
 800636a:	d001      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e04f      	b.n	8006410 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a23      	ldr	r2, [pc, #140]	@ (800641c <HAL_TIM_Base_Start_IT+0xc4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d01d      	beq.n	80063ce <HAL_TIM_Base_Start_IT+0x76>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800639a:	d018      	beq.n	80063ce <HAL_TIM_Base_Start_IT+0x76>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006420 <HAL_TIM_Base_Start_IT+0xc8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d013      	beq.n	80063ce <HAL_TIM_Base_Start_IT+0x76>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006424 <HAL_TIM_Base_Start_IT+0xcc>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00e      	beq.n	80063ce <HAL_TIM_Base_Start_IT+0x76>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006428 <HAL_TIM_Base_Start_IT+0xd0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d009      	beq.n	80063ce <HAL_TIM_Base_Start_IT+0x76>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a1b      	ldr	r2, [pc, #108]	@ (800642c <HAL_TIM_Base_Start_IT+0xd4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d004      	beq.n	80063ce <HAL_TIM_Base_Start_IT+0x76>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a19      	ldr	r2, [pc, #100]	@ (8006430 <HAL_TIM_Base_Start_IT+0xd8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d115      	bne.n	80063fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	4b17      	ldr	r3, [pc, #92]	@ (8006434 <HAL_TIM_Base_Start_IT+0xdc>)
 80063d6:	4013      	ands	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b06      	cmp	r3, #6
 80063de:	d015      	beq.n	800640c <HAL_TIM_Base_Start_IT+0xb4>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063e6:	d011      	beq.n	800640c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f8:	e008      	b.n	800640c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0201 	orr.w	r2, r2, #1
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	e000      	b.n	800640e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800640c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	40012c00 	.word	0x40012c00
 8006420:	40000400 	.word	0x40000400
 8006424:	40000800 	.word	0x40000800
 8006428:	40013400 	.word	0x40013400
 800642c:	40014000 	.word	0x40014000
 8006430:	40015000 	.word	0x40015000
 8006434:	00010007 	.word	0x00010007

08006438 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e049      	b.n	80064de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fc f91c 	bl	800269c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f000 fcb4 	bl	8006de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d109      	bne.n	800650c <HAL_TIM_PWM_Start+0x24>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	bf14      	ite	ne
 8006504:	2301      	movne	r3, #1
 8006506:	2300      	moveq	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	e03c      	b.n	8006586 <HAL_TIM_PWM_Start+0x9e>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b04      	cmp	r3, #4
 8006510:	d109      	bne.n	8006526 <HAL_TIM_PWM_Start+0x3e>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b01      	cmp	r3, #1
 800651c:	bf14      	ite	ne
 800651e:	2301      	movne	r3, #1
 8006520:	2300      	moveq	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	e02f      	b.n	8006586 <HAL_TIM_PWM_Start+0x9e>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b08      	cmp	r3, #8
 800652a:	d109      	bne.n	8006540 <HAL_TIM_PWM_Start+0x58>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b01      	cmp	r3, #1
 8006536:	bf14      	ite	ne
 8006538:	2301      	movne	r3, #1
 800653a:	2300      	moveq	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	e022      	b.n	8006586 <HAL_TIM_PWM_Start+0x9e>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b0c      	cmp	r3, #12
 8006544:	d109      	bne.n	800655a <HAL_TIM_PWM_Start+0x72>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b01      	cmp	r3, #1
 8006550:	bf14      	ite	ne
 8006552:	2301      	movne	r3, #1
 8006554:	2300      	moveq	r3, #0
 8006556:	b2db      	uxtb	r3, r3
 8006558:	e015      	b.n	8006586 <HAL_TIM_PWM_Start+0x9e>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b10      	cmp	r3, #16
 800655e:	d109      	bne.n	8006574 <HAL_TIM_PWM_Start+0x8c>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b01      	cmp	r3, #1
 800656a:	bf14      	ite	ne
 800656c:	2301      	movne	r3, #1
 800656e:	2300      	moveq	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	e008      	b.n	8006586 <HAL_TIM_PWM_Start+0x9e>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	bf14      	ite	ne
 8006580:	2301      	movne	r3, #1
 8006582:	2300      	moveq	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e0a1      	b.n	80066d2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d104      	bne.n	800659e <HAL_TIM_PWM_Start+0xb6>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800659c:	e023      	b.n	80065e6 <HAL_TIM_PWM_Start+0xfe>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d104      	bne.n	80065ae <HAL_TIM_PWM_Start+0xc6>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065ac:	e01b      	b.n	80065e6 <HAL_TIM_PWM_Start+0xfe>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d104      	bne.n	80065be <HAL_TIM_PWM_Start+0xd6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065bc:	e013      	b.n	80065e6 <HAL_TIM_PWM_Start+0xfe>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b0c      	cmp	r3, #12
 80065c2:	d104      	bne.n	80065ce <HAL_TIM_PWM_Start+0xe6>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065cc:	e00b      	b.n	80065e6 <HAL_TIM_PWM_Start+0xfe>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d104      	bne.n	80065de <HAL_TIM_PWM_Start+0xf6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065dc:	e003      	b.n	80065e6 <HAL_TIM_PWM_Start+0xfe>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2201      	movs	r2, #1
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 ffa8 	bl	8007544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a38      	ldr	r2, [pc, #224]	@ (80066dc <HAL_TIM_PWM_Start+0x1f4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d018      	beq.n	8006630 <HAL_TIM_PWM_Start+0x148>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a37      	ldr	r2, [pc, #220]	@ (80066e0 <HAL_TIM_PWM_Start+0x1f8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d013      	beq.n	8006630 <HAL_TIM_PWM_Start+0x148>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a35      	ldr	r2, [pc, #212]	@ (80066e4 <HAL_TIM_PWM_Start+0x1fc>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d00e      	beq.n	8006630 <HAL_TIM_PWM_Start+0x148>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a34      	ldr	r2, [pc, #208]	@ (80066e8 <HAL_TIM_PWM_Start+0x200>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d009      	beq.n	8006630 <HAL_TIM_PWM_Start+0x148>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a32      	ldr	r2, [pc, #200]	@ (80066ec <HAL_TIM_PWM_Start+0x204>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d004      	beq.n	8006630 <HAL_TIM_PWM_Start+0x148>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a31      	ldr	r2, [pc, #196]	@ (80066f0 <HAL_TIM_PWM_Start+0x208>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d101      	bne.n	8006634 <HAL_TIM_PWM_Start+0x14c>
 8006630:	2301      	movs	r3, #1
 8006632:	e000      	b.n	8006636 <HAL_TIM_PWM_Start+0x14e>
 8006634:	2300      	movs	r3, #0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d007      	beq.n	800664a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006648:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a23      	ldr	r2, [pc, #140]	@ (80066dc <HAL_TIM_PWM_Start+0x1f4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d01d      	beq.n	8006690 <HAL_TIM_PWM_Start+0x1a8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800665c:	d018      	beq.n	8006690 <HAL_TIM_PWM_Start+0x1a8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a24      	ldr	r2, [pc, #144]	@ (80066f4 <HAL_TIM_PWM_Start+0x20c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d013      	beq.n	8006690 <HAL_TIM_PWM_Start+0x1a8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a22      	ldr	r2, [pc, #136]	@ (80066f8 <HAL_TIM_PWM_Start+0x210>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00e      	beq.n	8006690 <HAL_TIM_PWM_Start+0x1a8>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1a      	ldr	r2, [pc, #104]	@ (80066e0 <HAL_TIM_PWM_Start+0x1f8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d009      	beq.n	8006690 <HAL_TIM_PWM_Start+0x1a8>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a18      	ldr	r2, [pc, #96]	@ (80066e4 <HAL_TIM_PWM_Start+0x1fc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d004      	beq.n	8006690 <HAL_TIM_PWM_Start+0x1a8>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a19      	ldr	r2, [pc, #100]	@ (80066f0 <HAL_TIM_PWM_Start+0x208>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d115      	bne.n	80066bc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	4b19      	ldr	r3, [pc, #100]	@ (80066fc <HAL_TIM_PWM_Start+0x214>)
 8006698:	4013      	ands	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b06      	cmp	r3, #6
 80066a0:	d015      	beq.n	80066ce <HAL_TIM_PWM_Start+0x1e6>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a8:	d011      	beq.n	80066ce <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f042 0201 	orr.w	r2, r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ba:	e008      	b.n	80066ce <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	e000      	b.n	80066d0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40012c00 	.word	0x40012c00
 80066e0:	40013400 	.word	0x40013400
 80066e4:	40014000 	.word	0x40014000
 80066e8:	40014400 	.word	0x40014400
 80066ec:	40014800 	.word	0x40014800
 80066f0:	40015000 	.word	0x40015000
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800
 80066fc:	00010007 	.word	0x00010007

08006700 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e097      	b.n	8006844 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d106      	bne.n	800672e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7fb fe9b 	bl	8002464 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2202      	movs	r2, #2
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6812      	ldr	r2, [r2, #0]
 8006740:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006744:	f023 0307 	bic.w	r3, r3, #7
 8006748:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	3304      	adds	r3, #4
 8006752:	4619      	mov	r1, r3
 8006754:	4610      	mov	r0, r2
 8006756:	f000 fb45 	bl	8006de4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006782:	f023 0303 	bic.w	r3, r3, #3
 8006786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	4313      	orrs	r3, r2
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	4313      	orrs	r3, r2
 8006798:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80067a0:	f023 030c 	bic.w	r3, r3, #12
 80067a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	4313      	orrs	r3, r2
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	011a      	lsls	r2, r3, #4
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	031b      	lsls	r3, r3, #12
 80067d0:	4313      	orrs	r3, r2
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80067de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80067e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	4313      	orrs	r3, r2
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800685c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006864:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800686c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006874:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d110      	bne.n	800689e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d102      	bne.n	8006888 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006882:	7b7b      	ldrb	r3, [r7, #13]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d001      	beq.n	800688c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e069      	b.n	8006960 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800689c:	e031      	b.n	8006902 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d110      	bne.n	80068c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d102      	bne.n	80068b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068aa:	7b3b      	ldrb	r3, [r7, #12]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d001      	beq.n	80068b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e055      	b.n	8006960 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068c4:	e01d      	b.n	8006902 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d108      	bne.n	80068de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d105      	bne.n	80068de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068d2:	7b7b      	ldrb	r3, [r7, #13]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d102      	bne.n	80068de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068d8:	7b3b      	ldrb	r3, [r7, #12]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d001      	beq.n	80068e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e03e      	b.n	8006960 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2202      	movs	r2, #2
 80068f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <HAL_TIM_Encoder_Start+0xc4>
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b04      	cmp	r3, #4
 800690c:	d008      	beq.n	8006920 <HAL_TIM_Encoder_Start+0xd4>
 800690e:	e00f      	b.n	8006930 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2201      	movs	r2, #1
 8006916:	2100      	movs	r1, #0
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fe13 	bl	8007544 <TIM_CCxChannelCmd>
      break;
 800691e:	e016      	b.n	800694e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2201      	movs	r2, #1
 8006926:	2104      	movs	r1, #4
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fe0b 	bl	8007544 <TIM_CCxChannelCmd>
      break;
 800692e:	e00e      	b.n	800694e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2201      	movs	r2, #1
 8006936:	2100      	movs	r1, #0
 8006938:	4618      	mov	r0, r3
 800693a:	f000 fe03 	bl	8007544 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2201      	movs	r2, #1
 8006944:	2104      	movs	r1, #4
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fdfc 	bl	8007544 <TIM_CCxChannelCmd>
      break;
 800694c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f042 0201 	orr.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d020      	beq.n	80069cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01b      	beq.n	80069cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0202 	mvn.w	r2, #2
 800699c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f9f8 	bl	8006da8 <HAL_TIM_IC_CaptureCallback>
 80069b8:	e005      	b.n	80069c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f9ea 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f9fb 	bl	8006dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d020      	beq.n	8006a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01b      	beq.n	8006a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0204 	mvn.w	r2, #4
 80069e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2202      	movs	r2, #2
 80069ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f9d2 	bl	8006da8 <HAL_TIM_IC_CaptureCallback>
 8006a04:	e005      	b.n	8006a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f9c4 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f9d5 	bl	8006dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d020      	beq.n	8006a64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f003 0308 	and.w	r3, r3, #8
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01b      	beq.n	8006a64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f06f 0208 	mvn.w	r2, #8
 8006a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2204      	movs	r2, #4
 8006a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f9ac 	bl	8006da8 <HAL_TIM_IC_CaptureCallback>
 8006a50:	e005      	b.n	8006a5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f99e 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f9af 	bl	8006dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 0310 	and.w	r3, r3, #16
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d020      	beq.n	8006ab0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f003 0310 	and.w	r3, r3, #16
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01b      	beq.n	8006ab0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f06f 0210 	mvn.w	r2, #16
 8006a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2208      	movs	r2, #8
 8006a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f986 	bl	8006da8 <HAL_TIM_IC_CaptureCallback>
 8006a9c:	e005      	b.n	8006aaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f978 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f989 	bl	8006dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00c      	beq.n	8006ad4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d007      	beq.n	8006ad4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f06f 0201 	mvn.w	r2, #1
 8006acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7fa fe9a 	bl	8001808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00c      	beq.n	8006af8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d007      	beq.n	8006af8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fde2 	bl	80076bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00c      	beq.n	8006b1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fdda 	bl	80076d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00c      	beq.n	8006b40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d007      	beq.n	8006b40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f948 	bl	8006dd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00c      	beq.n	8006b64 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d007      	beq.n	8006b64 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f06f 0220 	mvn.w	r2, #32
 8006b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fda2 	bl	80076a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b64:	bf00      	nop
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e0ff      	b.n	8006d8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b14      	cmp	r3, #20
 8006b96:	f200 80f0 	bhi.w	8006d7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba0:	08006bf5 	.word	0x08006bf5
 8006ba4:	08006d7b 	.word	0x08006d7b
 8006ba8:	08006d7b 	.word	0x08006d7b
 8006bac:	08006d7b 	.word	0x08006d7b
 8006bb0:	08006c35 	.word	0x08006c35
 8006bb4:	08006d7b 	.word	0x08006d7b
 8006bb8:	08006d7b 	.word	0x08006d7b
 8006bbc:	08006d7b 	.word	0x08006d7b
 8006bc0:	08006c77 	.word	0x08006c77
 8006bc4:	08006d7b 	.word	0x08006d7b
 8006bc8:	08006d7b 	.word	0x08006d7b
 8006bcc:	08006d7b 	.word	0x08006d7b
 8006bd0:	08006cb7 	.word	0x08006cb7
 8006bd4:	08006d7b 	.word	0x08006d7b
 8006bd8:	08006d7b 	.word	0x08006d7b
 8006bdc:	08006d7b 	.word	0x08006d7b
 8006be0:	08006cf9 	.word	0x08006cf9
 8006be4:	08006d7b 	.word	0x08006d7b
 8006be8:	08006d7b 	.word	0x08006d7b
 8006bec:	08006d7b 	.word	0x08006d7b
 8006bf0:	08006d39 	.word	0x08006d39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 f99c 	bl	8006f38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0208 	orr.w	r2, r2, #8
 8006c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0204 	bic.w	r2, r2, #4
 8006c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6999      	ldr	r1, [r3, #24]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	619a      	str	r2, [r3, #24]
      break;
 8006c32:	e0a5      	b.n	8006d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fa16 	bl	800706c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699a      	ldr	r2, [r3, #24]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6999      	ldr	r1, [r3, #24]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	021a      	lsls	r2, r3, #8
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	619a      	str	r2, [r3, #24]
      break;
 8006c74:	e084      	b.n	8006d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fa89 	bl	8007194 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0208 	orr.w	r2, r2, #8
 8006c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0204 	bic.w	r2, r2, #4
 8006ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69d9      	ldr	r1, [r3, #28]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	61da      	str	r2, [r3, #28]
      break;
 8006cb4:	e064      	b.n	8006d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fafb 	bl	80072b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69da      	ldr	r2, [r3, #28]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69d9      	ldr	r1, [r3, #28]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	021a      	lsls	r2, r3, #8
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	61da      	str	r2, [r3, #28]
      break;
 8006cf6:	e043      	b.n	8006d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68b9      	ldr	r1, [r7, #8]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fb4a 	bl	8007398 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0208 	orr.w	r2, r2, #8
 8006d12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0204 	bic.w	r2, r2, #4
 8006d22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	691a      	ldr	r2, [r3, #16]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006d36:	e023      	b.n	8006d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fb94 	bl	800746c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	021a      	lsls	r2, r3, #8
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006d78:	e002      	b.n	8006d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop

08006d94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a48      	ldr	r2, [pc, #288]	@ (8006f18 <TIM_Base_SetConfig+0x134>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d013      	beq.n	8006e24 <TIM_Base_SetConfig+0x40>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e02:	d00f      	beq.n	8006e24 <TIM_Base_SetConfig+0x40>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a45      	ldr	r2, [pc, #276]	@ (8006f1c <TIM_Base_SetConfig+0x138>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00b      	beq.n	8006e24 <TIM_Base_SetConfig+0x40>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a44      	ldr	r2, [pc, #272]	@ (8006f20 <TIM_Base_SetConfig+0x13c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d007      	beq.n	8006e24 <TIM_Base_SetConfig+0x40>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a43      	ldr	r2, [pc, #268]	@ (8006f24 <TIM_Base_SetConfig+0x140>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d003      	beq.n	8006e24 <TIM_Base_SetConfig+0x40>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a42      	ldr	r2, [pc, #264]	@ (8006f28 <TIM_Base_SetConfig+0x144>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d108      	bne.n	8006e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a37      	ldr	r2, [pc, #220]	@ (8006f18 <TIM_Base_SetConfig+0x134>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d01f      	beq.n	8006e7e <TIM_Base_SetConfig+0x9a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e44:	d01b      	beq.n	8006e7e <TIM_Base_SetConfig+0x9a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a34      	ldr	r2, [pc, #208]	@ (8006f1c <TIM_Base_SetConfig+0x138>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d017      	beq.n	8006e7e <TIM_Base_SetConfig+0x9a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a33      	ldr	r2, [pc, #204]	@ (8006f20 <TIM_Base_SetConfig+0x13c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d013      	beq.n	8006e7e <TIM_Base_SetConfig+0x9a>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a32      	ldr	r2, [pc, #200]	@ (8006f24 <TIM_Base_SetConfig+0x140>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00f      	beq.n	8006e7e <TIM_Base_SetConfig+0x9a>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a32      	ldr	r2, [pc, #200]	@ (8006f2c <TIM_Base_SetConfig+0x148>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d00b      	beq.n	8006e7e <TIM_Base_SetConfig+0x9a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a31      	ldr	r2, [pc, #196]	@ (8006f30 <TIM_Base_SetConfig+0x14c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d007      	beq.n	8006e7e <TIM_Base_SetConfig+0x9a>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a30      	ldr	r2, [pc, #192]	@ (8006f34 <TIM_Base_SetConfig+0x150>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d003      	beq.n	8006e7e <TIM_Base_SetConfig+0x9a>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a2b      	ldr	r2, [pc, #172]	@ (8006f28 <TIM_Base_SetConfig+0x144>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d108      	bne.n	8006e90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a18      	ldr	r2, [pc, #96]	@ (8006f18 <TIM_Base_SetConfig+0x134>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d013      	beq.n	8006ee4 <TIM_Base_SetConfig+0x100>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a19      	ldr	r2, [pc, #100]	@ (8006f24 <TIM_Base_SetConfig+0x140>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00f      	beq.n	8006ee4 <TIM_Base_SetConfig+0x100>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a19      	ldr	r2, [pc, #100]	@ (8006f2c <TIM_Base_SetConfig+0x148>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00b      	beq.n	8006ee4 <TIM_Base_SetConfig+0x100>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a18      	ldr	r2, [pc, #96]	@ (8006f30 <TIM_Base_SetConfig+0x14c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d007      	beq.n	8006ee4 <TIM_Base_SetConfig+0x100>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a17      	ldr	r2, [pc, #92]	@ (8006f34 <TIM_Base_SetConfig+0x150>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d003      	beq.n	8006ee4 <TIM_Base_SetConfig+0x100>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a12      	ldr	r2, [pc, #72]	@ (8006f28 <TIM_Base_SetConfig+0x144>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d103      	bne.n	8006eec <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	691a      	ldr	r2, [r3, #16]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d105      	bne.n	8006f0a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	f023 0201 	bic.w	r2, r3, #1
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	611a      	str	r2, [r3, #16]
  }
}
 8006f0a:	bf00      	nop
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	40012c00 	.word	0x40012c00
 8006f1c:	40000400 	.word	0x40000400
 8006f20:	40000800 	.word	0x40000800
 8006f24:	40013400 	.word	0x40013400
 8006f28:	40015000 	.word	0x40015000
 8006f2c:	40014000 	.word	0x40014000
 8006f30:	40014400 	.word	0x40014400
 8006f34:	40014800 	.word	0x40014800

08006f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	f023 0201 	bic.w	r2, r3, #1
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0303 	bic.w	r3, r3, #3
 8006f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f023 0302 	bic.w	r3, r3, #2
 8006f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a30      	ldr	r2, [pc, #192]	@ (8007054 <TIM_OC1_SetConfig+0x11c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <TIM_OC1_SetConfig+0x88>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8007058 <TIM_OC1_SetConfig+0x120>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00f      	beq.n	8006fc0 <TIM_OC1_SetConfig+0x88>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800705c <TIM_OC1_SetConfig+0x124>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00b      	beq.n	8006fc0 <TIM_OC1_SetConfig+0x88>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a2d      	ldr	r2, [pc, #180]	@ (8007060 <TIM_OC1_SetConfig+0x128>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d007      	beq.n	8006fc0 <TIM_OC1_SetConfig+0x88>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8007064 <TIM_OC1_SetConfig+0x12c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d003      	beq.n	8006fc0 <TIM_OC1_SetConfig+0x88>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a2b      	ldr	r2, [pc, #172]	@ (8007068 <TIM_OC1_SetConfig+0x130>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d10c      	bne.n	8006fda <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f023 0308 	bic.w	r3, r3, #8
 8006fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f023 0304 	bic.w	r3, r3, #4
 8006fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8007054 <TIM_OC1_SetConfig+0x11c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d013      	beq.n	800700a <TIM_OC1_SetConfig+0xd2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8007058 <TIM_OC1_SetConfig+0x120>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d00f      	beq.n	800700a <TIM_OC1_SetConfig+0xd2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a1b      	ldr	r2, [pc, #108]	@ (800705c <TIM_OC1_SetConfig+0x124>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00b      	beq.n	800700a <TIM_OC1_SetConfig+0xd2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8007060 <TIM_OC1_SetConfig+0x128>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d007      	beq.n	800700a <TIM_OC1_SetConfig+0xd2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a19      	ldr	r2, [pc, #100]	@ (8007064 <TIM_OC1_SetConfig+0x12c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d003      	beq.n	800700a <TIM_OC1_SetConfig+0xd2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a18      	ldr	r2, [pc, #96]	@ (8007068 <TIM_OC1_SetConfig+0x130>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d111      	bne.n	800702e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	621a      	str	r2, [r3, #32]
}
 8007048:	bf00      	nop
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	40012c00 	.word	0x40012c00
 8007058:	40013400 	.word	0x40013400
 800705c:	40014000 	.word	0x40014000
 8007060:	40014400 	.word	0x40014400
 8007064:	40014800 	.word	0x40014800
 8007068:	40015000 	.word	0x40015000

0800706c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	f023 0210 	bic.w	r2, r3, #16
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800709a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800709e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f023 0320 	bic.w	r3, r3, #32
 80070ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a2c      	ldr	r2, [pc, #176]	@ (800717c <TIM_OC2_SetConfig+0x110>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d007      	beq.n	80070e0 <TIM_OC2_SetConfig+0x74>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007180 <TIM_OC2_SetConfig+0x114>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d003      	beq.n	80070e0 <TIM_OC2_SetConfig+0x74>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a2a      	ldr	r2, [pc, #168]	@ (8007184 <TIM_OC2_SetConfig+0x118>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d10d      	bne.n	80070fc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	011b      	lsls	r3, r3, #4
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a1f      	ldr	r2, [pc, #124]	@ (800717c <TIM_OC2_SetConfig+0x110>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d013      	beq.n	800712c <TIM_OC2_SetConfig+0xc0>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a1e      	ldr	r2, [pc, #120]	@ (8007180 <TIM_OC2_SetConfig+0x114>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00f      	beq.n	800712c <TIM_OC2_SetConfig+0xc0>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a1e      	ldr	r2, [pc, #120]	@ (8007188 <TIM_OC2_SetConfig+0x11c>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00b      	beq.n	800712c <TIM_OC2_SetConfig+0xc0>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a1d      	ldr	r2, [pc, #116]	@ (800718c <TIM_OC2_SetConfig+0x120>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d007      	beq.n	800712c <TIM_OC2_SetConfig+0xc0>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a1c      	ldr	r2, [pc, #112]	@ (8007190 <TIM_OC2_SetConfig+0x124>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d003      	beq.n	800712c <TIM_OC2_SetConfig+0xc0>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a17      	ldr	r2, [pc, #92]	@ (8007184 <TIM_OC2_SetConfig+0x118>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d113      	bne.n	8007154 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007132:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800713a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	4313      	orrs	r3, r2
 8007146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	621a      	str	r2, [r3, #32]
}
 800716e:	bf00      	nop
 8007170:	371c      	adds	r7, #28
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	40012c00 	.word	0x40012c00
 8007180:	40013400 	.word	0x40013400
 8007184:	40015000 	.word	0x40015000
 8007188:	40014000 	.word	0x40014000
 800718c:	40014400 	.word	0x40014400
 8007190:	40014800 	.word	0x40014800

08007194 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0303 	bic.w	r3, r3, #3
 80071ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a2b      	ldr	r2, [pc, #172]	@ (80072a0 <TIM_OC3_SetConfig+0x10c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d007      	beq.n	8007206 <TIM_OC3_SetConfig+0x72>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a2a      	ldr	r2, [pc, #168]	@ (80072a4 <TIM_OC3_SetConfig+0x110>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d003      	beq.n	8007206 <TIM_OC3_SetConfig+0x72>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a29      	ldr	r2, [pc, #164]	@ (80072a8 <TIM_OC3_SetConfig+0x114>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d10d      	bne.n	8007222 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800720c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	021b      	lsls	r3, r3, #8
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007220:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a1e      	ldr	r2, [pc, #120]	@ (80072a0 <TIM_OC3_SetConfig+0x10c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d013      	beq.n	8007252 <TIM_OC3_SetConfig+0xbe>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a1d      	ldr	r2, [pc, #116]	@ (80072a4 <TIM_OC3_SetConfig+0x110>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00f      	beq.n	8007252 <TIM_OC3_SetConfig+0xbe>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a1d      	ldr	r2, [pc, #116]	@ (80072ac <TIM_OC3_SetConfig+0x118>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00b      	beq.n	8007252 <TIM_OC3_SetConfig+0xbe>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a1c      	ldr	r2, [pc, #112]	@ (80072b0 <TIM_OC3_SetConfig+0x11c>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d007      	beq.n	8007252 <TIM_OC3_SetConfig+0xbe>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a1b      	ldr	r2, [pc, #108]	@ (80072b4 <TIM_OC3_SetConfig+0x120>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d003      	beq.n	8007252 <TIM_OC3_SetConfig+0xbe>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a16      	ldr	r2, [pc, #88]	@ (80072a8 <TIM_OC3_SetConfig+0x114>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d113      	bne.n	800727a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	621a      	str	r2, [r3, #32]
}
 8007294:	bf00      	nop
 8007296:	371c      	adds	r7, #28
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	40012c00 	.word	0x40012c00
 80072a4:	40013400 	.word	0x40013400
 80072a8:	40015000 	.word	0x40015000
 80072ac:	40014000 	.word	0x40014000
 80072b0:	40014400 	.word	0x40014400
 80072b4:	40014800 	.word	0x40014800

080072b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	021b      	lsls	r3, r3, #8
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	031b      	lsls	r3, r3, #12
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4313      	orrs	r3, r2
 8007312:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a1a      	ldr	r2, [pc, #104]	@ (8007380 <TIM_OC4_SetConfig+0xc8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d013      	beq.n	8007344 <TIM_OC4_SetConfig+0x8c>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a19      	ldr	r2, [pc, #100]	@ (8007384 <TIM_OC4_SetConfig+0xcc>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00f      	beq.n	8007344 <TIM_OC4_SetConfig+0x8c>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a18      	ldr	r2, [pc, #96]	@ (8007388 <TIM_OC4_SetConfig+0xd0>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d00b      	beq.n	8007344 <TIM_OC4_SetConfig+0x8c>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a17      	ldr	r2, [pc, #92]	@ (800738c <TIM_OC4_SetConfig+0xd4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d007      	beq.n	8007344 <TIM_OC4_SetConfig+0x8c>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a16      	ldr	r2, [pc, #88]	@ (8007390 <TIM_OC4_SetConfig+0xd8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d003      	beq.n	8007344 <TIM_OC4_SetConfig+0x8c>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a15      	ldr	r2, [pc, #84]	@ (8007394 <TIM_OC4_SetConfig+0xdc>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d109      	bne.n	8007358 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800734a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	019b      	lsls	r3, r3, #6
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40012c00 	.word	0x40012c00
 8007384:	40013400 	.word	0x40013400
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800
 8007394:	40015000 	.word	0x40015000

08007398 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80073dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	041b      	lsls	r3, r3, #16
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a19      	ldr	r2, [pc, #100]	@ (8007454 <TIM_OC5_SetConfig+0xbc>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d013      	beq.n	800741a <TIM_OC5_SetConfig+0x82>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a18      	ldr	r2, [pc, #96]	@ (8007458 <TIM_OC5_SetConfig+0xc0>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d00f      	beq.n	800741a <TIM_OC5_SetConfig+0x82>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a17      	ldr	r2, [pc, #92]	@ (800745c <TIM_OC5_SetConfig+0xc4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00b      	beq.n	800741a <TIM_OC5_SetConfig+0x82>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a16      	ldr	r2, [pc, #88]	@ (8007460 <TIM_OC5_SetConfig+0xc8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d007      	beq.n	800741a <TIM_OC5_SetConfig+0x82>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a15      	ldr	r2, [pc, #84]	@ (8007464 <TIM_OC5_SetConfig+0xcc>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d003      	beq.n	800741a <TIM_OC5_SetConfig+0x82>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a14      	ldr	r2, [pc, #80]	@ (8007468 <TIM_OC5_SetConfig+0xd0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d109      	bne.n	800742e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007420:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	021b      	lsls	r3, r3, #8
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	621a      	str	r2, [r3, #32]
}
 8007448:	bf00      	nop
 800744a:	371c      	adds	r7, #28
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	40012c00 	.word	0x40012c00
 8007458:	40013400 	.word	0x40013400
 800745c:	40014000 	.word	0x40014000
 8007460:	40014400 	.word	0x40014400
 8007464:	40014800 	.word	0x40014800
 8007468:	40015000 	.word	0x40015000

0800746c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800749a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800749e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	021b      	lsls	r3, r3, #8
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	051b      	lsls	r3, r3, #20
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	4313      	orrs	r3, r2
 80074be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a1a      	ldr	r2, [pc, #104]	@ (800752c <TIM_OC6_SetConfig+0xc0>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d013      	beq.n	80074f0 <TIM_OC6_SetConfig+0x84>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a19      	ldr	r2, [pc, #100]	@ (8007530 <TIM_OC6_SetConfig+0xc4>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d00f      	beq.n	80074f0 <TIM_OC6_SetConfig+0x84>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a18      	ldr	r2, [pc, #96]	@ (8007534 <TIM_OC6_SetConfig+0xc8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00b      	beq.n	80074f0 <TIM_OC6_SetConfig+0x84>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a17      	ldr	r2, [pc, #92]	@ (8007538 <TIM_OC6_SetConfig+0xcc>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d007      	beq.n	80074f0 <TIM_OC6_SetConfig+0x84>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a16      	ldr	r2, [pc, #88]	@ (800753c <TIM_OC6_SetConfig+0xd0>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d003      	beq.n	80074f0 <TIM_OC6_SetConfig+0x84>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a15      	ldr	r2, [pc, #84]	@ (8007540 <TIM_OC6_SetConfig+0xd4>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d109      	bne.n	8007504 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	029b      	lsls	r3, r3, #10
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	4313      	orrs	r3, r2
 8007502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	621a      	str	r2, [r3, #32]
}
 800751e:	bf00      	nop
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	40012c00 	.word	0x40012c00
 8007530:	40013400 	.word	0x40013400
 8007534:	40014000 	.word	0x40014000
 8007538:	40014400 	.word	0x40014400
 800753c:	40014800 	.word	0x40014800
 8007540:	40015000 	.word	0x40015000

08007544 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f003 031f 	and.w	r3, r3, #31
 8007556:	2201      	movs	r2, #1
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a1a      	ldr	r2, [r3, #32]
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	43db      	mvns	r3, r3
 8007566:	401a      	ands	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a1a      	ldr	r2, [r3, #32]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f003 031f 	and.w	r3, r3, #31
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	fa01 f303 	lsl.w	r3, r1, r3
 800757c:	431a      	orrs	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	621a      	str	r2, [r3, #32]
}
 8007582:	bf00      	nop
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
	...

08007590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e06d      	b.n	8007684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a30      	ldr	r2, [pc, #192]	@ (8007690 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d009      	beq.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a2f      	ldr	r2, [pc, #188]	@ (8007694 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d004      	beq.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007698 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d108      	bne.n	80075f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80075ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a1e      	ldr	r2, [pc, #120]	@ (8007690 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d01d      	beq.n	8007658 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007624:	d018      	beq.n	8007658 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a1c      	ldr	r2, [pc, #112]	@ (800769c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d013      	beq.n	8007658 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a1a      	ldr	r2, [pc, #104]	@ (80076a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00e      	beq.n	8007658 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a15      	ldr	r2, [pc, #84]	@ (8007694 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d009      	beq.n	8007658 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a16      	ldr	r2, [pc, #88]	@ (80076a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d004      	beq.n	8007658 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a11      	ldr	r2, [pc, #68]	@ (8007698 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d10c      	bne.n	8007672 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800765e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	4313      	orrs	r3, r2
 8007668:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	40012c00 	.word	0x40012c00
 8007694:	40013400 	.word	0x40013400
 8007698:	40015000 	.word	0x40015000
 800769c:	40000400 	.word	0x40000400
 80076a0:	40000800 	.word	0x40000800
 80076a4:	40014000 	.word	0x40014000

080076a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e040      	b.n	8007778 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d106      	bne.n	800770c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7fb f860 	bl	80027cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2224      	movs	r2, #36	@ 0x24
 8007710:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0201 	bic.w	r2, r2, #1
 8007720:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa86 	bl	8007c3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f8af 	bl	8007894 <UART_SetConfig>
 8007736:	4603      	mov	r3, r0
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e01b      	b.n	8007778 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800774e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800775e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0201 	orr.w	r2, r2, #1
 800776e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fb05 	bl	8007d80 <UART_CheckIdleState>
 8007776:	4603      	mov	r3, r0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08a      	sub	sp, #40	@ 0x28
 8007784:	af02      	add	r7, sp, #8
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	4613      	mov	r3, r2
 800778e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007794:	2b20      	cmp	r3, #32
 8007796:	d177      	bne.n	8007888 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <HAL_UART_Transmit+0x24>
 800779e:	88fb      	ldrh	r3, [r7, #6]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e070      	b.n	800788a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2221      	movs	r2, #33	@ 0x21
 80077b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077b6:	f7fb fa17 	bl	8002be8 <HAL_GetTick>
 80077ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	88fa      	ldrh	r2, [r7, #6]
 80077c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	88fa      	ldrh	r2, [r7, #6]
 80077c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077d4:	d108      	bne.n	80077e8 <HAL_UART_Transmit+0x68>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d104      	bne.n	80077e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	61bb      	str	r3, [r7, #24]
 80077e6:	e003      	b.n	80077f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077ec:	2300      	movs	r3, #0
 80077ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077f0:	e02f      	b.n	8007852 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2200      	movs	r2, #0
 80077fa:	2180      	movs	r1, #128	@ 0x80
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 fb67 	bl	8007ed0 <UART_WaitOnFlagUntilTimeout>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2220      	movs	r2, #32
 800780c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e03b      	b.n	800788a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10b      	bne.n	8007830 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	881a      	ldrh	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007824:	b292      	uxth	r2, r2
 8007826:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	3302      	adds	r3, #2
 800782c:	61bb      	str	r3, [r7, #24]
 800782e:	e007      	b.n	8007840 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	781a      	ldrb	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	3301      	adds	r3, #1
 800783e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007846:	b29b      	uxth	r3, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	b29a      	uxth	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1c9      	bne.n	80077f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2200      	movs	r2, #0
 8007866:	2140      	movs	r1, #64	@ 0x40
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 fb31 	bl	8007ed0 <UART_WaitOnFlagUntilTimeout>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d004      	beq.n	800787e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2220      	movs	r2, #32
 8007878:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e005      	b.n	800788a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2220      	movs	r2, #32
 8007882:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	e000      	b.n	800788a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007888:	2302      	movs	r3, #2
  }
}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	431a      	orrs	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4b92      	ldr	r3, [pc, #584]	@ (8007b08 <UART_SetConfig+0x274>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	6812      	ldr	r2, [r2, #0]
 80078c6:	6979      	ldr	r1, [r7, #20]
 80078c8:	430b      	orrs	r3, r1
 80078ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	430a      	orrs	r2, r1
 8007904:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a80      	ldr	r2, [pc, #512]	@ (8007b0c <UART_SetConfig+0x278>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d120      	bne.n	8007952 <UART_SetConfig+0xbe>
 8007910:	4b7f      	ldr	r3, [pc, #508]	@ (8007b10 <UART_SetConfig+0x27c>)
 8007912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007914:	f003 0303 	and.w	r3, r3, #3
 8007918:	2b03      	cmp	r3, #3
 800791a:	d817      	bhi.n	800794c <UART_SetConfig+0xb8>
 800791c:	a201      	add	r2, pc, #4	@ (adr r2, 8007924 <UART_SetConfig+0x90>)
 800791e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007922:	bf00      	nop
 8007924:	08007935 	.word	0x08007935
 8007928:	08007941 	.word	0x08007941
 800792c:	08007947 	.word	0x08007947
 8007930:	0800793b 	.word	0x0800793b
 8007934:	2301      	movs	r3, #1
 8007936:	77fb      	strb	r3, [r7, #31]
 8007938:	e0b5      	b.n	8007aa6 <UART_SetConfig+0x212>
 800793a:	2302      	movs	r3, #2
 800793c:	77fb      	strb	r3, [r7, #31]
 800793e:	e0b2      	b.n	8007aa6 <UART_SetConfig+0x212>
 8007940:	2304      	movs	r3, #4
 8007942:	77fb      	strb	r3, [r7, #31]
 8007944:	e0af      	b.n	8007aa6 <UART_SetConfig+0x212>
 8007946:	2308      	movs	r3, #8
 8007948:	77fb      	strb	r3, [r7, #31]
 800794a:	e0ac      	b.n	8007aa6 <UART_SetConfig+0x212>
 800794c:	2310      	movs	r3, #16
 800794e:	77fb      	strb	r3, [r7, #31]
 8007950:	e0a9      	b.n	8007aa6 <UART_SetConfig+0x212>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a6f      	ldr	r2, [pc, #444]	@ (8007b14 <UART_SetConfig+0x280>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d124      	bne.n	80079a6 <UART_SetConfig+0x112>
 800795c:	4b6c      	ldr	r3, [pc, #432]	@ (8007b10 <UART_SetConfig+0x27c>)
 800795e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007960:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007964:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007968:	d011      	beq.n	800798e <UART_SetConfig+0xfa>
 800796a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800796e:	d817      	bhi.n	80079a0 <UART_SetConfig+0x10c>
 8007970:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007974:	d011      	beq.n	800799a <UART_SetConfig+0x106>
 8007976:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800797a:	d811      	bhi.n	80079a0 <UART_SetConfig+0x10c>
 800797c:	2b00      	cmp	r3, #0
 800797e:	d003      	beq.n	8007988 <UART_SetConfig+0xf4>
 8007980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007984:	d006      	beq.n	8007994 <UART_SetConfig+0x100>
 8007986:	e00b      	b.n	80079a0 <UART_SetConfig+0x10c>
 8007988:	2300      	movs	r3, #0
 800798a:	77fb      	strb	r3, [r7, #31]
 800798c:	e08b      	b.n	8007aa6 <UART_SetConfig+0x212>
 800798e:	2302      	movs	r3, #2
 8007990:	77fb      	strb	r3, [r7, #31]
 8007992:	e088      	b.n	8007aa6 <UART_SetConfig+0x212>
 8007994:	2304      	movs	r3, #4
 8007996:	77fb      	strb	r3, [r7, #31]
 8007998:	e085      	b.n	8007aa6 <UART_SetConfig+0x212>
 800799a:	2308      	movs	r3, #8
 800799c:	77fb      	strb	r3, [r7, #31]
 800799e:	e082      	b.n	8007aa6 <UART_SetConfig+0x212>
 80079a0:	2310      	movs	r3, #16
 80079a2:	77fb      	strb	r3, [r7, #31]
 80079a4:	e07f      	b.n	8007aa6 <UART_SetConfig+0x212>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a5b      	ldr	r2, [pc, #364]	@ (8007b18 <UART_SetConfig+0x284>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d124      	bne.n	80079fa <UART_SetConfig+0x166>
 80079b0:	4b57      	ldr	r3, [pc, #348]	@ (8007b10 <UART_SetConfig+0x27c>)
 80079b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80079b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80079bc:	d011      	beq.n	80079e2 <UART_SetConfig+0x14e>
 80079be:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80079c2:	d817      	bhi.n	80079f4 <UART_SetConfig+0x160>
 80079c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80079c8:	d011      	beq.n	80079ee <UART_SetConfig+0x15a>
 80079ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80079ce:	d811      	bhi.n	80079f4 <UART_SetConfig+0x160>
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d003      	beq.n	80079dc <UART_SetConfig+0x148>
 80079d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079d8:	d006      	beq.n	80079e8 <UART_SetConfig+0x154>
 80079da:	e00b      	b.n	80079f4 <UART_SetConfig+0x160>
 80079dc:	2300      	movs	r3, #0
 80079de:	77fb      	strb	r3, [r7, #31]
 80079e0:	e061      	b.n	8007aa6 <UART_SetConfig+0x212>
 80079e2:	2302      	movs	r3, #2
 80079e4:	77fb      	strb	r3, [r7, #31]
 80079e6:	e05e      	b.n	8007aa6 <UART_SetConfig+0x212>
 80079e8:	2304      	movs	r3, #4
 80079ea:	77fb      	strb	r3, [r7, #31]
 80079ec:	e05b      	b.n	8007aa6 <UART_SetConfig+0x212>
 80079ee:	2308      	movs	r3, #8
 80079f0:	77fb      	strb	r3, [r7, #31]
 80079f2:	e058      	b.n	8007aa6 <UART_SetConfig+0x212>
 80079f4:	2310      	movs	r3, #16
 80079f6:	77fb      	strb	r3, [r7, #31]
 80079f8:	e055      	b.n	8007aa6 <UART_SetConfig+0x212>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a47      	ldr	r2, [pc, #284]	@ (8007b1c <UART_SetConfig+0x288>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d124      	bne.n	8007a4e <UART_SetConfig+0x1ba>
 8007a04:	4b42      	ldr	r3, [pc, #264]	@ (8007b10 <UART_SetConfig+0x27c>)
 8007a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a08:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007a0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a10:	d011      	beq.n	8007a36 <UART_SetConfig+0x1a2>
 8007a12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a16:	d817      	bhi.n	8007a48 <UART_SetConfig+0x1b4>
 8007a18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a1c:	d011      	beq.n	8007a42 <UART_SetConfig+0x1ae>
 8007a1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a22:	d811      	bhi.n	8007a48 <UART_SetConfig+0x1b4>
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d003      	beq.n	8007a30 <UART_SetConfig+0x19c>
 8007a28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a2c:	d006      	beq.n	8007a3c <UART_SetConfig+0x1a8>
 8007a2e:	e00b      	b.n	8007a48 <UART_SetConfig+0x1b4>
 8007a30:	2300      	movs	r3, #0
 8007a32:	77fb      	strb	r3, [r7, #31]
 8007a34:	e037      	b.n	8007aa6 <UART_SetConfig+0x212>
 8007a36:	2302      	movs	r3, #2
 8007a38:	77fb      	strb	r3, [r7, #31]
 8007a3a:	e034      	b.n	8007aa6 <UART_SetConfig+0x212>
 8007a3c:	2304      	movs	r3, #4
 8007a3e:	77fb      	strb	r3, [r7, #31]
 8007a40:	e031      	b.n	8007aa6 <UART_SetConfig+0x212>
 8007a42:	2308      	movs	r3, #8
 8007a44:	77fb      	strb	r3, [r7, #31]
 8007a46:	e02e      	b.n	8007aa6 <UART_SetConfig+0x212>
 8007a48:	2310      	movs	r3, #16
 8007a4a:	77fb      	strb	r3, [r7, #31]
 8007a4c:	e02b      	b.n	8007aa6 <UART_SetConfig+0x212>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a33      	ldr	r2, [pc, #204]	@ (8007b20 <UART_SetConfig+0x28c>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d124      	bne.n	8007aa2 <UART_SetConfig+0x20e>
 8007a58:	4b2d      	ldr	r3, [pc, #180]	@ (8007b10 <UART_SetConfig+0x27c>)
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007a60:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007a64:	d011      	beq.n	8007a8a <UART_SetConfig+0x1f6>
 8007a66:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007a6a:	d817      	bhi.n	8007a9c <UART_SetConfig+0x208>
 8007a6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a70:	d011      	beq.n	8007a96 <UART_SetConfig+0x202>
 8007a72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a76:	d811      	bhi.n	8007a9c <UART_SetConfig+0x208>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <UART_SetConfig+0x1f0>
 8007a7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a80:	d006      	beq.n	8007a90 <UART_SetConfig+0x1fc>
 8007a82:	e00b      	b.n	8007a9c <UART_SetConfig+0x208>
 8007a84:	2300      	movs	r3, #0
 8007a86:	77fb      	strb	r3, [r7, #31]
 8007a88:	e00d      	b.n	8007aa6 <UART_SetConfig+0x212>
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	77fb      	strb	r3, [r7, #31]
 8007a8e:	e00a      	b.n	8007aa6 <UART_SetConfig+0x212>
 8007a90:	2304      	movs	r3, #4
 8007a92:	77fb      	strb	r3, [r7, #31]
 8007a94:	e007      	b.n	8007aa6 <UART_SetConfig+0x212>
 8007a96:	2308      	movs	r3, #8
 8007a98:	77fb      	strb	r3, [r7, #31]
 8007a9a:	e004      	b.n	8007aa6 <UART_SetConfig+0x212>
 8007a9c:	2310      	movs	r3, #16
 8007a9e:	77fb      	strb	r3, [r7, #31]
 8007aa0:	e001      	b.n	8007aa6 <UART_SetConfig+0x212>
 8007aa2:	2310      	movs	r3, #16
 8007aa4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007aae:	d16b      	bne.n	8007b88 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007ab0:	7ffb      	ldrb	r3, [r7, #31]
 8007ab2:	2b08      	cmp	r3, #8
 8007ab4:	d838      	bhi.n	8007b28 <UART_SetConfig+0x294>
 8007ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8007abc <UART_SetConfig+0x228>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007ae1 	.word	0x08007ae1
 8007ac0:	08007ae9 	.word	0x08007ae9
 8007ac4:	08007af1 	.word	0x08007af1
 8007ac8:	08007b29 	.word	0x08007b29
 8007acc:	08007af7 	.word	0x08007af7
 8007ad0:	08007b29 	.word	0x08007b29
 8007ad4:	08007b29 	.word	0x08007b29
 8007ad8:	08007b29 	.word	0x08007b29
 8007adc:	08007aff 	.word	0x08007aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae0:	f7fe f87a 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8007ae4:	61b8      	str	r0, [r7, #24]
        break;
 8007ae6:	e024      	b.n	8007b32 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ae8:	f7fe f898 	bl	8005c1c <HAL_RCC_GetPCLK2Freq>
 8007aec:	61b8      	str	r0, [r7, #24]
        break;
 8007aee:	e020      	b.n	8007b32 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007af0:	4b0c      	ldr	r3, [pc, #48]	@ (8007b24 <UART_SetConfig+0x290>)
 8007af2:	61bb      	str	r3, [r7, #24]
        break;
 8007af4:	e01d      	b.n	8007b32 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007af6:	f7fe f80f 	bl	8005b18 <HAL_RCC_GetSysClockFreq>
 8007afa:	61b8      	str	r0, [r7, #24]
        break;
 8007afc:	e019      	b.n	8007b32 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b02:	61bb      	str	r3, [r7, #24]
        break;
 8007b04:	e015      	b.n	8007b32 <UART_SetConfig+0x29e>
 8007b06:	bf00      	nop
 8007b08:	efff69f3 	.word	0xefff69f3
 8007b0c:	40013800 	.word	0x40013800
 8007b10:	40021000 	.word	0x40021000
 8007b14:	40004400 	.word	0x40004400
 8007b18:	40004800 	.word	0x40004800
 8007b1c:	40004c00 	.word	0x40004c00
 8007b20:	40005000 	.word	0x40005000
 8007b24:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	77bb      	strb	r3, [r7, #30]
        break;
 8007b30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d073      	beq.n	8007c20 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	005a      	lsls	r2, r3, #1
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	085b      	lsrs	r3, r3, #1
 8007b42:	441a      	add	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b0f      	cmp	r3, #15
 8007b52:	d916      	bls.n	8007b82 <UART_SetConfig+0x2ee>
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b5a:	d212      	bcs.n	8007b82 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	f023 030f 	bic.w	r3, r3, #15
 8007b64:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	085b      	lsrs	r3, r3, #1
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	89fb      	ldrh	r3, [r7, #14]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	89fa      	ldrh	r2, [r7, #14]
 8007b7e:	60da      	str	r2, [r3, #12]
 8007b80:	e04e      	b.n	8007c20 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	77bb      	strb	r3, [r7, #30]
 8007b86:	e04b      	b.n	8007c20 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b88:	7ffb      	ldrb	r3, [r7, #31]
 8007b8a:	2b08      	cmp	r3, #8
 8007b8c:	d827      	bhi.n	8007bde <UART_SetConfig+0x34a>
 8007b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b94 <UART_SetConfig+0x300>)
 8007b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b94:	08007bb9 	.word	0x08007bb9
 8007b98:	08007bc1 	.word	0x08007bc1
 8007b9c:	08007bc9 	.word	0x08007bc9
 8007ba0:	08007bdf 	.word	0x08007bdf
 8007ba4:	08007bcf 	.word	0x08007bcf
 8007ba8:	08007bdf 	.word	0x08007bdf
 8007bac:	08007bdf 	.word	0x08007bdf
 8007bb0:	08007bdf 	.word	0x08007bdf
 8007bb4:	08007bd7 	.word	0x08007bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bb8:	f7fe f80e 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8007bbc:	61b8      	str	r0, [r7, #24]
        break;
 8007bbe:	e013      	b.n	8007be8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bc0:	f7fe f82c 	bl	8005c1c <HAL_RCC_GetPCLK2Freq>
 8007bc4:	61b8      	str	r0, [r7, #24]
        break;
 8007bc6:	e00f      	b.n	8007be8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8007c38 <UART_SetConfig+0x3a4>)
 8007bca:	61bb      	str	r3, [r7, #24]
        break;
 8007bcc:	e00c      	b.n	8007be8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bce:	f7fd ffa3 	bl	8005b18 <HAL_RCC_GetSysClockFreq>
 8007bd2:	61b8      	str	r0, [r7, #24]
        break;
 8007bd4:	e008      	b.n	8007be8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bda:	61bb      	str	r3, [r7, #24]
        break;
 8007bdc:	e004      	b.n	8007be8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	77bb      	strb	r3, [r7, #30]
        break;
 8007be6:	bf00      	nop
    }

    if (pclk != 0U)
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d018      	beq.n	8007c20 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	085a      	lsrs	r2, r3, #1
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	441a      	add	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b0f      	cmp	r3, #15
 8007c06:	d909      	bls.n	8007c1c <UART_SetConfig+0x388>
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c0e:	d205      	bcs.n	8007c1c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	60da      	str	r2, [r3, #12]
 8007c1a:	e001      	b.n	8007c20 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007c2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3720      	adds	r7, #32
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	007a1200 	.word	0x007a1200

08007c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c48:	f003 0308 	and.w	r3, r3, #8
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00a      	beq.n	8007c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00a      	beq.n	8007caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd0:	f003 0310 	and.w	r3, r3, #16
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01a      	beq.n	8007d52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d3a:	d10a      	bne.n	8007d52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	605a      	str	r2, [r3, #4]
  }
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b098      	sub	sp, #96	@ 0x60
 8007d84:	af02      	add	r7, sp, #8
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d90:	f7fa ff2a 	bl	8002be8 <HAL_GetTick>
 8007d94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0308 	and.w	r3, r3, #8
 8007da0:	2b08      	cmp	r3, #8
 8007da2:	d12e      	bne.n	8007e02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007da4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dac:	2200      	movs	r2, #0
 8007dae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f88c 	bl	8007ed0 <UART_WaitOnFlagUntilTimeout>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d021      	beq.n	8007e02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dde:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e6      	bne.n	8007dbe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2220      	movs	r2, #32
 8007df4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e062      	b.n	8007ec8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0304 	and.w	r3, r3, #4
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d149      	bne.n	8007ea4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f856 	bl	8007ed0 <UART_WaitOnFlagUntilTimeout>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d03c      	beq.n	8007ea4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e32:	e853 3f00 	ldrex	r3, [r3]
 8007e36:	623b      	str	r3, [r7, #32]
   return(result);
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	461a      	mov	r2, r3
 8007e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e48:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e6      	bne.n	8007e2a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3308      	adds	r3, #8
 8007e62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f023 0301 	bic.w	r3, r3, #1
 8007e72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e7c:	61fa      	str	r2, [r7, #28]
 8007e7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	69b9      	ldr	r1, [r7, #24]
 8007e82:	69fa      	ldr	r2, [r7, #28]
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	617b      	str	r3, [r7, #20]
   return(result);
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e5      	bne.n	8007e5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e011      	b.n	8007ec8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3758      	adds	r7, #88	@ 0x58
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	4613      	mov	r3, r2
 8007ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ee0:	e04f      	b.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee8:	d04b      	beq.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eea:	f7fa fe7d 	bl	8002be8 <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d302      	bcc.n	8007f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e04e      	b.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0304 	and.w	r3, r3, #4
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d037      	beq.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2b80      	cmp	r3, #128	@ 0x80
 8007f16:	d034      	beq.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2b40      	cmp	r3, #64	@ 0x40
 8007f1c:	d031      	beq.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	d110      	bne.n	8007f4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2208      	movs	r2, #8
 8007f32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 f838 	bl	8007faa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2208      	movs	r2, #8
 8007f3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e029      	b.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f5c:	d111      	bne.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 f81e 	bl	8007faa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2220      	movs	r2, #32
 8007f72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e00f      	b.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	69da      	ldr	r2, [r3, #28]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	bf0c      	ite	eq
 8007f92:	2301      	moveq	r3, #1
 8007f94:	2300      	movne	r3, #0
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	461a      	mov	r2, r3
 8007f9a:	79fb      	ldrb	r3, [r7, #7]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d0a0      	beq.n	8007ee2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b095      	sub	sp, #84	@ 0x54
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e6      	bne.n	8007fb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3308      	adds	r3, #8
 8007fea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f023 0301 	bic.w	r3, r3, #1
 8007ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3308      	adds	r3, #8
 8008002:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008004:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008006:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800800a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e5      	bne.n	8007fe4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800801c:	2b01      	cmp	r3, #1
 800801e:	d118      	bne.n	8008052 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	e853 3f00 	ldrex	r3, [r3]
 800802c:	60bb      	str	r3, [r7, #8]
   return(result);
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f023 0310 	bic.w	r3, r3, #16
 8008034:	647b      	str	r3, [r7, #68]	@ 0x44
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	461a      	mov	r2, r3
 800803c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800803e:	61bb      	str	r3, [r7, #24]
 8008040:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	6979      	ldr	r1, [r7, #20]
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	e841 2300 	strex	r3, r2, [r1]
 800804a:	613b      	str	r3, [r7, #16]
   return(result);
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1e6      	bne.n	8008020 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2220      	movs	r2, #32
 8008056:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008066:	bf00      	nop
 8008068:	3754      	adds	r7, #84	@ 0x54
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800807a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800807e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008086:	b29a      	uxth	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	b29b      	uxth	r3, r3
 800808c:	43db      	mvns	r3, r3
 800808e:	b29b      	uxth	r3, r3
 8008090:	4013      	ands	r3, r2
 8008092:	b29a      	uxth	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	1d3b      	adds	r3, r7, #4
 80080b2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b0c2      	sub	sp, #264	@ 0x108
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080f2:	6018      	str	r0, [r3, #0]
 80080f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080fc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	785b      	ldrb	r3, [r3, #1]
 800810a:	2b01      	cmp	r3, #1
 800810c:	f040 86b7 	bne.w	8008e7e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	699a      	ldr	r2, [r3, #24]
 800811c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	429a      	cmp	r2, r3
 800812a:	d908      	bls.n	800813e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800812c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800813c:	e007      	b.n	800814e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800813e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800814e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	7b1b      	ldrb	r3, [r3, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d13a      	bne.n	80081d4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800815e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6959      	ldr	r1, [r3, #20]
 800816a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800816e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	88da      	ldrh	r2, [r3, #6]
 8008176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800817a:	b29b      	uxth	r3, r3
 800817c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008180:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008184:	6800      	ldr	r0, [r0, #0]
 8008186:	f001 fb83 	bl	8009890 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800818a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800818e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	613b      	str	r3, [r7, #16]
 8008196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800819a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	461a      	mov	r2, r3
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	4413      	add	r3, r2
 80081ac:	613b      	str	r3, [r7, #16]
 80081ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	00da      	lsls	r2, r3, #3
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4413      	add	r3, r2
 80081c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	801a      	strh	r2, [r3, #0]
 80081d0:	f000 be1f 	b.w	8008e12 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80081d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	78db      	ldrb	r3, [r3, #3]
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	f040 8462 	bne.w	8008aaa <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80081e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6a1a      	ldr	r2, [r3, #32]
 80081f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	429a      	cmp	r2, r3
 8008200:	f240 83df 	bls.w	80089c2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008208:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	b29b      	uxth	r3, r3
 8008222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800822a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800822e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	441a      	add	r2, r3
 8008248:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800824c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008250:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008254:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800825c:	b29b      	uxth	r3, r3
 800825e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6a1a      	ldr	r2, [r3, #32]
 800826c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008270:	1ad2      	subs	r2, r2, r3
 8008272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800827e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008282:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800828c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	b29b      	uxth	r3, r3
 800829c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 81c7 	beq.w	8008634 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80082a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80082b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d177      	bne.n	80083b2 <USB_EPStartXfer+0x2ce>
 80082c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082dc:	b29b      	uxth	r3, r3
 80082de:	461a      	mov	r2, r3
 80082e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e2:	4413      	add	r3, r2
 80082e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	00da      	lsls	r2, r3, #3
 80082f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f6:	4413      	add	r3, r2
 80082f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008308:	b29a      	uxth	r2, r3
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	801a      	strh	r2, [r3, #0]
 800830e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10a      	bne.n	800832c <USB_EPStartXfer+0x248>
 8008316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	b29b      	uxth	r3, r3
 800831c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008324:	b29a      	uxth	r2, r3
 8008326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008328:	801a      	strh	r2, [r3, #0]
 800832a:	e067      	b.n	80083fc <USB_EPStartXfer+0x318>
 800832c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008330:	2b3e      	cmp	r3, #62	@ 0x3e
 8008332:	d81c      	bhi.n	800836e <USB_EPStartXfer+0x28a>
 8008334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008338:	085b      	lsrs	r3, r3, #1
 800833a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800833e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d004      	beq.n	8008354 <USB_EPStartXfer+0x270>
 800834a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800834e:	3301      	adds	r3, #1
 8008350:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	b29a      	uxth	r2, r3
 800835a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800835e:	b29b      	uxth	r3, r3
 8008360:	029b      	lsls	r3, r3, #10
 8008362:	b29b      	uxth	r3, r3
 8008364:	4313      	orrs	r3, r2
 8008366:	b29a      	uxth	r2, r3
 8008368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836a:	801a      	strh	r2, [r3, #0]
 800836c:	e046      	b.n	80083fc <USB_EPStartXfer+0x318>
 800836e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008372:	095b      	lsrs	r3, r3, #5
 8008374:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800837c:	f003 031f 	and.w	r3, r3, #31
 8008380:	2b00      	cmp	r3, #0
 8008382:	d104      	bne.n	800838e <USB_EPStartXfer+0x2aa>
 8008384:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008388:	3b01      	subs	r3, #1
 800838a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	b29a      	uxth	r2, r3
 8008394:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008398:	b29b      	uxth	r3, r3
 800839a:	029b      	lsls	r3, r3, #10
 800839c:	b29b      	uxth	r3, r3
 800839e:	4313      	orrs	r3, r2
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ae:	801a      	strh	r2, [r3, #0]
 80083b0:	e024      	b.n	80083fc <USB_EPStartXfer+0x318>
 80083b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	785b      	ldrb	r3, [r3, #1]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d11c      	bne.n	80083fc <USB_EPStartXfer+0x318>
 80083c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	461a      	mov	r2, r3
 80083d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d6:	4413      	add	r3, r2
 80083d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80083da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	00da      	lsls	r2, r3, #3
 80083e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ea:	4413      	add	r3, r2
 80083ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80083f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80083fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	895b      	ldrh	r3, [r3, #10]
 8008408:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800840c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	6959      	ldr	r1, [r3, #20]
 8008418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800841c:	b29b      	uxth	r3, r3
 800841e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008422:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008426:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800842a:	6800      	ldr	r0, [r0, #0]
 800842c:	f001 fa30 	bl	8009890 <USB_WritePMA>
            ep->xfer_buff += len;
 8008430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	695a      	ldr	r2, [r3, #20]
 800843c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008440:	441a      	add	r2, r3
 8008442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800844e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6a1a      	ldr	r2, [r3, #32]
 800845a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800845e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	429a      	cmp	r2, r3
 8008468:	d90f      	bls.n	800848a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800846a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6a1a      	ldr	r2, [r3, #32]
 8008476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800847a:	1ad2      	subs	r2, r2, r3
 800847c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	621a      	str	r2, [r3, #32]
 8008488:	e00e      	b.n	80084a8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800848a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800849a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800849e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2200      	movs	r2, #0
 80084a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	785b      	ldrb	r3, [r3, #1]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d177      	bne.n	80085a8 <USB_EPStartXfer+0x4c4>
 80084b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	61bb      	str	r3, [r7, #24]
 80084c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	461a      	mov	r2, r3
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	4413      	add	r3, r2
 80084da:	61bb      	str	r3, [r7, #24]
 80084dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	00da      	lsls	r2, r3, #3
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	4413      	add	r3, r2
 80084ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084fe:	b29a      	uxth	r2, r3
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	801a      	strh	r2, [r3, #0]
 8008504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10a      	bne.n	8008522 <USB_EPStartXfer+0x43e>
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	b29b      	uxth	r3, r3
 8008512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851a:	b29a      	uxth	r2, r3
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	801a      	strh	r2, [r3, #0]
 8008520:	e06d      	b.n	80085fe <USB_EPStartXfer+0x51a>
 8008522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008526:	2b3e      	cmp	r3, #62	@ 0x3e
 8008528:	d81c      	bhi.n	8008564 <USB_EPStartXfer+0x480>
 800852a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800852e:	085b      	lsrs	r3, r3, #1
 8008530:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b00      	cmp	r3, #0
 800853e:	d004      	beq.n	800854a <USB_EPStartXfer+0x466>
 8008540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008544:	3301      	adds	r3, #1
 8008546:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	b29a      	uxth	r2, r3
 8008550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008554:	b29b      	uxth	r3, r3
 8008556:	029b      	lsls	r3, r3, #10
 8008558:	b29b      	uxth	r3, r3
 800855a:	4313      	orrs	r3, r2
 800855c:	b29a      	uxth	r2, r3
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	801a      	strh	r2, [r3, #0]
 8008562:	e04c      	b.n	80085fe <USB_EPStartXfer+0x51a>
 8008564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008568:	095b      	lsrs	r3, r3, #5
 800856a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800856e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008572:	f003 031f 	and.w	r3, r3, #31
 8008576:	2b00      	cmp	r3, #0
 8008578:	d104      	bne.n	8008584 <USB_EPStartXfer+0x4a0>
 800857a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800857e:	3b01      	subs	r3, #1
 8008580:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	b29a      	uxth	r2, r3
 800858a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800858e:	b29b      	uxth	r3, r3
 8008590:	029b      	lsls	r3, r3, #10
 8008592:	b29b      	uxth	r3, r3
 8008594:	4313      	orrs	r3, r2
 8008596:	b29b      	uxth	r3, r3
 8008598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800859c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	801a      	strh	r2, [r3, #0]
 80085a6:	e02a      	b.n	80085fe <USB_EPStartXfer+0x51a>
 80085a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	785b      	ldrb	r3, [r3, #1]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d122      	bne.n	80085fe <USB_EPStartXfer+0x51a>
 80085b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	623b      	str	r3, [r7, #32]
 80085c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	461a      	mov	r2, r3
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	4413      	add	r3, r2
 80085da:	623b      	str	r3, [r7, #32]
 80085dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	00da      	lsls	r2, r3, #3
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	4413      	add	r3, r2
 80085ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085f2:	61fb      	str	r3, [r7, #28]
 80085f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80085fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	891b      	ldrh	r3, [r3, #8]
 800860a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800860e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6959      	ldr	r1, [r3, #20]
 800861a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800861e:	b29b      	uxth	r3, r3
 8008620:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008624:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008628:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800862c:	6800      	ldr	r0, [r0, #0]
 800862e:	f001 f92f 	bl	8009890 <USB_WritePMA>
 8008632:	e3ee      	b.n	8008e12 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	785b      	ldrb	r3, [r3, #1]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d177      	bne.n	8008734 <USB_EPStartXfer+0x650>
 8008644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008648:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008654:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800865e:	b29b      	uxth	r3, r3
 8008660:	461a      	mov	r2, r3
 8008662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008664:	4413      	add	r3, r2
 8008666:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800866c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	00da      	lsls	r2, r3, #3
 8008676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008678:	4413      	add	r3, r2
 800867a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800867e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	b29b      	uxth	r3, r3
 8008686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800868a:	b29a      	uxth	r2, r3
 800868c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800868e:	801a      	strh	r2, [r3, #0]
 8008690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10a      	bne.n	80086ae <USB_EPStartXfer+0x5ca>
 8008698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	b29b      	uxth	r3, r3
 800869e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086aa:	801a      	strh	r2, [r3, #0]
 80086ac:	e06d      	b.n	800878a <USB_EPStartXfer+0x6a6>
 80086ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80086b4:	d81c      	bhi.n	80086f0 <USB_EPStartXfer+0x60c>
 80086b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ba:	085b      	lsrs	r3, r3, #1
 80086bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80086c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d004      	beq.n	80086d6 <USB_EPStartXfer+0x5f2>
 80086cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80086d0:	3301      	adds	r3, #1
 80086d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80086d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	b29a      	uxth	r2, r3
 80086dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	029b      	lsls	r3, r3, #10
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	4313      	orrs	r3, r2
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086ec:	801a      	strh	r2, [r3, #0]
 80086ee:	e04c      	b.n	800878a <USB_EPStartXfer+0x6a6>
 80086f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086f4:	095b      	lsrs	r3, r3, #5
 80086f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80086fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086fe:	f003 031f 	and.w	r3, r3, #31
 8008702:	2b00      	cmp	r3, #0
 8008704:	d104      	bne.n	8008710 <USB_EPStartXfer+0x62c>
 8008706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800870a:	3b01      	subs	r3, #1
 800870c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008712:	881b      	ldrh	r3, [r3, #0]
 8008714:	b29a      	uxth	r2, r3
 8008716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800871a:	b29b      	uxth	r3, r3
 800871c:	029b      	lsls	r3, r3, #10
 800871e:	b29b      	uxth	r3, r3
 8008720:	4313      	orrs	r3, r2
 8008722:	b29b      	uxth	r3, r3
 8008724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800872c:	b29a      	uxth	r2, r3
 800872e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008730:	801a      	strh	r2, [r3, #0]
 8008732:	e02a      	b.n	800878a <USB_EPStartXfer+0x6a6>
 8008734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	785b      	ldrb	r3, [r3, #1]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d122      	bne.n	800878a <USB_EPStartXfer+0x6a6>
 8008744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800875e:	b29b      	uxth	r3, r3
 8008760:	461a      	mov	r2, r3
 8008762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008764:	4413      	add	r3, r2
 8008766:	653b      	str	r3, [r7, #80]	@ 0x50
 8008768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800876c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	00da      	lsls	r2, r3, #3
 8008776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008778:	4413      	add	r3, r2
 800877a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800877e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008784:	b29a      	uxth	r2, r3
 8008786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008788:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800878a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800878e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	891b      	ldrh	r3, [r3, #8]
 8008796:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800879a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800879e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6959      	ldr	r1, [r3, #20]
 80087a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80087b0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80087b4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80087b8:	6800      	ldr	r0, [r0, #0]
 80087ba:	f001 f869 	bl	8009890 <USB_WritePMA>
            ep->xfer_buff += len;
 80087be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	695a      	ldr	r2, [r3, #20]
 80087ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ce:	441a      	add	r2, r3
 80087d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80087dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6a1a      	ldr	r2, [r3, #32]
 80087e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d90f      	bls.n	8008818 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80087f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6a1a      	ldr	r2, [r3, #32]
 8008804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008808:	1ad2      	subs	r2, r2, r3
 800880a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800880e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	621a      	str	r2, [r3, #32]
 8008816:	e00e      	b.n	8008836 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800881c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6a1b      	ldr	r3, [r3, #32]
 8008824:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800882c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2200      	movs	r2, #0
 8008834:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800883a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	643b      	str	r3, [r7, #64]	@ 0x40
 8008842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008846:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	785b      	ldrb	r3, [r3, #1]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d177      	bne.n	8008942 <USB_EPStartXfer+0x85e>
 8008852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008856:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800885e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008862:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800886c:	b29b      	uxth	r3, r3
 800886e:	461a      	mov	r2, r3
 8008870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008872:	4413      	add	r3, r2
 8008874:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800887a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	00da      	lsls	r2, r3, #3
 8008884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008886:	4413      	add	r3, r2
 8008888:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800888c:	637b      	str	r3, [r7, #52]	@ 0x34
 800888e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	b29b      	uxth	r3, r3
 8008894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008898:	b29a      	uxth	r2, r3
 800889a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800889c:	801a      	strh	r2, [r3, #0]
 800889e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10a      	bne.n	80088bc <USB_EPStartXfer+0x7d8>
 80088a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088b8:	801a      	strh	r2, [r3, #0]
 80088ba:	e067      	b.n	800898c <USB_EPStartXfer+0x8a8>
 80088bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80088c2:	d81c      	bhi.n	80088fe <USB_EPStartXfer+0x81a>
 80088c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088c8:	085b      	lsrs	r3, r3, #1
 80088ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80088ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d004      	beq.n	80088e4 <USB_EPStartXfer+0x800>
 80088da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088de:	3301      	adds	r3, #1
 80088e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80088e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e6:	881b      	ldrh	r3, [r3, #0]
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	029b      	lsls	r3, r3, #10
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	4313      	orrs	r3, r2
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088fa:	801a      	strh	r2, [r3, #0]
 80088fc:	e046      	b.n	800898c <USB_EPStartXfer+0x8a8>
 80088fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008902:	095b      	lsrs	r3, r3, #5
 8008904:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800890c:	f003 031f 	and.w	r3, r3, #31
 8008910:	2b00      	cmp	r3, #0
 8008912:	d104      	bne.n	800891e <USB_EPStartXfer+0x83a>
 8008914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008918:	3b01      	subs	r3, #1
 800891a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800891e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	b29a      	uxth	r2, r3
 8008924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008928:	b29b      	uxth	r3, r3
 800892a:	029b      	lsls	r3, r3, #10
 800892c:	b29b      	uxth	r3, r3
 800892e:	4313      	orrs	r3, r2
 8008930:	b29b      	uxth	r3, r3
 8008932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800893a:	b29a      	uxth	r2, r3
 800893c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800893e:	801a      	strh	r2, [r3, #0]
 8008940:	e024      	b.n	800898c <USB_EPStartXfer+0x8a8>
 8008942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	785b      	ldrb	r3, [r3, #1]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d11c      	bne.n	800898c <USB_EPStartXfer+0x8a8>
 8008952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008960:	b29b      	uxth	r3, r3
 8008962:	461a      	mov	r2, r3
 8008964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008966:	4413      	add	r3, r2
 8008968:	643b      	str	r3, [r7, #64]	@ 0x40
 800896a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800896e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	00da      	lsls	r2, r3, #3
 8008978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800897a:	4413      	add	r3, r2
 800897c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008980:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008986:	b29a      	uxth	r2, r3
 8008988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800898a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800898c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	895b      	ldrh	r3, [r3, #10]
 8008998:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800899c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6959      	ldr	r1, [r3, #20]
 80089a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80089b2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80089b6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80089ba:	6800      	ldr	r0, [r0, #0]
 80089bc:	f000 ff68 	bl	8009890 <USB_WritePMA>
 80089c0:	e227      	b.n	8008e12 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80089c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80089d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80089f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089f8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80089fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	441a      	add	r2, r3
 8008a16:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008a1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a4e:	4413      	add	r3, r2
 8008a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	00da      	lsls	r2, r3, #3
 8008a60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a62:	4413      	add	r3, r2
 8008a64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	891b      	ldrh	r3, [r3, #8]
 8008a80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	6959      	ldr	r1, [r3, #20]
 8008a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a9a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008a9e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008aa2:	6800      	ldr	r0, [r0, #0]
 8008aa4:	f000 fef4 	bl	8009890 <USB_WritePMA>
 8008aa8:	e1b3      	b.n	8008e12 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6a1a      	ldr	r2, [r3, #32]
 8008ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aba:	1ad2      	subs	r2, r2, r3
 8008abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008acc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 80c6 	beq.w	8008c7c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	673b      	str	r3, [r7, #112]	@ 0x70
 8008afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	785b      	ldrb	r3, [r3, #1]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d177      	bne.n	8008bfc <USB_EPStartXfer+0xb18>
 8008b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	461a      	mov	r2, r3
 8008b2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b2c:	4413      	add	r3, r2
 8008b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	00da      	lsls	r2, r3, #3
 8008b3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b40:	4413      	add	r3, r2
 8008b42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b46:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b56:	801a      	strh	r2, [r3, #0]
 8008b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10a      	bne.n	8008b76 <USB_EPStartXfer+0xa92>
 8008b60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b72:	801a      	strh	r2, [r3, #0]
 8008b74:	e067      	b.n	8008c46 <USB_EPStartXfer+0xb62>
 8008b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b7c:	d81c      	bhi.n	8008bb8 <USB_EPStartXfer+0xad4>
 8008b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b82:	085b      	lsrs	r3, r3, #1
 8008b84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d004      	beq.n	8008b9e <USB_EPStartXfer+0xaba>
 8008b94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008b98:	3301      	adds	r3, #1
 8008b9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008b9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	029b      	lsls	r3, r3, #10
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bb4:	801a      	strh	r2, [r3, #0]
 8008bb6:	e046      	b.n	8008c46 <USB_EPStartXfer+0xb62>
 8008bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bbc:	095b      	lsrs	r3, r3, #5
 8008bbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bc6:	f003 031f 	and.w	r3, r3, #31
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d104      	bne.n	8008bd8 <USB_EPStartXfer+0xaf4>
 8008bce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008bd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	029b      	lsls	r3, r3, #10
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	4313      	orrs	r3, r2
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bf8:	801a      	strh	r2, [r3, #0]
 8008bfa:	e024      	b.n	8008c46 <USB_EPStartXfer+0xb62>
 8008bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	785b      	ldrb	r3, [r3, #1]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d11c      	bne.n	8008c46 <USB_EPStartXfer+0xb62>
 8008c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008c20:	4413      	add	r3, r2
 8008c22:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	00da      	lsls	r2, r3, #3
 8008c32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008c34:	4413      	add	r3, r2
 8008c36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	895b      	ldrh	r3, [r3, #10]
 8008c52:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6959      	ldr	r1, [r3, #20]
 8008c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c6c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c70:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008c74:	6800      	ldr	r0, [r0, #0]
 8008c76:	f000 fe0b 	bl	8009890 <USB_WritePMA>
 8008c7a:	e0ca      	b.n	8008e12 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	785b      	ldrb	r3, [r3, #1]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d177      	bne.n	8008d7c <USB_EPStartXfer+0xc98>
 8008c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	461a      	mov	r2, r3
 8008caa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008cac:	4413      	add	r3, r2
 8008cae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	00da      	lsls	r2, r3, #3
 8008cbe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008cc6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008cc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008cd6:	801a      	strh	r2, [r3, #0]
 8008cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10a      	bne.n	8008cf6 <USB_EPStartXfer+0xc12>
 8008ce0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ce2:	881b      	ldrh	r3, [r3, #0]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008cf2:	801a      	strh	r2, [r3, #0]
 8008cf4:	e073      	b.n	8008dde <USB_EPStartXfer+0xcfa>
 8008cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cfa:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cfc:	d81c      	bhi.n	8008d38 <USB_EPStartXfer+0xc54>
 8008cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d02:	085b      	lsrs	r3, r3, #1
 8008d04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d004      	beq.n	8008d1e <USB_EPStartXfer+0xc3a>
 8008d14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008d18:	3301      	adds	r3, #1
 8008d1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008d1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	029b      	lsls	r3, r3, #10
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d34:	801a      	strh	r2, [r3, #0]
 8008d36:	e052      	b.n	8008dde <USB_EPStartXfer+0xcfa>
 8008d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d3c:	095b      	lsrs	r3, r3, #5
 8008d3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d46:	f003 031f 	and.w	r3, r3, #31
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d104      	bne.n	8008d58 <USB_EPStartXfer+0xc74>
 8008d4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008d52:	3b01      	subs	r3, #1
 8008d54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008d58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	029b      	lsls	r3, r3, #10
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d78:	801a      	strh	r2, [r3, #0]
 8008d7a:	e030      	b.n	8008dde <USB_EPStartXfer+0xcfa>
 8008d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	785b      	ldrb	r3, [r3, #1]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d128      	bne.n	8008dde <USB_EPStartXfer+0xcfa>
 8008d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	461a      	mov	r2, r3
 8008dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008db0:	4413      	add	r3, r2
 8008db2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	00da      	lsls	r2, r3, #3
 8008dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008dc8:	4413      	add	r3, r2
 8008dca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008dce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ddc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	891b      	ldrh	r3, [r3, #8]
 8008dea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6959      	ldr	r1, [r3, #20]
 8008dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008e04:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008e08:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008e0c:	6800      	ldr	r0, [r0, #0]
 8008e0e:	f000 fd3f 	bl	8009890 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e38:	817b      	strh	r3, [r7, #10]
 8008e3a:	897b      	ldrh	r3, [r7, #10]
 8008e3c:	f083 0310 	eor.w	r3, r3, #16
 8008e40:	817b      	strh	r3, [r7, #10]
 8008e42:	897b      	ldrh	r3, [r7, #10]
 8008e44:	f083 0320 	eor.w	r3, r3, #32
 8008e48:	817b      	strh	r3, [r7, #10]
 8008e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	441a      	add	r2, r3
 8008e64:	897b      	ldrh	r3, [r7, #10]
 8008e66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	8013      	strh	r3, [r2, #0]
 8008e7a:	f000 bcdf 	b.w	800983c <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	7b1b      	ldrb	r3, [r3, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f040 80bc 	bne.w	8009008 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	699a      	ldr	r2, [r3, #24]
 8008e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d917      	bls.n	8008edc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	699a      	ldr	r2, [r3, #24]
 8008ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ecc:	1ad2      	subs	r2, r2, r3
 8008ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	619a      	str	r2, [r3, #24]
 8008eda:	e00e      	b.n	8008efa <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	461a      	mov	r2, r3
 8008f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008f1e:	4413      	add	r3, r2
 8008f20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	00da      	lsls	r2, r3, #3
 8008f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008f36:	4413      	add	r3, r2
 8008f38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f52:	801a      	strh	r2, [r3, #0]
 8008f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10d      	bne.n	8008f78 <USB_EPStartXfer+0xe94>
 8008f5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f72:	801a      	strh	r2, [r3, #0]
 8008f74:	f000 bc28 	b.w	80097c8 <USB_EPStartXfer+0x16e4>
 8008f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f7e:	d81f      	bhi.n	8008fc0 <USB_EPStartXfer+0xedc>
 8008f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f84:	085b      	lsrs	r3, r3, #1
 8008f86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d004      	beq.n	8008fa0 <USB_EPStartXfer+0xebc>
 8008f96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fa4:	881b      	ldrh	r3, [r3, #0]
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	029b      	lsls	r3, r3, #10
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fba:	801a      	strh	r2, [r3, #0]
 8008fbc:	f000 bc04 	b.w	80097c8 <USB_EPStartXfer+0x16e4>
 8008fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc4:	095b      	lsrs	r3, r3, #5
 8008fc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fce:	f003 031f 	and.w	r3, r3, #31
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d104      	bne.n	8008fe0 <USB_EPStartXfer+0xefc>
 8008fd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	029b      	lsls	r3, r3, #10
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009004:	801a      	strh	r2, [r3, #0]
 8009006:	e3df      	b.n	80097c8 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800900c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	78db      	ldrb	r3, [r3, #3]
 8009014:	2b02      	cmp	r3, #2
 8009016:	f040 8218 	bne.w	800944a <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800901a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800901e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	2b00      	cmp	r3, #0
 8009028:	f040 809d 	bne.w	8009166 <USB_EPStartXfer+0x1082>
 800902c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009030:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800903a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800903e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009048:	b29b      	uxth	r3, r3
 800904a:	461a      	mov	r2, r3
 800904c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009050:	4413      	add	r3, r2
 8009052:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800905a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	00da      	lsls	r2, r3, #3
 8009064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009068:	4413      	add	r3, r2
 800906a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800906e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009072:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800907e:	b29a      	uxth	r2, r3
 8009080:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009084:	801a      	strh	r2, [r3, #0]
 8009086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800908a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10c      	bne.n	80090b0 <USB_EPStartXfer+0xfcc>
 8009096:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	b29b      	uxth	r3, r3
 800909e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80090ac:	801a      	strh	r2, [r3, #0]
 80090ae:	e08f      	b.n	80091d0 <USB_EPStartXfer+0x10ec>
 80090b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80090be:	d826      	bhi.n	800910e <USB_EPStartXfer+0x102a>
 80090c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	085b      	lsrs	r3, r3, #1
 80090ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80090d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d004      	beq.n	80090f0 <USB_EPStartXfer+0x100c>
 80090e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ea:	3301      	adds	r3, #1
 80090ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80090f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	029b      	lsls	r3, r3, #10
 8009100:	b29b      	uxth	r3, r3
 8009102:	4313      	orrs	r3, r2
 8009104:	b29a      	uxth	r2, r3
 8009106:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800910a:	801a      	strh	r2, [r3, #0]
 800910c:	e060      	b.n	80091d0 <USB_EPStartXfer+0x10ec>
 800910e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	095b      	lsrs	r3, r3, #5
 800911c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	f003 031f 	and.w	r3, r3, #31
 8009130:	2b00      	cmp	r3, #0
 8009132:	d104      	bne.n	800913e <USB_EPStartXfer+0x105a>
 8009134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009138:	3b01      	subs	r3, #1
 800913a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800913e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	b29a      	uxth	r2, r3
 8009146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800914a:	b29b      	uxth	r3, r3
 800914c:	029b      	lsls	r3, r3, #10
 800914e:	b29b      	uxth	r3, r3
 8009150:	4313      	orrs	r3, r2
 8009152:	b29b      	uxth	r3, r3
 8009154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800915c:	b29a      	uxth	r2, r3
 800915e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009162:	801a      	strh	r2, [r3, #0]
 8009164:	e034      	b.n	80091d0 <USB_EPStartXfer+0x10ec>
 8009166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800916a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	785b      	ldrb	r3, [r3, #1]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d12c      	bne.n	80091d0 <USB_EPStartXfer+0x10ec>
 8009176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800917a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009188:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009192:	b29b      	uxth	r3, r3
 8009194:	461a      	mov	r2, r3
 8009196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800919a:	4413      	add	r3, r2
 800919c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	00da      	lsls	r2, r3, #3
 80091ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091b2:	4413      	add	r3, r2
 80091b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80091b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80091bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80091ce:	801a      	strh	r2, [r3, #0]
 80091d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80091de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	785b      	ldrb	r3, [r3, #1]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f040 809d 	bne.w	800932a <USB_EPStartXfer+0x1246>
 80091f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80091fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800920c:	b29b      	uxth	r3, r3
 800920e:	461a      	mov	r2, r3
 8009210:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009214:	4413      	add	r3, r2
 8009216:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800921a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800921e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	00da      	lsls	r2, r3, #3
 8009228:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800922c:	4413      	add	r3, r2
 800922e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009232:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009236:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800923a:	881b      	ldrh	r3, [r3, #0]
 800923c:	b29b      	uxth	r3, r3
 800923e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009242:	b29a      	uxth	r2, r3
 8009244:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009248:	801a      	strh	r2, [r3, #0]
 800924a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800924e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10c      	bne.n	8009274 <USB_EPStartXfer+0x1190>
 800925a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800925e:	881b      	ldrh	r3, [r3, #0]
 8009260:	b29b      	uxth	r3, r3
 8009262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800926a:	b29a      	uxth	r2, r3
 800926c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009270:	801a      	strh	r2, [r3, #0]
 8009272:	e088      	b.n	8009386 <USB_EPStartXfer+0x12a2>
 8009274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	2b3e      	cmp	r3, #62	@ 0x3e
 8009282:	d826      	bhi.n	80092d2 <USB_EPStartXfer+0x11ee>
 8009284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	085b      	lsrs	r3, r3, #1
 8009292:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800929a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d004      	beq.n	80092b4 <USB_EPStartXfer+0x11d0>
 80092aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092ae:	3301      	adds	r3, #1
 80092b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80092b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092b8:	881b      	ldrh	r3, [r3, #0]
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	029b      	lsls	r3, r3, #10
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	4313      	orrs	r3, r2
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092ce:	801a      	strh	r2, [r3, #0]
 80092d0:	e059      	b.n	8009386 <USB_EPStartXfer+0x12a2>
 80092d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	095b      	lsrs	r3, r3, #5
 80092e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80092e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	f003 031f 	and.w	r3, r3, #31
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d104      	bne.n	8009302 <USB_EPStartXfer+0x121e>
 80092f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092fc:	3b01      	subs	r3, #1
 80092fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009302:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	b29a      	uxth	r2, r3
 800930a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800930e:	b29b      	uxth	r3, r3
 8009310:	029b      	lsls	r3, r3, #10
 8009312:	b29b      	uxth	r3, r3
 8009314:	4313      	orrs	r3, r2
 8009316:	b29b      	uxth	r3, r3
 8009318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800931c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009320:	b29a      	uxth	r2, r3
 8009322:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009326:	801a      	strh	r2, [r3, #0]
 8009328:	e02d      	b.n	8009386 <USB_EPStartXfer+0x12a2>
 800932a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800932e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	785b      	ldrb	r3, [r3, #1]
 8009336:	2b01      	cmp	r3, #1
 8009338:	d125      	bne.n	8009386 <USB_EPStartXfer+0x12a2>
 800933a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800933e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009348:	b29b      	uxth	r3, r3
 800934a:	461a      	mov	r2, r3
 800934c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009350:	4413      	add	r3, r2
 8009352:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800935a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	00da      	lsls	r2, r3, #3
 8009364:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009368:	4413      	add	r3, r2
 800936a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800936e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	b29a      	uxth	r2, r3
 8009380:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009384:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800938a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	69db      	ldr	r3, [r3, #28]
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 8218 	beq.w	80097c8 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800939c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80093b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80093bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d005      	beq.n	80093d0 <USB_EPStartXfer+0x12ec>
 80093c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80093c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10d      	bne.n	80093ec <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80093d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80093d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f040 81f5 	bne.w	80097c8 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80093de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80093e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f040 81ee 	bne.w	80097c8 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80093ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	b29b      	uxth	r3, r3
 800940a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800940e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009412:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800941a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	441a      	add	r2, r3
 8009430:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009434:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009438:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800943c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009440:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009444:	b29b      	uxth	r3, r3
 8009446:	8013      	strh	r3, [r2, #0]
 8009448:	e1be      	b.n	80097c8 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800944a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800944e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	78db      	ldrb	r3, [r3, #3]
 8009456:	2b01      	cmp	r3, #1
 8009458:	f040 81b4 	bne.w	80097c4 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800945c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	699a      	ldr	r2, [r3, #24]
 8009468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800946c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	429a      	cmp	r2, r3
 8009476:	d917      	bls.n	80094a8 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8009478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800947c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800948c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	699a      	ldr	r2, [r3, #24]
 8009494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009498:	1ad2      	subs	r2, r2, r3
 800949a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800949e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	619a      	str	r2, [r3, #24]
 80094a6:	e00e      	b.n	80094c6 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80094a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80094b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2200      	movs	r2, #0
 80094c4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80094c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	785b      	ldrb	r3, [r3, #1]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f040 8085 	bne.w	80095e2 <USB_EPStartXfer+0x14fe>
 80094d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80094e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	461a      	mov	r2, r3
 80094f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80094fc:	4413      	add	r3, r2
 80094fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	00da      	lsls	r2, r3, #3
 8009510:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009514:	4413      	add	r3, r2
 8009516:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800951a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800951e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	b29b      	uxth	r3, r3
 8009526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800952a:	b29a      	uxth	r2, r3
 800952c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009530:	801a      	strh	r2, [r3, #0]
 8009532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10c      	bne.n	8009554 <USB_EPStartXfer+0x1470>
 800953a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	b29b      	uxth	r3, r3
 8009542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800954a:	b29a      	uxth	r2, r3
 800954c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009550:	801a      	strh	r2, [r3, #0]
 8009552:	e077      	b.n	8009644 <USB_EPStartXfer+0x1560>
 8009554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009558:	2b3e      	cmp	r3, #62	@ 0x3e
 800955a:	d81e      	bhi.n	800959a <USB_EPStartXfer+0x14b6>
 800955c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009560:	085b      	lsrs	r3, r3, #1
 8009562:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d004      	beq.n	800957c <USB_EPStartXfer+0x1498>
 8009572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009576:	3301      	adds	r3, #1
 8009578:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800957c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009580:	881b      	ldrh	r3, [r3, #0]
 8009582:	b29a      	uxth	r2, r3
 8009584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009588:	b29b      	uxth	r3, r3
 800958a:	029b      	lsls	r3, r3, #10
 800958c:	b29b      	uxth	r3, r3
 800958e:	4313      	orrs	r3, r2
 8009590:	b29a      	uxth	r2, r3
 8009592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009596:	801a      	strh	r2, [r3, #0]
 8009598:	e054      	b.n	8009644 <USB_EPStartXfer+0x1560>
 800959a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800959e:	095b      	lsrs	r3, r3, #5
 80095a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80095a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095a8:	f003 031f 	and.w	r3, r3, #31
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d104      	bne.n	80095ba <USB_EPStartXfer+0x14d6>
 80095b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095b4:	3b01      	subs	r3, #1
 80095b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80095ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	029b      	lsls	r3, r3, #10
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	4313      	orrs	r3, r2
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095d8:	b29a      	uxth	r2, r3
 80095da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80095de:	801a      	strh	r2, [r3, #0]
 80095e0:	e030      	b.n	8009644 <USB_EPStartXfer+0x1560>
 80095e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	785b      	ldrb	r3, [r3, #1]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d128      	bne.n	8009644 <USB_EPStartXfer+0x1560>
 80095f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009604:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800960e:	b29b      	uxth	r3, r3
 8009610:	461a      	mov	r2, r3
 8009612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009616:	4413      	add	r3, r2
 8009618:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800961c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	00da      	lsls	r2, r3, #3
 800962a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800962e:	4413      	add	r3, r2
 8009630:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009634:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800963c:	b29a      	uxth	r2, r3
 800963e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009642:	801a      	strh	r2, [r3, #0]
 8009644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009648:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	785b      	ldrb	r3, [r3, #1]
 800965e:	2b00      	cmp	r3, #0
 8009660:	f040 8085 	bne.w	800976e <USB_EPStartXfer+0x168a>
 8009664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009668:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009680:	b29b      	uxth	r3, r3
 8009682:	461a      	mov	r2, r3
 8009684:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009688:	4413      	add	r3, r2
 800968a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800968e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	00da      	lsls	r2, r3, #3
 800969c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80096a0:	4413      	add	r3, r2
 80096a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80096a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80096ae:	881b      	ldrh	r3, [r3, #0]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80096bc:	801a      	strh	r2, [r3, #0]
 80096be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10c      	bne.n	80096e0 <USB_EPStartXfer+0x15fc>
 80096c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80096dc:	801a      	strh	r2, [r3, #0]
 80096de:	e073      	b.n	80097c8 <USB_EPStartXfer+0x16e4>
 80096e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80096e6:	d81e      	bhi.n	8009726 <USB_EPStartXfer+0x1642>
 80096e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ec:	085b      	lsrs	r3, r3, #1
 80096ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80096f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d004      	beq.n	8009708 <USB_EPStartXfer+0x1624>
 80096fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009702:	3301      	adds	r3, #1
 8009704:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009708:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800970c:	881b      	ldrh	r3, [r3, #0]
 800970e:	b29a      	uxth	r2, r3
 8009710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009714:	b29b      	uxth	r3, r3
 8009716:	029b      	lsls	r3, r3, #10
 8009718:	b29b      	uxth	r3, r3
 800971a:	4313      	orrs	r3, r2
 800971c:	b29a      	uxth	r2, r3
 800971e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009722:	801a      	strh	r2, [r3, #0]
 8009724:	e050      	b.n	80097c8 <USB_EPStartXfer+0x16e4>
 8009726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800972a:	095b      	lsrs	r3, r3, #5
 800972c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009734:	f003 031f 	and.w	r3, r3, #31
 8009738:	2b00      	cmp	r3, #0
 800973a:	d104      	bne.n	8009746 <USB_EPStartXfer+0x1662>
 800973c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009740:	3b01      	subs	r3, #1
 8009742:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	b29a      	uxth	r2, r3
 800974e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009752:	b29b      	uxth	r3, r3
 8009754:	029b      	lsls	r3, r3, #10
 8009756:	b29b      	uxth	r3, r3
 8009758:	4313      	orrs	r3, r2
 800975a:	b29b      	uxth	r3, r3
 800975c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009764:	b29a      	uxth	r2, r3
 8009766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800976a:	801a      	strh	r2, [r3, #0]
 800976c:	e02c      	b.n	80097c8 <USB_EPStartXfer+0x16e4>
 800976e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	785b      	ldrb	r3, [r3, #1]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d124      	bne.n	80097c8 <USB_EPStartXfer+0x16e4>
 800977e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009782:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800978c:	b29b      	uxth	r3, r3
 800978e:	461a      	mov	r2, r3
 8009790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009794:	4413      	add	r3, r2
 8009796:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800979a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800979e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	00da      	lsls	r2, r3, #3
 80097a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80097ac:	4413      	add	r3, r2
 80097ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80097b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80097c0:	801a      	strh	r2, [r3, #0]
 80097c2:	e001      	b.n	80097c8 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e03a      	b.n	800983e <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80097f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80097f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80097fa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80097fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009802:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009806:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800980a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800980e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	441a      	add	r2, r3
 8009824:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009828:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800982c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009830:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009838:	b29b      	uxth	r3, r3
 800983a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009854:	78fb      	ldrb	r3, [r7, #3]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d103      	bne.n	8009862 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2280      	movs	r2, #128	@ 0x80
 800985e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800987e:	b29b      	uxth	r3, r3
 8009880:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009882:	68fb      	ldr	r3, [r7, #12]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009890:	b480      	push	{r7}
 8009892:	b08b      	sub	sp, #44	@ 0x2c
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	4611      	mov	r1, r2
 800989c:	461a      	mov	r2, r3
 800989e:	460b      	mov	r3, r1
 80098a0:	80fb      	strh	r3, [r7, #6]
 80098a2:	4613      	mov	r3, r2
 80098a4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80098a6:	88bb      	ldrh	r3, [r7, #4]
 80098a8:	3301      	adds	r3, #1
 80098aa:	085b      	lsrs	r3, r3, #1
 80098ac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80098b6:	88fa      	ldrh	r2, [r7, #6]
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098c0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80098c6:	e01b      	b.n	8009900 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	3301      	adds	r3, #1
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	021b      	lsls	r3, r3, #8
 80098d6:	b21a      	sxth	r2, r3
 80098d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098dc:	4313      	orrs	r3, r2
 80098de:	b21b      	sxth	r3, r3
 80098e0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	8a7a      	ldrh	r2, [r7, #18]
 80098e6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80098e8:	6a3b      	ldr	r3, [r7, #32]
 80098ea:	3302      	adds	r3, #2
 80098ec:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	3301      	adds	r3, #1
 80098f2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	3301      	adds	r3, #1
 80098f8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80098fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fc:	3b01      	subs	r3, #1
 80098fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1e0      	bne.n	80098c8 <USB_WritePMA+0x38>
  }
}
 8009906:	bf00      	nop
 8009908:	bf00      	nop
 800990a:	372c      	adds	r7, #44	@ 0x2c
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009914:	b480      	push	{r7}
 8009916:	b08b      	sub	sp, #44	@ 0x2c
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	4611      	mov	r1, r2
 8009920:	461a      	mov	r2, r3
 8009922:	460b      	mov	r3, r1
 8009924:	80fb      	strh	r3, [r7, #6]
 8009926:	4613      	mov	r3, r2
 8009928:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800992a:	88bb      	ldrh	r3, [r7, #4]
 800992c:	085b      	lsrs	r3, r3, #1
 800992e:	b29b      	uxth	r3, r3
 8009930:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800993a:	88fa      	ldrh	r2, [r7, #6]
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	4413      	add	r3, r2
 8009940:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009944:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	627b      	str	r3, [r7, #36]	@ 0x24
 800994a:	e018      	b.n	800997e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	b29b      	uxth	r3, r3
 8009952:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	3302      	adds	r3, #2
 8009958:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	b2da      	uxtb	r2, r3
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	3301      	adds	r3, #1
 8009966:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	0a1b      	lsrs	r3, r3, #8
 800996c:	b2da      	uxtb	r2, r3
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	3301      	adds	r3, #1
 8009976:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997a:	3b01      	subs	r3, #1
 800997c:	627b      	str	r3, [r7, #36]	@ 0x24
 800997e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e3      	bne.n	800994c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009984:	88bb      	ldrh	r3, [r7, #4]
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	b29b      	uxth	r3, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	d007      	beq.n	80099a0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009990:	6a3b      	ldr	r3, [r7, #32]
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	b29b      	uxth	r3, r3
 8009996:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	b2da      	uxtb	r2, r3
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	701a      	strb	r2, [r3, #0]
  }
}
 80099a0:	bf00      	nop
 80099a2:	372c      	adds	r7, #44	@ 0x2c
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <__cvt>:
 80099ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099b0:	ec57 6b10 	vmov	r6, r7, d0
 80099b4:	2f00      	cmp	r7, #0
 80099b6:	460c      	mov	r4, r1
 80099b8:	4619      	mov	r1, r3
 80099ba:	463b      	mov	r3, r7
 80099bc:	bfbb      	ittet	lt
 80099be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80099c2:	461f      	movlt	r7, r3
 80099c4:	2300      	movge	r3, #0
 80099c6:	232d      	movlt	r3, #45	@ 0x2d
 80099c8:	700b      	strb	r3, [r1, #0]
 80099ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80099d0:	4691      	mov	r9, r2
 80099d2:	f023 0820 	bic.w	r8, r3, #32
 80099d6:	bfbc      	itt	lt
 80099d8:	4632      	movlt	r2, r6
 80099da:	4616      	movlt	r6, r2
 80099dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099e0:	d005      	beq.n	80099ee <__cvt+0x42>
 80099e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80099e6:	d100      	bne.n	80099ea <__cvt+0x3e>
 80099e8:	3401      	adds	r4, #1
 80099ea:	2102      	movs	r1, #2
 80099ec:	e000      	b.n	80099f0 <__cvt+0x44>
 80099ee:	2103      	movs	r1, #3
 80099f0:	ab03      	add	r3, sp, #12
 80099f2:	9301      	str	r3, [sp, #4]
 80099f4:	ab02      	add	r3, sp, #8
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	ec47 6b10 	vmov	d0, r6, r7
 80099fc:	4653      	mov	r3, sl
 80099fe:	4622      	mov	r2, r4
 8009a00:	f000 fe5a 	bl	800a6b8 <_dtoa_r>
 8009a04:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a08:	4605      	mov	r5, r0
 8009a0a:	d119      	bne.n	8009a40 <__cvt+0x94>
 8009a0c:	f019 0f01 	tst.w	r9, #1
 8009a10:	d00e      	beq.n	8009a30 <__cvt+0x84>
 8009a12:	eb00 0904 	add.w	r9, r0, r4
 8009a16:	2200      	movs	r2, #0
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	4639      	mov	r1, r7
 8009a1e:	f7f7 f85b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a22:	b108      	cbz	r0, 8009a28 <__cvt+0x7c>
 8009a24:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a28:	2230      	movs	r2, #48	@ 0x30
 8009a2a:	9b03      	ldr	r3, [sp, #12]
 8009a2c:	454b      	cmp	r3, r9
 8009a2e:	d31e      	bcc.n	8009a6e <__cvt+0xc2>
 8009a30:	9b03      	ldr	r3, [sp, #12]
 8009a32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a34:	1b5b      	subs	r3, r3, r5
 8009a36:	4628      	mov	r0, r5
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	b004      	add	sp, #16
 8009a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a44:	eb00 0904 	add.w	r9, r0, r4
 8009a48:	d1e5      	bne.n	8009a16 <__cvt+0x6a>
 8009a4a:	7803      	ldrb	r3, [r0, #0]
 8009a4c:	2b30      	cmp	r3, #48	@ 0x30
 8009a4e:	d10a      	bne.n	8009a66 <__cvt+0xba>
 8009a50:	2200      	movs	r2, #0
 8009a52:	2300      	movs	r3, #0
 8009a54:	4630      	mov	r0, r6
 8009a56:	4639      	mov	r1, r7
 8009a58:	f7f7 f83e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a5c:	b918      	cbnz	r0, 8009a66 <__cvt+0xba>
 8009a5e:	f1c4 0401 	rsb	r4, r4, #1
 8009a62:	f8ca 4000 	str.w	r4, [sl]
 8009a66:	f8da 3000 	ldr.w	r3, [sl]
 8009a6a:	4499      	add	r9, r3
 8009a6c:	e7d3      	b.n	8009a16 <__cvt+0x6a>
 8009a6e:	1c59      	adds	r1, r3, #1
 8009a70:	9103      	str	r1, [sp, #12]
 8009a72:	701a      	strb	r2, [r3, #0]
 8009a74:	e7d9      	b.n	8009a2a <__cvt+0x7e>

08009a76 <__exponent>:
 8009a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a78:	2900      	cmp	r1, #0
 8009a7a:	bfba      	itte	lt
 8009a7c:	4249      	neglt	r1, r1
 8009a7e:	232d      	movlt	r3, #45	@ 0x2d
 8009a80:	232b      	movge	r3, #43	@ 0x2b
 8009a82:	2909      	cmp	r1, #9
 8009a84:	7002      	strb	r2, [r0, #0]
 8009a86:	7043      	strb	r3, [r0, #1]
 8009a88:	dd29      	ble.n	8009ade <__exponent+0x68>
 8009a8a:	f10d 0307 	add.w	r3, sp, #7
 8009a8e:	461d      	mov	r5, r3
 8009a90:	270a      	movs	r7, #10
 8009a92:	461a      	mov	r2, r3
 8009a94:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a98:	fb07 1416 	mls	r4, r7, r6, r1
 8009a9c:	3430      	adds	r4, #48	@ 0x30
 8009a9e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	2c63      	cmp	r4, #99	@ 0x63
 8009aa6:	f103 33ff 	add.w	r3, r3, #4294967295
 8009aaa:	4631      	mov	r1, r6
 8009aac:	dcf1      	bgt.n	8009a92 <__exponent+0x1c>
 8009aae:	3130      	adds	r1, #48	@ 0x30
 8009ab0:	1e94      	subs	r4, r2, #2
 8009ab2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ab6:	1c41      	adds	r1, r0, #1
 8009ab8:	4623      	mov	r3, r4
 8009aba:	42ab      	cmp	r3, r5
 8009abc:	d30a      	bcc.n	8009ad4 <__exponent+0x5e>
 8009abe:	f10d 0309 	add.w	r3, sp, #9
 8009ac2:	1a9b      	subs	r3, r3, r2
 8009ac4:	42ac      	cmp	r4, r5
 8009ac6:	bf88      	it	hi
 8009ac8:	2300      	movhi	r3, #0
 8009aca:	3302      	adds	r3, #2
 8009acc:	4403      	add	r3, r0
 8009ace:	1a18      	subs	r0, r3, r0
 8009ad0:	b003      	add	sp, #12
 8009ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ad4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ad8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009adc:	e7ed      	b.n	8009aba <__exponent+0x44>
 8009ade:	2330      	movs	r3, #48	@ 0x30
 8009ae0:	3130      	adds	r1, #48	@ 0x30
 8009ae2:	7083      	strb	r3, [r0, #2]
 8009ae4:	70c1      	strb	r1, [r0, #3]
 8009ae6:	1d03      	adds	r3, r0, #4
 8009ae8:	e7f1      	b.n	8009ace <__exponent+0x58>
	...

08009aec <_printf_float>:
 8009aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af0:	b08d      	sub	sp, #52	@ 0x34
 8009af2:	460c      	mov	r4, r1
 8009af4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009af8:	4616      	mov	r6, r2
 8009afa:	461f      	mov	r7, r3
 8009afc:	4605      	mov	r5, r0
 8009afe:	f000 fcdb 	bl	800a4b8 <_localeconv_r>
 8009b02:	6803      	ldr	r3, [r0, #0]
 8009b04:	9304      	str	r3, [sp, #16]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7f6 fbba 	bl	8000280 <strlen>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b10:	f8d8 3000 	ldr.w	r3, [r8]
 8009b14:	9005      	str	r0, [sp, #20]
 8009b16:	3307      	adds	r3, #7
 8009b18:	f023 0307 	bic.w	r3, r3, #7
 8009b1c:	f103 0208 	add.w	r2, r3, #8
 8009b20:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b24:	f8d4 b000 	ldr.w	fp, [r4]
 8009b28:	f8c8 2000 	str.w	r2, [r8]
 8009b2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b30:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b34:	9307      	str	r3, [sp, #28]
 8009b36:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b42:	4b9c      	ldr	r3, [pc, #624]	@ (8009db4 <_printf_float+0x2c8>)
 8009b44:	f04f 32ff 	mov.w	r2, #4294967295
 8009b48:	f7f6 fff8 	bl	8000b3c <__aeabi_dcmpun>
 8009b4c:	bb70      	cbnz	r0, 8009bac <_printf_float+0xc0>
 8009b4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b52:	4b98      	ldr	r3, [pc, #608]	@ (8009db4 <_printf_float+0x2c8>)
 8009b54:	f04f 32ff 	mov.w	r2, #4294967295
 8009b58:	f7f6 ffd2 	bl	8000b00 <__aeabi_dcmple>
 8009b5c:	bb30      	cbnz	r0, 8009bac <_printf_float+0xc0>
 8009b5e:	2200      	movs	r2, #0
 8009b60:	2300      	movs	r3, #0
 8009b62:	4640      	mov	r0, r8
 8009b64:	4649      	mov	r1, r9
 8009b66:	f7f6 ffc1 	bl	8000aec <__aeabi_dcmplt>
 8009b6a:	b110      	cbz	r0, 8009b72 <_printf_float+0x86>
 8009b6c:	232d      	movs	r3, #45	@ 0x2d
 8009b6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b72:	4a91      	ldr	r2, [pc, #580]	@ (8009db8 <_printf_float+0x2cc>)
 8009b74:	4b91      	ldr	r3, [pc, #580]	@ (8009dbc <_printf_float+0x2d0>)
 8009b76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009b7a:	bf94      	ite	ls
 8009b7c:	4690      	movls	r8, r2
 8009b7e:	4698      	movhi	r8, r3
 8009b80:	2303      	movs	r3, #3
 8009b82:	6123      	str	r3, [r4, #16]
 8009b84:	f02b 0304 	bic.w	r3, fp, #4
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	f04f 0900 	mov.w	r9, #0
 8009b8e:	9700      	str	r7, [sp, #0]
 8009b90:	4633      	mov	r3, r6
 8009b92:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b94:	4621      	mov	r1, r4
 8009b96:	4628      	mov	r0, r5
 8009b98:	f000 f9d2 	bl	8009f40 <_printf_common>
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	f040 808d 	bne.w	8009cbc <_printf_float+0x1d0>
 8009ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba6:	b00d      	add	sp, #52	@ 0x34
 8009ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bac:	4642      	mov	r2, r8
 8009bae:	464b      	mov	r3, r9
 8009bb0:	4640      	mov	r0, r8
 8009bb2:	4649      	mov	r1, r9
 8009bb4:	f7f6 ffc2 	bl	8000b3c <__aeabi_dcmpun>
 8009bb8:	b140      	cbz	r0, 8009bcc <_printf_float+0xe0>
 8009bba:	464b      	mov	r3, r9
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	bfbc      	itt	lt
 8009bc0:	232d      	movlt	r3, #45	@ 0x2d
 8009bc2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009bc6:	4a7e      	ldr	r2, [pc, #504]	@ (8009dc0 <_printf_float+0x2d4>)
 8009bc8:	4b7e      	ldr	r3, [pc, #504]	@ (8009dc4 <_printf_float+0x2d8>)
 8009bca:	e7d4      	b.n	8009b76 <_printf_float+0x8a>
 8009bcc:	6863      	ldr	r3, [r4, #4]
 8009bce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009bd2:	9206      	str	r2, [sp, #24]
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	d13b      	bne.n	8009c50 <_printf_float+0x164>
 8009bd8:	2306      	movs	r3, #6
 8009bda:	6063      	str	r3, [r4, #4]
 8009bdc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009be0:	2300      	movs	r3, #0
 8009be2:	6022      	str	r2, [r4, #0]
 8009be4:	9303      	str	r3, [sp, #12]
 8009be6:	ab0a      	add	r3, sp, #40	@ 0x28
 8009be8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009bec:	ab09      	add	r3, sp, #36	@ 0x24
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	6861      	ldr	r1, [r4, #4]
 8009bf2:	ec49 8b10 	vmov	d0, r8, r9
 8009bf6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f7ff fed6 	bl	80099ac <__cvt>
 8009c00:	9b06      	ldr	r3, [sp, #24]
 8009c02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c04:	2b47      	cmp	r3, #71	@ 0x47
 8009c06:	4680      	mov	r8, r0
 8009c08:	d129      	bne.n	8009c5e <_printf_float+0x172>
 8009c0a:	1cc8      	adds	r0, r1, #3
 8009c0c:	db02      	blt.n	8009c14 <_printf_float+0x128>
 8009c0e:	6863      	ldr	r3, [r4, #4]
 8009c10:	4299      	cmp	r1, r3
 8009c12:	dd41      	ble.n	8009c98 <_printf_float+0x1ac>
 8009c14:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c18:	fa5f fa8a 	uxtb.w	sl, sl
 8009c1c:	3901      	subs	r1, #1
 8009c1e:	4652      	mov	r2, sl
 8009c20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c24:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c26:	f7ff ff26 	bl	8009a76 <__exponent>
 8009c2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c2c:	1813      	adds	r3, r2, r0
 8009c2e:	2a01      	cmp	r2, #1
 8009c30:	4681      	mov	r9, r0
 8009c32:	6123      	str	r3, [r4, #16]
 8009c34:	dc02      	bgt.n	8009c3c <_printf_float+0x150>
 8009c36:	6822      	ldr	r2, [r4, #0]
 8009c38:	07d2      	lsls	r2, r2, #31
 8009c3a:	d501      	bpl.n	8009c40 <_printf_float+0x154>
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	6123      	str	r3, [r4, #16]
 8009c40:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d0a2      	beq.n	8009b8e <_printf_float+0xa2>
 8009c48:	232d      	movs	r3, #45	@ 0x2d
 8009c4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c4e:	e79e      	b.n	8009b8e <_printf_float+0xa2>
 8009c50:	9a06      	ldr	r2, [sp, #24]
 8009c52:	2a47      	cmp	r2, #71	@ 0x47
 8009c54:	d1c2      	bne.n	8009bdc <_printf_float+0xf0>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1c0      	bne.n	8009bdc <_printf_float+0xf0>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e7bd      	b.n	8009bda <_printf_float+0xee>
 8009c5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c62:	d9db      	bls.n	8009c1c <_printf_float+0x130>
 8009c64:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009c68:	d118      	bne.n	8009c9c <_printf_float+0x1b0>
 8009c6a:	2900      	cmp	r1, #0
 8009c6c:	6863      	ldr	r3, [r4, #4]
 8009c6e:	dd0b      	ble.n	8009c88 <_printf_float+0x19c>
 8009c70:	6121      	str	r1, [r4, #16]
 8009c72:	b913      	cbnz	r3, 8009c7a <_printf_float+0x18e>
 8009c74:	6822      	ldr	r2, [r4, #0]
 8009c76:	07d0      	lsls	r0, r2, #31
 8009c78:	d502      	bpl.n	8009c80 <_printf_float+0x194>
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	440b      	add	r3, r1
 8009c7e:	6123      	str	r3, [r4, #16]
 8009c80:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009c82:	f04f 0900 	mov.w	r9, #0
 8009c86:	e7db      	b.n	8009c40 <_printf_float+0x154>
 8009c88:	b913      	cbnz	r3, 8009c90 <_printf_float+0x1a4>
 8009c8a:	6822      	ldr	r2, [r4, #0]
 8009c8c:	07d2      	lsls	r2, r2, #31
 8009c8e:	d501      	bpl.n	8009c94 <_printf_float+0x1a8>
 8009c90:	3302      	adds	r3, #2
 8009c92:	e7f4      	b.n	8009c7e <_printf_float+0x192>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e7f2      	b.n	8009c7e <_printf_float+0x192>
 8009c98:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c9e:	4299      	cmp	r1, r3
 8009ca0:	db05      	blt.n	8009cae <_printf_float+0x1c2>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	6121      	str	r1, [r4, #16]
 8009ca6:	07d8      	lsls	r0, r3, #31
 8009ca8:	d5ea      	bpl.n	8009c80 <_printf_float+0x194>
 8009caa:	1c4b      	adds	r3, r1, #1
 8009cac:	e7e7      	b.n	8009c7e <_printf_float+0x192>
 8009cae:	2900      	cmp	r1, #0
 8009cb0:	bfd4      	ite	le
 8009cb2:	f1c1 0202 	rsble	r2, r1, #2
 8009cb6:	2201      	movgt	r2, #1
 8009cb8:	4413      	add	r3, r2
 8009cba:	e7e0      	b.n	8009c7e <_printf_float+0x192>
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	055a      	lsls	r2, r3, #21
 8009cc0:	d407      	bmi.n	8009cd2 <_printf_float+0x1e6>
 8009cc2:	6923      	ldr	r3, [r4, #16]
 8009cc4:	4642      	mov	r2, r8
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	4628      	mov	r0, r5
 8009cca:	47b8      	blx	r7
 8009ccc:	3001      	adds	r0, #1
 8009cce:	d12b      	bne.n	8009d28 <_printf_float+0x23c>
 8009cd0:	e767      	b.n	8009ba2 <_printf_float+0xb6>
 8009cd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009cd6:	f240 80dd 	bls.w	8009e94 <_printf_float+0x3a8>
 8009cda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009cde:	2200      	movs	r2, #0
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f7f6 fef9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d033      	beq.n	8009d52 <_printf_float+0x266>
 8009cea:	4a37      	ldr	r2, [pc, #220]	@ (8009dc8 <_printf_float+0x2dc>)
 8009cec:	2301      	movs	r3, #1
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b8      	blx	r7
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	f43f af54 	beq.w	8009ba2 <_printf_float+0xb6>
 8009cfa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009cfe:	4543      	cmp	r3, r8
 8009d00:	db02      	blt.n	8009d08 <_printf_float+0x21c>
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	07d8      	lsls	r0, r3, #31
 8009d06:	d50f      	bpl.n	8009d28 <_printf_float+0x23c>
 8009d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	4628      	mov	r0, r5
 8009d10:	47b8      	blx	r7
 8009d12:	3001      	adds	r0, #1
 8009d14:	f43f af45 	beq.w	8009ba2 <_printf_float+0xb6>
 8009d18:	f04f 0900 	mov.w	r9, #0
 8009d1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d20:	f104 0a1a 	add.w	sl, r4, #26
 8009d24:	45c8      	cmp	r8, r9
 8009d26:	dc09      	bgt.n	8009d3c <_printf_float+0x250>
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	079b      	lsls	r3, r3, #30
 8009d2c:	f100 8103 	bmi.w	8009f36 <_printf_float+0x44a>
 8009d30:	68e0      	ldr	r0, [r4, #12]
 8009d32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d34:	4298      	cmp	r0, r3
 8009d36:	bfb8      	it	lt
 8009d38:	4618      	movlt	r0, r3
 8009d3a:	e734      	b.n	8009ba6 <_printf_float+0xba>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	4652      	mov	r2, sl
 8009d40:	4631      	mov	r1, r6
 8009d42:	4628      	mov	r0, r5
 8009d44:	47b8      	blx	r7
 8009d46:	3001      	adds	r0, #1
 8009d48:	f43f af2b 	beq.w	8009ba2 <_printf_float+0xb6>
 8009d4c:	f109 0901 	add.w	r9, r9, #1
 8009d50:	e7e8      	b.n	8009d24 <_printf_float+0x238>
 8009d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	dc39      	bgt.n	8009dcc <_printf_float+0x2e0>
 8009d58:	4a1b      	ldr	r2, [pc, #108]	@ (8009dc8 <_printf_float+0x2dc>)
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	4631      	mov	r1, r6
 8009d5e:	4628      	mov	r0, r5
 8009d60:	47b8      	blx	r7
 8009d62:	3001      	adds	r0, #1
 8009d64:	f43f af1d 	beq.w	8009ba2 <_printf_float+0xb6>
 8009d68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009d6c:	ea59 0303 	orrs.w	r3, r9, r3
 8009d70:	d102      	bne.n	8009d78 <_printf_float+0x28c>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	07d9      	lsls	r1, r3, #31
 8009d76:	d5d7      	bpl.n	8009d28 <_printf_float+0x23c>
 8009d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	4628      	mov	r0, r5
 8009d80:	47b8      	blx	r7
 8009d82:	3001      	adds	r0, #1
 8009d84:	f43f af0d 	beq.w	8009ba2 <_printf_float+0xb6>
 8009d88:	f04f 0a00 	mov.w	sl, #0
 8009d8c:	f104 0b1a 	add.w	fp, r4, #26
 8009d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d92:	425b      	negs	r3, r3
 8009d94:	4553      	cmp	r3, sl
 8009d96:	dc01      	bgt.n	8009d9c <_printf_float+0x2b0>
 8009d98:	464b      	mov	r3, r9
 8009d9a:	e793      	b.n	8009cc4 <_printf_float+0x1d8>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	465a      	mov	r2, fp
 8009da0:	4631      	mov	r1, r6
 8009da2:	4628      	mov	r0, r5
 8009da4:	47b8      	blx	r7
 8009da6:	3001      	adds	r0, #1
 8009da8:	f43f aefb 	beq.w	8009ba2 <_printf_float+0xb6>
 8009dac:	f10a 0a01 	add.w	sl, sl, #1
 8009db0:	e7ee      	b.n	8009d90 <_printf_float+0x2a4>
 8009db2:	bf00      	nop
 8009db4:	7fefffff 	.word	0x7fefffff
 8009db8:	0800c730 	.word	0x0800c730
 8009dbc:	0800c734 	.word	0x0800c734
 8009dc0:	0800c738 	.word	0x0800c738
 8009dc4:	0800c73c 	.word	0x0800c73c
 8009dc8:	0800c740 	.word	0x0800c740
 8009dcc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009dd2:	4553      	cmp	r3, sl
 8009dd4:	bfa8      	it	ge
 8009dd6:	4653      	movge	r3, sl
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	4699      	mov	r9, r3
 8009ddc:	dc36      	bgt.n	8009e4c <_printf_float+0x360>
 8009dde:	f04f 0b00 	mov.w	fp, #0
 8009de2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009de6:	f104 021a 	add.w	r2, r4, #26
 8009dea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dec:	9306      	str	r3, [sp, #24]
 8009dee:	eba3 0309 	sub.w	r3, r3, r9
 8009df2:	455b      	cmp	r3, fp
 8009df4:	dc31      	bgt.n	8009e5a <_printf_float+0x36e>
 8009df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df8:	459a      	cmp	sl, r3
 8009dfa:	dc3a      	bgt.n	8009e72 <_printf_float+0x386>
 8009dfc:	6823      	ldr	r3, [r4, #0]
 8009dfe:	07da      	lsls	r2, r3, #31
 8009e00:	d437      	bmi.n	8009e72 <_printf_float+0x386>
 8009e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e04:	ebaa 0903 	sub.w	r9, sl, r3
 8009e08:	9b06      	ldr	r3, [sp, #24]
 8009e0a:	ebaa 0303 	sub.w	r3, sl, r3
 8009e0e:	4599      	cmp	r9, r3
 8009e10:	bfa8      	it	ge
 8009e12:	4699      	movge	r9, r3
 8009e14:	f1b9 0f00 	cmp.w	r9, #0
 8009e18:	dc33      	bgt.n	8009e82 <_printf_float+0x396>
 8009e1a:	f04f 0800 	mov.w	r8, #0
 8009e1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e22:	f104 0b1a 	add.w	fp, r4, #26
 8009e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e28:	ebaa 0303 	sub.w	r3, sl, r3
 8009e2c:	eba3 0309 	sub.w	r3, r3, r9
 8009e30:	4543      	cmp	r3, r8
 8009e32:	f77f af79 	ble.w	8009d28 <_printf_float+0x23c>
 8009e36:	2301      	movs	r3, #1
 8009e38:	465a      	mov	r2, fp
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	47b8      	blx	r7
 8009e40:	3001      	adds	r0, #1
 8009e42:	f43f aeae 	beq.w	8009ba2 <_printf_float+0xb6>
 8009e46:	f108 0801 	add.w	r8, r8, #1
 8009e4a:	e7ec      	b.n	8009e26 <_printf_float+0x33a>
 8009e4c:	4642      	mov	r2, r8
 8009e4e:	4631      	mov	r1, r6
 8009e50:	4628      	mov	r0, r5
 8009e52:	47b8      	blx	r7
 8009e54:	3001      	adds	r0, #1
 8009e56:	d1c2      	bne.n	8009dde <_printf_float+0x2f2>
 8009e58:	e6a3      	b.n	8009ba2 <_printf_float+0xb6>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	4631      	mov	r1, r6
 8009e5e:	4628      	mov	r0, r5
 8009e60:	9206      	str	r2, [sp, #24]
 8009e62:	47b8      	blx	r7
 8009e64:	3001      	adds	r0, #1
 8009e66:	f43f ae9c 	beq.w	8009ba2 <_printf_float+0xb6>
 8009e6a:	9a06      	ldr	r2, [sp, #24]
 8009e6c:	f10b 0b01 	add.w	fp, fp, #1
 8009e70:	e7bb      	b.n	8009dea <_printf_float+0x2fe>
 8009e72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e76:	4631      	mov	r1, r6
 8009e78:	4628      	mov	r0, r5
 8009e7a:	47b8      	blx	r7
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	d1c0      	bne.n	8009e02 <_printf_float+0x316>
 8009e80:	e68f      	b.n	8009ba2 <_printf_float+0xb6>
 8009e82:	9a06      	ldr	r2, [sp, #24]
 8009e84:	464b      	mov	r3, r9
 8009e86:	4442      	add	r2, r8
 8009e88:	4631      	mov	r1, r6
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	47b8      	blx	r7
 8009e8e:	3001      	adds	r0, #1
 8009e90:	d1c3      	bne.n	8009e1a <_printf_float+0x32e>
 8009e92:	e686      	b.n	8009ba2 <_printf_float+0xb6>
 8009e94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e98:	f1ba 0f01 	cmp.w	sl, #1
 8009e9c:	dc01      	bgt.n	8009ea2 <_printf_float+0x3b6>
 8009e9e:	07db      	lsls	r3, r3, #31
 8009ea0:	d536      	bpl.n	8009f10 <_printf_float+0x424>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	4642      	mov	r2, r8
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	47b8      	blx	r7
 8009eac:	3001      	adds	r0, #1
 8009eae:	f43f ae78 	beq.w	8009ba2 <_printf_float+0xb6>
 8009eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4628      	mov	r0, r5
 8009eba:	47b8      	blx	r7
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	f43f ae70 	beq.w	8009ba2 <_printf_float+0xb6>
 8009ec2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ece:	f7f6 fe03 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ed2:	b9c0      	cbnz	r0, 8009f06 <_printf_float+0x41a>
 8009ed4:	4653      	mov	r3, sl
 8009ed6:	f108 0201 	add.w	r2, r8, #1
 8009eda:	4631      	mov	r1, r6
 8009edc:	4628      	mov	r0, r5
 8009ede:	47b8      	blx	r7
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	d10c      	bne.n	8009efe <_printf_float+0x412>
 8009ee4:	e65d      	b.n	8009ba2 <_printf_float+0xb6>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	465a      	mov	r2, fp
 8009eea:	4631      	mov	r1, r6
 8009eec:	4628      	mov	r0, r5
 8009eee:	47b8      	blx	r7
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	f43f ae56 	beq.w	8009ba2 <_printf_float+0xb6>
 8009ef6:	f108 0801 	add.w	r8, r8, #1
 8009efa:	45d0      	cmp	r8, sl
 8009efc:	dbf3      	blt.n	8009ee6 <_printf_float+0x3fa>
 8009efe:	464b      	mov	r3, r9
 8009f00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f04:	e6df      	b.n	8009cc6 <_printf_float+0x1da>
 8009f06:	f04f 0800 	mov.w	r8, #0
 8009f0a:	f104 0b1a 	add.w	fp, r4, #26
 8009f0e:	e7f4      	b.n	8009efa <_printf_float+0x40e>
 8009f10:	2301      	movs	r3, #1
 8009f12:	4642      	mov	r2, r8
 8009f14:	e7e1      	b.n	8009eda <_printf_float+0x3ee>
 8009f16:	2301      	movs	r3, #1
 8009f18:	464a      	mov	r2, r9
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	47b8      	blx	r7
 8009f20:	3001      	adds	r0, #1
 8009f22:	f43f ae3e 	beq.w	8009ba2 <_printf_float+0xb6>
 8009f26:	f108 0801 	add.w	r8, r8, #1
 8009f2a:	68e3      	ldr	r3, [r4, #12]
 8009f2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f2e:	1a5b      	subs	r3, r3, r1
 8009f30:	4543      	cmp	r3, r8
 8009f32:	dcf0      	bgt.n	8009f16 <_printf_float+0x42a>
 8009f34:	e6fc      	b.n	8009d30 <_printf_float+0x244>
 8009f36:	f04f 0800 	mov.w	r8, #0
 8009f3a:	f104 0919 	add.w	r9, r4, #25
 8009f3e:	e7f4      	b.n	8009f2a <_printf_float+0x43e>

08009f40 <_printf_common>:
 8009f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f44:	4616      	mov	r6, r2
 8009f46:	4698      	mov	r8, r3
 8009f48:	688a      	ldr	r2, [r1, #8]
 8009f4a:	690b      	ldr	r3, [r1, #16]
 8009f4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f50:	4293      	cmp	r3, r2
 8009f52:	bfb8      	it	lt
 8009f54:	4613      	movlt	r3, r2
 8009f56:	6033      	str	r3, [r6, #0]
 8009f58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	460c      	mov	r4, r1
 8009f60:	b10a      	cbz	r2, 8009f66 <_printf_common+0x26>
 8009f62:	3301      	adds	r3, #1
 8009f64:	6033      	str	r3, [r6, #0]
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	0699      	lsls	r1, r3, #26
 8009f6a:	bf42      	ittt	mi
 8009f6c:	6833      	ldrmi	r3, [r6, #0]
 8009f6e:	3302      	addmi	r3, #2
 8009f70:	6033      	strmi	r3, [r6, #0]
 8009f72:	6825      	ldr	r5, [r4, #0]
 8009f74:	f015 0506 	ands.w	r5, r5, #6
 8009f78:	d106      	bne.n	8009f88 <_printf_common+0x48>
 8009f7a:	f104 0a19 	add.w	sl, r4, #25
 8009f7e:	68e3      	ldr	r3, [r4, #12]
 8009f80:	6832      	ldr	r2, [r6, #0]
 8009f82:	1a9b      	subs	r3, r3, r2
 8009f84:	42ab      	cmp	r3, r5
 8009f86:	dc26      	bgt.n	8009fd6 <_printf_common+0x96>
 8009f88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f8c:	6822      	ldr	r2, [r4, #0]
 8009f8e:	3b00      	subs	r3, #0
 8009f90:	bf18      	it	ne
 8009f92:	2301      	movne	r3, #1
 8009f94:	0692      	lsls	r2, r2, #26
 8009f96:	d42b      	bmi.n	8009ff0 <_printf_common+0xb0>
 8009f98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f9c:	4641      	mov	r1, r8
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	47c8      	blx	r9
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	d01e      	beq.n	8009fe4 <_printf_common+0xa4>
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	6922      	ldr	r2, [r4, #16]
 8009faa:	f003 0306 	and.w	r3, r3, #6
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	bf02      	ittt	eq
 8009fb2:	68e5      	ldreq	r5, [r4, #12]
 8009fb4:	6833      	ldreq	r3, [r6, #0]
 8009fb6:	1aed      	subeq	r5, r5, r3
 8009fb8:	68a3      	ldr	r3, [r4, #8]
 8009fba:	bf0c      	ite	eq
 8009fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fc0:	2500      	movne	r5, #0
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	bfc4      	itt	gt
 8009fc6:	1a9b      	subgt	r3, r3, r2
 8009fc8:	18ed      	addgt	r5, r5, r3
 8009fca:	2600      	movs	r6, #0
 8009fcc:	341a      	adds	r4, #26
 8009fce:	42b5      	cmp	r5, r6
 8009fd0:	d11a      	bne.n	800a008 <_printf_common+0xc8>
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	e008      	b.n	8009fe8 <_printf_common+0xa8>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	4652      	mov	r2, sl
 8009fda:	4641      	mov	r1, r8
 8009fdc:	4638      	mov	r0, r7
 8009fde:	47c8      	blx	r9
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	d103      	bne.n	8009fec <_printf_common+0xac>
 8009fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fec:	3501      	adds	r5, #1
 8009fee:	e7c6      	b.n	8009f7e <_printf_common+0x3e>
 8009ff0:	18e1      	adds	r1, r4, r3
 8009ff2:	1c5a      	adds	r2, r3, #1
 8009ff4:	2030      	movs	r0, #48	@ 0x30
 8009ff6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ffa:	4422      	add	r2, r4
 8009ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a000:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a004:	3302      	adds	r3, #2
 800a006:	e7c7      	b.n	8009f98 <_printf_common+0x58>
 800a008:	2301      	movs	r3, #1
 800a00a:	4622      	mov	r2, r4
 800a00c:	4641      	mov	r1, r8
 800a00e:	4638      	mov	r0, r7
 800a010:	47c8      	blx	r9
 800a012:	3001      	adds	r0, #1
 800a014:	d0e6      	beq.n	8009fe4 <_printf_common+0xa4>
 800a016:	3601      	adds	r6, #1
 800a018:	e7d9      	b.n	8009fce <_printf_common+0x8e>
	...

0800a01c <_printf_i>:
 800a01c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a020:	7e0f      	ldrb	r7, [r1, #24]
 800a022:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a024:	2f78      	cmp	r7, #120	@ 0x78
 800a026:	4691      	mov	r9, r2
 800a028:	4680      	mov	r8, r0
 800a02a:	460c      	mov	r4, r1
 800a02c:	469a      	mov	sl, r3
 800a02e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a032:	d807      	bhi.n	800a044 <_printf_i+0x28>
 800a034:	2f62      	cmp	r7, #98	@ 0x62
 800a036:	d80a      	bhi.n	800a04e <_printf_i+0x32>
 800a038:	2f00      	cmp	r7, #0
 800a03a:	f000 80d2 	beq.w	800a1e2 <_printf_i+0x1c6>
 800a03e:	2f58      	cmp	r7, #88	@ 0x58
 800a040:	f000 80b9 	beq.w	800a1b6 <_printf_i+0x19a>
 800a044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a048:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a04c:	e03a      	b.n	800a0c4 <_printf_i+0xa8>
 800a04e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a052:	2b15      	cmp	r3, #21
 800a054:	d8f6      	bhi.n	800a044 <_printf_i+0x28>
 800a056:	a101      	add	r1, pc, #4	@ (adr r1, 800a05c <_printf_i+0x40>)
 800a058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a05c:	0800a0b5 	.word	0x0800a0b5
 800a060:	0800a0c9 	.word	0x0800a0c9
 800a064:	0800a045 	.word	0x0800a045
 800a068:	0800a045 	.word	0x0800a045
 800a06c:	0800a045 	.word	0x0800a045
 800a070:	0800a045 	.word	0x0800a045
 800a074:	0800a0c9 	.word	0x0800a0c9
 800a078:	0800a045 	.word	0x0800a045
 800a07c:	0800a045 	.word	0x0800a045
 800a080:	0800a045 	.word	0x0800a045
 800a084:	0800a045 	.word	0x0800a045
 800a088:	0800a1c9 	.word	0x0800a1c9
 800a08c:	0800a0f3 	.word	0x0800a0f3
 800a090:	0800a183 	.word	0x0800a183
 800a094:	0800a045 	.word	0x0800a045
 800a098:	0800a045 	.word	0x0800a045
 800a09c:	0800a1eb 	.word	0x0800a1eb
 800a0a0:	0800a045 	.word	0x0800a045
 800a0a4:	0800a0f3 	.word	0x0800a0f3
 800a0a8:	0800a045 	.word	0x0800a045
 800a0ac:	0800a045 	.word	0x0800a045
 800a0b0:	0800a18b 	.word	0x0800a18b
 800a0b4:	6833      	ldr	r3, [r6, #0]
 800a0b6:	1d1a      	adds	r2, r3, #4
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	6032      	str	r2, [r6, #0]
 800a0bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e09d      	b.n	800a204 <_printf_i+0x1e8>
 800a0c8:	6833      	ldr	r3, [r6, #0]
 800a0ca:	6820      	ldr	r0, [r4, #0]
 800a0cc:	1d19      	adds	r1, r3, #4
 800a0ce:	6031      	str	r1, [r6, #0]
 800a0d0:	0606      	lsls	r6, r0, #24
 800a0d2:	d501      	bpl.n	800a0d8 <_printf_i+0xbc>
 800a0d4:	681d      	ldr	r5, [r3, #0]
 800a0d6:	e003      	b.n	800a0e0 <_printf_i+0xc4>
 800a0d8:	0645      	lsls	r5, r0, #25
 800a0da:	d5fb      	bpl.n	800a0d4 <_printf_i+0xb8>
 800a0dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0e0:	2d00      	cmp	r5, #0
 800a0e2:	da03      	bge.n	800a0ec <_printf_i+0xd0>
 800a0e4:	232d      	movs	r3, #45	@ 0x2d
 800a0e6:	426d      	negs	r5, r5
 800a0e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0ec:	4859      	ldr	r0, [pc, #356]	@ (800a254 <_printf_i+0x238>)
 800a0ee:	230a      	movs	r3, #10
 800a0f0:	e011      	b.n	800a116 <_printf_i+0xfa>
 800a0f2:	6821      	ldr	r1, [r4, #0]
 800a0f4:	6833      	ldr	r3, [r6, #0]
 800a0f6:	0608      	lsls	r0, r1, #24
 800a0f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0fc:	d402      	bmi.n	800a104 <_printf_i+0xe8>
 800a0fe:	0649      	lsls	r1, r1, #25
 800a100:	bf48      	it	mi
 800a102:	b2ad      	uxthmi	r5, r5
 800a104:	2f6f      	cmp	r7, #111	@ 0x6f
 800a106:	4853      	ldr	r0, [pc, #332]	@ (800a254 <_printf_i+0x238>)
 800a108:	6033      	str	r3, [r6, #0]
 800a10a:	bf14      	ite	ne
 800a10c:	230a      	movne	r3, #10
 800a10e:	2308      	moveq	r3, #8
 800a110:	2100      	movs	r1, #0
 800a112:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a116:	6866      	ldr	r6, [r4, #4]
 800a118:	60a6      	str	r6, [r4, #8]
 800a11a:	2e00      	cmp	r6, #0
 800a11c:	bfa2      	ittt	ge
 800a11e:	6821      	ldrge	r1, [r4, #0]
 800a120:	f021 0104 	bicge.w	r1, r1, #4
 800a124:	6021      	strge	r1, [r4, #0]
 800a126:	b90d      	cbnz	r5, 800a12c <_printf_i+0x110>
 800a128:	2e00      	cmp	r6, #0
 800a12a:	d04b      	beq.n	800a1c4 <_printf_i+0x1a8>
 800a12c:	4616      	mov	r6, r2
 800a12e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a132:	fb03 5711 	mls	r7, r3, r1, r5
 800a136:	5dc7      	ldrb	r7, [r0, r7]
 800a138:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a13c:	462f      	mov	r7, r5
 800a13e:	42bb      	cmp	r3, r7
 800a140:	460d      	mov	r5, r1
 800a142:	d9f4      	bls.n	800a12e <_printf_i+0x112>
 800a144:	2b08      	cmp	r3, #8
 800a146:	d10b      	bne.n	800a160 <_printf_i+0x144>
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	07df      	lsls	r7, r3, #31
 800a14c:	d508      	bpl.n	800a160 <_printf_i+0x144>
 800a14e:	6923      	ldr	r3, [r4, #16]
 800a150:	6861      	ldr	r1, [r4, #4]
 800a152:	4299      	cmp	r1, r3
 800a154:	bfde      	ittt	le
 800a156:	2330      	movle	r3, #48	@ 0x30
 800a158:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a15c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a160:	1b92      	subs	r2, r2, r6
 800a162:	6122      	str	r2, [r4, #16]
 800a164:	f8cd a000 	str.w	sl, [sp]
 800a168:	464b      	mov	r3, r9
 800a16a:	aa03      	add	r2, sp, #12
 800a16c:	4621      	mov	r1, r4
 800a16e:	4640      	mov	r0, r8
 800a170:	f7ff fee6 	bl	8009f40 <_printf_common>
 800a174:	3001      	adds	r0, #1
 800a176:	d14a      	bne.n	800a20e <_printf_i+0x1f2>
 800a178:	f04f 30ff 	mov.w	r0, #4294967295
 800a17c:	b004      	add	sp, #16
 800a17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	f043 0320 	orr.w	r3, r3, #32
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	4833      	ldr	r0, [pc, #204]	@ (800a258 <_printf_i+0x23c>)
 800a18c:	2778      	movs	r7, #120	@ 0x78
 800a18e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	6831      	ldr	r1, [r6, #0]
 800a196:	061f      	lsls	r7, r3, #24
 800a198:	f851 5b04 	ldr.w	r5, [r1], #4
 800a19c:	d402      	bmi.n	800a1a4 <_printf_i+0x188>
 800a19e:	065f      	lsls	r7, r3, #25
 800a1a0:	bf48      	it	mi
 800a1a2:	b2ad      	uxthmi	r5, r5
 800a1a4:	6031      	str	r1, [r6, #0]
 800a1a6:	07d9      	lsls	r1, r3, #31
 800a1a8:	bf44      	itt	mi
 800a1aa:	f043 0320 	orrmi.w	r3, r3, #32
 800a1ae:	6023      	strmi	r3, [r4, #0]
 800a1b0:	b11d      	cbz	r5, 800a1ba <_printf_i+0x19e>
 800a1b2:	2310      	movs	r3, #16
 800a1b4:	e7ac      	b.n	800a110 <_printf_i+0xf4>
 800a1b6:	4827      	ldr	r0, [pc, #156]	@ (800a254 <_printf_i+0x238>)
 800a1b8:	e7e9      	b.n	800a18e <_printf_i+0x172>
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	f023 0320 	bic.w	r3, r3, #32
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	e7f6      	b.n	800a1b2 <_printf_i+0x196>
 800a1c4:	4616      	mov	r6, r2
 800a1c6:	e7bd      	b.n	800a144 <_printf_i+0x128>
 800a1c8:	6833      	ldr	r3, [r6, #0]
 800a1ca:	6825      	ldr	r5, [r4, #0]
 800a1cc:	6961      	ldr	r1, [r4, #20]
 800a1ce:	1d18      	adds	r0, r3, #4
 800a1d0:	6030      	str	r0, [r6, #0]
 800a1d2:	062e      	lsls	r6, r5, #24
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	d501      	bpl.n	800a1dc <_printf_i+0x1c0>
 800a1d8:	6019      	str	r1, [r3, #0]
 800a1da:	e002      	b.n	800a1e2 <_printf_i+0x1c6>
 800a1dc:	0668      	lsls	r0, r5, #25
 800a1de:	d5fb      	bpl.n	800a1d8 <_printf_i+0x1bc>
 800a1e0:	8019      	strh	r1, [r3, #0]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	6123      	str	r3, [r4, #16]
 800a1e6:	4616      	mov	r6, r2
 800a1e8:	e7bc      	b.n	800a164 <_printf_i+0x148>
 800a1ea:	6833      	ldr	r3, [r6, #0]
 800a1ec:	1d1a      	adds	r2, r3, #4
 800a1ee:	6032      	str	r2, [r6, #0]
 800a1f0:	681e      	ldr	r6, [r3, #0]
 800a1f2:	6862      	ldr	r2, [r4, #4]
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f7f5 fff2 	bl	80001e0 <memchr>
 800a1fc:	b108      	cbz	r0, 800a202 <_printf_i+0x1e6>
 800a1fe:	1b80      	subs	r0, r0, r6
 800a200:	6060      	str	r0, [r4, #4]
 800a202:	6863      	ldr	r3, [r4, #4]
 800a204:	6123      	str	r3, [r4, #16]
 800a206:	2300      	movs	r3, #0
 800a208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a20c:	e7aa      	b.n	800a164 <_printf_i+0x148>
 800a20e:	6923      	ldr	r3, [r4, #16]
 800a210:	4632      	mov	r2, r6
 800a212:	4649      	mov	r1, r9
 800a214:	4640      	mov	r0, r8
 800a216:	47d0      	blx	sl
 800a218:	3001      	adds	r0, #1
 800a21a:	d0ad      	beq.n	800a178 <_printf_i+0x15c>
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	079b      	lsls	r3, r3, #30
 800a220:	d413      	bmi.n	800a24a <_printf_i+0x22e>
 800a222:	68e0      	ldr	r0, [r4, #12]
 800a224:	9b03      	ldr	r3, [sp, #12]
 800a226:	4298      	cmp	r0, r3
 800a228:	bfb8      	it	lt
 800a22a:	4618      	movlt	r0, r3
 800a22c:	e7a6      	b.n	800a17c <_printf_i+0x160>
 800a22e:	2301      	movs	r3, #1
 800a230:	4632      	mov	r2, r6
 800a232:	4649      	mov	r1, r9
 800a234:	4640      	mov	r0, r8
 800a236:	47d0      	blx	sl
 800a238:	3001      	adds	r0, #1
 800a23a:	d09d      	beq.n	800a178 <_printf_i+0x15c>
 800a23c:	3501      	adds	r5, #1
 800a23e:	68e3      	ldr	r3, [r4, #12]
 800a240:	9903      	ldr	r1, [sp, #12]
 800a242:	1a5b      	subs	r3, r3, r1
 800a244:	42ab      	cmp	r3, r5
 800a246:	dcf2      	bgt.n	800a22e <_printf_i+0x212>
 800a248:	e7eb      	b.n	800a222 <_printf_i+0x206>
 800a24a:	2500      	movs	r5, #0
 800a24c:	f104 0619 	add.w	r6, r4, #25
 800a250:	e7f5      	b.n	800a23e <_printf_i+0x222>
 800a252:	bf00      	nop
 800a254:	0800c742 	.word	0x0800c742
 800a258:	0800c753 	.word	0x0800c753

0800a25c <std>:
 800a25c:	2300      	movs	r3, #0
 800a25e:	b510      	push	{r4, lr}
 800a260:	4604      	mov	r4, r0
 800a262:	e9c0 3300 	strd	r3, r3, [r0]
 800a266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a26a:	6083      	str	r3, [r0, #8]
 800a26c:	8181      	strh	r1, [r0, #12]
 800a26e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a270:	81c2      	strh	r2, [r0, #14]
 800a272:	6183      	str	r3, [r0, #24]
 800a274:	4619      	mov	r1, r3
 800a276:	2208      	movs	r2, #8
 800a278:	305c      	adds	r0, #92	@ 0x5c
 800a27a:	f000 f914 	bl	800a4a6 <memset>
 800a27e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b4 <std+0x58>)
 800a280:	6263      	str	r3, [r4, #36]	@ 0x24
 800a282:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b8 <std+0x5c>)
 800a284:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a286:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <std+0x60>)
 800a288:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a28a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c0 <std+0x64>)
 800a28c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a28e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c4 <std+0x68>)
 800a290:	6224      	str	r4, [r4, #32]
 800a292:	429c      	cmp	r4, r3
 800a294:	d006      	beq.n	800a2a4 <std+0x48>
 800a296:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a29a:	4294      	cmp	r4, r2
 800a29c:	d002      	beq.n	800a2a4 <std+0x48>
 800a29e:	33d0      	adds	r3, #208	@ 0xd0
 800a2a0:	429c      	cmp	r4, r3
 800a2a2:	d105      	bne.n	800a2b0 <std+0x54>
 800a2a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2ac:	f000 b978 	b.w	800a5a0 <__retarget_lock_init_recursive>
 800a2b0:	bd10      	pop	{r4, pc}
 800a2b2:	bf00      	nop
 800a2b4:	0800a421 	.word	0x0800a421
 800a2b8:	0800a443 	.word	0x0800a443
 800a2bc:	0800a47b 	.word	0x0800a47b
 800a2c0:	0800a49f 	.word	0x0800a49f
 800a2c4:	200007a8 	.word	0x200007a8

0800a2c8 <stdio_exit_handler>:
 800a2c8:	4a02      	ldr	r2, [pc, #8]	@ (800a2d4 <stdio_exit_handler+0xc>)
 800a2ca:	4903      	ldr	r1, [pc, #12]	@ (800a2d8 <stdio_exit_handler+0x10>)
 800a2cc:	4803      	ldr	r0, [pc, #12]	@ (800a2dc <stdio_exit_handler+0x14>)
 800a2ce:	f000 b869 	b.w	800a3a4 <_fwalk_sglue>
 800a2d2:	bf00      	nop
 800a2d4:	2000000c 	.word	0x2000000c
 800a2d8:	0800befd 	.word	0x0800befd
 800a2dc:	2000001c 	.word	0x2000001c

0800a2e0 <cleanup_stdio>:
 800a2e0:	6841      	ldr	r1, [r0, #4]
 800a2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a314 <cleanup_stdio+0x34>)
 800a2e4:	4299      	cmp	r1, r3
 800a2e6:	b510      	push	{r4, lr}
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	d001      	beq.n	800a2f0 <cleanup_stdio+0x10>
 800a2ec:	f001 fe06 	bl	800befc <_fflush_r>
 800a2f0:	68a1      	ldr	r1, [r4, #8]
 800a2f2:	4b09      	ldr	r3, [pc, #36]	@ (800a318 <cleanup_stdio+0x38>)
 800a2f4:	4299      	cmp	r1, r3
 800a2f6:	d002      	beq.n	800a2fe <cleanup_stdio+0x1e>
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f001 fdff 	bl	800befc <_fflush_r>
 800a2fe:	68e1      	ldr	r1, [r4, #12]
 800a300:	4b06      	ldr	r3, [pc, #24]	@ (800a31c <cleanup_stdio+0x3c>)
 800a302:	4299      	cmp	r1, r3
 800a304:	d004      	beq.n	800a310 <cleanup_stdio+0x30>
 800a306:	4620      	mov	r0, r4
 800a308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a30c:	f001 bdf6 	b.w	800befc <_fflush_r>
 800a310:	bd10      	pop	{r4, pc}
 800a312:	bf00      	nop
 800a314:	200007a8 	.word	0x200007a8
 800a318:	20000810 	.word	0x20000810
 800a31c:	20000878 	.word	0x20000878

0800a320 <global_stdio_init.part.0>:
 800a320:	b510      	push	{r4, lr}
 800a322:	4b0b      	ldr	r3, [pc, #44]	@ (800a350 <global_stdio_init.part.0+0x30>)
 800a324:	4c0b      	ldr	r4, [pc, #44]	@ (800a354 <global_stdio_init.part.0+0x34>)
 800a326:	4a0c      	ldr	r2, [pc, #48]	@ (800a358 <global_stdio_init.part.0+0x38>)
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	4620      	mov	r0, r4
 800a32c:	2200      	movs	r2, #0
 800a32e:	2104      	movs	r1, #4
 800a330:	f7ff ff94 	bl	800a25c <std>
 800a334:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a338:	2201      	movs	r2, #1
 800a33a:	2109      	movs	r1, #9
 800a33c:	f7ff ff8e 	bl	800a25c <std>
 800a340:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a344:	2202      	movs	r2, #2
 800a346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a34a:	2112      	movs	r1, #18
 800a34c:	f7ff bf86 	b.w	800a25c <std>
 800a350:	200008e0 	.word	0x200008e0
 800a354:	200007a8 	.word	0x200007a8
 800a358:	0800a2c9 	.word	0x0800a2c9

0800a35c <__sfp_lock_acquire>:
 800a35c:	4801      	ldr	r0, [pc, #4]	@ (800a364 <__sfp_lock_acquire+0x8>)
 800a35e:	f000 b920 	b.w	800a5a2 <__retarget_lock_acquire_recursive>
 800a362:	bf00      	nop
 800a364:	200008e9 	.word	0x200008e9

0800a368 <__sfp_lock_release>:
 800a368:	4801      	ldr	r0, [pc, #4]	@ (800a370 <__sfp_lock_release+0x8>)
 800a36a:	f000 b91b 	b.w	800a5a4 <__retarget_lock_release_recursive>
 800a36e:	bf00      	nop
 800a370:	200008e9 	.word	0x200008e9

0800a374 <__sinit>:
 800a374:	b510      	push	{r4, lr}
 800a376:	4604      	mov	r4, r0
 800a378:	f7ff fff0 	bl	800a35c <__sfp_lock_acquire>
 800a37c:	6a23      	ldr	r3, [r4, #32]
 800a37e:	b11b      	cbz	r3, 800a388 <__sinit+0x14>
 800a380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a384:	f7ff bff0 	b.w	800a368 <__sfp_lock_release>
 800a388:	4b04      	ldr	r3, [pc, #16]	@ (800a39c <__sinit+0x28>)
 800a38a:	6223      	str	r3, [r4, #32]
 800a38c:	4b04      	ldr	r3, [pc, #16]	@ (800a3a0 <__sinit+0x2c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1f5      	bne.n	800a380 <__sinit+0xc>
 800a394:	f7ff ffc4 	bl	800a320 <global_stdio_init.part.0>
 800a398:	e7f2      	b.n	800a380 <__sinit+0xc>
 800a39a:	bf00      	nop
 800a39c:	0800a2e1 	.word	0x0800a2e1
 800a3a0:	200008e0 	.word	0x200008e0

0800a3a4 <_fwalk_sglue>:
 800a3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a8:	4607      	mov	r7, r0
 800a3aa:	4688      	mov	r8, r1
 800a3ac:	4614      	mov	r4, r2
 800a3ae:	2600      	movs	r6, #0
 800a3b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3b4:	f1b9 0901 	subs.w	r9, r9, #1
 800a3b8:	d505      	bpl.n	800a3c6 <_fwalk_sglue+0x22>
 800a3ba:	6824      	ldr	r4, [r4, #0]
 800a3bc:	2c00      	cmp	r4, #0
 800a3be:	d1f7      	bne.n	800a3b0 <_fwalk_sglue+0xc>
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3c6:	89ab      	ldrh	r3, [r5, #12]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d907      	bls.n	800a3dc <_fwalk_sglue+0x38>
 800a3cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	d003      	beq.n	800a3dc <_fwalk_sglue+0x38>
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	47c0      	blx	r8
 800a3da:	4306      	orrs	r6, r0
 800a3dc:	3568      	adds	r5, #104	@ 0x68
 800a3de:	e7e9      	b.n	800a3b4 <_fwalk_sglue+0x10>

0800a3e0 <siprintf>:
 800a3e0:	b40e      	push	{r1, r2, r3}
 800a3e2:	b500      	push	{lr}
 800a3e4:	b09c      	sub	sp, #112	@ 0x70
 800a3e6:	ab1d      	add	r3, sp, #116	@ 0x74
 800a3e8:	9002      	str	r0, [sp, #8]
 800a3ea:	9006      	str	r0, [sp, #24]
 800a3ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a3f0:	4809      	ldr	r0, [pc, #36]	@ (800a418 <siprintf+0x38>)
 800a3f2:	9107      	str	r1, [sp, #28]
 800a3f4:	9104      	str	r1, [sp, #16]
 800a3f6:	4909      	ldr	r1, [pc, #36]	@ (800a41c <siprintf+0x3c>)
 800a3f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3fc:	9105      	str	r1, [sp, #20]
 800a3fe:	6800      	ldr	r0, [r0, #0]
 800a400:	9301      	str	r3, [sp, #4]
 800a402:	a902      	add	r1, sp, #8
 800a404:	f001 fbfa 	bl	800bbfc <_svfiprintf_r>
 800a408:	9b02      	ldr	r3, [sp, #8]
 800a40a:	2200      	movs	r2, #0
 800a40c:	701a      	strb	r2, [r3, #0]
 800a40e:	b01c      	add	sp, #112	@ 0x70
 800a410:	f85d eb04 	ldr.w	lr, [sp], #4
 800a414:	b003      	add	sp, #12
 800a416:	4770      	bx	lr
 800a418:	20000018 	.word	0x20000018
 800a41c:	ffff0208 	.word	0xffff0208

0800a420 <__sread>:
 800a420:	b510      	push	{r4, lr}
 800a422:	460c      	mov	r4, r1
 800a424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a428:	f000 f86c 	bl	800a504 <_read_r>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	bfab      	itete	ge
 800a430:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a432:	89a3      	ldrhlt	r3, [r4, #12]
 800a434:	181b      	addge	r3, r3, r0
 800a436:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a43a:	bfac      	ite	ge
 800a43c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a43e:	81a3      	strhlt	r3, [r4, #12]
 800a440:	bd10      	pop	{r4, pc}

0800a442 <__swrite>:
 800a442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a446:	461f      	mov	r7, r3
 800a448:	898b      	ldrh	r3, [r1, #12]
 800a44a:	05db      	lsls	r3, r3, #23
 800a44c:	4605      	mov	r5, r0
 800a44e:	460c      	mov	r4, r1
 800a450:	4616      	mov	r6, r2
 800a452:	d505      	bpl.n	800a460 <__swrite+0x1e>
 800a454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a458:	2302      	movs	r3, #2
 800a45a:	2200      	movs	r2, #0
 800a45c:	f000 f840 	bl	800a4e0 <_lseek_r>
 800a460:	89a3      	ldrh	r3, [r4, #12]
 800a462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a466:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a46a:	81a3      	strh	r3, [r4, #12]
 800a46c:	4632      	mov	r2, r6
 800a46e:	463b      	mov	r3, r7
 800a470:	4628      	mov	r0, r5
 800a472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a476:	f000 b857 	b.w	800a528 <_write_r>

0800a47a <__sseek>:
 800a47a:	b510      	push	{r4, lr}
 800a47c:	460c      	mov	r4, r1
 800a47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a482:	f000 f82d 	bl	800a4e0 <_lseek_r>
 800a486:	1c43      	adds	r3, r0, #1
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	bf15      	itete	ne
 800a48c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a48e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a492:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a496:	81a3      	strheq	r3, [r4, #12]
 800a498:	bf18      	it	ne
 800a49a:	81a3      	strhne	r3, [r4, #12]
 800a49c:	bd10      	pop	{r4, pc}

0800a49e <__sclose>:
 800a49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a2:	f000 b80d 	b.w	800a4c0 <_close_r>

0800a4a6 <memset>:
 800a4a6:	4402      	add	r2, r0
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d100      	bne.n	800a4b0 <memset+0xa>
 800a4ae:	4770      	bx	lr
 800a4b0:	f803 1b01 	strb.w	r1, [r3], #1
 800a4b4:	e7f9      	b.n	800a4aa <memset+0x4>
	...

0800a4b8 <_localeconv_r>:
 800a4b8:	4800      	ldr	r0, [pc, #0]	@ (800a4bc <_localeconv_r+0x4>)
 800a4ba:	4770      	bx	lr
 800a4bc:	20000158 	.word	0x20000158

0800a4c0 <_close_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4d06      	ldr	r5, [pc, #24]	@ (800a4dc <_close_r+0x1c>)
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	602b      	str	r3, [r5, #0]
 800a4cc:	f7f8 fa8c 	bl	80029e8 <_close>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d102      	bne.n	800a4da <_close_r+0x1a>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	b103      	cbz	r3, 800a4da <_close_r+0x1a>
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	200008e4 	.word	0x200008e4

0800a4e0 <_lseek_r>:
 800a4e0:	b538      	push	{r3, r4, r5, lr}
 800a4e2:	4d07      	ldr	r5, [pc, #28]	@ (800a500 <_lseek_r+0x20>)
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	4608      	mov	r0, r1
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	602a      	str	r2, [r5, #0]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f7f8 faa1 	bl	8002a36 <_lseek>
 800a4f4:	1c43      	adds	r3, r0, #1
 800a4f6:	d102      	bne.n	800a4fe <_lseek_r+0x1e>
 800a4f8:	682b      	ldr	r3, [r5, #0]
 800a4fa:	b103      	cbz	r3, 800a4fe <_lseek_r+0x1e>
 800a4fc:	6023      	str	r3, [r4, #0]
 800a4fe:	bd38      	pop	{r3, r4, r5, pc}
 800a500:	200008e4 	.word	0x200008e4

0800a504 <_read_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	4d07      	ldr	r5, [pc, #28]	@ (800a524 <_read_r+0x20>)
 800a508:	4604      	mov	r4, r0
 800a50a:	4608      	mov	r0, r1
 800a50c:	4611      	mov	r1, r2
 800a50e:	2200      	movs	r2, #0
 800a510:	602a      	str	r2, [r5, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	f7f8 fa2f 	bl	8002976 <_read>
 800a518:	1c43      	adds	r3, r0, #1
 800a51a:	d102      	bne.n	800a522 <_read_r+0x1e>
 800a51c:	682b      	ldr	r3, [r5, #0]
 800a51e:	b103      	cbz	r3, 800a522 <_read_r+0x1e>
 800a520:	6023      	str	r3, [r4, #0]
 800a522:	bd38      	pop	{r3, r4, r5, pc}
 800a524:	200008e4 	.word	0x200008e4

0800a528 <_write_r>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	4d07      	ldr	r5, [pc, #28]	@ (800a548 <_write_r+0x20>)
 800a52c:	4604      	mov	r4, r0
 800a52e:	4608      	mov	r0, r1
 800a530:	4611      	mov	r1, r2
 800a532:	2200      	movs	r2, #0
 800a534:	602a      	str	r2, [r5, #0]
 800a536:	461a      	mov	r2, r3
 800a538:	f7f8 fa3a 	bl	80029b0 <_write>
 800a53c:	1c43      	adds	r3, r0, #1
 800a53e:	d102      	bne.n	800a546 <_write_r+0x1e>
 800a540:	682b      	ldr	r3, [r5, #0]
 800a542:	b103      	cbz	r3, 800a546 <_write_r+0x1e>
 800a544:	6023      	str	r3, [r4, #0]
 800a546:	bd38      	pop	{r3, r4, r5, pc}
 800a548:	200008e4 	.word	0x200008e4

0800a54c <__errno>:
 800a54c:	4b01      	ldr	r3, [pc, #4]	@ (800a554 <__errno+0x8>)
 800a54e:	6818      	ldr	r0, [r3, #0]
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	20000018 	.word	0x20000018

0800a558 <__libc_init_array>:
 800a558:	b570      	push	{r4, r5, r6, lr}
 800a55a:	4d0d      	ldr	r5, [pc, #52]	@ (800a590 <__libc_init_array+0x38>)
 800a55c:	4c0d      	ldr	r4, [pc, #52]	@ (800a594 <__libc_init_array+0x3c>)
 800a55e:	1b64      	subs	r4, r4, r5
 800a560:	10a4      	asrs	r4, r4, #2
 800a562:	2600      	movs	r6, #0
 800a564:	42a6      	cmp	r6, r4
 800a566:	d109      	bne.n	800a57c <__libc_init_array+0x24>
 800a568:	4d0b      	ldr	r5, [pc, #44]	@ (800a598 <__libc_init_array+0x40>)
 800a56a:	4c0c      	ldr	r4, [pc, #48]	@ (800a59c <__libc_init_array+0x44>)
 800a56c:	f002 f864 	bl	800c638 <_init>
 800a570:	1b64      	subs	r4, r4, r5
 800a572:	10a4      	asrs	r4, r4, #2
 800a574:	2600      	movs	r6, #0
 800a576:	42a6      	cmp	r6, r4
 800a578:	d105      	bne.n	800a586 <__libc_init_array+0x2e>
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a580:	4798      	blx	r3
 800a582:	3601      	adds	r6, #1
 800a584:	e7ee      	b.n	800a564 <__libc_init_array+0xc>
 800a586:	f855 3b04 	ldr.w	r3, [r5], #4
 800a58a:	4798      	blx	r3
 800a58c:	3601      	adds	r6, #1
 800a58e:	e7f2      	b.n	800a576 <__libc_init_array+0x1e>
 800a590:	0800caa8 	.word	0x0800caa8
 800a594:	0800caa8 	.word	0x0800caa8
 800a598:	0800caa8 	.word	0x0800caa8
 800a59c:	0800caac 	.word	0x0800caac

0800a5a0 <__retarget_lock_init_recursive>:
 800a5a0:	4770      	bx	lr

0800a5a2 <__retarget_lock_acquire_recursive>:
 800a5a2:	4770      	bx	lr

0800a5a4 <__retarget_lock_release_recursive>:
 800a5a4:	4770      	bx	lr

0800a5a6 <quorem>:
 800a5a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5aa:	6903      	ldr	r3, [r0, #16]
 800a5ac:	690c      	ldr	r4, [r1, #16]
 800a5ae:	42a3      	cmp	r3, r4
 800a5b0:	4607      	mov	r7, r0
 800a5b2:	db7e      	blt.n	800a6b2 <quorem+0x10c>
 800a5b4:	3c01      	subs	r4, #1
 800a5b6:	f101 0814 	add.w	r8, r1, #20
 800a5ba:	00a3      	lsls	r3, r4, #2
 800a5bc:	f100 0514 	add.w	r5, r0, #20
 800a5c0:	9300      	str	r3, [sp, #0]
 800a5c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5c6:	9301      	str	r3, [sp, #4]
 800a5c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5dc:	d32e      	bcc.n	800a63c <quorem+0x96>
 800a5de:	f04f 0a00 	mov.w	sl, #0
 800a5e2:	46c4      	mov	ip, r8
 800a5e4:	46ae      	mov	lr, r5
 800a5e6:	46d3      	mov	fp, sl
 800a5e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5ec:	b298      	uxth	r0, r3
 800a5ee:	fb06 a000 	mla	r0, r6, r0, sl
 800a5f2:	0c02      	lsrs	r2, r0, #16
 800a5f4:	0c1b      	lsrs	r3, r3, #16
 800a5f6:	fb06 2303 	mla	r3, r6, r3, r2
 800a5fa:	f8de 2000 	ldr.w	r2, [lr]
 800a5fe:	b280      	uxth	r0, r0
 800a600:	b292      	uxth	r2, r2
 800a602:	1a12      	subs	r2, r2, r0
 800a604:	445a      	add	r2, fp
 800a606:	f8de 0000 	ldr.w	r0, [lr]
 800a60a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a60e:	b29b      	uxth	r3, r3
 800a610:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a614:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a618:	b292      	uxth	r2, r2
 800a61a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a61e:	45e1      	cmp	r9, ip
 800a620:	f84e 2b04 	str.w	r2, [lr], #4
 800a624:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a628:	d2de      	bcs.n	800a5e8 <quorem+0x42>
 800a62a:	9b00      	ldr	r3, [sp, #0]
 800a62c:	58eb      	ldr	r3, [r5, r3]
 800a62e:	b92b      	cbnz	r3, 800a63c <quorem+0x96>
 800a630:	9b01      	ldr	r3, [sp, #4]
 800a632:	3b04      	subs	r3, #4
 800a634:	429d      	cmp	r5, r3
 800a636:	461a      	mov	r2, r3
 800a638:	d32f      	bcc.n	800a69a <quorem+0xf4>
 800a63a:	613c      	str	r4, [r7, #16]
 800a63c:	4638      	mov	r0, r7
 800a63e:	f001 f979 	bl	800b934 <__mcmp>
 800a642:	2800      	cmp	r0, #0
 800a644:	db25      	blt.n	800a692 <quorem+0xec>
 800a646:	4629      	mov	r1, r5
 800a648:	2000      	movs	r0, #0
 800a64a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a64e:	f8d1 c000 	ldr.w	ip, [r1]
 800a652:	fa1f fe82 	uxth.w	lr, r2
 800a656:	fa1f f38c 	uxth.w	r3, ip
 800a65a:	eba3 030e 	sub.w	r3, r3, lr
 800a65e:	4403      	add	r3, r0
 800a660:	0c12      	lsrs	r2, r2, #16
 800a662:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a666:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a670:	45c1      	cmp	r9, r8
 800a672:	f841 3b04 	str.w	r3, [r1], #4
 800a676:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a67a:	d2e6      	bcs.n	800a64a <quorem+0xa4>
 800a67c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a680:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a684:	b922      	cbnz	r2, 800a690 <quorem+0xea>
 800a686:	3b04      	subs	r3, #4
 800a688:	429d      	cmp	r5, r3
 800a68a:	461a      	mov	r2, r3
 800a68c:	d30b      	bcc.n	800a6a6 <quorem+0x100>
 800a68e:	613c      	str	r4, [r7, #16]
 800a690:	3601      	adds	r6, #1
 800a692:	4630      	mov	r0, r6
 800a694:	b003      	add	sp, #12
 800a696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a69a:	6812      	ldr	r2, [r2, #0]
 800a69c:	3b04      	subs	r3, #4
 800a69e:	2a00      	cmp	r2, #0
 800a6a0:	d1cb      	bne.n	800a63a <quorem+0x94>
 800a6a2:	3c01      	subs	r4, #1
 800a6a4:	e7c6      	b.n	800a634 <quorem+0x8e>
 800a6a6:	6812      	ldr	r2, [r2, #0]
 800a6a8:	3b04      	subs	r3, #4
 800a6aa:	2a00      	cmp	r2, #0
 800a6ac:	d1ef      	bne.n	800a68e <quorem+0xe8>
 800a6ae:	3c01      	subs	r4, #1
 800a6b0:	e7ea      	b.n	800a688 <quorem+0xe2>
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	e7ee      	b.n	800a694 <quorem+0xee>
	...

0800a6b8 <_dtoa_r>:
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	69c7      	ldr	r7, [r0, #28]
 800a6be:	b099      	sub	sp, #100	@ 0x64
 800a6c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a6c4:	ec55 4b10 	vmov	r4, r5, d0
 800a6c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a6ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800a6cc:	4683      	mov	fp, r0
 800a6ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6d2:	b97f      	cbnz	r7, 800a6f4 <_dtoa_r+0x3c>
 800a6d4:	2010      	movs	r0, #16
 800a6d6:	f000 fdfd 	bl	800b2d4 <malloc>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800a6e0:	b920      	cbnz	r0, 800a6ec <_dtoa_r+0x34>
 800a6e2:	4ba7      	ldr	r3, [pc, #668]	@ (800a980 <_dtoa_r+0x2c8>)
 800a6e4:	21ef      	movs	r1, #239	@ 0xef
 800a6e6:	48a7      	ldr	r0, [pc, #668]	@ (800a984 <_dtoa_r+0x2cc>)
 800a6e8:	f001 fc68 	bl	800bfbc <__assert_func>
 800a6ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a6f0:	6007      	str	r7, [r0, #0]
 800a6f2:	60c7      	str	r7, [r0, #12]
 800a6f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6f8:	6819      	ldr	r1, [r3, #0]
 800a6fa:	b159      	cbz	r1, 800a714 <_dtoa_r+0x5c>
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	604a      	str	r2, [r1, #4]
 800a700:	2301      	movs	r3, #1
 800a702:	4093      	lsls	r3, r2
 800a704:	608b      	str	r3, [r1, #8]
 800a706:	4658      	mov	r0, fp
 800a708:	f000 feda 	bl	800b4c0 <_Bfree>
 800a70c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a710:	2200      	movs	r2, #0
 800a712:	601a      	str	r2, [r3, #0]
 800a714:	1e2b      	subs	r3, r5, #0
 800a716:	bfb9      	ittee	lt
 800a718:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a71c:	9303      	strlt	r3, [sp, #12]
 800a71e:	2300      	movge	r3, #0
 800a720:	6033      	strge	r3, [r6, #0]
 800a722:	9f03      	ldr	r7, [sp, #12]
 800a724:	4b98      	ldr	r3, [pc, #608]	@ (800a988 <_dtoa_r+0x2d0>)
 800a726:	bfbc      	itt	lt
 800a728:	2201      	movlt	r2, #1
 800a72a:	6032      	strlt	r2, [r6, #0]
 800a72c:	43bb      	bics	r3, r7
 800a72e:	d112      	bne.n	800a756 <_dtoa_r+0x9e>
 800a730:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a732:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a73c:	4323      	orrs	r3, r4
 800a73e:	f000 854d 	beq.w	800b1dc <_dtoa_r+0xb24>
 800a742:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a744:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a99c <_dtoa_r+0x2e4>
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f000 854f 	beq.w	800b1ec <_dtoa_r+0xb34>
 800a74e:	f10a 0303 	add.w	r3, sl, #3
 800a752:	f000 bd49 	b.w	800b1e8 <_dtoa_r+0xb30>
 800a756:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a75a:	2200      	movs	r2, #0
 800a75c:	ec51 0b17 	vmov	r0, r1, d7
 800a760:	2300      	movs	r3, #0
 800a762:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a766:	f7f6 f9b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a76a:	4680      	mov	r8, r0
 800a76c:	b158      	cbz	r0, 800a786 <_dtoa_r+0xce>
 800a76e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a770:	2301      	movs	r3, #1
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a776:	b113      	cbz	r3, 800a77e <_dtoa_r+0xc6>
 800a778:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a77a:	4b84      	ldr	r3, [pc, #528]	@ (800a98c <_dtoa_r+0x2d4>)
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a9a0 <_dtoa_r+0x2e8>
 800a782:	f000 bd33 	b.w	800b1ec <_dtoa_r+0xb34>
 800a786:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a78a:	aa16      	add	r2, sp, #88	@ 0x58
 800a78c:	a917      	add	r1, sp, #92	@ 0x5c
 800a78e:	4658      	mov	r0, fp
 800a790:	f001 f980 	bl	800ba94 <__d2b>
 800a794:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a798:	4681      	mov	r9, r0
 800a79a:	2e00      	cmp	r6, #0
 800a79c:	d077      	beq.n	800a88e <_dtoa_r+0x1d6>
 800a79e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a7a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a7b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a7b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	4b74      	ldr	r3, [pc, #464]	@ (800a990 <_dtoa_r+0x2d8>)
 800a7be:	f7f5 fd6b 	bl	8000298 <__aeabi_dsub>
 800a7c2:	a369      	add	r3, pc, #420	@ (adr r3, 800a968 <_dtoa_r+0x2b0>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	f7f5 ff1e 	bl	8000608 <__aeabi_dmul>
 800a7cc:	a368      	add	r3, pc, #416	@ (adr r3, 800a970 <_dtoa_r+0x2b8>)
 800a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d2:	f7f5 fd63 	bl	800029c <__adddf3>
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	4630      	mov	r0, r6
 800a7da:	460d      	mov	r5, r1
 800a7dc:	f7f5 feaa 	bl	8000534 <__aeabi_i2d>
 800a7e0:	a365      	add	r3, pc, #404	@ (adr r3, 800a978 <_dtoa_r+0x2c0>)
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	f7f5 ff0f 	bl	8000608 <__aeabi_dmul>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	f7f5 fd53 	bl	800029c <__adddf3>
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	460d      	mov	r5, r1
 800a7fa:	f7f6 f9b5 	bl	8000b68 <__aeabi_d2iz>
 800a7fe:	2200      	movs	r2, #0
 800a800:	4607      	mov	r7, r0
 800a802:	2300      	movs	r3, #0
 800a804:	4620      	mov	r0, r4
 800a806:	4629      	mov	r1, r5
 800a808:	f7f6 f970 	bl	8000aec <__aeabi_dcmplt>
 800a80c:	b140      	cbz	r0, 800a820 <_dtoa_r+0x168>
 800a80e:	4638      	mov	r0, r7
 800a810:	f7f5 fe90 	bl	8000534 <__aeabi_i2d>
 800a814:	4622      	mov	r2, r4
 800a816:	462b      	mov	r3, r5
 800a818:	f7f6 f95e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a81c:	b900      	cbnz	r0, 800a820 <_dtoa_r+0x168>
 800a81e:	3f01      	subs	r7, #1
 800a820:	2f16      	cmp	r7, #22
 800a822:	d851      	bhi.n	800a8c8 <_dtoa_r+0x210>
 800a824:	4b5b      	ldr	r3, [pc, #364]	@ (800a994 <_dtoa_r+0x2dc>)
 800a826:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a832:	f7f6 f95b 	bl	8000aec <__aeabi_dcmplt>
 800a836:	2800      	cmp	r0, #0
 800a838:	d048      	beq.n	800a8cc <_dtoa_r+0x214>
 800a83a:	3f01      	subs	r7, #1
 800a83c:	2300      	movs	r3, #0
 800a83e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a840:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a842:	1b9b      	subs	r3, r3, r6
 800a844:	1e5a      	subs	r2, r3, #1
 800a846:	bf44      	itt	mi
 800a848:	f1c3 0801 	rsbmi	r8, r3, #1
 800a84c:	2300      	movmi	r3, #0
 800a84e:	9208      	str	r2, [sp, #32]
 800a850:	bf54      	ite	pl
 800a852:	f04f 0800 	movpl.w	r8, #0
 800a856:	9308      	strmi	r3, [sp, #32]
 800a858:	2f00      	cmp	r7, #0
 800a85a:	db39      	blt.n	800a8d0 <_dtoa_r+0x218>
 800a85c:	9b08      	ldr	r3, [sp, #32]
 800a85e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a860:	443b      	add	r3, r7
 800a862:	9308      	str	r3, [sp, #32]
 800a864:	2300      	movs	r3, #0
 800a866:	930a      	str	r3, [sp, #40]	@ 0x28
 800a868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a86a:	2b09      	cmp	r3, #9
 800a86c:	d864      	bhi.n	800a938 <_dtoa_r+0x280>
 800a86e:	2b05      	cmp	r3, #5
 800a870:	bfc4      	itt	gt
 800a872:	3b04      	subgt	r3, #4
 800a874:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a878:	f1a3 0302 	sub.w	r3, r3, #2
 800a87c:	bfcc      	ite	gt
 800a87e:	2400      	movgt	r4, #0
 800a880:	2401      	movle	r4, #1
 800a882:	2b03      	cmp	r3, #3
 800a884:	d863      	bhi.n	800a94e <_dtoa_r+0x296>
 800a886:	e8df f003 	tbb	[pc, r3]
 800a88a:	372a      	.short	0x372a
 800a88c:	5535      	.short	0x5535
 800a88e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a892:	441e      	add	r6, r3
 800a894:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a898:	2b20      	cmp	r3, #32
 800a89a:	bfc1      	itttt	gt
 800a89c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a8a0:	409f      	lslgt	r7, r3
 800a8a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a8a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a8aa:	bfd6      	itet	le
 800a8ac:	f1c3 0320 	rsble	r3, r3, #32
 800a8b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a8b4:	fa04 f003 	lslle.w	r0, r4, r3
 800a8b8:	f7f5 fe2c 	bl	8000514 <__aeabi_ui2d>
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a8c2:	3e01      	subs	r6, #1
 800a8c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a8c6:	e777      	b.n	800a7b8 <_dtoa_r+0x100>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e7b8      	b.n	800a83e <_dtoa_r+0x186>
 800a8cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800a8ce:	e7b7      	b.n	800a840 <_dtoa_r+0x188>
 800a8d0:	427b      	negs	r3, r7
 800a8d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	eba8 0807 	sub.w	r8, r8, r7
 800a8da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8dc:	e7c4      	b.n	800a868 <_dtoa_r+0x1b0>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	dc35      	bgt.n	800a954 <_dtoa_r+0x29c>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	9307      	str	r3, [sp, #28]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8f2:	e00b      	b.n	800a90c <_dtoa_r+0x254>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e7f3      	b.n	800a8e0 <_dtoa_r+0x228>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8fe:	18fb      	adds	r3, r7, r3
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	3301      	adds	r3, #1
 800a904:	2b01      	cmp	r3, #1
 800a906:	9307      	str	r3, [sp, #28]
 800a908:	bfb8      	it	lt
 800a90a:	2301      	movlt	r3, #1
 800a90c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a910:	2100      	movs	r1, #0
 800a912:	2204      	movs	r2, #4
 800a914:	f102 0514 	add.w	r5, r2, #20
 800a918:	429d      	cmp	r5, r3
 800a91a:	d91f      	bls.n	800a95c <_dtoa_r+0x2a4>
 800a91c:	6041      	str	r1, [r0, #4]
 800a91e:	4658      	mov	r0, fp
 800a920:	f000 fd8e 	bl	800b440 <_Balloc>
 800a924:	4682      	mov	sl, r0
 800a926:	2800      	cmp	r0, #0
 800a928:	d13c      	bne.n	800a9a4 <_dtoa_r+0x2ec>
 800a92a:	4b1b      	ldr	r3, [pc, #108]	@ (800a998 <_dtoa_r+0x2e0>)
 800a92c:	4602      	mov	r2, r0
 800a92e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a932:	e6d8      	b.n	800a6e6 <_dtoa_r+0x2e>
 800a934:	2301      	movs	r3, #1
 800a936:	e7e0      	b.n	800a8fa <_dtoa_r+0x242>
 800a938:	2401      	movs	r4, #1
 800a93a:	2300      	movs	r3, #0
 800a93c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a93e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a940:	f04f 33ff 	mov.w	r3, #4294967295
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	9307      	str	r3, [sp, #28]
 800a948:	2200      	movs	r2, #0
 800a94a:	2312      	movs	r3, #18
 800a94c:	e7d0      	b.n	800a8f0 <_dtoa_r+0x238>
 800a94e:	2301      	movs	r3, #1
 800a950:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a952:	e7f5      	b.n	800a940 <_dtoa_r+0x288>
 800a954:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	9307      	str	r3, [sp, #28]
 800a95a:	e7d7      	b.n	800a90c <_dtoa_r+0x254>
 800a95c:	3101      	adds	r1, #1
 800a95e:	0052      	lsls	r2, r2, #1
 800a960:	e7d8      	b.n	800a914 <_dtoa_r+0x25c>
 800a962:	bf00      	nop
 800a964:	f3af 8000 	nop.w
 800a968:	636f4361 	.word	0x636f4361
 800a96c:	3fd287a7 	.word	0x3fd287a7
 800a970:	8b60c8b3 	.word	0x8b60c8b3
 800a974:	3fc68a28 	.word	0x3fc68a28
 800a978:	509f79fb 	.word	0x509f79fb
 800a97c:	3fd34413 	.word	0x3fd34413
 800a980:	0800c771 	.word	0x0800c771
 800a984:	0800c788 	.word	0x0800c788
 800a988:	7ff00000 	.word	0x7ff00000
 800a98c:	0800c741 	.word	0x0800c741
 800a990:	3ff80000 	.word	0x3ff80000
 800a994:	0800c880 	.word	0x0800c880
 800a998:	0800c7e0 	.word	0x0800c7e0
 800a99c:	0800c76d 	.word	0x0800c76d
 800a9a0:	0800c740 	.word	0x0800c740
 800a9a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a9a8:	6018      	str	r0, [r3, #0]
 800a9aa:	9b07      	ldr	r3, [sp, #28]
 800a9ac:	2b0e      	cmp	r3, #14
 800a9ae:	f200 80a4 	bhi.w	800aafa <_dtoa_r+0x442>
 800a9b2:	2c00      	cmp	r4, #0
 800a9b4:	f000 80a1 	beq.w	800aafa <_dtoa_r+0x442>
 800a9b8:	2f00      	cmp	r7, #0
 800a9ba:	dd33      	ble.n	800aa24 <_dtoa_r+0x36c>
 800a9bc:	4bad      	ldr	r3, [pc, #692]	@ (800ac74 <_dtoa_r+0x5bc>)
 800a9be:	f007 020f 	and.w	r2, r7, #15
 800a9c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9c6:	ed93 7b00 	vldr	d7, [r3]
 800a9ca:	05f8      	lsls	r0, r7, #23
 800a9cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a9d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a9d4:	d516      	bpl.n	800aa04 <_dtoa_r+0x34c>
 800a9d6:	4ba8      	ldr	r3, [pc, #672]	@ (800ac78 <_dtoa_r+0x5c0>)
 800a9d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9e0:	f7f5 ff3c 	bl	800085c <__aeabi_ddiv>
 800a9e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9e8:	f004 040f 	and.w	r4, r4, #15
 800a9ec:	2603      	movs	r6, #3
 800a9ee:	4da2      	ldr	r5, [pc, #648]	@ (800ac78 <_dtoa_r+0x5c0>)
 800a9f0:	b954      	cbnz	r4, 800aa08 <_dtoa_r+0x350>
 800a9f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9fa:	f7f5 ff2f 	bl	800085c <__aeabi_ddiv>
 800a9fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa02:	e028      	b.n	800aa56 <_dtoa_r+0x39e>
 800aa04:	2602      	movs	r6, #2
 800aa06:	e7f2      	b.n	800a9ee <_dtoa_r+0x336>
 800aa08:	07e1      	lsls	r1, r4, #31
 800aa0a:	d508      	bpl.n	800aa1e <_dtoa_r+0x366>
 800aa0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa10:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa14:	f7f5 fdf8 	bl	8000608 <__aeabi_dmul>
 800aa18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa1c:	3601      	adds	r6, #1
 800aa1e:	1064      	asrs	r4, r4, #1
 800aa20:	3508      	adds	r5, #8
 800aa22:	e7e5      	b.n	800a9f0 <_dtoa_r+0x338>
 800aa24:	f000 80d2 	beq.w	800abcc <_dtoa_r+0x514>
 800aa28:	427c      	negs	r4, r7
 800aa2a:	4b92      	ldr	r3, [pc, #584]	@ (800ac74 <_dtoa_r+0x5bc>)
 800aa2c:	4d92      	ldr	r5, [pc, #584]	@ (800ac78 <_dtoa_r+0x5c0>)
 800aa2e:	f004 020f 	and.w	r2, r4, #15
 800aa32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa3e:	f7f5 fde3 	bl	8000608 <__aeabi_dmul>
 800aa42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa46:	1124      	asrs	r4, r4, #4
 800aa48:	2300      	movs	r3, #0
 800aa4a:	2602      	movs	r6, #2
 800aa4c:	2c00      	cmp	r4, #0
 800aa4e:	f040 80b2 	bne.w	800abb6 <_dtoa_r+0x4fe>
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1d3      	bne.n	800a9fe <_dtoa_r+0x346>
 800aa56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 80b7 	beq.w	800abd0 <_dtoa_r+0x518>
 800aa62:	4b86      	ldr	r3, [pc, #536]	@ (800ac7c <_dtoa_r+0x5c4>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	4620      	mov	r0, r4
 800aa68:	4629      	mov	r1, r5
 800aa6a:	f7f6 f83f 	bl	8000aec <__aeabi_dcmplt>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	f000 80ae 	beq.w	800abd0 <_dtoa_r+0x518>
 800aa74:	9b07      	ldr	r3, [sp, #28]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f000 80aa 	beq.w	800abd0 <_dtoa_r+0x518>
 800aa7c:	9b00      	ldr	r3, [sp, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	dd37      	ble.n	800aaf2 <_dtoa_r+0x43a>
 800aa82:	1e7b      	subs	r3, r7, #1
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	4620      	mov	r0, r4
 800aa88:	4b7d      	ldr	r3, [pc, #500]	@ (800ac80 <_dtoa_r+0x5c8>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	f7f5 fdbb 	bl	8000608 <__aeabi_dmul>
 800aa92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa96:	9c00      	ldr	r4, [sp, #0]
 800aa98:	3601      	adds	r6, #1
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f7f5 fd4a 	bl	8000534 <__aeabi_i2d>
 800aaa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aaa4:	f7f5 fdb0 	bl	8000608 <__aeabi_dmul>
 800aaa8:	4b76      	ldr	r3, [pc, #472]	@ (800ac84 <_dtoa_r+0x5cc>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f7f5 fbf6 	bl	800029c <__adddf3>
 800aab0:	4605      	mov	r5, r0
 800aab2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aab6:	2c00      	cmp	r4, #0
 800aab8:	f040 808d 	bne.w	800abd6 <_dtoa_r+0x51e>
 800aabc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aac0:	4b71      	ldr	r3, [pc, #452]	@ (800ac88 <_dtoa_r+0x5d0>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	f7f5 fbe8 	bl	8000298 <__aeabi_dsub>
 800aac8:	4602      	mov	r2, r0
 800aaca:	460b      	mov	r3, r1
 800aacc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aad0:	462a      	mov	r2, r5
 800aad2:	4633      	mov	r3, r6
 800aad4:	f7f6 f828 	bl	8000b28 <__aeabi_dcmpgt>
 800aad8:	2800      	cmp	r0, #0
 800aada:	f040 828b 	bne.w	800aff4 <_dtoa_r+0x93c>
 800aade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aae2:	462a      	mov	r2, r5
 800aae4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aae8:	f7f6 f800 	bl	8000aec <__aeabi_dcmplt>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	f040 8128 	bne.w	800ad42 <_dtoa_r+0x68a>
 800aaf2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aaf6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aafa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f2c0 815a 	blt.w	800adb6 <_dtoa_r+0x6fe>
 800ab02:	2f0e      	cmp	r7, #14
 800ab04:	f300 8157 	bgt.w	800adb6 <_dtoa_r+0x6fe>
 800ab08:	4b5a      	ldr	r3, [pc, #360]	@ (800ac74 <_dtoa_r+0x5bc>)
 800ab0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab0e:	ed93 7b00 	vldr	d7, [r3]
 800ab12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	ed8d 7b00 	vstr	d7, [sp]
 800ab1a:	da03      	bge.n	800ab24 <_dtoa_r+0x46c>
 800ab1c:	9b07      	ldr	r3, [sp, #28]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f340 8101 	ble.w	800ad26 <_dtoa_r+0x66e>
 800ab24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ab28:	4656      	mov	r6, sl
 800ab2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab2e:	4620      	mov	r0, r4
 800ab30:	4629      	mov	r1, r5
 800ab32:	f7f5 fe93 	bl	800085c <__aeabi_ddiv>
 800ab36:	f7f6 f817 	bl	8000b68 <__aeabi_d2iz>
 800ab3a:	4680      	mov	r8, r0
 800ab3c:	f7f5 fcfa 	bl	8000534 <__aeabi_i2d>
 800ab40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab44:	f7f5 fd60 	bl	8000608 <__aeabi_dmul>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	4629      	mov	r1, r5
 800ab50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ab54:	f7f5 fba0 	bl	8000298 <__aeabi_dsub>
 800ab58:	f806 4b01 	strb.w	r4, [r6], #1
 800ab5c:	9d07      	ldr	r5, [sp, #28]
 800ab5e:	eba6 040a 	sub.w	r4, r6, sl
 800ab62:	42a5      	cmp	r5, r4
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	f040 8117 	bne.w	800ad9a <_dtoa_r+0x6e2>
 800ab6c:	f7f5 fb96 	bl	800029c <__adddf3>
 800ab70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab74:	4604      	mov	r4, r0
 800ab76:	460d      	mov	r5, r1
 800ab78:	f7f5 ffd6 	bl	8000b28 <__aeabi_dcmpgt>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f040 80f9 	bne.w	800ad74 <_dtoa_r+0x6bc>
 800ab82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab86:	4620      	mov	r0, r4
 800ab88:	4629      	mov	r1, r5
 800ab8a:	f7f5 ffa5 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab8e:	b118      	cbz	r0, 800ab98 <_dtoa_r+0x4e0>
 800ab90:	f018 0f01 	tst.w	r8, #1
 800ab94:	f040 80ee 	bne.w	800ad74 <_dtoa_r+0x6bc>
 800ab98:	4649      	mov	r1, r9
 800ab9a:	4658      	mov	r0, fp
 800ab9c:	f000 fc90 	bl	800b4c0 <_Bfree>
 800aba0:	2300      	movs	r3, #0
 800aba2:	7033      	strb	r3, [r6, #0]
 800aba4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aba6:	3701      	adds	r7, #1
 800aba8:	601f      	str	r7, [r3, #0]
 800abaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800abac:	2b00      	cmp	r3, #0
 800abae:	f000 831d 	beq.w	800b1ec <_dtoa_r+0xb34>
 800abb2:	601e      	str	r6, [r3, #0]
 800abb4:	e31a      	b.n	800b1ec <_dtoa_r+0xb34>
 800abb6:	07e2      	lsls	r2, r4, #31
 800abb8:	d505      	bpl.n	800abc6 <_dtoa_r+0x50e>
 800abba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abbe:	f7f5 fd23 	bl	8000608 <__aeabi_dmul>
 800abc2:	3601      	adds	r6, #1
 800abc4:	2301      	movs	r3, #1
 800abc6:	1064      	asrs	r4, r4, #1
 800abc8:	3508      	adds	r5, #8
 800abca:	e73f      	b.n	800aa4c <_dtoa_r+0x394>
 800abcc:	2602      	movs	r6, #2
 800abce:	e742      	b.n	800aa56 <_dtoa_r+0x39e>
 800abd0:	9c07      	ldr	r4, [sp, #28]
 800abd2:	9704      	str	r7, [sp, #16]
 800abd4:	e761      	b.n	800aa9a <_dtoa_r+0x3e2>
 800abd6:	4b27      	ldr	r3, [pc, #156]	@ (800ac74 <_dtoa_r+0x5bc>)
 800abd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abe2:	4454      	add	r4, sl
 800abe4:	2900      	cmp	r1, #0
 800abe6:	d053      	beq.n	800ac90 <_dtoa_r+0x5d8>
 800abe8:	4928      	ldr	r1, [pc, #160]	@ (800ac8c <_dtoa_r+0x5d4>)
 800abea:	2000      	movs	r0, #0
 800abec:	f7f5 fe36 	bl	800085c <__aeabi_ddiv>
 800abf0:	4633      	mov	r3, r6
 800abf2:	462a      	mov	r2, r5
 800abf4:	f7f5 fb50 	bl	8000298 <__aeabi_dsub>
 800abf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800abfc:	4656      	mov	r6, sl
 800abfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac02:	f7f5 ffb1 	bl	8000b68 <__aeabi_d2iz>
 800ac06:	4605      	mov	r5, r0
 800ac08:	f7f5 fc94 	bl	8000534 <__aeabi_i2d>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	460b      	mov	r3, r1
 800ac10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac14:	f7f5 fb40 	bl	8000298 <__aeabi_dsub>
 800ac18:	3530      	adds	r5, #48	@ 0x30
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac22:	f806 5b01 	strb.w	r5, [r6], #1
 800ac26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac2a:	f7f5 ff5f 	bl	8000aec <__aeabi_dcmplt>
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d171      	bne.n	800ad16 <_dtoa_r+0x65e>
 800ac32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac36:	4911      	ldr	r1, [pc, #68]	@ (800ac7c <_dtoa_r+0x5c4>)
 800ac38:	2000      	movs	r0, #0
 800ac3a:	f7f5 fb2d 	bl	8000298 <__aeabi_dsub>
 800ac3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac42:	f7f5 ff53 	bl	8000aec <__aeabi_dcmplt>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	f040 8095 	bne.w	800ad76 <_dtoa_r+0x6be>
 800ac4c:	42a6      	cmp	r6, r4
 800ac4e:	f43f af50 	beq.w	800aaf2 <_dtoa_r+0x43a>
 800ac52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac56:	4b0a      	ldr	r3, [pc, #40]	@ (800ac80 <_dtoa_r+0x5c8>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f7f5 fcd5 	bl	8000608 <__aeabi_dmul>
 800ac5e:	4b08      	ldr	r3, [pc, #32]	@ (800ac80 <_dtoa_r+0x5c8>)
 800ac60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac64:	2200      	movs	r2, #0
 800ac66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac6a:	f7f5 fccd 	bl	8000608 <__aeabi_dmul>
 800ac6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac72:	e7c4      	b.n	800abfe <_dtoa_r+0x546>
 800ac74:	0800c880 	.word	0x0800c880
 800ac78:	0800c858 	.word	0x0800c858
 800ac7c:	3ff00000 	.word	0x3ff00000
 800ac80:	40240000 	.word	0x40240000
 800ac84:	401c0000 	.word	0x401c0000
 800ac88:	40140000 	.word	0x40140000
 800ac8c:	3fe00000 	.word	0x3fe00000
 800ac90:	4631      	mov	r1, r6
 800ac92:	4628      	mov	r0, r5
 800ac94:	f7f5 fcb8 	bl	8000608 <__aeabi_dmul>
 800ac98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac9c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ac9e:	4656      	mov	r6, sl
 800aca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aca4:	f7f5 ff60 	bl	8000b68 <__aeabi_d2iz>
 800aca8:	4605      	mov	r5, r0
 800acaa:	f7f5 fc43 	bl	8000534 <__aeabi_i2d>
 800acae:	4602      	mov	r2, r0
 800acb0:	460b      	mov	r3, r1
 800acb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acb6:	f7f5 faef 	bl	8000298 <__aeabi_dsub>
 800acba:	3530      	adds	r5, #48	@ 0x30
 800acbc:	f806 5b01 	strb.w	r5, [r6], #1
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	42a6      	cmp	r6, r4
 800acc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acca:	f04f 0200 	mov.w	r2, #0
 800acce:	d124      	bne.n	800ad1a <_dtoa_r+0x662>
 800acd0:	4bac      	ldr	r3, [pc, #688]	@ (800af84 <_dtoa_r+0x8cc>)
 800acd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800acd6:	f7f5 fae1 	bl	800029c <__adddf3>
 800acda:	4602      	mov	r2, r0
 800acdc:	460b      	mov	r3, r1
 800acde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ace2:	f7f5 ff21 	bl	8000b28 <__aeabi_dcmpgt>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d145      	bne.n	800ad76 <_dtoa_r+0x6be>
 800acea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800acee:	49a5      	ldr	r1, [pc, #660]	@ (800af84 <_dtoa_r+0x8cc>)
 800acf0:	2000      	movs	r0, #0
 800acf2:	f7f5 fad1 	bl	8000298 <__aeabi_dsub>
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acfe:	f7f5 fef5 	bl	8000aec <__aeabi_dcmplt>
 800ad02:	2800      	cmp	r0, #0
 800ad04:	f43f aef5 	beq.w	800aaf2 <_dtoa_r+0x43a>
 800ad08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ad0a:	1e73      	subs	r3, r6, #1
 800ad0c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad12:	2b30      	cmp	r3, #48	@ 0x30
 800ad14:	d0f8      	beq.n	800ad08 <_dtoa_r+0x650>
 800ad16:	9f04      	ldr	r7, [sp, #16]
 800ad18:	e73e      	b.n	800ab98 <_dtoa_r+0x4e0>
 800ad1a:	4b9b      	ldr	r3, [pc, #620]	@ (800af88 <_dtoa_r+0x8d0>)
 800ad1c:	f7f5 fc74 	bl	8000608 <__aeabi_dmul>
 800ad20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad24:	e7bc      	b.n	800aca0 <_dtoa_r+0x5e8>
 800ad26:	d10c      	bne.n	800ad42 <_dtoa_r+0x68a>
 800ad28:	4b98      	ldr	r3, [pc, #608]	@ (800af8c <_dtoa_r+0x8d4>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad30:	f7f5 fc6a 	bl	8000608 <__aeabi_dmul>
 800ad34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad38:	f7f5 feec 	bl	8000b14 <__aeabi_dcmpge>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	f000 8157 	beq.w	800aff0 <_dtoa_r+0x938>
 800ad42:	2400      	movs	r4, #0
 800ad44:	4625      	mov	r5, r4
 800ad46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad48:	43db      	mvns	r3, r3
 800ad4a:	9304      	str	r3, [sp, #16]
 800ad4c:	4656      	mov	r6, sl
 800ad4e:	2700      	movs	r7, #0
 800ad50:	4621      	mov	r1, r4
 800ad52:	4658      	mov	r0, fp
 800ad54:	f000 fbb4 	bl	800b4c0 <_Bfree>
 800ad58:	2d00      	cmp	r5, #0
 800ad5a:	d0dc      	beq.n	800ad16 <_dtoa_r+0x65e>
 800ad5c:	b12f      	cbz	r7, 800ad6a <_dtoa_r+0x6b2>
 800ad5e:	42af      	cmp	r7, r5
 800ad60:	d003      	beq.n	800ad6a <_dtoa_r+0x6b2>
 800ad62:	4639      	mov	r1, r7
 800ad64:	4658      	mov	r0, fp
 800ad66:	f000 fbab 	bl	800b4c0 <_Bfree>
 800ad6a:	4629      	mov	r1, r5
 800ad6c:	4658      	mov	r0, fp
 800ad6e:	f000 fba7 	bl	800b4c0 <_Bfree>
 800ad72:	e7d0      	b.n	800ad16 <_dtoa_r+0x65e>
 800ad74:	9704      	str	r7, [sp, #16]
 800ad76:	4633      	mov	r3, r6
 800ad78:	461e      	mov	r6, r3
 800ad7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad7e:	2a39      	cmp	r2, #57	@ 0x39
 800ad80:	d107      	bne.n	800ad92 <_dtoa_r+0x6da>
 800ad82:	459a      	cmp	sl, r3
 800ad84:	d1f8      	bne.n	800ad78 <_dtoa_r+0x6c0>
 800ad86:	9a04      	ldr	r2, [sp, #16]
 800ad88:	3201      	adds	r2, #1
 800ad8a:	9204      	str	r2, [sp, #16]
 800ad8c:	2230      	movs	r2, #48	@ 0x30
 800ad8e:	f88a 2000 	strb.w	r2, [sl]
 800ad92:	781a      	ldrb	r2, [r3, #0]
 800ad94:	3201      	adds	r2, #1
 800ad96:	701a      	strb	r2, [r3, #0]
 800ad98:	e7bd      	b.n	800ad16 <_dtoa_r+0x65e>
 800ad9a:	4b7b      	ldr	r3, [pc, #492]	@ (800af88 <_dtoa_r+0x8d0>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f7f5 fc33 	bl	8000608 <__aeabi_dmul>
 800ada2:	2200      	movs	r2, #0
 800ada4:	2300      	movs	r3, #0
 800ada6:	4604      	mov	r4, r0
 800ada8:	460d      	mov	r5, r1
 800adaa:	f7f5 fe95 	bl	8000ad8 <__aeabi_dcmpeq>
 800adae:	2800      	cmp	r0, #0
 800adb0:	f43f aebb 	beq.w	800ab2a <_dtoa_r+0x472>
 800adb4:	e6f0      	b.n	800ab98 <_dtoa_r+0x4e0>
 800adb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800adb8:	2a00      	cmp	r2, #0
 800adba:	f000 80db 	beq.w	800af74 <_dtoa_r+0x8bc>
 800adbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adc0:	2a01      	cmp	r2, #1
 800adc2:	f300 80bf 	bgt.w	800af44 <_dtoa_r+0x88c>
 800adc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800adc8:	2a00      	cmp	r2, #0
 800adca:	f000 80b7 	beq.w	800af3c <_dtoa_r+0x884>
 800adce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800add2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800add4:	4646      	mov	r6, r8
 800add6:	9a08      	ldr	r2, [sp, #32]
 800add8:	2101      	movs	r1, #1
 800adda:	441a      	add	r2, r3
 800addc:	4658      	mov	r0, fp
 800adde:	4498      	add	r8, r3
 800ade0:	9208      	str	r2, [sp, #32]
 800ade2:	f000 fc21 	bl	800b628 <__i2b>
 800ade6:	4605      	mov	r5, r0
 800ade8:	b15e      	cbz	r6, 800ae02 <_dtoa_r+0x74a>
 800adea:	9b08      	ldr	r3, [sp, #32]
 800adec:	2b00      	cmp	r3, #0
 800adee:	dd08      	ble.n	800ae02 <_dtoa_r+0x74a>
 800adf0:	42b3      	cmp	r3, r6
 800adf2:	9a08      	ldr	r2, [sp, #32]
 800adf4:	bfa8      	it	ge
 800adf6:	4633      	movge	r3, r6
 800adf8:	eba8 0803 	sub.w	r8, r8, r3
 800adfc:	1af6      	subs	r6, r6, r3
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	9308      	str	r3, [sp, #32]
 800ae02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae04:	b1f3      	cbz	r3, 800ae44 <_dtoa_r+0x78c>
 800ae06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 80b7 	beq.w	800af7c <_dtoa_r+0x8c4>
 800ae0e:	b18c      	cbz	r4, 800ae34 <_dtoa_r+0x77c>
 800ae10:	4629      	mov	r1, r5
 800ae12:	4622      	mov	r2, r4
 800ae14:	4658      	mov	r0, fp
 800ae16:	f000 fcc7 	bl	800b7a8 <__pow5mult>
 800ae1a:	464a      	mov	r2, r9
 800ae1c:	4601      	mov	r1, r0
 800ae1e:	4605      	mov	r5, r0
 800ae20:	4658      	mov	r0, fp
 800ae22:	f000 fc17 	bl	800b654 <__multiply>
 800ae26:	4649      	mov	r1, r9
 800ae28:	9004      	str	r0, [sp, #16]
 800ae2a:	4658      	mov	r0, fp
 800ae2c:	f000 fb48 	bl	800b4c0 <_Bfree>
 800ae30:	9b04      	ldr	r3, [sp, #16]
 800ae32:	4699      	mov	r9, r3
 800ae34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae36:	1b1a      	subs	r2, r3, r4
 800ae38:	d004      	beq.n	800ae44 <_dtoa_r+0x78c>
 800ae3a:	4649      	mov	r1, r9
 800ae3c:	4658      	mov	r0, fp
 800ae3e:	f000 fcb3 	bl	800b7a8 <__pow5mult>
 800ae42:	4681      	mov	r9, r0
 800ae44:	2101      	movs	r1, #1
 800ae46:	4658      	mov	r0, fp
 800ae48:	f000 fbee 	bl	800b628 <__i2b>
 800ae4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae4e:	4604      	mov	r4, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 81cf 	beq.w	800b1f4 <_dtoa_r+0xb3c>
 800ae56:	461a      	mov	r2, r3
 800ae58:	4601      	mov	r1, r0
 800ae5a:	4658      	mov	r0, fp
 800ae5c:	f000 fca4 	bl	800b7a8 <__pow5mult>
 800ae60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	4604      	mov	r4, r0
 800ae66:	f300 8095 	bgt.w	800af94 <_dtoa_r+0x8dc>
 800ae6a:	9b02      	ldr	r3, [sp, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f040 8087 	bne.w	800af80 <_dtoa_r+0x8c8>
 800ae72:	9b03      	ldr	r3, [sp, #12]
 800ae74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f040 8089 	bne.w	800af90 <_dtoa_r+0x8d8>
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae84:	0d1b      	lsrs	r3, r3, #20
 800ae86:	051b      	lsls	r3, r3, #20
 800ae88:	b12b      	cbz	r3, 800ae96 <_dtoa_r+0x7de>
 800ae8a:	9b08      	ldr	r3, [sp, #32]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	9308      	str	r3, [sp, #32]
 800ae90:	f108 0801 	add.w	r8, r8, #1
 800ae94:	2301      	movs	r3, #1
 800ae96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 81b0 	beq.w	800b200 <_dtoa_r+0xb48>
 800aea0:	6923      	ldr	r3, [r4, #16]
 800aea2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aea6:	6918      	ldr	r0, [r3, #16]
 800aea8:	f000 fb72 	bl	800b590 <__hi0bits>
 800aeac:	f1c0 0020 	rsb	r0, r0, #32
 800aeb0:	9b08      	ldr	r3, [sp, #32]
 800aeb2:	4418      	add	r0, r3
 800aeb4:	f010 001f 	ands.w	r0, r0, #31
 800aeb8:	d077      	beq.n	800afaa <_dtoa_r+0x8f2>
 800aeba:	f1c0 0320 	rsb	r3, r0, #32
 800aebe:	2b04      	cmp	r3, #4
 800aec0:	dd6b      	ble.n	800af9a <_dtoa_r+0x8e2>
 800aec2:	9b08      	ldr	r3, [sp, #32]
 800aec4:	f1c0 001c 	rsb	r0, r0, #28
 800aec8:	4403      	add	r3, r0
 800aeca:	4480      	add	r8, r0
 800aecc:	4406      	add	r6, r0
 800aece:	9308      	str	r3, [sp, #32]
 800aed0:	f1b8 0f00 	cmp.w	r8, #0
 800aed4:	dd05      	ble.n	800aee2 <_dtoa_r+0x82a>
 800aed6:	4649      	mov	r1, r9
 800aed8:	4642      	mov	r2, r8
 800aeda:	4658      	mov	r0, fp
 800aedc:	f000 fcbe 	bl	800b85c <__lshift>
 800aee0:	4681      	mov	r9, r0
 800aee2:	9b08      	ldr	r3, [sp, #32]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	dd05      	ble.n	800aef4 <_dtoa_r+0x83c>
 800aee8:	4621      	mov	r1, r4
 800aeea:	461a      	mov	r2, r3
 800aeec:	4658      	mov	r0, fp
 800aeee:	f000 fcb5 	bl	800b85c <__lshift>
 800aef2:	4604      	mov	r4, r0
 800aef4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d059      	beq.n	800afae <_dtoa_r+0x8f6>
 800aefa:	4621      	mov	r1, r4
 800aefc:	4648      	mov	r0, r9
 800aefe:	f000 fd19 	bl	800b934 <__mcmp>
 800af02:	2800      	cmp	r0, #0
 800af04:	da53      	bge.n	800afae <_dtoa_r+0x8f6>
 800af06:	1e7b      	subs	r3, r7, #1
 800af08:	9304      	str	r3, [sp, #16]
 800af0a:	4649      	mov	r1, r9
 800af0c:	2300      	movs	r3, #0
 800af0e:	220a      	movs	r2, #10
 800af10:	4658      	mov	r0, fp
 800af12:	f000 faf7 	bl	800b504 <__multadd>
 800af16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af18:	4681      	mov	r9, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f000 8172 	beq.w	800b204 <_dtoa_r+0xb4c>
 800af20:	2300      	movs	r3, #0
 800af22:	4629      	mov	r1, r5
 800af24:	220a      	movs	r2, #10
 800af26:	4658      	mov	r0, fp
 800af28:	f000 faec 	bl	800b504 <__multadd>
 800af2c:	9b00      	ldr	r3, [sp, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	4605      	mov	r5, r0
 800af32:	dc67      	bgt.n	800b004 <_dtoa_r+0x94c>
 800af34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af36:	2b02      	cmp	r3, #2
 800af38:	dc41      	bgt.n	800afbe <_dtoa_r+0x906>
 800af3a:	e063      	b.n	800b004 <_dtoa_r+0x94c>
 800af3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800af3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af42:	e746      	b.n	800add2 <_dtoa_r+0x71a>
 800af44:	9b07      	ldr	r3, [sp, #28]
 800af46:	1e5c      	subs	r4, r3, #1
 800af48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af4a:	42a3      	cmp	r3, r4
 800af4c:	bfbf      	itttt	lt
 800af4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800af50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800af52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800af54:	1ae3      	sublt	r3, r4, r3
 800af56:	bfb4      	ite	lt
 800af58:	18d2      	addlt	r2, r2, r3
 800af5a:	1b1c      	subge	r4, r3, r4
 800af5c:	9b07      	ldr	r3, [sp, #28]
 800af5e:	bfbc      	itt	lt
 800af60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800af62:	2400      	movlt	r4, #0
 800af64:	2b00      	cmp	r3, #0
 800af66:	bfb5      	itete	lt
 800af68:	eba8 0603 	sublt.w	r6, r8, r3
 800af6c:	9b07      	ldrge	r3, [sp, #28]
 800af6e:	2300      	movlt	r3, #0
 800af70:	4646      	movge	r6, r8
 800af72:	e730      	b.n	800add6 <_dtoa_r+0x71e>
 800af74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800af78:	4646      	mov	r6, r8
 800af7a:	e735      	b.n	800ade8 <_dtoa_r+0x730>
 800af7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af7e:	e75c      	b.n	800ae3a <_dtoa_r+0x782>
 800af80:	2300      	movs	r3, #0
 800af82:	e788      	b.n	800ae96 <_dtoa_r+0x7de>
 800af84:	3fe00000 	.word	0x3fe00000
 800af88:	40240000 	.word	0x40240000
 800af8c:	40140000 	.word	0x40140000
 800af90:	9b02      	ldr	r3, [sp, #8]
 800af92:	e780      	b.n	800ae96 <_dtoa_r+0x7de>
 800af94:	2300      	movs	r3, #0
 800af96:	930a      	str	r3, [sp, #40]	@ 0x28
 800af98:	e782      	b.n	800aea0 <_dtoa_r+0x7e8>
 800af9a:	d099      	beq.n	800aed0 <_dtoa_r+0x818>
 800af9c:	9a08      	ldr	r2, [sp, #32]
 800af9e:	331c      	adds	r3, #28
 800afa0:	441a      	add	r2, r3
 800afa2:	4498      	add	r8, r3
 800afa4:	441e      	add	r6, r3
 800afa6:	9208      	str	r2, [sp, #32]
 800afa8:	e792      	b.n	800aed0 <_dtoa_r+0x818>
 800afaa:	4603      	mov	r3, r0
 800afac:	e7f6      	b.n	800af9c <_dtoa_r+0x8e4>
 800afae:	9b07      	ldr	r3, [sp, #28]
 800afb0:	9704      	str	r7, [sp, #16]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	dc20      	bgt.n	800aff8 <_dtoa_r+0x940>
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afba:	2b02      	cmp	r3, #2
 800afbc:	dd1e      	ble.n	800affc <_dtoa_r+0x944>
 800afbe:	9b00      	ldr	r3, [sp, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f47f aec0 	bne.w	800ad46 <_dtoa_r+0x68e>
 800afc6:	4621      	mov	r1, r4
 800afc8:	2205      	movs	r2, #5
 800afca:	4658      	mov	r0, fp
 800afcc:	f000 fa9a 	bl	800b504 <__multadd>
 800afd0:	4601      	mov	r1, r0
 800afd2:	4604      	mov	r4, r0
 800afd4:	4648      	mov	r0, r9
 800afd6:	f000 fcad 	bl	800b934 <__mcmp>
 800afda:	2800      	cmp	r0, #0
 800afdc:	f77f aeb3 	ble.w	800ad46 <_dtoa_r+0x68e>
 800afe0:	4656      	mov	r6, sl
 800afe2:	2331      	movs	r3, #49	@ 0x31
 800afe4:	f806 3b01 	strb.w	r3, [r6], #1
 800afe8:	9b04      	ldr	r3, [sp, #16]
 800afea:	3301      	adds	r3, #1
 800afec:	9304      	str	r3, [sp, #16]
 800afee:	e6ae      	b.n	800ad4e <_dtoa_r+0x696>
 800aff0:	9c07      	ldr	r4, [sp, #28]
 800aff2:	9704      	str	r7, [sp, #16]
 800aff4:	4625      	mov	r5, r4
 800aff6:	e7f3      	b.n	800afe0 <_dtoa_r+0x928>
 800aff8:	9b07      	ldr	r3, [sp, #28]
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800affe:	2b00      	cmp	r3, #0
 800b000:	f000 8104 	beq.w	800b20c <_dtoa_r+0xb54>
 800b004:	2e00      	cmp	r6, #0
 800b006:	dd05      	ble.n	800b014 <_dtoa_r+0x95c>
 800b008:	4629      	mov	r1, r5
 800b00a:	4632      	mov	r2, r6
 800b00c:	4658      	mov	r0, fp
 800b00e:	f000 fc25 	bl	800b85c <__lshift>
 800b012:	4605      	mov	r5, r0
 800b014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b016:	2b00      	cmp	r3, #0
 800b018:	d05a      	beq.n	800b0d0 <_dtoa_r+0xa18>
 800b01a:	6869      	ldr	r1, [r5, #4]
 800b01c:	4658      	mov	r0, fp
 800b01e:	f000 fa0f 	bl	800b440 <_Balloc>
 800b022:	4606      	mov	r6, r0
 800b024:	b928      	cbnz	r0, 800b032 <_dtoa_r+0x97a>
 800b026:	4b84      	ldr	r3, [pc, #528]	@ (800b238 <_dtoa_r+0xb80>)
 800b028:	4602      	mov	r2, r0
 800b02a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b02e:	f7ff bb5a 	b.w	800a6e6 <_dtoa_r+0x2e>
 800b032:	692a      	ldr	r2, [r5, #16]
 800b034:	3202      	adds	r2, #2
 800b036:	0092      	lsls	r2, r2, #2
 800b038:	f105 010c 	add.w	r1, r5, #12
 800b03c:	300c      	adds	r0, #12
 800b03e:	f000 ffaf 	bl	800bfa0 <memcpy>
 800b042:	2201      	movs	r2, #1
 800b044:	4631      	mov	r1, r6
 800b046:	4658      	mov	r0, fp
 800b048:	f000 fc08 	bl	800b85c <__lshift>
 800b04c:	f10a 0301 	add.w	r3, sl, #1
 800b050:	9307      	str	r3, [sp, #28]
 800b052:	9b00      	ldr	r3, [sp, #0]
 800b054:	4453      	add	r3, sl
 800b056:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b058:	9b02      	ldr	r3, [sp, #8]
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	462f      	mov	r7, r5
 800b060:	930a      	str	r3, [sp, #40]	@ 0x28
 800b062:	4605      	mov	r5, r0
 800b064:	9b07      	ldr	r3, [sp, #28]
 800b066:	4621      	mov	r1, r4
 800b068:	3b01      	subs	r3, #1
 800b06a:	4648      	mov	r0, r9
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	f7ff fa9a 	bl	800a5a6 <quorem>
 800b072:	4639      	mov	r1, r7
 800b074:	9002      	str	r0, [sp, #8]
 800b076:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b07a:	4648      	mov	r0, r9
 800b07c:	f000 fc5a 	bl	800b934 <__mcmp>
 800b080:	462a      	mov	r2, r5
 800b082:	9008      	str	r0, [sp, #32]
 800b084:	4621      	mov	r1, r4
 800b086:	4658      	mov	r0, fp
 800b088:	f000 fc70 	bl	800b96c <__mdiff>
 800b08c:	68c2      	ldr	r2, [r0, #12]
 800b08e:	4606      	mov	r6, r0
 800b090:	bb02      	cbnz	r2, 800b0d4 <_dtoa_r+0xa1c>
 800b092:	4601      	mov	r1, r0
 800b094:	4648      	mov	r0, r9
 800b096:	f000 fc4d 	bl	800b934 <__mcmp>
 800b09a:	4602      	mov	r2, r0
 800b09c:	4631      	mov	r1, r6
 800b09e:	4658      	mov	r0, fp
 800b0a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0a2:	f000 fa0d 	bl	800b4c0 <_Bfree>
 800b0a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0aa:	9e07      	ldr	r6, [sp, #28]
 800b0ac:	ea43 0102 	orr.w	r1, r3, r2
 800b0b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0b2:	4319      	orrs	r1, r3
 800b0b4:	d110      	bne.n	800b0d8 <_dtoa_r+0xa20>
 800b0b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0ba:	d029      	beq.n	800b110 <_dtoa_r+0xa58>
 800b0bc:	9b08      	ldr	r3, [sp, #32]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	dd02      	ble.n	800b0c8 <_dtoa_r+0xa10>
 800b0c2:	9b02      	ldr	r3, [sp, #8]
 800b0c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b0c8:	9b00      	ldr	r3, [sp, #0]
 800b0ca:	f883 8000 	strb.w	r8, [r3]
 800b0ce:	e63f      	b.n	800ad50 <_dtoa_r+0x698>
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	e7bb      	b.n	800b04c <_dtoa_r+0x994>
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	e7e1      	b.n	800b09c <_dtoa_r+0x9e4>
 800b0d8:	9b08      	ldr	r3, [sp, #32]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	db04      	blt.n	800b0e8 <_dtoa_r+0xa30>
 800b0de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b0e0:	430b      	orrs	r3, r1
 800b0e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0e4:	430b      	orrs	r3, r1
 800b0e6:	d120      	bne.n	800b12a <_dtoa_r+0xa72>
 800b0e8:	2a00      	cmp	r2, #0
 800b0ea:	dded      	ble.n	800b0c8 <_dtoa_r+0xa10>
 800b0ec:	4649      	mov	r1, r9
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	4658      	mov	r0, fp
 800b0f2:	f000 fbb3 	bl	800b85c <__lshift>
 800b0f6:	4621      	mov	r1, r4
 800b0f8:	4681      	mov	r9, r0
 800b0fa:	f000 fc1b 	bl	800b934 <__mcmp>
 800b0fe:	2800      	cmp	r0, #0
 800b100:	dc03      	bgt.n	800b10a <_dtoa_r+0xa52>
 800b102:	d1e1      	bne.n	800b0c8 <_dtoa_r+0xa10>
 800b104:	f018 0f01 	tst.w	r8, #1
 800b108:	d0de      	beq.n	800b0c8 <_dtoa_r+0xa10>
 800b10a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b10e:	d1d8      	bne.n	800b0c2 <_dtoa_r+0xa0a>
 800b110:	9a00      	ldr	r2, [sp, #0]
 800b112:	2339      	movs	r3, #57	@ 0x39
 800b114:	7013      	strb	r3, [r2, #0]
 800b116:	4633      	mov	r3, r6
 800b118:	461e      	mov	r6, r3
 800b11a:	3b01      	subs	r3, #1
 800b11c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b120:	2a39      	cmp	r2, #57	@ 0x39
 800b122:	d052      	beq.n	800b1ca <_dtoa_r+0xb12>
 800b124:	3201      	adds	r2, #1
 800b126:	701a      	strb	r2, [r3, #0]
 800b128:	e612      	b.n	800ad50 <_dtoa_r+0x698>
 800b12a:	2a00      	cmp	r2, #0
 800b12c:	dd07      	ble.n	800b13e <_dtoa_r+0xa86>
 800b12e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b132:	d0ed      	beq.n	800b110 <_dtoa_r+0xa58>
 800b134:	9a00      	ldr	r2, [sp, #0]
 800b136:	f108 0301 	add.w	r3, r8, #1
 800b13a:	7013      	strb	r3, [r2, #0]
 800b13c:	e608      	b.n	800ad50 <_dtoa_r+0x698>
 800b13e:	9b07      	ldr	r3, [sp, #28]
 800b140:	9a07      	ldr	r2, [sp, #28]
 800b142:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b146:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b148:	4293      	cmp	r3, r2
 800b14a:	d028      	beq.n	800b19e <_dtoa_r+0xae6>
 800b14c:	4649      	mov	r1, r9
 800b14e:	2300      	movs	r3, #0
 800b150:	220a      	movs	r2, #10
 800b152:	4658      	mov	r0, fp
 800b154:	f000 f9d6 	bl	800b504 <__multadd>
 800b158:	42af      	cmp	r7, r5
 800b15a:	4681      	mov	r9, r0
 800b15c:	f04f 0300 	mov.w	r3, #0
 800b160:	f04f 020a 	mov.w	r2, #10
 800b164:	4639      	mov	r1, r7
 800b166:	4658      	mov	r0, fp
 800b168:	d107      	bne.n	800b17a <_dtoa_r+0xac2>
 800b16a:	f000 f9cb 	bl	800b504 <__multadd>
 800b16e:	4607      	mov	r7, r0
 800b170:	4605      	mov	r5, r0
 800b172:	9b07      	ldr	r3, [sp, #28]
 800b174:	3301      	adds	r3, #1
 800b176:	9307      	str	r3, [sp, #28]
 800b178:	e774      	b.n	800b064 <_dtoa_r+0x9ac>
 800b17a:	f000 f9c3 	bl	800b504 <__multadd>
 800b17e:	4629      	mov	r1, r5
 800b180:	4607      	mov	r7, r0
 800b182:	2300      	movs	r3, #0
 800b184:	220a      	movs	r2, #10
 800b186:	4658      	mov	r0, fp
 800b188:	f000 f9bc 	bl	800b504 <__multadd>
 800b18c:	4605      	mov	r5, r0
 800b18e:	e7f0      	b.n	800b172 <_dtoa_r+0xaba>
 800b190:	9b00      	ldr	r3, [sp, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	bfcc      	ite	gt
 800b196:	461e      	movgt	r6, r3
 800b198:	2601      	movle	r6, #1
 800b19a:	4456      	add	r6, sl
 800b19c:	2700      	movs	r7, #0
 800b19e:	4649      	mov	r1, r9
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	4658      	mov	r0, fp
 800b1a4:	f000 fb5a 	bl	800b85c <__lshift>
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	4681      	mov	r9, r0
 800b1ac:	f000 fbc2 	bl	800b934 <__mcmp>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	dcb0      	bgt.n	800b116 <_dtoa_r+0xa5e>
 800b1b4:	d102      	bne.n	800b1bc <_dtoa_r+0xb04>
 800b1b6:	f018 0f01 	tst.w	r8, #1
 800b1ba:	d1ac      	bne.n	800b116 <_dtoa_r+0xa5e>
 800b1bc:	4633      	mov	r3, r6
 800b1be:	461e      	mov	r6, r3
 800b1c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1c4:	2a30      	cmp	r2, #48	@ 0x30
 800b1c6:	d0fa      	beq.n	800b1be <_dtoa_r+0xb06>
 800b1c8:	e5c2      	b.n	800ad50 <_dtoa_r+0x698>
 800b1ca:	459a      	cmp	sl, r3
 800b1cc:	d1a4      	bne.n	800b118 <_dtoa_r+0xa60>
 800b1ce:	9b04      	ldr	r3, [sp, #16]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	9304      	str	r3, [sp, #16]
 800b1d4:	2331      	movs	r3, #49	@ 0x31
 800b1d6:	f88a 3000 	strb.w	r3, [sl]
 800b1da:	e5b9      	b.n	800ad50 <_dtoa_r+0x698>
 800b1dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b23c <_dtoa_r+0xb84>
 800b1e2:	b11b      	cbz	r3, 800b1ec <_dtoa_r+0xb34>
 800b1e4:	f10a 0308 	add.w	r3, sl, #8
 800b1e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b1ea:	6013      	str	r3, [r2, #0]
 800b1ec:	4650      	mov	r0, sl
 800b1ee:	b019      	add	sp, #100	@ 0x64
 800b1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	f77f ae37 	ble.w	800ae6a <_dtoa_r+0x7b2>
 800b1fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800b200:	2001      	movs	r0, #1
 800b202:	e655      	b.n	800aeb0 <_dtoa_r+0x7f8>
 800b204:	9b00      	ldr	r3, [sp, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	f77f aed6 	ble.w	800afb8 <_dtoa_r+0x900>
 800b20c:	4656      	mov	r6, sl
 800b20e:	4621      	mov	r1, r4
 800b210:	4648      	mov	r0, r9
 800b212:	f7ff f9c8 	bl	800a5a6 <quorem>
 800b216:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b21a:	f806 8b01 	strb.w	r8, [r6], #1
 800b21e:	9b00      	ldr	r3, [sp, #0]
 800b220:	eba6 020a 	sub.w	r2, r6, sl
 800b224:	4293      	cmp	r3, r2
 800b226:	ddb3      	ble.n	800b190 <_dtoa_r+0xad8>
 800b228:	4649      	mov	r1, r9
 800b22a:	2300      	movs	r3, #0
 800b22c:	220a      	movs	r2, #10
 800b22e:	4658      	mov	r0, fp
 800b230:	f000 f968 	bl	800b504 <__multadd>
 800b234:	4681      	mov	r9, r0
 800b236:	e7ea      	b.n	800b20e <_dtoa_r+0xb56>
 800b238:	0800c7e0 	.word	0x0800c7e0
 800b23c:	0800c764 	.word	0x0800c764

0800b240 <_free_r>:
 800b240:	b538      	push	{r3, r4, r5, lr}
 800b242:	4605      	mov	r5, r0
 800b244:	2900      	cmp	r1, #0
 800b246:	d041      	beq.n	800b2cc <_free_r+0x8c>
 800b248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b24c:	1f0c      	subs	r4, r1, #4
 800b24e:	2b00      	cmp	r3, #0
 800b250:	bfb8      	it	lt
 800b252:	18e4      	addlt	r4, r4, r3
 800b254:	f000 f8e8 	bl	800b428 <__malloc_lock>
 800b258:	4a1d      	ldr	r2, [pc, #116]	@ (800b2d0 <_free_r+0x90>)
 800b25a:	6813      	ldr	r3, [r2, #0]
 800b25c:	b933      	cbnz	r3, 800b26c <_free_r+0x2c>
 800b25e:	6063      	str	r3, [r4, #4]
 800b260:	6014      	str	r4, [r2, #0]
 800b262:	4628      	mov	r0, r5
 800b264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b268:	f000 b8e4 	b.w	800b434 <__malloc_unlock>
 800b26c:	42a3      	cmp	r3, r4
 800b26e:	d908      	bls.n	800b282 <_free_r+0x42>
 800b270:	6820      	ldr	r0, [r4, #0]
 800b272:	1821      	adds	r1, r4, r0
 800b274:	428b      	cmp	r3, r1
 800b276:	bf01      	itttt	eq
 800b278:	6819      	ldreq	r1, [r3, #0]
 800b27a:	685b      	ldreq	r3, [r3, #4]
 800b27c:	1809      	addeq	r1, r1, r0
 800b27e:	6021      	streq	r1, [r4, #0]
 800b280:	e7ed      	b.n	800b25e <_free_r+0x1e>
 800b282:	461a      	mov	r2, r3
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	b10b      	cbz	r3, 800b28c <_free_r+0x4c>
 800b288:	42a3      	cmp	r3, r4
 800b28a:	d9fa      	bls.n	800b282 <_free_r+0x42>
 800b28c:	6811      	ldr	r1, [r2, #0]
 800b28e:	1850      	adds	r0, r2, r1
 800b290:	42a0      	cmp	r0, r4
 800b292:	d10b      	bne.n	800b2ac <_free_r+0x6c>
 800b294:	6820      	ldr	r0, [r4, #0]
 800b296:	4401      	add	r1, r0
 800b298:	1850      	adds	r0, r2, r1
 800b29a:	4283      	cmp	r3, r0
 800b29c:	6011      	str	r1, [r2, #0]
 800b29e:	d1e0      	bne.n	800b262 <_free_r+0x22>
 800b2a0:	6818      	ldr	r0, [r3, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	6053      	str	r3, [r2, #4]
 800b2a6:	4408      	add	r0, r1
 800b2a8:	6010      	str	r0, [r2, #0]
 800b2aa:	e7da      	b.n	800b262 <_free_r+0x22>
 800b2ac:	d902      	bls.n	800b2b4 <_free_r+0x74>
 800b2ae:	230c      	movs	r3, #12
 800b2b0:	602b      	str	r3, [r5, #0]
 800b2b2:	e7d6      	b.n	800b262 <_free_r+0x22>
 800b2b4:	6820      	ldr	r0, [r4, #0]
 800b2b6:	1821      	adds	r1, r4, r0
 800b2b8:	428b      	cmp	r3, r1
 800b2ba:	bf04      	itt	eq
 800b2bc:	6819      	ldreq	r1, [r3, #0]
 800b2be:	685b      	ldreq	r3, [r3, #4]
 800b2c0:	6063      	str	r3, [r4, #4]
 800b2c2:	bf04      	itt	eq
 800b2c4:	1809      	addeq	r1, r1, r0
 800b2c6:	6021      	streq	r1, [r4, #0]
 800b2c8:	6054      	str	r4, [r2, #4]
 800b2ca:	e7ca      	b.n	800b262 <_free_r+0x22>
 800b2cc:	bd38      	pop	{r3, r4, r5, pc}
 800b2ce:	bf00      	nop
 800b2d0:	200008f0 	.word	0x200008f0

0800b2d4 <malloc>:
 800b2d4:	4b02      	ldr	r3, [pc, #8]	@ (800b2e0 <malloc+0xc>)
 800b2d6:	4601      	mov	r1, r0
 800b2d8:	6818      	ldr	r0, [r3, #0]
 800b2da:	f000 b825 	b.w	800b328 <_malloc_r>
 800b2de:	bf00      	nop
 800b2e0:	20000018 	.word	0x20000018

0800b2e4 <sbrk_aligned>:
 800b2e4:	b570      	push	{r4, r5, r6, lr}
 800b2e6:	4e0f      	ldr	r6, [pc, #60]	@ (800b324 <sbrk_aligned+0x40>)
 800b2e8:	460c      	mov	r4, r1
 800b2ea:	6831      	ldr	r1, [r6, #0]
 800b2ec:	4605      	mov	r5, r0
 800b2ee:	b911      	cbnz	r1, 800b2f6 <sbrk_aligned+0x12>
 800b2f0:	f000 fe46 	bl	800bf80 <_sbrk_r>
 800b2f4:	6030      	str	r0, [r6, #0]
 800b2f6:	4621      	mov	r1, r4
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	f000 fe41 	bl	800bf80 <_sbrk_r>
 800b2fe:	1c43      	adds	r3, r0, #1
 800b300:	d103      	bne.n	800b30a <sbrk_aligned+0x26>
 800b302:	f04f 34ff 	mov.w	r4, #4294967295
 800b306:	4620      	mov	r0, r4
 800b308:	bd70      	pop	{r4, r5, r6, pc}
 800b30a:	1cc4      	adds	r4, r0, #3
 800b30c:	f024 0403 	bic.w	r4, r4, #3
 800b310:	42a0      	cmp	r0, r4
 800b312:	d0f8      	beq.n	800b306 <sbrk_aligned+0x22>
 800b314:	1a21      	subs	r1, r4, r0
 800b316:	4628      	mov	r0, r5
 800b318:	f000 fe32 	bl	800bf80 <_sbrk_r>
 800b31c:	3001      	adds	r0, #1
 800b31e:	d1f2      	bne.n	800b306 <sbrk_aligned+0x22>
 800b320:	e7ef      	b.n	800b302 <sbrk_aligned+0x1e>
 800b322:	bf00      	nop
 800b324:	200008ec 	.word	0x200008ec

0800b328 <_malloc_r>:
 800b328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b32c:	1ccd      	adds	r5, r1, #3
 800b32e:	f025 0503 	bic.w	r5, r5, #3
 800b332:	3508      	adds	r5, #8
 800b334:	2d0c      	cmp	r5, #12
 800b336:	bf38      	it	cc
 800b338:	250c      	movcc	r5, #12
 800b33a:	2d00      	cmp	r5, #0
 800b33c:	4606      	mov	r6, r0
 800b33e:	db01      	blt.n	800b344 <_malloc_r+0x1c>
 800b340:	42a9      	cmp	r1, r5
 800b342:	d904      	bls.n	800b34e <_malloc_r+0x26>
 800b344:	230c      	movs	r3, #12
 800b346:	6033      	str	r3, [r6, #0]
 800b348:	2000      	movs	r0, #0
 800b34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b34e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b424 <_malloc_r+0xfc>
 800b352:	f000 f869 	bl	800b428 <__malloc_lock>
 800b356:	f8d8 3000 	ldr.w	r3, [r8]
 800b35a:	461c      	mov	r4, r3
 800b35c:	bb44      	cbnz	r4, 800b3b0 <_malloc_r+0x88>
 800b35e:	4629      	mov	r1, r5
 800b360:	4630      	mov	r0, r6
 800b362:	f7ff ffbf 	bl	800b2e4 <sbrk_aligned>
 800b366:	1c43      	adds	r3, r0, #1
 800b368:	4604      	mov	r4, r0
 800b36a:	d158      	bne.n	800b41e <_malloc_r+0xf6>
 800b36c:	f8d8 4000 	ldr.w	r4, [r8]
 800b370:	4627      	mov	r7, r4
 800b372:	2f00      	cmp	r7, #0
 800b374:	d143      	bne.n	800b3fe <_malloc_r+0xd6>
 800b376:	2c00      	cmp	r4, #0
 800b378:	d04b      	beq.n	800b412 <_malloc_r+0xea>
 800b37a:	6823      	ldr	r3, [r4, #0]
 800b37c:	4639      	mov	r1, r7
 800b37e:	4630      	mov	r0, r6
 800b380:	eb04 0903 	add.w	r9, r4, r3
 800b384:	f000 fdfc 	bl	800bf80 <_sbrk_r>
 800b388:	4581      	cmp	r9, r0
 800b38a:	d142      	bne.n	800b412 <_malloc_r+0xea>
 800b38c:	6821      	ldr	r1, [r4, #0]
 800b38e:	1a6d      	subs	r5, r5, r1
 800b390:	4629      	mov	r1, r5
 800b392:	4630      	mov	r0, r6
 800b394:	f7ff ffa6 	bl	800b2e4 <sbrk_aligned>
 800b398:	3001      	adds	r0, #1
 800b39a:	d03a      	beq.n	800b412 <_malloc_r+0xea>
 800b39c:	6823      	ldr	r3, [r4, #0]
 800b39e:	442b      	add	r3, r5
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b3a6:	685a      	ldr	r2, [r3, #4]
 800b3a8:	bb62      	cbnz	r2, 800b404 <_malloc_r+0xdc>
 800b3aa:	f8c8 7000 	str.w	r7, [r8]
 800b3ae:	e00f      	b.n	800b3d0 <_malloc_r+0xa8>
 800b3b0:	6822      	ldr	r2, [r4, #0]
 800b3b2:	1b52      	subs	r2, r2, r5
 800b3b4:	d420      	bmi.n	800b3f8 <_malloc_r+0xd0>
 800b3b6:	2a0b      	cmp	r2, #11
 800b3b8:	d917      	bls.n	800b3ea <_malloc_r+0xc2>
 800b3ba:	1961      	adds	r1, r4, r5
 800b3bc:	42a3      	cmp	r3, r4
 800b3be:	6025      	str	r5, [r4, #0]
 800b3c0:	bf18      	it	ne
 800b3c2:	6059      	strne	r1, [r3, #4]
 800b3c4:	6863      	ldr	r3, [r4, #4]
 800b3c6:	bf08      	it	eq
 800b3c8:	f8c8 1000 	streq.w	r1, [r8]
 800b3cc:	5162      	str	r2, [r4, r5]
 800b3ce:	604b      	str	r3, [r1, #4]
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	f000 f82f 	bl	800b434 <__malloc_unlock>
 800b3d6:	f104 000b 	add.w	r0, r4, #11
 800b3da:	1d23      	adds	r3, r4, #4
 800b3dc:	f020 0007 	bic.w	r0, r0, #7
 800b3e0:	1ac2      	subs	r2, r0, r3
 800b3e2:	bf1c      	itt	ne
 800b3e4:	1a1b      	subne	r3, r3, r0
 800b3e6:	50a3      	strne	r3, [r4, r2]
 800b3e8:	e7af      	b.n	800b34a <_malloc_r+0x22>
 800b3ea:	6862      	ldr	r2, [r4, #4]
 800b3ec:	42a3      	cmp	r3, r4
 800b3ee:	bf0c      	ite	eq
 800b3f0:	f8c8 2000 	streq.w	r2, [r8]
 800b3f4:	605a      	strne	r2, [r3, #4]
 800b3f6:	e7eb      	b.n	800b3d0 <_malloc_r+0xa8>
 800b3f8:	4623      	mov	r3, r4
 800b3fa:	6864      	ldr	r4, [r4, #4]
 800b3fc:	e7ae      	b.n	800b35c <_malloc_r+0x34>
 800b3fe:	463c      	mov	r4, r7
 800b400:	687f      	ldr	r7, [r7, #4]
 800b402:	e7b6      	b.n	800b372 <_malloc_r+0x4a>
 800b404:	461a      	mov	r2, r3
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	42a3      	cmp	r3, r4
 800b40a:	d1fb      	bne.n	800b404 <_malloc_r+0xdc>
 800b40c:	2300      	movs	r3, #0
 800b40e:	6053      	str	r3, [r2, #4]
 800b410:	e7de      	b.n	800b3d0 <_malloc_r+0xa8>
 800b412:	230c      	movs	r3, #12
 800b414:	6033      	str	r3, [r6, #0]
 800b416:	4630      	mov	r0, r6
 800b418:	f000 f80c 	bl	800b434 <__malloc_unlock>
 800b41c:	e794      	b.n	800b348 <_malloc_r+0x20>
 800b41e:	6005      	str	r5, [r0, #0]
 800b420:	e7d6      	b.n	800b3d0 <_malloc_r+0xa8>
 800b422:	bf00      	nop
 800b424:	200008f0 	.word	0x200008f0

0800b428 <__malloc_lock>:
 800b428:	4801      	ldr	r0, [pc, #4]	@ (800b430 <__malloc_lock+0x8>)
 800b42a:	f7ff b8ba 	b.w	800a5a2 <__retarget_lock_acquire_recursive>
 800b42e:	bf00      	nop
 800b430:	200008e8 	.word	0x200008e8

0800b434 <__malloc_unlock>:
 800b434:	4801      	ldr	r0, [pc, #4]	@ (800b43c <__malloc_unlock+0x8>)
 800b436:	f7ff b8b5 	b.w	800a5a4 <__retarget_lock_release_recursive>
 800b43a:	bf00      	nop
 800b43c:	200008e8 	.word	0x200008e8

0800b440 <_Balloc>:
 800b440:	b570      	push	{r4, r5, r6, lr}
 800b442:	69c6      	ldr	r6, [r0, #28]
 800b444:	4604      	mov	r4, r0
 800b446:	460d      	mov	r5, r1
 800b448:	b976      	cbnz	r6, 800b468 <_Balloc+0x28>
 800b44a:	2010      	movs	r0, #16
 800b44c:	f7ff ff42 	bl	800b2d4 <malloc>
 800b450:	4602      	mov	r2, r0
 800b452:	61e0      	str	r0, [r4, #28]
 800b454:	b920      	cbnz	r0, 800b460 <_Balloc+0x20>
 800b456:	4b18      	ldr	r3, [pc, #96]	@ (800b4b8 <_Balloc+0x78>)
 800b458:	4818      	ldr	r0, [pc, #96]	@ (800b4bc <_Balloc+0x7c>)
 800b45a:	216b      	movs	r1, #107	@ 0x6b
 800b45c:	f000 fdae 	bl	800bfbc <__assert_func>
 800b460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b464:	6006      	str	r6, [r0, #0]
 800b466:	60c6      	str	r6, [r0, #12]
 800b468:	69e6      	ldr	r6, [r4, #28]
 800b46a:	68f3      	ldr	r3, [r6, #12]
 800b46c:	b183      	cbz	r3, 800b490 <_Balloc+0x50>
 800b46e:	69e3      	ldr	r3, [r4, #28]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b476:	b9b8      	cbnz	r0, 800b4a8 <_Balloc+0x68>
 800b478:	2101      	movs	r1, #1
 800b47a:	fa01 f605 	lsl.w	r6, r1, r5
 800b47e:	1d72      	adds	r2, r6, #5
 800b480:	0092      	lsls	r2, r2, #2
 800b482:	4620      	mov	r0, r4
 800b484:	f000 fdb8 	bl	800bff8 <_calloc_r>
 800b488:	b160      	cbz	r0, 800b4a4 <_Balloc+0x64>
 800b48a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b48e:	e00e      	b.n	800b4ae <_Balloc+0x6e>
 800b490:	2221      	movs	r2, #33	@ 0x21
 800b492:	2104      	movs	r1, #4
 800b494:	4620      	mov	r0, r4
 800b496:	f000 fdaf 	bl	800bff8 <_calloc_r>
 800b49a:	69e3      	ldr	r3, [r4, #28]
 800b49c:	60f0      	str	r0, [r6, #12]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1e4      	bne.n	800b46e <_Balloc+0x2e>
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	bd70      	pop	{r4, r5, r6, pc}
 800b4a8:	6802      	ldr	r2, [r0, #0]
 800b4aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4b4:	e7f7      	b.n	800b4a6 <_Balloc+0x66>
 800b4b6:	bf00      	nop
 800b4b8:	0800c771 	.word	0x0800c771
 800b4bc:	0800c7f1 	.word	0x0800c7f1

0800b4c0 <_Bfree>:
 800b4c0:	b570      	push	{r4, r5, r6, lr}
 800b4c2:	69c6      	ldr	r6, [r0, #28]
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	b976      	cbnz	r6, 800b4e8 <_Bfree+0x28>
 800b4ca:	2010      	movs	r0, #16
 800b4cc:	f7ff ff02 	bl	800b2d4 <malloc>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	61e8      	str	r0, [r5, #28]
 800b4d4:	b920      	cbnz	r0, 800b4e0 <_Bfree+0x20>
 800b4d6:	4b09      	ldr	r3, [pc, #36]	@ (800b4fc <_Bfree+0x3c>)
 800b4d8:	4809      	ldr	r0, [pc, #36]	@ (800b500 <_Bfree+0x40>)
 800b4da:	218f      	movs	r1, #143	@ 0x8f
 800b4dc:	f000 fd6e 	bl	800bfbc <__assert_func>
 800b4e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4e4:	6006      	str	r6, [r0, #0]
 800b4e6:	60c6      	str	r6, [r0, #12]
 800b4e8:	b13c      	cbz	r4, 800b4fa <_Bfree+0x3a>
 800b4ea:	69eb      	ldr	r3, [r5, #28]
 800b4ec:	6862      	ldr	r2, [r4, #4]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4f4:	6021      	str	r1, [r4, #0]
 800b4f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4fa:	bd70      	pop	{r4, r5, r6, pc}
 800b4fc:	0800c771 	.word	0x0800c771
 800b500:	0800c7f1 	.word	0x0800c7f1

0800b504 <__multadd>:
 800b504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b508:	690d      	ldr	r5, [r1, #16]
 800b50a:	4607      	mov	r7, r0
 800b50c:	460c      	mov	r4, r1
 800b50e:	461e      	mov	r6, r3
 800b510:	f101 0c14 	add.w	ip, r1, #20
 800b514:	2000      	movs	r0, #0
 800b516:	f8dc 3000 	ldr.w	r3, [ip]
 800b51a:	b299      	uxth	r1, r3
 800b51c:	fb02 6101 	mla	r1, r2, r1, r6
 800b520:	0c1e      	lsrs	r6, r3, #16
 800b522:	0c0b      	lsrs	r3, r1, #16
 800b524:	fb02 3306 	mla	r3, r2, r6, r3
 800b528:	b289      	uxth	r1, r1
 800b52a:	3001      	adds	r0, #1
 800b52c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b530:	4285      	cmp	r5, r0
 800b532:	f84c 1b04 	str.w	r1, [ip], #4
 800b536:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b53a:	dcec      	bgt.n	800b516 <__multadd+0x12>
 800b53c:	b30e      	cbz	r6, 800b582 <__multadd+0x7e>
 800b53e:	68a3      	ldr	r3, [r4, #8]
 800b540:	42ab      	cmp	r3, r5
 800b542:	dc19      	bgt.n	800b578 <__multadd+0x74>
 800b544:	6861      	ldr	r1, [r4, #4]
 800b546:	4638      	mov	r0, r7
 800b548:	3101      	adds	r1, #1
 800b54a:	f7ff ff79 	bl	800b440 <_Balloc>
 800b54e:	4680      	mov	r8, r0
 800b550:	b928      	cbnz	r0, 800b55e <__multadd+0x5a>
 800b552:	4602      	mov	r2, r0
 800b554:	4b0c      	ldr	r3, [pc, #48]	@ (800b588 <__multadd+0x84>)
 800b556:	480d      	ldr	r0, [pc, #52]	@ (800b58c <__multadd+0x88>)
 800b558:	21ba      	movs	r1, #186	@ 0xba
 800b55a:	f000 fd2f 	bl	800bfbc <__assert_func>
 800b55e:	6922      	ldr	r2, [r4, #16]
 800b560:	3202      	adds	r2, #2
 800b562:	f104 010c 	add.w	r1, r4, #12
 800b566:	0092      	lsls	r2, r2, #2
 800b568:	300c      	adds	r0, #12
 800b56a:	f000 fd19 	bl	800bfa0 <memcpy>
 800b56e:	4621      	mov	r1, r4
 800b570:	4638      	mov	r0, r7
 800b572:	f7ff ffa5 	bl	800b4c0 <_Bfree>
 800b576:	4644      	mov	r4, r8
 800b578:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b57c:	3501      	adds	r5, #1
 800b57e:	615e      	str	r6, [r3, #20]
 800b580:	6125      	str	r5, [r4, #16]
 800b582:	4620      	mov	r0, r4
 800b584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b588:	0800c7e0 	.word	0x0800c7e0
 800b58c:	0800c7f1 	.word	0x0800c7f1

0800b590 <__hi0bits>:
 800b590:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b594:	4603      	mov	r3, r0
 800b596:	bf36      	itet	cc
 800b598:	0403      	lslcc	r3, r0, #16
 800b59a:	2000      	movcs	r0, #0
 800b59c:	2010      	movcc	r0, #16
 800b59e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5a2:	bf3c      	itt	cc
 800b5a4:	021b      	lslcc	r3, r3, #8
 800b5a6:	3008      	addcc	r0, #8
 800b5a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5ac:	bf3c      	itt	cc
 800b5ae:	011b      	lslcc	r3, r3, #4
 800b5b0:	3004      	addcc	r0, #4
 800b5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5b6:	bf3c      	itt	cc
 800b5b8:	009b      	lslcc	r3, r3, #2
 800b5ba:	3002      	addcc	r0, #2
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	db05      	blt.n	800b5cc <__hi0bits+0x3c>
 800b5c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b5c4:	f100 0001 	add.w	r0, r0, #1
 800b5c8:	bf08      	it	eq
 800b5ca:	2020      	moveq	r0, #32
 800b5cc:	4770      	bx	lr

0800b5ce <__lo0bits>:
 800b5ce:	6803      	ldr	r3, [r0, #0]
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	f013 0007 	ands.w	r0, r3, #7
 800b5d6:	d00b      	beq.n	800b5f0 <__lo0bits+0x22>
 800b5d8:	07d9      	lsls	r1, r3, #31
 800b5da:	d421      	bmi.n	800b620 <__lo0bits+0x52>
 800b5dc:	0798      	lsls	r0, r3, #30
 800b5de:	bf49      	itett	mi
 800b5e0:	085b      	lsrmi	r3, r3, #1
 800b5e2:	089b      	lsrpl	r3, r3, #2
 800b5e4:	2001      	movmi	r0, #1
 800b5e6:	6013      	strmi	r3, [r2, #0]
 800b5e8:	bf5c      	itt	pl
 800b5ea:	6013      	strpl	r3, [r2, #0]
 800b5ec:	2002      	movpl	r0, #2
 800b5ee:	4770      	bx	lr
 800b5f0:	b299      	uxth	r1, r3
 800b5f2:	b909      	cbnz	r1, 800b5f8 <__lo0bits+0x2a>
 800b5f4:	0c1b      	lsrs	r3, r3, #16
 800b5f6:	2010      	movs	r0, #16
 800b5f8:	b2d9      	uxtb	r1, r3
 800b5fa:	b909      	cbnz	r1, 800b600 <__lo0bits+0x32>
 800b5fc:	3008      	adds	r0, #8
 800b5fe:	0a1b      	lsrs	r3, r3, #8
 800b600:	0719      	lsls	r1, r3, #28
 800b602:	bf04      	itt	eq
 800b604:	091b      	lsreq	r3, r3, #4
 800b606:	3004      	addeq	r0, #4
 800b608:	0799      	lsls	r1, r3, #30
 800b60a:	bf04      	itt	eq
 800b60c:	089b      	lsreq	r3, r3, #2
 800b60e:	3002      	addeq	r0, #2
 800b610:	07d9      	lsls	r1, r3, #31
 800b612:	d403      	bmi.n	800b61c <__lo0bits+0x4e>
 800b614:	085b      	lsrs	r3, r3, #1
 800b616:	f100 0001 	add.w	r0, r0, #1
 800b61a:	d003      	beq.n	800b624 <__lo0bits+0x56>
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	4770      	bx	lr
 800b620:	2000      	movs	r0, #0
 800b622:	4770      	bx	lr
 800b624:	2020      	movs	r0, #32
 800b626:	4770      	bx	lr

0800b628 <__i2b>:
 800b628:	b510      	push	{r4, lr}
 800b62a:	460c      	mov	r4, r1
 800b62c:	2101      	movs	r1, #1
 800b62e:	f7ff ff07 	bl	800b440 <_Balloc>
 800b632:	4602      	mov	r2, r0
 800b634:	b928      	cbnz	r0, 800b642 <__i2b+0x1a>
 800b636:	4b05      	ldr	r3, [pc, #20]	@ (800b64c <__i2b+0x24>)
 800b638:	4805      	ldr	r0, [pc, #20]	@ (800b650 <__i2b+0x28>)
 800b63a:	f240 1145 	movw	r1, #325	@ 0x145
 800b63e:	f000 fcbd 	bl	800bfbc <__assert_func>
 800b642:	2301      	movs	r3, #1
 800b644:	6144      	str	r4, [r0, #20]
 800b646:	6103      	str	r3, [r0, #16]
 800b648:	bd10      	pop	{r4, pc}
 800b64a:	bf00      	nop
 800b64c:	0800c7e0 	.word	0x0800c7e0
 800b650:	0800c7f1 	.word	0x0800c7f1

0800b654 <__multiply>:
 800b654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b658:	4614      	mov	r4, r2
 800b65a:	690a      	ldr	r2, [r1, #16]
 800b65c:	6923      	ldr	r3, [r4, #16]
 800b65e:	429a      	cmp	r2, r3
 800b660:	bfa8      	it	ge
 800b662:	4623      	movge	r3, r4
 800b664:	460f      	mov	r7, r1
 800b666:	bfa4      	itt	ge
 800b668:	460c      	movge	r4, r1
 800b66a:	461f      	movge	r7, r3
 800b66c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b670:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b674:	68a3      	ldr	r3, [r4, #8]
 800b676:	6861      	ldr	r1, [r4, #4]
 800b678:	eb0a 0609 	add.w	r6, sl, r9
 800b67c:	42b3      	cmp	r3, r6
 800b67e:	b085      	sub	sp, #20
 800b680:	bfb8      	it	lt
 800b682:	3101      	addlt	r1, #1
 800b684:	f7ff fedc 	bl	800b440 <_Balloc>
 800b688:	b930      	cbnz	r0, 800b698 <__multiply+0x44>
 800b68a:	4602      	mov	r2, r0
 800b68c:	4b44      	ldr	r3, [pc, #272]	@ (800b7a0 <__multiply+0x14c>)
 800b68e:	4845      	ldr	r0, [pc, #276]	@ (800b7a4 <__multiply+0x150>)
 800b690:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b694:	f000 fc92 	bl	800bfbc <__assert_func>
 800b698:	f100 0514 	add.w	r5, r0, #20
 800b69c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6a0:	462b      	mov	r3, r5
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	4543      	cmp	r3, r8
 800b6a6:	d321      	bcc.n	800b6ec <__multiply+0x98>
 800b6a8:	f107 0114 	add.w	r1, r7, #20
 800b6ac:	f104 0214 	add.w	r2, r4, #20
 800b6b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b6b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b6b8:	9302      	str	r3, [sp, #8]
 800b6ba:	1b13      	subs	r3, r2, r4
 800b6bc:	3b15      	subs	r3, #21
 800b6be:	f023 0303 	bic.w	r3, r3, #3
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	f104 0715 	add.w	r7, r4, #21
 800b6c8:	42ba      	cmp	r2, r7
 800b6ca:	bf38      	it	cc
 800b6cc:	2304      	movcc	r3, #4
 800b6ce:	9301      	str	r3, [sp, #4]
 800b6d0:	9b02      	ldr	r3, [sp, #8]
 800b6d2:	9103      	str	r1, [sp, #12]
 800b6d4:	428b      	cmp	r3, r1
 800b6d6:	d80c      	bhi.n	800b6f2 <__multiply+0x9e>
 800b6d8:	2e00      	cmp	r6, #0
 800b6da:	dd03      	ble.n	800b6e4 <__multiply+0x90>
 800b6dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d05b      	beq.n	800b79c <__multiply+0x148>
 800b6e4:	6106      	str	r6, [r0, #16]
 800b6e6:	b005      	add	sp, #20
 800b6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ec:	f843 2b04 	str.w	r2, [r3], #4
 800b6f0:	e7d8      	b.n	800b6a4 <__multiply+0x50>
 800b6f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800b6f6:	f1ba 0f00 	cmp.w	sl, #0
 800b6fa:	d024      	beq.n	800b746 <__multiply+0xf2>
 800b6fc:	f104 0e14 	add.w	lr, r4, #20
 800b700:	46a9      	mov	r9, r5
 800b702:	f04f 0c00 	mov.w	ip, #0
 800b706:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b70a:	f8d9 3000 	ldr.w	r3, [r9]
 800b70e:	fa1f fb87 	uxth.w	fp, r7
 800b712:	b29b      	uxth	r3, r3
 800b714:	fb0a 330b 	mla	r3, sl, fp, r3
 800b718:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b71c:	f8d9 7000 	ldr.w	r7, [r9]
 800b720:	4463      	add	r3, ip
 800b722:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b726:	fb0a c70b 	mla	r7, sl, fp, ip
 800b72a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b72e:	b29b      	uxth	r3, r3
 800b730:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b734:	4572      	cmp	r2, lr
 800b736:	f849 3b04 	str.w	r3, [r9], #4
 800b73a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b73e:	d8e2      	bhi.n	800b706 <__multiply+0xb2>
 800b740:	9b01      	ldr	r3, [sp, #4]
 800b742:	f845 c003 	str.w	ip, [r5, r3]
 800b746:	9b03      	ldr	r3, [sp, #12]
 800b748:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b74c:	3104      	adds	r1, #4
 800b74e:	f1b9 0f00 	cmp.w	r9, #0
 800b752:	d021      	beq.n	800b798 <__multiply+0x144>
 800b754:	682b      	ldr	r3, [r5, #0]
 800b756:	f104 0c14 	add.w	ip, r4, #20
 800b75a:	46ae      	mov	lr, r5
 800b75c:	f04f 0a00 	mov.w	sl, #0
 800b760:	f8bc b000 	ldrh.w	fp, [ip]
 800b764:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b768:	fb09 770b 	mla	r7, r9, fp, r7
 800b76c:	4457      	add	r7, sl
 800b76e:	b29b      	uxth	r3, r3
 800b770:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b774:	f84e 3b04 	str.w	r3, [lr], #4
 800b778:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b77c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b780:	f8be 3000 	ldrh.w	r3, [lr]
 800b784:	fb09 330a 	mla	r3, r9, sl, r3
 800b788:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b78c:	4562      	cmp	r2, ip
 800b78e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b792:	d8e5      	bhi.n	800b760 <__multiply+0x10c>
 800b794:	9f01      	ldr	r7, [sp, #4]
 800b796:	51eb      	str	r3, [r5, r7]
 800b798:	3504      	adds	r5, #4
 800b79a:	e799      	b.n	800b6d0 <__multiply+0x7c>
 800b79c:	3e01      	subs	r6, #1
 800b79e:	e79b      	b.n	800b6d8 <__multiply+0x84>
 800b7a0:	0800c7e0 	.word	0x0800c7e0
 800b7a4:	0800c7f1 	.word	0x0800c7f1

0800b7a8 <__pow5mult>:
 800b7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7ac:	4615      	mov	r5, r2
 800b7ae:	f012 0203 	ands.w	r2, r2, #3
 800b7b2:	4607      	mov	r7, r0
 800b7b4:	460e      	mov	r6, r1
 800b7b6:	d007      	beq.n	800b7c8 <__pow5mult+0x20>
 800b7b8:	4c25      	ldr	r4, [pc, #148]	@ (800b850 <__pow5mult+0xa8>)
 800b7ba:	3a01      	subs	r2, #1
 800b7bc:	2300      	movs	r3, #0
 800b7be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7c2:	f7ff fe9f 	bl	800b504 <__multadd>
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	10ad      	asrs	r5, r5, #2
 800b7ca:	d03d      	beq.n	800b848 <__pow5mult+0xa0>
 800b7cc:	69fc      	ldr	r4, [r7, #28]
 800b7ce:	b97c      	cbnz	r4, 800b7f0 <__pow5mult+0x48>
 800b7d0:	2010      	movs	r0, #16
 800b7d2:	f7ff fd7f 	bl	800b2d4 <malloc>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	61f8      	str	r0, [r7, #28]
 800b7da:	b928      	cbnz	r0, 800b7e8 <__pow5mult+0x40>
 800b7dc:	4b1d      	ldr	r3, [pc, #116]	@ (800b854 <__pow5mult+0xac>)
 800b7de:	481e      	ldr	r0, [pc, #120]	@ (800b858 <__pow5mult+0xb0>)
 800b7e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7e4:	f000 fbea 	bl	800bfbc <__assert_func>
 800b7e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7ec:	6004      	str	r4, [r0, #0]
 800b7ee:	60c4      	str	r4, [r0, #12]
 800b7f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b7f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7f8:	b94c      	cbnz	r4, 800b80e <__pow5mult+0x66>
 800b7fa:	f240 2171 	movw	r1, #625	@ 0x271
 800b7fe:	4638      	mov	r0, r7
 800b800:	f7ff ff12 	bl	800b628 <__i2b>
 800b804:	2300      	movs	r3, #0
 800b806:	f8c8 0008 	str.w	r0, [r8, #8]
 800b80a:	4604      	mov	r4, r0
 800b80c:	6003      	str	r3, [r0, #0]
 800b80e:	f04f 0900 	mov.w	r9, #0
 800b812:	07eb      	lsls	r3, r5, #31
 800b814:	d50a      	bpl.n	800b82c <__pow5mult+0x84>
 800b816:	4631      	mov	r1, r6
 800b818:	4622      	mov	r2, r4
 800b81a:	4638      	mov	r0, r7
 800b81c:	f7ff ff1a 	bl	800b654 <__multiply>
 800b820:	4631      	mov	r1, r6
 800b822:	4680      	mov	r8, r0
 800b824:	4638      	mov	r0, r7
 800b826:	f7ff fe4b 	bl	800b4c0 <_Bfree>
 800b82a:	4646      	mov	r6, r8
 800b82c:	106d      	asrs	r5, r5, #1
 800b82e:	d00b      	beq.n	800b848 <__pow5mult+0xa0>
 800b830:	6820      	ldr	r0, [r4, #0]
 800b832:	b938      	cbnz	r0, 800b844 <__pow5mult+0x9c>
 800b834:	4622      	mov	r2, r4
 800b836:	4621      	mov	r1, r4
 800b838:	4638      	mov	r0, r7
 800b83a:	f7ff ff0b 	bl	800b654 <__multiply>
 800b83e:	6020      	str	r0, [r4, #0]
 800b840:	f8c0 9000 	str.w	r9, [r0]
 800b844:	4604      	mov	r4, r0
 800b846:	e7e4      	b.n	800b812 <__pow5mult+0x6a>
 800b848:	4630      	mov	r0, r6
 800b84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b84e:	bf00      	nop
 800b850:	0800c84c 	.word	0x0800c84c
 800b854:	0800c771 	.word	0x0800c771
 800b858:	0800c7f1 	.word	0x0800c7f1

0800b85c <__lshift>:
 800b85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b860:	460c      	mov	r4, r1
 800b862:	6849      	ldr	r1, [r1, #4]
 800b864:	6923      	ldr	r3, [r4, #16]
 800b866:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b86a:	68a3      	ldr	r3, [r4, #8]
 800b86c:	4607      	mov	r7, r0
 800b86e:	4691      	mov	r9, r2
 800b870:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b874:	f108 0601 	add.w	r6, r8, #1
 800b878:	42b3      	cmp	r3, r6
 800b87a:	db0b      	blt.n	800b894 <__lshift+0x38>
 800b87c:	4638      	mov	r0, r7
 800b87e:	f7ff fddf 	bl	800b440 <_Balloc>
 800b882:	4605      	mov	r5, r0
 800b884:	b948      	cbnz	r0, 800b89a <__lshift+0x3e>
 800b886:	4602      	mov	r2, r0
 800b888:	4b28      	ldr	r3, [pc, #160]	@ (800b92c <__lshift+0xd0>)
 800b88a:	4829      	ldr	r0, [pc, #164]	@ (800b930 <__lshift+0xd4>)
 800b88c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b890:	f000 fb94 	bl	800bfbc <__assert_func>
 800b894:	3101      	adds	r1, #1
 800b896:	005b      	lsls	r3, r3, #1
 800b898:	e7ee      	b.n	800b878 <__lshift+0x1c>
 800b89a:	2300      	movs	r3, #0
 800b89c:	f100 0114 	add.w	r1, r0, #20
 800b8a0:	f100 0210 	add.w	r2, r0, #16
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	4553      	cmp	r3, sl
 800b8a8:	db33      	blt.n	800b912 <__lshift+0xb6>
 800b8aa:	6920      	ldr	r0, [r4, #16]
 800b8ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8b0:	f104 0314 	add.w	r3, r4, #20
 800b8b4:	f019 091f 	ands.w	r9, r9, #31
 800b8b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8c0:	d02b      	beq.n	800b91a <__lshift+0xbe>
 800b8c2:	f1c9 0e20 	rsb	lr, r9, #32
 800b8c6:	468a      	mov	sl, r1
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	6818      	ldr	r0, [r3, #0]
 800b8cc:	fa00 f009 	lsl.w	r0, r0, r9
 800b8d0:	4310      	orrs	r0, r2
 800b8d2:	f84a 0b04 	str.w	r0, [sl], #4
 800b8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8da:	459c      	cmp	ip, r3
 800b8dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8e0:	d8f3      	bhi.n	800b8ca <__lshift+0x6e>
 800b8e2:	ebac 0304 	sub.w	r3, ip, r4
 800b8e6:	3b15      	subs	r3, #21
 800b8e8:	f023 0303 	bic.w	r3, r3, #3
 800b8ec:	3304      	adds	r3, #4
 800b8ee:	f104 0015 	add.w	r0, r4, #21
 800b8f2:	4584      	cmp	ip, r0
 800b8f4:	bf38      	it	cc
 800b8f6:	2304      	movcc	r3, #4
 800b8f8:	50ca      	str	r2, [r1, r3]
 800b8fa:	b10a      	cbz	r2, 800b900 <__lshift+0xa4>
 800b8fc:	f108 0602 	add.w	r6, r8, #2
 800b900:	3e01      	subs	r6, #1
 800b902:	4638      	mov	r0, r7
 800b904:	612e      	str	r6, [r5, #16]
 800b906:	4621      	mov	r1, r4
 800b908:	f7ff fdda 	bl	800b4c0 <_Bfree>
 800b90c:	4628      	mov	r0, r5
 800b90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b912:	f842 0f04 	str.w	r0, [r2, #4]!
 800b916:	3301      	adds	r3, #1
 800b918:	e7c5      	b.n	800b8a6 <__lshift+0x4a>
 800b91a:	3904      	subs	r1, #4
 800b91c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b920:	f841 2f04 	str.w	r2, [r1, #4]!
 800b924:	459c      	cmp	ip, r3
 800b926:	d8f9      	bhi.n	800b91c <__lshift+0xc0>
 800b928:	e7ea      	b.n	800b900 <__lshift+0xa4>
 800b92a:	bf00      	nop
 800b92c:	0800c7e0 	.word	0x0800c7e0
 800b930:	0800c7f1 	.word	0x0800c7f1

0800b934 <__mcmp>:
 800b934:	690a      	ldr	r2, [r1, #16]
 800b936:	4603      	mov	r3, r0
 800b938:	6900      	ldr	r0, [r0, #16]
 800b93a:	1a80      	subs	r0, r0, r2
 800b93c:	b530      	push	{r4, r5, lr}
 800b93e:	d10e      	bne.n	800b95e <__mcmp+0x2a>
 800b940:	3314      	adds	r3, #20
 800b942:	3114      	adds	r1, #20
 800b944:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b948:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b94c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b950:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b954:	4295      	cmp	r5, r2
 800b956:	d003      	beq.n	800b960 <__mcmp+0x2c>
 800b958:	d205      	bcs.n	800b966 <__mcmp+0x32>
 800b95a:	f04f 30ff 	mov.w	r0, #4294967295
 800b95e:	bd30      	pop	{r4, r5, pc}
 800b960:	42a3      	cmp	r3, r4
 800b962:	d3f3      	bcc.n	800b94c <__mcmp+0x18>
 800b964:	e7fb      	b.n	800b95e <__mcmp+0x2a>
 800b966:	2001      	movs	r0, #1
 800b968:	e7f9      	b.n	800b95e <__mcmp+0x2a>
	...

0800b96c <__mdiff>:
 800b96c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b970:	4689      	mov	r9, r1
 800b972:	4606      	mov	r6, r0
 800b974:	4611      	mov	r1, r2
 800b976:	4648      	mov	r0, r9
 800b978:	4614      	mov	r4, r2
 800b97a:	f7ff ffdb 	bl	800b934 <__mcmp>
 800b97e:	1e05      	subs	r5, r0, #0
 800b980:	d112      	bne.n	800b9a8 <__mdiff+0x3c>
 800b982:	4629      	mov	r1, r5
 800b984:	4630      	mov	r0, r6
 800b986:	f7ff fd5b 	bl	800b440 <_Balloc>
 800b98a:	4602      	mov	r2, r0
 800b98c:	b928      	cbnz	r0, 800b99a <__mdiff+0x2e>
 800b98e:	4b3f      	ldr	r3, [pc, #252]	@ (800ba8c <__mdiff+0x120>)
 800b990:	f240 2137 	movw	r1, #567	@ 0x237
 800b994:	483e      	ldr	r0, [pc, #248]	@ (800ba90 <__mdiff+0x124>)
 800b996:	f000 fb11 	bl	800bfbc <__assert_func>
 800b99a:	2301      	movs	r3, #1
 800b99c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	b003      	add	sp, #12
 800b9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a8:	bfbc      	itt	lt
 800b9aa:	464b      	movlt	r3, r9
 800b9ac:	46a1      	movlt	r9, r4
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b9b4:	bfba      	itte	lt
 800b9b6:	461c      	movlt	r4, r3
 800b9b8:	2501      	movlt	r5, #1
 800b9ba:	2500      	movge	r5, #0
 800b9bc:	f7ff fd40 	bl	800b440 <_Balloc>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	b918      	cbnz	r0, 800b9cc <__mdiff+0x60>
 800b9c4:	4b31      	ldr	r3, [pc, #196]	@ (800ba8c <__mdiff+0x120>)
 800b9c6:	f240 2145 	movw	r1, #581	@ 0x245
 800b9ca:	e7e3      	b.n	800b994 <__mdiff+0x28>
 800b9cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b9d0:	6926      	ldr	r6, [r4, #16]
 800b9d2:	60c5      	str	r5, [r0, #12]
 800b9d4:	f109 0310 	add.w	r3, r9, #16
 800b9d8:	f109 0514 	add.w	r5, r9, #20
 800b9dc:	f104 0e14 	add.w	lr, r4, #20
 800b9e0:	f100 0b14 	add.w	fp, r0, #20
 800b9e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9ec:	9301      	str	r3, [sp, #4]
 800b9ee:	46d9      	mov	r9, fp
 800b9f0:	f04f 0c00 	mov.w	ip, #0
 800b9f4:	9b01      	ldr	r3, [sp, #4]
 800b9f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b9fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b9fe:	9301      	str	r3, [sp, #4]
 800ba00:	fa1f f38a 	uxth.w	r3, sl
 800ba04:	4619      	mov	r1, r3
 800ba06:	b283      	uxth	r3, r0
 800ba08:	1acb      	subs	r3, r1, r3
 800ba0a:	0c00      	lsrs	r0, r0, #16
 800ba0c:	4463      	add	r3, ip
 800ba0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba1c:	4576      	cmp	r6, lr
 800ba1e:	f849 3b04 	str.w	r3, [r9], #4
 800ba22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba26:	d8e5      	bhi.n	800b9f4 <__mdiff+0x88>
 800ba28:	1b33      	subs	r3, r6, r4
 800ba2a:	3b15      	subs	r3, #21
 800ba2c:	f023 0303 	bic.w	r3, r3, #3
 800ba30:	3415      	adds	r4, #21
 800ba32:	3304      	adds	r3, #4
 800ba34:	42a6      	cmp	r6, r4
 800ba36:	bf38      	it	cc
 800ba38:	2304      	movcc	r3, #4
 800ba3a:	441d      	add	r5, r3
 800ba3c:	445b      	add	r3, fp
 800ba3e:	461e      	mov	r6, r3
 800ba40:	462c      	mov	r4, r5
 800ba42:	4544      	cmp	r4, r8
 800ba44:	d30e      	bcc.n	800ba64 <__mdiff+0xf8>
 800ba46:	f108 0103 	add.w	r1, r8, #3
 800ba4a:	1b49      	subs	r1, r1, r5
 800ba4c:	f021 0103 	bic.w	r1, r1, #3
 800ba50:	3d03      	subs	r5, #3
 800ba52:	45a8      	cmp	r8, r5
 800ba54:	bf38      	it	cc
 800ba56:	2100      	movcc	r1, #0
 800ba58:	440b      	add	r3, r1
 800ba5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba5e:	b191      	cbz	r1, 800ba86 <__mdiff+0x11a>
 800ba60:	6117      	str	r7, [r2, #16]
 800ba62:	e79d      	b.n	800b9a0 <__mdiff+0x34>
 800ba64:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba68:	46e6      	mov	lr, ip
 800ba6a:	0c08      	lsrs	r0, r1, #16
 800ba6c:	fa1c fc81 	uxtah	ip, ip, r1
 800ba70:	4471      	add	r1, lr
 800ba72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba76:	b289      	uxth	r1, r1
 800ba78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba7c:	f846 1b04 	str.w	r1, [r6], #4
 800ba80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba84:	e7dd      	b.n	800ba42 <__mdiff+0xd6>
 800ba86:	3f01      	subs	r7, #1
 800ba88:	e7e7      	b.n	800ba5a <__mdiff+0xee>
 800ba8a:	bf00      	nop
 800ba8c:	0800c7e0 	.word	0x0800c7e0
 800ba90:	0800c7f1 	.word	0x0800c7f1

0800ba94 <__d2b>:
 800ba94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba98:	460f      	mov	r7, r1
 800ba9a:	2101      	movs	r1, #1
 800ba9c:	ec59 8b10 	vmov	r8, r9, d0
 800baa0:	4616      	mov	r6, r2
 800baa2:	f7ff fccd 	bl	800b440 <_Balloc>
 800baa6:	4604      	mov	r4, r0
 800baa8:	b930      	cbnz	r0, 800bab8 <__d2b+0x24>
 800baaa:	4602      	mov	r2, r0
 800baac:	4b23      	ldr	r3, [pc, #140]	@ (800bb3c <__d2b+0xa8>)
 800baae:	4824      	ldr	r0, [pc, #144]	@ (800bb40 <__d2b+0xac>)
 800bab0:	f240 310f 	movw	r1, #783	@ 0x30f
 800bab4:	f000 fa82 	bl	800bfbc <__assert_func>
 800bab8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800babc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bac0:	b10d      	cbz	r5, 800bac6 <__d2b+0x32>
 800bac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	f1b8 0300 	subs.w	r3, r8, #0
 800bacc:	d023      	beq.n	800bb16 <__d2b+0x82>
 800bace:	4668      	mov	r0, sp
 800bad0:	9300      	str	r3, [sp, #0]
 800bad2:	f7ff fd7c 	bl	800b5ce <__lo0bits>
 800bad6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bada:	b1d0      	cbz	r0, 800bb12 <__d2b+0x7e>
 800badc:	f1c0 0320 	rsb	r3, r0, #32
 800bae0:	fa02 f303 	lsl.w	r3, r2, r3
 800bae4:	430b      	orrs	r3, r1
 800bae6:	40c2      	lsrs	r2, r0
 800bae8:	6163      	str	r3, [r4, #20]
 800baea:	9201      	str	r2, [sp, #4]
 800baec:	9b01      	ldr	r3, [sp, #4]
 800baee:	61a3      	str	r3, [r4, #24]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	bf0c      	ite	eq
 800baf4:	2201      	moveq	r2, #1
 800baf6:	2202      	movne	r2, #2
 800baf8:	6122      	str	r2, [r4, #16]
 800bafa:	b1a5      	cbz	r5, 800bb26 <__d2b+0x92>
 800bafc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb00:	4405      	add	r5, r0
 800bb02:	603d      	str	r5, [r7, #0]
 800bb04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb08:	6030      	str	r0, [r6, #0]
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	b003      	add	sp, #12
 800bb0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb12:	6161      	str	r1, [r4, #20]
 800bb14:	e7ea      	b.n	800baec <__d2b+0x58>
 800bb16:	a801      	add	r0, sp, #4
 800bb18:	f7ff fd59 	bl	800b5ce <__lo0bits>
 800bb1c:	9b01      	ldr	r3, [sp, #4]
 800bb1e:	6163      	str	r3, [r4, #20]
 800bb20:	3020      	adds	r0, #32
 800bb22:	2201      	movs	r2, #1
 800bb24:	e7e8      	b.n	800baf8 <__d2b+0x64>
 800bb26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb2e:	6038      	str	r0, [r7, #0]
 800bb30:	6918      	ldr	r0, [r3, #16]
 800bb32:	f7ff fd2d 	bl	800b590 <__hi0bits>
 800bb36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb3a:	e7e5      	b.n	800bb08 <__d2b+0x74>
 800bb3c:	0800c7e0 	.word	0x0800c7e0
 800bb40:	0800c7f1 	.word	0x0800c7f1

0800bb44 <__ssputs_r>:
 800bb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb48:	688e      	ldr	r6, [r1, #8]
 800bb4a:	461f      	mov	r7, r3
 800bb4c:	42be      	cmp	r6, r7
 800bb4e:	680b      	ldr	r3, [r1, #0]
 800bb50:	4682      	mov	sl, r0
 800bb52:	460c      	mov	r4, r1
 800bb54:	4690      	mov	r8, r2
 800bb56:	d82d      	bhi.n	800bbb4 <__ssputs_r+0x70>
 800bb58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb60:	d026      	beq.n	800bbb0 <__ssputs_r+0x6c>
 800bb62:	6965      	ldr	r5, [r4, #20]
 800bb64:	6909      	ldr	r1, [r1, #16]
 800bb66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb6a:	eba3 0901 	sub.w	r9, r3, r1
 800bb6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb72:	1c7b      	adds	r3, r7, #1
 800bb74:	444b      	add	r3, r9
 800bb76:	106d      	asrs	r5, r5, #1
 800bb78:	429d      	cmp	r5, r3
 800bb7a:	bf38      	it	cc
 800bb7c:	461d      	movcc	r5, r3
 800bb7e:	0553      	lsls	r3, r2, #21
 800bb80:	d527      	bpl.n	800bbd2 <__ssputs_r+0x8e>
 800bb82:	4629      	mov	r1, r5
 800bb84:	f7ff fbd0 	bl	800b328 <_malloc_r>
 800bb88:	4606      	mov	r6, r0
 800bb8a:	b360      	cbz	r0, 800bbe6 <__ssputs_r+0xa2>
 800bb8c:	6921      	ldr	r1, [r4, #16]
 800bb8e:	464a      	mov	r2, r9
 800bb90:	f000 fa06 	bl	800bfa0 <memcpy>
 800bb94:	89a3      	ldrh	r3, [r4, #12]
 800bb96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb9e:	81a3      	strh	r3, [r4, #12]
 800bba0:	6126      	str	r6, [r4, #16]
 800bba2:	6165      	str	r5, [r4, #20]
 800bba4:	444e      	add	r6, r9
 800bba6:	eba5 0509 	sub.w	r5, r5, r9
 800bbaa:	6026      	str	r6, [r4, #0]
 800bbac:	60a5      	str	r5, [r4, #8]
 800bbae:	463e      	mov	r6, r7
 800bbb0:	42be      	cmp	r6, r7
 800bbb2:	d900      	bls.n	800bbb6 <__ssputs_r+0x72>
 800bbb4:	463e      	mov	r6, r7
 800bbb6:	6820      	ldr	r0, [r4, #0]
 800bbb8:	4632      	mov	r2, r6
 800bbba:	4641      	mov	r1, r8
 800bbbc:	f000 f9c6 	bl	800bf4c <memmove>
 800bbc0:	68a3      	ldr	r3, [r4, #8]
 800bbc2:	1b9b      	subs	r3, r3, r6
 800bbc4:	60a3      	str	r3, [r4, #8]
 800bbc6:	6823      	ldr	r3, [r4, #0]
 800bbc8:	4433      	add	r3, r6
 800bbca:	6023      	str	r3, [r4, #0]
 800bbcc:	2000      	movs	r0, #0
 800bbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbd2:	462a      	mov	r2, r5
 800bbd4:	f000 fa36 	bl	800c044 <_realloc_r>
 800bbd8:	4606      	mov	r6, r0
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d1e0      	bne.n	800bba0 <__ssputs_r+0x5c>
 800bbde:	6921      	ldr	r1, [r4, #16]
 800bbe0:	4650      	mov	r0, sl
 800bbe2:	f7ff fb2d 	bl	800b240 <_free_r>
 800bbe6:	230c      	movs	r3, #12
 800bbe8:	f8ca 3000 	str.w	r3, [sl]
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbf2:	81a3      	strh	r3, [r4, #12]
 800bbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf8:	e7e9      	b.n	800bbce <__ssputs_r+0x8a>
	...

0800bbfc <_svfiprintf_r>:
 800bbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc00:	4698      	mov	r8, r3
 800bc02:	898b      	ldrh	r3, [r1, #12]
 800bc04:	061b      	lsls	r3, r3, #24
 800bc06:	b09d      	sub	sp, #116	@ 0x74
 800bc08:	4607      	mov	r7, r0
 800bc0a:	460d      	mov	r5, r1
 800bc0c:	4614      	mov	r4, r2
 800bc0e:	d510      	bpl.n	800bc32 <_svfiprintf_r+0x36>
 800bc10:	690b      	ldr	r3, [r1, #16]
 800bc12:	b973      	cbnz	r3, 800bc32 <_svfiprintf_r+0x36>
 800bc14:	2140      	movs	r1, #64	@ 0x40
 800bc16:	f7ff fb87 	bl	800b328 <_malloc_r>
 800bc1a:	6028      	str	r0, [r5, #0]
 800bc1c:	6128      	str	r0, [r5, #16]
 800bc1e:	b930      	cbnz	r0, 800bc2e <_svfiprintf_r+0x32>
 800bc20:	230c      	movs	r3, #12
 800bc22:	603b      	str	r3, [r7, #0]
 800bc24:	f04f 30ff 	mov.w	r0, #4294967295
 800bc28:	b01d      	add	sp, #116	@ 0x74
 800bc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2e:	2340      	movs	r3, #64	@ 0x40
 800bc30:	616b      	str	r3, [r5, #20]
 800bc32:	2300      	movs	r3, #0
 800bc34:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc36:	2320      	movs	r3, #32
 800bc38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc40:	2330      	movs	r3, #48	@ 0x30
 800bc42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bde0 <_svfiprintf_r+0x1e4>
 800bc46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc4a:	f04f 0901 	mov.w	r9, #1
 800bc4e:	4623      	mov	r3, r4
 800bc50:	469a      	mov	sl, r3
 800bc52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc56:	b10a      	cbz	r2, 800bc5c <_svfiprintf_r+0x60>
 800bc58:	2a25      	cmp	r2, #37	@ 0x25
 800bc5a:	d1f9      	bne.n	800bc50 <_svfiprintf_r+0x54>
 800bc5c:	ebba 0b04 	subs.w	fp, sl, r4
 800bc60:	d00b      	beq.n	800bc7a <_svfiprintf_r+0x7e>
 800bc62:	465b      	mov	r3, fp
 800bc64:	4622      	mov	r2, r4
 800bc66:	4629      	mov	r1, r5
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f7ff ff6b 	bl	800bb44 <__ssputs_r>
 800bc6e:	3001      	adds	r0, #1
 800bc70:	f000 80a7 	beq.w	800bdc2 <_svfiprintf_r+0x1c6>
 800bc74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc76:	445a      	add	r2, fp
 800bc78:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc7a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f000 809f 	beq.w	800bdc2 <_svfiprintf_r+0x1c6>
 800bc84:	2300      	movs	r3, #0
 800bc86:	f04f 32ff 	mov.w	r2, #4294967295
 800bc8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc8e:	f10a 0a01 	add.w	sl, sl, #1
 800bc92:	9304      	str	r3, [sp, #16]
 800bc94:	9307      	str	r3, [sp, #28]
 800bc96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc9a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc9c:	4654      	mov	r4, sl
 800bc9e:	2205      	movs	r2, #5
 800bca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bca4:	484e      	ldr	r0, [pc, #312]	@ (800bde0 <_svfiprintf_r+0x1e4>)
 800bca6:	f7f4 fa9b 	bl	80001e0 <memchr>
 800bcaa:	9a04      	ldr	r2, [sp, #16]
 800bcac:	b9d8      	cbnz	r0, 800bce6 <_svfiprintf_r+0xea>
 800bcae:	06d0      	lsls	r0, r2, #27
 800bcb0:	bf44      	itt	mi
 800bcb2:	2320      	movmi	r3, #32
 800bcb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcb8:	0711      	lsls	r1, r2, #28
 800bcba:	bf44      	itt	mi
 800bcbc:	232b      	movmi	r3, #43	@ 0x2b
 800bcbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcc2:	f89a 3000 	ldrb.w	r3, [sl]
 800bcc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcc8:	d015      	beq.n	800bcf6 <_svfiprintf_r+0xfa>
 800bcca:	9a07      	ldr	r2, [sp, #28]
 800bccc:	4654      	mov	r4, sl
 800bcce:	2000      	movs	r0, #0
 800bcd0:	f04f 0c0a 	mov.w	ip, #10
 800bcd4:	4621      	mov	r1, r4
 800bcd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcda:	3b30      	subs	r3, #48	@ 0x30
 800bcdc:	2b09      	cmp	r3, #9
 800bcde:	d94b      	bls.n	800bd78 <_svfiprintf_r+0x17c>
 800bce0:	b1b0      	cbz	r0, 800bd10 <_svfiprintf_r+0x114>
 800bce2:	9207      	str	r2, [sp, #28]
 800bce4:	e014      	b.n	800bd10 <_svfiprintf_r+0x114>
 800bce6:	eba0 0308 	sub.w	r3, r0, r8
 800bcea:	fa09 f303 	lsl.w	r3, r9, r3
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	9304      	str	r3, [sp, #16]
 800bcf2:	46a2      	mov	sl, r4
 800bcf4:	e7d2      	b.n	800bc9c <_svfiprintf_r+0xa0>
 800bcf6:	9b03      	ldr	r3, [sp, #12]
 800bcf8:	1d19      	adds	r1, r3, #4
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	9103      	str	r1, [sp, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	bfbb      	ittet	lt
 800bd02:	425b      	neglt	r3, r3
 800bd04:	f042 0202 	orrlt.w	r2, r2, #2
 800bd08:	9307      	strge	r3, [sp, #28]
 800bd0a:	9307      	strlt	r3, [sp, #28]
 800bd0c:	bfb8      	it	lt
 800bd0e:	9204      	strlt	r2, [sp, #16]
 800bd10:	7823      	ldrb	r3, [r4, #0]
 800bd12:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd14:	d10a      	bne.n	800bd2c <_svfiprintf_r+0x130>
 800bd16:	7863      	ldrb	r3, [r4, #1]
 800bd18:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd1a:	d132      	bne.n	800bd82 <_svfiprintf_r+0x186>
 800bd1c:	9b03      	ldr	r3, [sp, #12]
 800bd1e:	1d1a      	adds	r2, r3, #4
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	9203      	str	r2, [sp, #12]
 800bd24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd28:	3402      	adds	r4, #2
 800bd2a:	9305      	str	r3, [sp, #20]
 800bd2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bdf0 <_svfiprintf_r+0x1f4>
 800bd30:	7821      	ldrb	r1, [r4, #0]
 800bd32:	2203      	movs	r2, #3
 800bd34:	4650      	mov	r0, sl
 800bd36:	f7f4 fa53 	bl	80001e0 <memchr>
 800bd3a:	b138      	cbz	r0, 800bd4c <_svfiprintf_r+0x150>
 800bd3c:	9b04      	ldr	r3, [sp, #16]
 800bd3e:	eba0 000a 	sub.w	r0, r0, sl
 800bd42:	2240      	movs	r2, #64	@ 0x40
 800bd44:	4082      	lsls	r2, r0
 800bd46:	4313      	orrs	r3, r2
 800bd48:	3401      	adds	r4, #1
 800bd4a:	9304      	str	r3, [sp, #16]
 800bd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd50:	4824      	ldr	r0, [pc, #144]	@ (800bde4 <_svfiprintf_r+0x1e8>)
 800bd52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd56:	2206      	movs	r2, #6
 800bd58:	f7f4 fa42 	bl	80001e0 <memchr>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d036      	beq.n	800bdce <_svfiprintf_r+0x1d2>
 800bd60:	4b21      	ldr	r3, [pc, #132]	@ (800bde8 <_svfiprintf_r+0x1ec>)
 800bd62:	bb1b      	cbnz	r3, 800bdac <_svfiprintf_r+0x1b0>
 800bd64:	9b03      	ldr	r3, [sp, #12]
 800bd66:	3307      	adds	r3, #7
 800bd68:	f023 0307 	bic.w	r3, r3, #7
 800bd6c:	3308      	adds	r3, #8
 800bd6e:	9303      	str	r3, [sp, #12]
 800bd70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd72:	4433      	add	r3, r6
 800bd74:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd76:	e76a      	b.n	800bc4e <_svfiprintf_r+0x52>
 800bd78:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd7c:	460c      	mov	r4, r1
 800bd7e:	2001      	movs	r0, #1
 800bd80:	e7a8      	b.n	800bcd4 <_svfiprintf_r+0xd8>
 800bd82:	2300      	movs	r3, #0
 800bd84:	3401      	adds	r4, #1
 800bd86:	9305      	str	r3, [sp, #20]
 800bd88:	4619      	mov	r1, r3
 800bd8a:	f04f 0c0a 	mov.w	ip, #10
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd94:	3a30      	subs	r2, #48	@ 0x30
 800bd96:	2a09      	cmp	r2, #9
 800bd98:	d903      	bls.n	800bda2 <_svfiprintf_r+0x1a6>
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d0c6      	beq.n	800bd2c <_svfiprintf_r+0x130>
 800bd9e:	9105      	str	r1, [sp, #20]
 800bda0:	e7c4      	b.n	800bd2c <_svfiprintf_r+0x130>
 800bda2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bda6:	4604      	mov	r4, r0
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e7f0      	b.n	800bd8e <_svfiprintf_r+0x192>
 800bdac:	ab03      	add	r3, sp, #12
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	462a      	mov	r2, r5
 800bdb2:	4b0e      	ldr	r3, [pc, #56]	@ (800bdec <_svfiprintf_r+0x1f0>)
 800bdb4:	a904      	add	r1, sp, #16
 800bdb6:	4638      	mov	r0, r7
 800bdb8:	f7fd fe98 	bl	8009aec <_printf_float>
 800bdbc:	1c42      	adds	r2, r0, #1
 800bdbe:	4606      	mov	r6, r0
 800bdc0:	d1d6      	bne.n	800bd70 <_svfiprintf_r+0x174>
 800bdc2:	89ab      	ldrh	r3, [r5, #12]
 800bdc4:	065b      	lsls	r3, r3, #25
 800bdc6:	f53f af2d 	bmi.w	800bc24 <_svfiprintf_r+0x28>
 800bdca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdcc:	e72c      	b.n	800bc28 <_svfiprintf_r+0x2c>
 800bdce:	ab03      	add	r3, sp, #12
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	462a      	mov	r2, r5
 800bdd4:	4b05      	ldr	r3, [pc, #20]	@ (800bdec <_svfiprintf_r+0x1f0>)
 800bdd6:	a904      	add	r1, sp, #16
 800bdd8:	4638      	mov	r0, r7
 800bdda:	f7fe f91f 	bl	800a01c <_printf_i>
 800bdde:	e7ed      	b.n	800bdbc <_svfiprintf_r+0x1c0>
 800bde0:	0800c948 	.word	0x0800c948
 800bde4:	0800c952 	.word	0x0800c952
 800bde8:	08009aed 	.word	0x08009aed
 800bdec:	0800bb45 	.word	0x0800bb45
 800bdf0:	0800c94e 	.word	0x0800c94e

0800bdf4 <__sflush_r>:
 800bdf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfc:	0716      	lsls	r6, r2, #28
 800bdfe:	4605      	mov	r5, r0
 800be00:	460c      	mov	r4, r1
 800be02:	d454      	bmi.n	800beae <__sflush_r+0xba>
 800be04:	684b      	ldr	r3, [r1, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	dc02      	bgt.n	800be10 <__sflush_r+0x1c>
 800be0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	dd48      	ble.n	800bea2 <__sflush_r+0xae>
 800be10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be12:	2e00      	cmp	r6, #0
 800be14:	d045      	beq.n	800bea2 <__sflush_r+0xae>
 800be16:	2300      	movs	r3, #0
 800be18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be1c:	682f      	ldr	r7, [r5, #0]
 800be1e:	6a21      	ldr	r1, [r4, #32]
 800be20:	602b      	str	r3, [r5, #0]
 800be22:	d030      	beq.n	800be86 <__sflush_r+0x92>
 800be24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be26:	89a3      	ldrh	r3, [r4, #12]
 800be28:	0759      	lsls	r1, r3, #29
 800be2a:	d505      	bpl.n	800be38 <__sflush_r+0x44>
 800be2c:	6863      	ldr	r3, [r4, #4]
 800be2e:	1ad2      	subs	r2, r2, r3
 800be30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be32:	b10b      	cbz	r3, 800be38 <__sflush_r+0x44>
 800be34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be36:	1ad2      	subs	r2, r2, r3
 800be38:	2300      	movs	r3, #0
 800be3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be3c:	6a21      	ldr	r1, [r4, #32]
 800be3e:	4628      	mov	r0, r5
 800be40:	47b0      	blx	r6
 800be42:	1c43      	adds	r3, r0, #1
 800be44:	89a3      	ldrh	r3, [r4, #12]
 800be46:	d106      	bne.n	800be56 <__sflush_r+0x62>
 800be48:	6829      	ldr	r1, [r5, #0]
 800be4a:	291d      	cmp	r1, #29
 800be4c:	d82b      	bhi.n	800bea6 <__sflush_r+0xb2>
 800be4e:	4a2a      	ldr	r2, [pc, #168]	@ (800bef8 <__sflush_r+0x104>)
 800be50:	410a      	asrs	r2, r1
 800be52:	07d6      	lsls	r6, r2, #31
 800be54:	d427      	bmi.n	800bea6 <__sflush_r+0xb2>
 800be56:	2200      	movs	r2, #0
 800be58:	6062      	str	r2, [r4, #4]
 800be5a:	04d9      	lsls	r1, r3, #19
 800be5c:	6922      	ldr	r2, [r4, #16]
 800be5e:	6022      	str	r2, [r4, #0]
 800be60:	d504      	bpl.n	800be6c <__sflush_r+0x78>
 800be62:	1c42      	adds	r2, r0, #1
 800be64:	d101      	bne.n	800be6a <__sflush_r+0x76>
 800be66:	682b      	ldr	r3, [r5, #0]
 800be68:	b903      	cbnz	r3, 800be6c <__sflush_r+0x78>
 800be6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800be6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be6e:	602f      	str	r7, [r5, #0]
 800be70:	b1b9      	cbz	r1, 800bea2 <__sflush_r+0xae>
 800be72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be76:	4299      	cmp	r1, r3
 800be78:	d002      	beq.n	800be80 <__sflush_r+0x8c>
 800be7a:	4628      	mov	r0, r5
 800be7c:	f7ff f9e0 	bl	800b240 <_free_r>
 800be80:	2300      	movs	r3, #0
 800be82:	6363      	str	r3, [r4, #52]	@ 0x34
 800be84:	e00d      	b.n	800bea2 <__sflush_r+0xae>
 800be86:	2301      	movs	r3, #1
 800be88:	4628      	mov	r0, r5
 800be8a:	47b0      	blx	r6
 800be8c:	4602      	mov	r2, r0
 800be8e:	1c50      	adds	r0, r2, #1
 800be90:	d1c9      	bne.n	800be26 <__sflush_r+0x32>
 800be92:	682b      	ldr	r3, [r5, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d0c6      	beq.n	800be26 <__sflush_r+0x32>
 800be98:	2b1d      	cmp	r3, #29
 800be9a:	d001      	beq.n	800bea0 <__sflush_r+0xac>
 800be9c:	2b16      	cmp	r3, #22
 800be9e:	d11e      	bne.n	800bede <__sflush_r+0xea>
 800bea0:	602f      	str	r7, [r5, #0]
 800bea2:	2000      	movs	r0, #0
 800bea4:	e022      	b.n	800beec <__sflush_r+0xf8>
 800bea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beaa:	b21b      	sxth	r3, r3
 800beac:	e01b      	b.n	800bee6 <__sflush_r+0xf2>
 800beae:	690f      	ldr	r7, [r1, #16]
 800beb0:	2f00      	cmp	r7, #0
 800beb2:	d0f6      	beq.n	800bea2 <__sflush_r+0xae>
 800beb4:	0793      	lsls	r3, r2, #30
 800beb6:	680e      	ldr	r6, [r1, #0]
 800beb8:	bf08      	it	eq
 800beba:	694b      	ldreq	r3, [r1, #20]
 800bebc:	600f      	str	r7, [r1, #0]
 800bebe:	bf18      	it	ne
 800bec0:	2300      	movne	r3, #0
 800bec2:	eba6 0807 	sub.w	r8, r6, r7
 800bec6:	608b      	str	r3, [r1, #8]
 800bec8:	f1b8 0f00 	cmp.w	r8, #0
 800becc:	dde9      	ble.n	800bea2 <__sflush_r+0xae>
 800bece:	6a21      	ldr	r1, [r4, #32]
 800bed0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bed2:	4643      	mov	r3, r8
 800bed4:	463a      	mov	r2, r7
 800bed6:	4628      	mov	r0, r5
 800bed8:	47b0      	blx	r6
 800beda:	2800      	cmp	r0, #0
 800bedc:	dc08      	bgt.n	800bef0 <__sflush_r+0xfc>
 800bede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bee6:	81a3      	strh	r3, [r4, #12]
 800bee8:	f04f 30ff 	mov.w	r0, #4294967295
 800beec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef0:	4407      	add	r7, r0
 800bef2:	eba8 0800 	sub.w	r8, r8, r0
 800bef6:	e7e7      	b.n	800bec8 <__sflush_r+0xd4>
 800bef8:	dfbffffe 	.word	0xdfbffffe

0800befc <_fflush_r>:
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	690b      	ldr	r3, [r1, #16]
 800bf00:	4605      	mov	r5, r0
 800bf02:	460c      	mov	r4, r1
 800bf04:	b913      	cbnz	r3, 800bf0c <_fflush_r+0x10>
 800bf06:	2500      	movs	r5, #0
 800bf08:	4628      	mov	r0, r5
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
 800bf0c:	b118      	cbz	r0, 800bf16 <_fflush_r+0x1a>
 800bf0e:	6a03      	ldr	r3, [r0, #32]
 800bf10:	b90b      	cbnz	r3, 800bf16 <_fflush_r+0x1a>
 800bf12:	f7fe fa2f 	bl	800a374 <__sinit>
 800bf16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d0f3      	beq.n	800bf06 <_fflush_r+0xa>
 800bf1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf20:	07d0      	lsls	r0, r2, #31
 800bf22:	d404      	bmi.n	800bf2e <_fflush_r+0x32>
 800bf24:	0599      	lsls	r1, r3, #22
 800bf26:	d402      	bmi.n	800bf2e <_fflush_r+0x32>
 800bf28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf2a:	f7fe fb3a 	bl	800a5a2 <__retarget_lock_acquire_recursive>
 800bf2e:	4628      	mov	r0, r5
 800bf30:	4621      	mov	r1, r4
 800bf32:	f7ff ff5f 	bl	800bdf4 <__sflush_r>
 800bf36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf38:	07da      	lsls	r2, r3, #31
 800bf3a:	4605      	mov	r5, r0
 800bf3c:	d4e4      	bmi.n	800bf08 <_fflush_r+0xc>
 800bf3e:	89a3      	ldrh	r3, [r4, #12]
 800bf40:	059b      	lsls	r3, r3, #22
 800bf42:	d4e1      	bmi.n	800bf08 <_fflush_r+0xc>
 800bf44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf46:	f7fe fb2d 	bl	800a5a4 <__retarget_lock_release_recursive>
 800bf4a:	e7dd      	b.n	800bf08 <_fflush_r+0xc>

0800bf4c <memmove>:
 800bf4c:	4288      	cmp	r0, r1
 800bf4e:	b510      	push	{r4, lr}
 800bf50:	eb01 0402 	add.w	r4, r1, r2
 800bf54:	d902      	bls.n	800bf5c <memmove+0x10>
 800bf56:	4284      	cmp	r4, r0
 800bf58:	4623      	mov	r3, r4
 800bf5a:	d807      	bhi.n	800bf6c <memmove+0x20>
 800bf5c:	1e43      	subs	r3, r0, #1
 800bf5e:	42a1      	cmp	r1, r4
 800bf60:	d008      	beq.n	800bf74 <memmove+0x28>
 800bf62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf6a:	e7f8      	b.n	800bf5e <memmove+0x12>
 800bf6c:	4402      	add	r2, r0
 800bf6e:	4601      	mov	r1, r0
 800bf70:	428a      	cmp	r2, r1
 800bf72:	d100      	bne.n	800bf76 <memmove+0x2a>
 800bf74:	bd10      	pop	{r4, pc}
 800bf76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf7e:	e7f7      	b.n	800bf70 <memmove+0x24>

0800bf80 <_sbrk_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4d06      	ldr	r5, [pc, #24]	@ (800bf9c <_sbrk_r+0x1c>)
 800bf84:	2300      	movs	r3, #0
 800bf86:	4604      	mov	r4, r0
 800bf88:	4608      	mov	r0, r1
 800bf8a:	602b      	str	r3, [r5, #0]
 800bf8c:	f7f6 fd60 	bl	8002a50 <_sbrk>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	d102      	bne.n	800bf9a <_sbrk_r+0x1a>
 800bf94:	682b      	ldr	r3, [r5, #0]
 800bf96:	b103      	cbz	r3, 800bf9a <_sbrk_r+0x1a>
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	bd38      	pop	{r3, r4, r5, pc}
 800bf9c:	200008e4 	.word	0x200008e4

0800bfa0 <memcpy>:
 800bfa0:	440a      	add	r2, r1
 800bfa2:	4291      	cmp	r1, r2
 800bfa4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfa8:	d100      	bne.n	800bfac <memcpy+0xc>
 800bfaa:	4770      	bx	lr
 800bfac:	b510      	push	{r4, lr}
 800bfae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfb6:	4291      	cmp	r1, r2
 800bfb8:	d1f9      	bne.n	800bfae <memcpy+0xe>
 800bfba:	bd10      	pop	{r4, pc}

0800bfbc <__assert_func>:
 800bfbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfbe:	4614      	mov	r4, r2
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	4b09      	ldr	r3, [pc, #36]	@ (800bfe8 <__assert_func+0x2c>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4605      	mov	r5, r0
 800bfc8:	68d8      	ldr	r0, [r3, #12]
 800bfca:	b954      	cbnz	r4, 800bfe2 <__assert_func+0x26>
 800bfcc:	4b07      	ldr	r3, [pc, #28]	@ (800bfec <__assert_func+0x30>)
 800bfce:	461c      	mov	r4, r3
 800bfd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfd4:	9100      	str	r1, [sp, #0]
 800bfd6:	462b      	mov	r3, r5
 800bfd8:	4905      	ldr	r1, [pc, #20]	@ (800bff0 <__assert_func+0x34>)
 800bfda:	f000 f86f 	bl	800c0bc <fiprintf>
 800bfde:	f000 f87f 	bl	800c0e0 <abort>
 800bfe2:	4b04      	ldr	r3, [pc, #16]	@ (800bff4 <__assert_func+0x38>)
 800bfe4:	e7f4      	b.n	800bfd0 <__assert_func+0x14>
 800bfe6:	bf00      	nop
 800bfe8:	20000018 	.word	0x20000018
 800bfec:	0800c99e 	.word	0x0800c99e
 800bff0:	0800c970 	.word	0x0800c970
 800bff4:	0800c963 	.word	0x0800c963

0800bff8 <_calloc_r>:
 800bff8:	b570      	push	{r4, r5, r6, lr}
 800bffa:	fba1 5402 	umull	r5, r4, r1, r2
 800bffe:	b93c      	cbnz	r4, 800c010 <_calloc_r+0x18>
 800c000:	4629      	mov	r1, r5
 800c002:	f7ff f991 	bl	800b328 <_malloc_r>
 800c006:	4606      	mov	r6, r0
 800c008:	b928      	cbnz	r0, 800c016 <_calloc_r+0x1e>
 800c00a:	2600      	movs	r6, #0
 800c00c:	4630      	mov	r0, r6
 800c00e:	bd70      	pop	{r4, r5, r6, pc}
 800c010:	220c      	movs	r2, #12
 800c012:	6002      	str	r2, [r0, #0]
 800c014:	e7f9      	b.n	800c00a <_calloc_r+0x12>
 800c016:	462a      	mov	r2, r5
 800c018:	4621      	mov	r1, r4
 800c01a:	f7fe fa44 	bl	800a4a6 <memset>
 800c01e:	e7f5      	b.n	800c00c <_calloc_r+0x14>

0800c020 <__ascii_mbtowc>:
 800c020:	b082      	sub	sp, #8
 800c022:	b901      	cbnz	r1, 800c026 <__ascii_mbtowc+0x6>
 800c024:	a901      	add	r1, sp, #4
 800c026:	b142      	cbz	r2, 800c03a <__ascii_mbtowc+0x1a>
 800c028:	b14b      	cbz	r3, 800c03e <__ascii_mbtowc+0x1e>
 800c02a:	7813      	ldrb	r3, [r2, #0]
 800c02c:	600b      	str	r3, [r1, #0]
 800c02e:	7812      	ldrb	r2, [r2, #0]
 800c030:	1e10      	subs	r0, r2, #0
 800c032:	bf18      	it	ne
 800c034:	2001      	movne	r0, #1
 800c036:	b002      	add	sp, #8
 800c038:	4770      	bx	lr
 800c03a:	4610      	mov	r0, r2
 800c03c:	e7fb      	b.n	800c036 <__ascii_mbtowc+0x16>
 800c03e:	f06f 0001 	mvn.w	r0, #1
 800c042:	e7f8      	b.n	800c036 <__ascii_mbtowc+0x16>

0800c044 <_realloc_r>:
 800c044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c048:	4680      	mov	r8, r0
 800c04a:	4615      	mov	r5, r2
 800c04c:	460c      	mov	r4, r1
 800c04e:	b921      	cbnz	r1, 800c05a <_realloc_r+0x16>
 800c050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c054:	4611      	mov	r1, r2
 800c056:	f7ff b967 	b.w	800b328 <_malloc_r>
 800c05a:	b92a      	cbnz	r2, 800c068 <_realloc_r+0x24>
 800c05c:	f7ff f8f0 	bl	800b240 <_free_r>
 800c060:	2400      	movs	r4, #0
 800c062:	4620      	mov	r0, r4
 800c064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c068:	f000 f841 	bl	800c0ee <_malloc_usable_size_r>
 800c06c:	4285      	cmp	r5, r0
 800c06e:	4606      	mov	r6, r0
 800c070:	d802      	bhi.n	800c078 <_realloc_r+0x34>
 800c072:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c076:	d8f4      	bhi.n	800c062 <_realloc_r+0x1e>
 800c078:	4629      	mov	r1, r5
 800c07a:	4640      	mov	r0, r8
 800c07c:	f7ff f954 	bl	800b328 <_malloc_r>
 800c080:	4607      	mov	r7, r0
 800c082:	2800      	cmp	r0, #0
 800c084:	d0ec      	beq.n	800c060 <_realloc_r+0x1c>
 800c086:	42b5      	cmp	r5, r6
 800c088:	462a      	mov	r2, r5
 800c08a:	4621      	mov	r1, r4
 800c08c:	bf28      	it	cs
 800c08e:	4632      	movcs	r2, r6
 800c090:	f7ff ff86 	bl	800bfa0 <memcpy>
 800c094:	4621      	mov	r1, r4
 800c096:	4640      	mov	r0, r8
 800c098:	f7ff f8d2 	bl	800b240 <_free_r>
 800c09c:	463c      	mov	r4, r7
 800c09e:	e7e0      	b.n	800c062 <_realloc_r+0x1e>

0800c0a0 <__ascii_wctomb>:
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	4608      	mov	r0, r1
 800c0a4:	b141      	cbz	r1, 800c0b8 <__ascii_wctomb+0x18>
 800c0a6:	2aff      	cmp	r2, #255	@ 0xff
 800c0a8:	d904      	bls.n	800c0b4 <__ascii_wctomb+0x14>
 800c0aa:	228a      	movs	r2, #138	@ 0x8a
 800c0ac:	601a      	str	r2, [r3, #0]
 800c0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b2:	4770      	bx	lr
 800c0b4:	700a      	strb	r2, [r1, #0]
 800c0b6:	2001      	movs	r0, #1
 800c0b8:	4770      	bx	lr
	...

0800c0bc <fiprintf>:
 800c0bc:	b40e      	push	{r1, r2, r3}
 800c0be:	b503      	push	{r0, r1, lr}
 800c0c0:	4601      	mov	r1, r0
 800c0c2:	ab03      	add	r3, sp, #12
 800c0c4:	4805      	ldr	r0, [pc, #20]	@ (800c0dc <fiprintf+0x20>)
 800c0c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ca:	6800      	ldr	r0, [r0, #0]
 800c0cc:	9301      	str	r3, [sp, #4]
 800c0ce:	f000 f83f 	bl	800c150 <_vfiprintf_r>
 800c0d2:	b002      	add	sp, #8
 800c0d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0d8:	b003      	add	sp, #12
 800c0da:	4770      	bx	lr
 800c0dc:	20000018 	.word	0x20000018

0800c0e0 <abort>:
 800c0e0:	b508      	push	{r3, lr}
 800c0e2:	2006      	movs	r0, #6
 800c0e4:	f000 fa08 	bl	800c4f8 <raise>
 800c0e8:	2001      	movs	r0, #1
 800c0ea:	f7f6 fc39 	bl	8002960 <_exit>

0800c0ee <_malloc_usable_size_r>:
 800c0ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0f2:	1f18      	subs	r0, r3, #4
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	bfbc      	itt	lt
 800c0f8:	580b      	ldrlt	r3, [r1, r0]
 800c0fa:	18c0      	addlt	r0, r0, r3
 800c0fc:	4770      	bx	lr

0800c0fe <__sfputc_r>:
 800c0fe:	6893      	ldr	r3, [r2, #8]
 800c100:	3b01      	subs	r3, #1
 800c102:	2b00      	cmp	r3, #0
 800c104:	b410      	push	{r4}
 800c106:	6093      	str	r3, [r2, #8]
 800c108:	da08      	bge.n	800c11c <__sfputc_r+0x1e>
 800c10a:	6994      	ldr	r4, [r2, #24]
 800c10c:	42a3      	cmp	r3, r4
 800c10e:	db01      	blt.n	800c114 <__sfputc_r+0x16>
 800c110:	290a      	cmp	r1, #10
 800c112:	d103      	bne.n	800c11c <__sfputc_r+0x1e>
 800c114:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c118:	f000 b932 	b.w	800c380 <__swbuf_r>
 800c11c:	6813      	ldr	r3, [r2, #0]
 800c11e:	1c58      	adds	r0, r3, #1
 800c120:	6010      	str	r0, [r2, #0]
 800c122:	7019      	strb	r1, [r3, #0]
 800c124:	4608      	mov	r0, r1
 800c126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <__sfputs_r>:
 800c12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12e:	4606      	mov	r6, r0
 800c130:	460f      	mov	r7, r1
 800c132:	4614      	mov	r4, r2
 800c134:	18d5      	adds	r5, r2, r3
 800c136:	42ac      	cmp	r4, r5
 800c138:	d101      	bne.n	800c13e <__sfputs_r+0x12>
 800c13a:	2000      	movs	r0, #0
 800c13c:	e007      	b.n	800c14e <__sfputs_r+0x22>
 800c13e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c142:	463a      	mov	r2, r7
 800c144:	4630      	mov	r0, r6
 800c146:	f7ff ffda 	bl	800c0fe <__sfputc_r>
 800c14a:	1c43      	adds	r3, r0, #1
 800c14c:	d1f3      	bne.n	800c136 <__sfputs_r+0xa>
 800c14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c150 <_vfiprintf_r>:
 800c150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c154:	460d      	mov	r5, r1
 800c156:	b09d      	sub	sp, #116	@ 0x74
 800c158:	4614      	mov	r4, r2
 800c15a:	4698      	mov	r8, r3
 800c15c:	4606      	mov	r6, r0
 800c15e:	b118      	cbz	r0, 800c168 <_vfiprintf_r+0x18>
 800c160:	6a03      	ldr	r3, [r0, #32]
 800c162:	b90b      	cbnz	r3, 800c168 <_vfiprintf_r+0x18>
 800c164:	f7fe f906 	bl	800a374 <__sinit>
 800c168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c16a:	07d9      	lsls	r1, r3, #31
 800c16c:	d405      	bmi.n	800c17a <_vfiprintf_r+0x2a>
 800c16e:	89ab      	ldrh	r3, [r5, #12]
 800c170:	059a      	lsls	r2, r3, #22
 800c172:	d402      	bmi.n	800c17a <_vfiprintf_r+0x2a>
 800c174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c176:	f7fe fa14 	bl	800a5a2 <__retarget_lock_acquire_recursive>
 800c17a:	89ab      	ldrh	r3, [r5, #12]
 800c17c:	071b      	lsls	r3, r3, #28
 800c17e:	d501      	bpl.n	800c184 <_vfiprintf_r+0x34>
 800c180:	692b      	ldr	r3, [r5, #16]
 800c182:	b99b      	cbnz	r3, 800c1ac <_vfiprintf_r+0x5c>
 800c184:	4629      	mov	r1, r5
 800c186:	4630      	mov	r0, r6
 800c188:	f000 f938 	bl	800c3fc <__swsetup_r>
 800c18c:	b170      	cbz	r0, 800c1ac <_vfiprintf_r+0x5c>
 800c18e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c190:	07dc      	lsls	r4, r3, #31
 800c192:	d504      	bpl.n	800c19e <_vfiprintf_r+0x4e>
 800c194:	f04f 30ff 	mov.w	r0, #4294967295
 800c198:	b01d      	add	sp, #116	@ 0x74
 800c19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c19e:	89ab      	ldrh	r3, [r5, #12]
 800c1a0:	0598      	lsls	r0, r3, #22
 800c1a2:	d4f7      	bmi.n	800c194 <_vfiprintf_r+0x44>
 800c1a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1a6:	f7fe f9fd 	bl	800a5a4 <__retarget_lock_release_recursive>
 800c1aa:	e7f3      	b.n	800c194 <_vfiprintf_r+0x44>
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1b0:	2320      	movs	r3, #32
 800c1b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c1b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1ba:	2330      	movs	r3, #48	@ 0x30
 800c1bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c36c <_vfiprintf_r+0x21c>
 800c1c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1c4:	f04f 0901 	mov.w	r9, #1
 800c1c8:	4623      	mov	r3, r4
 800c1ca:	469a      	mov	sl, r3
 800c1cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1d0:	b10a      	cbz	r2, 800c1d6 <_vfiprintf_r+0x86>
 800c1d2:	2a25      	cmp	r2, #37	@ 0x25
 800c1d4:	d1f9      	bne.n	800c1ca <_vfiprintf_r+0x7a>
 800c1d6:	ebba 0b04 	subs.w	fp, sl, r4
 800c1da:	d00b      	beq.n	800c1f4 <_vfiprintf_r+0xa4>
 800c1dc:	465b      	mov	r3, fp
 800c1de:	4622      	mov	r2, r4
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	f7ff ffa2 	bl	800c12c <__sfputs_r>
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	f000 80a7 	beq.w	800c33c <_vfiprintf_r+0x1ec>
 800c1ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1f0:	445a      	add	r2, fp
 800c1f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f000 809f 	beq.w	800c33c <_vfiprintf_r+0x1ec>
 800c1fe:	2300      	movs	r3, #0
 800c200:	f04f 32ff 	mov.w	r2, #4294967295
 800c204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c208:	f10a 0a01 	add.w	sl, sl, #1
 800c20c:	9304      	str	r3, [sp, #16]
 800c20e:	9307      	str	r3, [sp, #28]
 800c210:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c214:	931a      	str	r3, [sp, #104]	@ 0x68
 800c216:	4654      	mov	r4, sl
 800c218:	2205      	movs	r2, #5
 800c21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c21e:	4853      	ldr	r0, [pc, #332]	@ (800c36c <_vfiprintf_r+0x21c>)
 800c220:	f7f3 ffde 	bl	80001e0 <memchr>
 800c224:	9a04      	ldr	r2, [sp, #16]
 800c226:	b9d8      	cbnz	r0, 800c260 <_vfiprintf_r+0x110>
 800c228:	06d1      	lsls	r1, r2, #27
 800c22a:	bf44      	itt	mi
 800c22c:	2320      	movmi	r3, #32
 800c22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c232:	0713      	lsls	r3, r2, #28
 800c234:	bf44      	itt	mi
 800c236:	232b      	movmi	r3, #43	@ 0x2b
 800c238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c23c:	f89a 3000 	ldrb.w	r3, [sl]
 800c240:	2b2a      	cmp	r3, #42	@ 0x2a
 800c242:	d015      	beq.n	800c270 <_vfiprintf_r+0x120>
 800c244:	9a07      	ldr	r2, [sp, #28]
 800c246:	4654      	mov	r4, sl
 800c248:	2000      	movs	r0, #0
 800c24a:	f04f 0c0a 	mov.w	ip, #10
 800c24e:	4621      	mov	r1, r4
 800c250:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c254:	3b30      	subs	r3, #48	@ 0x30
 800c256:	2b09      	cmp	r3, #9
 800c258:	d94b      	bls.n	800c2f2 <_vfiprintf_r+0x1a2>
 800c25a:	b1b0      	cbz	r0, 800c28a <_vfiprintf_r+0x13a>
 800c25c:	9207      	str	r2, [sp, #28]
 800c25e:	e014      	b.n	800c28a <_vfiprintf_r+0x13a>
 800c260:	eba0 0308 	sub.w	r3, r0, r8
 800c264:	fa09 f303 	lsl.w	r3, r9, r3
 800c268:	4313      	orrs	r3, r2
 800c26a:	9304      	str	r3, [sp, #16]
 800c26c:	46a2      	mov	sl, r4
 800c26e:	e7d2      	b.n	800c216 <_vfiprintf_r+0xc6>
 800c270:	9b03      	ldr	r3, [sp, #12]
 800c272:	1d19      	adds	r1, r3, #4
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	9103      	str	r1, [sp, #12]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	bfbb      	ittet	lt
 800c27c:	425b      	neglt	r3, r3
 800c27e:	f042 0202 	orrlt.w	r2, r2, #2
 800c282:	9307      	strge	r3, [sp, #28]
 800c284:	9307      	strlt	r3, [sp, #28]
 800c286:	bfb8      	it	lt
 800c288:	9204      	strlt	r2, [sp, #16]
 800c28a:	7823      	ldrb	r3, [r4, #0]
 800c28c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c28e:	d10a      	bne.n	800c2a6 <_vfiprintf_r+0x156>
 800c290:	7863      	ldrb	r3, [r4, #1]
 800c292:	2b2a      	cmp	r3, #42	@ 0x2a
 800c294:	d132      	bne.n	800c2fc <_vfiprintf_r+0x1ac>
 800c296:	9b03      	ldr	r3, [sp, #12]
 800c298:	1d1a      	adds	r2, r3, #4
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	9203      	str	r2, [sp, #12]
 800c29e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2a2:	3402      	adds	r4, #2
 800c2a4:	9305      	str	r3, [sp, #20]
 800c2a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c37c <_vfiprintf_r+0x22c>
 800c2aa:	7821      	ldrb	r1, [r4, #0]
 800c2ac:	2203      	movs	r2, #3
 800c2ae:	4650      	mov	r0, sl
 800c2b0:	f7f3 ff96 	bl	80001e0 <memchr>
 800c2b4:	b138      	cbz	r0, 800c2c6 <_vfiprintf_r+0x176>
 800c2b6:	9b04      	ldr	r3, [sp, #16]
 800c2b8:	eba0 000a 	sub.w	r0, r0, sl
 800c2bc:	2240      	movs	r2, #64	@ 0x40
 800c2be:	4082      	lsls	r2, r0
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	3401      	adds	r4, #1
 800c2c4:	9304      	str	r3, [sp, #16]
 800c2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ca:	4829      	ldr	r0, [pc, #164]	@ (800c370 <_vfiprintf_r+0x220>)
 800c2cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2d0:	2206      	movs	r2, #6
 800c2d2:	f7f3 ff85 	bl	80001e0 <memchr>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d03f      	beq.n	800c35a <_vfiprintf_r+0x20a>
 800c2da:	4b26      	ldr	r3, [pc, #152]	@ (800c374 <_vfiprintf_r+0x224>)
 800c2dc:	bb1b      	cbnz	r3, 800c326 <_vfiprintf_r+0x1d6>
 800c2de:	9b03      	ldr	r3, [sp, #12]
 800c2e0:	3307      	adds	r3, #7
 800c2e2:	f023 0307 	bic.w	r3, r3, #7
 800c2e6:	3308      	adds	r3, #8
 800c2e8:	9303      	str	r3, [sp, #12]
 800c2ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ec:	443b      	add	r3, r7
 800c2ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2f0:	e76a      	b.n	800c1c8 <_vfiprintf_r+0x78>
 800c2f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	2001      	movs	r0, #1
 800c2fa:	e7a8      	b.n	800c24e <_vfiprintf_r+0xfe>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	3401      	adds	r4, #1
 800c300:	9305      	str	r3, [sp, #20]
 800c302:	4619      	mov	r1, r3
 800c304:	f04f 0c0a 	mov.w	ip, #10
 800c308:	4620      	mov	r0, r4
 800c30a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c30e:	3a30      	subs	r2, #48	@ 0x30
 800c310:	2a09      	cmp	r2, #9
 800c312:	d903      	bls.n	800c31c <_vfiprintf_r+0x1cc>
 800c314:	2b00      	cmp	r3, #0
 800c316:	d0c6      	beq.n	800c2a6 <_vfiprintf_r+0x156>
 800c318:	9105      	str	r1, [sp, #20]
 800c31a:	e7c4      	b.n	800c2a6 <_vfiprintf_r+0x156>
 800c31c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c320:	4604      	mov	r4, r0
 800c322:	2301      	movs	r3, #1
 800c324:	e7f0      	b.n	800c308 <_vfiprintf_r+0x1b8>
 800c326:	ab03      	add	r3, sp, #12
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	462a      	mov	r2, r5
 800c32c:	4b12      	ldr	r3, [pc, #72]	@ (800c378 <_vfiprintf_r+0x228>)
 800c32e:	a904      	add	r1, sp, #16
 800c330:	4630      	mov	r0, r6
 800c332:	f7fd fbdb 	bl	8009aec <_printf_float>
 800c336:	4607      	mov	r7, r0
 800c338:	1c78      	adds	r0, r7, #1
 800c33a:	d1d6      	bne.n	800c2ea <_vfiprintf_r+0x19a>
 800c33c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c33e:	07d9      	lsls	r1, r3, #31
 800c340:	d405      	bmi.n	800c34e <_vfiprintf_r+0x1fe>
 800c342:	89ab      	ldrh	r3, [r5, #12]
 800c344:	059a      	lsls	r2, r3, #22
 800c346:	d402      	bmi.n	800c34e <_vfiprintf_r+0x1fe>
 800c348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c34a:	f7fe f92b 	bl	800a5a4 <__retarget_lock_release_recursive>
 800c34e:	89ab      	ldrh	r3, [r5, #12]
 800c350:	065b      	lsls	r3, r3, #25
 800c352:	f53f af1f 	bmi.w	800c194 <_vfiprintf_r+0x44>
 800c356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c358:	e71e      	b.n	800c198 <_vfiprintf_r+0x48>
 800c35a:	ab03      	add	r3, sp, #12
 800c35c:	9300      	str	r3, [sp, #0]
 800c35e:	462a      	mov	r2, r5
 800c360:	4b05      	ldr	r3, [pc, #20]	@ (800c378 <_vfiprintf_r+0x228>)
 800c362:	a904      	add	r1, sp, #16
 800c364:	4630      	mov	r0, r6
 800c366:	f7fd fe59 	bl	800a01c <_printf_i>
 800c36a:	e7e4      	b.n	800c336 <_vfiprintf_r+0x1e6>
 800c36c:	0800c948 	.word	0x0800c948
 800c370:	0800c952 	.word	0x0800c952
 800c374:	08009aed 	.word	0x08009aed
 800c378:	0800c12d 	.word	0x0800c12d
 800c37c:	0800c94e 	.word	0x0800c94e

0800c380 <__swbuf_r>:
 800c380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c382:	460e      	mov	r6, r1
 800c384:	4614      	mov	r4, r2
 800c386:	4605      	mov	r5, r0
 800c388:	b118      	cbz	r0, 800c392 <__swbuf_r+0x12>
 800c38a:	6a03      	ldr	r3, [r0, #32]
 800c38c:	b90b      	cbnz	r3, 800c392 <__swbuf_r+0x12>
 800c38e:	f7fd fff1 	bl	800a374 <__sinit>
 800c392:	69a3      	ldr	r3, [r4, #24]
 800c394:	60a3      	str	r3, [r4, #8]
 800c396:	89a3      	ldrh	r3, [r4, #12]
 800c398:	071a      	lsls	r2, r3, #28
 800c39a:	d501      	bpl.n	800c3a0 <__swbuf_r+0x20>
 800c39c:	6923      	ldr	r3, [r4, #16]
 800c39e:	b943      	cbnz	r3, 800c3b2 <__swbuf_r+0x32>
 800c3a0:	4621      	mov	r1, r4
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f000 f82a 	bl	800c3fc <__swsetup_r>
 800c3a8:	b118      	cbz	r0, 800c3b2 <__swbuf_r+0x32>
 800c3aa:	f04f 37ff 	mov.w	r7, #4294967295
 800c3ae:	4638      	mov	r0, r7
 800c3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3b2:	6823      	ldr	r3, [r4, #0]
 800c3b4:	6922      	ldr	r2, [r4, #16]
 800c3b6:	1a98      	subs	r0, r3, r2
 800c3b8:	6963      	ldr	r3, [r4, #20]
 800c3ba:	b2f6      	uxtb	r6, r6
 800c3bc:	4283      	cmp	r3, r0
 800c3be:	4637      	mov	r7, r6
 800c3c0:	dc05      	bgt.n	800c3ce <__swbuf_r+0x4e>
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	f7ff fd99 	bl	800befc <_fflush_r>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d1ed      	bne.n	800c3aa <__swbuf_r+0x2a>
 800c3ce:	68a3      	ldr	r3, [r4, #8]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	60a3      	str	r3, [r4, #8]
 800c3d4:	6823      	ldr	r3, [r4, #0]
 800c3d6:	1c5a      	adds	r2, r3, #1
 800c3d8:	6022      	str	r2, [r4, #0]
 800c3da:	701e      	strb	r6, [r3, #0]
 800c3dc:	6962      	ldr	r2, [r4, #20]
 800c3de:	1c43      	adds	r3, r0, #1
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d004      	beq.n	800c3ee <__swbuf_r+0x6e>
 800c3e4:	89a3      	ldrh	r3, [r4, #12]
 800c3e6:	07db      	lsls	r3, r3, #31
 800c3e8:	d5e1      	bpl.n	800c3ae <__swbuf_r+0x2e>
 800c3ea:	2e0a      	cmp	r6, #10
 800c3ec:	d1df      	bne.n	800c3ae <__swbuf_r+0x2e>
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	f7ff fd83 	bl	800befc <_fflush_r>
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	d0d9      	beq.n	800c3ae <__swbuf_r+0x2e>
 800c3fa:	e7d6      	b.n	800c3aa <__swbuf_r+0x2a>

0800c3fc <__swsetup_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	4b29      	ldr	r3, [pc, #164]	@ (800c4a4 <__swsetup_r+0xa8>)
 800c400:	4605      	mov	r5, r0
 800c402:	6818      	ldr	r0, [r3, #0]
 800c404:	460c      	mov	r4, r1
 800c406:	b118      	cbz	r0, 800c410 <__swsetup_r+0x14>
 800c408:	6a03      	ldr	r3, [r0, #32]
 800c40a:	b90b      	cbnz	r3, 800c410 <__swsetup_r+0x14>
 800c40c:	f7fd ffb2 	bl	800a374 <__sinit>
 800c410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c414:	0719      	lsls	r1, r3, #28
 800c416:	d422      	bmi.n	800c45e <__swsetup_r+0x62>
 800c418:	06da      	lsls	r2, r3, #27
 800c41a:	d407      	bmi.n	800c42c <__swsetup_r+0x30>
 800c41c:	2209      	movs	r2, #9
 800c41e:	602a      	str	r2, [r5, #0]
 800c420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c424:	81a3      	strh	r3, [r4, #12]
 800c426:	f04f 30ff 	mov.w	r0, #4294967295
 800c42a:	e033      	b.n	800c494 <__swsetup_r+0x98>
 800c42c:	0758      	lsls	r0, r3, #29
 800c42e:	d512      	bpl.n	800c456 <__swsetup_r+0x5a>
 800c430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c432:	b141      	cbz	r1, 800c446 <__swsetup_r+0x4a>
 800c434:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c438:	4299      	cmp	r1, r3
 800c43a:	d002      	beq.n	800c442 <__swsetup_r+0x46>
 800c43c:	4628      	mov	r0, r5
 800c43e:	f7fe feff 	bl	800b240 <_free_r>
 800c442:	2300      	movs	r3, #0
 800c444:	6363      	str	r3, [r4, #52]	@ 0x34
 800c446:	89a3      	ldrh	r3, [r4, #12]
 800c448:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c44c:	81a3      	strh	r3, [r4, #12]
 800c44e:	2300      	movs	r3, #0
 800c450:	6063      	str	r3, [r4, #4]
 800c452:	6923      	ldr	r3, [r4, #16]
 800c454:	6023      	str	r3, [r4, #0]
 800c456:	89a3      	ldrh	r3, [r4, #12]
 800c458:	f043 0308 	orr.w	r3, r3, #8
 800c45c:	81a3      	strh	r3, [r4, #12]
 800c45e:	6923      	ldr	r3, [r4, #16]
 800c460:	b94b      	cbnz	r3, 800c476 <__swsetup_r+0x7a>
 800c462:	89a3      	ldrh	r3, [r4, #12]
 800c464:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c46c:	d003      	beq.n	800c476 <__swsetup_r+0x7a>
 800c46e:	4621      	mov	r1, r4
 800c470:	4628      	mov	r0, r5
 800c472:	f000 f883 	bl	800c57c <__smakebuf_r>
 800c476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c47a:	f013 0201 	ands.w	r2, r3, #1
 800c47e:	d00a      	beq.n	800c496 <__swsetup_r+0x9a>
 800c480:	2200      	movs	r2, #0
 800c482:	60a2      	str	r2, [r4, #8]
 800c484:	6962      	ldr	r2, [r4, #20]
 800c486:	4252      	negs	r2, r2
 800c488:	61a2      	str	r2, [r4, #24]
 800c48a:	6922      	ldr	r2, [r4, #16]
 800c48c:	b942      	cbnz	r2, 800c4a0 <__swsetup_r+0xa4>
 800c48e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c492:	d1c5      	bne.n	800c420 <__swsetup_r+0x24>
 800c494:	bd38      	pop	{r3, r4, r5, pc}
 800c496:	0799      	lsls	r1, r3, #30
 800c498:	bf58      	it	pl
 800c49a:	6962      	ldrpl	r2, [r4, #20]
 800c49c:	60a2      	str	r2, [r4, #8]
 800c49e:	e7f4      	b.n	800c48a <__swsetup_r+0x8e>
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	e7f7      	b.n	800c494 <__swsetup_r+0x98>
 800c4a4:	20000018 	.word	0x20000018

0800c4a8 <_raise_r>:
 800c4a8:	291f      	cmp	r1, #31
 800c4aa:	b538      	push	{r3, r4, r5, lr}
 800c4ac:	4605      	mov	r5, r0
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	d904      	bls.n	800c4bc <_raise_r+0x14>
 800c4b2:	2316      	movs	r3, #22
 800c4b4:	6003      	str	r3, [r0, #0]
 800c4b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ba:	bd38      	pop	{r3, r4, r5, pc}
 800c4bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c4be:	b112      	cbz	r2, 800c4c6 <_raise_r+0x1e>
 800c4c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4c4:	b94b      	cbnz	r3, 800c4da <_raise_r+0x32>
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	f000 f830 	bl	800c52c <_getpid_r>
 800c4cc:	4622      	mov	r2, r4
 800c4ce:	4601      	mov	r1, r0
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4d6:	f000 b817 	b.w	800c508 <_kill_r>
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d00a      	beq.n	800c4f4 <_raise_r+0x4c>
 800c4de:	1c59      	adds	r1, r3, #1
 800c4e0:	d103      	bne.n	800c4ea <_raise_r+0x42>
 800c4e2:	2316      	movs	r3, #22
 800c4e4:	6003      	str	r3, [r0, #0]
 800c4e6:	2001      	movs	r0, #1
 800c4e8:	e7e7      	b.n	800c4ba <_raise_r+0x12>
 800c4ea:	2100      	movs	r1, #0
 800c4ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	4798      	blx	r3
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	e7e0      	b.n	800c4ba <_raise_r+0x12>

0800c4f8 <raise>:
 800c4f8:	4b02      	ldr	r3, [pc, #8]	@ (800c504 <raise+0xc>)
 800c4fa:	4601      	mov	r1, r0
 800c4fc:	6818      	ldr	r0, [r3, #0]
 800c4fe:	f7ff bfd3 	b.w	800c4a8 <_raise_r>
 800c502:	bf00      	nop
 800c504:	20000018 	.word	0x20000018

0800c508 <_kill_r>:
 800c508:	b538      	push	{r3, r4, r5, lr}
 800c50a:	4d07      	ldr	r5, [pc, #28]	@ (800c528 <_kill_r+0x20>)
 800c50c:	2300      	movs	r3, #0
 800c50e:	4604      	mov	r4, r0
 800c510:	4608      	mov	r0, r1
 800c512:	4611      	mov	r1, r2
 800c514:	602b      	str	r3, [r5, #0]
 800c516:	f7f6 fa13 	bl	8002940 <_kill>
 800c51a:	1c43      	adds	r3, r0, #1
 800c51c:	d102      	bne.n	800c524 <_kill_r+0x1c>
 800c51e:	682b      	ldr	r3, [r5, #0]
 800c520:	b103      	cbz	r3, 800c524 <_kill_r+0x1c>
 800c522:	6023      	str	r3, [r4, #0]
 800c524:	bd38      	pop	{r3, r4, r5, pc}
 800c526:	bf00      	nop
 800c528:	200008e4 	.word	0x200008e4

0800c52c <_getpid_r>:
 800c52c:	f7f6 ba00 	b.w	8002930 <_getpid>

0800c530 <__swhatbuf_r>:
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	460c      	mov	r4, r1
 800c534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c538:	2900      	cmp	r1, #0
 800c53a:	b096      	sub	sp, #88	@ 0x58
 800c53c:	4615      	mov	r5, r2
 800c53e:	461e      	mov	r6, r3
 800c540:	da0d      	bge.n	800c55e <__swhatbuf_r+0x2e>
 800c542:	89a3      	ldrh	r3, [r4, #12]
 800c544:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c548:	f04f 0100 	mov.w	r1, #0
 800c54c:	bf14      	ite	ne
 800c54e:	2340      	movne	r3, #64	@ 0x40
 800c550:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c554:	2000      	movs	r0, #0
 800c556:	6031      	str	r1, [r6, #0]
 800c558:	602b      	str	r3, [r5, #0]
 800c55a:	b016      	add	sp, #88	@ 0x58
 800c55c:	bd70      	pop	{r4, r5, r6, pc}
 800c55e:	466a      	mov	r2, sp
 800c560:	f000 f848 	bl	800c5f4 <_fstat_r>
 800c564:	2800      	cmp	r0, #0
 800c566:	dbec      	blt.n	800c542 <__swhatbuf_r+0x12>
 800c568:	9901      	ldr	r1, [sp, #4]
 800c56a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c56e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c572:	4259      	negs	r1, r3
 800c574:	4159      	adcs	r1, r3
 800c576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c57a:	e7eb      	b.n	800c554 <__swhatbuf_r+0x24>

0800c57c <__smakebuf_r>:
 800c57c:	898b      	ldrh	r3, [r1, #12]
 800c57e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c580:	079d      	lsls	r5, r3, #30
 800c582:	4606      	mov	r6, r0
 800c584:	460c      	mov	r4, r1
 800c586:	d507      	bpl.n	800c598 <__smakebuf_r+0x1c>
 800c588:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	6123      	str	r3, [r4, #16]
 800c590:	2301      	movs	r3, #1
 800c592:	6163      	str	r3, [r4, #20]
 800c594:	b003      	add	sp, #12
 800c596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c598:	ab01      	add	r3, sp, #4
 800c59a:	466a      	mov	r2, sp
 800c59c:	f7ff ffc8 	bl	800c530 <__swhatbuf_r>
 800c5a0:	9f00      	ldr	r7, [sp, #0]
 800c5a2:	4605      	mov	r5, r0
 800c5a4:	4639      	mov	r1, r7
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f7fe febe 	bl	800b328 <_malloc_r>
 800c5ac:	b948      	cbnz	r0, 800c5c2 <__smakebuf_r+0x46>
 800c5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5b2:	059a      	lsls	r2, r3, #22
 800c5b4:	d4ee      	bmi.n	800c594 <__smakebuf_r+0x18>
 800c5b6:	f023 0303 	bic.w	r3, r3, #3
 800c5ba:	f043 0302 	orr.w	r3, r3, #2
 800c5be:	81a3      	strh	r3, [r4, #12]
 800c5c0:	e7e2      	b.n	800c588 <__smakebuf_r+0xc>
 800c5c2:	89a3      	ldrh	r3, [r4, #12]
 800c5c4:	6020      	str	r0, [r4, #0]
 800c5c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5ca:	81a3      	strh	r3, [r4, #12]
 800c5cc:	9b01      	ldr	r3, [sp, #4]
 800c5ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c5d2:	b15b      	cbz	r3, 800c5ec <__smakebuf_r+0x70>
 800c5d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5d8:	4630      	mov	r0, r6
 800c5da:	f000 f81d 	bl	800c618 <_isatty_r>
 800c5de:	b128      	cbz	r0, 800c5ec <__smakebuf_r+0x70>
 800c5e0:	89a3      	ldrh	r3, [r4, #12]
 800c5e2:	f023 0303 	bic.w	r3, r3, #3
 800c5e6:	f043 0301 	orr.w	r3, r3, #1
 800c5ea:	81a3      	strh	r3, [r4, #12]
 800c5ec:	89a3      	ldrh	r3, [r4, #12]
 800c5ee:	431d      	orrs	r5, r3
 800c5f0:	81a5      	strh	r5, [r4, #12]
 800c5f2:	e7cf      	b.n	800c594 <__smakebuf_r+0x18>

0800c5f4 <_fstat_r>:
 800c5f4:	b538      	push	{r3, r4, r5, lr}
 800c5f6:	4d07      	ldr	r5, [pc, #28]	@ (800c614 <_fstat_r+0x20>)
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	4608      	mov	r0, r1
 800c5fe:	4611      	mov	r1, r2
 800c600:	602b      	str	r3, [r5, #0]
 800c602:	f7f6 f9fd 	bl	8002a00 <_fstat>
 800c606:	1c43      	adds	r3, r0, #1
 800c608:	d102      	bne.n	800c610 <_fstat_r+0x1c>
 800c60a:	682b      	ldr	r3, [r5, #0]
 800c60c:	b103      	cbz	r3, 800c610 <_fstat_r+0x1c>
 800c60e:	6023      	str	r3, [r4, #0]
 800c610:	bd38      	pop	{r3, r4, r5, pc}
 800c612:	bf00      	nop
 800c614:	200008e4 	.word	0x200008e4

0800c618 <_isatty_r>:
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	4d06      	ldr	r5, [pc, #24]	@ (800c634 <_isatty_r+0x1c>)
 800c61c:	2300      	movs	r3, #0
 800c61e:	4604      	mov	r4, r0
 800c620:	4608      	mov	r0, r1
 800c622:	602b      	str	r3, [r5, #0]
 800c624:	f7f6 f9fc 	bl	8002a20 <_isatty>
 800c628:	1c43      	adds	r3, r0, #1
 800c62a:	d102      	bne.n	800c632 <_isatty_r+0x1a>
 800c62c:	682b      	ldr	r3, [r5, #0]
 800c62e:	b103      	cbz	r3, 800c632 <_isatty_r+0x1a>
 800c630:	6023      	str	r3, [r4, #0]
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	200008e4 	.word	0x200008e4

0800c638 <_init>:
 800c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63a:	bf00      	nop
 800c63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c63e:	bc08      	pop	{r3}
 800c640:	469e      	mov	lr, r3
 800c642:	4770      	bx	lr

0800c644 <_fini>:
 800c644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c646:	bf00      	nop
 800c648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c64a:	bc08      	pop	{r3}
 800c64c:	469e      	mov	lr, r3
 800c64e:	4770      	bx	lr
