
motor_driver_144.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd50  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800cef0  0800cef0  0000def0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d340  0800d340  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d340  0800d340  0000e340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d348  0800d348  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d348  0800d348  0000e348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d34c  0800d34c  0000e34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d350  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1d4  2**0
                  CONTENTS
 10 .bss          000007a8  200001d4  200001d4  0000f1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000097c  2000097c  0000f1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159cd  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cd0  00000000  00000000  00024bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  000278a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e03  00000000  00000000  00028ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000233da  00000000  00000000  000298b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e5e  00000000  00000000  0004cc8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d60b3  00000000  00000000  00063aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00139b9e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ce8  00000000  00000000  00139be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0013f8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ced8 	.word	0x0800ced8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800ced8 	.word	0x0800ced8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <compute_ideal_speed>:
#include "drive_model.h"
#include "chassis_param.h"

void compute_ideal_speed(volatile float v, volatile float w,
		volatile float *lb_speed, volatile float *rb_speed,
		volatile float *lf_speed, volatile float *rf_speed) {
 8000c58:	b5b0      	push	{r4, r5, r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000c62:	edc7 0a04 	vstr	s1, [r7, #16]
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	603b      	str	r3, [r7, #0]
	*lb_speed = v - w * CHASSIS_WIDTH / 2.0;
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fc71 	bl	8000558 <__aeabi_f2d>
 8000c76:	4604      	mov	r4, r0
 8000c78:	460d      	mov	r5, r1
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fc6b 	bl	8000558 <__aeabi_f2d>
 8000c82:	a329      	add	r3, pc, #164	@ (adr r3, 8000d28 <compute_ideal_speed+0xd0>)
 8000c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c88:	f7ff fcbe 	bl	8000608 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4610      	mov	r0, r2
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c9c:	f7ff fdde 	bl	800085c <__aeabi_ddiv>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	f7ff faf6 	bl	8000298 <__aeabi_dsub>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f7ff ff80 	bl	8000bb8 <__aeabi_d2f>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	601a      	str	r2, [r3, #0]
	*rb_speed = v + w * CHASSIS_WIDTH / 2.0;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fc49 	bl	8000558 <__aeabi_f2d>
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fc43 	bl	8000558 <__aeabi_f2d>
 8000cd2:	a315      	add	r3, pc, #84	@ (adr r3, 8000d28 <compute_ideal_speed+0xd0>)
 8000cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd8:	f7ff fc96 	bl	8000608 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cec:	f7ff fdb6 	bl	800085c <__aeabi_ddiv>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	4629      	mov	r1, r5
 8000cf8:	f7ff fad0 	bl	800029c <__adddf3>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4610      	mov	r0, r2
 8000d02:	4619      	mov	r1, r3
 8000d04:	f7ff ff58 	bl	8000bb8 <__aeabi_d2f>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	601a      	str	r2, [r3, #0]
	*lf_speed = *lb_speed;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	601a      	str	r2, [r3, #0]
	*rf_speed = *rb_speed;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	601a      	str	r2, [r3, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bdb0      	pop	{r4, r5, r7, pc}
 8000d26:	bf00      	nop
 8000d28:	9999999a 	.word	0x9999999a
 8000d2c:	3fc99999 	.word	0x3fc99999

08000d30 <lb_forward>:
 */
#include "h_bridge_control.h"
#include "main.h"

//LB
void lb_forward(void){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d3a:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <lb_forward+0x20>)
 8000d3c:	f002 fb20 	bl	8003380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d46:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <lb_forward+0x20>)
 8000d48:	f002 fb1a 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	48001400 	.word	0x48001400

08000d54 <lb_backward>:

void lb_backward(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <lb_backward+0x20>)
 8000d60:	f002 fb0e 	bl	8003380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d6a:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <lb_backward+0x20>)
 8000d6c:	f002 fb08 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	48001400 	.word	0x48001400

08000d78 <lb_stop>:

void lb_stop(void){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <lb_stop+0x20>)
 8000d84:	f002 fafc 	bl	8003380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d8e:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <lb_stop+0x20>)
 8000d90:	f002 faf6 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	48001400 	.word	0x48001400

08000d9c <rb_forward>:

//RB
void rb_forward(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2110      	movs	r1, #16
 8000da4:	4804      	ldr	r0, [pc, #16]	@ (8000db8 <rb_forward+0x1c>)
 8000da6:	f002 faeb 	bl	8003380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2120      	movs	r1, #32
 8000dae:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <rb_forward+0x1c>)
 8000db0:	f002 fae6 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	48001000 	.word	0x48001000

08000dbc <rb_backward>:

void rb_backward(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <rb_backward+0x1c>)
 8000dc6:	f002 fadb 	bl	8003380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2120      	movs	r1, #32
 8000dce:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <rb_backward+0x1c>)
 8000dd0:	f002 fad6 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	48001000 	.word	0x48001000

08000ddc <rb_stop>:

void rb_stop(void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2110      	movs	r1, #16
 8000de4:	4804      	ldr	r0, [pc, #16]	@ (8000df8 <rb_stop+0x1c>)
 8000de6:	f002 facb 	bl	8003380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2120      	movs	r1, #32
 8000dee:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <rb_stop+0x1c>)
 8000df0:	f002 fac6 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	48001000 	.word	0x48001000

08000dfc <lf_forward>:

//LF
void lf_forward(void){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e06:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <lf_forward+0x20>)
 8000e08:	f002 faba 	bl	8003380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e12:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <lf_forward+0x20>)
 8000e14:	f002 fab4 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	48000800 	.word	0x48000800

08000e20 <lf_backward>:

void lf_backward(void){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <lf_backward+0x20>)
 8000e2c:	f002 faa8 	bl	8003380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e36:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <lf_backward+0x20>)
 8000e38:	f002 faa2 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	48000800 	.word	0x48000800

08000e44 <lf_stop>:

void lf_stop(void){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <lf_stop+0x20>)
 8000e50:	f002 fa96 	bl	8003380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e5a:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <lf_stop+0x20>)
 8000e5c:	f002 fa90 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	48000800 	.word	0x48000800

08000e68 <rf_forward>:

//RF
void rf_forward(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2104      	movs	r1, #4
 8000e70:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <rf_forward+0x1c>)
 8000e72:	f002 fa85 	bl	8003380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2108      	movs	r1, #8
 8000e7a:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <rf_forward+0x1c>)
 8000e7c:	f002 fa80 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	48001800 	.word	0x48001800

08000e88 <rf_backward>:

void rf_backward(void){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2104      	movs	r1, #4
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <rf_backward+0x1c>)
 8000e92:	f002 fa75 	bl	8003380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2108      	movs	r1, #8
 8000e9a:	4802      	ldr	r0, [pc, #8]	@ (8000ea4 <rf_backward+0x1c>)
 8000e9c:	f002 fa70 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	48001800 	.word	0x48001800

08000ea8 <rf_stop>:

void rf_stop(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2104      	movs	r1, #4
 8000eb0:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <rf_stop+0x1c>)
 8000eb2:	f002 fa65 	bl	8003380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2108      	movs	r1, #8
 8000eba:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <rf_stop+0x1c>)
 8000ebc:	f002 fa60 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	48001800 	.word	0x48001800

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f001 feb5 	bl	8002c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f8cb 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f000 fbe9 	bl	80016ac <MX_GPIO_Init>
  MX_RTC_Init();
 8000eda:	f000 f93b 	bl	8001154 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000ede:	f000 fb8f 	bl	8001600 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000ee2:	f000 fbbd 	bl	8001660 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000ee6:	f000 f95b 	bl	80011a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eea:	f000 f9b3 	bl	8001254 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eee:	f000 fa2b 	bl	8001348 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ef2:	f000 fa7f 	bl	80013f4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000ef6:	f000 fad3 	bl	80014a0 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000efa:	f000 fb2b 	bl	8001554 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000efe:	f000 fb4f 	bl	80015a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim16);
 8000f02:	484b      	ldr	r0, [pc, #300]	@ (8001030 <main+0x168>)
 8000f04:	f005 fb28 	bl	8006558 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000f08:	213c      	movs	r1, #60	@ 0x3c
 8000f0a:	484a      	ldr	r0, [pc, #296]	@ (8001034 <main+0x16c>)
 8000f0c:	f005 fd9e 	bl	8006a4c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f10:	213c      	movs	r1, #60	@ 0x3c
 8000f12:	4849      	ldr	r0, [pc, #292]	@ (8001038 <main+0x170>)
 8000f14:	f005 fd9a 	bl	8006a4c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000f18:	213c      	movs	r1, #60	@ 0x3c
 8000f1a:	4848      	ldr	r0, [pc, #288]	@ (800103c <main+0x174>)
 8000f1c:	f005 fd96 	bl	8006a4c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000f20:	213c      	movs	r1, #60	@ 0x3c
 8000f22:	4847      	ldr	r0, [pc, #284]	@ (8001040 <main+0x178>)
 8000f24:	f005 fd92 	bl	8006a4c <HAL_TIM_Encoder_Start>

	//start PWM
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
	set_direction(LB, BREAK);
 8000f28:	2300      	movs	r3, #0
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fdae 	bl	8001a90 <set_direction>
	set_direction(RB, BREAK);
 8000f34:	2301      	movs	r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fda8 	bl	8001a90 <set_direction>
	set_direction(LF, BREAK);
 8000f40:	2302      	movs	r3, #2
 8000f42:	2203      	movs	r2, #3
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fda2 	bl	8001a90 <set_direction>
	set_direction(RF, BREAK);
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	2203      	movs	r2, #3
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fd9c 	bl	8001a90 <set_direction>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000f58:	4b3a      	ldr	r3, [pc, #232]	@ (8001044 <main+0x17c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000f60:	4b38      	ldr	r3, [pc, #224]	@ (8001044 <main+0x17c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2200      	movs	r2, #0
 8000f66:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000f68:	4b36      	ldr	r3, [pc, #216]	@ (8001044 <main+0x17c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000f70:	4b34      	ldr	r3, [pc, #208]	@ (8001044 <main+0x17c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2200      	movs	r2, #0
 8000f76:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4832      	ldr	r0, [pc, #200]	@ (8001044 <main+0x17c>)
 8000f7c:	f005 fbb4 	bl	80066e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f80:	2104      	movs	r1, #4
 8000f82:	4830      	ldr	r0, [pc, #192]	@ (8001044 <main+0x17c>)
 8000f84:	f005 fbb0 	bl	80066e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f88:	2108      	movs	r1, #8
 8000f8a:	482e      	ldr	r0, [pc, #184]	@ (8001044 <main+0x17c>)
 8000f8c:	f005 fbac 	bl	80066e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000f90:	210c      	movs	r1, #12
 8000f92:	482c      	ldr	r0, [pc, #176]	@ (8001044 <main+0x17c>)
 8000f94:	f005 fba8 	bl	80066e8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	log_to_uart("Hello\n\r");
 8000f98:	482b      	ldr	r0, [pc, #172]	@ (8001048 <main+0x180>)
 8000f9a:	f001 fa3d 	bl	8002418 <log_to_uart>
	char str[30];
//	sprintf(str, "%d", HAL_RCC_GetPCLK1Freq());
//	log_to_uart(str);

	lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <main+0x170>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa4:	4a29      	ldr	r2, [pc, #164]	@ (800104c <main+0x184>)
 8000fa6:	6013      	str	r3, [r2, #0]
	rb_count_last = __HAL_TIM_GET_COUNTER(&htim4);
 8000fa8:	4b24      	ldr	r3, [pc, #144]	@ (800103c <main+0x174>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fae:	4a28      	ldr	r2, [pc, #160]	@ (8001050 <main+0x188>)
 8000fb0:	6013      	str	r3, [r2, #0]
	lf_count_last = __HAL_TIM_GET_COUNTER(&htim1);
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <main+0x16c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb8:	4a26      	ldr	r2, [pc, #152]	@ (8001054 <main+0x18c>)
 8000fba:	6013      	str	r3, [r2, #0]
	rf_count_last = __HAL_TIM_GET_COUNTER(&htim8);
 8000fbc:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <main+0x178>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc2:	4a25      	ldr	r2, [pc, #148]	@ (8001058 <main+0x190>)
 8000fc4:	6013      	str	r3, [r2, #0]

	HAL_Delay(3000);
 8000fc6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fca:	f001 fe9d 	bl	8002d08 <HAL_Delay>
//		angle = (float) counter / 1320.0 * 360.0;
//		sprintf(str, "count: %ld, angle: %.2f\r\n", counter, angle);
//		log_to_uart(str);
//		HAL_Delay(100);

		v_desired = 1;
 8000fce:	4b23      	ldr	r3, [pc, #140]	@ (800105c <main+0x194>)
 8000fd0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000fd4:	601a      	str	r2, [r3, #0]
		reset_pid();
 8000fd6:	f000 fdc7 	bl	8001b68 <reset_pid>
		HAL_Delay(3000);
 8000fda:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fde:	f001 fe93 	bl	8002d08 <HAL_Delay>
		v_desired = 0.0;
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800105c <main+0x194>)
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
		w_desired = 10;
 8000fea:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <main+0x198>)
 8000fec:	4a1d      	ldr	r2, [pc, #116]	@ (8001064 <main+0x19c>)
 8000fee:	601a      	str	r2, [r3, #0]
		reset_pid();
 8000ff0:	f000 fdba 	bl	8001b68 <reset_pid>
		HAL_Delay(3000);
 8000ff4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ff8:	f001 fe86 	bl	8002d08 <HAL_Delay>
		v_desired = -1;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	@ (800105c <main+0x194>)
 8000ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8001068 <main+0x1a0>)
 8001000:	601a      	str	r2, [r3, #0]
		w_desired = 0.0;
 8001002:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <main+0x198>)
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
		reset_pid();
 800100a:	f000 fdad 	bl	8001b68 <reset_pid>
		HAL_Delay(3000);
 800100e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001012:	f001 fe79 	bl	8002d08 <HAL_Delay>
		v_desired = -0.5;
 8001016:	4b11      	ldr	r3, [pc, #68]	@ (800105c <main+0x194>)
 8001018:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 800101c:	601a      	str	r2, [r3, #0]
		reset_pid();
 800101e:	f000 fda3 	bl	8001b68 <reset_pid>
		HAL_Delay(3000);
 8001022:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001026:	f001 fe6f 	bl	8002d08 <HAL_Delay>
		v_desired = 1;
 800102a:	bf00      	nop
 800102c:	e7cf      	b.n	8000fce <main+0x106>
 800102e:	bf00      	nop
 8001030:	2000038c 	.word	0x2000038c
 8001034:	20000210 	.word	0x20000210
 8001038:	200002a8 	.word	0x200002a8
 800103c:	200002f4 	.word	0x200002f4
 8001040:	20000340 	.word	0x20000340
 8001044:	2000025c 	.word	0x2000025c
 8001048:	0800cef0 	.word	0x0800cef0
 800104c:	200007d0 	.word	0x200007d0
 8001050:	200007d4 	.word	0x200007d4
 8001054:	200007d8 	.word	0x200007d8
 8001058:	200007dc 	.word	0x200007dc
 800105c:	20000820 	.word	0x20000820
 8001060:	20000824 	.word	0x20000824
 8001064:	41200000 	.word	0x41200000
 8001068:	bf800000 	.word	0xbf800000

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0a6      	sub	sp, #152	@ 0x98
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001076:	2228      	movs	r2, #40	@ 0x28
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f009 fe63 	bl	800ad46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2258      	movs	r2, #88	@ 0x58
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f009 fe55 	bl	800ad46 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800109c:	2309      	movs	r3, #9
 800109e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010a0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80010a4:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a6:	2301      	movs	r3, #1
 80010a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010aa:	2301      	movs	r3, #1
 80010ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b0:	2302      	movs	r3, #2
 80010b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010be:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010cc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fc51 	bl	8004978 <HAL_RCC_OscConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80010dc:	f001 f9b2 	bl	8002444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	230f      	movs	r3, #15
 80010e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e4:	2302      	movs	r3, #2
 80010e6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010fa:	2102      	movs	r1, #2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 fc8f 	bl	8005a20 <HAL_RCC_ClockConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001108:	f001 f99c 	bl	8002444 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800110c:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <SystemClock_Config+0xe4>)
 800110e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM16
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001118:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800111c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800111e:	2300      	movs	r3, #0
 8001120:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001122:	2300      	movs	r3, #0
 8001124:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001126:	2300      	movs	r3, #0
 8001128:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800112a:	2300      	movs	r3, #0
 800112c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800112e:	2300      	movs	r3, #0
 8001130:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001132:	2300      	movs	r3, #0
 8001134:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4618      	mov	r0, r3
 800113a:	f004 fe91 	bl	8005e60 <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001144:	f001 f97e 	bl	8002444 <Error_Handler>
  }
}
 8001148:	bf00      	nop
 800114a:	3798      	adds	r7, #152	@ 0x98
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	00b33005 	.word	0x00b33005

08001154 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001158:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <MX_RTC_Init+0x44>)
 800115a:	4a10      	ldr	r2, [pc, #64]	@ (800119c <MX_RTC_Init+0x48>)
 800115c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800115e:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <MX_RTC_Init+0x44>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <MX_RTC_Init+0x44>)
 8001166:	227f      	movs	r2, #127	@ 0x7f
 8001168:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <MX_RTC_Init+0x44>)
 800116c:	22ff      	movs	r2, #255	@ 0xff
 800116e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001170:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <MX_RTC_Init+0x44>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <MX_RTC_Init+0x44>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <MX_RTC_Init+0x44>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_RTC_Init+0x44>)
 8001184:	f005 f88a 	bl	800629c <HAL_RTC_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800118e:	f001 f959 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200001f0 	.word	0x200001f0
 800119c:	40002800 	.word	0x40002800

080011a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	@ 0x30
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	2224      	movs	r2, #36	@ 0x24
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f009 fdc9 	bl	800ad46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	463b      	mov	r3, r7
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011be:	4b23      	ldr	r3, [pc, #140]	@ (800124c <MX_TIM1_Init+0xac>)
 80011c0:	4a23      	ldr	r2, [pc, #140]	@ (8001250 <MX_TIM1_Init+0xb0>)
 80011c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011c4:	4b21      	ldr	r3, [pc, #132]	@ (800124c <MX_TIM1_Init+0xac>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b20      	ldr	r3, [pc, #128]	@ (800124c <MX_TIM1_Init+0xac>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011d0:	4b1e      	ldr	r3, [pc, #120]	@ (800124c <MX_TIM1_Init+0xac>)
 80011d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <MX_TIM1_Init+0xac>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011de:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <MX_TIM1_Init+0xac>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b19      	ldr	r3, [pc, #100]	@ (800124c <MX_TIM1_Init+0xac>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011ea:	2303      	movs	r3, #3
 80011ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001202:	2301      	movs	r3, #1
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4619      	mov	r1, r3
 8001214:	480d      	ldr	r0, [pc, #52]	@ (800124c <MX_TIM1_Init+0xac>)
 8001216:	f005 fb73 	bl	8006900 <HAL_TIM_Encoder_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001220:	f001 f910 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	@ (800124c <MX_TIM1_Init+0xac>)
 8001236:	f006 faab 	bl	8007790 <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001240:	f001 f900 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	3730      	adds	r7, #48	@ 0x30
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000210 	.word	0x20000210
 8001250:	40012c00 	.word	0x40012c00

08001254 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001278:	4b32      	ldr	r3, [pc, #200]	@ (8001344 <MX_TIM2_Init+0xf0>)
 800127a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800127e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = APB1_FREQ / TIM2_FREQ - 1;
 8001280:	4b30      	ldr	r3, [pc, #192]	@ (8001344 <MX_TIM2_Init+0xf0>)
 8001282:	2202      	movs	r2, #2
 8001284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b2f      	ldr	r3, [pc, #188]	@ (8001344 <MX_TIM2_Init+0xf0>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_FREQ / PWM_FREQ - 1;
 800128c:	4b2d      	ldr	r3, [pc, #180]	@ (8001344 <MX_TIM2_Init+0xf0>)
 800128e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001292:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <MX_TIM2_Init+0xf0>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b2a      	ldr	r3, [pc, #168]	@ (8001344 <MX_TIM2_Init+0xf0>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012a0:	4828      	ldr	r0, [pc, #160]	@ (8001344 <MX_TIM2_Init+0xf0>)
 80012a2:	f005 f9c9 	bl	8006638 <HAL_TIM_PWM_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80012ac:	f001 f8ca 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	4821      	ldr	r0, [pc, #132]	@ (8001344 <MX_TIM2_Init+0xf0>)
 80012c0:	f006 fa66 	bl	8007790 <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80012ca:	f001 f8bb 	bl	8002444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ce:	2360      	movs	r3, #96	@ 0x60
 80012d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	4817      	ldr	r0, [pc, #92]	@ (8001344 <MX_TIM2_Init+0xf0>)
 80012e6:	f005 fd41 	bl	8006d6c <HAL_TIM_PWM_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80012f0:	f001 f8a8 	bl	8002444 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	2204      	movs	r2, #4
 80012f8:	4619      	mov	r1, r3
 80012fa:	4812      	ldr	r0, [pc, #72]	@ (8001344 <MX_TIM2_Init+0xf0>)
 80012fc:	f005 fd36 	bl	8006d6c <HAL_TIM_PWM_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001306:	f001 f89d 	bl	8002444 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	2208      	movs	r2, #8
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	@ (8001344 <MX_TIM2_Init+0xf0>)
 8001312:	f005 fd2b 	bl	8006d6c <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800131c:	f001 f892 	bl	8002444 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	220c      	movs	r2, #12
 8001324:	4619      	mov	r1, r3
 8001326:	4807      	ldr	r0, [pc, #28]	@ (8001344 <MX_TIM2_Init+0xf0>)
 8001328:	f005 fd20 	bl	8006d6c <HAL_TIM_PWM_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8001332:	f001 f887 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001336:	4803      	ldr	r0, [pc, #12]	@ (8001344 <MX_TIM2_Init+0xf0>)
 8001338:	f001 fa34 	bl	80027a4 <HAL_TIM_MspPostInit>

}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	@ 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000025c 	.word	0x2000025c

08001348 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	@ 0x30
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	2224      	movs	r2, #36	@ 0x24
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f009 fcf5 	bl	800ad46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	463b      	mov	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001366:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <MX_TIM3_Init+0xa4>)
 8001368:	4a21      	ldr	r2, [pc, #132]	@ (80013f0 <MX_TIM3_Init+0xa8>)
 800136a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800136c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <MX_TIM3_Init+0xa4>)
 800136e:	2200      	movs	r2, #0
 8001370:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <MX_TIM3_Init+0xa4>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001378:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <MX_TIM3_Init+0xa4>)
 800137a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800137e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001380:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_TIM3_Init+0xa4>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <MX_TIM3_Init+0xa4>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800138c:	2303      	movs	r3, #3
 800138e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001394:	2301      	movs	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013a4:	2301      	movs	r3, #1
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	480d      	ldr	r0, [pc, #52]	@ (80013ec <MX_TIM3_Init+0xa4>)
 80013b8:	f005 faa2 	bl	8006900 <HAL_TIM_Encoder_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013c2:	f001 f83f 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	@ (80013ec <MX_TIM3_Init+0xa4>)
 80013d4:	f006 f9dc 	bl	8007790 <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013de:	f001 f831 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	3730      	adds	r7, #48	@ 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200002a8 	.word	0x200002a8
 80013f0:	40000400 	.word	0x40000400

080013f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	@ 0x30
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2224      	movs	r2, #36	@ 0x24
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f009 fc9f 	bl	800ad46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001412:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <MX_TIM4_Init+0xa4>)
 8001414:	4a21      	ldr	r2, [pc, #132]	@ (800149c <MX_TIM4_Init+0xa8>)
 8001416:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001418:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <MX_TIM4_Init+0xa4>)
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <MX_TIM4_Init+0xa4>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001424:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <MX_TIM4_Init+0xa4>)
 8001426:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800142a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142c:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <MX_TIM4_Init+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001432:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <MX_TIM4_Init+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001438:	2303      	movs	r3, #3
 800143a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001440:	2301      	movs	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001450:	2301      	movs	r3, #1
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	480d      	ldr	r0, [pc, #52]	@ (8001498 <MX_TIM4_Init+0xa4>)
 8001464:	f005 fa4c 	bl	8006900 <HAL_TIM_Encoder_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800146e:	f000 ffe9 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	@ (8001498 <MX_TIM4_Init+0xa4>)
 8001480:	f006 f986 	bl	8007790 <HAL_TIMEx_MasterConfigSynchronization>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800148a:	f000 ffdb 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3730      	adds	r7, #48	@ 0x30
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200002f4 	.word	0x200002f4
 800149c:	40000800 	.word	0x40000800

080014a0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	@ 0x30
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	2224      	movs	r2, #36	@ 0x24
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f009 fc49 	bl	800ad46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	463b      	mov	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014be:	4b23      	ldr	r3, [pc, #140]	@ (800154c <MX_TIM8_Init+0xac>)
 80014c0:	4a23      	ldr	r2, [pc, #140]	@ (8001550 <MX_TIM8_Init+0xb0>)
 80014c2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80014c4:	4b21      	ldr	r3, [pc, #132]	@ (800154c <MX_TIM8_Init+0xac>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b20      	ldr	r3, [pc, #128]	@ (800154c <MX_TIM8_Init+0xac>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <MX_TIM8_Init+0xac>)
 80014d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014d6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <MX_TIM8_Init+0xac>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014de:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <MX_TIM8_Init+0xac>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e4:	4b19      	ldr	r3, [pc, #100]	@ (800154c <MX_TIM8_Init+0xac>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ea:	2303      	movs	r3, #3
 80014ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f2:	2301      	movs	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001502:	2301      	movs	r3, #1
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	4619      	mov	r1, r3
 8001514:	480d      	ldr	r0, [pc, #52]	@ (800154c <MX_TIM8_Init+0xac>)
 8001516:	f005 f9f3 	bl	8006900 <HAL_TIM_Encoder_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001520:	f000 ff90 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	@ (800154c <MX_TIM8_Init+0xac>)
 8001536:	f006 f92b 	bl	8007790 <HAL_TIMEx_MasterConfigSynchronization>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001540:	f000 ff80 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	3730      	adds	r7, #48	@ 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000340 	.word	0x20000340
 8001550:	40013400 	.word	0x40013400

08001554 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_TIM16_Init+0x44>)
 800155a:	4a10      	ldr	r2, [pc, #64]	@ (800159c <MX_TIM16_Init+0x48>)
 800155c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = APB2_FREQ / TIM16_FREQ - 1;
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <MX_TIM16_Init+0x44>)
 8001560:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8001564:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <MX_TIM16_Init+0x44>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_FREQ / ENCODER_SAMPLE_FREQ -1;
 800156c:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <MX_TIM16_Init+0x44>)
 800156e:	22c7      	movs	r2, #199	@ 0xc7
 8001570:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <MX_TIM16_Init+0x44>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001578:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <MX_TIM16_Init+0x44>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_TIM16_Init+0x44>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001584:	4804      	ldr	r0, [pc, #16]	@ (8001598 <MX_TIM16_Init+0x44>)
 8001586:	f004 ff8f 	bl	80064a8 <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001590:	f000 ff58 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000038c 	.word	0x2000038c
 800159c:	40014400 	.word	0x40014400

080015a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <MX_USART1_UART_Init+0x58>)
 80015a6:	4a15      	ldr	r2, [pc, #84]	@ (80015fc <MX_USART1_UART_Init+0x5c>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <MX_USART1_UART_Init+0x58>)
 80015ac:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80015b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <MX_USART1_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <MX_USART1_UART_Init+0x58>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <MX_USART1_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <MX_USART1_UART_Init+0x58>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <MX_USART1_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <MX_USART1_UART_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <MX_USART1_UART_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <MX_USART1_UART_Init+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <MX_USART1_UART_Init+0x58>)
 80015e4:	f006 f97e 	bl	80078e4 <HAL_UART_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015ee:	f000 ff29 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200003d8 	.word	0x200003d8
 80015fc:	40013800 	.word	0x40013800

08001600 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <MX_USART3_UART_Init+0x58>)
 8001606:	4a15      	ldr	r2, [pc, #84]	@ (800165c <MX_USART3_UART_Init+0x5c>)
 8001608:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800160a:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <MX_USART3_UART_Init+0x58>)
 800160c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001610:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <MX_USART3_UART_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_USART3_UART_Init+0x58>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <MX_USART3_UART_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <MX_USART3_UART_Init+0x58>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <MX_USART3_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <MX_USART3_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <MX_USART3_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <MX_USART3_UART_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_USART3_UART_Init+0x58>)
 8001644:	f006 f94e 	bl	80078e4 <HAL_UART_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800164e:	f000 fef9 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000460 	.word	0x20000460
 800165c:	40004800 	.word	0x40004800

08001660 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <MX_USB_PCD_Init+0x44>)
 8001666:	4a10      	ldr	r2, [pc, #64]	@ (80016a8 <MX_USB_PCD_Init+0x48>)
 8001668:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <MX_USB_PCD_Init+0x44>)
 800166c:	2208      	movs	r2, #8
 800166e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MX_USB_PCD_Init+0x44>)
 8001672:	2202      	movs	r2, #2
 8001674:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <MX_USB_PCD_Init+0x44>)
 8001678:	2202      	movs	r2, #2
 800167a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800167c:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <MX_USB_PCD_Init+0x44>)
 800167e:	2200      	movs	r2, #0
 8001680:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <MX_USB_PCD_Init+0x44>)
 8001684:	2200      	movs	r2, #0
 8001686:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <MX_USB_PCD_Init+0x44>)
 800168a:	2200      	movs	r2, #0
 800168c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <MX_USB_PCD_Init+0x44>)
 8001690:	f001 fea8 	bl	80033e4 <HAL_PCD_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800169a:	f000 fed3 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200004e8 	.word	0x200004e8
 80016a8:	40005c00 	.word	0x40005c00

080016ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	@ 0x30
 80016b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	4a6a      	ldr	r2, [pc, #424]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 80016c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016cc:	6153      	str	r3, [r2, #20]
 80016ce:	4b68      	ldr	r3, [pc, #416]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016da:	4b65      	ldr	r3, [pc, #404]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4a64      	ldr	r2, [pc, #400]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 80016e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016e4:	6153      	str	r3, [r2, #20]
 80016e6:	4b62      	ldr	r3, [pc, #392]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 80016f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016fc:	6153      	str	r3, [r2, #20]
 80016fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b59      	ldr	r3, [pc, #356]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	4a58      	ldr	r2, [pc, #352]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 8001710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001714:	6153      	str	r3, [r2, #20]
 8001716:	4b56      	ldr	r3, [pc, #344]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	4b53      	ldr	r3, [pc, #332]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	4a52      	ldr	r2, [pc, #328]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800172c:	6153      	str	r3, [r2, #20]
 800172e:	4b50      	ldr	r3, [pc, #320]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800173a:	4b4d      	ldr	r3, [pc, #308]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	4a4c      	ldr	r2, [pc, #304]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 8001740:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001744:	6153      	str	r3, [r2, #20]
 8001746:	4b4a      	ldr	r3, [pc, #296]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001752:	4b47      	ldr	r3, [pc, #284]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	4a46      	ldr	r2, [pc, #280]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 8001758:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800175c:	6153      	str	r3, [r2, #20]
 800175e:	4b44      	ldr	r3, [pc, #272]	@ (8001870 <MX_GPIO_Init+0x1c4>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	2130      	movs	r1, #48	@ 0x30
 800176e:	4841      	ldr	r0, [pc, #260]	@ (8001874 <MX_GPIO_Init+0x1c8>)
 8001770:	f001 fe06 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	f244 3101 	movw	r1, #17153	@ 0x4301
 800177a:	483f      	ldr	r0, [pc, #252]	@ (8001878 <MX_GPIO_Init+0x1cc>)
 800177c:	f001 fe00 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001786:	483d      	ldr	r0, [pc, #244]	@ (800187c <MX_GPIO_Init+0x1d0>)
 8001788:	f001 fdfa 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	214e      	movs	r1, #78	@ 0x4e
 8001790:	483b      	ldr	r0, [pc, #236]	@ (8001880 <MX_GPIO_Init+0x1d4>)
 8001792:	f001 fdf5 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800179c:	4839      	ldr	r0, [pc, #228]	@ (8001884 <MX_GPIO_Init+0x1d8>)
 800179e:	f001 fdef 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017a2:	2330      	movs	r3, #48	@ 0x30
 80017a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	4619      	mov	r1, r3
 80017b8:	482e      	ldr	r0, [pc, #184]	@ (8001874 <MX_GPIO_Init+0x1c8>)
 80017ba:	f001 fc57 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	482b      	ldr	r0, [pc, #172]	@ (8001884 <MX_GPIO_Init+0x1d8>)
 80017d6:	f001 fc49 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_8|GPIO_PIN_9;
 80017da:	f244 3301 	movw	r3, #17153	@ 0x4301
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	4821      	ldr	r0, [pc, #132]	@ (8001878 <MX_GPIO_Init+0x1cc>)
 80017f4:	f001 fc3a 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80017f8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	481a      	ldr	r0, [pc, #104]	@ (800187c <MX_GPIO_Init+0x1d0>)
 8001812:	f001 fc2b 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG2 PG3 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|USB_PowerSwitchOn_Pin;
 8001816:	234e      	movs	r3, #78	@ 0x4e
 8001818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2301      	movs	r3, #1
 800181c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001826:	f107 031c 	add.w	r3, r7, #28
 800182a:	4619      	mov	r1, r3
 800182c:	4814      	ldr	r0, [pc, #80]	@ (8001880 <MX_GPIO_Init+0x1d4>)
 800182e:	f001 fc1d 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001832:	2380      	movs	r3, #128	@ 0x80
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	480e      	ldr	r0, [pc, #56]	@ (8001880 <MX_GPIO_Init+0x1d4>)
 8001846:	f001 fc11 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800184a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800184e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	4808      	ldr	r0, [pc, #32]	@ (8001884 <MX_GPIO_Init+0x1d8>)
 8001864:	f001 fc02 	bl	800306c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001868:	bf00      	nop
 800186a:	3730      	adds	r7, #48	@ 0x30
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000
 8001874:	48001000 	.word	0x48001000
 8001878:	48000400 	.word	0x48000400
 800187c:	48001400 	.word	0x48001400
 8001880:	48001800 	.word	0x48001800
 8001884:	48000800 	.word	0x48000800

08001888 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) {
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1a      	ldr	r2, [pc, #104]	@ (8001900 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d12e      	bne.n	80018f8 <HAL_TIM_PeriodElapsedCallback+0x70>
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		float time_gap = (float) (HAL_GetTick() - last_interrupt_time) / 1000.0;
 800189a:	f001 fa29 	bl	8002cf0 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ae:	ee17 0a90 	vmov	r0, s15
 80018b2:	f7fe fe51 	bl	8000558 <__aeabi_f2d>
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80018bc:	f7fe ffce 	bl	800085c <__aeabi_ddiv>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f976 	bl	8000bb8 <__aeabi_d2f>
 80018cc:	4603      	mov	r3, r0
 80018ce:	60fb      	str	r3, [r7, #12]
		if (time_gap < EPSILON) {
 80018d0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800190c <HAL_TIM_PeriodElapsedCallback+0x84>
 80018d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	d501      	bpl.n	80018e6 <HAL_TIM_PeriodElapsedCallback+0x5e>
			time_gap = EPSILON;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80018e4:	60fb      	str	r3, [r7, #12]
		}

		last_interrupt_time = HAL_GetTick();
 80018e6:	f001 fa03 	bl	8002cf0 <HAL_GetTick>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4a05      	ldr	r2, [pc, #20]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80018ee:	6013      	str	r3, [r2, #0]
		compute_control(time_gap);
 80018f0:	ed97 0a03 	vldr	s0, [r7, #12]
 80018f4:	f000 f94c 	bl	8001b90 <compute_control>
//		}
//		if (duty_cycle_lb > TIM2_PRD) {
//			duty_cycle_lb = TIM2_PRD;
//		}
	}
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40014400 	.word	0x40014400
 8001904:	200007bc 	.word	0x200007bc
 8001908:	408f4000 	.word	0x408f4000
 800190c:	3a83126f 	.word	0x3a83126f
 8001910:	3a83126f 	.word	0x3a83126f

08001914 <pwm_mapping>:

int pwm_mapping(int duty_cycle) {
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
//	if(duty_cycle < PWM_MIN) {
//		return PWM_MIN;
//	}
	return (int) ((float) duty_cycle / (float) TIM2_PRD
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001926:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8001968 <pwm_mapping+0x54>
 800192a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			* (float) (TIM2_PRD - PWM_MIN) + (float) PWM_MIN);
 8001932:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001936:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001944:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001948:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800196c <pwm_mapping+0x58>
 800194c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001950:	ee77 7a27 	vadd.f32	s15, s14, s15
	return (int) ((float) duty_cycle / (float) TIM2_PRD
 8001954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001958:	ee17 3a90 	vmov	r3, s15
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	000003e7 	.word	0x000003e7
 800196c:	00000258 	.word	0x00000258

08001970 <motor_control>:

void motor_control(int motor, int control, float v_desired) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_cycle = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
	if (fabs(v_desired) > DEAD_BAND) {
 8001982:	edd7 7a01 	vldr	s15, [r7, #4]
 8001986:	eef0 7ae7 	vabs.f32	s15, s15
 800198a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001a74 <motor_control+0x104>
 800198e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	dd29      	ble.n	80019ec <motor_control+0x7c>
		if (control > 0) {
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	dd1e      	ble.n	80019dc <motor_control+0x6c>
			duty_cycle = control;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	617b      	str	r3, [r7, #20]
			if (v_desired > 0) {
 80019a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ae:	dd0a      	ble.n	80019c6 <motor_control+0x56>
				set_direction(motor, FORWARD);
 80019b0:	2301      	movs	r3, #1
 80019b2:	4619      	mov	r1, r3
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 f86b 	bl	8001a90 <set_direction>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80019ba:	2201      	movs	r2, #1
 80019bc:	2101      	movs	r1, #1
 80019be:	482e      	ldr	r0, [pc, #184]	@ (8001a78 <motor_control+0x108>)
 80019c0:	f001 fcde 	bl	8003380 <HAL_GPIO_WritePin>
 80019c4:	e017      	b.n	80019f6 <motor_control+0x86>
			} else {
				set_direction(motor, BACKWARD);
 80019c6:	2302      	movs	r3, #2
 80019c8:	4619      	mov	r1, r3
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 f860 	bl	8001a90 <set_direction>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2101      	movs	r1, #1
 80019d4:	4828      	ldr	r0, [pc, #160]	@ (8001a78 <motor_control+0x108>)
 80019d6:	f001 fcd3 	bl	8003380 <HAL_GPIO_WritePin>
 80019da:	e00c      	b.n	80019f6 <motor_control+0x86>
			}
		} else {
			duty_cycle = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
			set_direction(motor, BREAK);
 80019e0:	2303      	movs	r3, #3
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f853 	bl	8001a90 <set_direction>
 80019ea:	e004      	b.n	80019f6 <motor_control+0x86>
		}
	} else {
		set_direction(motor, BREAK);
 80019ec:	2303      	movs	r3, #3
 80019ee:	4619      	mov	r1, r3
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 f84d 	bl	8001a90 <set_direction>
	}

	if (duty_cycle > TIM2_PRD) {
 80019f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	4293      	cmp	r3, r2
 80019fe:	dd02      	ble.n	8001a06 <motor_control+0x96>
		duty_cycle = TIM2_PRD;
 8001a00:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001a04:	617b      	str	r3, [r7, #20]
	}

	duty_cycle = pwm_mapping(duty_cycle);
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ff84 	bl	8001914 <pwm_mapping>
 8001a0c:	6178      	str	r0, [r7, #20]
	if (motor == LB) {
 8001a0e:	2200      	movs	r2, #0
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d107      	bne.n	8001a26 <motor_control+0xb6>
		duty_cycle_lb = duty_cycle;
 8001a16:	4a19      	ldr	r2, [pc, #100]	@ (8001a7c <motor_control+0x10c>)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 8001a1c:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <motor_control+0x110>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	63da      	str	r2, [r3, #60]	@ 0x3c
	else if (motor == RF) {
		duty_cycle_rf = duty_cycle;
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);

	}
}
 8001a24:	e022      	b.n	8001a6c <motor_control+0xfc>
	else if (motor == RB) {
 8001a26:	2201      	movs	r2, #1
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d107      	bne.n	8001a3e <motor_control+0xce>
		duty_cycle_rb = duty_cycle;
 8001a2e:	4a15      	ldr	r2, [pc, #84]	@ (8001a84 <motor_control+0x114>)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycle);
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <motor_control+0x110>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001a3c:	e016      	b.n	8001a6c <motor_control+0xfc>
	else if (motor == LF) {
 8001a3e:	2202      	movs	r2, #2
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d107      	bne.n	8001a56 <motor_control+0xe6>
		duty_cycle_lf = duty_cycle;
 8001a46:	4a10      	ldr	r2, [pc, #64]	@ (8001a88 <motor_control+0x118>)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <motor_control+0x110>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a54:	e00a      	b.n	8001a6c <motor_control+0xfc>
	else if (motor == RF) {
 8001a56:	2203      	movs	r2, #3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d106      	bne.n	8001a6c <motor_control+0xfc>
		duty_cycle_rf = duty_cycle;
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a8c <motor_control+0x11c>)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <motor_control+0x110>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001a6c:	bf00      	nop
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	3dcccccd 	.word	0x3dcccccd
 8001a78:	48000400 	.word	0x48000400
 8001a7c:	200007c0 	.word	0x200007c0
 8001a80:	2000025c 	.word	0x2000025c
 8001a84:	200007c4 	.word	0x200007c4
 8001a88:	200007c8 	.word	0x200007c8
 8001a8c:	200007cc 	.word	0x200007cc

08001a90 <set_direction>:

void set_direction(int motor, int direction) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
	if (motor == LB){
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d114      	bne.n	8001acc <set_direction+0x3c>
		if (direction == FORWARD) {
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d102      	bne.n	8001ab0 <set_direction+0x20>
			lb_forward();
 8001aaa:	f7ff f941 	bl	8000d30 <lb_forward>
		}
		else if (direction == BREAK) {
			rf_stop();
		}
	}
}
 8001aae:	e057      	b.n	8001b60 <set_direction+0xd0>
		else if (direction == BACKWARD) {
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d102      	bne.n	8001abe <set_direction+0x2e>
			lb_backward();
 8001ab8:	f7ff f94c 	bl	8000d54 <lb_backward>
}
 8001abc:	e050      	b.n	8001b60 <set_direction+0xd0>
		else if (direction == BREAK) {
 8001abe:	2203      	movs	r2, #3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d14c      	bne.n	8001b60 <set_direction+0xd0>
			lb_stop();
 8001ac6:	f7ff f957 	bl	8000d78 <lb_stop>
}
 8001aca:	e049      	b.n	8001b60 <set_direction+0xd0>
	else if (motor == RB) {
 8001acc:	2201      	movs	r2, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d114      	bne.n	8001afe <set_direction+0x6e>
		if (direction == FORWARD) {
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d102      	bne.n	8001ae2 <set_direction+0x52>
			rb_forward();
 8001adc:	f7ff f95e 	bl	8000d9c <rb_forward>
}
 8001ae0:	e03e      	b.n	8001b60 <set_direction+0xd0>
		else if (direction == BACKWARD) {
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d102      	bne.n	8001af0 <set_direction+0x60>
			rb_backward();
 8001aea:	f7ff f967 	bl	8000dbc <rb_backward>
}
 8001aee:	e037      	b.n	8001b60 <set_direction+0xd0>
		else if (direction == BREAK) {
 8001af0:	2203      	movs	r2, #3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d133      	bne.n	8001b60 <set_direction+0xd0>
			rb_stop();
 8001af8:	f7ff f970 	bl	8000ddc <rb_stop>
}
 8001afc:	e030      	b.n	8001b60 <set_direction+0xd0>
	else if (motor == LF) {
 8001afe:	2202      	movs	r2, #2
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d114      	bne.n	8001b30 <set_direction+0xa0>
		if (direction == FORWARD) {
 8001b06:	2201      	movs	r2, #1
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d102      	bne.n	8001b14 <set_direction+0x84>
			lf_forward();
 8001b0e:	f7ff f975 	bl	8000dfc <lf_forward>
}
 8001b12:	e025      	b.n	8001b60 <set_direction+0xd0>
		} else if (direction == BACKWARD) {
 8001b14:	2202      	movs	r2, #2
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d102      	bne.n	8001b22 <set_direction+0x92>
			lf_backward();
 8001b1c:	f7ff f980 	bl	8000e20 <lf_backward>
}
 8001b20:	e01e      	b.n	8001b60 <set_direction+0xd0>
		} else if (direction == BREAK) {
 8001b22:	2203      	movs	r2, #3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d11a      	bne.n	8001b60 <set_direction+0xd0>
			lf_stop();
 8001b2a:	f7ff f98b 	bl	8000e44 <lf_stop>
}
 8001b2e:	e017      	b.n	8001b60 <set_direction+0xd0>
	else if (motor == RF) {
 8001b30:	2203      	movs	r2, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d113      	bne.n	8001b60 <set_direction+0xd0>
		if (direction == FORWARD) {
 8001b38:	2201      	movs	r2, #1
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d102      	bne.n	8001b46 <set_direction+0xb6>
			rf_forward();
 8001b40:	f7ff f992 	bl	8000e68 <rf_forward>
}
 8001b44:	e00c      	b.n	8001b60 <set_direction+0xd0>
		else if (direction == BACKWARD) {
 8001b46:	2202      	movs	r2, #2
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d102      	bne.n	8001b54 <set_direction+0xc4>
			rf_backward();
 8001b4e:	f7ff f99b 	bl	8000e88 <rf_backward>
}
 8001b52:	e005      	b.n	8001b60 <set_direction+0xd0>
		else if (direction == BREAK) {
 8001b54:	2203      	movs	r2, #3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <set_direction+0xd0>
			rf_stop();
 8001b5c:	f7ff f9a4 	bl	8000ea8 <rf_stop>
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <reset_pid>:

void reset_pid(void) {
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
	lb_integral = 0.0;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <reset_pid+0x20>)
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
	lb_previous_err = 0.0;
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <reset_pid+0x24>)
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000800 	.word	0x20000800
 8001b8c:	20000804 	.word	0x20000804

08001b90 <compute_control>:

void compute_control(float time_gap) {
 8001b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b94:	b0dd      	sub	sp, #372	@ 0x174
 8001b96:	af10      	add	r7, sp, #64	@ 0x40
 8001b98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ba0:	ed83 0a00 	vstr	s0, [r3]
	int lb_control = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	int rb_control = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	int lf_control = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	int rf_control = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	const float Kp = 1000, Ki = 7500, Kd = 0.0;
 8001bbc:	4be7      	ldr	r3, [pc, #924]	@ (8001f5c <compute_control+0x3cc>)
 8001bbe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001bc2:	4be7      	ldr	r3, [pc, #924]	@ (8001f60 <compute_control+0x3d0>)
 8001bc4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	compute_ideal_speed(v_desired, w_desired, &lb_speed_ideal,
 8001bd0:	4be4      	ldr	r3, [pc, #912]	@ (8001f64 <compute_control+0x3d4>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	4be4      	ldr	r3, [pc, #912]	@ (8001f68 <compute_control+0x3d8>)
 8001bd8:	ed93 7a00 	vldr	s14, [r3]
 8001bdc:	4be3      	ldr	r3, [pc, #908]	@ (8001f6c <compute_control+0x3dc>)
 8001bde:	4ae4      	ldr	r2, [pc, #912]	@ (8001f70 <compute_control+0x3e0>)
 8001be0:	49e4      	ldr	r1, [pc, #912]	@ (8001f74 <compute_control+0x3e4>)
 8001be2:	48e5      	ldr	r0, [pc, #916]	@ (8001f78 <compute_control+0x3e8>)
 8001be4:	eef0 0a47 	vmov.f32	s1, s14
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	f7ff f834 	bl	8000c58 <compute_ideal_speed>
			&rb_speed_ideal, &lf_speed_ideal, &rf_speed_ideal);

	// compute control for left side
	lb_speed_real = compute_real_speed(time_gap, LB);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001bf6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	ed93 0a00 	vldr	s0, [r3]
 8001c00:	f000 fa9e 	bl	8002140 <compute_real_speed>
 8001c04:	eef0 7a40 	vmov.f32	s15, s0
 8001c08:	4bdc      	ldr	r3, [pc, #880]	@ (8001f7c <compute_control+0x3ec>)
 8001c0a:	edc3 7a00 	vstr	s15, [r3]
	float lb_error = fabs(lb_speed_ideal) - fabs(lb_speed_real);
 8001c0e:	4bda      	ldr	r3, [pc, #872]	@ (8001f78 <compute_control+0x3e8>)
 8001c10:	edd3 7a00 	vldr	s15, [r3]
 8001c14:	eef0 7ae7 	vabs.f32	s15, s15
 8001c18:	ee17 0a90 	vmov	r0, s15
 8001c1c:	f7fe fc9c 	bl	8000558 <__aeabi_f2d>
 8001c20:	4604      	mov	r4, r0
 8001c22:	460d      	mov	r5, r1
 8001c24:	4bd5      	ldr	r3, [pc, #852]	@ (8001f7c <compute_control+0x3ec>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	eef0 7ae7 	vabs.f32	s15, s15
 8001c2e:	ee17 0a90 	vmov	r0, s15
 8001c32:	f7fe fc91 	bl	8000558 <__aeabi_f2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	f7fe fb2b 	bl	8000298 <__aeabi_dsub>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f7fe ffb5 	bl	8000bb8 <__aeabi_d2f>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	lb_integral += lb_error * time_gap;
 8001c54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001c58:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c5c:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c68:	4bc5      	ldr	r3, [pc, #788]	@ (8001f80 <compute_control+0x3f0>)
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c72:	4bc3      	ldr	r3, [pc, #780]	@ (8001f80 <compute_control+0x3f0>)
 8001c74:	edc3 7a00 	vstr	s15, [r3]
	float lb_derivative = (lb_error - lb_previous_err) / time_gap;
 8001c78:	4bc2      	ldr	r3, [pc, #776]	@ (8001f84 <compute_control+0x3f4>)
 8001c7a:	edd3 7a00 	vldr	s15, [r3]
 8001c7e:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 8001c82:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001c8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c8e:	ed93 7a00 	vldr	s14, [r3]
 8001c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c96:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
	lb_previous_err = lb_error;
 8001c9a:	4aba      	ldr	r2, [pc, #744]	@ (8001f84 <compute_control+0x3f4>)
 8001c9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ca0:	6013      	str	r3, [r2, #0]
	lb_control = (int) (Kp * lb_error + Ki * lb_integral
 8001ca2:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8001ca6:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8001caa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cae:	4bb4      	ldr	r3, [pc, #720]	@ (8001f80 <compute_control+0x3f0>)
 8001cb0:	edd3 6a00 	vldr	s13, [r3]
 8001cb4:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8001cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cbc:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * lb_derivative);
 8001cc0:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 8001cc4:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8001cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
	lb_control = (int) (Kp * lb_error + Ki * lb_integral
 8001cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cd4:	ee17 3a90 	vmov	r3, s15
 8001cd8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	lf_speed_real = compute_real_speed(time_gap, LF);
 8001cdc:	2202      	movs	r2, #2
 8001cde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ce2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	ed93 0a00 	vldr	s0, [r3]
 8001cec:	f000 fa28 	bl	8002140 <compute_real_speed>
 8001cf0:	eef0 7a40 	vmov.f32	s15, s0
 8001cf4:	4ba4      	ldr	r3, [pc, #656]	@ (8001f88 <compute_control+0x3f8>)
 8001cf6:	edc3 7a00 	vstr	s15, [r3]
	float lf_error = fabs(lf_speed_ideal) - fabs(lf_speed_real);
 8001cfa:	4b9d      	ldr	r3, [pc, #628]	@ (8001f70 <compute_control+0x3e0>)
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	eef0 7ae7 	vabs.f32	s15, s15
 8001d04:	ee17 0a90 	vmov	r0, s15
 8001d08:	f7fe fc26 	bl	8000558 <__aeabi_f2d>
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	460d      	mov	r5, r1
 8001d10:	4b9d      	ldr	r3, [pc, #628]	@ (8001f88 <compute_control+0x3f8>)
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	eef0 7ae7 	vabs.f32	s15, s15
 8001d1a:	ee17 0a90 	vmov	r0, s15
 8001d1e:	f7fe fc1b 	bl	8000558 <__aeabi_f2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4620      	mov	r0, r4
 8001d28:	4629      	mov	r1, r5
 8001d2a:	f7fe fab5 	bl	8000298 <__aeabi_dsub>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f7fe ff3f 	bl	8000bb8 <__aeabi_d2f>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	lf_integral += lf_error * time_gap;
 8001d40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d44:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d48:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d54:	4b8d      	ldr	r3, [pc, #564]	@ (8001f8c <compute_control+0x3fc>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8001f8c <compute_control+0x3fc>)
 8001d60:	edc3 7a00 	vstr	s15, [r3]
	float lf_derivative = (lf_error - lf_previous_err) / time_gap;
 8001d64:	4b8a      	ldr	r3, [pc, #552]	@ (8001f90 <compute_control+0x400>)
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 8001d6e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d7a:	ed93 7a00 	vldr	s14, [r3]
 8001d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d82:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
	lf_previous_err = lf_error;
 8001d86:	4a82      	ldr	r2, [pc, #520]	@ (8001f90 <compute_control+0x400>)
 8001d88:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001d8c:	6013      	str	r3, [r2, #0]
	lf_control = (int) (Kp * lf_error + Ki * lf_integral
 8001d8e:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8001d92:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8001d96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f8c <compute_control+0x3fc>)
 8001d9c:	edd3 6a00 	vldr	s13, [r3]
 8001da0:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8001da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da8:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * lf_derivative);
 8001dac:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 8001db0:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8001db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db8:	ee77 7a27 	vadd.f32	s15, s14, s15
	lf_control = (int) (Kp * lf_error + Ki * lf_integral
 8001dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc0:	ee17 3a90 	vmov	r3, s15
 8001dc4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

	//compute control for right speed
	rb_speed_real = compute_real_speed(time_gap, RB);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001dce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	ed93 0a00 	vldr	s0, [r3]
 8001dd8:	f000 f9b2 	bl	8002140 <compute_real_speed>
 8001ddc:	eef0 7a40 	vmov.f32	s15, s0
 8001de0:	4b6c      	ldr	r3, [pc, #432]	@ (8001f94 <compute_control+0x404>)
 8001de2:	edc3 7a00 	vstr	s15, [r3]
	float rb_error = fabs(rb_speed_ideal) - fabs(rb_speed_real);
 8001de6:	4b63      	ldr	r3, [pc, #396]	@ (8001f74 <compute_control+0x3e4>)
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	eef0 7ae7 	vabs.f32	s15, s15
 8001df0:	ee17 0a90 	vmov	r0, s15
 8001df4:	f7fe fbb0 	bl	8000558 <__aeabi_f2d>
 8001df8:	4604      	mov	r4, r0
 8001dfa:	460d      	mov	r5, r1
 8001dfc:	4b65      	ldr	r3, [pc, #404]	@ (8001f94 <compute_control+0x404>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	eef0 7ae7 	vabs.f32	s15, s15
 8001e06:	ee17 0a90 	vmov	r0, s15
 8001e0a:	f7fe fba5 	bl	8000558 <__aeabi_f2d>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4620      	mov	r0, r4
 8001e14:	4629      	mov	r1, r5
 8001e16:	f7fe fa3f 	bl	8000298 <__aeabi_dsub>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	f7fe fec9 	bl	8000bb8 <__aeabi_d2f>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	rb_integral += rb_error * time_gap;
 8001e2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001e30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e34:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e40:	4b55      	ldr	r3, [pc, #340]	@ (8001f98 <compute_control+0x408>)
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4a:	4b53      	ldr	r3, [pc, #332]	@ (8001f98 <compute_control+0x408>)
 8001e4c:	edc3 7a00 	vstr	s15, [r3]
	float rb_derivative = (rb_error - rb_previous_err) / time_gap;
 8001e50:	4b52      	ldr	r3, [pc, #328]	@ (8001f9c <compute_control+0x40c>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8001e5a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001e62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e66:	ed93 7a00 	vldr	s14, [r3]
 8001e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e6e:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc
	rb_previous_err = rb_error;
 8001e72:	4a4a      	ldr	r2, [pc, #296]	@ (8001f9c <compute_control+0x40c>)
 8001e74:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001e78:	6013      	str	r3, [r2, #0]
	rb_control = (int) (Kp * rb_error + Ki * rb_integral
 8001e7a:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8001e7e:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8001e82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e86:	4b44      	ldr	r3, [pc, #272]	@ (8001f98 <compute_control+0x408>)
 8001e88:	edd3 6a00 	vldr	s13, [r3]
 8001e8c:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8001e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e94:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * rb_derivative);
 8001e98:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 8001e9c:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8001ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
	rb_control = (int) (Kp * rb_error + Ki * rb_integral
 8001ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eac:	ee17 3a90 	vmov	r3, s15
 8001eb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	rf_speed_real = compute_real_speed(time_gap, RF);
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001eba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	ed93 0a00 	vldr	s0, [r3]
 8001ec4:	f000 f93c 	bl	8002140 <compute_real_speed>
 8001ec8:	eef0 7a40 	vmov.f32	s15, s0
 8001ecc:	4b34      	ldr	r3, [pc, #208]	@ (8001fa0 <compute_control+0x410>)
 8001ece:	edc3 7a00 	vstr	s15, [r3]
	float rf_error = fabs(rf_speed_ideal) - fabs(rf_speed_real);
 8001ed2:	4b26      	ldr	r3, [pc, #152]	@ (8001f6c <compute_control+0x3dc>)
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	eef0 7ae7 	vabs.f32	s15, s15
 8001edc:	ee17 0a90 	vmov	r0, s15
 8001ee0:	f7fe fb3a 	bl	8000558 <__aeabi_f2d>
 8001ee4:	4604      	mov	r4, r0
 8001ee6:	460d      	mov	r5, r1
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa0 <compute_control+0x410>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	eef0 7ae7 	vabs.f32	s15, s15
 8001ef2:	ee17 0a90 	vmov	r0, s15
 8001ef6:	f7fe fb2f 	bl	8000558 <__aeabi_f2d>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4620      	mov	r0, r4
 8001f00:	4629      	mov	r1, r5
 8001f02:	f7fe f9c9 	bl	8000298 <__aeabi_dsub>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f7fe fe53 	bl	8000bb8 <__aeabi_d2f>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
	rf_integral += rf_error * time_gap;
 8001f18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f20:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8001f24:	edd3 7a00 	vldr	s15, [r3]
 8001f28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <compute_control+0x414>)
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
 8001f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f36:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa4 <compute_control+0x414>)
 8001f38:	edc3 7a00 	vstr	s15, [r3]
	float rf_derivative = (rf_error - rf_previous_err) / time_gap;
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <compute_control+0x418>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8001f46:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f52:	ed93 7a00 	vldr	s14, [r3]
 8001f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f5a:	e027      	b.n	8001fac <compute_control+0x41c>
 8001f5c:	447a0000 	.word	0x447a0000
 8001f60:	45ea6000 	.word	0x45ea6000
 8001f64:	20000820 	.word	0x20000820
 8001f68:	20000824 	.word	0x20000824
 8001f6c:	200007fc 	.word	0x200007fc
 8001f70:	200007f8 	.word	0x200007f8
 8001f74:	200007f4 	.word	0x200007f4
 8001f78:	200007f0 	.word	0x200007f0
 8001f7c:	200007e0 	.word	0x200007e0
 8001f80:	20000800 	.word	0x20000800
 8001f84:	20000804 	.word	0x20000804
 8001f88:	200007e8 	.word	0x200007e8
 8001f8c:	20000810 	.word	0x20000810
 8001f90:	20000814 	.word	0x20000814
 8001f94:	200007e4 	.word	0x200007e4
 8001f98:	20000808 	.word	0x20000808
 8001f9c:	2000080c 	.word	0x2000080c
 8001fa0:	200007ec 	.word	0x200007ec
 8001fa4:	20000818 	.word	0x20000818
 8001fa8:	2000081c 	.word	0x2000081c
 8001fac:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
	rf_previous_err = rf_error;
 8001fb0:	4a57      	ldr	r2, [pc, #348]	@ (8002110 <compute_control+0x580>)
 8001fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001fb6:	6013      	str	r3, [r2, #0]
	rf_control = (int) (Kp * rf_error + Ki * rf_integral
 8001fb8:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8001fbc:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8001fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc4:	4b53      	ldr	r3, [pc, #332]	@ (8002114 <compute_control+0x584>)
 8001fc6:	edd3 6a00 	vldr	s13, [r3]
 8001fca:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8001fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd2:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * rf_derivative);
 8001fd6:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 8001fda:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8001fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
	rf_control = (int) (Kp * rf_error + Ki * rf_integral
 8001fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fea:	ee17 3a90 	vmov	r3, s15
 8001fee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	motor_control(LB, lb_control, lb_speed_ideal);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	4b48      	ldr	r3, [pc, #288]	@ (8002118 <compute_control+0x588>)
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffe:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8002002:	4610      	mov	r0, r2
 8002004:	f7ff fcb4 	bl	8001970 <motor_control>
	motor_control(LF, lf_control, lf_speed_ideal);
 8002008:	2202      	movs	r2, #2
 800200a:	4b44      	ldr	r3, [pc, #272]	@ (800211c <compute_control+0x58c>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	eeb0 0a67 	vmov.f32	s0, s15
 8002014:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8002018:	4610      	mov	r0, r2
 800201a:	f7ff fca9 	bl	8001970 <motor_control>
	motor_control(RB, rb_control, rb_speed_ideal);
 800201e:	2201      	movs	r2, #1
 8002020:	4b3f      	ldr	r3, [pc, #252]	@ (8002120 <compute_control+0x590>)
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	eeb0 0a67 	vmov.f32	s0, s15
 800202a:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800202e:	4610      	mov	r0, r2
 8002030:	f7ff fc9e 	bl	8001970 <motor_control>
	motor_control(RF, rf_control, rf_speed_ideal);
 8002034:	2203      	movs	r2, #3
 8002036:	4b3b      	ldr	r3, [pc, #236]	@ (8002124 <compute_control+0x594>)
 8002038:	edd3 7a00 	vldr	s15, [r3]
 800203c:	eeb0 0a67 	vmov.f32	s0, s15
 8002040:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8002044:	4610      	mov	r0, r2
 8002046:	f7ff fc93 	bl	8001970 <motor_control>
//			time_gap, v_desired, w_desired, lb_error, lf_integral,
//			lf_derivative, lf_speed_ideal, lf_speed_real, lf_control,
//			duty_cycle_lf);
//	log_to_uart(temp_str);

	sprintf(temp_str,
 800204a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800204e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	f7fe fa80 	bl	8000558 <__aeabi_f2d>
 8002058:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800205c:	4b32      	ldr	r3, [pc, #200]	@ (8002128 <compute_control+0x598>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa79 	bl	8000558 <__aeabi_f2d>
 8002066:	4605      	mov	r5, r0
 8002068:	460e      	mov	r6, r1
 800206a:	4b30      	ldr	r3, [pc, #192]	@ (800212c <compute_control+0x59c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa72 	bl	8000558 <__aeabi_f2d>
 8002074:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002078:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800207c:	f7fe fa6c 	bl	8000558 <__aeabi_f2d>
 8002080:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002084:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <compute_control+0x584>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa65 	bl	8000558 <__aeabi_f2d>
 800208e:	e9c7 0100 	strd	r0, r1, [r7]
 8002092:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8002096:	f7fe fa5f 	bl	8000558 <__aeabi_f2d>
 800209a:	4682      	mov	sl, r0
 800209c:	468b      	mov	fp, r1
 800209e:	4b21      	ldr	r3, [pc, #132]	@ (8002124 <compute_control+0x594>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fa58 	bl	8000558 <__aeabi_f2d>
 80020a8:	4680      	mov	r8, r0
 80020aa:	4689      	mov	r9, r1
 80020ac:	4b20      	ldr	r3, [pc, #128]	@ (8002130 <compute_control+0x5a0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa51 	bl	8000558 <__aeabi_f2d>
 80020b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <compute_control+0x5a4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80020be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80020c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80020c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80020ca:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 80020ce:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80020d2:	ed97 7b00 	vldr	d7, [r7]
 80020d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80020da:	ed97 7b02 	vldr	d7, [r7, #8]
 80020de:	ed8d 7b04 	vstr	d7, [sp, #16]
 80020e2:	ed97 7b04 	vldr	d7, [r7, #16]
 80020e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80020ea:	e9cd 5600 	strd	r5, r6, [sp]
 80020ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020f2:	4911      	ldr	r1, [pc, #68]	@ (8002138 <compute_control+0x5a8>)
 80020f4:	4620      	mov	r0, r4
 80020f6:	f008 fdc3 	bl	800ac80 <siprintf>
			"[Δt: %6.2f s] v: %+6.2f | w: %+6.2f | err: %+6.2f | int: %+6.2f | der: %+6.2f | LB Ideal: %+6.2f | LB Real: %+6.2f | LB Control: %04d | LB Duty Cycle: %03d\r\n",
			time_gap, v_desired, w_desired, rf_error, rf_integral,
			rf_derivative, rf_speed_ideal, rf_speed_real, rf_control,
			duty_cycle_rf);
	log_to_uart(temp_str);
 80020fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 f98a 	bl	8002418 <log_to_uart>
}
 8002104:	bf00      	nop
 8002106:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800210a:	46bd      	mov	sp, r7
 800210c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002110:	2000081c 	.word	0x2000081c
 8002114:	20000818 	.word	0x20000818
 8002118:	200007f0 	.word	0x200007f0
 800211c:	200007f8 	.word	0x200007f8
 8002120:	200007f4 	.word	0x200007f4
 8002124:	200007fc 	.word	0x200007fc
 8002128:	20000820 	.word	0x20000820
 800212c:	20000824 	.word	0x20000824
 8002130:	200007ec 	.word	0x200007ec
 8002134:	200007cc 	.word	0x200007cc
 8002138:	0800cef8 	.word	0x0800cef8
 800213c:	00000000 	.word	0x00000000

08002140 <compute_real_speed>:
//			lb_angle_current, lb_angle_diff);
//	log_to_uart(temp_str);
	lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
}

float compute_real_speed(float time_gap, int motor) {
 8002140:	b5b0      	push	{r4, r5, r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	ed87 0a01 	vstr	s0, [r7, #4]
 800214a:	6038      	str	r0, [r7, #0]
	int16_t count_diff = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	817b      	strh	r3, [r7, #10]
	float speed_real = 0.0;
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
	if (motor == LB) {
 8002156:	2200      	movs	r2, #0
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4293      	cmp	r3, r2
 800215c:	d149      	bne.n	80021f2 <compute_real_speed+0xb2>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim3) - lb_count_last);
 800215e:	4ba4      	ldr	r3, [pc, #656]	@ (80023f0 <compute_real_speed+0x2b0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	b29a      	uxth	r2, r3
 8002166:	4ba3      	ldr	r3, [pc, #652]	@ (80023f4 <compute_real_speed+0x2b4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	b29b      	uxth	r3, r3
 8002170:	817b      	strh	r3, [r7, #10]
		speed_real = -1 * count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 8002172:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002176:	425b      	negs	r3, r3
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f9db 	bl	8000534 <__aeabi_i2d>
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	4b9d      	ldr	r3, [pc, #628]	@ (80023f8 <compute_real_speed+0x2b8>)
 8002184:	f7fe fb6a 	bl	800085c <__aeabi_ddiv>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	f7fe f882 	bl	800029c <__adddf3>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	a38f      	add	r3, pc, #572	@ (adr r3, 80023e0 <compute_real_speed+0x2a0>)
 80021a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a6:	f7fe fa2f 	bl	8000608 <__aeabi_dmul>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	a38d      	add	r3, pc, #564	@ (adr r3, 80023e8 <compute_real_speed+0x2a8>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	f7fe fa26 	bl	8000608 <__aeabi_dmul>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4614      	mov	r4, r2
 80021c2:	461d      	mov	r5, r3
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7fe f9c7 	bl	8000558 <__aeabi_f2d>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4620      	mov	r0, r4
 80021d0:	4629      	mov	r1, r5
 80021d2:	f7fe fb43 	bl	800085c <__aeabi_ddiv>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f7fe fceb 	bl	8000bb8 <__aeabi_d2f>
 80021e2:	4603      	mov	r3, r0
 80021e4:	60fb      	str	r3, [r7, #12]
		lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
 80021e6:	4b82      	ldr	r3, [pc, #520]	@ (80023f0 <compute_real_speed+0x2b0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	4a81      	ldr	r2, [pc, #516]	@ (80023f4 <compute_real_speed+0x2b4>)
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	e0eb      	b.n	80023ca <compute_real_speed+0x28a>
	}
	else if (motor == RB) {
 80021f2:	2201      	movs	r2, #1
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d148      	bne.n	800228c <compute_real_speed+0x14c>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim4) - rb_count_last);
 80021fa:	4b80      	ldr	r3, [pc, #512]	@ (80023fc <compute_real_speed+0x2bc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002200:	b29a      	uxth	r2, r3
 8002202:	4b7f      	ldr	r3, [pc, #508]	@ (8002400 <compute_real_speed+0x2c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	b29b      	uxth	r3, r3
 800220c:	817b      	strh	r3, [r7, #10]
		speed_real = count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 800220e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f98e 	bl	8000534 <__aeabi_i2d>
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	4b76      	ldr	r3, [pc, #472]	@ (80023f8 <compute_real_speed+0x2b8>)
 800221e:	f7fe fb1d 	bl	800085c <__aeabi_ddiv>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	f7fe f835 	bl	800029c <__adddf3>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	a369      	add	r3, pc, #420	@ (adr r3, 80023e0 <compute_real_speed+0x2a0>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	f7fe f9e2 	bl	8000608 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	a366      	add	r3, pc, #408	@ (adr r3, 80023e8 <compute_real_speed+0x2a8>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f9d9 	bl	8000608 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4614      	mov	r4, r2
 800225c:	461d      	mov	r5, r3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe f97a 	bl	8000558 <__aeabi_f2d>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4620      	mov	r0, r4
 800226a:	4629      	mov	r1, r5
 800226c:	f7fe faf6 	bl	800085c <__aeabi_ddiv>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f7fe fc9e 	bl	8000bb8 <__aeabi_d2f>
 800227c:	4603      	mov	r3, r0
 800227e:	60fb      	str	r3, [r7, #12]
		rb_count_last = __HAL_TIM_GET_COUNTER(&htim4);
 8002280:	4b5e      	ldr	r3, [pc, #376]	@ (80023fc <compute_real_speed+0x2bc>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002286:	4a5e      	ldr	r2, [pc, #376]	@ (8002400 <compute_real_speed+0x2c0>)
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e09e      	b.n	80023ca <compute_real_speed+0x28a>
	}
	else if (motor == LF) {
 800228c:	2202      	movs	r2, #2
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	4293      	cmp	r3, r2
 8002292:	d14e      	bne.n	8002332 <compute_real_speed+0x1f2>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim1) - lf_count_last);
 8002294:	4b5b      	ldr	r3, [pc, #364]	@ (8002404 <compute_real_speed+0x2c4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	b29a      	uxth	r2, r3
 800229c:	4b5a      	ldr	r3, [pc, #360]	@ (8002408 <compute_real_speed+0x2c8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	817b      	strh	r3, [r7, #10]
		speed_real = -1 * count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 80022a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80022ac:	425b      	negs	r3, r3
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe f940 	bl	8000534 <__aeabi_i2d>
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	4b4f      	ldr	r3, [pc, #316]	@ (80023f8 <compute_real_speed+0x2b8>)
 80022ba:	f7fe facf 	bl	800085c <__aeabi_ddiv>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	f7fd ffe7 	bl	800029c <__adddf3>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	a342      	add	r3, pc, #264	@ (adr r3, 80023e0 <compute_real_speed+0x2a0>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	f7fe f994 	bl	8000608 <__aeabi_dmul>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	a33f      	add	r3, pc, #252	@ (adr r3, 80023e8 <compute_real_speed+0x2a8>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f7fe f98b 	bl	8000608 <__aeabi_dmul>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4614      	mov	r4, r2
 80022f8:	461d      	mov	r5, r3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe f92c 	bl	8000558 <__aeabi_f2d>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4620      	mov	r0, r4
 8002306:	4629      	mov	r1, r5
 8002308:	f7fe faa8 	bl	800085c <__aeabi_ddiv>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	f7fe fc50 	bl	8000bb8 <__aeabi_d2f>
 8002318:	4603      	mov	r3, r0
 800231a:	60fb      	str	r3, [r7, #12]
		lf_count_last = __HAL_TIM_GET_COUNTER(&htim1);
 800231c:	4b39      	ldr	r3, [pc, #228]	@ (8002404 <compute_real_speed+0x2c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002322:	4a39      	ldr	r2, [pc, #228]	@ (8002408 <compute_real_speed+0x2c8>)
 8002324:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002326:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800232a:	4838      	ldr	r0, [pc, #224]	@ (800240c <compute_real_speed+0x2cc>)
 800232c:	f001 f840 	bl	80033b0 <HAL_GPIO_TogglePin>
 8002330:	e04b      	b.n	80023ca <compute_real_speed+0x28a>
	}
	else if (motor == RF) {
 8002332:	2203      	movs	r2, #3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	4293      	cmp	r3, r2
 8002338:	d147      	bne.n	80023ca <compute_real_speed+0x28a>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim8) - rf_count_last);
 800233a:	4b35      	ldr	r3, [pc, #212]	@ (8002410 <compute_real_speed+0x2d0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	b29a      	uxth	r2, r3
 8002342:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <compute_real_speed+0x2d4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	b29b      	uxth	r3, r3
 800234c:	817b      	strh	r3, [r7, #10]
		speed_real = count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 800234e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe f8ee 	bl	8000534 <__aeabi_i2d>
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	4b26      	ldr	r3, [pc, #152]	@ (80023f8 <compute_real_speed+0x2b8>)
 800235e:	f7fe fa7d 	bl	800085c <__aeabi_ddiv>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	f7fd ff95 	bl	800029c <__adddf3>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	a319      	add	r3, pc, #100	@ (adr r3, 80023e0 <compute_real_speed+0x2a0>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	f7fe f942 	bl	8000608 <__aeabi_dmul>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	a316      	add	r3, pc, #88	@ (adr r3, 80023e8 <compute_real_speed+0x2a8>)
 800238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002392:	f7fe f939 	bl	8000608 <__aeabi_dmul>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4614      	mov	r4, r2
 800239c:	461d      	mov	r5, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe f8da 	bl	8000558 <__aeabi_f2d>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4620      	mov	r0, r4
 80023aa:	4629      	mov	r1, r5
 80023ac:	f7fe fa56 	bl	800085c <__aeabi_ddiv>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	f7fe fbfe 	bl	8000bb8 <__aeabi_d2f>
 80023bc:	4603      	mov	r3, r0
 80023be:	60fb      	str	r3, [r7, #12]
		rf_count_last = __HAL_TIM_GET_COUNTER(&htim8);
 80023c0:	4b13      	ldr	r3, [pc, #76]	@ (8002410 <compute_real_speed+0x2d0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	4a13      	ldr	r2, [pc, #76]	@ (8002414 <compute_real_speed+0x2d4>)
 80023c8:	6013      	str	r3, [r2, #0]
	}
	return speed_real;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	ee07 3a90 	vmov	s15, r3
}
 80023d0:	eeb0 0a67 	vmov.f32	s0, s15
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bdb0      	pop	{r4, r5, r7, pc}
 80023da:	bf00      	nop
 80023dc:	f3af 8000 	nop.w
 80023e0:	54442d18 	.word	0x54442d18
 80023e4:	400921fb 	.word	0x400921fb
 80023e8:	25460aa6 	.word	0x25460aa6
 80023ec:	3f9a0275 	.word	0x3f9a0275
 80023f0:	200002a8 	.word	0x200002a8
 80023f4:	200007d0 	.word	0x200007d0
 80023f8:	4094a000 	.word	0x4094a000
 80023fc:	200002f4 	.word	0x200002f4
 8002400:	200007d4 	.word	0x200007d4
 8002404:	20000210 	.word	0x20000210
 8002408:	200007d8 	.word	0x200007d8
 800240c:	48000400 	.word	0x48000400
 8002410:	20000340 	.word	0x20000340
 8002414:	200007dc 	.word	0x200007dc

08002418 <log_to_uart>:

void log_to_uart(const char *msg) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7fd ff2d 	bl	8000280 <strlen>
 8002426:	4603      	mov	r3, r0
 8002428:	b29a      	uxth	r2, r3
 800242a:	f04f 33ff 	mov.w	r3, #4294967295
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4803      	ldr	r0, [pc, #12]	@ (8002440 <log_to_uart+0x28>)
 8002432:	f005 faa5 	bl	8007980 <HAL_UART_Transmit>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000460 	.word	0x20000460

08002444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002448:	b672      	cpsid	i
}
 800244a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <Error_Handler+0x8>

08002450 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002456:	4b0f      	ldr	r3, [pc, #60]	@ (8002494 <HAL_MspInit+0x44>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	4a0e      	ldr	r2, [pc, #56]	@ (8002494 <HAL_MspInit+0x44>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6193      	str	r3, [r2, #24]
 8002462:	4b0c      	ldr	r3, [pc, #48]	@ (8002494 <HAL_MspInit+0x44>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800246e:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <HAL_MspInit+0x44>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a08      	ldr	r2, [pc, #32]	@ (8002494 <HAL_MspInit+0x44>)
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002478:	61d3      	str	r3, [r2, #28]
 800247a:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <HAL_MspInit+0x44>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000

08002498 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0d      	ldr	r2, [pc, #52]	@ (80024dc <HAL_RTC_MspInit+0x44>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d111      	bne.n	80024ce <HAL_RTC_MspInit+0x36>
 80024aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024ae:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024b8:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <HAL_RTC_MspInit+0x48>)
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	461a      	mov	r2, r3
 80024ca:	2301      	movs	r3, #1
 80024cc:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40002800 	.word	0x40002800
 80024e0:	10908100 	.word	0x10908100

080024e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b092      	sub	sp, #72	@ 0x48
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a7d      	ldr	r2, [pc, #500]	@ (80026f8 <HAL_TIM_Encoder_MspInit+0x214>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d14e      	bne.n	80025a4 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002506:	4b7d      	ldr	r3, [pc, #500]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	4a7c      	ldr	r2, [pc, #496]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 800250c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002510:	6193      	str	r3, [r2, #24]
 8002512:	4b7a      	ldr	r3, [pc, #488]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30
 800251c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251e:	4b77      	ldr	r3, [pc, #476]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	4a76      	ldr	r2, [pc, #472]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 8002524:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002528:	6153      	str	r3, [r2, #20]
 800252a:	4b74      	ldr	r3, [pc, #464]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002536:	4b71      	ldr	r3, [pc, #452]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	4a70      	ldr	r2, [pc, #448]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 800253c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002540:	6153      	str	r3, [r2, #20]
 8002542:	4b6e      	ldr	r3, [pc, #440]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800254c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800254e:	2301      	movs	r3, #1
 8002550:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800255e:	2302      	movs	r3, #2
 8002560:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002562:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002566:	4619      	mov	r1, r3
 8002568:	4865      	ldr	r0, [pc, #404]	@ (8002700 <HAL_TIM_Encoder_MspInit+0x21c>)
 800256a:	f000 fd7f 	bl	800306c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800256e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002572:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002580:	2306      	movs	r3, #6
 8002582:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002588:	4619      	mov	r1, r3
 800258a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800258e:	f000 fd6d 	bl	800306c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	2019      	movs	r0, #25
 8002598:	f000 fcb5 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800259c:	2019      	movs	r0, #25
 800259e:	f000 fcce 	bl	8002f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80025a2:	e0a5      	b.n	80026f0 <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM3)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a56      	ldr	r2, [pc, #344]	@ (8002704 <HAL_TIM_Encoder_MspInit+0x220>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d128      	bne.n	8002600 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ae:	4b53      	ldr	r3, [pc, #332]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	4a52      	ldr	r2, [pc, #328]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	61d3      	str	r3, [r2, #28]
 80025ba:	4b50      	ldr	r3, [pc, #320]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025c6:	4b4d      	ldr	r3, [pc, #308]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	4a4c      	ldr	r2, [pc, #304]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 80025cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025d0:	6153      	str	r3, [r2, #20]
 80025d2:	4b4a      	ldr	r3, [pc, #296]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025da:	623b      	str	r3, [r7, #32]
 80025dc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025de:	230c      	movs	r3, #12
 80025e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025ee:	2302      	movs	r3, #2
 80025f0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025f6:	4619      	mov	r1, r3
 80025f8:	4843      	ldr	r0, [pc, #268]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x224>)
 80025fa:	f000 fd37 	bl	800306c <HAL_GPIO_Init>
}
 80025fe:	e077      	b.n	80026f0 <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM4)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a41      	ldr	r2, [pc, #260]	@ (800270c <HAL_TIM_Encoder_MspInit+0x228>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d145      	bne.n	8002696 <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800260a:	4b3c      	ldr	r3, [pc, #240]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	4a3b      	ldr	r2, [pc, #236]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 8002610:	f043 0304 	orr.w	r3, r3, #4
 8002614:	61d3      	str	r3, [r2, #28]
 8002616:	4b39      	ldr	r3, [pc, #228]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002622:	4b36      	ldr	r3, [pc, #216]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	4a35      	ldr	r2, [pc, #212]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 8002628:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800262c:	6153      	str	r3, [r2, #20]
 800262e:	4b33      	ldr	r3, [pc, #204]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002636:	61bb      	str	r3, [r7, #24]
 8002638:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263a:	4b30      	ldr	r3, [pc, #192]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	4a2f      	ldr	r2, [pc, #188]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 8002640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002644:	6153      	str	r3, [r2, #20]
 8002646:	4b2d      	ldr	r3, [pc, #180]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002652:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002656:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002660:	2300      	movs	r3, #0
 8002662:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002664:	2302      	movs	r3, #2
 8002666:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002668:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800266c:	4619      	mov	r1, r3
 800266e:	4828      	ldr	r0, [pc, #160]	@ (8002710 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002670:	f000 fcfc 	bl	800306c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002674:	2340      	movs	r3, #64	@ 0x40
 8002676:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002684:	2302      	movs	r3, #2
 8002686:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002688:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800268c:	4619      	mov	r1, r3
 800268e:	4821      	ldr	r0, [pc, #132]	@ (8002714 <HAL_TIM_Encoder_MspInit+0x230>)
 8002690:	f000 fcec 	bl	800306c <HAL_GPIO_Init>
}
 8002694:	e02c      	b.n	80026f0 <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM8)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1f      	ldr	r2, [pc, #124]	@ (8002718 <HAL_TIM_Encoder_MspInit+0x234>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d127      	bne.n	80026f0 <HAL_TIM_Encoder_MspInit+0x20c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026a0:	4b16      	ldr	r3, [pc, #88]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	4a15      	ldr	r2, [pc, #84]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 80026a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026aa:	6193      	str	r3, [r2, #24]
 80026ac:	4b13      	ldr	r3, [pc, #76]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b8:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	4a0f      	ldr	r2, [pc, #60]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 80026be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80026c2:	6153      	str	r3, [r2, #20]
 80026c4:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <HAL_TIM_Encoder_MspInit+0x218>)
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026d0:	23c0      	movs	r3, #192	@ 0xc0
 80026d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d4:	2302      	movs	r3, #2
 80026d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026dc:	2300      	movs	r3, #0
 80026de:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80026e0:	2304      	movs	r3, #4
 80026e2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026e8:	4619      	mov	r1, r3
 80026ea:	4805      	ldr	r0, [pc, #20]	@ (8002700 <HAL_TIM_Encoder_MspInit+0x21c>)
 80026ec:	f000 fcbe 	bl	800306c <HAL_GPIO_Init>
}
 80026f0:	bf00      	nop
 80026f2:	3748      	adds	r7, #72	@ 0x48
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40012c00 	.word	0x40012c00
 80026fc:	40021000 	.word	0x40021000
 8002700:	48000800 	.word	0x48000800
 8002704:	40000400 	.word	0x40000400
 8002708:	48001000 	.word	0x48001000
 800270c:	40000800 	.word	0x40000800
 8002710:	48000c00 	.word	0x48000c00
 8002714:	48000400 	.word	0x48000400
 8002718:	40013400 	.word	0x40013400

0800271c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800272c:	d10b      	bne.n	8002746 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800272e:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_TIM_PWM_MspInit+0x38>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4a08      	ldr	r2, [pc, #32]	@ (8002754 <HAL_TIM_PWM_MspInit+0x38>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	61d3      	str	r3, [r2, #28]
 800273a:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <HAL_TIM_PWM_MspInit+0x38>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000

08002758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0d      	ldr	r2, [pc, #52]	@ (800279c <HAL_TIM_Base_MspInit+0x44>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d113      	bne.n	8002792 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800276a:	4b0d      	ldr	r3, [pc, #52]	@ (80027a0 <HAL_TIM_Base_MspInit+0x48>)
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	4a0c      	ldr	r2, [pc, #48]	@ (80027a0 <HAL_TIM_Base_MspInit+0x48>)
 8002770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002774:	6193      	str	r3, [r2, #24]
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <HAL_TIM_Base_MspInit+0x48>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	2019      	movs	r0, #25
 8002788:	f000 fbbd 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800278c:	2019      	movs	r0, #25
 800278e:	f000 fbd6 	bl	8002f3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40014400 	.word	0x40014400
 80027a0:	40021000 	.word	0x40021000

080027a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	@ 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027c4:	d139      	bne.n	800283a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002844 <HAL_TIM_MspPostInit+0xa0>)
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002844 <HAL_TIM_MspPostInit+0xa0>)
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d0:	6153      	str	r3, [r2, #20]
 80027d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002844 <HAL_TIM_MspPostInit+0xa0>)
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027de:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <HAL_TIM_MspPostInit+0xa0>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	4a18      	ldr	r2, [pc, #96]	@ (8002844 <HAL_TIM_MspPostInit+0xa0>)
 80027e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027e8:	6153      	str	r3, [r2, #20]
 80027ea:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <HAL_TIM_MspPostInit+0xa0>)
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027f6:	2303      	movs	r3, #3
 80027f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002806:	2301      	movs	r3, #1
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280a:	f107 0314 	add.w	r3, r7, #20
 800280e:	4619      	mov	r1, r3
 8002810:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002814:	f000 fc2a 	bl	800306c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002818:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800281c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	2300      	movs	r3, #0
 8002828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800282a:	2301      	movs	r3, #1
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	4804      	ldr	r0, [pc, #16]	@ (8002848 <HAL_TIM_MspPostInit+0xa4>)
 8002836:	f000 fc19 	bl	800306c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800283a:	bf00      	nop
 800283c:	3728      	adds	r7, #40	@ 0x28
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
 8002848:	48000400 	.word	0x48000400

0800284c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08c      	sub	sp, #48	@ 0x30
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a32      	ldr	r2, [pc, #200]	@ (8002934 <HAL_UART_MspInit+0xe8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d130      	bne.n	80028d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800286e:	4b32      	ldr	r3, [pc, #200]	@ (8002938 <HAL_UART_MspInit+0xec>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	4a31      	ldr	r2, [pc, #196]	@ (8002938 <HAL_UART_MspInit+0xec>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002878:	6193      	str	r3, [r2, #24]
 800287a:	4b2f      	ldr	r3, [pc, #188]	@ (8002938 <HAL_UART_MspInit+0xec>)
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002886:	4b2c      	ldr	r3, [pc, #176]	@ (8002938 <HAL_UART_MspInit+0xec>)
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4a2b      	ldr	r2, [pc, #172]	@ (8002938 <HAL_UART_MspInit+0xec>)
 800288c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002890:	6153      	str	r3, [r2, #20]
 8002892:	4b29      	ldr	r3, [pc, #164]	@ (8002938 <HAL_UART_MspInit+0xec>)
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800289e:	2330      	movs	r3, #48	@ 0x30
 80028a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028aa:	2303      	movs	r3, #3
 80028ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028ae:	2307      	movs	r3, #7
 80028b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b2:	f107 031c 	add.w	r3, r7, #28
 80028b6:	4619      	mov	r1, r3
 80028b8:	4820      	ldr	r0, [pc, #128]	@ (800293c <HAL_UART_MspInit+0xf0>)
 80028ba:	f000 fbd7 	bl	800306c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	2025      	movs	r0, #37	@ 0x25
 80028c4:	f000 fb1f 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028c8:	2025      	movs	r0, #37	@ 0x25
 80028ca:	f000 fb38 	bl	8002f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028ce:	e02d      	b.n	800292c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002940 <HAL_UART_MspInit+0xf4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d128      	bne.n	800292c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028da:	4b17      	ldr	r3, [pc, #92]	@ (8002938 <HAL_UART_MspInit+0xec>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4a16      	ldr	r2, [pc, #88]	@ (8002938 <HAL_UART_MspInit+0xec>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028e4:	61d3      	str	r3, [r2, #28]
 80028e6:	4b14      	ldr	r3, [pc, #80]	@ (8002938 <HAL_UART_MspInit+0xec>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f2:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <HAL_UART_MspInit+0xec>)
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	4a10      	ldr	r2, [pc, #64]	@ (8002938 <HAL_UART_MspInit+0xec>)
 80028f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028fc:	6153      	str	r3, [r2, #20]
 80028fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002938 <HAL_UART_MspInit+0xec>)
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800290a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800290e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002910:	2302      	movs	r3, #2
 8002912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800291c:	2307      	movs	r3, #7
 800291e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002920:	f107 031c 	add.w	r3, r7, #28
 8002924:	4619      	mov	r1, r3
 8002926:	4807      	ldr	r0, [pc, #28]	@ (8002944 <HAL_UART_MspInit+0xf8>)
 8002928:	f000 fba0 	bl	800306c <HAL_GPIO_Init>
}
 800292c:	bf00      	nop
 800292e:	3730      	adds	r7, #48	@ 0x30
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40013800 	.word	0x40013800
 8002938:	40021000 	.word	0x40021000
 800293c:	48000800 	.word	0x48000800
 8002940:	40004800 	.word	0x40004800
 8002944:	48000c00 	.word	0x48000c00

08002948 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0d      	ldr	r2, [pc, #52]	@ (800298c <HAL_PCD_MspInit+0x44>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d113      	bne.n	8002982 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800295a:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <HAL_PCD_MspInit+0x48>)
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	4a0c      	ldr	r2, [pc, #48]	@ (8002990 <HAL_PCD_MspInit+0x48>)
 8002960:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002964:	61d3      	str	r3, [r2, #28]
 8002966:	4b0a      	ldr	r3, [pc, #40]	@ (8002990 <HAL_PCD_MspInit+0x48>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	2014      	movs	r0, #20
 8002978:	f000 fac5 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800297c:	2014      	movs	r0, #20
 800297e:	f000 fade 	bl	8002f3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40005c00 	.word	0x40005c00
 8002990:	40021000 	.word	0x40021000

08002994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <NMI_Handler+0x4>

0800299c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <HardFault_Handler+0x4>

080029a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <MemManage_Handler+0x4>

080029ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <BusFault_Handler+0x4>

080029b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <UsageFault_Handler+0x4>

080029bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ea:	f000 f96d 	bl	8002cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80029f8:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80029fa:	f000 fdba 	bl	8003572 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200004e8 	.word	0x200004e8

08002a08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a0c:	4803      	ldr	r0, [pc, #12]	@ (8002a1c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002a0e:	f004 f8ab 	bl	8006b68 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002a12:	4803      	ldr	r0, [pc, #12]	@ (8002a20 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002a14:	f004 f8a8 	bl	8006b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000210 	.word	0x20000210
 8002a20:	2000038c 	.word	0x2000038c

08002a24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a28:	4802      	ldr	r0, [pc, #8]	@ (8002a34 <USART1_IRQHandler+0x10>)
 8002a2a:	f005 f833 	bl	8007a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200003d8 	.word	0x200003d8

08002a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return 1;
 8002a3c:	2301      	movs	r3, #1
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <_kill>:

int _kill(int pid, int sig)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a52:	f008 f9cb 	bl	800adec <__errno>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2216      	movs	r2, #22
 8002a5a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_exit>:

void _exit (int status)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ffe7 	bl	8002a48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a7a:	bf00      	nop
 8002a7c:	e7fd      	b.n	8002a7a <_exit+0x12>

08002a7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e00a      	b.n	8002aa6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a90:	f3af 8000 	nop.w
 8002a94:	4601      	mov	r1, r0
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	60ba      	str	r2, [r7, #8]
 8002a9c:	b2ca      	uxtb	r2, r1
 8002a9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	dbf0      	blt.n	8002a90 <_read+0x12>
  }

  return len;
 8002aae:	687b      	ldr	r3, [r7, #4]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	e009      	b.n	8002ade <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	60ba      	str	r2, [r7, #8]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3301      	adds	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	dbf1      	blt.n	8002aca <_write+0x12>
  }
  return len;
 8002ae6:	687b      	ldr	r3, [r7, #4]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_close>:

int _close(int file)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b18:	605a      	str	r2, [r3, #4]
  return 0;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <_isatty>:

int _isatty(int file)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b30:	2301      	movs	r3, #1
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b085      	sub	sp, #20
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b60:	4a14      	ldr	r2, [pc, #80]	@ (8002bb4 <_sbrk+0x5c>)
 8002b62:	4b15      	ldr	r3, [pc, #84]	@ (8002bb8 <_sbrk+0x60>)
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b6c:	4b13      	ldr	r3, [pc, #76]	@ (8002bbc <_sbrk+0x64>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b74:	4b11      	ldr	r3, [pc, #68]	@ (8002bbc <_sbrk+0x64>)
 8002b76:	4a12      	ldr	r2, [pc, #72]	@ (8002bc0 <_sbrk+0x68>)
 8002b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b7a:	4b10      	ldr	r3, [pc, #64]	@ (8002bbc <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d207      	bcs.n	8002b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b88:	f008 f930 	bl	800adec <__errno>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	220c      	movs	r2, #12
 8002b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295
 8002b96:	e009      	b.n	8002bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b98:	4b08      	ldr	r3, [pc, #32]	@ (8002bbc <_sbrk+0x64>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b9e:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <_sbrk+0x64>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4a05      	ldr	r2, [pc, #20]	@ (8002bbc <_sbrk+0x64>)
 8002ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002baa:	68fb      	ldr	r3, [r7, #12]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20010000 	.word	0x20010000
 8002bb8:	00000400 	.word	0x00000400
 8002bbc:	20000828 	.word	0x20000828
 8002bc0:	20000980 	.word	0x20000980

08002bc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bc8:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <SystemInit+0x20>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bce:	4a05      	ldr	r2, [pc, #20]	@ (8002be4 <SystemInit+0x20>)
 8002bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c20 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bec:	f7ff ffea 	bl	8002bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bf0:	480c      	ldr	r0, [pc, #48]	@ (8002c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bf2:	490d      	ldr	r1, [pc, #52]	@ (8002c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8002c2c <LoopForever+0xe>)
  movs r3, #0
 8002bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf8:	e002      	b.n	8002c00 <LoopCopyDataInit>

08002bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfe:	3304      	adds	r3, #4

08002c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c04:	d3f9      	bcc.n	8002bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c06:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c08:	4c0a      	ldr	r4, [pc, #40]	@ (8002c34 <LoopForever+0x16>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c0c:	e001      	b.n	8002c12 <LoopFillZerobss>

08002c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c10:	3204      	adds	r2, #4

08002c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c14:	d3fb      	bcc.n	8002c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c16:	f008 f8ef 	bl	800adf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c1a:	f7fe f955 	bl	8000ec8 <main>

08002c1e <LoopForever>:

LoopForever:
    b LoopForever
 8002c1e:	e7fe      	b.n	8002c1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c28:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002c2c:	0800d350 	.word	0x0800d350
  ldr r2, =_sbss
 8002c30:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002c34:	2000097c 	.word	0x2000097c

08002c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c38:	e7fe      	b.n	8002c38 <ADC1_2_IRQHandler>
	...

08002c3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c40:	4b08      	ldr	r3, [pc, #32]	@ (8002c64 <HAL_Init+0x28>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a07      	ldr	r2, [pc, #28]	@ (8002c64 <HAL_Init+0x28>)
 8002c46:	f043 0310 	orr.w	r3, r3, #16
 8002c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	f000 f94f 	bl	8002ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c52:	2000      	movs	r0, #0
 8002c54:	f000 f808 	bl	8002c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c58:	f7ff fbfa 	bl	8002450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40022000 	.word	0x40022000

08002c68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c70:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <HAL_InitTick+0x54>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b12      	ldr	r3, [pc, #72]	@ (8002cc0 <HAL_InitTick+0x58>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f967 	bl	8002f5a <HAL_SYSTICK_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00e      	b.n	8002cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b0f      	cmp	r3, #15
 8002c9a:	d80a      	bhi.n	8002cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f000 f92f 	bl	8002f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca8:	4a06      	ldr	r2, [pc, #24]	@ (8002cc4 <HAL_InitTick+0x5c>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	20000008 	.word	0x20000008
 8002cc4:	20000004 	.word	0x20000004

08002cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <HAL_IncTick+0x20>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <HAL_IncTick+0x24>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a04      	ldr	r2, [pc, #16]	@ (8002cec <HAL_IncTick+0x24>)
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000008 	.word	0x20000008
 8002cec:	2000082c 	.word	0x2000082c

08002cf0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return uwTick;  
 8002cf4:	4b03      	ldr	r3, [pc, #12]	@ (8002d04 <HAL_GetTick+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	2000082c 	.word	0x2000082c

08002d08 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d10:	f7ff ffee 	bl	8002cf0 <HAL_GetTick>
 8002d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d005      	beq.n	8002d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d22:	4b0a      	ldr	r3, [pc, #40]	@ (8002d4c <HAL_Delay+0x44>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002d2e:	bf00      	nop
 8002d30:	f7ff ffde 	bl	8002cf0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d8f7      	bhi.n	8002d30 <HAL_Delay+0x28>
  {
  }
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000008 	.word	0x20000008

08002d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d60:	4b0c      	ldr	r3, [pc, #48]	@ (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d82:	4a04      	ldr	r2, [pc, #16]	@ (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	60d3      	str	r3, [r2, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d9c:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	f003 0307 	and.w	r3, r3, #7
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	db0b      	blt.n	8002dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	f003 021f 	and.w	r2, r3, #31
 8002dcc:	4907      	ldr	r1, [pc, #28]	@ (8002dec <__NVIC_EnableIRQ+0x38>)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000e100 	.word	0xe000e100

08002df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	6039      	str	r1, [r7, #0]
 8002dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	db0a      	blt.n	8002e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	490c      	ldr	r1, [pc, #48]	@ (8002e3c <__NVIC_SetPriority+0x4c>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	0112      	lsls	r2, r2, #4
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	440b      	add	r3, r1
 8002e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e18:	e00a      	b.n	8002e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4908      	ldr	r1, [pc, #32]	@ (8002e40 <__NVIC_SetPriority+0x50>)
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	3b04      	subs	r3, #4
 8002e28:	0112      	lsls	r2, r2, #4
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	761a      	strb	r2, [r3, #24]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000e100 	.word	0xe000e100
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b089      	sub	sp, #36	@ 0x24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f1c3 0307 	rsb	r3, r3, #7
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	bf28      	it	cs
 8002e62:	2304      	movcs	r3, #4
 8002e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d902      	bls.n	8002e74 <NVIC_EncodePriority+0x30>
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3b03      	subs	r3, #3
 8002e72:	e000      	b.n	8002e76 <NVIC_EncodePriority+0x32>
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43da      	mvns	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	401a      	ands	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	43d9      	mvns	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	4313      	orrs	r3, r2
         );
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	@ 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ebc:	d301      	bcc.n	8002ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e00f      	b.n	8002ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <SysTick_Config+0x40>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eca:	210f      	movs	r1, #15
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	f7ff ff8e 	bl	8002df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed4:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <SysTick_Config+0x40>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eda:	4b04      	ldr	r3, [pc, #16]	@ (8002eec <SysTick_Config+0x40>)
 8002edc:	2207      	movs	r2, #7
 8002ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	e000e010 	.word	0xe000e010

08002ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff ff29 	bl	8002d50 <__NVIC_SetPriorityGrouping>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f18:	f7ff ff3e 	bl	8002d98 <__NVIC_GetPriorityGrouping>
 8002f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f7ff ff8e 	bl	8002e44 <NVIC_EncodePriority>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff5d 	bl	8002df0 <__NVIC_SetPriority>
}
 8002f36:	bf00      	nop
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4603      	mov	r3, r0
 8002f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff31 	bl	8002db4 <__NVIC_EnableIRQ>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ffa2 	bl	8002eac <SysTick_Config>
 8002f68:	4603      	mov	r3, r0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e02e      	b.n	8002fe2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d008      	beq.n	8002fa0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2204      	movs	r2, #4
 8002f92:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e020      	b.n	8002fe2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 020e 	bic.w	r2, r2, #14
 8002fae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc8:	2101      	movs	r1, #1
 8002fca:	fa01 f202 	lsl.w	r2, r1, r2
 8002fce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003000:	2b02      	cmp	r3, #2
 8003002:	d005      	beq.n	8003010 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2204      	movs	r2, #4
 8003008:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
 800300e:	e027      	b.n	8003060 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 020e 	bic.w	r2, r2, #14
 800301e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0201 	bic.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f202 	lsl.w	r2, r1, r2
 800303e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4798      	blx	r3
    }
  }
  return status;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307a:	e160      	b.n	800333e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	4013      	ands	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8152 	beq.w	8003338 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d005      	beq.n	80030ac <HAL_GPIO_Init+0x40>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d130      	bne.n	800310e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	2203      	movs	r2, #3
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030e2:	2201      	movs	r2, #1
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	f003 0201 	and.w	r2, r3, #1
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b03      	cmp	r3, #3
 8003118:	d017      	beq.n	800314a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	2203      	movs	r2, #3
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d123      	bne.n	800319e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	08da      	lsrs	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3208      	adds	r2, #8
 800315e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	08da      	lsrs	r2, r3, #3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3208      	adds	r2, #8
 8003198:	6939      	ldr	r1, [r7, #16]
 800319a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	2203      	movs	r2, #3
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0203 	and.w	r2, r3, #3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80ac 	beq.w	8003338 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e0:	4b5e      	ldr	r3, [pc, #376]	@ (800335c <HAL_GPIO_Init+0x2f0>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	4a5d      	ldr	r2, [pc, #372]	@ (800335c <HAL_GPIO_Init+0x2f0>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	6193      	str	r3, [r2, #24]
 80031ec:	4b5b      	ldr	r3, [pc, #364]	@ (800335c <HAL_GPIO_Init+0x2f0>)
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031f8:	4a59      	ldr	r2, [pc, #356]	@ (8003360 <HAL_GPIO_Init+0x2f4>)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	089b      	lsrs	r3, r3, #2
 80031fe:	3302      	adds	r3, #2
 8003200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	220f      	movs	r2, #15
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003222:	d025      	beq.n	8003270 <HAL_GPIO_Init+0x204>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a4f      	ldr	r2, [pc, #316]	@ (8003364 <HAL_GPIO_Init+0x2f8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d01f      	beq.n	800326c <HAL_GPIO_Init+0x200>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a4e      	ldr	r2, [pc, #312]	@ (8003368 <HAL_GPIO_Init+0x2fc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d019      	beq.n	8003268 <HAL_GPIO_Init+0x1fc>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a4d      	ldr	r2, [pc, #308]	@ (800336c <HAL_GPIO_Init+0x300>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d013      	beq.n	8003264 <HAL_GPIO_Init+0x1f8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a4c      	ldr	r2, [pc, #304]	@ (8003370 <HAL_GPIO_Init+0x304>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00d      	beq.n	8003260 <HAL_GPIO_Init+0x1f4>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a4b      	ldr	r2, [pc, #300]	@ (8003374 <HAL_GPIO_Init+0x308>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d007      	beq.n	800325c <HAL_GPIO_Init+0x1f0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a4a      	ldr	r2, [pc, #296]	@ (8003378 <HAL_GPIO_Init+0x30c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d101      	bne.n	8003258 <HAL_GPIO_Init+0x1ec>
 8003254:	2306      	movs	r3, #6
 8003256:	e00c      	b.n	8003272 <HAL_GPIO_Init+0x206>
 8003258:	2307      	movs	r3, #7
 800325a:	e00a      	b.n	8003272 <HAL_GPIO_Init+0x206>
 800325c:	2305      	movs	r3, #5
 800325e:	e008      	b.n	8003272 <HAL_GPIO_Init+0x206>
 8003260:	2304      	movs	r3, #4
 8003262:	e006      	b.n	8003272 <HAL_GPIO_Init+0x206>
 8003264:	2303      	movs	r3, #3
 8003266:	e004      	b.n	8003272 <HAL_GPIO_Init+0x206>
 8003268:	2302      	movs	r3, #2
 800326a:	e002      	b.n	8003272 <HAL_GPIO_Init+0x206>
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <HAL_GPIO_Init+0x206>
 8003270:	2300      	movs	r3, #0
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	f002 0203 	and.w	r2, r2, #3
 8003278:	0092      	lsls	r2, r2, #2
 800327a:	4093      	lsls	r3, r2
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003282:	4937      	ldr	r1, [pc, #220]	@ (8003360 <HAL_GPIO_Init+0x2f4>)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	3302      	adds	r3, #2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003290:	4b3a      	ldr	r3, [pc, #232]	@ (800337c <HAL_GPIO_Init+0x310>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	43db      	mvns	r3, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032b4:	4a31      	ldr	r2, [pc, #196]	@ (800337c <HAL_GPIO_Init+0x310>)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032ba:	4b30      	ldr	r3, [pc, #192]	@ (800337c <HAL_GPIO_Init+0x310>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032de:	4a27      	ldr	r2, [pc, #156]	@ (800337c <HAL_GPIO_Init+0x310>)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032e4:	4b25      	ldr	r3, [pc, #148]	@ (800337c <HAL_GPIO_Init+0x310>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003308:	4a1c      	ldr	r2, [pc, #112]	@ (800337c <HAL_GPIO_Init+0x310>)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800330e:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <HAL_GPIO_Init+0x310>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	43db      	mvns	r3, r3
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4013      	ands	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003332:	4a12      	ldr	r2, [pc, #72]	@ (800337c <HAL_GPIO_Init+0x310>)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3301      	adds	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	f47f ae97 	bne.w	800307c <HAL_GPIO_Init+0x10>
  }
}
 800334e:	bf00      	nop
 8003350:	bf00      	nop
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	40021000 	.word	0x40021000
 8003360:	40010000 	.word	0x40010000
 8003364:	48000400 	.word	0x48000400
 8003368:	48000800 	.word	0x48000800
 800336c:	48000c00 	.word	0x48000c00
 8003370:	48001000 	.word	0x48001000
 8003374:	48001400 	.word	0x48001400
 8003378:	48001800 	.word	0x48001800
 800337c:	40010400 	.word	0x40010400

08003380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	807b      	strh	r3, [r7, #2]
 800338c:	4613      	mov	r3, r2
 800338e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003390:	787b      	ldrb	r3, [r7, #1]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003396:	887a      	ldrh	r2, [r7, #2]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800339c:	e002      	b.n	80033a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800339e:	887a      	ldrh	r2, [r7, #2]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4013      	ands	r3, r2
 80033c8:	041a      	lsls	r2, r3, #16
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	43d9      	mvns	r1, r3
 80033ce:	887b      	ldrh	r3, [r7, #2]
 80033d0:	400b      	ands	r3, r1
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	619a      	str	r2, [r3, #24]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0b9      	b.n	800356a <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff fa9c 	bl	8002948 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2203      	movs	r2, #3
 8003414:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f005 fa78 	bl	8008912 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
 8003426:	e03e      	b.n	80034a6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	440b      	add	r3, r1
 8003436:	3311      	adds	r3, #17
 8003438:	2201      	movs	r2, #1
 800343a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	440b      	add	r3, r1
 800344a:	3310      	adds	r3, #16
 800344c:	7bfa      	ldrb	r2, [r7, #15]
 800344e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003450:	7bfa      	ldrb	r2, [r7, #15]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	440b      	add	r3, r1
 800345e:	3313      	adds	r3, #19
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003464:	7bfa      	ldrb	r2, [r7, #15]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	440b      	add	r3, r1
 8003472:	3320      	adds	r3, #32
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003478:	7bfa      	ldrb	r2, [r7, #15]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	440b      	add	r3, r1
 8003486:	3324      	adds	r3, #36	@ 0x24
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	440b      	add	r3, r1
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	3301      	adds	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	791b      	ldrb	r3, [r3, #4]
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d3bb      	bcc.n	8003428 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034b0:	2300      	movs	r3, #0
 80034b2:	73fb      	strb	r3, [r7, #15]
 80034b4:	e044      	b.n	8003540 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	440b      	add	r3, r1
 80034da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034de:	7bfa      	ldrb	r2, [r7, #15]
 80034e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	440b      	add	r3, r1
 80034f0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034f8:	7bfa      	ldrb	r2, [r7, #15]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	440b      	add	r3, r1
 8003506:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	440b      	add	r3, r1
 800351c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	440b      	add	r3, r1
 8003532:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	3301      	adds	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	791b      	ldrb	r3, [r3, #4]
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	429a      	cmp	r2, r3
 8003548:	d3b5      	bcc.n	80034b6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3304      	adds	r3, #4
 8003552:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003556:	f005 f9f7 	bl	8008948 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f006 fdc6 	bl	800a110 <USB_ReadInterrupts>
 8003584:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f930 	bl	80037f6 <PCD_EP_ISR_Handler>

    return;
 8003596:	e0bd      	b.n	8003714 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d013      	beq.n	80035ca <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035b4:	b292      	uxth	r2, r2
 80035b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f8d9 	bl	8003772 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80035c0:	2100      	movs	r1, #0
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f8f3 	bl	80037ae <HAL_PCD_SetAddress>

    return;
 80035c8:	e0a4      	b.n	8003714 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00c      	beq.n	80035ee <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035dc:	b29a      	uxth	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035e6:	b292      	uxth	r2, r2
 80035e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80035ec:	e092      	b.n	8003714 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00c      	beq.n	8003612 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003600:	b29a      	uxth	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800360a:	b292      	uxth	r2, r2
 800360c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003610:	e080      	b.n	8003714 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d027      	beq.n	800366c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003624:	b29a      	uxth	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0204 	bic.w	r2, r2, #4
 800362e:	b292      	uxth	r2, r2
 8003630:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800363c:	b29a      	uxth	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0208 	bic.w	r2, r2, #8
 8003646:	b292      	uxth	r2, r2
 8003648:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f8a4 	bl	800379a <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800365a:	b29a      	uxth	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003664:	b292      	uxth	r2, r2
 8003666:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800366a:	e053      	b.n	8003714 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003672:	2b00      	cmp	r3, #0
 8003674:	d027      	beq.n	80036c6 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0208 	orr.w	r2, r2, #8
 8003688:	b292      	uxth	r2, r2
 800368a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a0:	b292      	uxth	r2, r2
 80036a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0204 	orr.w	r2, r2, #4
 80036b8:	b292      	uxth	r2, r2
 80036ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f861 	bl	8003786 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80036c4:	e026      	b.n	8003714 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00f      	beq.n	80036f0 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036d8:	b29a      	uxth	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036e2:	b292      	uxth	r2, r2
 80036e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f838 	bl	800375e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80036ee:	e011      	b.n	8003714 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00c      	beq.n	8003714 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003702:	b29a      	uxth	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800370c:	b292      	uxth	r2, r2
 800370e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003712:	bf00      	nop
  }
}
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	460b      	mov	r3, r1
 8003724:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_PCD_SetAddress+0x1a>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e012      	b.n	80037ee <HAL_PCD_SetAddress+0x40>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	4611      	mov	r1, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f006 fc82 	bl	800a0e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b096      	sub	sp, #88	@ 0x58
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037fe:	e3ad      	b.n	8003f5c <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003808:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800380c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 800381a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800381e:	2b00      	cmp	r3, #0
 8003820:	f040 816f 	bne.w	8003b02 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003824:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	d14c      	bne.n	80038ca <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800383c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003840:	81fb      	strh	r3, [r7, #14]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	89fb      	ldrh	r3, [r7, #14]
 8003848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800384c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003850:	b29b      	uxth	r3, r3
 8003852:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3310      	adds	r3, #16
 8003858:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003862:	b29b      	uxth	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	4413      	add	r3, r2
 8003874:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800387e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003880:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	441a      	add	r2, r3
 800388c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003890:	2100      	movs	r1, #0
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ff4d 	bl	8003732 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7b1b      	ldrb	r3, [r3, #12]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 835c 	beq.w	8003f5c <PCD_EP_ISR_Handler+0x766>
 80038a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f040 8357 	bne.w	8003f5c <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	7b1b      	ldrb	r3, [r3, #12]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	731a      	strb	r2, [r3, #12]
 80038c8:	e348      	b.n	8003f5c <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038d0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80038dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80038e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d032      	beq.n	800394e <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	461a      	mov	r2, r3
 80038f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4413      	add	r3, r2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	4413      	add	r3, r2
 8003902:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800390c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800390e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800391a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800391c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800391e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003920:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003922:	b29b      	uxth	r3, r3
 8003924:	f006 fc46 	bl	800a1b4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	b29a      	uxth	r2, r3
 8003930:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003934:	4013      	ands	r3, r2
 8003936:	823b      	strh	r3, [r7, #16]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	8a3a      	ldrh	r2, [r7, #16]
 800393e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003942:	b292      	uxth	r2, r2
 8003944:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff feff 	bl	800374a <HAL_PCD_SetupStageCallback>
 800394c:	e306      	b.n	8003f5c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800394e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003952:	2b00      	cmp	r3, #0
 8003954:	f280 8302 	bge.w	8003f5c <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29a      	uxth	r2, r3
 8003960:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003964:	4013      	ands	r3, r2
 8003966:	83fb      	strh	r3, [r7, #30]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	8bfa      	ldrh	r2, [r7, #30]
 800396e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003972:	b292      	uxth	r2, r2
 8003974:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800397e:	b29b      	uxth	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	4413      	add	r3, r2
 8003990:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800399a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800399e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d019      	beq.n	80039da <PCD_EP_ISR_Handler+0x1e4>
 80039a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d015      	beq.n	80039da <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b4:	6959      	ldr	r1, [r3, #20]
 80039b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80039ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039bc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f006 fbf8 	bl	800a1b4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80039c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	441a      	add	r2, r3
 80039ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80039d2:	2100      	movs	r1, #0
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff fea0 	bl	800371a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80039e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80039e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f040 82b5 	bne.w	8003f5c <PCD_EP_ISR_Handler+0x766>
 80039f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80039f6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80039fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039fe:	f000 82ad 	beq.w	8003f5c <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	4413      	add	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	801a      	strh	r2, [r3, #0]
 8003a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <PCD_EP_ISR_Handler+0x25a>
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	801a      	strh	r2, [r3, #0]
 8003a4e:	e039      	b.n	8003ac4 <PCD_EP_ISR_Handler+0x2ce>
 8003a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a56:	d818      	bhi.n	8003a8a <PCD_EP_ISR_Handler+0x294>
 8003a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <PCD_EP_ISR_Handler+0x27c>
 8003a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a6e:	3301      	adds	r3, #1
 8003a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	029b      	lsls	r3, r3, #10
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	801a      	strh	r2, [r3, #0]
 8003a88:	e01c      	b.n	8003ac4 <PCD_EP_ISR_Handler+0x2ce>
 8003a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 031f 	and.w	r3, r3, #31
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d102      	bne.n	8003aa4 <PCD_EP_ISR_Handler+0x2ae>
 8003a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	029b      	lsls	r3, r3, #10
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad4:	827b      	strh	r3, [r7, #18]
 8003ad6:	8a7b      	ldrh	r3, [r7, #18]
 8003ad8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003adc:	827b      	strh	r3, [r7, #18]
 8003ade:	8a7b      	ldrh	r3, [r7, #18]
 8003ae0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ae4:	827b      	strh	r3, [r7, #18]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	8a7b      	ldrh	r3, [r7, #18]
 8003aec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003af0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003af4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	8013      	strh	r3, [r2, #0]
 8003b00:	e22c      	b.n	8003f5c <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b16:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f280 80f6 	bge.w	8003d0c <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003b36:	4013      	ands	r3, r2
 8003b38:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8003b4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b52:	b292      	uxth	r2, r2
 8003b54:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b56:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6e:	7b1b      	ldrb	r3, [r3, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d123      	bne.n	8003bbc <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	461a      	mov	r2, r3
 8003b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b98:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003b9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 808e 	beq.w	8003cc2 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bac:	6959      	ldr	r1, [r3, #20]
 8003bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb0:	88da      	ldrh	r2, [r3, #6]
 8003bb2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003bb6:	f006 fafd 	bl	800a1b4 <USB_ReadPMA>
 8003bba:	e082      	b.n	8003cc2 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bbe:	78db      	ldrb	r3, [r3, #3]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d10a      	bne.n	8003bda <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003bc4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003bc8:	461a      	mov	r2, r3
 8003bca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f9d3 	bl	8003f78 <HAL_PCD_EP_DB_Receive>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003bd8:	e073      	b.n	8003cc2 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	441a      	add	r2, r3
 8003c06:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003c0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d022      	beq.n	8003c7e <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	4413      	add	r3, r2
 8003c52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c5c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003c60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d02c      	beq.n	8003cc2 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c6e:	6959      	ldr	r1, [r3, #20]
 8003c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c72:	891a      	ldrh	r2, [r3, #8]
 8003c74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c78:	f006 fa9c 	bl	800a1b4 <USB_ReadPMA>
 8003c7c:	e021      	b.n	8003cc2 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	4413      	add	r3, r2
 8003c98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ca2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003ca6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb4:	6959      	ldr	r1, [r3, #20]
 8003cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb8:	895a      	ldrh	r2, [r3, #10]
 8003cba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cbe:	f006 fa79 	bl	800a1b4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc4:	69da      	ldr	r2, [r3, #28]
 8003cc6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cca:	441a      	add	r2, r3
 8003ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cd8:	441a      	add	r2, r3
 8003cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cdc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <PCD_EP_ISR_Handler+0x4fc>
 8003ce6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d206      	bcs.n	8003d00 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff fd0e 	bl	800371a <HAL_PCD_DataOutStageCallback>
 8003cfe:	e005      	b.n	8003d0c <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d06:	4618      	mov	r0, r3
 8003d08:	f004 fe3c 	bl	8008984 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d0c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8121 	beq.w	8003f5c <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d1a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	3310      	adds	r3, #16
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d48:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	441a      	add	r2, r3
 8003d5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d6c:	78db      	ldrb	r3, [r3, #3]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	f040 80a2 	bne.w	8003eb8 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8003d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d76:	2200      	movs	r2, #0
 8003d78:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7c:	7b1b      	ldrb	r3, [r3, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8093 	beq.w	8003eaa <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d84:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d046      	beq.n	8003e1e <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d92:	785b      	ldrb	r3, [r3, #1]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d126      	bne.n	8003de6 <PCD_EP_ISR_Handler+0x5f0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	4413      	add	r3, r2
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	00da      	lsls	r2, r3, #3
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	4413      	add	r3, r2
 8003dba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003dbe:	623b      	str	r3, [r7, #32]
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	801a      	strh	r2, [r3, #0]
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	801a      	strh	r2, [r3, #0]
 8003de4:	e061      	b.n	8003eaa <PCD_EP_ISR_Handler+0x6b4>
 8003de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de8:	785b      	ldrb	r3, [r3, #1]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d15d      	bne.n	8003eaa <PCD_EP_ISR_Handler+0x6b4>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	461a      	mov	r2, r3
 8003e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e02:	4413      	add	r3, r2
 8003e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	00da      	lsls	r2, r3, #3
 8003e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0e:	4413      	add	r3, r2
 8003e10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e18:	2200      	movs	r2, #0
 8003e1a:	801a      	strh	r2, [r3, #0]
 8003e1c:	e045      	b.n	8003eaa <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e26:	785b      	ldrb	r3, [r3, #1]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d126      	bne.n	8003e7a <PCD_EP_ISR_Handler+0x684>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e40:	4413      	add	r3, r2
 8003e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	00da      	lsls	r2, r3, #3
 8003e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e52:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e62:	801a      	strh	r2, [r3, #0]
 8003e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e76:	801a      	strh	r2, [r3, #0]
 8003e78:	e017      	b.n	8003eaa <PCD_EP_ISR_Handler+0x6b4>
 8003e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e7c:	785b      	ldrb	r3, [r3, #1]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d113      	bne.n	8003eaa <PCD_EP_ISR_Handler+0x6b4>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e90:	4413      	add	r3, r2
 8003e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	00da      	lsls	r2, r3, #3
 8003e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff fc3e 	bl	8003732 <HAL_PCD_DataInStageCallback>
 8003eb6:	e051      	b.n	8003f5c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003eb8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d144      	bne.n	8003f4e <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	4413      	add	r3, r2
 8003ede:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d907      	bls.n	8003f08 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8003ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f00:	1ad2      	subs	r2, r2, r3
 8003f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f04:	619a      	str	r2, [r3, #24]
 8003f06:	e002      	b.n	8003f0e <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8003f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fc08 	bl	8003732 <HAL_PCD_DataInStageCallback>
 8003f22:	e01b      	b.n	8003f5c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f26:	695a      	ldr	r2, [r3, #20]
 8003f28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f2c:	441a      	add	r2, r3
 8003f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f30:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f3a:	441a      	add	r2, r3
 8003f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f3e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f46:	4618      	mov	r0, r3
 8003f48:	f004 fd1c 	bl	8008984 <USB_EPStartXfer>
 8003f4c:	e006      	b.n	8003f5c <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003f4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003f52:	461a      	mov	r2, r3
 8003f54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f917 	bl	800418a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	b21b      	sxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f6ff ac49 	blt.w	8003800 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3758      	adds	r7, #88	@ 0x58
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	4613      	mov	r3, r2
 8003f84:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d07c      	beq.n	800408a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fb4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	8b7b      	ldrh	r3, [r7, #26]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d306      	bcc.n	8003fce <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	699a      	ldr	r2, [r3, #24]
 8003fc4:	8b7b      	ldrh	r3, [r7, #26]
 8003fc6:	1ad2      	subs	r2, r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	619a      	str	r2, [r3, #24]
 8003fcc:	e002      	b.n	8003fd4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d123      	bne.n	8004024 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff6:	833b      	strh	r3, [r7, #24]
 8003ff8:	8b3b      	ldrh	r3, [r7, #24]
 8003ffa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ffe:	833b      	strh	r3, [r7, #24]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	441a      	add	r2, r3
 800400e:	8b3b      	ldrh	r3, [r7, #24]
 8004010:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004014:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800401c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004020:	b29b      	uxth	r3, r3
 8004022:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01f      	beq.n	800406e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004044:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004048:	82fb      	strh	r3, [r7, #22]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	441a      	add	r2, r3
 8004058:	8afb      	ldrh	r3, [r7, #22]
 800405a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800405e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004066:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800406a:	b29b      	uxth	r3, r3
 800406c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800406e:	8b7b      	ldrh	r3, [r7, #26]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8085 	beq.w	8004180 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6959      	ldr	r1, [r3, #20]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	891a      	ldrh	r2, [r3, #8]
 8004082:	8b7b      	ldrh	r3, [r7, #26]
 8004084:	f006 f896 	bl	800a1b4 <USB_ReadPMA>
 8004088:	e07a      	b.n	8004180 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004092:	b29b      	uxth	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4413      	add	r3, r2
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	4413      	add	r3, r2
 80040a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	699a      	ldr	r2, [r3, #24]
 80040b4:	8b7b      	ldrh	r3, [r7, #26]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d306      	bcc.n	80040c8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	8b7b      	ldrh	r3, [r7, #26]
 80040c0:	1ad2      	subs	r2, r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	619a      	str	r2, [r3, #24]
 80040c6:	e002      	b.n	80040ce <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2200      	movs	r2, #0
 80040cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d123      	bne.n	800411e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f0:	83fb      	strh	r3, [r7, #30]
 80040f2:	8bfb      	ldrh	r3, [r7, #30]
 80040f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80040f8:	83fb      	strh	r3, [r7, #30]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	441a      	add	r2, r3
 8004108:	8bfb      	ldrh	r3, [r7, #30]
 800410a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800410e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800411a:	b29b      	uxth	r3, r3
 800411c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11f      	bne.n	8004168 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800413e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004142:	83bb      	strh	r3, [r7, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	441a      	add	r2, r3
 8004152:	8bbb      	ldrh	r3, [r7, #28]
 8004154:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004158:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800415c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004160:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004164:	b29b      	uxth	r3, r3
 8004166:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004168:	8b7b      	ldrh	r3, [r7, #26]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	6959      	ldr	r1, [r3, #20]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	895a      	ldrh	r2, [r3, #10]
 800417a:	8b7b      	ldrh	r3, [r7, #26]
 800417c:	f006 f81a 	bl	800a1b4 <USB_ReadPMA>
    }
  }

  return count;
 8004180:	8b7b      	ldrh	r3, [r7, #26]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b0a4      	sub	sp, #144	@ 0x90
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	4613      	mov	r3, r2
 8004196:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 81db 	beq.w	800455a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	4413      	add	r3, r2
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	4413      	add	r3, r2
 80041be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d907      	bls.n	80041e8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80041e0:	1ad2      	subs	r2, r2, r3
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	619a      	str	r2, [r3, #24]
 80041e6:	e002      	b.n	80041ee <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2200      	movs	r2, #0
 80041ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f040 80b9 	bne.w	800436a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	785b      	ldrb	r3, [r3, #1]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d126      	bne.n	800424e <HAL_PCD_EP_DB_Transmit+0xc4>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800420e:	b29b      	uxth	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004214:	4413      	add	r3, r2
 8004216:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	00da      	lsls	r2, r3, #3
 800421e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004220:	4413      	add	r3, r2
 8004222:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004232:	b29a      	uxth	r2, r3
 8004234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004236:	801a      	strh	r2, [r3, #0]
 8004238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b29b      	uxth	r3, r3
 800423e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004246:	b29a      	uxth	r2, r3
 8004248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	e01a      	b.n	8004284 <HAL_PCD_EP_DB_Transmit+0xfa>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d116      	bne.n	8004284 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	637b      	str	r3, [r7, #52]	@ 0x34
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004264:	b29b      	uxth	r3, r3
 8004266:	461a      	mov	r2, r3
 8004268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426a:	4413      	add	r3, r2
 800426c:	637b      	str	r3, [r7, #52]	@ 0x34
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	00da      	lsls	r2, r3, #3
 8004274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004276:	4413      	add	r3, r2
 8004278:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800427c:	633b      	str	r3, [r7, #48]	@ 0x30
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	2200      	movs	r2, #0
 8004282:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	785b      	ldrb	r3, [r3, #1]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d126      	bne.n	80042e0 <HAL_PCD_EP_DB_Transmit+0x156>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	4413      	add	r3, r2
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	00da      	lsls	r2, r3, #3
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	801a      	strh	r2, [r3, #0]
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d8:	b29a      	uxth	r2, r3
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	801a      	strh	r2, [r3, #0]
 80042de:	e017      	b.n	8004310 <HAL_PCD_EP_DB_Transmit+0x186>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	785b      	ldrb	r3, [r3, #1]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d113      	bne.n	8004310 <HAL_PCD_EP_DB_Transmit+0x186>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	4413      	add	r3, r2
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	00da      	lsls	r2, r3, #3
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	4413      	add	r3, r2
 8004304:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004308:	623b      	str	r3, [r7, #32]
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	2200      	movs	r2, #0
 800430e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	4619      	mov	r1, r3
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7ff fa0b 	bl	8003732 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 82fa 	beq.w	800491c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800433e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004342:	82fb      	strh	r3, [r7, #22]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	8afb      	ldrh	r3, [r7, #22]
 8004354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800435c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004364:	b29b      	uxth	r3, r3
 8004366:	8013      	strh	r3, [r2, #0]
 8004368:	e2d8      	b.n	800491c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d021      	beq.n	80043b8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800438a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	441a      	add	r2, r3
 80043a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80043a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043be:	2b01      	cmp	r3, #1
 80043c0:	f040 82ac 	bne.w	800491c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80043cc:	441a      	add	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	69da      	ldr	r2, [r3, #28]
 80043d6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80043da:	441a      	add	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6a1a      	ldr	r2, [r3, #32]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d30b      	bcc.n	8004404 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	6a1a      	ldr	r2, [r3, #32]
 80043f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043fc:	1ad2      	subs	r2, r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	621a      	str	r2, [r3, #32]
 8004402:	e017      	b.n	8004434 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d108      	bne.n	800441e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800440c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004410:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800441c:	e00a      	b.n	8004434 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2200      	movs	r2, #0
 8004432:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d165      	bne.n	8004508 <HAL_PCD_EP_DB_Transmit+0x37e>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800444a:	b29b      	uxth	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004450:	4413      	add	r3, r2
 8004452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	00da      	lsls	r2, r3, #3
 800445a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445c:	4413      	add	r3, r2
 800445e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004462:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800446e:	b29a      	uxth	r2, r3
 8004470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004472:	801a      	strh	r2, [r3, #0]
 8004474:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <HAL_PCD_EP_DB_Transmit+0x308>
 800447c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448a:	b29a      	uxth	r2, r3
 800448c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	e057      	b.n	8004542 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004492:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004496:	2b3e      	cmp	r3, #62	@ 0x3e
 8004498:	d818      	bhi.n	80044cc <HAL_PCD_EP_DB_Transmit+0x342>
 800449a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x32a>
 80044ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044b0:	3301      	adds	r3, #1
 80044b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044bc:	b29b      	uxth	r3, r3
 80044be:	029b      	lsls	r3, r3, #10
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	4313      	orrs	r3, r2
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	e03a      	b.n	8004542 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80044cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <HAL_PCD_EP_DB_Transmit+0x35c>
 80044e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044e2:	3b01      	subs	r3, #1
 80044e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	029b      	lsls	r3, r3, #10
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	4313      	orrs	r3, r2
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004500:	b29a      	uxth	r2, r3
 8004502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004504:	801a      	strh	r2, [r3, #0]
 8004506:	e01c      	b.n	8004542 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	785b      	ldrb	r3, [r3, #1]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d118      	bne.n	8004542 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	647b      	str	r3, [r7, #68]	@ 0x44
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004524:	4413      	add	r3, r2
 8004526:	647b      	str	r3, [r7, #68]	@ 0x44
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	00da      	lsls	r2, r3, #3
 800452e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004530:	4413      	add	r3, r2
 8004532:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004536:	643b      	str	r3, [r7, #64]	@ 0x40
 8004538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800453c:	b29a      	uxth	r2, r3
 800453e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004540:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6959      	ldr	r1, [r3, #20]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	891a      	ldrh	r2, [r3, #8]
 800454e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004552:	b29b      	uxth	r3, r3
 8004554:	f005 fdec 	bl	800a130 <USB_WritePMA>
 8004558:	e1e0      	b.n	800491c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004562:	b29b      	uxth	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	4413      	add	r3, r2
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	6812      	ldr	r2, [r2, #0]
 8004572:	4413      	add	r3, r2
 8004574:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800457e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800458a:	429a      	cmp	r2, r3
 800458c:	d307      	bcc.n	800459e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004596:	1ad2      	subs	r2, r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	619a      	str	r2, [r3, #24]
 800459c:	e002      	b.n	80045a4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2200      	movs	r2, #0
 80045a2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f040 80c0 	bne.w	800472e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	785b      	ldrb	r3, [r3, #1]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d126      	bne.n	8004604 <HAL_PCD_EP_DB_Transmit+0x47a>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045ca:	4413      	add	r3, r2
 80045cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	00da      	lsls	r2, r3, #3
 80045d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045d6:	4413      	add	r3, r2
 80045d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045ec:	801a      	strh	r2, [r3, #0]
 80045ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	e01a      	b.n	800463a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d116      	bne.n	800463a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	667b      	str	r3, [r7, #100]	@ 0x64
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800461a:	b29b      	uxth	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004620:	4413      	add	r3, r2
 8004622:	667b      	str	r3, [r7, #100]	@ 0x64
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	00da      	lsls	r2, r3, #3
 800462a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800462c:	4413      	add	r3, r2
 800462e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004632:	663b      	str	r3, [r7, #96]	@ 0x60
 8004634:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004636:	2200      	movs	r2, #0
 8004638:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	785b      	ldrb	r3, [r3, #1]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d12b      	bne.n	80046a0 <HAL_PCD_EP_DB_Transmit+0x516>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004656:	b29b      	uxth	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800465c:	4413      	add	r3, r2
 800465e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	00da      	lsls	r2, r3, #3
 8004666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004668:	4413      	add	r3, r2
 800466a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800466e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004672:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800467e:	b29a      	uxth	r2, r3
 8004680:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004684:	801a      	strh	r2, [r3, #0]
 8004686:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004696:	b29a      	uxth	r2, r3
 8004698:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800469c:	801a      	strh	r2, [r3, #0]
 800469e:	e017      	b.n	80046d0 <HAL_PCD_EP_DB_Transmit+0x546>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	785b      	ldrb	r3, [r3, #1]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d113      	bne.n	80046d0 <HAL_PCD_EP_DB_Transmit+0x546>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046b6:	4413      	add	r3, r2
 80046b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	00da      	lsls	r2, r3, #3
 80046c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046c2:	4413      	add	r3, r2
 80046c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80046ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046cc:	2200      	movs	r2, #0
 80046ce:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	4619      	mov	r1, r3
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f7ff f82b 	bl	8003732 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f040 811a 	bne.w	800491c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004702:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	441a      	add	r2, r3
 8004714:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800471c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004720:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004728:	b29b      	uxth	r3, r3
 800472a:	8013      	strh	r3, [r2, #0]
 800472c:	e0f6      	b.n	800491c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d121      	bne.n	800477c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800474e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004752:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	441a      	add	r2, r3
 8004764:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004768:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800476c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004770:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004778:	b29b      	uxth	r3, r3
 800477a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004782:	2b01      	cmp	r3, #1
 8004784:	f040 80ca 	bne.w	800491c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	695a      	ldr	r2, [r3, #20]
 800478c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004790:	441a      	add	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800479e:	441a      	add	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	6a1a      	ldr	r2, [r3, #32]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d30b      	bcc.n	80047c8 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6a1a      	ldr	r2, [r3, #32]
 80047bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047c0:	1ad2      	subs	r2, r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	621a      	str	r2, [r3, #32]
 80047c6:	e017      	b.n	80047f8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d108      	bne.n	80047e2 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80047d0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80047d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80047e0:	e00a      	b.n	80047f8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2200      	movs	r2, #0
 80047ee:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d165      	bne.n	80048d2 <HAL_PCD_EP_DB_Transmit+0x748>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004814:	b29b      	uxth	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800481a:	4413      	add	r3, r2
 800481c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	00da      	lsls	r2, r3, #3
 8004824:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004826:	4413      	add	r3, r2
 8004828:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800482c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800482e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004838:	b29a      	uxth	r2, r3
 800483a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800483c:	801a      	strh	r2, [r3, #0]
 800483e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <HAL_PCD_EP_DB_Transmit+0x6d2>
 8004846:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004854:	b29a      	uxth	r2, r3
 8004856:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004858:	801a      	strh	r2, [r3, #0]
 800485a:	e054      	b.n	8004906 <HAL_PCD_EP_DB_Transmit+0x77c>
 800485c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004860:	2b3e      	cmp	r3, #62	@ 0x3e
 8004862:	d818      	bhi.n	8004896 <HAL_PCD_EP_DB_Transmit+0x70c>
 8004864:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800486c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <HAL_PCD_EP_DB_Transmit+0x6f4>
 8004878:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800487a:	3301      	adds	r3, #1
 800487c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800487e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29a      	uxth	r2, r3
 8004884:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004886:	b29b      	uxth	r3, r3
 8004888:	029b      	lsls	r3, r3, #10
 800488a:	b29b      	uxth	r3, r3
 800488c:	4313      	orrs	r3, r2
 800488e:	b29a      	uxth	r2, r3
 8004890:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004892:	801a      	strh	r2, [r3, #0]
 8004894:	e037      	b.n	8004906 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800489e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d102      	bne.n	80048b0 <HAL_PCD_EP_DB_Transmit+0x726>
 80048aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048ac:	3b01      	subs	r3, #1
 80048ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	029b      	lsls	r3, r3, #10
 80048bc:	b29b      	uxth	r3, r3
 80048be:	4313      	orrs	r3, r2
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048ce:	801a      	strh	r2, [r3, #0]
 80048d0:	e019      	b.n	8004906 <HAL_PCD_EP_DB_Transmit+0x77c>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	785b      	ldrb	r3, [r3, #1]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d115      	bne.n	8004906 <HAL_PCD_EP_DB_Transmit+0x77c>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e8:	4413      	add	r3, r2
 80048ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	00da      	lsls	r2, r3, #3
 80048f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f4:	4413      	add	r3, r2
 80048f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80048fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004900:	b29a      	uxth	r2, r3
 8004902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004904:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6959      	ldr	r1, [r3, #20]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	895a      	ldrh	r2, [r3, #10]
 8004912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004916:	b29b      	uxth	r3, r3
 8004918:	f005 fc0a 	bl	800a130 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004936:	82bb      	strh	r3, [r7, #20]
 8004938:	8abb      	ldrh	r3, [r7, #20]
 800493a:	f083 0310 	eor.w	r3, r3, #16
 800493e:	82bb      	strh	r3, [r7, #20]
 8004940:	8abb      	ldrh	r3, [r7, #20]
 8004942:	f083 0320 	eor.w	r3, r3, #32
 8004946:	82bb      	strh	r3, [r7, #20]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	8abb      	ldrh	r3, [r7, #20]
 8004958:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800495c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004968:	b29b      	uxth	r3, r3
 800496a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3790      	adds	r7, #144	@ 0x90
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800497e:	af00      	add	r7, sp, #0
 8004980:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004984:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004988:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800498a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800498e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d102      	bne.n	800499e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	f001 b83a 	b.w	8005a12 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800499e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 816f 	beq.w	8004c92 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80049b4:	4bb5      	ldr	r3, [pc, #724]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f003 030c 	and.w	r3, r3, #12
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d00c      	beq.n	80049da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049c0:	4bb2      	ldr	r3, [pc, #712]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 030c 	and.w	r3, r3, #12
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d15c      	bne.n	8004a86 <HAL_RCC_OscConfig+0x10e>
 80049cc:	4baf      	ldr	r3, [pc, #700]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d8:	d155      	bne.n	8004a86 <HAL_RCC_OscConfig+0x10e>
 80049da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049de:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80049e6:	fa93 f3a3 	rbit	r3, r3
 80049ea:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 80049ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f2:	fab3 f383 	clz	r3, r3
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d102      	bne.n	8004a0c <HAL_RCC_OscConfig+0x94>
 8004a06:	4ba1      	ldr	r3, [pc, #644]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	e015      	b.n	8004a38 <HAL_RCC_OscConfig+0xc0>
 8004a0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a10:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a14:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8004a18:	fa93 f3a3 	rbit	r3, r3
 8004a1c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8004a20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a24:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004a28:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004a34:	4b95      	ldr	r3, [pc, #596]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a3c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8004a40:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8004a44:	fa92 f2a2 	rbit	r2, r2
 8004a48:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8004a4c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004a50:	fab2 f282 	clz	r2, r2
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	f042 0220 	orr.w	r2, r2, #32
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	f002 021f 	and.w	r2, r2, #31
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f202 	lsl.w	r2, r1, r2
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8111 	beq.w	8004c90 <HAL_RCC_OscConfig+0x318>
 8004a6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f040 8108 	bne.w	8004c90 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	f000 bfc6 	b.w	8005a12 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a96:	d106      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x12e>
 8004a98:	4b7c      	ldr	r3, [pc, #496]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a7b      	ldr	r2, [pc, #492]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	e036      	b.n	8004b14 <HAL_RCC_OscConfig+0x19c>
 8004aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004aaa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x158>
 8004ab6:	4b75      	ldr	r3, [pc, #468]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a74      	ldr	r2, [pc, #464]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004abc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b72      	ldr	r3, [pc, #456]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a71      	ldr	r2, [pc, #452]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004ac8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e021      	b.n	8004b14 <HAL_RCC_OscConfig+0x19c>
 8004ad0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ad4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCC_OscConfig+0x184>
 8004ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a69      	ldr	r2, [pc, #420]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	4b67      	ldr	r3, [pc, #412]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a66      	ldr	r2, [pc, #408]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e00b      	b.n	8004b14 <HAL_RCC_OscConfig+0x19c>
 8004afc:	4b63      	ldr	r3, [pc, #396]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a62      	ldr	r2, [pc, #392]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	4b60      	ldr	r3, [pc, #384]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a5f      	ldr	r2, [pc, #380]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004b0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b12:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d059      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b24:	f7fe f8e4 	bl	8002cf0 <HAL_GetTick>
 8004b28:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b2e:	f7fe f8df 	bl	8002cf0 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	@ 0x64
 8004b3c:	d902      	bls.n	8004b44 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	f000 bf67 	b.w	8005a12 <HAL_RCC_OscConfig+0x109a>
 8004b44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b48:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8004b50:	fa93 f3a3 	rbit	r3, r3
 8004b54:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8004b58:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5c:	fab3 f383 	clz	r3, r3
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d102      	bne.n	8004b76 <HAL_RCC_OscConfig+0x1fe>
 8004b70:	4b46      	ldr	r3, [pc, #280]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	e015      	b.n	8004ba2 <HAL_RCC_OscConfig+0x22a>
 8004b76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b7a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8004b82:	fa93 f3a3 	rbit	r3, r3
 8004b86:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8004b8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b8e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004b92:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8004b96:	fa93 f3a3 	rbit	r3, r3
 8004b9a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004ba6:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8004baa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8004bae:	fa92 f2a2 	rbit	r2, r2
 8004bb2:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8004bb6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004bba:	fab2 f282 	clz	r2, r2
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	f042 0220 	orr.w	r2, r2, #32
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	f002 021f 	and.w	r2, r2, #31
 8004bca:	2101      	movs	r1, #1
 8004bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0ab      	beq.n	8004b2e <HAL_RCC_OscConfig+0x1b6>
 8004bd6:	e05c      	b.n	8004c92 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7fe f88a 	bl	8002cf0 <HAL_GetTick>
 8004bdc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be0:	e00a      	b.n	8004bf8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be2:	f7fe f885 	bl	8002cf0 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b64      	cmp	r3, #100	@ 0x64
 8004bf0:	d902      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	f000 bf0d 	b.w	8005a12 <HAL_RCC_OscConfig+0x109a>
 8004bf8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bfc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004c04:	fa93 f3a3 	rbit	r3, r3
 8004c08:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8004c0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c10:	fab3 f383 	clz	r3, r3
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d102      	bne.n	8004c2a <HAL_RCC_OscConfig+0x2b2>
 8004c24:	4b19      	ldr	r3, [pc, #100]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	e015      	b.n	8004c56 <HAL_RCC_OscConfig+0x2de>
 8004c2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c2e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004c36:	fa93 f3a3 	rbit	r3, r3
 8004c3a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004c3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c42:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004c46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004c4a:	fa93 f3a3 	rbit	r3, r3
 8004c4e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004c52:	4b0e      	ldr	r3, [pc, #56]	@ (8004c8c <HAL_RCC_OscConfig+0x314>)
 8004c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c5a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8004c5e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8004c62:	fa92 f2a2 	rbit	r2, r2
 8004c66:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8004c6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004c6e:	fab2 f282 	clz	r2, r2
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	f042 0220 	orr.w	r2, r2, #32
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	f002 021f 	and.w	r2, r2, #31
 8004c7e:	2101      	movs	r1, #1
 8004c80:	fa01 f202 	lsl.w	r2, r1, r2
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1ab      	bne.n	8004be2 <HAL_RCC_OscConfig+0x26a>
 8004c8a:	e002      	b.n	8004c92 <HAL_RCC_OscConfig+0x31a>
 8004c8c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 817f 	beq.w	8004fa6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004ca8:	4ba7      	ldr	r3, [pc, #668]	@ (8004f48 <HAL_RCC_OscConfig+0x5d0>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 030c 	and.w	r3, r3, #12
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00c      	beq.n	8004cce <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004cb4:	4ba4      	ldr	r3, [pc, #656]	@ (8004f48 <HAL_RCC_OscConfig+0x5d0>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 030c 	and.w	r3, r3, #12
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d173      	bne.n	8004da8 <HAL_RCC_OscConfig+0x430>
 8004cc0:	4ba1      	ldr	r3, [pc, #644]	@ (8004f48 <HAL_RCC_OscConfig+0x5d0>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004cc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ccc:	d16c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x430>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004cd8:	fa93 f3a3 	rbit	r3, r3
 8004cdc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8004ce0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce4:	fab3 f383 	clz	r3, r3
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d102      	bne.n	8004cfe <HAL_RCC_OscConfig+0x386>
 8004cf8:	4b93      	ldr	r3, [pc, #588]	@ (8004f48 <HAL_RCC_OscConfig+0x5d0>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	e013      	b.n	8004d26 <HAL_RCC_OscConfig+0x3ae>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d04:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004d08:	fa93 f3a3 	rbit	r3, r3
 8004d0c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004d10:	2302      	movs	r3, #2
 8004d12:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004d16:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004d22:	4b89      	ldr	r3, [pc, #548]	@ (8004f48 <HAL_RCC_OscConfig+0x5d0>)
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	2202      	movs	r2, #2
 8004d28:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004d2c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8004d30:	fa92 f2a2 	rbit	r2, r2
 8004d34:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8004d38:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004d3c:	fab2 f282 	clz	r2, r2
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	f042 0220 	orr.w	r2, r2, #32
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	f002 021f 	and.w	r2, r2, #31
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCC_OscConfig+0x3f6>
 8004d58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d5c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d002      	beq.n	8004d6e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f000 be52 	b.w	8005a12 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6e:	4b76      	ldr	r3, [pc, #472]	@ (8004f48 <HAL_RCC_OscConfig+0x5d0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	21f8      	movs	r1, #248	@ 0xf8
 8004d84:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d88:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8004d8c:	fa91 f1a1 	rbit	r1, r1
 8004d90:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8004d94:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004d98:	fab1 f181 	clz	r1, r1
 8004d9c:	b2c9      	uxtb	r1, r1
 8004d9e:	408b      	lsls	r3, r1
 8004da0:	4969      	ldr	r1, [pc, #420]	@ (8004f48 <HAL_RCC_OscConfig+0x5d0>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da6:	e0fe      	b.n	8004fa6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004da8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8088 	beq.w	8004eca <HAL_RCC_OscConfig+0x552>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004dc4:	fa93 f3a3 	rbit	r3, r3
 8004dc8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8004dcc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd0:	fab3 f383 	clz	r3, r3
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004dda:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	461a      	mov	r2, r3
 8004de2:	2301      	movs	r3, #1
 8004de4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de6:	f7fd ff83 	bl	8002cf0 <HAL_GetTick>
 8004dea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dee:	e00a      	b.n	8004e06 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004df0:	f7fd ff7e 	bl	8002cf0 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d902      	bls.n	8004e06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	f000 be06 	b.w	8005a12 <HAL_RCC_OscConfig+0x109a>
 8004e06:	2302      	movs	r3, #2
 8004e08:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004e10:	fa93 f3a3 	rbit	r3, r3
 8004e14:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8004e18:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1c:	fab3 f383 	clz	r3, r3
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d102      	bne.n	8004e36 <HAL_RCC_OscConfig+0x4be>
 8004e30:	4b45      	ldr	r3, [pc, #276]	@ (8004f48 <HAL_RCC_OscConfig+0x5d0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	e013      	b.n	8004e5e <HAL_RCC_OscConfig+0x4e6>
 8004e36:	2302      	movs	r3, #2
 8004e38:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004e40:	fa93 f3a3 	rbit	r3, r3
 8004e44:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004e48:	2302      	movs	r3, #2
 8004e4a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004e4e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004e52:	fa93 f3a3 	rbit	r3, r3
 8004e56:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f48 <HAL_RCC_OscConfig+0x5d0>)
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004e64:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8004e68:	fa92 f2a2 	rbit	r2, r2
 8004e6c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8004e70:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004e74:	fab2 f282 	clz	r2, r2
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	f042 0220 	orr.w	r2, r2, #32
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	f002 021f 	and.w	r2, r2, #31
 8004e84:	2101      	movs	r1, #1
 8004e86:	fa01 f202 	lsl.w	r2, r1, r2
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0af      	beq.n	8004df0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e90:	4b2d      	ldr	r3, [pc, #180]	@ (8004f48 <HAL_RCC_OscConfig+0x5d0>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	21f8      	movs	r1, #248	@ 0xf8
 8004ea6:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8004eae:	fa91 f1a1 	rbit	r1, r1
 8004eb2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8004eb6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004eba:	fab1 f181 	clz	r1, r1
 8004ebe:	b2c9      	uxtb	r1, r1
 8004ec0:	408b      	lsls	r3, r1
 8004ec2:	4921      	ldr	r1, [pc, #132]	@ (8004f48 <HAL_RCC_OscConfig+0x5d0>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	600b      	str	r3, [r1, #0]
 8004ec8:	e06d      	b.n	8004fa6 <HAL_RCC_OscConfig+0x62e>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004ed4:	fa93 f3a3 	rbit	r3, r3
 8004ed8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8004edc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ee0:	fab3 f383 	clz	r3, r3
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004eea:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef6:	f7fd fefb 	bl	8002cf0 <HAL_GetTick>
 8004efa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f00:	f7fd fef6 	bl	8002cf0 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d902      	bls.n	8004f16 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	f000 bd7e 	b.w	8005a12 <HAL_RCC_OscConfig+0x109a>
 8004f16:	2302      	movs	r3, #2
 8004f18:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004f20:	fa93 f3a3 	rbit	r3, r3
 8004f24:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8004f28:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2c:	fab3 f383 	clz	r3, r3
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d105      	bne.n	8004f4c <HAL_RCC_OscConfig+0x5d4>
 8004f40:	4b01      	ldr	r3, [pc, #4]	@ (8004f48 <HAL_RCC_OscConfig+0x5d0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	e016      	b.n	8004f74 <HAL_RCC_OscConfig+0x5fc>
 8004f46:	bf00      	nop
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004f56:	fa93 f3a3 	rbit	r3, r3
 8004f5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004f5e:	2302      	movs	r3, #2
 8004f60:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004f64:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004f68:	fa93 f3a3 	rbit	r3, r3
 8004f6c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004f70:	4bbf      	ldr	r3, [pc, #764]	@ (8005270 <HAL_RCC_OscConfig+0x8f8>)
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	2202      	movs	r2, #2
 8004f76:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004f7a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004f7e:	fa92 f2a2 	rbit	r2, r2
 8004f82:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8004f86:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004f8a:	fab2 f282 	clz	r2, r2
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	f042 0220 	orr.w	r2, r2, #32
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	f002 021f 	and.w	r2, r2, #31
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1ac      	bne.n	8004f00 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004faa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8113 	beq.w	80051e2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d07c      	beq.n	80050c6 <HAL_RCC_OscConfig+0x74e>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd6:	fa93 f3a3 	rbit	r3, r3
 8004fda:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8004fde:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fe2:	fab3 f383 	clz	r3, r3
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4ba2      	ldr	r3, [pc, #648]	@ (8005274 <HAL_RCC_OscConfig+0x8fc>)
 8004fec:	4413      	add	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ff6:	f7fd fe7b 	bl	8002cf0 <HAL_GetTick>
 8004ffa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ffe:	e00a      	b.n	8005016 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005000:	f7fd fe76 	bl	8002cf0 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d902      	bls.n	8005016 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	f000 bcfe 	b.w	8005a12 <HAL_RCC_OscConfig+0x109a>
 8005016:	2302      	movs	r3, #2
 8005018:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005020:	fa93 f2a3 	rbit	r2, r3
 8005024:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005028:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005036:	2202      	movs	r2, #2
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800503e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	fa93 f2a3 	rbit	r2, r3
 8005048:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800504c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005056:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800505a:	2202      	movs	r2, #2
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005062:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	fa93 f2a3 	rbit	r2, r3
 800506c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005070:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005074:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005076:	4b7e      	ldr	r3, [pc, #504]	@ (8005270 <HAL_RCC_OscConfig+0x8f8>)
 8005078:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800507a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800507e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005082:	2102      	movs	r1, #2
 8005084:	6019      	str	r1, [r3, #0]
 8005086:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800508a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	fa93 f1a3 	rbit	r1, r3
 8005094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005098:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800509c:	6019      	str	r1, [r3, #0]
  return result;
 800509e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050a2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	fab3 f383 	clz	r3, r3
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f003 031f 	and.w	r3, r3, #31
 80050b8:	2101      	movs	r1, #1
 80050ba:	fa01 f303 	lsl.w	r3, r1, r3
 80050be:	4013      	ands	r3, r2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d09d      	beq.n	8005000 <HAL_RCC_OscConfig+0x688>
 80050c4:	e08d      	b.n	80051e2 <HAL_RCC_OscConfig+0x86a>
 80050c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050ca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050ce:	2201      	movs	r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	fa93 f2a3 	rbit	r2, r3
 80050e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050e4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80050e8:	601a      	str	r2, [r3, #0]
  return result;
 80050ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80050f2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050f4:	fab3 f383 	clz	r3, r3
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	4b5d      	ldr	r3, [pc, #372]	@ (8005274 <HAL_RCC_OscConfig+0x8fc>)
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	461a      	mov	r2, r3
 8005104:	2300      	movs	r3, #0
 8005106:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005108:	f7fd fdf2 	bl	8002cf0 <HAL_GetTick>
 800510c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005110:	e00a      	b.n	8005128 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005112:	f7fd fded 	bl	8002cf0 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d902      	bls.n	8005128 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	f000 bc75 	b.w	8005a12 <HAL_RCC_OscConfig+0x109a>
 8005128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800512c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005130:	2202      	movs	r2, #2
 8005132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005134:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005138:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	fa93 f2a3 	rbit	r2, r3
 8005142:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005146:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005150:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005154:	2202      	movs	r2, #2
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800515c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	fa93 f2a3 	rbit	r2, r3
 8005166:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800516a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005174:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005178:	2202      	movs	r2, #2
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005180:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	fa93 f2a3 	rbit	r2, r3
 800518a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800518e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005192:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005194:	4b36      	ldr	r3, [pc, #216]	@ (8005270 <HAL_RCC_OscConfig+0x8f8>)
 8005196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005198:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800519c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80051a0:	2102      	movs	r1, #2
 80051a2:	6019      	str	r1, [r3, #0]
 80051a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	fa93 f1a3 	rbit	r1, r3
 80051b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051b6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80051ba:	6019      	str	r1, [r3, #0]
  return result;
 80051bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	fab3 f383 	clz	r3, r3
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	2101      	movs	r1, #1
 80051d8:	fa01 f303 	lsl.w	r3, r1, r3
 80051dc:	4013      	ands	r3, r2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d197      	bne.n	8005112 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 81a5 	beq.w	8005542 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f8:	2300      	movs	r3, #0
 80051fa:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005270 <HAL_RCC_OscConfig+0x8f8>)
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d116      	bne.n	8005238 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520a:	4b19      	ldr	r3, [pc, #100]	@ (8005270 <HAL_RCC_OscConfig+0x8f8>)
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	4a18      	ldr	r2, [pc, #96]	@ (8005270 <HAL_RCC_OscConfig+0x8f8>)
 8005210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005214:	61d3      	str	r3, [r2, #28]
 8005216:	4b16      	ldr	r3, [pc, #88]	@ (8005270 <HAL_RCC_OscConfig+0x8f8>)
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800521e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005222:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800522c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005230:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005238:	4b0f      	ldr	r3, [pc, #60]	@ (8005278 <HAL_RCC_OscConfig+0x900>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005240:	2b00      	cmp	r3, #0
 8005242:	d121      	bne.n	8005288 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005244:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <HAL_RCC_OscConfig+0x900>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a0b      	ldr	r2, [pc, #44]	@ (8005278 <HAL_RCC_OscConfig+0x900>)
 800524a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800524e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005250:	f7fd fd4e 	bl	8002cf0 <HAL_GetTick>
 8005254:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005258:	e010      	b.n	800527c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800525a:	f7fd fd49 	bl	8002cf0 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b64      	cmp	r3, #100	@ 0x64
 8005268:	d908      	bls.n	800527c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e3d1      	b.n	8005a12 <HAL_RCC_OscConfig+0x109a>
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	10908120 	.word	0x10908120
 8005278:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527c:	4b8d      	ldr	r3, [pc, #564]	@ (80054b4 <HAL_RCC_OscConfig+0xb3c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0e8      	beq.n	800525a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800528c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d106      	bne.n	80052a6 <HAL_RCC_OscConfig+0x92e>
 8005298:	4b87      	ldr	r3, [pc, #540]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	4a86      	ldr	r2, [pc, #536]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	6213      	str	r3, [r2, #32]
 80052a4:	e035      	b.n	8005312 <HAL_RCC_OscConfig+0x99a>
 80052a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCC_OscConfig+0x958>
 80052b6:	4b80      	ldr	r3, [pc, #512]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	4a7f      	ldr	r2, [pc, #508]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	6213      	str	r3, [r2, #32]
 80052c2:	4b7d      	ldr	r3, [pc, #500]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	4a7c      	ldr	r2, [pc, #496]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 80052c8:	f023 0304 	bic.w	r3, r3, #4
 80052cc:	6213      	str	r3, [r2, #32]
 80052ce:	e020      	b.n	8005312 <HAL_RCC_OscConfig+0x99a>
 80052d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2b05      	cmp	r3, #5
 80052de:	d10c      	bne.n	80052fa <HAL_RCC_OscConfig+0x982>
 80052e0:	4b75      	ldr	r3, [pc, #468]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	4a74      	ldr	r2, [pc, #464]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 80052e6:	f043 0304 	orr.w	r3, r3, #4
 80052ea:	6213      	str	r3, [r2, #32]
 80052ec:	4b72      	ldr	r3, [pc, #456]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	4a71      	ldr	r2, [pc, #452]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	6213      	str	r3, [r2, #32]
 80052f8:	e00b      	b.n	8005312 <HAL_RCC_OscConfig+0x99a>
 80052fa:	4b6f      	ldr	r3, [pc, #444]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	4a6e      	ldr	r2, [pc, #440]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 8005300:	f023 0301 	bic.w	r3, r3, #1
 8005304:	6213      	str	r3, [r2, #32]
 8005306:	4b6c      	ldr	r3, [pc, #432]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	4a6b      	ldr	r2, [pc, #428]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 800530c:	f023 0304 	bic.w	r3, r3, #4
 8005310:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005312:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005316:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 8081 	beq.w	8005426 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005324:	f7fd fce4 	bl	8002cf0 <HAL_GetTick>
 8005328:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532c:	e00b      	b.n	8005346 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800532e:	f7fd fcdf 	bl	8002cf0 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800533e:	4293      	cmp	r3, r2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e365      	b.n	8005a12 <HAL_RCC_OscConfig+0x109a>
 8005346:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800534a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800534e:	2202      	movs	r2, #2
 8005350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005356:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	fa93 f2a3 	rbit	r2, r3
 8005360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005364:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800536e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005372:	2202      	movs	r2, #2
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800537a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	fa93 f2a3 	rbit	r2, r3
 8005384:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005388:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800538c:	601a      	str	r2, [r3, #0]
  return result;
 800538e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005392:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005396:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005398:	fab3 f383 	clz	r3, r3
 800539c:	b2db      	uxtb	r3, r3
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f043 0302 	orr.w	r3, r3, #2
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d102      	bne.n	80053b2 <HAL_RCC_OscConfig+0xa3a>
 80053ac:	4b42      	ldr	r3, [pc, #264]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	e013      	b.n	80053da <HAL_RCC_OscConfig+0xa62>
 80053b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053b6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80053ba:	2202      	movs	r2, #2
 80053bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053c2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	fa93 f2a3 	rbit	r2, r3
 80053cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053d0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	4b38      	ldr	r3, [pc, #224]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80053de:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80053e2:	2102      	movs	r1, #2
 80053e4:	6011      	str	r1, [r2, #0]
 80053e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80053ea:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	fa92 f1a2 	rbit	r1, r2
 80053f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80053f8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80053fc:	6011      	str	r1, [r2, #0]
  return result;
 80053fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005402:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8005406:	6812      	ldr	r2, [r2, #0]
 8005408:	fab2 f282 	clz	r2, r2
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	f002 021f 	and.w	r2, r2, #31
 8005418:	2101      	movs	r1, #1
 800541a:	fa01 f202 	lsl.w	r2, r1, r2
 800541e:	4013      	ands	r3, r2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d084      	beq.n	800532e <HAL_RCC_OscConfig+0x9b6>
 8005424:	e083      	b.n	800552e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005426:	f7fd fc63 	bl	8002cf0 <HAL_GetTick>
 800542a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800542e:	e00b      	b.n	8005448 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005430:	f7fd fc5e 	bl	8002cf0 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e2e4      	b.n	8005a12 <HAL_RCC_OscConfig+0x109a>
 8005448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800544c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005450:	2202      	movs	r2, #2
 8005452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005454:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005458:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	fa93 f2a3 	rbit	r2, r3
 8005462:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005466:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005470:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005474:	2202      	movs	r2, #2
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800547c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	fa93 f2a3 	rbit	r2, r3
 8005486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800548a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800548e:	601a      	str	r2, [r3, #0]
  return result;
 8005490:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005494:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005498:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800549a:	fab3 f383 	clz	r3, r3
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f043 0302 	orr.w	r3, r3, #2
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d106      	bne.n	80054bc <HAL_RCC_OscConfig+0xb44>
 80054ae:	4b02      	ldr	r3, [pc, #8]	@ (80054b8 <HAL_RCC_OscConfig+0xb40>)
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	e017      	b.n	80054e4 <HAL_RCC_OscConfig+0xb6c>
 80054b4:	40007000 	.word	0x40007000
 80054b8:	40021000 	.word	0x40021000
 80054bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054c0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80054c4:	2202      	movs	r2, #2
 80054c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054cc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	fa93 f2a3 	rbit	r2, r3
 80054d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054da:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	4bb3      	ldr	r3, [pc, #716]	@ (80057b0 <HAL_RCC_OscConfig+0xe38>)
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80054e8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80054ec:	2102      	movs	r1, #2
 80054ee:	6011      	str	r1, [r2, #0]
 80054f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80054f4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	fa92 f1a2 	rbit	r1, r2
 80054fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005502:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8005506:	6011      	str	r1, [r2, #0]
  return result;
 8005508:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800550c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	fab2 f282 	clz	r2, r2
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	f002 021f 	and.w	r2, r2, #31
 8005522:	2101      	movs	r1, #1
 8005524:	fa01 f202 	lsl.w	r2, r1, r2
 8005528:	4013      	ands	r3, r2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d180      	bne.n	8005430 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800552e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8005532:	2b01      	cmp	r3, #1
 8005534:	d105      	bne.n	8005542 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005536:	4b9e      	ldr	r3, [pc, #632]	@ (80057b0 <HAL_RCC_OscConfig+0xe38>)
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	4a9d      	ldr	r2, [pc, #628]	@ (80057b0 <HAL_RCC_OscConfig+0xe38>)
 800553c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005540:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005542:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005546:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 825e 	beq.w	8005a10 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005554:	4b96      	ldr	r3, [pc, #600]	@ (80057b0 <HAL_RCC_OscConfig+0xe38>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f003 030c 	and.w	r3, r3, #12
 800555c:	2b08      	cmp	r3, #8
 800555e:	f000 821f 	beq.w	80059a0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005562:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005566:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	2b02      	cmp	r3, #2
 8005570:	f040 8170 	bne.w	8005854 <HAL_RCC_OscConfig+0xedc>
 8005574:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005578:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800557c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005582:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005586:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	fa93 f2a3 	rbit	r2, r3
 8005590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005594:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005598:	601a      	str	r2, [r3, #0]
  return result;
 800559a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800559e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80055a2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a4:	fab3 f383 	clz	r3, r3
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80055ae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	461a      	mov	r2, r3
 80055b6:	2300      	movs	r3, #0
 80055b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ba:	f7fd fb99 	bl	8002cf0 <HAL_GetTick>
 80055be:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055c2:	e009      	b.n	80055d8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c4:	f7fd fb94 	bl	8002cf0 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e21c      	b.n	8005a12 <HAL_RCC_OscConfig+0x109a>
 80055d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055dc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80055e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80055e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055ea:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	fa93 f2a3 	rbit	r2, r3
 80055f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055f8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80055fc:	601a      	str	r2, [r3, #0]
  return result;
 80055fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005602:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005606:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005608:	fab3 f383 	clz	r3, r3
 800560c:	b2db      	uxtb	r3, r3
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b01      	cmp	r3, #1
 800561a:	d102      	bne.n	8005622 <HAL_RCC_OscConfig+0xcaa>
 800561c:	4b64      	ldr	r3, [pc, #400]	@ (80057b0 <HAL_RCC_OscConfig+0xe38>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	e027      	b.n	8005672 <HAL_RCC_OscConfig+0xcfa>
 8005622:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005626:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800562a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800562e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005630:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005634:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	fa93 f2a3 	rbit	r2, r3
 800563e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005642:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800564c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005650:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800565a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	fa93 f2a3 	rbit	r2, r3
 8005664:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005668:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	4b50      	ldr	r3, [pc, #320]	@ (80057b0 <HAL_RCC_OscConfig+0xe38>)
 8005670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005672:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005676:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800567a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800567e:	6011      	str	r1, [r2, #0]
 8005680:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005684:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	fa92 f1a2 	rbit	r1, r2
 800568e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005692:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8005696:	6011      	str	r1, [r2, #0]
  return result;
 8005698:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800569c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80056a0:	6812      	ldr	r2, [r2, #0]
 80056a2:	fab2 f282 	clz	r2, r2
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	f042 0220 	orr.w	r2, r2, #32
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	f002 021f 	and.w	r2, r2, #31
 80056b2:	2101      	movs	r1, #1
 80056b4:	fa01 f202 	lsl.w	r2, r1, r2
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d182      	bne.n	80055c4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056be:	4b3c      	ldr	r3, [pc, #240]	@ (80057b0 <HAL_RCC_OscConfig+0xe38>)
 80056c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c2:	f023 020f 	bic.w	r2, r3, #15
 80056c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	4937      	ldr	r1, [pc, #220]	@ (80057b0 <HAL_RCC_OscConfig+0xe38>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80056d8:	4b35      	ldr	r3, [pc, #212]	@ (80057b0 <HAL_RCC_OscConfig+0xe38>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80056e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6a19      	ldr	r1, [r3, #32]
 80056ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	430b      	orrs	r3, r1
 80056fa:	492d      	ldr	r1, [pc, #180]	@ (80057b0 <HAL_RCC_OscConfig+0xe38>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	604b      	str	r3, [r1, #4]
 8005700:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005704:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005708:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800570c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005712:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	fa93 f2a3 	rbit	r2, r3
 800571c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005720:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005724:	601a      	str	r2, [r3, #0]
  return result;
 8005726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800572a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800572e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005730:	fab3 f383 	clz	r3, r3
 8005734:	b2db      	uxtb	r3, r3
 8005736:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800573a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	461a      	mov	r2, r3
 8005742:	2301      	movs	r3, #1
 8005744:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005746:	f7fd fad3 	bl	8002cf0 <HAL_GetTick>
 800574a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800574e:	e009      	b.n	8005764 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005750:	f7fd face 	bl	8002cf0 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e156      	b.n	8005a12 <HAL_RCC_OscConfig+0x109a>
 8005764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005768:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800576c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005776:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	fa93 f2a3 	rbit	r2, r3
 8005780:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005784:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005788:	601a      	str	r2, [r3, #0]
  return result;
 800578a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800578e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005792:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005794:	fab3 f383 	clz	r3, r3
 8005798:	b2db      	uxtb	r3, r3
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	b2db      	uxtb	r3, r3
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d105      	bne.n	80057b4 <HAL_RCC_OscConfig+0xe3c>
 80057a8:	4b01      	ldr	r3, [pc, #4]	@ (80057b0 <HAL_RCC_OscConfig+0xe38>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	e02a      	b.n	8005804 <HAL_RCC_OscConfig+0xe8c>
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000
 80057b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057b8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80057bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80057c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057c6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	fa93 f2a3 	rbit	r2, r3
 80057d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057d4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057de:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80057e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057ec:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	fa93 f2a3 	rbit	r2, r3
 80057f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057fa:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	4b86      	ldr	r3, [pc, #536]	@ (8005a1c <HAL_RCC_OscConfig+0x10a4>)
 8005802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005804:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005808:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800580c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005810:	6011      	str	r1, [r2, #0]
 8005812:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005816:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	fa92 f1a2 	rbit	r1, r2
 8005820:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005824:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8005828:	6011      	str	r1, [r2, #0]
  return result;
 800582a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800582e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8005832:	6812      	ldr	r2, [r2, #0]
 8005834:	fab2 f282 	clz	r2, r2
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	f042 0220 	orr.w	r2, r2, #32
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	f002 021f 	and.w	r2, r2, #31
 8005844:	2101      	movs	r1, #1
 8005846:	fa01 f202 	lsl.w	r2, r1, r2
 800584a:	4013      	ands	r3, r2
 800584c:	2b00      	cmp	r3, #0
 800584e:	f43f af7f 	beq.w	8005750 <HAL_RCC_OscConfig+0xdd8>
 8005852:	e0dd      	b.n	8005a10 <HAL_RCC_OscConfig+0x1098>
 8005854:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005858:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800585c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005866:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	fa93 f2a3 	rbit	r2, r3
 8005870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005874:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005878:	601a      	str	r2, [r3, #0]
  return result;
 800587a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800587e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005882:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005884:	fab3 f383 	clz	r3, r3
 8005888:	b2db      	uxtb	r3, r3
 800588a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800588e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	461a      	mov	r2, r3
 8005896:	2300      	movs	r3, #0
 8005898:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589a:	f7fd fa29 	bl	8002cf0 <HAL_GetTick>
 800589e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058a2:	e009      	b.n	80058b8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a4:	f7fd fa24 	bl	8002cf0 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e0ac      	b.n	8005a12 <HAL_RCC_OscConfig+0x109a>
 80058b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058bc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80058c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80058c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058ca:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	fa93 f2a3 	rbit	r2, r3
 80058d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058d8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80058dc:	601a      	str	r2, [r3, #0]
  return result;
 80058de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058e2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80058e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058e8:	fab3 f383 	clz	r3, r3
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	f043 0301 	orr.w	r3, r3, #1
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d102      	bne.n	8005902 <HAL_RCC_OscConfig+0xf8a>
 80058fc:	4b47      	ldr	r3, [pc, #284]	@ (8005a1c <HAL_RCC_OscConfig+0x10a4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	e027      	b.n	8005952 <HAL_RCC_OscConfig+0xfda>
 8005902:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005906:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800590a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800590e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005910:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005914:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	fa93 f2a3 	rbit	r2, r3
 800591e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005922:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800592c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005930:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800593a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	fa93 f2a3 	rbit	r2, r3
 8005944:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005948:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	4b33      	ldr	r3, [pc, #204]	@ (8005a1c <HAL_RCC_OscConfig+0x10a4>)
 8005950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005952:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005956:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800595a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800595e:	6011      	str	r1, [r2, #0]
 8005960:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005964:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	fa92 f1a2 	rbit	r1, r2
 800596e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005972:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8005976:	6011      	str	r1, [r2, #0]
  return result;
 8005978:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800597c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	fab2 f282 	clz	r2, r2
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	f042 0220 	orr.w	r2, r2, #32
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	f002 021f 	and.w	r2, r2, #31
 8005992:	2101      	movs	r1, #1
 8005994:	fa01 f202 	lsl.w	r2, r1, r2
 8005998:	4013      	ands	r3, r2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d182      	bne.n	80058a4 <HAL_RCC_OscConfig+0xf2c>
 800599e:	e037      	b.n	8005a10 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e02e      	b.n	8005a12 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059b4:	4b19      	ldr	r3, [pc, #100]	@ (8005a1c <HAL_RCC_OscConfig+0x10a4>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80059bc:	4b17      	ldr	r3, [pc, #92]	@ (8005a1c <HAL_RCC_OscConfig+0x10a4>)
 80059be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80059c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80059c8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80059cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d117      	bne.n	8005a0c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80059dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80059e0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80059e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d10b      	bne.n	8005a0c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80059f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80059f8:	f003 020f 	and.w	r2, r3, #15
 80059fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40021000 	.word	0x40021000

08005a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b09e      	sub	sp, #120	@ 0x78
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e162      	b.n	8005cfe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a38:	4b90      	ldr	r3, [pc, #576]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d910      	bls.n	8005a68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a46:	4b8d      	ldr	r3, [pc, #564]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 0207 	bic.w	r2, r3, #7
 8005a4e:	498b      	ldr	r1, [pc, #556]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a56:	4b89      	ldr	r3, [pc, #548]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d001      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e14a      	b.n	8005cfe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a74:	4b82      	ldr	r3, [pc, #520]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	497f      	ldr	r1, [pc, #508]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80dc 	beq.w	8005c4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d13c      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xf6>
 8005a9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005aa0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005aa4:	fa93 f3a3 	rbit	r3, r3
 8005aa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005aaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aac:	fab3 f383 	clz	r3, r3
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d102      	bne.n	8005ac6 <HAL_RCC_ClockConfig+0xa6>
 8005ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	e00f      	b.n	8005ae6 <HAL_RCC_ClockConfig+0xc6>
 8005ac6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005aca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005acc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ace:	fa93 f3a3 	rbit	r3, r3
 8005ad2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ad4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ad8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ada:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005adc:	fa93 f3a3 	rbit	r3, r3
 8005ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ae2:	4b67      	ldr	r3, [pc, #412]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005aea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005aec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005aee:	fa92 f2a2 	rbit	r2, r2
 8005af2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005af4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005af6:	fab2 f282 	clz	r2, r2
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	f042 0220 	orr.w	r2, r2, #32
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	f002 021f 	and.w	r2, r2, #31
 8005b06:	2101      	movs	r1, #1
 8005b08:	fa01 f202 	lsl.w	r2, r1, r2
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d17b      	bne.n	8005c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e0f3      	b.n	8005cfe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d13c      	bne.n	8005b98 <HAL_RCC_ClockConfig+0x178>
 8005b1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b22:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b26:	fa93 f3a3 	rbit	r3, r3
 8005b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b2e:	fab3 f383 	clz	r3, r3
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	095b      	lsrs	r3, r3, #5
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	f043 0301 	orr.w	r3, r3, #1
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d102      	bne.n	8005b48 <HAL_RCC_ClockConfig+0x128>
 8005b42:	4b4f      	ldr	r3, [pc, #316]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	e00f      	b.n	8005b68 <HAL_RCC_ClockConfig+0x148>
 8005b48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b50:	fa93 f3a3 	rbit	r3, r3
 8005b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b5e:	fa93 f3a3 	rbit	r3, r3
 8005b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b64:	4b46      	ldr	r3, [pc, #280]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b6c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005b6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b70:	fa92 f2a2 	rbit	r2, r2
 8005b74:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005b76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b78:	fab2 f282 	clz	r2, r2
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	f042 0220 	orr.w	r2, r2, #32
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	f002 021f 	and.w	r2, r2, #31
 8005b88:	2101      	movs	r1, #1
 8005b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d13a      	bne.n	8005c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0b2      	b.n	8005cfe <HAL_RCC_ClockConfig+0x2de>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	fa93 f3a3 	rbit	r3, r3
 8005ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba6:	fab3 f383 	clz	r3, r3
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d102      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x1a0>
 8005bba:	4b31      	ldr	r3, [pc, #196]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	e00d      	b.n	8005bdc <HAL_RCC_ClockConfig+0x1bc>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc6:	fa93 f3a3 	rbit	r3, r3
 8005bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bcc:	2302      	movs	r3, #2
 8005bce:	623b      	str	r3, [r7, #32]
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	fa93 f3a3 	rbit	r3, r3
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	4b29      	ldr	r3, [pc, #164]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bdc:	2202      	movs	r2, #2
 8005bde:	61ba      	str	r2, [r7, #24]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	fa92 f2a2 	rbit	r2, r2
 8005be6:	617a      	str	r2, [r7, #20]
  return result;
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	fab2 f282 	clz	r2, r2
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	f042 0220 	orr.w	r2, r2, #32
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	f002 021f 	and.w	r2, r2, #31
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e079      	b.n	8005cfe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f023 0203 	bic.w	r2, r3, #3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	491a      	ldr	r1, [pc, #104]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c1c:	f7fd f868 	bl	8002cf0 <HAL_GetTick>
 8005c20:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c22:	e00a      	b.n	8005c3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c24:	f7fd f864 	bl	8002cf0 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e061      	b.n	8005cfe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3a:	4b11      	ldr	r3, [pc, #68]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f003 020c 	and.w	r2, r3, #12
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d1eb      	bne.n	8005c24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d214      	bcs.n	8005c84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c5a:	4b08      	ldr	r3, [pc, #32]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f023 0207 	bic.w	r2, r3, #7
 8005c62:	4906      	ldr	r1, [pc, #24]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c6a:	4b04      	ldr	r3, [pc, #16]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d005      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e040      	b.n	8005cfe <HAL_RCC_ClockConfig+0x2de>
 8005c7c:	40022000 	.word	0x40022000
 8005c80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c90:	4b1d      	ldr	r3, [pc, #116]	@ (8005d08 <HAL_RCC_ClockConfig+0x2e8>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	491a      	ldr	r1, [pc, #104]	@ (8005d08 <HAL_RCC_ClockConfig+0x2e8>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cae:	4b16      	ldr	r3, [pc, #88]	@ (8005d08 <HAL_RCC_ClockConfig+0x2e8>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	4912      	ldr	r1, [pc, #72]	@ (8005d08 <HAL_RCC_ClockConfig+0x2e8>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005cc2:	f000 f829 	bl	8005d18 <HAL_RCC_GetSysClockFreq>
 8005cc6:	4601      	mov	r1, r0
 8005cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d08 <HAL_RCC_ClockConfig+0x2e8>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cd0:	22f0      	movs	r2, #240	@ 0xf0
 8005cd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	fa92 f2a2 	rbit	r2, r2
 8005cda:	60fa      	str	r2, [r7, #12]
  return result;
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	fab2 f282 	clz	r2, r2
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	40d3      	lsrs	r3, r2
 8005ce6:	4a09      	ldr	r2, [pc, #36]	@ (8005d0c <HAL_RCC_ClockConfig+0x2ec>)
 8005ce8:	5cd3      	ldrb	r3, [r2, r3]
 8005cea:	fa21 f303 	lsr.w	r3, r1, r3
 8005cee:	4a08      	ldr	r2, [pc, #32]	@ (8005d10 <HAL_RCC_ClockConfig+0x2f0>)
 8005cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005cf2:	4b08      	ldr	r3, [pc, #32]	@ (8005d14 <HAL_RCC_ClockConfig+0x2f4>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fc ffb6 	bl	8002c68 <HAL_InitTick>
  
  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3778      	adds	r7, #120	@ 0x78
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	0800cf98 	.word	0x0800cf98
 8005d10:	20000000 	.word	0x20000000
 8005d14:	20000004 	.word	0x20000004

08005d18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	2300      	movs	r3, #0
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005d32:	4b1f      	ldr	r3, [pc, #124]	@ (8005db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 030c 	and.w	r3, r3, #12
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d002      	beq.n	8005d48 <HAL_RCC_GetSysClockFreq+0x30>
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d003      	beq.n	8005d4e <HAL_RCC_GetSysClockFreq+0x36>
 8005d46:	e029      	b.n	8005d9c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d48:	4b1a      	ldr	r3, [pc, #104]	@ (8005db4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d4a:	613b      	str	r3, [r7, #16]
      break;
 8005d4c:	e029      	b.n	8005da2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	0c9b      	lsrs	r3, r3, #18
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	4a18      	ldr	r2, [pc, #96]	@ (8005db8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d58:	5cd3      	ldrb	r3, [r2, r3]
 8005d5a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005d5c:	4b14      	ldr	r3, [pc, #80]	@ (8005db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d60:	f003 030f 	and.w	r3, r3, #15
 8005d64:	4a15      	ldr	r2, [pc, #84]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d66:	5cd3      	ldrb	r3, [r2, r3]
 8005d68:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d74:	4a0f      	ldr	r2, [pc, #60]	@ (8005db4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	fb02 f303 	mul.w	r3, r2, r3
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	e007      	b.n	8005d96 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d86:	4a0b      	ldr	r2, [pc, #44]	@ (8005db4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	fb02 f303 	mul.w	r3, r2, r3
 8005d94:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	613b      	str	r3, [r7, #16]
      break;
 8005d9a:	e002      	b.n	8005da2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d9c:	4b05      	ldr	r3, [pc, #20]	@ (8005db4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d9e:	613b      	str	r3, [r7, #16]
      break;
 8005da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005da2:	693b      	ldr	r3, [r7, #16]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	40021000 	.word	0x40021000
 8005db4:	007a1200 	.word	0x007a1200
 8005db8:	0800cfb0 	.word	0x0800cfb0
 8005dbc:	0800cfc0 	.word	0x0800cfc0

08005dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dc4:	4b03      	ldr	r3, [pc, #12]	@ (8005dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000000 	.word	0x20000000

08005dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005dde:	f7ff ffef 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
 8005de2:	4601      	mov	r1, r0
 8005de4:	4b0b      	ldr	r3, [pc, #44]	@ (8005e14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005dec:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005df0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	fa92 f2a2 	rbit	r2, r2
 8005df8:	603a      	str	r2, [r7, #0]
  return result;
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	fab2 f282 	clz	r2, r2
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	40d3      	lsrs	r3, r2
 8005e04:	4a04      	ldr	r2, [pc, #16]	@ (8005e18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005e06:	5cd3      	ldrb	r3, [r2, r3]
 8005e08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40021000 	.word	0x40021000
 8005e18:	0800cfa8 	.word	0x0800cfa8

08005e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005e22:	f7ff ffcd 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
 8005e26:	4601      	mov	r1, r0
 8005e28:	4b0b      	ldr	r3, [pc, #44]	@ (8005e58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005e30:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005e34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	fa92 f2a2 	rbit	r2, r2
 8005e3c:	603a      	str	r2, [r7, #0]
  return result;
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	fab2 f282 	clz	r2, r2
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	40d3      	lsrs	r3, r2
 8005e48:	4a04      	ldr	r2, [pc, #16]	@ (8005e5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8005e4a:	5cd3      	ldrb	r3, [r2, r3]
 8005e4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005e50:	4618      	mov	r0, r3
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	0800cfa8 	.word	0x0800cfa8

08005e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b092      	sub	sp, #72	@ 0x48
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005e70:	2300      	movs	r3, #0
 8005e72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 80d4 	beq.w	800602c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e84:	4b4e      	ldr	r3, [pc, #312]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10e      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e90:	4b4b      	ldr	r3, [pc, #300]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	4a4a      	ldr	r2, [pc, #296]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e9a:	61d3      	str	r3, [r2, #28]
 8005e9c:	4b48      	ldr	r3, [pc, #288]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ea4:	60bb      	str	r3, [r7, #8]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eae:	4b45      	ldr	r3, [pc, #276]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d118      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eba:	4b42      	ldr	r3, [pc, #264]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a41      	ldr	r2, [pc, #260]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ec6:	f7fc ff13 	bl	8002cf0 <HAL_GetTick>
 8005eca:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ece:	f7fc ff0f 	bl	8002cf0 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b64      	cmp	r3, #100	@ 0x64
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e1d6      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee0:	4b38      	ldr	r3, [pc, #224]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0f0      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005eec:	4b34      	ldr	r3, [pc, #208]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 8084 	beq.w	8006006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d07c      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	fa93 f3a3 	rbit	r3, r3
 8005f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f26:	fab3 f383 	clz	r3, r3
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	4b26      	ldr	r3, [pc, #152]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	461a      	mov	r2, r3
 8005f36:	2301      	movs	r3, #1
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f42:	fa93 f3a3 	rbit	r3, r3
 8005f46:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f4a:	fab3 f383 	clz	r3, r3
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	4b1d      	ldr	r3, [pc, #116]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	461a      	mov	r2, r3
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f5e:	4a18      	ldr	r2, [pc, #96]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f62:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d04b      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f6e:	f7fc febf 	bl	8002cf0 <HAL_GetTick>
 8005f72:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f74:	e00a      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f76:	f7fc febb 	bl	8002cf0 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d901      	bls.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e180      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f92:	fa93 f3a3 	rbit	r3, r3
 8005f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f98:	2302      	movs	r3, #2
 8005f9a:	623b      	str	r3, [r7, #32]
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	fa93 f3a3 	rbit	r3, r3
 8005fa2:	61fb      	str	r3, [r7, #28]
  return result;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa6:	fab3 f383 	clz	r3, r3
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	f043 0302 	orr.w	r3, r3, #2
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d108      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005fba:	4b01      	ldr	r3, [pc, #4]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	e00d      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	40007000 	.word	0x40007000
 8005fc8:	10908100 	.word	0x10908100
 8005fcc:	2302      	movs	r3, #2
 8005fce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	fa93 f3a3 	rbit	r3, r3
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	4b9a      	ldr	r3, [pc, #616]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fdc:	2202      	movs	r2, #2
 8005fde:	613a      	str	r2, [r7, #16]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	fa92 f2a2 	rbit	r2, r2
 8005fe6:	60fa      	str	r2, [r7, #12]
  return result;
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	fab2 f282 	clz	r2, r2
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	f002 021f 	and.w	r2, r2, #31
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8006000:	4013      	ands	r3, r2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0b7      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006006:	4b8f      	ldr	r3, [pc, #572]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	498c      	ldr	r1, [pc, #560]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006014:	4313      	orrs	r3, r2
 8006016:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006018:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800601c:	2b01      	cmp	r3, #1
 800601e:	d105      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006020:	4b88      	ldr	r3, [pc, #544]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	4a87      	ldr	r2, [pc, #540]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006026:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800602a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	d008      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006038:	4b82      	ldr	r3, [pc, #520]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800603a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603c:	f023 0203 	bic.w	r2, r3, #3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	497f      	ldr	r1, [pc, #508]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006046:	4313      	orrs	r3, r2
 8006048:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d008      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006056:	4b7b      	ldr	r3, [pc, #492]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	4978      	ldr	r1, [pc, #480]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006064:	4313      	orrs	r3, r2
 8006066:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006074:	4b73      	ldr	r3, [pc, #460]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006078:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	4970      	ldr	r1, [pc, #448]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006082:	4313      	orrs	r3, r2
 8006084:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d008      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006092:	4b6c      	ldr	r3, [pc, #432]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006096:	f023 0210 	bic.w	r2, r3, #16
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	4969      	ldr	r1, [pc, #420]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80060b0:	4b64      	ldr	r3, [pc, #400]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060bc:	4961      	ldr	r1, [pc, #388]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d008      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060ce:	4b5d      	ldr	r3, [pc, #372]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d2:	f023 0220 	bic.w	r2, r3, #32
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	495a      	ldr	r1, [pc, #360]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060ec:	4b55      	ldr	r3, [pc, #340]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f8:	4952      	ldr	r1, [pc, #328]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d008      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800610a:	4b4e      	ldr	r3, [pc, #312]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800610c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	494b      	ldr	r1, [pc, #300]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006118:	4313      	orrs	r3, r2
 800611a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	d008      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006128:	4b46      	ldr	r3, [pc, #280]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800612a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	4943      	ldr	r1, [pc, #268]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006136:	4313      	orrs	r3, r2
 8006138:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006142:	2b00      	cmp	r3, #0
 8006144:	d008      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006146:	4b3f      	ldr	r3, [pc, #252]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006152:	493c      	ldr	r1, [pc, #240]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006154:	4313      	orrs	r3, r2
 8006156:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006164:	4b37      	ldr	r3, [pc, #220]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006168:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006170:	4934      	ldr	r1, [pc, #208]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006172:	4313      	orrs	r3, r2
 8006174:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800617e:	2b00      	cmp	r3, #0
 8006180:	d008      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006182:	4b30      	ldr	r3, [pc, #192]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006186:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618e:	492d      	ldr	r1, [pc, #180]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006190:	4313      	orrs	r3, r2
 8006192:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80061a0:	4b28      	ldr	r3, [pc, #160]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ac:	4925      	ldr	r1, [pc, #148]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d008      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80061be:	4b21      	ldr	r3, [pc, #132]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ca:	491e      	ldr	r1, [pc, #120]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80061dc:	4b19      	ldr	r3, [pc, #100]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e8:	4916      	ldr	r1, [pc, #88]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d008      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80061fa:	4b12      	ldr	r3, [pc, #72]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006206:	490f      	ldr	r1, [pc, #60]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006208:	4313      	orrs	r3, r2
 800620a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006218:	4b0a      	ldr	r3, [pc, #40]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800621a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006224:	4907      	ldr	r1, [pc, #28]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006226:	4313      	orrs	r3, r2
 8006228:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00c      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006236:	4b03      	ldr	r3, [pc, #12]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	e002      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006242:	bf00      	nop
 8006244:	40021000 	.word	0x40021000
 8006248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800624a:	4913      	ldr	r1, [pc, #76]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800624c:	4313      	orrs	r3, r2
 800624e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d008      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800625c:	4b0e      	ldr	r3, [pc, #56]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800625e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006260:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006268:	490b      	ldr	r1, [pc, #44]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800626a:	4313      	orrs	r3, r2
 800626c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d008      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800627a:	4b07      	ldr	r3, [pc, #28]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800627c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800627e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006286:	4904      	ldr	r1, [pc, #16]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006288:	4313      	orrs	r3, r2
 800628a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3748      	adds	r7, #72	@ 0x48
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	40021000 	.word	0x40021000

0800629c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e073      	b.n	800639a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	7f5b      	ldrb	r3, [r3, #29]
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d105      	bne.n	80062c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fc f8e8 	bl	8002498 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d055      	beq.n	8006388 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	22ca      	movs	r2, #202	@ 0xca
 80062e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2253      	movs	r2, #83	@ 0x53
 80062ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f87f 	bl	80063f0 <RTC_EnterInitMode>
 80062f2:	4603      	mov	r3, r0
 80062f4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d12c      	bne.n	8006356 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800630a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800630e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6899      	ldr	r1, [r3, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	68d2      	ldr	r2, [r2, #12]
 8006336:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6919      	ldr	r1, [r3, #16]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	041a      	lsls	r2, r3, #16
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f886 	bl	800645e <RTC_ExitInitMode>
 8006352:	4603      	mov	r3, r0
 8006354:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d110      	bne.n	800637e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800636a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	22ff      	movs	r2, #255	@ 0xff
 8006384:	625a      	str	r2, [r3, #36]	@ 0x24
 8006386:	e001      	b.n	800638c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d102      	bne.n	8006398 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a0d      	ldr	r2, [pc, #52]	@ (80063ec <HAL_RTC_WaitForSynchro+0x48>)
 80063b6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063b8:	f7fc fc9a 	bl	8002cf0 <HAL_GetTick>
 80063bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063be:	e009      	b.n	80063d4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063c0:	f7fc fc96 	bl	8002cf0 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063ce:	d901      	bls.n	80063d4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e007      	b.n	80063e4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0ee      	beq.n	80063c0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	0001ff5f 	.word	0x0001ff5f

080063f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800640a:	2b00      	cmp	r3, #0
 800640c:	d122      	bne.n	8006454 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800641c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800641e:	f7fc fc67 	bl	8002cf0 <HAL_GetTick>
 8006422:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006424:	e00c      	b.n	8006440 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006426:	f7fc fc63 	bl	8002cf0 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006434:	d904      	bls.n	8006440 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2204      	movs	r2, #4
 800643a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d102      	bne.n	8006454 <RTC_EnterInitMode+0x64>
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d1e8      	bne.n	8006426 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006478:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7ff ff8b 	bl	80063a4 <HAL_RTC_WaitForSynchro>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d004      	beq.n	800649e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2204      	movs	r2, #4
 8006498:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800649e:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e049      	b.n	800654e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7fc f942 	bl	8002758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f000 fd7c 	bl	8006fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b01      	cmp	r3, #1
 800656a:	d001      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e04f      	b.n	8006610 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a23      	ldr	r2, [pc, #140]	@ (800661c <HAL_TIM_Base_Start_IT+0xc4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01d      	beq.n	80065ce <HAL_TIM_Base_Start_IT+0x76>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800659a:	d018      	beq.n	80065ce <HAL_TIM_Base_Start_IT+0x76>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006620 <HAL_TIM_Base_Start_IT+0xc8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <HAL_TIM_Base_Start_IT+0x76>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006624 <HAL_TIM_Base_Start_IT+0xcc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00e      	beq.n	80065ce <HAL_TIM_Base_Start_IT+0x76>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006628 <HAL_TIM_Base_Start_IT+0xd0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d009      	beq.n	80065ce <HAL_TIM_Base_Start_IT+0x76>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1b      	ldr	r2, [pc, #108]	@ (800662c <HAL_TIM_Base_Start_IT+0xd4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <HAL_TIM_Base_Start_IT+0x76>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a19      	ldr	r2, [pc, #100]	@ (8006630 <HAL_TIM_Base_Start_IT+0xd8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d115      	bne.n	80065fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	4b17      	ldr	r3, [pc, #92]	@ (8006634 <HAL_TIM_Base_Start_IT+0xdc>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b06      	cmp	r3, #6
 80065de:	d015      	beq.n	800660c <HAL_TIM_Base_Start_IT+0xb4>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e6:	d011      	beq.n	800660c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0201 	orr.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f8:	e008      	b.n	800660c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0201 	orr.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	e000      	b.n	800660e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	40012c00 	.word	0x40012c00
 8006620:	40000400 	.word	0x40000400
 8006624:	40000800 	.word	0x40000800
 8006628:	40013400 	.word	0x40013400
 800662c:	40014000 	.word	0x40014000
 8006630:	40015000 	.word	0x40015000
 8006634:	00010007 	.word	0x00010007

08006638 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e049      	b.n	80066de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d106      	bne.n	8006664 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7fc f85c 	bl	800271c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3304      	adds	r3, #4
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f000 fcb4 	bl	8006fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d109      	bne.n	800670c <HAL_TIM_PWM_Start+0x24>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b01      	cmp	r3, #1
 8006702:	bf14      	ite	ne
 8006704:	2301      	movne	r3, #1
 8006706:	2300      	moveq	r3, #0
 8006708:	b2db      	uxtb	r3, r3
 800670a:	e03c      	b.n	8006786 <HAL_TIM_PWM_Start+0x9e>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b04      	cmp	r3, #4
 8006710:	d109      	bne.n	8006726 <HAL_TIM_PWM_Start+0x3e>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b01      	cmp	r3, #1
 800671c:	bf14      	ite	ne
 800671e:	2301      	movne	r3, #1
 8006720:	2300      	moveq	r3, #0
 8006722:	b2db      	uxtb	r3, r3
 8006724:	e02f      	b.n	8006786 <HAL_TIM_PWM_Start+0x9e>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b08      	cmp	r3, #8
 800672a:	d109      	bne.n	8006740 <HAL_TIM_PWM_Start+0x58>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b01      	cmp	r3, #1
 8006736:	bf14      	ite	ne
 8006738:	2301      	movne	r3, #1
 800673a:	2300      	moveq	r3, #0
 800673c:	b2db      	uxtb	r3, r3
 800673e:	e022      	b.n	8006786 <HAL_TIM_PWM_Start+0x9e>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b0c      	cmp	r3, #12
 8006744:	d109      	bne.n	800675a <HAL_TIM_PWM_Start+0x72>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b01      	cmp	r3, #1
 8006750:	bf14      	ite	ne
 8006752:	2301      	movne	r3, #1
 8006754:	2300      	moveq	r3, #0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	e015      	b.n	8006786 <HAL_TIM_PWM_Start+0x9e>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b10      	cmp	r3, #16
 800675e:	d109      	bne.n	8006774 <HAL_TIM_PWM_Start+0x8c>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b01      	cmp	r3, #1
 800676a:	bf14      	ite	ne
 800676c:	2301      	movne	r3, #1
 800676e:	2300      	moveq	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	e008      	b.n	8006786 <HAL_TIM_PWM_Start+0x9e>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b01      	cmp	r3, #1
 800677e:	bf14      	ite	ne
 8006780:	2301      	movne	r3, #1
 8006782:	2300      	moveq	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e0a1      	b.n	80068d2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d104      	bne.n	800679e <HAL_TIM_PWM_Start+0xb6>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800679c:	e023      	b.n	80067e6 <HAL_TIM_PWM_Start+0xfe>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d104      	bne.n	80067ae <HAL_TIM_PWM_Start+0xc6>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067ac:	e01b      	b.n	80067e6 <HAL_TIM_PWM_Start+0xfe>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d104      	bne.n	80067be <HAL_TIM_PWM_Start+0xd6>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067bc:	e013      	b.n	80067e6 <HAL_TIM_PWM_Start+0xfe>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b0c      	cmp	r3, #12
 80067c2:	d104      	bne.n	80067ce <HAL_TIM_PWM_Start+0xe6>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067cc:	e00b      	b.n	80067e6 <HAL_TIM_PWM_Start+0xfe>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b10      	cmp	r3, #16
 80067d2:	d104      	bne.n	80067de <HAL_TIM_PWM_Start+0xf6>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067dc:	e003      	b.n	80067e6 <HAL_TIM_PWM_Start+0xfe>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2201      	movs	r2, #1
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 ffa8 	bl	8007744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a38      	ldr	r2, [pc, #224]	@ (80068dc <HAL_TIM_PWM_Start+0x1f4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d018      	beq.n	8006830 <HAL_TIM_PWM_Start+0x148>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a37      	ldr	r2, [pc, #220]	@ (80068e0 <HAL_TIM_PWM_Start+0x1f8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d013      	beq.n	8006830 <HAL_TIM_PWM_Start+0x148>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a35      	ldr	r2, [pc, #212]	@ (80068e4 <HAL_TIM_PWM_Start+0x1fc>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00e      	beq.n	8006830 <HAL_TIM_PWM_Start+0x148>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a34      	ldr	r2, [pc, #208]	@ (80068e8 <HAL_TIM_PWM_Start+0x200>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d009      	beq.n	8006830 <HAL_TIM_PWM_Start+0x148>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a32      	ldr	r2, [pc, #200]	@ (80068ec <HAL_TIM_PWM_Start+0x204>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d004      	beq.n	8006830 <HAL_TIM_PWM_Start+0x148>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a31      	ldr	r2, [pc, #196]	@ (80068f0 <HAL_TIM_PWM_Start+0x208>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d101      	bne.n	8006834 <HAL_TIM_PWM_Start+0x14c>
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <HAL_TIM_PWM_Start+0x14e>
 8006834:	2300      	movs	r3, #0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d007      	beq.n	800684a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006848:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a23      	ldr	r2, [pc, #140]	@ (80068dc <HAL_TIM_PWM_Start+0x1f4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d01d      	beq.n	8006890 <HAL_TIM_PWM_Start+0x1a8>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800685c:	d018      	beq.n	8006890 <HAL_TIM_PWM_Start+0x1a8>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a24      	ldr	r2, [pc, #144]	@ (80068f4 <HAL_TIM_PWM_Start+0x20c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <HAL_TIM_PWM_Start+0x1a8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a22      	ldr	r2, [pc, #136]	@ (80068f8 <HAL_TIM_PWM_Start+0x210>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00e      	beq.n	8006890 <HAL_TIM_PWM_Start+0x1a8>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a1a      	ldr	r2, [pc, #104]	@ (80068e0 <HAL_TIM_PWM_Start+0x1f8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d009      	beq.n	8006890 <HAL_TIM_PWM_Start+0x1a8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a18      	ldr	r2, [pc, #96]	@ (80068e4 <HAL_TIM_PWM_Start+0x1fc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d004      	beq.n	8006890 <HAL_TIM_PWM_Start+0x1a8>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a19      	ldr	r2, [pc, #100]	@ (80068f0 <HAL_TIM_PWM_Start+0x208>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d115      	bne.n	80068bc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	4b19      	ldr	r3, [pc, #100]	@ (80068fc <HAL_TIM_PWM_Start+0x214>)
 8006898:	4013      	ands	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2b06      	cmp	r3, #6
 80068a0:	d015      	beq.n	80068ce <HAL_TIM_PWM_Start+0x1e6>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a8:	d011      	beq.n	80068ce <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0201 	orr.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ba:	e008      	b.n	80068ce <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0201 	orr.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	e000      	b.n	80068d0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	40012c00 	.word	0x40012c00
 80068e0:	40013400 	.word	0x40013400
 80068e4:	40014000 	.word	0x40014000
 80068e8:	40014400 	.word	0x40014400
 80068ec:	40014800 	.word	0x40014800
 80068f0:	40015000 	.word	0x40015000
 80068f4:	40000400 	.word	0x40000400
 80068f8:	40000800 	.word	0x40000800
 80068fc:	00010007 	.word	0x00010007

08006900 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e097      	b.n	8006a44 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d106      	bne.n	800692e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7fb fddb 	bl	80024e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2202      	movs	r2, #2
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6812      	ldr	r2, [r2, #0]
 8006940:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006944:	f023 0307 	bic.w	r3, r3, #7
 8006948:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3304      	adds	r3, #4
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f000 fb45 	bl	8006fe4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006982:	f023 0303 	bic.w	r3, r3, #3
 8006986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	021b      	lsls	r3, r3, #8
 8006992:	4313      	orrs	r3, r2
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80069a0:	f023 030c 	bic.w	r3, r3, #12
 80069a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	021b      	lsls	r3, r3, #8
 80069bc:	4313      	orrs	r3, r2
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	011a      	lsls	r2, r3, #4
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	031b      	lsls	r3, r3, #12
 80069d0:	4313      	orrs	r3, r2
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80069de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80069e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	4313      	orrs	r3, r2
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d110      	bne.n	8006a9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d102      	bne.n	8006a88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a82:	7b7b      	ldrb	r3, [r7, #13]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d001      	beq.n	8006a8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e069      	b.n	8006b60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a9c:	e031      	b.n	8006b02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b04      	cmp	r3, #4
 8006aa2:	d110      	bne.n	8006ac6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d102      	bne.n	8006ab0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006aaa:	7b3b      	ldrb	r3, [r7, #12]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d001      	beq.n	8006ab4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e055      	b.n	8006b60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ac4:	e01d      	b.n	8006b02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d108      	bne.n	8006ade <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006acc:	7bbb      	ldrb	r3, [r7, #14]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d105      	bne.n	8006ade <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ad2:	7b7b      	ldrb	r3, [r7, #13]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d102      	bne.n	8006ade <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ad8:	7b3b      	ldrb	r3, [r7, #12]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d001      	beq.n	8006ae2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e03e      	b.n	8006b60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2202      	movs	r2, #2
 8006aee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2202      	movs	r2, #2
 8006af6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2202      	movs	r2, #2
 8006afe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <HAL_TIM_Encoder_Start+0xc4>
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d008      	beq.n	8006b20 <HAL_TIM_Encoder_Start+0xd4>
 8006b0e:	e00f      	b.n	8006b30 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2201      	movs	r2, #1
 8006b16:	2100      	movs	r1, #0
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fe13 	bl	8007744 <TIM_CCxChannelCmd>
      break;
 8006b1e:	e016      	b.n	8006b4e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2201      	movs	r2, #1
 8006b26:	2104      	movs	r1, #4
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fe0b 	bl	8007744 <TIM_CCxChannelCmd>
      break;
 8006b2e:	e00e      	b.n	8006b4e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2201      	movs	r2, #1
 8006b36:	2100      	movs	r1, #0
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 fe03 	bl	8007744 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2201      	movs	r2, #1
 8006b44:	2104      	movs	r1, #4
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fdfc 	bl	8007744 <TIM_CCxChannelCmd>
      break;
 8006b4c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0201 	orr.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d020      	beq.n	8006bcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f003 0302 	and.w	r3, r3, #2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01b      	beq.n	8006bcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0202 	mvn.w	r2, #2
 8006b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f9f8 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 8006bb8:	e005      	b.n	8006bc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f9ea 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f9fb 	bl	8006fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f003 0304 	and.w	r3, r3, #4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d020      	beq.n	8006c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01b      	beq.n	8006c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0204 	mvn.w	r2, #4
 8006be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2202      	movs	r2, #2
 8006bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f9d2 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 8006c04:	e005      	b.n	8006c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f9c4 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f9d5 	bl	8006fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d020      	beq.n	8006c64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01b      	beq.n	8006c64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f06f 0208 	mvn.w	r2, #8
 8006c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2204      	movs	r2, #4
 8006c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	f003 0303 	and.w	r3, r3, #3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f9ac 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 8006c50:	e005      	b.n	8006c5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f99e 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f9af 	bl	8006fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 0310 	and.w	r3, r3, #16
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d020      	beq.n	8006cb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f003 0310 	and.w	r3, r3, #16
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d01b      	beq.n	8006cb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0210 	mvn.w	r2, #16
 8006c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2208      	movs	r2, #8
 8006c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f986 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 8006c9c:	e005      	b.n	8006caa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f978 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f989 	bl	8006fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00c      	beq.n	8006cd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d007      	beq.n	8006cd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f06f 0201 	mvn.w	r2, #1
 8006ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fa fdda 	bl	8001888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00c      	beq.n	8006cf8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d007      	beq.n	8006cf8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fde2 	bl	80078bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00c      	beq.n	8006d1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d007      	beq.n	8006d1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fdda 	bl	80078d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00c      	beq.n	8006d40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d007      	beq.n	8006d40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f948 	bl	8006fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00c      	beq.n	8006d64 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d007      	beq.n	8006d64 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f06f 0220 	mvn.w	r2, #32
 8006d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fda2 	bl	80078a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d101      	bne.n	8006d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d86:	2302      	movs	r3, #2
 8006d88:	e0ff      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b14      	cmp	r3, #20
 8006d96:	f200 80f0 	bhi.w	8006f7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006df5 	.word	0x08006df5
 8006da4:	08006f7b 	.word	0x08006f7b
 8006da8:	08006f7b 	.word	0x08006f7b
 8006dac:	08006f7b 	.word	0x08006f7b
 8006db0:	08006e35 	.word	0x08006e35
 8006db4:	08006f7b 	.word	0x08006f7b
 8006db8:	08006f7b 	.word	0x08006f7b
 8006dbc:	08006f7b 	.word	0x08006f7b
 8006dc0:	08006e77 	.word	0x08006e77
 8006dc4:	08006f7b 	.word	0x08006f7b
 8006dc8:	08006f7b 	.word	0x08006f7b
 8006dcc:	08006f7b 	.word	0x08006f7b
 8006dd0:	08006eb7 	.word	0x08006eb7
 8006dd4:	08006f7b 	.word	0x08006f7b
 8006dd8:	08006f7b 	.word	0x08006f7b
 8006ddc:	08006f7b 	.word	0x08006f7b
 8006de0:	08006ef9 	.word	0x08006ef9
 8006de4:	08006f7b 	.word	0x08006f7b
 8006de8:	08006f7b 	.word	0x08006f7b
 8006dec:	08006f7b 	.word	0x08006f7b
 8006df0:	08006f39 	.word	0x08006f39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 f99c 	bl	8007138 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0208 	orr.w	r2, r2, #8
 8006e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0204 	bic.w	r2, r2, #4
 8006e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6999      	ldr	r1, [r3, #24]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	691a      	ldr	r2, [r3, #16]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	619a      	str	r2, [r3, #24]
      break;
 8006e32:	e0a5      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fa16 	bl	800726c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6999      	ldr	r1, [r3, #24]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	021a      	lsls	r2, r3, #8
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	619a      	str	r2, [r3, #24]
      break;
 8006e74:	e084      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fa89 	bl	8007394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69da      	ldr	r2, [r3, #28]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0208 	orr.w	r2, r2, #8
 8006e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0204 	bic.w	r2, r2, #4
 8006ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69d9      	ldr	r1, [r3, #28]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	61da      	str	r2, [r3, #28]
      break;
 8006eb4:	e064      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 fafb 	bl	80074b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69da      	ldr	r2, [r3, #28]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69da      	ldr	r2, [r3, #28]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69d9      	ldr	r1, [r3, #28]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	021a      	lsls	r2, r3, #8
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	61da      	str	r2, [r3, #28]
      break;
 8006ef6:	e043      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fb4a 	bl	8007598 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0208 	orr.w	r2, r2, #8
 8006f12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0204 	bic.w	r2, r2, #4
 8006f22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	691a      	ldr	r2, [r3, #16]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006f36:	e023      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68b9      	ldr	r1, [r7, #8]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fb94 	bl	800766c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	021a      	lsls	r2, r3, #8
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006f78:	e002      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop

08006f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a48      	ldr	r2, [pc, #288]	@ (8007118 <TIM_Base_SetConfig+0x134>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d013      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007002:	d00f      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a45      	ldr	r2, [pc, #276]	@ (800711c <TIM_Base_SetConfig+0x138>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00b      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a44      	ldr	r2, [pc, #272]	@ (8007120 <TIM_Base_SetConfig+0x13c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d007      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a43      	ldr	r2, [pc, #268]	@ (8007124 <TIM_Base_SetConfig+0x140>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d003      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a42      	ldr	r2, [pc, #264]	@ (8007128 <TIM_Base_SetConfig+0x144>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d108      	bne.n	8007036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800702a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a37      	ldr	r2, [pc, #220]	@ (8007118 <TIM_Base_SetConfig+0x134>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d01f      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007044:	d01b      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a34      	ldr	r2, [pc, #208]	@ (800711c <TIM_Base_SetConfig+0x138>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d017      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a33      	ldr	r2, [pc, #204]	@ (8007120 <TIM_Base_SetConfig+0x13c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d013      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a32      	ldr	r2, [pc, #200]	@ (8007124 <TIM_Base_SetConfig+0x140>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d00f      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a32      	ldr	r2, [pc, #200]	@ (800712c <TIM_Base_SetConfig+0x148>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00b      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a31      	ldr	r2, [pc, #196]	@ (8007130 <TIM_Base_SetConfig+0x14c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d007      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a30      	ldr	r2, [pc, #192]	@ (8007134 <TIM_Base_SetConfig+0x150>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d003      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a2b      	ldr	r2, [pc, #172]	@ (8007128 <TIM_Base_SetConfig+0x144>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d108      	bne.n	8007090 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4313      	orrs	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a18      	ldr	r2, [pc, #96]	@ (8007118 <TIM_Base_SetConfig+0x134>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d013      	beq.n	80070e4 <TIM_Base_SetConfig+0x100>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a19      	ldr	r2, [pc, #100]	@ (8007124 <TIM_Base_SetConfig+0x140>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d00f      	beq.n	80070e4 <TIM_Base_SetConfig+0x100>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a19      	ldr	r2, [pc, #100]	@ (800712c <TIM_Base_SetConfig+0x148>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00b      	beq.n	80070e4 <TIM_Base_SetConfig+0x100>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a18      	ldr	r2, [pc, #96]	@ (8007130 <TIM_Base_SetConfig+0x14c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d007      	beq.n	80070e4 <TIM_Base_SetConfig+0x100>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a17      	ldr	r2, [pc, #92]	@ (8007134 <TIM_Base_SetConfig+0x150>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d003      	beq.n	80070e4 <TIM_Base_SetConfig+0x100>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a12      	ldr	r2, [pc, #72]	@ (8007128 <TIM_Base_SetConfig+0x144>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d103      	bne.n	80070ec <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	691a      	ldr	r2, [r3, #16]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d105      	bne.n	800710a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f023 0201 	bic.w	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	611a      	str	r2, [r3, #16]
  }
}
 800710a:	bf00      	nop
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	40012c00 	.word	0x40012c00
 800711c:	40000400 	.word	0x40000400
 8007120:	40000800 	.word	0x40000800
 8007124:	40013400 	.word	0x40013400
 8007128:	40015000 	.word	0x40015000
 800712c:	40014000 	.word	0x40014000
 8007130:	40014400 	.word	0x40014400
 8007134:	40014800 	.word	0x40014800

08007138 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f023 0201 	bic.w	r2, r3, #1
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800716a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0303 	bic.w	r3, r3, #3
 8007172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f023 0302 	bic.w	r3, r3, #2
 8007184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a30      	ldr	r2, [pc, #192]	@ (8007254 <TIM_OC1_SetConfig+0x11c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d013      	beq.n	80071c0 <TIM_OC1_SetConfig+0x88>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a2f      	ldr	r2, [pc, #188]	@ (8007258 <TIM_OC1_SetConfig+0x120>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00f      	beq.n	80071c0 <TIM_OC1_SetConfig+0x88>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a2e      	ldr	r2, [pc, #184]	@ (800725c <TIM_OC1_SetConfig+0x124>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00b      	beq.n	80071c0 <TIM_OC1_SetConfig+0x88>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a2d      	ldr	r2, [pc, #180]	@ (8007260 <TIM_OC1_SetConfig+0x128>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d007      	beq.n	80071c0 <TIM_OC1_SetConfig+0x88>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a2c      	ldr	r2, [pc, #176]	@ (8007264 <TIM_OC1_SetConfig+0x12c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <TIM_OC1_SetConfig+0x88>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a2b      	ldr	r2, [pc, #172]	@ (8007268 <TIM_OC1_SetConfig+0x130>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d10c      	bne.n	80071da <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f023 0308 	bic.w	r3, r3, #8
 80071c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f023 0304 	bic.w	r3, r3, #4
 80071d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007254 <TIM_OC1_SetConfig+0x11c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d013      	beq.n	800720a <TIM_OC1_SetConfig+0xd2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007258 <TIM_OC1_SetConfig+0x120>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00f      	beq.n	800720a <TIM_OC1_SetConfig+0xd2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a1b      	ldr	r2, [pc, #108]	@ (800725c <TIM_OC1_SetConfig+0x124>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00b      	beq.n	800720a <TIM_OC1_SetConfig+0xd2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007260 <TIM_OC1_SetConfig+0x128>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d007      	beq.n	800720a <TIM_OC1_SetConfig+0xd2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a19      	ldr	r2, [pc, #100]	@ (8007264 <TIM_OC1_SetConfig+0x12c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d003      	beq.n	800720a <TIM_OC1_SetConfig+0xd2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a18      	ldr	r2, [pc, #96]	@ (8007268 <TIM_OC1_SetConfig+0x130>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d111      	bne.n	800722e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	621a      	str	r2, [r3, #32]
}
 8007248:	bf00      	nop
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	40012c00 	.word	0x40012c00
 8007258:	40013400 	.word	0x40013400
 800725c:	40014000 	.word	0x40014000
 8007260:	40014400 	.word	0x40014400
 8007264:	40014800 	.word	0x40014800
 8007268:	40015000 	.word	0x40015000

0800726c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	f023 0210 	bic.w	r2, r3, #16
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800729a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800729e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f023 0320 	bic.w	r3, r3, #32
 80072ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a2c      	ldr	r2, [pc, #176]	@ (800737c <TIM_OC2_SetConfig+0x110>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_OC2_SetConfig+0x74>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007380 <TIM_OC2_SetConfig+0x114>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC2_SetConfig+0x74>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a2a      	ldr	r2, [pc, #168]	@ (8007384 <TIM_OC2_SetConfig+0x118>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d10d      	bne.n	80072fc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a1f      	ldr	r2, [pc, #124]	@ (800737c <TIM_OC2_SetConfig+0x110>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d013      	beq.n	800732c <TIM_OC2_SetConfig+0xc0>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a1e      	ldr	r2, [pc, #120]	@ (8007380 <TIM_OC2_SetConfig+0x114>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00f      	beq.n	800732c <TIM_OC2_SetConfig+0xc0>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a1e      	ldr	r2, [pc, #120]	@ (8007388 <TIM_OC2_SetConfig+0x11c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00b      	beq.n	800732c <TIM_OC2_SetConfig+0xc0>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a1d      	ldr	r2, [pc, #116]	@ (800738c <TIM_OC2_SetConfig+0x120>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d007      	beq.n	800732c <TIM_OC2_SetConfig+0xc0>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a1c      	ldr	r2, [pc, #112]	@ (8007390 <TIM_OC2_SetConfig+0x124>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_OC2_SetConfig+0xc0>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a17      	ldr	r2, [pc, #92]	@ (8007384 <TIM_OC2_SetConfig+0x118>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d113      	bne.n	8007354 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007332:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800733a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40012c00 	.word	0x40012c00
 8007380:	40013400 	.word	0x40013400
 8007384:	40015000 	.word	0x40015000
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800

08007394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0303 	bic.w	r3, r3, #3
 80073ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a2b      	ldr	r2, [pc, #172]	@ (80074a0 <TIM_OC3_SetConfig+0x10c>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d007      	beq.n	8007406 <TIM_OC3_SetConfig+0x72>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a2a      	ldr	r2, [pc, #168]	@ (80074a4 <TIM_OC3_SetConfig+0x110>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d003      	beq.n	8007406 <TIM_OC3_SetConfig+0x72>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a29      	ldr	r2, [pc, #164]	@ (80074a8 <TIM_OC3_SetConfig+0x114>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d10d      	bne.n	8007422 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800740c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007420:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1e      	ldr	r2, [pc, #120]	@ (80074a0 <TIM_OC3_SetConfig+0x10c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <TIM_OC3_SetConfig+0xbe>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1d      	ldr	r2, [pc, #116]	@ (80074a4 <TIM_OC3_SetConfig+0x110>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d00f      	beq.n	8007452 <TIM_OC3_SetConfig+0xbe>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a1d      	ldr	r2, [pc, #116]	@ (80074ac <TIM_OC3_SetConfig+0x118>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00b      	beq.n	8007452 <TIM_OC3_SetConfig+0xbe>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a1c      	ldr	r2, [pc, #112]	@ (80074b0 <TIM_OC3_SetConfig+0x11c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d007      	beq.n	8007452 <TIM_OC3_SetConfig+0xbe>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a1b      	ldr	r2, [pc, #108]	@ (80074b4 <TIM_OC3_SetConfig+0x120>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <TIM_OC3_SetConfig+0xbe>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a16      	ldr	r2, [pc, #88]	@ (80074a8 <TIM_OC3_SetConfig+0x114>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d113      	bne.n	800747a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	011b      	lsls	r3, r3, #4
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	4313      	orrs	r3, r2
 8007478:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	621a      	str	r2, [r3, #32]
}
 8007494:	bf00      	nop
 8007496:	371c      	adds	r7, #28
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	40012c00 	.word	0x40012c00
 80074a4:	40013400 	.word	0x40013400
 80074a8:	40015000 	.word	0x40015000
 80074ac:	40014000 	.word	0x40014000
 80074b0:	40014400 	.word	0x40014400
 80074b4:	40014800 	.word	0x40014800

080074b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	021b      	lsls	r3, r3, #8
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	031b      	lsls	r3, r3, #12
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	4313      	orrs	r3, r2
 8007512:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a1a      	ldr	r2, [pc, #104]	@ (8007580 <TIM_OC4_SetConfig+0xc8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d013      	beq.n	8007544 <TIM_OC4_SetConfig+0x8c>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a19      	ldr	r2, [pc, #100]	@ (8007584 <TIM_OC4_SetConfig+0xcc>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00f      	beq.n	8007544 <TIM_OC4_SetConfig+0x8c>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a18      	ldr	r2, [pc, #96]	@ (8007588 <TIM_OC4_SetConfig+0xd0>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d00b      	beq.n	8007544 <TIM_OC4_SetConfig+0x8c>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a17      	ldr	r2, [pc, #92]	@ (800758c <TIM_OC4_SetConfig+0xd4>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d007      	beq.n	8007544 <TIM_OC4_SetConfig+0x8c>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a16      	ldr	r2, [pc, #88]	@ (8007590 <TIM_OC4_SetConfig+0xd8>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d003      	beq.n	8007544 <TIM_OC4_SetConfig+0x8c>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a15      	ldr	r2, [pc, #84]	@ (8007594 <TIM_OC4_SetConfig+0xdc>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d109      	bne.n	8007558 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800754a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	019b      	lsls	r3, r3, #6
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	4313      	orrs	r3, r2
 8007556:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	621a      	str	r2, [r3, #32]
}
 8007572:	bf00      	nop
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40012c00 	.word	0x40012c00
 8007584:	40013400 	.word	0x40013400
 8007588:	40014000 	.word	0x40014000
 800758c:	40014400 	.word	0x40014400
 8007590:	40014800 	.word	0x40014800
 8007594:	40015000 	.word	0x40015000

08007598 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80075dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	041b      	lsls	r3, r3, #16
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a19      	ldr	r2, [pc, #100]	@ (8007654 <TIM_OC5_SetConfig+0xbc>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d013      	beq.n	800761a <TIM_OC5_SetConfig+0x82>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a18      	ldr	r2, [pc, #96]	@ (8007658 <TIM_OC5_SetConfig+0xc0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00f      	beq.n	800761a <TIM_OC5_SetConfig+0x82>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a17      	ldr	r2, [pc, #92]	@ (800765c <TIM_OC5_SetConfig+0xc4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00b      	beq.n	800761a <TIM_OC5_SetConfig+0x82>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a16      	ldr	r2, [pc, #88]	@ (8007660 <TIM_OC5_SetConfig+0xc8>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d007      	beq.n	800761a <TIM_OC5_SetConfig+0x82>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a15      	ldr	r2, [pc, #84]	@ (8007664 <TIM_OC5_SetConfig+0xcc>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d003      	beq.n	800761a <TIM_OC5_SetConfig+0x82>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a14      	ldr	r2, [pc, #80]	@ (8007668 <TIM_OC5_SetConfig+0xd0>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d109      	bne.n	800762e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007620:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	021b      	lsls	r3, r3, #8
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	4313      	orrs	r3, r2
 800762c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	621a      	str	r2, [r3, #32]
}
 8007648:	bf00      	nop
 800764a:	371c      	adds	r7, #28
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	40012c00 	.word	0x40012c00
 8007658:	40013400 	.word	0x40013400
 800765c:	40014000 	.word	0x40014000
 8007660:	40014400 	.word	0x40014400
 8007664:	40014800 	.word	0x40014800
 8007668:	40015000 	.word	0x40015000

0800766c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800769a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800769e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	051b      	lsls	r3, r3, #20
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	4313      	orrs	r3, r2
 80076be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a1a      	ldr	r2, [pc, #104]	@ (800772c <TIM_OC6_SetConfig+0xc0>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d013      	beq.n	80076f0 <TIM_OC6_SetConfig+0x84>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a19      	ldr	r2, [pc, #100]	@ (8007730 <TIM_OC6_SetConfig+0xc4>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00f      	beq.n	80076f0 <TIM_OC6_SetConfig+0x84>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a18      	ldr	r2, [pc, #96]	@ (8007734 <TIM_OC6_SetConfig+0xc8>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d00b      	beq.n	80076f0 <TIM_OC6_SetConfig+0x84>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a17      	ldr	r2, [pc, #92]	@ (8007738 <TIM_OC6_SetConfig+0xcc>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d007      	beq.n	80076f0 <TIM_OC6_SetConfig+0x84>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a16      	ldr	r2, [pc, #88]	@ (800773c <TIM_OC6_SetConfig+0xd0>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d003      	beq.n	80076f0 <TIM_OC6_SetConfig+0x84>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a15      	ldr	r2, [pc, #84]	@ (8007740 <TIM_OC6_SetConfig+0xd4>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d109      	bne.n	8007704 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	029b      	lsls	r3, r3, #10
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	621a      	str	r2, [r3, #32]
}
 800771e:	bf00      	nop
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40012c00 	.word	0x40012c00
 8007730:	40013400 	.word	0x40013400
 8007734:	40014000 	.word	0x40014000
 8007738:	40014400 	.word	0x40014400
 800773c:	40014800 	.word	0x40014800
 8007740:	40015000 	.word	0x40015000

08007744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f003 031f 	and.w	r3, r3, #31
 8007756:	2201      	movs	r2, #1
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a1a      	ldr	r2, [r3, #32]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	43db      	mvns	r3, r3
 8007766:	401a      	ands	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a1a      	ldr	r2, [r3, #32]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f003 031f 	and.w	r3, r3, #31
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	fa01 f303 	lsl.w	r3, r1, r3
 800777c:	431a      	orrs	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	621a      	str	r2, [r3, #32]
}
 8007782:	bf00      	nop
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e06d      	b.n	8007884 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a30      	ldr	r2, [pc, #192]	@ (8007890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d009      	beq.n	80077e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a2f      	ldr	r2, [pc, #188]	@ (8007894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d004      	beq.n	80077e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007898 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d108      	bne.n	80077f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80077ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a1e      	ldr	r2, [pc, #120]	@ (8007890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d01d      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007824:	d018      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1c      	ldr	r2, [pc, #112]	@ (800789c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d013      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a1a      	ldr	r2, [pc, #104]	@ (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d00e      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a15      	ldr	r2, [pc, #84]	@ (8007894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d009      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a16      	ldr	r2, [pc, #88]	@ (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d004      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a11      	ldr	r2, [pc, #68]	@ (8007898 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d10c      	bne.n	8007872 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800785e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	4313      	orrs	r3, r2
 8007868:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	40012c00 	.word	0x40012c00
 8007894:	40013400 	.word	0x40013400
 8007898:	40015000 	.word	0x40015000
 800789c:	40000400 	.word	0x40000400
 80078a0:	40000800 	.word	0x40000800
 80078a4:	40014000 	.word	0x40014000

080078a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e040      	b.n	8007978 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d106      	bne.n	800790c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7fa ffa0 	bl	800284c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2224      	movs	r2, #36	@ 0x24
 8007910:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0201 	bic.w	r2, r2, #1
 8007920:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007926:	2b00      	cmp	r3, #0
 8007928:	d002      	beq.n	8007930 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fd8c 	bl	8008448 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fbb5 	bl	80080a0 <UART_SetConfig>
 8007936:	4603      	mov	r3, r0
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e01b      	b.n	8007978 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800794e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800795e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0201 	orr.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fe0b 	bl	800858c <UART_CheckIdleState>
 8007976:	4603      	mov	r3, r0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08a      	sub	sp, #40	@ 0x28
 8007984:	af02      	add	r7, sp, #8
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	4613      	mov	r3, r2
 800798e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007994:	2b20      	cmp	r3, #32
 8007996:	d177      	bne.n	8007a88 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <HAL_UART_Transmit+0x24>
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e070      	b.n	8007a8a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2221      	movs	r2, #33	@ 0x21
 80079b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079b6:	f7fb f99b 	bl	8002cf0 <HAL_GetTick>
 80079ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	88fa      	ldrh	r2, [r7, #6]
 80079c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	88fa      	ldrh	r2, [r7, #6]
 80079c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079d4:	d108      	bne.n	80079e8 <HAL_UART_Transmit+0x68>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d104      	bne.n	80079e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	61bb      	str	r3, [r7, #24]
 80079e6:	e003      	b.n	80079f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079ec:	2300      	movs	r3, #0
 80079ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80079f0:	e02f      	b.n	8007a52 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2200      	movs	r2, #0
 80079fa:	2180      	movs	r1, #128	@ 0x80
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 fe6d 	bl	80086dc <UART_WaitOnFlagUntilTimeout>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d004      	beq.n	8007a12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e03b      	b.n	8007a8a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10b      	bne.n	8007a30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	881a      	ldrh	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a24:	b292      	uxth	r2, r2
 8007a26:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	3302      	adds	r3, #2
 8007a2c:	61bb      	str	r3, [r7, #24]
 8007a2e:	e007      	b.n	8007a40 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	781a      	ldrb	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1c9      	bne.n	80079f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2200      	movs	r2, #0
 8007a66:	2140      	movs	r1, #64	@ 0x40
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 fe37 	bl	80086dc <UART_WaitOnFlagUntilTimeout>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d004      	beq.n	8007a7e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2220      	movs	r2, #32
 8007a78:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e005      	b.n	8007a8a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2220      	movs	r2, #32
 8007a82:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	e000      	b.n	8007a8a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007a88:	2302      	movs	r3, #2
  }
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3720      	adds	r7, #32
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b0ba      	sub	sp, #232	@ 0xe8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007aba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007abe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007ac8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d115      	bne.n	8007afc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ad4:	f003 0320 	and.w	r3, r3, #32
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00f      	beq.n	8007afc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d009      	beq.n	8007afc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 82ab 	beq.w	8008048 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	4798      	blx	r3
      }
      return;
 8007afa:	e2a5      	b.n	8008048 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007afc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 8117 	beq.w	8007d34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d106      	bne.n	8007b20 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007b12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007b16:	4b85      	ldr	r3, [pc, #532]	@ (8007d2c <HAL_UART_IRQHandler+0x298>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 810a 	beq.w	8007d34 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d011      	beq.n	8007b50 <HAL_UART_IRQHandler+0xbc>
 8007b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00b      	beq.n	8007b50 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b46:	f043 0201 	orr.w	r2, r3, #1
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d011      	beq.n	8007b80 <HAL_UART_IRQHandler+0xec>
 8007b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b76:	f043 0204 	orr.w	r2, r3, #4
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d011      	beq.n	8007bb0 <HAL_UART_IRQHandler+0x11c>
 8007b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2204      	movs	r2, #4
 8007b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ba6:	f043 0202 	orr.w	r2, r3, #2
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb4:	f003 0308 	and.w	r3, r3, #8
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d017      	beq.n	8007bec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bc0:	f003 0320 	and.w	r3, r3, #32
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d105      	bne.n	8007bd4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bcc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2208      	movs	r2, #8
 8007bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007be2:	f043 0208 	orr.w	r2, r3, #8
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d012      	beq.n	8007c1e <HAL_UART_IRQHandler+0x18a>
 8007bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00c      	beq.n	8007c1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c14:	f043 0220 	orr.w	r2, r3, #32
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 8211 	beq.w	800804c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00d      	beq.n	8007c52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c66:	2b40      	cmp	r3, #64	@ 0x40
 8007c68:	d005      	beq.n	8007c76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d04f      	beq.n	8007d16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fd9d 	bl	80087b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c86:	2b40      	cmp	r3, #64	@ 0x40
 8007c88:	d141      	bne.n	8007d0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ca4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007cb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007cba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007cc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007cce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1d9      	bne.n	8007c8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d013      	beq.n	8007d06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ce2:	4a13      	ldr	r2, [pc, #76]	@ (8007d30 <HAL_UART_IRQHandler+0x29c>)
 8007ce4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fb f97f 	bl	8002fee <HAL_DMA_Abort_IT>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d017      	beq.n	8007d26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d04:	e00f      	b.n	8007d26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f9b4 	bl	8008074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d0c:	e00b      	b.n	8007d26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f9b0 	bl	8008074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d14:	e007      	b.n	8007d26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f9ac 	bl	8008074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007d24:	e192      	b.n	800804c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d26:	bf00      	nop
    return;
 8007d28:	e190      	b.n	800804c <HAL_UART_IRQHandler+0x5b8>
 8007d2a:	bf00      	nop
 8007d2c:	04000120 	.word	0x04000120
 8007d30:	0800887f 	.word	0x0800887f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	f040 814b 	bne.w	8007fd4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d42:	f003 0310 	and.w	r3, r3, #16
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 8144 	beq.w	8007fd4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d50:	f003 0310 	and.w	r3, r3, #16
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 813d 	beq.w	8007fd4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2210      	movs	r2, #16
 8007d60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d6c:	2b40      	cmp	r3, #64	@ 0x40
 8007d6e:	f040 80b5 	bne.w	8007edc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 8164 	beq.w	8008050 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d92:	429a      	cmp	r2, r3
 8007d94:	f080 815c 	bcs.w	8008050 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	2b20      	cmp	r3, #32
 8007daa:	f000 8086 	beq.w	8007eba <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007dc6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007dca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ddc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007de4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007de8:	e841 2300 	strex	r3, r2, [r1]
 8007dec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1da      	bne.n	8007dae <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3308      	adds	r3, #8
 8007dfe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e0a:	f023 0301 	bic.w	r3, r3, #1
 8007e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3308      	adds	r3, #8
 8007e18:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e1c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e20:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e24:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e28:	e841 2300 	strex	r3, r2, [r1]
 8007e2c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1e1      	bne.n	8007df8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3308      	adds	r3, #8
 8007e3a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3308      	adds	r3, #8
 8007e54:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e58:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e5a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e5e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e3      	bne.n	8007e34 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e8a:	f023 0310 	bic.w	r3, r3, #16
 8007e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e9e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ea2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ea4:	e841 2300 	strex	r3, r2, [r1]
 8007ea8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007eaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1e4      	bne.n	8007e7a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fb f85c 	bl	8002f72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f8d7 	bl	8008088 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007eda:	e0b9      	b.n	8008050 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 80ab 	beq.w	8008054 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007efe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 80a6 	beq.w	8008054 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	461a      	mov	r2, r3
 8007f26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f2c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e4      	bne.n	8007f08 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3308      	adds	r3, #8
 8007f44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	f023 0301 	bic.w	r3, r3, #1
 8007f54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3308      	adds	r3, #8
 8007f5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f62:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f6a:	e841 2300 	strex	r3, r2, [r1]
 8007f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e3      	bne.n	8007f3e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0310 	bic.w	r3, r3, #16
 8007f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007fac:	61fb      	str	r3, [r7, #28]
 8007fae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	69b9      	ldr	r1, [r7, #24]
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	e841 2300 	strex	r3, r2, [r1]
 8007fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e4      	bne.n	8007f8a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f85b 	bl	8008088 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fd2:	e03f      	b.n	8008054 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00e      	beq.n	8007ffe <HAL_UART_IRQHandler+0x56a>
 8007fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d008      	beq.n	8007ffe <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007ff4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fc81 	bl	80088fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ffc:	e02d      	b.n	800805a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00e      	beq.n	8008028 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800800a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800800e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008012:	2b00      	cmp	r3, #0
 8008014:	d008      	beq.n	8008028 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800801a:	2b00      	cmp	r3, #0
 800801c:	d01c      	beq.n	8008058 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
    }
    return;
 8008026:	e017      	b.n	8008058 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800802c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008030:	2b00      	cmp	r3, #0
 8008032:	d012      	beq.n	800805a <HAL_UART_IRQHandler+0x5c6>
 8008034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00c      	beq.n	800805a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fc32 	bl	80088aa <UART_EndTransmit_IT>
    return;
 8008046:	e008      	b.n	800805a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008048:	bf00      	nop
 800804a:	e006      	b.n	800805a <HAL_UART_IRQHandler+0x5c6>
    return;
 800804c:	bf00      	nop
 800804e:	e004      	b.n	800805a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008050:	bf00      	nop
 8008052:	e002      	b.n	800805a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008054:	bf00      	nop
 8008056:	e000      	b.n	800805a <HAL_UART_IRQHandler+0x5c6>
    return;
 8008058:	bf00      	nop
  }

}
 800805a:	37e8      	adds	r7, #232	@ 0xe8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	431a      	orrs	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	431a      	orrs	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	69db      	ldr	r3, [r3, #28]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	4b92      	ldr	r3, [pc, #584]	@ (8008314 <UART_SetConfig+0x274>)
 80080cc:	4013      	ands	r3, r2
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	6812      	ldr	r2, [r2, #0]
 80080d2:	6979      	ldr	r1, [r7, #20]
 80080d4:	430b      	orrs	r3, r1
 80080d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a1b      	ldr	r3, [r3, #32]
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	430a      	orrs	r2, r1
 8008110:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a80      	ldr	r2, [pc, #512]	@ (8008318 <UART_SetConfig+0x278>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d120      	bne.n	800815e <UART_SetConfig+0xbe>
 800811c:	4b7f      	ldr	r3, [pc, #508]	@ (800831c <UART_SetConfig+0x27c>)
 800811e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008120:	f003 0303 	and.w	r3, r3, #3
 8008124:	2b03      	cmp	r3, #3
 8008126:	d817      	bhi.n	8008158 <UART_SetConfig+0xb8>
 8008128:	a201      	add	r2, pc, #4	@ (adr r2, 8008130 <UART_SetConfig+0x90>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	08008141 	.word	0x08008141
 8008134:	0800814d 	.word	0x0800814d
 8008138:	08008153 	.word	0x08008153
 800813c:	08008147 	.word	0x08008147
 8008140:	2301      	movs	r3, #1
 8008142:	77fb      	strb	r3, [r7, #31]
 8008144:	e0b5      	b.n	80082b2 <UART_SetConfig+0x212>
 8008146:	2302      	movs	r3, #2
 8008148:	77fb      	strb	r3, [r7, #31]
 800814a:	e0b2      	b.n	80082b2 <UART_SetConfig+0x212>
 800814c:	2304      	movs	r3, #4
 800814e:	77fb      	strb	r3, [r7, #31]
 8008150:	e0af      	b.n	80082b2 <UART_SetConfig+0x212>
 8008152:	2308      	movs	r3, #8
 8008154:	77fb      	strb	r3, [r7, #31]
 8008156:	e0ac      	b.n	80082b2 <UART_SetConfig+0x212>
 8008158:	2310      	movs	r3, #16
 800815a:	77fb      	strb	r3, [r7, #31]
 800815c:	e0a9      	b.n	80082b2 <UART_SetConfig+0x212>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a6f      	ldr	r2, [pc, #444]	@ (8008320 <UART_SetConfig+0x280>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d124      	bne.n	80081b2 <UART_SetConfig+0x112>
 8008168:	4b6c      	ldr	r3, [pc, #432]	@ (800831c <UART_SetConfig+0x27c>)
 800816a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008170:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008174:	d011      	beq.n	800819a <UART_SetConfig+0xfa>
 8008176:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800817a:	d817      	bhi.n	80081ac <UART_SetConfig+0x10c>
 800817c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008180:	d011      	beq.n	80081a6 <UART_SetConfig+0x106>
 8008182:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008186:	d811      	bhi.n	80081ac <UART_SetConfig+0x10c>
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <UART_SetConfig+0xf4>
 800818c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008190:	d006      	beq.n	80081a0 <UART_SetConfig+0x100>
 8008192:	e00b      	b.n	80081ac <UART_SetConfig+0x10c>
 8008194:	2300      	movs	r3, #0
 8008196:	77fb      	strb	r3, [r7, #31]
 8008198:	e08b      	b.n	80082b2 <UART_SetConfig+0x212>
 800819a:	2302      	movs	r3, #2
 800819c:	77fb      	strb	r3, [r7, #31]
 800819e:	e088      	b.n	80082b2 <UART_SetConfig+0x212>
 80081a0:	2304      	movs	r3, #4
 80081a2:	77fb      	strb	r3, [r7, #31]
 80081a4:	e085      	b.n	80082b2 <UART_SetConfig+0x212>
 80081a6:	2308      	movs	r3, #8
 80081a8:	77fb      	strb	r3, [r7, #31]
 80081aa:	e082      	b.n	80082b2 <UART_SetConfig+0x212>
 80081ac:	2310      	movs	r3, #16
 80081ae:	77fb      	strb	r3, [r7, #31]
 80081b0:	e07f      	b.n	80082b2 <UART_SetConfig+0x212>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a5b      	ldr	r2, [pc, #364]	@ (8008324 <UART_SetConfig+0x284>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d124      	bne.n	8008206 <UART_SetConfig+0x166>
 80081bc:	4b57      	ldr	r3, [pc, #348]	@ (800831c <UART_SetConfig+0x27c>)
 80081be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081c0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80081c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80081c8:	d011      	beq.n	80081ee <UART_SetConfig+0x14e>
 80081ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80081ce:	d817      	bhi.n	8008200 <UART_SetConfig+0x160>
 80081d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80081d4:	d011      	beq.n	80081fa <UART_SetConfig+0x15a>
 80081d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80081da:	d811      	bhi.n	8008200 <UART_SetConfig+0x160>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <UART_SetConfig+0x148>
 80081e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081e4:	d006      	beq.n	80081f4 <UART_SetConfig+0x154>
 80081e6:	e00b      	b.n	8008200 <UART_SetConfig+0x160>
 80081e8:	2300      	movs	r3, #0
 80081ea:	77fb      	strb	r3, [r7, #31]
 80081ec:	e061      	b.n	80082b2 <UART_SetConfig+0x212>
 80081ee:	2302      	movs	r3, #2
 80081f0:	77fb      	strb	r3, [r7, #31]
 80081f2:	e05e      	b.n	80082b2 <UART_SetConfig+0x212>
 80081f4:	2304      	movs	r3, #4
 80081f6:	77fb      	strb	r3, [r7, #31]
 80081f8:	e05b      	b.n	80082b2 <UART_SetConfig+0x212>
 80081fa:	2308      	movs	r3, #8
 80081fc:	77fb      	strb	r3, [r7, #31]
 80081fe:	e058      	b.n	80082b2 <UART_SetConfig+0x212>
 8008200:	2310      	movs	r3, #16
 8008202:	77fb      	strb	r3, [r7, #31]
 8008204:	e055      	b.n	80082b2 <UART_SetConfig+0x212>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a47      	ldr	r2, [pc, #284]	@ (8008328 <UART_SetConfig+0x288>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d124      	bne.n	800825a <UART_SetConfig+0x1ba>
 8008210:	4b42      	ldr	r3, [pc, #264]	@ (800831c <UART_SetConfig+0x27c>)
 8008212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008214:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008218:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800821c:	d011      	beq.n	8008242 <UART_SetConfig+0x1a2>
 800821e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008222:	d817      	bhi.n	8008254 <UART_SetConfig+0x1b4>
 8008224:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008228:	d011      	beq.n	800824e <UART_SetConfig+0x1ae>
 800822a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800822e:	d811      	bhi.n	8008254 <UART_SetConfig+0x1b4>
 8008230:	2b00      	cmp	r3, #0
 8008232:	d003      	beq.n	800823c <UART_SetConfig+0x19c>
 8008234:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008238:	d006      	beq.n	8008248 <UART_SetConfig+0x1a8>
 800823a:	e00b      	b.n	8008254 <UART_SetConfig+0x1b4>
 800823c:	2300      	movs	r3, #0
 800823e:	77fb      	strb	r3, [r7, #31]
 8008240:	e037      	b.n	80082b2 <UART_SetConfig+0x212>
 8008242:	2302      	movs	r3, #2
 8008244:	77fb      	strb	r3, [r7, #31]
 8008246:	e034      	b.n	80082b2 <UART_SetConfig+0x212>
 8008248:	2304      	movs	r3, #4
 800824a:	77fb      	strb	r3, [r7, #31]
 800824c:	e031      	b.n	80082b2 <UART_SetConfig+0x212>
 800824e:	2308      	movs	r3, #8
 8008250:	77fb      	strb	r3, [r7, #31]
 8008252:	e02e      	b.n	80082b2 <UART_SetConfig+0x212>
 8008254:	2310      	movs	r3, #16
 8008256:	77fb      	strb	r3, [r7, #31]
 8008258:	e02b      	b.n	80082b2 <UART_SetConfig+0x212>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a33      	ldr	r2, [pc, #204]	@ (800832c <UART_SetConfig+0x28c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d124      	bne.n	80082ae <UART_SetConfig+0x20e>
 8008264:	4b2d      	ldr	r3, [pc, #180]	@ (800831c <UART_SetConfig+0x27c>)
 8008266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008268:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800826c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008270:	d011      	beq.n	8008296 <UART_SetConfig+0x1f6>
 8008272:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008276:	d817      	bhi.n	80082a8 <UART_SetConfig+0x208>
 8008278:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800827c:	d011      	beq.n	80082a2 <UART_SetConfig+0x202>
 800827e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008282:	d811      	bhi.n	80082a8 <UART_SetConfig+0x208>
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <UART_SetConfig+0x1f0>
 8008288:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800828c:	d006      	beq.n	800829c <UART_SetConfig+0x1fc>
 800828e:	e00b      	b.n	80082a8 <UART_SetConfig+0x208>
 8008290:	2300      	movs	r3, #0
 8008292:	77fb      	strb	r3, [r7, #31]
 8008294:	e00d      	b.n	80082b2 <UART_SetConfig+0x212>
 8008296:	2302      	movs	r3, #2
 8008298:	77fb      	strb	r3, [r7, #31]
 800829a:	e00a      	b.n	80082b2 <UART_SetConfig+0x212>
 800829c:	2304      	movs	r3, #4
 800829e:	77fb      	strb	r3, [r7, #31]
 80082a0:	e007      	b.n	80082b2 <UART_SetConfig+0x212>
 80082a2:	2308      	movs	r3, #8
 80082a4:	77fb      	strb	r3, [r7, #31]
 80082a6:	e004      	b.n	80082b2 <UART_SetConfig+0x212>
 80082a8:	2310      	movs	r3, #16
 80082aa:	77fb      	strb	r3, [r7, #31]
 80082ac:	e001      	b.n	80082b2 <UART_SetConfig+0x212>
 80082ae:	2310      	movs	r3, #16
 80082b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ba:	d16b      	bne.n	8008394 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80082bc:	7ffb      	ldrb	r3, [r7, #31]
 80082be:	2b08      	cmp	r3, #8
 80082c0:	d838      	bhi.n	8008334 <UART_SetConfig+0x294>
 80082c2:	a201      	add	r2, pc, #4	@ (adr r2, 80082c8 <UART_SetConfig+0x228>)
 80082c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c8:	080082ed 	.word	0x080082ed
 80082cc:	080082f5 	.word	0x080082f5
 80082d0:	080082fd 	.word	0x080082fd
 80082d4:	08008335 	.word	0x08008335
 80082d8:	08008303 	.word	0x08008303
 80082dc:	08008335 	.word	0x08008335
 80082e0:	08008335 	.word	0x08008335
 80082e4:	08008335 	.word	0x08008335
 80082e8:	0800830b 	.word	0x0800830b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082ec:	f7fd fd74 	bl	8005dd8 <HAL_RCC_GetPCLK1Freq>
 80082f0:	61b8      	str	r0, [r7, #24]
        break;
 80082f2:	e024      	b.n	800833e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082f4:	f7fd fd92 	bl	8005e1c <HAL_RCC_GetPCLK2Freq>
 80082f8:	61b8      	str	r0, [r7, #24]
        break;
 80082fa:	e020      	b.n	800833e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008330 <UART_SetConfig+0x290>)
 80082fe:	61bb      	str	r3, [r7, #24]
        break;
 8008300:	e01d      	b.n	800833e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008302:	f7fd fd09 	bl	8005d18 <HAL_RCC_GetSysClockFreq>
 8008306:	61b8      	str	r0, [r7, #24]
        break;
 8008308:	e019      	b.n	800833e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800830a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800830e:	61bb      	str	r3, [r7, #24]
        break;
 8008310:	e015      	b.n	800833e <UART_SetConfig+0x29e>
 8008312:	bf00      	nop
 8008314:	efff69f3 	.word	0xefff69f3
 8008318:	40013800 	.word	0x40013800
 800831c:	40021000 	.word	0x40021000
 8008320:	40004400 	.word	0x40004400
 8008324:	40004800 	.word	0x40004800
 8008328:	40004c00 	.word	0x40004c00
 800832c:	40005000 	.word	0x40005000
 8008330:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008334:	2300      	movs	r3, #0
 8008336:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	77bb      	strb	r3, [r7, #30]
        break;
 800833c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d073      	beq.n	800842c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	005a      	lsls	r2, r3, #1
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	085b      	lsrs	r3, r3, #1
 800834e:	441a      	add	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	fbb2 f3f3 	udiv	r3, r2, r3
 8008358:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	2b0f      	cmp	r3, #15
 800835e:	d916      	bls.n	800838e <UART_SetConfig+0x2ee>
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008366:	d212      	bcs.n	800838e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	b29b      	uxth	r3, r3
 800836c:	f023 030f 	bic.w	r3, r3, #15
 8008370:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	085b      	lsrs	r3, r3, #1
 8008376:	b29b      	uxth	r3, r3
 8008378:	f003 0307 	and.w	r3, r3, #7
 800837c:	b29a      	uxth	r2, r3
 800837e:	89fb      	ldrh	r3, [r7, #14]
 8008380:	4313      	orrs	r3, r2
 8008382:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	89fa      	ldrh	r2, [r7, #14]
 800838a:	60da      	str	r2, [r3, #12]
 800838c:	e04e      	b.n	800842c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	77bb      	strb	r3, [r7, #30]
 8008392:	e04b      	b.n	800842c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008394:	7ffb      	ldrb	r3, [r7, #31]
 8008396:	2b08      	cmp	r3, #8
 8008398:	d827      	bhi.n	80083ea <UART_SetConfig+0x34a>
 800839a:	a201      	add	r2, pc, #4	@ (adr r2, 80083a0 <UART_SetConfig+0x300>)
 800839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a0:	080083c5 	.word	0x080083c5
 80083a4:	080083cd 	.word	0x080083cd
 80083a8:	080083d5 	.word	0x080083d5
 80083ac:	080083eb 	.word	0x080083eb
 80083b0:	080083db 	.word	0x080083db
 80083b4:	080083eb 	.word	0x080083eb
 80083b8:	080083eb 	.word	0x080083eb
 80083bc:	080083eb 	.word	0x080083eb
 80083c0:	080083e3 	.word	0x080083e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083c4:	f7fd fd08 	bl	8005dd8 <HAL_RCC_GetPCLK1Freq>
 80083c8:	61b8      	str	r0, [r7, #24]
        break;
 80083ca:	e013      	b.n	80083f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083cc:	f7fd fd26 	bl	8005e1c <HAL_RCC_GetPCLK2Freq>
 80083d0:	61b8      	str	r0, [r7, #24]
        break;
 80083d2:	e00f      	b.n	80083f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008444 <UART_SetConfig+0x3a4>)
 80083d6:	61bb      	str	r3, [r7, #24]
        break;
 80083d8:	e00c      	b.n	80083f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083da:	f7fd fc9d 	bl	8005d18 <HAL_RCC_GetSysClockFreq>
 80083de:	61b8      	str	r0, [r7, #24]
        break;
 80083e0:	e008      	b.n	80083f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083e6:	61bb      	str	r3, [r7, #24]
        break;
 80083e8:	e004      	b.n	80083f4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	77bb      	strb	r3, [r7, #30]
        break;
 80083f2:	bf00      	nop
    }

    if (pclk != 0U)
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d018      	beq.n	800842c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	085a      	lsrs	r2, r3, #1
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	441a      	add	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	fbb2 f3f3 	udiv	r3, r2, r3
 800840c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b0f      	cmp	r3, #15
 8008412:	d909      	bls.n	8008428 <UART_SetConfig+0x388>
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800841a:	d205      	bcs.n	8008428 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	b29a      	uxth	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60da      	str	r2, [r3, #12]
 8008426:	e001      	b.n	800842c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008438:	7fbb      	ldrb	r3, [r7, #30]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3720      	adds	r7, #32
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	007a1200 	.word	0x007a1200

08008448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008454:	f003 0308 	and.w	r3, r3, #8
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00a      	beq.n	8008472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	430a      	orrs	r2, r1
 8008470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00a      	beq.n	8008494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008498:	f003 0302 	and.w	r3, r3, #2
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ba:	f003 0304 	and.w	r3, r3, #4
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084dc:	f003 0310 	and.w	r3, r3, #16
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084fe:	f003 0320 	and.w	r3, r3, #32
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01a      	beq.n	800855e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	430a      	orrs	r2, r1
 800853c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008546:	d10a      	bne.n	800855e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	605a      	str	r2, [r3, #4]
  }
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b098      	sub	sp, #96	@ 0x60
 8008590:	af02      	add	r7, sp, #8
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800859c:	f7fa fba8 	bl	8002cf0 <HAL_GetTick>
 80085a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0308 	and.w	r3, r3, #8
 80085ac:	2b08      	cmp	r3, #8
 80085ae:	d12e      	bne.n	800860e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085b8:	2200      	movs	r2, #0
 80085ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f88c 	bl	80086dc <UART_WaitOnFlagUntilTimeout>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d021      	beq.n	800860e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d2:	e853 3f00 	ldrex	r3, [r3]
 80085d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085de:	653b      	str	r3, [r7, #80]	@ 0x50
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	461a      	mov	r2, r3
 80085e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80085ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e6      	bne.n	80085ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e062      	b.n	80086d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b04      	cmp	r3, #4
 800861a:	d149      	bne.n	80086b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800861c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008624:	2200      	movs	r2, #0
 8008626:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f856 	bl	80086dc <UART_WaitOnFlagUntilTimeout>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d03c      	beq.n	80086b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863e:	e853 3f00 	ldrex	r3, [r3]
 8008642:	623b      	str	r3, [r7, #32]
   return(result);
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800864a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	461a      	mov	r2, r3
 8008652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008654:	633b      	str	r3, [r7, #48]	@ 0x30
 8008656:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008658:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800865a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800865c:	e841 2300 	strex	r3, r2, [r1]
 8008660:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e6      	bne.n	8008636 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3308      	adds	r3, #8
 800866e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	e853 3f00 	ldrex	r3, [r3]
 8008676:	60fb      	str	r3, [r7, #12]
   return(result);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0301 	bic.w	r3, r3, #1
 800867e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3308      	adds	r3, #8
 8008686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008688:	61fa      	str	r2, [r7, #28]
 800868a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868c:	69b9      	ldr	r1, [r7, #24]
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	e841 2300 	strex	r3, r2, [r1]
 8008694:	617b      	str	r3, [r7, #20]
   return(result);
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e5      	bne.n	8008668 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2220      	movs	r2, #32
 80086a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e011      	b.n	80086d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2220      	movs	r2, #32
 80086b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2220      	movs	r2, #32
 80086ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3758      	adds	r7, #88	@ 0x58
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	603b      	str	r3, [r7, #0]
 80086e8:	4613      	mov	r3, r2
 80086ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ec:	e04f      	b.n	800878e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f4:	d04b      	beq.n	800878e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086f6:	f7fa fafb 	bl	8002cf0 <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	429a      	cmp	r2, r3
 8008704:	d302      	bcc.n	800870c <UART_WaitOnFlagUntilTimeout+0x30>
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e04e      	b.n	80087ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0304 	and.w	r3, r3, #4
 800871a:	2b00      	cmp	r3, #0
 800871c:	d037      	beq.n	800878e <UART_WaitOnFlagUntilTimeout+0xb2>
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2b80      	cmp	r3, #128	@ 0x80
 8008722:	d034      	beq.n	800878e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2b40      	cmp	r3, #64	@ 0x40
 8008728:	d031      	beq.n	800878e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	69db      	ldr	r3, [r3, #28]
 8008730:	f003 0308 	and.w	r3, r3, #8
 8008734:	2b08      	cmp	r3, #8
 8008736:	d110      	bne.n	800875a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2208      	movs	r2, #8
 800873e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 f838 	bl	80087b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2208      	movs	r2, #8
 800874a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e029      	b.n	80087ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008768:	d111      	bne.n	800878e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f81e 	bl	80087b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2220      	movs	r2, #32
 800877e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e00f      	b.n	80087ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	69da      	ldr	r2, [r3, #28]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	4013      	ands	r3, r2
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	429a      	cmp	r2, r3
 800879c:	bf0c      	ite	eq
 800879e:	2301      	moveq	r3, #1
 80087a0:	2300      	movne	r3, #0
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d0a0      	beq.n	80086ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b095      	sub	sp, #84	@ 0x54
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80087de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e6      	bne.n	80087be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3308      	adds	r3, #8
 80087f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	e853 3f00 	ldrex	r3, [r3]
 80087fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	f023 0301 	bic.w	r3, r3, #1
 8008806:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3308      	adds	r3, #8
 800880e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008810:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008812:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008814:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008818:	e841 2300 	strex	r3, r2, [r1]
 800881c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800881e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e5      	bne.n	80087f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008828:	2b01      	cmp	r3, #1
 800882a:	d118      	bne.n	800885e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	60bb      	str	r3, [r7, #8]
   return(result);
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	f023 0310 	bic.w	r3, r3, #16
 8008840:	647b      	str	r3, [r7, #68]	@ 0x44
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800884a:	61bb      	str	r3, [r7, #24]
 800884c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	6979      	ldr	r1, [r7, #20]
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	613b      	str	r3, [r7, #16]
   return(result);
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e6      	bne.n	800882c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2220      	movs	r2, #32
 8008862:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008872:	bf00      	nop
 8008874:	3754      	adds	r7, #84	@ 0x54
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800888a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f7ff fbe9 	bl	8008074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088a2:	bf00      	nop
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b088      	sub	sp, #32
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	60bb      	str	r3, [r7, #8]
   return(result);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088c6:	61fb      	str	r3, [r7, #28]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	61bb      	str	r3, [r7, #24]
 80088d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6979      	ldr	r1, [r7, #20]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	613b      	str	r3, [r7, #16]
   return(result);
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e6      	bne.n	80088b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2220      	movs	r2, #32
 80088e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7ff fbb5 	bl	8008060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088f6:	bf00      	nop
 80088f8:	3720      	adds	r7, #32
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088fe:	b480      	push	{r7}
 8008900:	b083      	sub	sp, #12
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008906:	bf00      	nop
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008912:	b480      	push	{r7}
 8008914:	b085      	sub	sp, #20
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800891a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800891e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008926:	b29a      	uxth	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	b29b      	uxth	r3, r3
 800892c:	43db      	mvns	r3, r3
 800892e:	b29b      	uxth	r3, r3
 8008930:	4013      	ands	r3, r2
 8008932:	b29a      	uxth	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	1d3b      	adds	r3, r7, #4
 8008952:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b0c2      	sub	sp, #264	@ 0x108
 8008988:	af00      	add	r7, sp, #0
 800898a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800898e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008992:	6018      	str	r0, [r3, #0]
 8008994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800899c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800899e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	785b      	ldrb	r3, [r3, #1]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	f040 86b7 	bne.w	800971e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80089b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	699a      	ldr	r2, [r3, #24]
 80089bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d908      	bls.n	80089de <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80089cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80089dc:	e007      	b.n	80089ee <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80089de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80089ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	7b1b      	ldrb	r3, [r3, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d13a      	bne.n	8008a74 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80089fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6959      	ldr	r1, [r3, #20]
 8008a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	88da      	ldrh	r2, [r3, #6]
 8008a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008a20:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008a24:	6800      	ldr	r0, [r0, #0]
 8008a26:	f001 fb83 	bl	800a130 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	613b      	str	r3, [r7, #16]
 8008a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	461a      	mov	r2, r3
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	613b      	str	r3, [r7, #16]
 8008a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	00da      	lsls	r2, r3, #3
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a64:	60fb      	str	r3, [r7, #12]
 8008a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	801a      	strh	r2, [r3, #0]
 8008a70:	f000 be1f 	b.w	80096b2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	78db      	ldrb	r3, [r3, #3]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	f040 8462 	bne.w	800934a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6a1a      	ldr	r2, [r3, #32]
 8008a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	f240 83df 	bls.w	8009262 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aca:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	441a      	add	r2, r3
 8008ae8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008aec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008af0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008af4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6a1a      	ldr	r2, [r3, #32]
 8008b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b10:	1ad2      	subs	r2, r2, r3
 8008b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	881b      	ldrh	r3, [r3, #0]
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 81c7 	beq.w	8008ed4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	785b      	ldrb	r3, [r3, #1]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d177      	bne.n	8008c52 <USB_EPStartXfer+0x2ce>
 8008b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	461a      	mov	r2, r3
 8008b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b82:	4413      	add	r3, r2
 8008b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	00da      	lsls	r2, r3, #3
 8008b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b96:	4413      	add	r3, r2
 8008b98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bac:	801a      	strh	r2, [r3, #0]
 8008bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10a      	bne.n	8008bcc <USB_EPStartXfer+0x248>
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc8:	801a      	strh	r2, [r3, #0]
 8008bca:	e067      	b.n	8008c9c <USB_EPStartXfer+0x318>
 8008bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008bd2:	d81c      	bhi.n	8008c0e <USB_EPStartXfer+0x28a>
 8008bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bd8:	085b      	lsrs	r3, r3, #1
 8008bda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d004      	beq.n	8008bf4 <USB_EPStartXfer+0x270>
 8008bea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008bee:	3301      	adds	r3, #1
 8008bf0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf6:	881b      	ldrh	r3, [r3, #0]
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	029b      	lsls	r3, r3, #10
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	4313      	orrs	r3, r2
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0a:	801a      	strh	r2, [r3, #0]
 8008c0c:	e046      	b.n	8008c9c <USB_EPStartXfer+0x318>
 8008c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c12:	095b      	lsrs	r3, r3, #5
 8008c14:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c1c:	f003 031f 	and.w	r3, r3, #31
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d104      	bne.n	8008c2e <USB_EPStartXfer+0x2aa>
 8008c24:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	029b      	lsls	r3, r3, #10
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4e:	801a      	strh	r2, [r3, #0]
 8008c50:	e024      	b.n	8008c9c <USB_EPStartXfer+0x318>
 8008c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	785b      	ldrb	r3, [r3, #1]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d11c      	bne.n	8008c9c <USB_EPStartXfer+0x318>
 8008c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	461a      	mov	r2, r3
 8008c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c76:	4413      	add	r3, r2
 8008c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	00da      	lsls	r2, r3, #3
 8008c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	895b      	ldrh	r3, [r3, #10]
 8008ca8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6959      	ldr	r1, [r3, #20]
 8008cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008cc2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008cc6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008cca:	6800      	ldr	r0, [r0, #0]
 8008ccc:	f001 fa30 	bl	800a130 <USB_WritePMA>
            ep->xfer_buff += len;
 8008cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	695a      	ldr	r2, [r3, #20]
 8008cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce0:	441a      	add	r2, r3
 8008ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6a1a      	ldr	r2, [r3, #32]
 8008cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d90f      	bls.n	8008d2a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6a1a      	ldr	r2, [r3, #32]
 8008d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d1a:	1ad2      	subs	r2, r2, r3
 8008d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	621a      	str	r2, [r3, #32]
 8008d28:	e00e      	b.n	8008d48 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2200      	movs	r2, #0
 8008d46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	785b      	ldrb	r3, [r3, #1]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d177      	bne.n	8008e48 <USB_EPStartXfer+0x4c4>
 8008d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	61bb      	str	r3, [r7, #24]
 8008d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	461a      	mov	r2, r3
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	4413      	add	r3, r2
 8008d7a:	61bb      	str	r3, [r7, #24]
 8008d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	00da      	lsls	r2, r3, #3
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008d92:	617b      	str	r3, [r7, #20]
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	801a      	strh	r2, [r3, #0]
 8008da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10a      	bne.n	8008dc2 <USB_EPStartXfer+0x43e>
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	881b      	ldrh	r3, [r3, #0]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	801a      	strh	r2, [r3, #0]
 8008dc0:	e06d      	b.n	8008e9e <USB_EPStartXfer+0x51a>
 8008dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8008dc8:	d81c      	bhi.n	8008e04 <USB_EPStartXfer+0x480>
 8008dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dce:	085b      	lsrs	r3, r3, #1
 8008dd0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd8:	f003 0301 	and.w	r3, r3, #1
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d004      	beq.n	8008dea <USB_EPStartXfer+0x466>
 8008de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008de4:	3301      	adds	r3, #1
 8008de6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	029b      	lsls	r3, r3, #10
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	801a      	strh	r2, [r3, #0]
 8008e02:	e04c      	b.n	8008e9e <USB_EPStartXfer+0x51a>
 8008e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e08:	095b      	lsrs	r3, r3, #5
 8008e0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e12:	f003 031f 	and.w	r3, r3, #31
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d104      	bne.n	8008e24 <USB_EPStartXfer+0x4a0>
 8008e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	029b      	lsls	r3, r3, #10
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	4313      	orrs	r3, r2
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	801a      	strh	r2, [r3, #0]
 8008e46:	e02a      	b.n	8008e9e <USB_EPStartXfer+0x51a>
 8008e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	785b      	ldrb	r3, [r3, #1]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d122      	bne.n	8008e9e <USB_EPStartXfer+0x51a>
 8008e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	623b      	str	r3, [r7, #32]
 8008e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	461a      	mov	r2, r3
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	4413      	add	r3, r2
 8008e7a:	623b      	str	r3, [r7, #32]
 8008e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	00da      	lsls	r2, r3, #3
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008e92:	61fb      	str	r3, [r7, #28]
 8008e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	891b      	ldrh	r3, [r3, #8]
 8008eaa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6959      	ldr	r1, [r3, #20]
 8008eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008ec4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008ec8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008ecc:	6800      	ldr	r0, [r0, #0]
 8008ece:	f001 f92f 	bl	800a130 <USB_WritePMA>
 8008ed2:	e3ee      	b.n	80096b2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	785b      	ldrb	r3, [r3, #1]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d177      	bne.n	8008fd4 <USB_EPStartXfer+0x650>
 8008ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ee8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	461a      	mov	r2, r3
 8008f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f04:	4413      	add	r3, r2
 8008f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	00da      	lsls	r2, r3, #3
 8008f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f18:	4413      	add	r3, r2
 8008f1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f2e:	801a      	strh	r2, [r3, #0]
 8008f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <USB_EPStartXfer+0x5ca>
 8008f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f4a:	801a      	strh	r2, [r3, #0]
 8008f4c:	e06d      	b.n	800902a <USB_EPStartXfer+0x6a6>
 8008f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f52:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f54:	d81c      	bhi.n	8008f90 <USB_EPStartXfer+0x60c>
 8008f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f5a:	085b      	lsrs	r3, r3, #1
 8008f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f64:	f003 0301 	and.w	r3, r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d004      	beq.n	8008f76 <USB_EPStartXfer+0x5f2>
 8008f6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008f70:	3301      	adds	r3, #1
 8008f72:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	029b      	lsls	r3, r3, #10
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	4313      	orrs	r3, r2
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f8c:	801a      	strh	r2, [r3, #0]
 8008f8e:	e04c      	b.n	800902a <USB_EPStartXfer+0x6a6>
 8008f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f94:	095b      	lsrs	r3, r3, #5
 8008f96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f9e:	f003 031f 	and.w	r3, r3, #31
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d104      	bne.n	8008fb0 <USB_EPStartXfer+0x62c>
 8008fa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008faa:	3b01      	subs	r3, #1
 8008fac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	029b      	lsls	r3, r3, #10
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fd0:	801a      	strh	r2, [r3, #0]
 8008fd2:	e02a      	b.n	800902a <USB_EPStartXfer+0x6a6>
 8008fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	785b      	ldrb	r3, [r3, #1]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d122      	bne.n	800902a <USB_EPStartXfer+0x6a6>
 8008fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fe8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	461a      	mov	r2, r3
 8009002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009004:	4413      	add	r3, r2
 8009006:	653b      	str	r3, [r7, #80]	@ 0x50
 8009008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800900c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	00da      	lsls	r2, r3, #3
 8009016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009018:	4413      	add	r3, r2
 800901a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800901e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009024:	b29a      	uxth	r2, r3
 8009026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009028:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800902a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800902e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	891b      	ldrh	r3, [r3, #8]
 8009036:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800903a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800903e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6959      	ldr	r1, [r3, #20]
 8009046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800904a:	b29b      	uxth	r3, r3
 800904c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009050:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009054:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009058:	6800      	ldr	r0, [r0, #0]
 800905a:	f001 f869 	bl	800a130 <USB_WritePMA>
            ep->xfer_buff += len;
 800905e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	695a      	ldr	r2, [r3, #20]
 800906a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800906e:	441a      	add	r2, r3
 8009070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800907c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6a1a      	ldr	r2, [r3, #32]
 8009088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800908c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	429a      	cmp	r2, r3
 8009096:	d90f      	bls.n	80090b8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800909c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6a1a      	ldr	r2, [r3, #32]
 80090a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a8:	1ad2      	subs	r2, r2, r3
 80090aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	621a      	str	r2, [r3, #32]
 80090b6:	e00e      	b.n	80090d6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80090b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6a1b      	ldr	r3, [r3, #32]
 80090c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80090c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2200      	movs	r2, #0
 80090d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80090e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	785b      	ldrb	r3, [r3, #1]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d177      	bne.n	80091e2 <USB_EPStartXfer+0x85e>
 80090f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009102:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800910c:	b29b      	uxth	r3, r3
 800910e:	461a      	mov	r2, r3
 8009110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009112:	4413      	add	r3, r2
 8009114:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800911a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	00da      	lsls	r2, r3, #3
 8009124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009126:	4413      	add	r3, r2
 8009128:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800912c:	637b      	str	r3, [r7, #52]	@ 0x34
 800912e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009138:	b29a      	uxth	r2, r3
 800913a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800913c:	801a      	strh	r2, [r3, #0]
 800913e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10a      	bne.n	800915c <USB_EPStartXfer+0x7d8>
 8009146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	b29b      	uxth	r3, r3
 800914c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009154:	b29a      	uxth	r2, r3
 8009156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009158:	801a      	strh	r2, [r3, #0]
 800915a:	e067      	b.n	800922c <USB_EPStartXfer+0x8a8>
 800915c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009160:	2b3e      	cmp	r3, #62	@ 0x3e
 8009162:	d81c      	bhi.n	800919e <USB_EPStartXfer+0x81a>
 8009164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009168:	085b      	lsrs	r3, r3, #1
 800916a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800916e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	2b00      	cmp	r3, #0
 8009178:	d004      	beq.n	8009184 <USB_EPStartXfer+0x800>
 800917a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800917e:	3301      	adds	r3, #1
 8009180:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	b29a      	uxth	r2, r3
 800918a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800918e:	b29b      	uxth	r3, r3
 8009190:	029b      	lsls	r3, r3, #10
 8009192:	b29b      	uxth	r3, r3
 8009194:	4313      	orrs	r3, r2
 8009196:	b29a      	uxth	r2, r3
 8009198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800919a:	801a      	strh	r2, [r3, #0]
 800919c:	e046      	b.n	800922c <USB_EPStartXfer+0x8a8>
 800919e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091a2:	095b      	lsrs	r3, r3, #5
 80091a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80091a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ac:	f003 031f 	and.w	r3, r3, #31
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d104      	bne.n	80091be <USB_EPStartXfer+0x83a>
 80091b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091b8:	3b01      	subs	r3, #1
 80091ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80091be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c0:	881b      	ldrh	r3, [r3, #0]
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	029b      	lsls	r3, r3, #10
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	4313      	orrs	r3, r2
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091da:	b29a      	uxth	r2, r3
 80091dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091de:	801a      	strh	r2, [r3, #0]
 80091e0:	e024      	b.n	800922c <USB_EPStartXfer+0x8a8>
 80091e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	785b      	ldrb	r3, [r3, #1]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d11c      	bne.n	800922c <USB_EPStartXfer+0x8a8>
 80091f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009200:	b29b      	uxth	r3, r3
 8009202:	461a      	mov	r2, r3
 8009204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009206:	4413      	add	r3, r2
 8009208:	643b      	str	r3, [r7, #64]	@ 0x40
 800920a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800920e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	00da      	lsls	r2, r3, #3
 8009218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800921a:	4413      	add	r3, r2
 800921c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009226:	b29a      	uxth	r2, r3
 8009228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800922a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800922c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	895b      	ldrh	r3, [r3, #10]
 8009238:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800923c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6959      	ldr	r1, [r3, #20]
 8009248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800924c:	b29b      	uxth	r3, r3
 800924e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009252:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009256:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800925a:	6800      	ldr	r0, [r0, #0]
 800925c:	f000 ff68 	bl	800a130 <USB_WritePMA>
 8009260:	e227      	b.n	80096b2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4413      	add	r3, r2
 800928c:	881b      	ldrh	r3, [r3, #0]
 800928e:	b29b      	uxth	r3, r3
 8009290:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009298:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800929c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	441a      	add	r2, r3
 80092b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80092ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80092ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	461a      	mov	r2, r3
 80092ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092ee:	4413      	add	r3, r2
 80092f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	00da      	lsls	r2, r3, #3
 8009300:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009302:	4413      	add	r3, r2
 8009304:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009308:	65bb      	str	r3, [r7, #88]	@ 0x58
 800930a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800930e:	b29a      	uxth	r2, r3
 8009310:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009312:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	891b      	ldrh	r3, [r3, #8]
 8009320:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6959      	ldr	r1, [r3, #20]
 8009330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009334:	b29b      	uxth	r3, r3
 8009336:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800933a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800933e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009342:	6800      	ldr	r0, [r0, #0]
 8009344:	f000 fef4 	bl	800a130 <USB_WritePMA>
 8009348:	e1b3      	b.n	80096b2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800934a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800934e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6a1a      	ldr	r2, [r3, #32]
 8009356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800935a:	1ad2      	subs	r2, r2, r3
 800935c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800936c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	b29b      	uxth	r3, r3
 8009386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 80c6 	beq.w	800951c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	673b      	str	r3, [r7, #112]	@ 0x70
 800939c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	785b      	ldrb	r3, [r3, #1]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d177      	bne.n	800949c <USB_EPStartXfer+0xb18>
 80093ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	461a      	mov	r2, r3
 80093ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093cc:	4413      	add	r3, r2
 80093ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	00da      	lsls	r2, r3, #3
 80093de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093e0:	4413      	add	r3, r2
 80093e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80093e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093f6:	801a      	strh	r2, [r3, #0]
 80093f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10a      	bne.n	8009416 <USB_EPStartXfer+0xa92>
 8009400:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	b29b      	uxth	r3, r3
 8009406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800940a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800940e:	b29a      	uxth	r2, r3
 8009410:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009412:	801a      	strh	r2, [r3, #0]
 8009414:	e067      	b.n	80094e6 <USB_EPStartXfer+0xb62>
 8009416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800941a:	2b3e      	cmp	r3, #62	@ 0x3e
 800941c:	d81c      	bhi.n	8009458 <USB_EPStartXfer+0xad4>
 800941e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009422:	085b      	lsrs	r3, r3, #1
 8009424:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b00      	cmp	r3, #0
 8009432:	d004      	beq.n	800943e <USB_EPStartXfer+0xaba>
 8009434:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009438:	3301      	adds	r3, #1
 800943a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800943e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	b29a      	uxth	r2, r3
 8009444:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009448:	b29b      	uxth	r3, r3
 800944a:	029b      	lsls	r3, r3, #10
 800944c:	b29b      	uxth	r3, r3
 800944e:	4313      	orrs	r3, r2
 8009450:	b29a      	uxth	r2, r3
 8009452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009454:	801a      	strh	r2, [r3, #0]
 8009456:	e046      	b.n	80094e6 <USB_EPStartXfer+0xb62>
 8009458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800945c:	095b      	lsrs	r3, r3, #5
 800945e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009466:	f003 031f 	and.w	r3, r3, #31
 800946a:	2b00      	cmp	r3, #0
 800946c:	d104      	bne.n	8009478 <USB_EPStartXfer+0xaf4>
 800946e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009472:	3b01      	subs	r3, #1
 8009474:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	b29a      	uxth	r2, r3
 800947e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009482:	b29b      	uxth	r3, r3
 8009484:	029b      	lsls	r3, r3, #10
 8009486:	b29b      	uxth	r3, r3
 8009488:	4313      	orrs	r3, r2
 800948a:	b29b      	uxth	r3, r3
 800948c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009494:	b29a      	uxth	r2, r3
 8009496:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009498:	801a      	strh	r2, [r3, #0]
 800949a:	e024      	b.n	80094e6 <USB_EPStartXfer+0xb62>
 800949c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	785b      	ldrb	r3, [r3, #1]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d11c      	bne.n	80094e6 <USB_EPStartXfer+0xb62>
 80094ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	461a      	mov	r2, r3
 80094be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094c0:	4413      	add	r3, r2
 80094c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80094c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	00da      	lsls	r2, r3, #3
 80094d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094d4:	4413      	add	r3, r2
 80094d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80094e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	895b      	ldrh	r3, [r3, #10]
 80094f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6959      	ldr	r1, [r3, #20]
 8009502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009506:	b29b      	uxth	r3, r3
 8009508:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800950c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009510:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009514:	6800      	ldr	r0, [r0, #0]
 8009516:	f000 fe0b 	bl	800a130 <USB_WritePMA>
 800951a:	e0ca      	b.n	80096b2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800951c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	785b      	ldrb	r3, [r3, #1]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d177      	bne.n	800961c <USB_EPStartXfer+0xc98>
 800952c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009530:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800953c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009546:	b29b      	uxth	r3, r3
 8009548:	461a      	mov	r2, r3
 800954a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800954c:	4413      	add	r3, r2
 800954e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	00da      	lsls	r2, r3, #3
 800955e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009560:	4413      	add	r3, r2
 8009562:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009566:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	b29b      	uxth	r3, r3
 800956e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009572:	b29a      	uxth	r2, r3
 8009574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009576:	801a      	strh	r2, [r3, #0]
 8009578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <USB_EPStartXfer+0xc12>
 8009580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	b29b      	uxth	r3, r3
 8009586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800958a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800958e:	b29a      	uxth	r2, r3
 8009590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009592:	801a      	strh	r2, [r3, #0]
 8009594:	e073      	b.n	800967e <USB_EPStartXfer+0xcfa>
 8009596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800959a:	2b3e      	cmp	r3, #62	@ 0x3e
 800959c:	d81c      	bhi.n	80095d8 <USB_EPStartXfer+0xc54>
 800959e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095a2:	085b      	lsrs	r3, r3, #1
 80095a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80095a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d004      	beq.n	80095be <USB_EPStartXfer+0xc3a>
 80095b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80095b8:	3301      	adds	r3, #1
 80095ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80095be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	029b      	lsls	r3, r3, #10
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	4313      	orrs	r3, r2
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095d4:	801a      	strh	r2, [r3, #0]
 80095d6:	e052      	b.n	800967e <USB_EPStartXfer+0xcfa>
 80095d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095dc:	095b      	lsrs	r3, r3, #5
 80095de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80095e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e6:	f003 031f 	and.w	r3, r3, #31
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d104      	bne.n	80095f8 <USB_EPStartXfer+0xc74>
 80095ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80095f2:	3b01      	subs	r3, #1
 80095f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80095f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009602:	b29b      	uxth	r3, r3
 8009604:	029b      	lsls	r3, r3, #10
 8009606:	b29b      	uxth	r3, r3
 8009608:	4313      	orrs	r3, r2
 800960a:	b29b      	uxth	r3, r3
 800960c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009614:	b29a      	uxth	r2, r3
 8009616:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009618:	801a      	strh	r2, [r3, #0]
 800961a:	e030      	b.n	800967e <USB_EPStartXfer+0xcfa>
 800961c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	785b      	ldrb	r3, [r3, #1]
 8009628:	2b01      	cmp	r3, #1
 800962a:	d128      	bne.n	800967e <USB_EPStartXfer+0xcfa>
 800962c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009630:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800963a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800963e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009648:	b29b      	uxth	r3, r3
 800964a:	461a      	mov	r2, r3
 800964c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009650:	4413      	add	r3, r2
 8009652:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800965a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	00da      	lsls	r2, r3, #3
 8009664:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009668:	4413      	add	r3, r2
 800966a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800966e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009676:	b29a      	uxth	r2, r3
 8009678:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800967c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800967e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	891b      	ldrh	r3, [r3, #8]
 800968a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800968e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6959      	ldr	r1, [r3, #20]
 800969a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800969e:	b29b      	uxth	r3, r3
 80096a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80096a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80096a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80096ac:	6800      	ldr	r0, [r0, #0]
 80096ae:	f000 fd3f 	bl	800a130 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80096b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4413      	add	r3, r2
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096d8:	817b      	strh	r3, [r7, #10]
 80096da:	897b      	ldrh	r3, [r7, #10]
 80096dc:	f083 0310 	eor.w	r3, r3, #16
 80096e0:	817b      	strh	r3, [r7, #10]
 80096e2:	897b      	ldrh	r3, [r7, #10]
 80096e4:	f083 0320 	eor.w	r3, r3, #32
 80096e8:	817b      	strh	r3, [r7, #10]
 80096ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	441a      	add	r2, r3
 8009704:	897b      	ldrh	r3, [r7, #10]
 8009706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800970a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800970e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009716:	b29b      	uxth	r3, r3
 8009718:	8013      	strh	r3, [r2, #0]
 800971a:	f000 bcdf 	b.w	800a0dc <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800971e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	7b1b      	ldrb	r3, [r3, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	f040 80bc 	bne.w	80098a8 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	699a      	ldr	r2, [r3, #24]
 800973c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	429a      	cmp	r2, r3
 800974a:	d917      	bls.n	800977c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800974c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800975c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	699a      	ldr	r2, [r3, #24]
 8009768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800976c:	1ad2      	subs	r2, r2, r3
 800976e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	619a      	str	r2, [r3, #24]
 800977a:	e00e      	b.n	800979a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800977c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800978c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2200      	movs	r2, #0
 8009798:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800979a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800979e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80097a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	461a      	mov	r2, r3
 80097ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80097be:	4413      	add	r3, r2
 80097c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80097c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	00da      	lsls	r2, r3, #3
 80097d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80097d6:	4413      	add	r3, r2
 80097d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80097dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80097e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097e4:	881b      	ldrh	r3, [r3, #0]
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097f2:	801a      	strh	r2, [r3, #0]
 80097f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10d      	bne.n	8009818 <USB_EPStartXfer+0xe94>
 80097fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	b29b      	uxth	r3, r3
 8009804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800980c:	b29a      	uxth	r2, r3
 800980e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009812:	801a      	strh	r2, [r3, #0]
 8009814:	f000 bc28 	b.w	800a068 <USB_EPStartXfer+0x16e4>
 8009818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800981c:	2b3e      	cmp	r3, #62	@ 0x3e
 800981e:	d81f      	bhi.n	8009860 <USB_EPStartXfer+0xedc>
 8009820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009824:	085b      	lsrs	r3, r3, #1
 8009826:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800982a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	2b00      	cmp	r3, #0
 8009834:	d004      	beq.n	8009840 <USB_EPStartXfer+0xebc>
 8009836:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800983a:	3301      	adds	r3, #1
 800983c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009840:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	b29a      	uxth	r2, r3
 8009848:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800984c:	b29b      	uxth	r3, r3
 800984e:	029b      	lsls	r3, r3, #10
 8009850:	b29b      	uxth	r3, r3
 8009852:	4313      	orrs	r3, r2
 8009854:	b29a      	uxth	r2, r3
 8009856:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800985a:	801a      	strh	r2, [r3, #0]
 800985c:	f000 bc04 	b.w	800a068 <USB_EPStartXfer+0x16e4>
 8009860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009864:	095b      	lsrs	r3, r3, #5
 8009866:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800986a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800986e:	f003 031f 	and.w	r3, r3, #31
 8009872:	2b00      	cmp	r3, #0
 8009874:	d104      	bne.n	8009880 <USB_EPStartXfer+0xefc>
 8009876:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800987a:	3b01      	subs	r3, #1
 800987c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009880:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009884:	881b      	ldrh	r3, [r3, #0]
 8009886:	b29a      	uxth	r2, r3
 8009888:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800988c:	b29b      	uxth	r3, r3
 800988e:	029b      	lsls	r3, r3, #10
 8009890:	b29b      	uxth	r3, r3
 8009892:	4313      	orrs	r3, r2
 8009894:	b29b      	uxth	r3, r3
 8009896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800989a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800989e:	b29a      	uxth	r2, r3
 80098a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098a4:	801a      	strh	r2, [r3, #0]
 80098a6:	e3df      	b.n	800a068 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80098a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	78db      	ldrb	r3, [r3, #3]
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	f040 8218 	bne.w	8009cea <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80098ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	785b      	ldrb	r3, [r3, #1]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f040 809d 	bne.w	8009a06 <USB_EPStartXfer+0x1082>
 80098cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80098da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	461a      	mov	r2, r3
 80098ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098f0:	4413      	add	r3, r2
 80098f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80098f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	00da      	lsls	r2, r3, #3
 8009904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009908:	4413      	add	r3, r2
 800990a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800990e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009912:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	b29b      	uxth	r3, r3
 800991a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800991e:	b29a      	uxth	r2, r3
 8009920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009924:	801a      	strh	r2, [r3, #0]
 8009926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800992a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10c      	bne.n	8009950 <USB_EPStartXfer+0xfcc>
 8009936:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	b29b      	uxth	r3, r3
 800993e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009946:	b29a      	uxth	r2, r3
 8009948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800994c:	801a      	strh	r2, [r3, #0]
 800994e:	e08f      	b.n	8009a70 <USB_EPStartXfer+0x10ec>
 8009950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	2b3e      	cmp	r3, #62	@ 0x3e
 800995e:	d826      	bhi.n	80099ae <USB_EPStartXfer+0x102a>
 8009960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	085b      	lsrs	r3, r3, #1
 800996e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	d004      	beq.n	8009990 <USB_EPStartXfer+0x100c>
 8009986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800998a:	3301      	adds	r3, #1
 800998c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009990:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	b29a      	uxth	r2, r3
 8009998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800999c:	b29b      	uxth	r3, r3
 800999e:	029b      	lsls	r3, r3, #10
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	4313      	orrs	r3, r2
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80099aa:	801a      	strh	r2, [r3, #0]
 80099ac:	e060      	b.n	8009a70 <USB_EPStartXfer+0x10ec>
 80099ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	095b      	lsrs	r3, r3, #5
 80099bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80099c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	f003 031f 	and.w	r3, r3, #31
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d104      	bne.n	80099de <USB_EPStartXfer+0x105a>
 80099d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099d8:	3b01      	subs	r3, #1
 80099da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80099de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	029b      	lsls	r3, r3, #10
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	4313      	orrs	r3, r2
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009a02:	801a      	strh	r2, [r3, #0]
 8009a04:	e034      	b.n	8009a70 <USB_EPStartXfer+0x10ec>
 8009a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	785b      	ldrb	r3, [r3, #1]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d12c      	bne.n	8009a70 <USB_EPStartXfer+0x10ec>
 8009a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	461a      	mov	r2, r3
 8009a36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	00da      	lsls	r2, r3, #3
 8009a4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009a52:	4413      	add	r3, r2
 8009a54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009a6e:	801a      	strh	r2, [r3, #0]
 8009a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	785b      	ldrb	r3, [r3, #1]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f040 809d 	bne.w	8009bca <USB_EPStartXfer+0x1246>
 8009a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	00da      	lsls	r2, r3, #3
 8009ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009acc:	4413      	add	r3, r2
 8009ace:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ad2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ad6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ae8:	801a      	strh	r2, [r3, #0]
 8009aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10c      	bne.n	8009b14 <USB_EPStartXfer+0x1190>
 8009afa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b10:	801a      	strh	r2, [r3, #0]
 8009b12:	e088      	b.n	8009c26 <USB_EPStartXfer+0x12a2>
 8009b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b22:	d826      	bhi.n	8009b72 <USB_EPStartXfer+0x11ee>
 8009b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	085b      	lsrs	r3, r3, #1
 8009b32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d004      	beq.n	8009b54 <USB_EPStartXfer+0x11d0>
 8009b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b4e:	3301      	adds	r3, #1
 8009b50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	029b      	lsls	r3, r3, #10
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	4313      	orrs	r3, r2
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b6e:	801a      	strh	r2, [r3, #0]
 8009b70:	e059      	b.n	8009c26 <USB_EPStartXfer+0x12a2>
 8009b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	f003 031f 	and.w	r3, r3, #31
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d104      	bne.n	8009ba2 <USB_EPStartXfer+0x121e>
 8009b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ba2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ba6:	881b      	ldrh	r3, [r3, #0]
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	029b      	lsls	r3, r3, #10
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009bc6:	801a      	strh	r2, [r3, #0]
 8009bc8:	e02d      	b.n	8009c26 <USB_EPStartXfer+0x12a2>
 8009bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	785b      	ldrb	r3, [r3, #1]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d125      	bne.n	8009c26 <USB_EPStartXfer+0x12a2>
 8009bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	461a      	mov	r2, r3
 8009bec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	00da      	lsls	r2, r3, #3
 8009c04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009c08:	4413      	add	r3, r2
 8009c0a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c24:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	69db      	ldr	r3, [r3, #28]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f000 8218 	beq.w	800a068 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009c5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d005      	beq.n	8009c70 <USB_EPStartXfer+0x12ec>
 8009c64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10d      	bne.n	8009c8c <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f040 81f5 	bne.w	800a068 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f040 81ee 	bne.w	800a068 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	881b      	ldrh	r3, [r3, #0]
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cb2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	441a      	add	r2, r3
 8009cd0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009cd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ce0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	8013      	strh	r3, [r2, #0]
 8009ce8:	e1be      	b.n	800a068 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	78db      	ldrb	r3, [r3, #3]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	f040 81b4 	bne.w	800a064 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	699a      	ldr	r2, [r3, #24]
 8009d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d917      	bls.n	8009d48 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8009d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	699a      	ldr	r2, [r3, #24]
 8009d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d38:	1ad2      	subs	r2, r2, r3
 8009d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	619a      	str	r2, [r3, #24]
 8009d46:	e00e      	b.n	8009d66 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8009d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	785b      	ldrb	r3, [r3, #1]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f040 8085 	bne.w	8009e82 <USB_EPStartXfer+0x14fe>
 8009d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	461a      	mov	r2, r3
 8009d98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009d9c:	4413      	add	r3, r2
 8009d9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	00da      	lsls	r2, r3, #3
 8009db0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009db4:	4413      	add	r3, r2
 8009db6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009dba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009dc2:	881b      	ldrh	r3, [r3, #0]
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009dd0:	801a      	strh	r2, [r3, #0]
 8009dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10c      	bne.n	8009df4 <USB_EPStartXfer+0x1470>
 8009dda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009df0:	801a      	strh	r2, [r3, #0]
 8009df2:	e077      	b.n	8009ee4 <USB_EPStartXfer+0x1560>
 8009df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df8:	2b3e      	cmp	r3, #62	@ 0x3e
 8009dfa:	d81e      	bhi.n	8009e3a <USB_EPStartXfer+0x14b6>
 8009dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e00:	085b      	lsrs	r3, r3, #1
 8009e02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d004      	beq.n	8009e1c <USB_EPStartXfer+0x1498>
 8009e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e16:	3301      	adds	r3, #1
 8009e18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009e1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	029b      	lsls	r3, r3, #10
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e36:	801a      	strh	r2, [r3, #0]
 8009e38:	e054      	b.n	8009ee4 <USB_EPStartXfer+0x1560>
 8009e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e3e:	095b      	lsrs	r3, r3, #5
 8009e40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e48:	f003 031f 	and.w	r3, r3, #31
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d104      	bne.n	8009e5a <USB_EPStartXfer+0x14d6>
 8009e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e54:	3b01      	subs	r3, #1
 8009e56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009e5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	029b      	lsls	r3, r3, #10
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e7e:	801a      	strh	r2, [r3, #0]
 8009e80:	e030      	b.n	8009ee4 <USB_EPStartXfer+0x1560>
 8009e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	785b      	ldrb	r3, [r3, #1]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d128      	bne.n	8009ee4 <USB_EPStartXfer+0x1560>
 8009e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ea4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009eb6:	4413      	add	r3, r2
 8009eb8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	00da      	lsls	r2, r3, #3
 8009eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009ece:	4413      	add	r3, r2
 8009ed0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009ee2:	801a      	strh	r2, [r3, #0]
 8009ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ee8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	785b      	ldrb	r3, [r3, #1]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f040 8085 	bne.w	800a00e <USB_EPStartXfer+0x168a>
 8009f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	461a      	mov	r2, r3
 8009f24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009f28:	4413      	add	r3, r2
 8009f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	00da      	lsls	r2, r3, #3
 8009f3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009f40:	4413      	add	r3, r2
 8009f42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f4e:	881b      	ldrh	r3, [r3, #0]
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f5c:	801a      	strh	r2, [r3, #0]
 8009f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10c      	bne.n	8009f80 <USB_EPStartXfer+0x15fc>
 8009f66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f6a:	881b      	ldrh	r3, [r3, #0]
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f7c:	801a      	strh	r2, [r3, #0]
 8009f7e:	e073      	b.n	800a068 <USB_EPStartXfer+0x16e4>
 8009f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f84:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f86:	d81e      	bhi.n	8009fc6 <USB_EPStartXfer+0x1642>
 8009f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f8c:	085b      	lsrs	r3, r3, #1
 8009f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f96:	f003 0301 	and.w	r3, r3, #1
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d004      	beq.n	8009fa8 <USB_EPStartXfer+0x1624>
 8009f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009fa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009fac:	881b      	ldrh	r3, [r3, #0]
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	029b      	lsls	r3, r3, #10
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009fc2:	801a      	strh	r2, [r3, #0]
 8009fc4:	e050      	b.n	800a068 <USB_EPStartXfer+0x16e4>
 8009fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fca:	095b      	lsrs	r3, r3, #5
 8009fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd4:	f003 031f 	and.w	r3, r3, #31
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d104      	bne.n	8009fe6 <USB_EPStartXfer+0x1662>
 8009fdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009fe6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009fea:	881b      	ldrh	r3, [r3, #0]
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	029b      	lsls	r3, r3, #10
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a004:	b29a      	uxth	r2, r3
 800a006:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a00a:	801a      	strh	r2, [r3, #0]
 800a00c:	e02c      	b.n	800a068 <USB_EPStartXfer+0x16e4>
 800a00e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	785b      	ldrb	r3, [r3, #1]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d124      	bne.n	800a068 <USB_EPStartXfer+0x16e4>
 800a01e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a022:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	461a      	mov	r2, r3
 800a030:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a034:	4413      	add	r3, r2
 800a036:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a03a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a03e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	00da      	lsls	r2, r3, #3
 800a048:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a04c:	4413      	add	r3, r2
 800a04e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a052:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a060:	801a      	strh	r2, [r3, #0]
 800a062:	e001      	b.n	800a068 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e03a      	b.n	800a0de <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a06c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	881b      	ldrh	r3, [r3, #0]
 800a084:	b29b      	uxth	r3, r3
 800a086:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a08a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a08e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a092:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a096:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a09a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a09e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a0a2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a0a6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a0aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	441a      	add	r2, r3
 800a0c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a0c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a0f4:	78fb      	ldrb	r3, [r7, #3]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d103      	bne.n	800a102 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2280      	movs	r2, #128	@ 0x80
 800a0fe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a11e:	b29b      	uxth	r3, r3
 800a120:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a122:	68fb      	ldr	r3, [r7, #12]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a130:	b480      	push	{r7}
 800a132:	b08b      	sub	sp, #44	@ 0x2c
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	4611      	mov	r1, r2
 800a13c:	461a      	mov	r2, r3
 800a13e:	460b      	mov	r3, r1
 800a140:	80fb      	strh	r3, [r7, #6]
 800a142:	4613      	mov	r3, r2
 800a144:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a146:	88bb      	ldrh	r3, [r7, #4]
 800a148:	3301      	adds	r3, #1
 800a14a:	085b      	lsrs	r3, r3, #1
 800a14c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a156:	88fa      	ldrh	r2, [r7, #6]
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	4413      	add	r3, r2
 800a15c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a160:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	627b      	str	r3, [r7, #36]	@ 0x24
 800a166:	e01b      	b.n	800a1a0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	3301      	adds	r3, #1
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	021b      	lsls	r3, r3, #8
 800a176:	b21a      	sxth	r2, r3
 800a178:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	b21b      	sxth	r3, r3
 800a180:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	8a7a      	ldrh	r2, [r7, #18]
 800a186:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	3302      	adds	r3, #2
 800a18c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	3301      	adds	r3, #1
 800a192:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	3301      	adds	r3, #1
 800a198:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19c:	3b01      	subs	r3, #1
 800a19e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1e0      	bne.n	800a168 <USB_WritePMA+0x38>
  }
}
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
 800a1aa:	372c      	adds	r7, #44	@ 0x2c
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b08b      	sub	sp, #44	@ 0x2c
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	4611      	mov	r1, r2
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	80fb      	strh	r3, [r7, #6]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a1ca:	88bb      	ldrh	r3, [r7, #4]
 800a1cc:	085b      	lsrs	r3, r3, #1
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a1da:	88fa      	ldrh	r2, [r7, #6]
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a1e4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1ea:	e018      	b.n	800a21e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a1ec:	6a3b      	ldr	r3, [r7, #32]
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	3302      	adds	r3, #2
 800a1f8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	3301      	adds	r3, #1
 800a206:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	0a1b      	lsrs	r3, r3, #8
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	3301      	adds	r3, #1
 800a216:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21a:	3b01      	subs	r3, #1
 800a21c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e3      	bne.n	800a1ec <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a224:	88bb      	ldrh	r3, [r7, #4]
 800a226:	f003 0301 	and.w	r3, r3, #1
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d007      	beq.n	800a240 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a230:	6a3b      	ldr	r3, [r7, #32]
 800a232:	881b      	ldrh	r3, [r3, #0]
 800a234:	b29b      	uxth	r3, r3
 800a236:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	701a      	strb	r2, [r3, #0]
  }
}
 800a240:	bf00      	nop
 800a242:	372c      	adds	r7, #44	@ 0x2c
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <__cvt>:
 800a24c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a250:	ec57 6b10 	vmov	r6, r7, d0
 800a254:	2f00      	cmp	r7, #0
 800a256:	460c      	mov	r4, r1
 800a258:	4619      	mov	r1, r3
 800a25a:	463b      	mov	r3, r7
 800a25c:	bfbb      	ittet	lt
 800a25e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a262:	461f      	movlt	r7, r3
 800a264:	2300      	movge	r3, #0
 800a266:	232d      	movlt	r3, #45	@ 0x2d
 800a268:	700b      	strb	r3, [r1, #0]
 800a26a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a26c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a270:	4691      	mov	r9, r2
 800a272:	f023 0820 	bic.w	r8, r3, #32
 800a276:	bfbc      	itt	lt
 800a278:	4632      	movlt	r2, r6
 800a27a:	4616      	movlt	r6, r2
 800a27c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a280:	d005      	beq.n	800a28e <__cvt+0x42>
 800a282:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a286:	d100      	bne.n	800a28a <__cvt+0x3e>
 800a288:	3401      	adds	r4, #1
 800a28a:	2102      	movs	r1, #2
 800a28c:	e000      	b.n	800a290 <__cvt+0x44>
 800a28e:	2103      	movs	r1, #3
 800a290:	ab03      	add	r3, sp, #12
 800a292:	9301      	str	r3, [sp, #4]
 800a294:	ab02      	add	r3, sp, #8
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	ec47 6b10 	vmov	d0, r6, r7
 800a29c:	4653      	mov	r3, sl
 800a29e:	4622      	mov	r2, r4
 800a2a0:	f000 fe5a 	bl	800af58 <_dtoa_r>
 800a2a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a2a8:	4605      	mov	r5, r0
 800a2aa:	d119      	bne.n	800a2e0 <__cvt+0x94>
 800a2ac:	f019 0f01 	tst.w	r9, #1
 800a2b0:	d00e      	beq.n	800a2d0 <__cvt+0x84>
 800a2b2:	eb00 0904 	add.w	r9, r0, r4
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	4639      	mov	r1, r7
 800a2be:	f7f6 fc0b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2c2:	b108      	cbz	r0, 800a2c8 <__cvt+0x7c>
 800a2c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2c8:	2230      	movs	r2, #48	@ 0x30
 800a2ca:	9b03      	ldr	r3, [sp, #12]
 800a2cc:	454b      	cmp	r3, r9
 800a2ce:	d31e      	bcc.n	800a30e <__cvt+0xc2>
 800a2d0:	9b03      	ldr	r3, [sp, #12]
 800a2d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2d4:	1b5b      	subs	r3, r3, r5
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	6013      	str	r3, [r2, #0]
 800a2da:	b004      	add	sp, #16
 800a2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a2e4:	eb00 0904 	add.w	r9, r0, r4
 800a2e8:	d1e5      	bne.n	800a2b6 <__cvt+0x6a>
 800a2ea:	7803      	ldrb	r3, [r0, #0]
 800a2ec:	2b30      	cmp	r3, #48	@ 0x30
 800a2ee:	d10a      	bne.n	800a306 <__cvt+0xba>
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	4639      	mov	r1, r7
 800a2f8:	f7f6 fbee 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2fc:	b918      	cbnz	r0, 800a306 <__cvt+0xba>
 800a2fe:	f1c4 0401 	rsb	r4, r4, #1
 800a302:	f8ca 4000 	str.w	r4, [sl]
 800a306:	f8da 3000 	ldr.w	r3, [sl]
 800a30a:	4499      	add	r9, r3
 800a30c:	e7d3      	b.n	800a2b6 <__cvt+0x6a>
 800a30e:	1c59      	adds	r1, r3, #1
 800a310:	9103      	str	r1, [sp, #12]
 800a312:	701a      	strb	r2, [r3, #0]
 800a314:	e7d9      	b.n	800a2ca <__cvt+0x7e>

0800a316 <__exponent>:
 800a316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a318:	2900      	cmp	r1, #0
 800a31a:	bfba      	itte	lt
 800a31c:	4249      	neglt	r1, r1
 800a31e:	232d      	movlt	r3, #45	@ 0x2d
 800a320:	232b      	movge	r3, #43	@ 0x2b
 800a322:	2909      	cmp	r1, #9
 800a324:	7002      	strb	r2, [r0, #0]
 800a326:	7043      	strb	r3, [r0, #1]
 800a328:	dd29      	ble.n	800a37e <__exponent+0x68>
 800a32a:	f10d 0307 	add.w	r3, sp, #7
 800a32e:	461d      	mov	r5, r3
 800a330:	270a      	movs	r7, #10
 800a332:	461a      	mov	r2, r3
 800a334:	fbb1 f6f7 	udiv	r6, r1, r7
 800a338:	fb07 1416 	mls	r4, r7, r6, r1
 800a33c:	3430      	adds	r4, #48	@ 0x30
 800a33e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a342:	460c      	mov	r4, r1
 800a344:	2c63      	cmp	r4, #99	@ 0x63
 800a346:	f103 33ff 	add.w	r3, r3, #4294967295
 800a34a:	4631      	mov	r1, r6
 800a34c:	dcf1      	bgt.n	800a332 <__exponent+0x1c>
 800a34e:	3130      	adds	r1, #48	@ 0x30
 800a350:	1e94      	subs	r4, r2, #2
 800a352:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a356:	1c41      	adds	r1, r0, #1
 800a358:	4623      	mov	r3, r4
 800a35a:	42ab      	cmp	r3, r5
 800a35c:	d30a      	bcc.n	800a374 <__exponent+0x5e>
 800a35e:	f10d 0309 	add.w	r3, sp, #9
 800a362:	1a9b      	subs	r3, r3, r2
 800a364:	42ac      	cmp	r4, r5
 800a366:	bf88      	it	hi
 800a368:	2300      	movhi	r3, #0
 800a36a:	3302      	adds	r3, #2
 800a36c:	4403      	add	r3, r0
 800a36e:	1a18      	subs	r0, r3, r0
 800a370:	b003      	add	sp, #12
 800a372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a374:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a378:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a37c:	e7ed      	b.n	800a35a <__exponent+0x44>
 800a37e:	2330      	movs	r3, #48	@ 0x30
 800a380:	3130      	adds	r1, #48	@ 0x30
 800a382:	7083      	strb	r3, [r0, #2]
 800a384:	70c1      	strb	r1, [r0, #3]
 800a386:	1d03      	adds	r3, r0, #4
 800a388:	e7f1      	b.n	800a36e <__exponent+0x58>
	...

0800a38c <_printf_float>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	b08d      	sub	sp, #52	@ 0x34
 800a392:	460c      	mov	r4, r1
 800a394:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a398:	4616      	mov	r6, r2
 800a39a:	461f      	mov	r7, r3
 800a39c:	4605      	mov	r5, r0
 800a39e:	f000 fcdb 	bl	800ad58 <_localeconv_r>
 800a3a2:	6803      	ldr	r3, [r0, #0]
 800a3a4:	9304      	str	r3, [sp, #16]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7f5 ff6a 	bl	8000280 <strlen>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3b0:	f8d8 3000 	ldr.w	r3, [r8]
 800a3b4:	9005      	str	r0, [sp, #20]
 800a3b6:	3307      	adds	r3, #7
 800a3b8:	f023 0307 	bic.w	r3, r3, #7
 800a3bc:	f103 0208 	add.w	r2, r3, #8
 800a3c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a3c4:	f8d4 b000 	ldr.w	fp, [r4]
 800a3c8:	f8c8 2000 	str.w	r2, [r8]
 800a3cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a3d4:	9307      	str	r3, [sp, #28]
 800a3d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a3da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a3de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3e2:	4b9c      	ldr	r3, [pc, #624]	@ (800a654 <_printf_float+0x2c8>)
 800a3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e8:	f7f6 fba8 	bl	8000b3c <__aeabi_dcmpun>
 800a3ec:	bb70      	cbnz	r0, 800a44c <_printf_float+0xc0>
 800a3ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3f2:	4b98      	ldr	r3, [pc, #608]	@ (800a654 <_printf_float+0x2c8>)
 800a3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f8:	f7f6 fb82 	bl	8000b00 <__aeabi_dcmple>
 800a3fc:	bb30      	cbnz	r0, 800a44c <_printf_float+0xc0>
 800a3fe:	2200      	movs	r2, #0
 800a400:	2300      	movs	r3, #0
 800a402:	4640      	mov	r0, r8
 800a404:	4649      	mov	r1, r9
 800a406:	f7f6 fb71 	bl	8000aec <__aeabi_dcmplt>
 800a40a:	b110      	cbz	r0, 800a412 <_printf_float+0x86>
 800a40c:	232d      	movs	r3, #45	@ 0x2d
 800a40e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a412:	4a91      	ldr	r2, [pc, #580]	@ (800a658 <_printf_float+0x2cc>)
 800a414:	4b91      	ldr	r3, [pc, #580]	@ (800a65c <_printf_float+0x2d0>)
 800a416:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a41a:	bf94      	ite	ls
 800a41c:	4690      	movls	r8, r2
 800a41e:	4698      	movhi	r8, r3
 800a420:	2303      	movs	r3, #3
 800a422:	6123      	str	r3, [r4, #16]
 800a424:	f02b 0304 	bic.w	r3, fp, #4
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	f04f 0900 	mov.w	r9, #0
 800a42e:	9700      	str	r7, [sp, #0]
 800a430:	4633      	mov	r3, r6
 800a432:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a434:	4621      	mov	r1, r4
 800a436:	4628      	mov	r0, r5
 800a438:	f000 f9d2 	bl	800a7e0 <_printf_common>
 800a43c:	3001      	adds	r0, #1
 800a43e:	f040 808d 	bne.w	800a55c <_printf_float+0x1d0>
 800a442:	f04f 30ff 	mov.w	r0, #4294967295
 800a446:	b00d      	add	sp, #52	@ 0x34
 800a448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44c:	4642      	mov	r2, r8
 800a44e:	464b      	mov	r3, r9
 800a450:	4640      	mov	r0, r8
 800a452:	4649      	mov	r1, r9
 800a454:	f7f6 fb72 	bl	8000b3c <__aeabi_dcmpun>
 800a458:	b140      	cbz	r0, 800a46c <_printf_float+0xe0>
 800a45a:	464b      	mov	r3, r9
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	bfbc      	itt	lt
 800a460:	232d      	movlt	r3, #45	@ 0x2d
 800a462:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a466:	4a7e      	ldr	r2, [pc, #504]	@ (800a660 <_printf_float+0x2d4>)
 800a468:	4b7e      	ldr	r3, [pc, #504]	@ (800a664 <_printf_float+0x2d8>)
 800a46a:	e7d4      	b.n	800a416 <_printf_float+0x8a>
 800a46c:	6863      	ldr	r3, [r4, #4]
 800a46e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a472:	9206      	str	r2, [sp, #24]
 800a474:	1c5a      	adds	r2, r3, #1
 800a476:	d13b      	bne.n	800a4f0 <_printf_float+0x164>
 800a478:	2306      	movs	r3, #6
 800a47a:	6063      	str	r3, [r4, #4]
 800a47c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a480:	2300      	movs	r3, #0
 800a482:	6022      	str	r2, [r4, #0]
 800a484:	9303      	str	r3, [sp, #12]
 800a486:	ab0a      	add	r3, sp, #40	@ 0x28
 800a488:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a48c:	ab09      	add	r3, sp, #36	@ 0x24
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	6861      	ldr	r1, [r4, #4]
 800a492:	ec49 8b10 	vmov	d0, r8, r9
 800a496:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a49a:	4628      	mov	r0, r5
 800a49c:	f7ff fed6 	bl	800a24c <__cvt>
 800a4a0:	9b06      	ldr	r3, [sp, #24]
 800a4a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a4a4:	2b47      	cmp	r3, #71	@ 0x47
 800a4a6:	4680      	mov	r8, r0
 800a4a8:	d129      	bne.n	800a4fe <_printf_float+0x172>
 800a4aa:	1cc8      	adds	r0, r1, #3
 800a4ac:	db02      	blt.n	800a4b4 <_printf_float+0x128>
 800a4ae:	6863      	ldr	r3, [r4, #4]
 800a4b0:	4299      	cmp	r1, r3
 800a4b2:	dd41      	ble.n	800a538 <_printf_float+0x1ac>
 800a4b4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a4b8:	fa5f fa8a 	uxtb.w	sl, sl
 800a4bc:	3901      	subs	r1, #1
 800a4be:	4652      	mov	r2, sl
 800a4c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a4c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a4c6:	f7ff ff26 	bl	800a316 <__exponent>
 800a4ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4cc:	1813      	adds	r3, r2, r0
 800a4ce:	2a01      	cmp	r2, #1
 800a4d0:	4681      	mov	r9, r0
 800a4d2:	6123      	str	r3, [r4, #16]
 800a4d4:	dc02      	bgt.n	800a4dc <_printf_float+0x150>
 800a4d6:	6822      	ldr	r2, [r4, #0]
 800a4d8:	07d2      	lsls	r2, r2, #31
 800a4da:	d501      	bpl.n	800a4e0 <_printf_float+0x154>
 800a4dc:	3301      	adds	r3, #1
 800a4de:	6123      	str	r3, [r4, #16]
 800a4e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d0a2      	beq.n	800a42e <_printf_float+0xa2>
 800a4e8:	232d      	movs	r3, #45	@ 0x2d
 800a4ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4ee:	e79e      	b.n	800a42e <_printf_float+0xa2>
 800a4f0:	9a06      	ldr	r2, [sp, #24]
 800a4f2:	2a47      	cmp	r2, #71	@ 0x47
 800a4f4:	d1c2      	bne.n	800a47c <_printf_float+0xf0>
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1c0      	bne.n	800a47c <_printf_float+0xf0>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e7bd      	b.n	800a47a <_printf_float+0xee>
 800a4fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a502:	d9db      	bls.n	800a4bc <_printf_float+0x130>
 800a504:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a508:	d118      	bne.n	800a53c <_printf_float+0x1b0>
 800a50a:	2900      	cmp	r1, #0
 800a50c:	6863      	ldr	r3, [r4, #4]
 800a50e:	dd0b      	ble.n	800a528 <_printf_float+0x19c>
 800a510:	6121      	str	r1, [r4, #16]
 800a512:	b913      	cbnz	r3, 800a51a <_printf_float+0x18e>
 800a514:	6822      	ldr	r2, [r4, #0]
 800a516:	07d0      	lsls	r0, r2, #31
 800a518:	d502      	bpl.n	800a520 <_printf_float+0x194>
 800a51a:	3301      	adds	r3, #1
 800a51c:	440b      	add	r3, r1
 800a51e:	6123      	str	r3, [r4, #16]
 800a520:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a522:	f04f 0900 	mov.w	r9, #0
 800a526:	e7db      	b.n	800a4e0 <_printf_float+0x154>
 800a528:	b913      	cbnz	r3, 800a530 <_printf_float+0x1a4>
 800a52a:	6822      	ldr	r2, [r4, #0]
 800a52c:	07d2      	lsls	r2, r2, #31
 800a52e:	d501      	bpl.n	800a534 <_printf_float+0x1a8>
 800a530:	3302      	adds	r3, #2
 800a532:	e7f4      	b.n	800a51e <_printf_float+0x192>
 800a534:	2301      	movs	r3, #1
 800a536:	e7f2      	b.n	800a51e <_printf_float+0x192>
 800a538:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a53e:	4299      	cmp	r1, r3
 800a540:	db05      	blt.n	800a54e <_printf_float+0x1c2>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	6121      	str	r1, [r4, #16]
 800a546:	07d8      	lsls	r0, r3, #31
 800a548:	d5ea      	bpl.n	800a520 <_printf_float+0x194>
 800a54a:	1c4b      	adds	r3, r1, #1
 800a54c:	e7e7      	b.n	800a51e <_printf_float+0x192>
 800a54e:	2900      	cmp	r1, #0
 800a550:	bfd4      	ite	le
 800a552:	f1c1 0202 	rsble	r2, r1, #2
 800a556:	2201      	movgt	r2, #1
 800a558:	4413      	add	r3, r2
 800a55a:	e7e0      	b.n	800a51e <_printf_float+0x192>
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	055a      	lsls	r2, r3, #21
 800a560:	d407      	bmi.n	800a572 <_printf_float+0x1e6>
 800a562:	6923      	ldr	r3, [r4, #16]
 800a564:	4642      	mov	r2, r8
 800a566:	4631      	mov	r1, r6
 800a568:	4628      	mov	r0, r5
 800a56a:	47b8      	blx	r7
 800a56c:	3001      	adds	r0, #1
 800a56e:	d12b      	bne.n	800a5c8 <_printf_float+0x23c>
 800a570:	e767      	b.n	800a442 <_printf_float+0xb6>
 800a572:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a576:	f240 80dd 	bls.w	800a734 <_printf_float+0x3a8>
 800a57a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a57e:	2200      	movs	r2, #0
 800a580:	2300      	movs	r3, #0
 800a582:	f7f6 faa9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a586:	2800      	cmp	r0, #0
 800a588:	d033      	beq.n	800a5f2 <_printf_float+0x266>
 800a58a:	4a37      	ldr	r2, [pc, #220]	@ (800a668 <_printf_float+0x2dc>)
 800a58c:	2301      	movs	r3, #1
 800a58e:	4631      	mov	r1, r6
 800a590:	4628      	mov	r0, r5
 800a592:	47b8      	blx	r7
 800a594:	3001      	adds	r0, #1
 800a596:	f43f af54 	beq.w	800a442 <_printf_float+0xb6>
 800a59a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a59e:	4543      	cmp	r3, r8
 800a5a0:	db02      	blt.n	800a5a8 <_printf_float+0x21c>
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	07d8      	lsls	r0, r3, #31
 800a5a6:	d50f      	bpl.n	800a5c8 <_printf_float+0x23c>
 800a5a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5ac:	4631      	mov	r1, r6
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	47b8      	blx	r7
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	f43f af45 	beq.w	800a442 <_printf_float+0xb6>
 800a5b8:	f04f 0900 	mov.w	r9, #0
 800a5bc:	f108 38ff 	add.w	r8, r8, #4294967295
 800a5c0:	f104 0a1a 	add.w	sl, r4, #26
 800a5c4:	45c8      	cmp	r8, r9
 800a5c6:	dc09      	bgt.n	800a5dc <_printf_float+0x250>
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	079b      	lsls	r3, r3, #30
 800a5cc:	f100 8103 	bmi.w	800a7d6 <_printf_float+0x44a>
 800a5d0:	68e0      	ldr	r0, [r4, #12]
 800a5d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5d4:	4298      	cmp	r0, r3
 800a5d6:	bfb8      	it	lt
 800a5d8:	4618      	movlt	r0, r3
 800a5da:	e734      	b.n	800a446 <_printf_float+0xba>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	4652      	mov	r2, sl
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	47b8      	blx	r7
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	f43f af2b 	beq.w	800a442 <_printf_float+0xb6>
 800a5ec:	f109 0901 	add.w	r9, r9, #1
 800a5f0:	e7e8      	b.n	800a5c4 <_printf_float+0x238>
 800a5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	dc39      	bgt.n	800a66c <_printf_float+0x2e0>
 800a5f8:	4a1b      	ldr	r2, [pc, #108]	@ (800a668 <_printf_float+0x2dc>)
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	4631      	mov	r1, r6
 800a5fe:	4628      	mov	r0, r5
 800a600:	47b8      	blx	r7
 800a602:	3001      	adds	r0, #1
 800a604:	f43f af1d 	beq.w	800a442 <_printf_float+0xb6>
 800a608:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a60c:	ea59 0303 	orrs.w	r3, r9, r3
 800a610:	d102      	bne.n	800a618 <_printf_float+0x28c>
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	07d9      	lsls	r1, r3, #31
 800a616:	d5d7      	bpl.n	800a5c8 <_printf_float+0x23c>
 800a618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a61c:	4631      	mov	r1, r6
 800a61e:	4628      	mov	r0, r5
 800a620:	47b8      	blx	r7
 800a622:	3001      	adds	r0, #1
 800a624:	f43f af0d 	beq.w	800a442 <_printf_float+0xb6>
 800a628:	f04f 0a00 	mov.w	sl, #0
 800a62c:	f104 0b1a 	add.w	fp, r4, #26
 800a630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a632:	425b      	negs	r3, r3
 800a634:	4553      	cmp	r3, sl
 800a636:	dc01      	bgt.n	800a63c <_printf_float+0x2b0>
 800a638:	464b      	mov	r3, r9
 800a63a:	e793      	b.n	800a564 <_printf_float+0x1d8>
 800a63c:	2301      	movs	r3, #1
 800a63e:	465a      	mov	r2, fp
 800a640:	4631      	mov	r1, r6
 800a642:	4628      	mov	r0, r5
 800a644:	47b8      	blx	r7
 800a646:	3001      	adds	r0, #1
 800a648:	f43f aefb 	beq.w	800a442 <_printf_float+0xb6>
 800a64c:	f10a 0a01 	add.w	sl, sl, #1
 800a650:	e7ee      	b.n	800a630 <_printf_float+0x2a4>
 800a652:	bf00      	nop
 800a654:	7fefffff 	.word	0x7fefffff
 800a658:	0800cfd0 	.word	0x0800cfd0
 800a65c:	0800cfd4 	.word	0x0800cfd4
 800a660:	0800cfd8 	.word	0x0800cfd8
 800a664:	0800cfdc 	.word	0x0800cfdc
 800a668:	0800cfe0 	.word	0x0800cfe0
 800a66c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a66e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a672:	4553      	cmp	r3, sl
 800a674:	bfa8      	it	ge
 800a676:	4653      	movge	r3, sl
 800a678:	2b00      	cmp	r3, #0
 800a67a:	4699      	mov	r9, r3
 800a67c:	dc36      	bgt.n	800a6ec <_printf_float+0x360>
 800a67e:	f04f 0b00 	mov.w	fp, #0
 800a682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a686:	f104 021a 	add.w	r2, r4, #26
 800a68a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a68c:	9306      	str	r3, [sp, #24]
 800a68e:	eba3 0309 	sub.w	r3, r3, r9
 800a692:	455b      	cmp	r3, fp
 800a694:	dc31      	bgt.n	800a6fa <_printf_float+0x36e>
 800a696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a698:	459a      	cmp	sl, r3
 800a69a:	dc3a      	bgt.n	800a712 <_printf_float+0x386>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	07da      	lsls	r2, r3, #31
 800a6a0:	d437      	bmi.n	800a712 <_printf_float+0x386>
 800a6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a4:	ebaa 0903 	sub.w	r9, sl, r3
 800a6a8:	9b06      	ldr	r3, [sp, #24]
 800a6aa:	ebaa 0303 	sub.w	r3, sl, r3
 800a6ae:	4599      	cmp	r9, r3
 800a6b0:	bfa8      	it	ge
 800a6b2:	4699      	movge	r9, r3
 800a6b4:	f1b9 0f00 	cmp.w	r9, #0
 800a6b8:	dc33      	bgt.n	800a722 <_printf_float+0x396>
 800a6ba:	f04f 0800 	mov.w	r8, #0
 800a6be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6c2:	f104 0b1a 	add.w	fp, r4, #26
 800a6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c8:	ebaa 0303 	sub.w	r3, sl, r3
 800a6cc:	eba3 0309 	sub.w	r3, r3, r9
 800a6d0:	4543      	cmp	r3, r8
 800a6d2:	f77f af79 	ble.w	800a5c8 <_printf_float+0x23c>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	465a      	mov	r2, fp
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4628      	mov	r0, r5
 800a6de:	47b8      	blx	r7
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	f43f aeae 	beq.w	800a442 <_printf_float+0xb6>
 800a6e6:	f108 0801 	add.w	r8, r8, #1
 800a6ea:	e7ec      	b.n	800a6c6 <_printf_float+0x33a>
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	4631      	mov	r1, r6
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	47b8      	blx	r7
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	d1c2      	bne.n	800a67e <_printf_float+0x2f2>
 800a6f8:	e6a3      	b.n	800a442 <_printf_float+0xb6>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	4631      	mov	r1, r6
 800a6fe:	4628      	mov	r0, r5
 800a700:	9206      	str	r2, [sp, #24]
 800a702:	47b8      	blx	r7
 800a704:	3001      	adds	r0, #1
 800a706:	f43f ae9c 	beq.w	800a442 <_printf_float+0xb6>
 800a70a:	9a06      	ldr	r2, [sp, #24]
 800a70c:	f10b 0b01 	add.w	fp, fp, #1
 800a710:	e7bb      	b.n	800a68a <_printf_float+0x2fe>
 800a712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a716:	4631      	mov	r1, r6
 800a718:	4628      	mov	r0, r5
 800a71a:	47b8      	blx	r7
 800a71c:	3001      	adds	r0, #1
 800a71e:	d1c0      	bne.n	800a6a2 <_printf_float+0x316>
 800a720:	e68f      	b.n	800a442 <_printf_float+0xb6>
 800a722:	9a06      	ldr	r2, [sp, #24]
 800a724:	464b      	mov	r3, r9
 800a726:	4442      	add	r2, r8
 800a728:	4631      	mov	r1, r6
 800a72a:	4628      	mov	r0, r5
 800a72c:	47b8      	blx	r7
 800a72e:	3001      	adds	r0, #1
 800a730:	d1c3      	bne.n	800a6ba <_printf_float+0x32e>
 800a732:	e686      	b.n	800a442 <_printf_float+0xb6>
 800a734:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a738:	f1ba 0f01 	cmp.w	sl, #1
 800a73c:	dc01      	bgt.n	800a742 <_printf_float+0x3b6>
 800a73e:	07db      	lsls	r3, r3, #31
 800a740:	d536      	bpl.n	800a7b0 <_printf_float+0x424>
 800a742:	2301      	movs	r3, #1
 800a744:	4642      	mov	r2, r8
 800a746:	4631      	mov	r1, r6
 800a748:	4628      	mov	r0, r5
 800a74a:	47b8      	blx	r7
 800a74c:	3001      	adds	r0, #1
 800a74e:	f43f ae78 	beq.w	800a442 <_printf_float+0xb6>
 800a752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a756:	4631      	mov	r1, r6
 800a758:	4628      	mov	r0, r5
 800a75a:	47b8      	blx	r7
 800a75c:	3001      	adds	r0, #1
 800a75e:	f43f ae70 	beq.w	800a442 <_printf_float+0xb6>
 800a762:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a766:	2200      	movs	r2, #0
 800a768:	2300      	movs	r3, #0
 800a76a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a76e:	f7f6 f9b3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a772:	b9c0      	cbnz	r0, 800a7a6 <_printf_float+0x41a>
 800a774:	4653      	mov	r3, sl
 800a776:	f108 0201 	add.w	r2, r8, #1
 800a77a:	4631      	mov	r1, r6
 800a77c:	4628      	mov	r0, r5
 800a77e:	47b8      	blx	r7
 800a780:	3001      	adds	r0, #1
 800a782:	d10c      	bne.n	800a79e <_printf_float+0x412>
 800a784:	e65d      	b.n	800a442 <_printf_float+0xb6>
 800a786:	2301      	movs	r3, #1
 800a788:	465a      	mov	r2, fp
 800a78a:	4631      	mov	r1, r6
 800a78c:	4628      	mov	r0, r5
 800a78e:	47b8      	blx	r7
 800a790:	3001      	adds	r0, #1
 800a792:	f43f ae56 	beq.w	800a442 <_printf_float+0xb6>
 800a796:	f108 0801 	add.w	r8, r8, #1
 800a79a:	45d0      	cmp	r8, sl
 800a79c:	dbf3      	blt.n	800a786 <_printf_float+0x3fa>
 800a79e:	464b      	mov	r3, r9
 800a7a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a7a4:	e6df      	b.n	800a566 <_printf_float+0x1da>
 800a7a6:	f04f 0800 	mov.w	r8, #0
 800a7aa:	f104 0b1a 	add.w	fp, r4, #26
 800a7ae:	e7f4      	b.n	800a79a <_printf_float+0x40e>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	4642      	mov	r2, r8
 800a7b4:	e7e1      	b.n	800a77a <_printf_float+0x3ee>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	464a      	mov	r2, r9
 800a7ba:	4631      	mov	r1, r6
 800a7bc:	4628      	mov	r0, r5
 800a7be:	47b8      	blx	r7
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	f43f ae3e 	beq.w	800a442 <_printf_float+0xb6>
 800a7c6:	f108 0801 	add.w	r8, r8, #1
 800a7ca:	68e3      	ldr	r3, [r4, #12]
 800a7cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7ce:	1a5b      	subs	r3, r3, r1
 800a7d0:	4543      	cmp	r3, r8
 800a7d2:	dcf0      	bgt.n	800a7b6 <_printf_float+0x42a>
 800a7d4:	e6fc      	b.n	800a5d0 <_printf_float+0x244>
 800a7d6:	f04f 0800 	mov.w	r8, #0
 800a7da:	f104 0919 	add.w	r9, r4, #25
 800a7de:	e7f4      	b.n	800a7ca <_printf_float+0x43e>

0800a7e0 <_printf_common>:
 800a7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e4:	4616      	mov	r6, r2
 800a7e6:	4698      	mov	r8, r3
 800a7e8:	688a      	ldr	r2, [r1, #8]
 800a7ea:	690b      	ldr	r3, [r1, #16]
 800a7ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	bfb8      	it	lt
 800a7f4:	4613      	movlt	r3, r2
 800a7f6:	6033      	str	r3, [r6, #0]
 800a7f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a7fc:	4607      	mov	r7, r0
 800a7fe:	460c      	mov	r4, r1
 800a800:	b10a      	cbz	r2, 800a806 <_printf_common+0x26>
 800a802:	3301      	adds	r3, #1
 800a804:	6033      	str	r3, [r6, #0]
 800a806:	6823      	ldr	r3, [r4, #0]
 800a808:	0699      	lsls	r1, r3, #26
 800a80a:	bf42      	ittt	mi
 800a80c:	6833      	ldrmi	r3, [r6, #0]
 800a80e:	3302      	addmi	r3, #2
 800a810:	6033      	strmi	r3, [r6, #0]
 800a812:	6825      	ldr	r5, [r4, #0]
 800a814:	f015 0506 	ands.w	r5, r5, #6
 800a818:	d106      	bne.n	800a828 <_printf_common+0x48>
 800a81a:	f104 0a19 	add.w	sl, r4, #25
 800a81e:	68e3      	ldr	r3, [r4, #12]
 800a820:	6832      	ldr	r2, [r6, #0]
 800a822:	1a9b      	subs	r3, r3, r2
 800a824:	42ab      	cmp	r3, r5
 800a826:	dc26      	bgt.n	800a876 <_printf_common+0x96>
 800a828:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a82c:	6822      	ldr	r2, [r4, #0]
 800a82e:	3b00      	subs	r3, #0
 800a830:	bf18      	it	ne
 800a832:	2301      	movne	r3, #1
 800a834:	0692      	lsls	r2, r2, #26
 800a836:	d42b      	bmi.n	800a890 <_printf_common+0xb0>
 800a838:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a83c:	4641      	mov	r1, r8
 800a83e:	4638      	mov	r0, r7
 800a840:	47c8      	blx	r9
 800a842:	3001      	adds	r0, #1
 800a844:	d01e      	beq.n	800a884 <_printf_common+0xa4>
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	6922      	ldr	r2, [r4, #16]
 800a84a:	f003 0306 	and.w	r3, r3, #6
 800a84e:	2b04      	cmp	r3, #4
 800a850:	bf02      	ittt	eq
 800a852:	68e5      	ldreq	r5, [r4, #12]
 800a854:	6833      	ldreq	r3, [r6, #0]
 800a856:	1aed      	subeq	r5, r5, r3
 800a858:	68a3      	ldr	r3, [r4, #8]
 800a85a:	bf0c      	ite	eq
 800a85c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a860:	2500      	movne	r5, #0
 800a862:	4293      	cmp	r3, r2
 800a864:	bfc4      	itt	gt
 800a866:	1a9b      	subgt	r3, r3, r2
 800a868:	18ed      	addgt	r5, r5, r3
 800a86a:	2600      	movs	r6, #0
 800a86c:	341a      	adds	r4, #26
 800a86e:	42b5      	cmp	r5, r6
 800a870:	d11a      	bne.n	800a8a8 <_printf_common+0xc8>
 800a872:	2000      	movs	r0, #0
 800a874:	e008      	b.n	800a888 <_printf_common+0xa8>
 800a876:	2301      	movs	r3, #1
 800a878:	4652      	mov	r2, sl
 800a87a:	4641      	mov	r1, r8
 800a87c:	4638      	mov	r0, r7
 800a87e:	47c8      	blx	r9
 800a880:	3001      	adds	r0, #1
 800a882:	d103      	bne.n	800a88c <_printf_common+0xac>
 800a884:	f04f 30ff 	mov.w	r0, #4294967295
 800a888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a88c:	3501      	adds	r5, #1
 800a88e:	e7c6      	b.n	800a81e <_printf_common+0x3e>
 800a890:	18e1      	adds	r1, r4, r3
 800a892:	1c5a      	adds	r2, r3, #1
 800a894:	2030      	movs	r0, #48	@ 0x30
 800a896:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a89a:	4422      	add	r2, r4
 800a89c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a8a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a8a4:	3302      	adds	r3, #2
 800a8a6:	e7c7      	b.n	800a838 <_printf_common+0x58>
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	4622      	mov	r2, r4
 800a8ac:	4641      	mov	r1, r8
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	47c8      	blx	r9
 800a8b2:	3001      	adds	r0, #1
 800a8b4:	d0e6      	beq.n	800a884 <_printf_common+0xa4>
 800a8b6:	3601      	adds	r6, #1
 800a8b8:	e7d9      	b.n	800a86e <_printf_common+0x8e>
	...

0800a8bc <_printf_i>:
 800a8bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c0:	7e0f      	ldrb	r7, [r1, #24]
 800a8c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8c4:	2f78      	cmp	r7, #120	@ 0x78
 800a8c6:	4691      	mov	r9, r2
 800a8c8:	4680      	mov	r8, r0
 800a8ca:	460c      	mov	r4, r1
 800a8cc:	469a      	mov	sl, r3
 800a8ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8d2:	d807      	bhi.n	800a8e4 <_printf_i+0x28>
 800a8d4:	2f62      	cmp	r7, #98	@ 0x62
 800a8d6:	d80a      	bhi.n	800a8ee <_printf_i+0x32>
 800a8d8:	2f00      	cmp	r7, #0
 800a8da:	f000 80d2 	beq.w	800aa82 <_printf_i+0x1c6>
 800a8de:	2f58      	cmp	r7, #88	@ 0x58
 800a8e0:	f000 80b9 	beq.w	800aa56 <_printf_i+0x19a>
 800a8e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a8ec:	e03a      	b.n	800a964 <_printf_i+0xa8>
 800a8ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a8f2:	2b15      	cmp	r3, #21
 800a8f4:	d8f6      	bhi.n	800a8e4 <_printf_i+0x28>
 800a8f6:	a101      	add	r1, pc, #4	@ (adr r1, 800a8fc <_printf_i+0x40>)
 800a8f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8fc:	0800a955 	.word	0x0800a955
 800a900:	0800a969 	.word	0x0800a969
 800a904:	0800a8e5 	.word	0x0800a8e5
 800a908:	0800a8e5 	.word	0x0800a8e5
 800a90c:	0800a8e5 	.word	0x0800a8e5
 800a910:	0800a8e5 	.word	0x0800a8e5
 800a914:	0800a969 	.word	0x0800a969
 800a918:	0800a8e5 	.word	0x0800a8e5
 800a91c:	0800a8e5 	.word	0x0800a8e5
 800a920:	0800a8e5 	.word	0x0800a8e5
 800a924:	0800a8e5 	.word	0x0800a8e5
 800a928:	0800aa69 	.word	0x0800aa69
 800a92c:	0800a993 	.word	0x0800a993
 800a930:	0800aa23 	.word	0x0800aa23
 800a934:	0800a8e5 	.word	0x0800a8e5
 800a938:	0800a8e5 	.word	0x0800a8e5
 800a93c:	0800aa8b 	.word	0x0800aa8b
 800a940:	0800a8e5 	.word	0x0800a8e5
 800a944:	0800a993 	.word	0x0800a993
 800a948:	0800a8e5 	.word	0x0800a8e5
 800a94c:	0800a8e5 	.word	0x0800a8e5
 800a950:	0800aa2b 	.word	0x0800aa2b
 800a954:	6833      	ldr	r3, [r6, #0]
 800a956:	1d1a      	adds	r2, r3, #4
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	6032      	str	r2, [r6, #0]
 800a95c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a960:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a964:	2301      	movs	r3, #1
 800a966:	e09d      	b.n	800aaa4 <_printf_i+0x1e8>
 800a968:	6833      	ldr	r3, [r6, #0]
 800a96a:	6820      	ldr	r0, [r4, #0]
 800a96c:	1d19      	adds	r1, r3, #4
 800a96e:	6031      	str	r1, [r6, #0]
 800a970:	0606      	lsls	r6, r0, #24
 800a972:	d501      	bpl.n	800a978 <_printf_i+0xbc>
 800a974:	681d      	ldr	r5, [r3, #0]
 800a976:	e003      	b.n	800a980 <_printf_i+0xc4>
 800a978:	0645      	lsls	r5, r0, #25
 800a97a:	d5fb      	bpl.n	800a974 <_printf_i+0xb8>
 800a97c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a980:	2d00      	cmp	r5, #0
 800a982:	da03      	bge.n	800a98c <_printf_i+0xd0>
 800a984:	232d      	movs	r3, #45	@ 0x2d
 800a986:	426d      	negs	r5, r5
 800a988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a98c:	4859      	ldr	r0, [pc, #356]	@ (800aaf4 <_printf_i+0x238>)
 800a98e:	230a      	movs	r3, #10
 800a990:	e011      	b.n	800a9b6 <_printf_i+0xfa>
 800a992:	6821      	ldr	r1, [r4, #0]
 800a994:	6833      	ldr	r3, [r6, #0]
 800a996:	0608      	lsls	r0, r1, #24
 800a998:	f853 5b04 	ldr.w	r5, [r3], #4
 800a99c:	d402      	bmi.n	800a9a4 <_printf_i+0xe8>
 800a99e:	0649      	lsls	r1, r1, #25
 800a9a0:	bf48      	it	mi
 800a9a2:	b2ad      	uxthmi	r5, r5
 800a9a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a9a6:	4853      	ldr	r0, [pc, #332]	@ (800aaf4 <_printf_i+0x238>)
 800a9a8:	6033      	str	r3, [r6, #0]
 800a9aa:	bf14      	ite	ne
 800a9ac:	230a      	movne	r3, #10
 800a9ae:	2308      	moveq	r3, #8
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9b6:	6866      	ldr	r6, [r4, #4]
 800a9b8:	60a6      	str	r6, [r4, #8]
 800a9ba:	2e00      	cmp	r6, #0
 800a9bc:	bfa2      	ittt	ge
 800a9be:	6821      	ldrge	r1, [r4, #0]
 800a9c0:	f021 0104 	bicge.w	r1, r1, #4
 800a9c4:	6021      	strge	r1, [r4, #0]
 800a9c6:	b90d      	cbnz	r5, 800a9cc <_printf_i+0x110>
 800a9c8:	2e00      	cmp	r6, #0
 800a9ca:	d04b      	beq.n	800aa64 <_printf_i+0x1a8>
 800a9cc:	4616      	mov	r6, r2
 800a9ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9d2:	fb03 5711 	mls	r7, r3, r1, r5
 800a9d6:	5dc7      	ldrb	r7, [r0, r7]
 800a9d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9dc:	462f      	mov	r7, r5
 800a9de:	42bb      	cmp	r3, r7
 800a9e0:	460d      	mov	r5, r1
 800a9e2:	d9f4      	bls.n	800a9ce <_printf_i+0x112>
 800a9e4:	2b08      	cmp	r3, #8
 800a9e6:	d10b      	bne.n	800aa00 <_printf_i+0x144>
 800a9e8:	6823      	ldr	r3, [r4, #0]
 800a9ea:	07df      	lsls	r7, r3, #31
 800a9ec:	d508      	bpl.n	800aa00 <_printf_i+0x144>
 800a9ee:	6923      	ldr	r3, [r4, #16]
 800a9f0:	6861      	ldr	r1, [r4, #4]
 800a9f2:	4299      	cmp	r1, r3
 800a9f4:	bfde      	ittt	le
 800a9f6:	2330      	movle	r3, #48	@ 0x30
 800a9f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa00:	1b92      	subs	r2, r2, r6
 800aa02:	6122      	str	r2, [r4, #16]
 800aa04:	f8cd a000 	str.w	sl, [sp]
 800aa08:	464b      	mov	r3, r9
 800aa0a:	aa03      	add	r2, sp, #12
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	4640      	mov	r0, r8
 800aa10:	f7ff fee6 	bl	800a7e0 <_printf_common>
 800aa14:	3001      	adds	r0, #1
 800aa16:	d14a      	bne.n	800aaae <_printf_i+0x1f2>
 800aa18:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1c:	b004      	add	sp, #16
 800aa1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	f043 0320 	orr.w	r3, r3, #32
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	4833      	ldr	r0, [pc, #204]	@ (800aaf8 <_printf_i+0x23c>)
 800aa2c:	2778      	movs	r7, #120	@ 0x78
 800aa2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	6831      	ldr	r1, [r6, #0]
 800aa36:	061f      	lsls	r7, r3, #24
 800aa38:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa3c:	d402      	bmi.n	800aa44 <_printf_i+0x188>
 800aa3e:	065f      	lsls	r7, r3, #25
 800aa40:	bf48      	it	mi
 800aa42:	b2ad      	uxthmi	r5, r5
 800aa44:	6031      	str	r1, [r6, #0]
 800aa46:	07d9      	lsls	r1, r3, #31
 800aa48:	bf44      	itt	mi
 800aa4a:	f043 0320 	orrmi.w	r3, r3, #32
 800aa4e:	6023      	strmi	r3, [r4, #0]
 800aa50:	b11d      	cbz	r5, 800aa5a <_printf_i+0x19e>
 800aa52:	2310      	movs	r3, #16
 800aa54:	e7ac      	b.n	800a9b0 <_printf_i+0xf4>
 800aa56:	4827      	ldr	r0, [pc, #156]	@ (800aaf4 <_printf_i+0x238>)
 800aa58:	e7e9      	b.n	800aa2e <_printf_i+0x172>
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	f023 0320 	bic.w	r3, r3, #32
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	e7f6      	b.n	800aa52 <_printf_i+0x196>
 800aa64:	4616      	mov	r6, r2
 800aa66:	e7bd      	b.n	800a9e4 <_printf_i+0x128>
 800aa68:	6833      	ldr	r3, [r6, #0]
 800aa6a:	6825      	ldr	r5, [r4, #0]
 800aa6c:	6961      	ldr	r1, [r4, #20]
 800aa6e:	1d18      	adds	r0, r3, #4
 800aa70:	6030      	str	r0, [r6, #0]
 800aa72:	062e      	lsls	r6, r5, #24
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	d501      	bpl.n	800aa7c <_printf_i+0x1c0>
 800aa78:	6019      	str	r1, [r3, #0]
 800aa7a:	e002      	b.n	800aa82 <_printf_i+0x1c6>
 800aa7c:	0668      	lsls	r0, r5, #25
 800aa7e:	d5fb      	bpl.n	800aa78 <_printf_i+0x1bc>
 800aa80:	8019      	strh	r1, [r3, #0]
 800aa82:	2300      	movs	r3, #0
 800aa84:	6123      	str	r3, [r4, #16]
 800aa86:	4616      	mov	r6, r2
 800aa88:	e7bc      	b.n	800aa04 <_printf_i+0x148>
 800aa8a:	6833      	ldr	r3, [r6, #0]
 800aa8c:	1d1a      	adds	r2, r3, #4
 800aa8e:	6032      	str	r2, [r6, #0]
 800aa90:	681e      	ldr	r6, [r3, #0]
 800aa92:	6862      	ldr	r2, [r4, #4]
 800aa94:	2100      	movs	r1, #0
 800aa96:	4630      	mov	r0, r6
 800aa98:	f7f5 fba2 	bl	80001e0 <memchr>
 800aa9c:	b108      	cbz	r0, 800aaa2 <_printf_i+0x1e6>
 800aa9e:	1b80      	subs	r0, r0, r6
 800aaa0:	6060      	str	r0, [r4, #4]
 800aaa2:	6863      	ldr	r3, [r4, #4]
 800aaa4:	6123      	str	r3, [r4, #16]
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aaac:	e7aa      	b.n	800aa04 <_printf_i+0x148>
 800aaae:	6923      	ldr	r3, [r4, #16]
 800aab0:	4632      	mov	r2, r6
 800aab2:	4649      	mov	r1, r9
 800aab4:	4640      	mov	r0, r8
 800aab6:	47d0      	blx	sl
 800aab8:	3001      	adds	r0, #1
 800aaba:	d0ad      	beq.n	800aa18 <_printf_i+0x15c>
 800aabc:	6823      	ldr	r3, [r4, #0]
 800aabe:	079b      	lsls	r3, r3, #30
 800aac0:	d413      	bmi.n	800aaea <_printf_i+0x22e>
 800aac2:	68e0      	ldr	r0, [r4, #12]
 800aac4:	9b03      	ldr	r3, [sp, #12]
 800aac6:	4298      	cmp	r0, r3
 800aac8:	bfb8      	it	lt
 800aaca:	4618      	movlt	r0, r3
 800aacc:	e7a6      	b.n	800aa1c <_printf_i+0x160>
 800aace:	2301      	movs	r3, #1
 800aad0:	4632      	mov	r2, r6
 800aad2:	4649      	mov	r1, r9
 800aad4:	4640      	mov	r0, r8
 800aad6:	47d0      	blx	sl
 800aad8:	3001      	adds	r0, #1
 800aada:	d09d      	beq.n	800aa18 <_printf_i+0x15c>
 800aadc:	3501      	adds	r5, #1
 800aade:	68e3      	ldr	r3, [r4, #12]
 800aae0:	9903      	ldr	r1, [sp, #12]
 800aae2:	1a5b      	subs	r3, r3, r1
 800aae4:	42ab      	cmp	r3, r5
 800aae6:	dcf2      	bgt.n	800aace <_printf_i+0x212>
 800aae8:	e7eb      	b.n	800aac2 <_printf_i+0x206>
 800aaea:	2500      	movs	r5, #0
 800aaec:	f104 0619 	add.w	r6, r4, #25
 800aaf0:	e7f5      	b.n	800aade <_printf_i+0x222>
 800aaf2:	bf00      	nop
 800aaf4:	0800cfe2 	.word	0x0800cfe2
 800aaf8:	0800cff3 	.word	0x0800cff3

0800aafc <std>:
 800aafc:	2300      	movs	r3, #0
 800aafe:	b510      	push	{r4, lr}
 800ab00:	4604      	mov	r4, r0
 800ab02:	e9c0 3300 	strd	r3, r3, [r0]
 800ab06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab0a:	6083      	str	r3, [r0, #8]
 800ab0c:	8181      	strh	r1, [r0, #12]
 800ab0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab10:	81c2      	strh	r2, [r0, #14]
 800ab12:	6183      	str	r3, [r0, #24]
 800ab14:	4619      	mov	r1, r3
 800ab16:	2208      	movs	r2, #8
 800ab18:	305c      	adds	r0, #92	@ 0x5c
 800ab1a:	f000 f914 	bl	800ad46 <memset>
 800ab1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab54 <std+0x58>)
 800ab20:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab22:	4b0d      	ldr	r3, [pc, #52]	@ (800ab58 <std+0x5c>)
 800ab24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab26:	4b0d      	ldr	r3, [pc, #52]	@ (800ab5c <std+0x60>)
 800ab28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab60 <std+0x64>)
 800ab2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab64 <std+0x68>)
 800ab30:	6224      	str	r4, [r4, #32]
 800ab32:	429c      	cmp	r4, r3
 800ab34:	d006      	beq.n	800ab44 <std+0x48>
 800ab36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab3a:	4294      	cmp	r4, r2
 800ab3c:	d002      	beq.n	800ab44 <std+0x48>
 800ab3e:	33d0      	adds	r3, #208	@ 0xd0
 800ab40:	429c      	cmp	r4, r3
 800ab42:	d105      	bne.n	800ab50 <std+0x54>
 800ab44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab4c:	f000 b978 	b.w	800ae40 <__retarget_lock_init_recursive>
 800ab50:	bd10      	pop	{r4, pc}
 800ab52:	bf00      	nop
 800ab54:	0800acc1 	.word	0x0800acc1
 800ab58:	0800ace3 	.word	0x0800ace3
 800ab5c:	0800ad1b 	.word	0x0800ad1b
 800ab60:	0800ad3f 	.word	0x0800ad3f
 800ab64:	20000830 	.word	0x20000830

0800ab68 <stdio_exit_handler>:
 800ab68:	4a02      	ldr	r2, [pc, #8]	@ (800ab74 <stdio_exit_handler+0xc>)
 800ab6a:	4903      	ldr	r1, [pc, #12]	@ (800ab78 <stdio_exit_handler+0x10>)
 800ab6c:	4803      	ldr	r0, [pc, #12]	@ (800ab7c <stdio_exit_handler+0x14>)
 800ab6e:	f000 b869 	b.w	800ac44 <_fwalk_sglue>
 800ab72:	bf00      	nop
 800ab74:	2000000c 	.word	0x2000000c
 800ab78:	0800c79d 	.word	0x0800c79d
 800ab7c:	2000001c 	.word	0x2000001c

0800ab80 <cleanup_stdio>:
 800ab80:	6841      	ldr	r1, [r0, #4]
 800ab82:	4b0c      	ldr	r3, [pc, #48]	@ (800abb4 <cleanup_stdio+0x34>)
 800ab84:	4299      	cmp	r1, r3
 800ab86:	b510      	push	{r4, lr}
 800ab88:	4604      	mov	r4, r0
 800ab8a:	d001      	beq.n	800ab90 <cleanup_stdio+0x10>
 800ab8c:	f001 fe06 	bl	800c79c <_fflush_r>
 800ab90:	68a1      	ldr	r1, [r4, #8]
 800ab92:	4b09      	ldr	r3, [pc, #36]	@ (800abb8 <cleanup_stdio+0x38>)
 800ab94:	4299      	cmp	r1, r3
 800ab96:	d002      	beq.n	800ab9e <cleanup_stdio+0x1e>
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f001 fdff 	bl	800c79c <_fflush_r>
 800ab9e:	68e1      	ldr	r1, [r4, #12]
 800aba0:	4b06      	ldr	r3, [pc, #24]	@ (800abbc <cleanup_stdio+0x3c>)
 800aba2:	4299      	cmp	r1, r3
 800aba4:	d004      	beq.n	800abb0 <cleanup_stdio+0x30>
 800aba6:	4620      	mov	r0, r4
 800aba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abac:	f001 bdf6 	b.w	800c79c <_fflush_r>
 800abb0:	bd10      	pop	{r4, pc}
 800abb2:	bf00      	nop
 800abb4:	20000830 	.word	0x20000830
 800abb8:	20000898 	.word	0x20000898
 800abbc:	20000900 	.word	0x20000900

0800abc0 <global_stdio_init.part.0>:
 800abc0:	b510      	push	{r4, lr}
 800abc2:	4b0b      	ldr	r3, [pc, #44]	@ (800abf0 <global_stdio_init.part.0+0x30>)
 800abc4:	4c0b      	ldr	r4, [pc, #44]	@ (800abf4 <global_stdio_init.part.0+0x34>)
 800abc6:	4a0c      	ldr	r2, [pc, #48]	@ (800abf8 <global_stdio_init.part.0+0x38>)
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	4620      	mov	r0, r4
 800abcc:	2200      	movs	r2, #0
 800abce:	2104      	movs	r1, #4
 800abd0:	f7ff ff94 	bl	800aafc <std>
 800abd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800abd8:	2201      	movs	r2, #1
 800abda:	2109      	movs	r1, #9
 800abdc:	f7ff ff8e 	bl	800aafc <std>
 800abe0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800abe4:	2202      	movs	r2, #2
 800abe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abea:	2112      	movs	r1, #18
 800abec:	f7ff bf86 	b.w	800aafc <std>
 800abf0:	20000968 	.word	0x20000968
 800abf4:	20000830 	.word	0x20000830
 800abf8:	0800ab69 	.word	0x0800ab69

0800abfc <__sfp_lock_acquire>:
 800abfc:	4801      	ldr	r0, [pc, #4]	@ (800ac04 <__sfp_lock_acquire+0x8>)
 800abfe:	f000 b920 	b.w	800ae42 <__retarget_lock_acquire_recursive>
 800ac02:	bf00      	nop
 800ac04:	20000971 	.word	0x20000971

0800ac08 <__sfp_lock_release>:
 800ac08:	4801      	ldr	r0, [pc, #4]	@ (800ac10 <__sfp_lock_release+0x8>)
 800ac0a:	f000 b91b 	b.w	800ae44 <__retarget_lock_release_recursive>
 800ac0e:	bf00      	nop
 800ac10:	20000971 	.word	0x20000971

0800ac14 <__sinit>:
 800ac14:	b510      	push	{r4, lr}
 800ac16:	4604      	mov	r4, r0
 800ac18:	f7ff fff0 	bl	800abfc <__sfp_lock_acquire>
 800ac1c:	6a23      	ldr	r3, [r4, #32]
 800ac1e:	b11b      	cbz	r3, 800ac28 <__sinit+0x14>
 800ac20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac24:	f7ff bff0 	b.w	800ac08 <__sfp_lock_release>
 800ac28:	4b04      	ldr	r3, [pc, #16]	@ (800ac3c <__sinit+0x28>)
 800ac2a:	6223      	str	r3, [r4, #32]
 800ac2c:	4b04      	ldr	r3, [pc, #16]	@ (800ac40 <__sinit+0x2c>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1f5      	bne.n	800ac20 <__sinit+0xc>
 800ac34:	f7ff ffc4 	bl	800abc0 <global_stdio_init.part.0>
 800ac38:	e7f2      	b.n	800ac20 <__sinit+0xc>
 800ac3a:	bf00      	nop
 800ac3c:	0800ab81 	.word	0x0800ab81
 800ac40:	20000968 	.word	0x20000968

0800ac44 <_fwalk_sglue>:
 800ac44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac48:	4607      	mov	r7, r0
 800ac4a:	4688      	mov	r8, r1
 800ac4c:	4614      	mov	r4, r2
 800ac4e:	2600      	movs	r6, #0
 800ac50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac54:	f1b9 0901 	subs.w	r9, r9, #1
 800ac58:	d505      	bpl.n	800ac66 <_fwalk_sglue+0x22>
 800ac5a:	6824      	ldr	r4, [r4, #0]
 800ac5c:	2c00      	cmp	r4, #0
 800ac5e:	d1f7      	bne.n	800ac50 <_fwalk_sglue+0xc>
 800ac60:	4630      	mov	r0, r6
 800ac62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac66:	89ab      	ldrh	r3, [r5, #12]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d907      	bls.n	800ac7c <_fwalk_sglue+0x38>
 800ac6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac70:	3301      	adds	r3, #1
 800ac72:	d003      	beq.n	800ac7c <_fwalk_sglue+0x38>
 800ac74:	4629      	mov	r1, r5
 800ac76:	4638      	mov	r0, r7
 800ac78:	47c0      	blx	r8
 800ac7a:	4306      	orrs	r6, r0
 800ac7c:	3568      	adds	r5, #104	@ 0x68
 800ac7e:	e7e9      	b.n	800ac54 <_fwalk_sglue+0x10>

0800ac80 <siprintf>:
 800ac80:	b40e      	push	{r1, r2, r3}
 800ac82:	b500      	push	{lr}
 800ac84:	b09c      	sub	sp, #112	@ 0x70
 800ac86:	ab1d      	add	r3, sp, #116	@ 0x74
 800ac88:	9002      	str	r0, [sp, #8]
 800ac8a:	9006      	str	r0, [sp, #24]
 800ac8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ac90:	4809      	ldr	r0, [pc, #36]	@ (800acb8 <siprintf+0x38>)
 800ac92:	9107      	str	r1, [sp, #28]
 800ac94:	9104      	str	r1, [sp, #16]
 800ac96:	4909      	ldr	r1, [pc, #36]	@ (800acbc <siprintf+0x3c>)
 800ac98:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac9c:	9105      	str	r1, [sp, #20]
 800ac9e:	6800      	ldr	r0, [r0, #0]
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	a902      	add	r1, sp, #8
 800aca4:	f001 fbfa 	bl	800c49c <_svfiprintf_r>
 800aca8:	9b02      	ldr	r3, [sp, #8]
 800acaa:	2200      	movs	r2, #0
 800acac:	701a      	strb	r2, [r3, #0]
 800acae:	b01c      	add	sp, #112	@ 0x70
 800acb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800acb4:	b003      	add	sp, #12
 800acb6:	4770      	bx	lr
 800acb8:	20000018 	.word	0x20000018
 800acbc:	ffff0208 	.word	0xffff0208

0800acc0 <__sread>:
 800acc0:	b510      	push	{r4, lr}
 800acc2:	460c      	mov	r4, r1
 800acc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc8:	f000 f86c 	bl	800ada4 <_read_r>
 800accc:	2800      	cmp	r0, #0
 800acce:	bfab      	itete	ge
 800acd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800acd2:	89a3      	ldrhlt	r3, [r4, #12]
 800acd4:	181b      	addge	r3, r3, r0
 800acd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800acda:	bfac      	ite	ge
 800acdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800acde:	81a3      	strhlt	r3, [r4, #12]
 800ace0:	bd10      	pop	{r4, pc}

0800ace2 <__swrite>:
 800ace2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace6:	461f      	mov	r7, r3
 800ace8:	898b      	ldrh	r3, [r1, #12]
 800acea:	05db      	lsls	r3, r3, #23
 800acec:	4605      	mov	r5, r0
 800acee:	460c      	mov	r4, r1
 800acf0:	4616      	mov	r6, r2
 800acf2:	d505      	bpl.n	800ad00 <__swrite+0x1e>
 800acf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf8:	2302      	movs	r3, #2
 800acfa:	2200      	movs	r2, #0
 800acfc:	f000 f840 	bl	800ad80 <_lseek_r>
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad0a:	81a3      	strh	r3, [r4, #12]
 800ad0c:	4632      	mov	r2, r6
 800ad0e:	463b      	mov	r3, r7
 800ad10:	4628      	mov	r0, r5
 800ad12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad16:	f000 b857 	b.w	800adc8 <_write_r>

0800ad1a <__sseek>:
 800ad1a:	b510      	push	{r4, lr}
 800ad1c:	460c      	mov	r4, r1
 800ad1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad22:	f000 f82d 	bl	800ad80 <_lseek_r>
 800ad26:	1c43      	adds	r3, r0, #1
 800ad28:	89a3      	ldrh	r3, [r4, #12]
 800ad2a:	bf15      	itete	ne
 800ad2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad36:	81a3      	strheq	r3, [r4, #12]
 800ad38:	bf18      	it	ne
 800ad3a:	81a3      	strhne	r3, [r4, #12]
 800ad3c:	bd10      	pop	{r4, pc}

0800ad3e <__sclose>:
 800ad3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad42:	f000 b80d 	b.w	800ad60 <_close_r>

0800ad46 <memset>:
 800ad46:	4402      	add	r2, r0
 800ad48:	4603      	mov	r3, r0
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d100      	bne.n	800ad50 <memset+0xa>
 800ad4e:	4770      	bx	lr
 800ad50:	f803 1b01 	strb.w	r1, [r3], #1
 800ad54:	e7f9      	b.n	800ad4a <memset+0x4>
	...

0800ad58 <_localeconv_r>:
 800ad58:	4800      	ldr	r0, [pc, #0]	@ (800ad5c <_localeconv_r+0x4>)
 800ad5a:	4770      	bx	lr
 800ad5c:	20000158 	.word	0x20000158

0800ad60 <_close_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d06      	ldr	r5, [pc, #24]	@ (800ad7c <_close_r+0x1c>)
 800ad64:	2300      	movs	r3, #0
 800ad66:	4604      	mov	r4, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	602b      	str	r3, [r5, #0]
 800ad6c:	f7f7 fec0 	bl	8002af0 <_close>
 800ad70:	1c43      	adds	r3, r0, #1
 800ad72:	d102      	bne.n	800ad7a <_close_r+0x1a>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	b103      	cbz	r3, 800ad7a <_close_r+0x1a>
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	2000096c 	.word	0x2000096c

0800ad80 <_lseek_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4d07      	ldr	r5, [pc, #28]	@ (800ada0 <_lseek_r+0x20>)
 800ad84:	4604      	mov	r4, r0
 800ad86:	4608      	mov	r0, r1
 800ad88:	4611      	mov	r1, r2
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	602a      	str	r2, [r5, #0]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	f7f7 fed5 	bl	8002b3e <_lseek>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d102      	bne.n	800ad9e <_lseek_r+0x1e>
 800ad98:	682b      	ldr	r3, [r5, #0]
 800ad9a:	b103      	cbz	r3, 800ad9e <_lseek_r+0x1e>
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	2000096c 	.word	0x2000096c

0800ada4 <_read_r>:
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	4d07      	ldr	r5, [pc, #28]	@ (800adc4 <_read_r+0x20>)
 800ada8:	4604      	mov	r4, r0
 800adaa:	4608      	mov	r0, r1
 800adac:	4611      	mov	r1, r2
 800adae:	2200      	movs	r2, #0
 800adb0:	602a      	str	r2, [r5, #0]
 800adb2:	461a      	mov	r2, r3
 800adb4:	f7f7 fe63 	bl	8002a7e <_read>
 800adb8:	1c43      	adds	r3, r0, #1
 800adba:	d102      	bne.n	800adc2 <_read_r+0x1e>
 800adbc:	682b      	ldr	r3, [r5, #0]
 800adbe:	b103      	cbz	r3, 800adc2 <_read_r+0x1e>
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	bd38      	pop	{r3, r4, r5, pc}
 800adc4:	2000096c 	.word	0x2000096c

0800adc8 <_write_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4d07      	ldr	r5, [pc, #28]	@ (800ade8 <_write_r+0x20>)
 800adcc:	4604      	mov	r4, r0
 800adce:	4608      	mov	r0, r1
 800add0:	4611      	mov	r1, r2
 800add2:	2200      	movs	r2, #0
 800add4:	602a      	str	r2, [r5, #0]
 800add6:	461a      	mov	r2, r3
 800add8:	f7f7 fe6e 	bl	8002ab8 <_write>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d102      	bne.n	800ade6 <_write_r+0x1e>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	b103      	cbz	r3, 800ade6 <_write_r+0x1e>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	2000096c 	.word	0x2000096c

0800adec <__errno>:
 800adec:	4b01      	ldr	r3, [pc, #4]	@ (800adf4 <__errno+0x8>)
 800adee:	6818      	ldr	r0, [r3, #0]
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	20000018 	.word	0x20000018

0800adf8 <__libc_init_array>:
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	4d0d      	ldr	r5, [pc, #52]	@ (800ae30 <__libc_init_array+0x38>)
 800adfc:	4c0d      	ldr	r4, [pc, #52]	@ (800ae34 <__libc_init_array+0x3c>)
 800adfe:	1b64      	subs	r4, r4, r5
 800ae00:	10a4      	asrs	r4, r4, #2
 800ae02:	2600      	movs	r6, #0
 800ae04:	42a6      	cmp	r6, r4
 800ae06:	d109      	bne.n	800ae1c <__libc_init_array+0x24>
 800ae08:	4d0b      	ldr	r5, [pc, #44]	@ (800ae38 <__libc_init_array+0x40>)
 800ae0a:	4c0c      	ldr	r4, [pc, #48]	@ (800ae3c <__libc_init_array+0x44>)
 800ae0c:	f002 f864 	bl	800ced8 <_init>
 800ae10:	1b64      	subs	r4, r4, r5
 800ae12:	10a4      	asrs	r4, r4, #2
 800ae14:	2600      	movs	r6, #0
 800ae16:	42a6      	cmp	r6, r4
 800ae18:	d105      	bne.n	800ae26 <__libc_init_array+0x2e>
 800ae1a:	bd70      	pop	{r4, r5, r6, pc}
 800ae1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae20:	4798      	blx	r3
 800ae22:	3601      	adds	r6, #1
 800ae24:	e7ee      	b.n	800ae04 <__libc_init_array+0xc>
 800ae26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae2a:	4798      	blx	r3
 800ae2c:	3601      	adds	r6, #1
 800ae2e:	e7f2      	b.n	800ae16 <__libc_init_array+0x1e>
 800ae30:	0800d348 	.word	0x0800d348
 800ae34:	0800d348 	.word	0x0800d348
 800ae38:	0800d348 	.word	0x0800d348
 800ae3c:	0800d34c 	.word	0x0800d34c

0800ae40 <__retarget_lock_init_recursive>:
 800ae40:	4770      	bx	lr

0800ae42 <__retarget_lock_acquire_recursive>:
 800ae42:	4770      	bx	lr

0800ae44 <__retarget_lock_release_recursive>:
 800ae44:	4770      	bx	lr

0800ae46 <quorem>:
 800ae46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4a:	6903      	ldr	r3, [r0, #16]
 800ae4c:	690c      	ldr	r4, [r1, #16]
 800ae4e:	42a3      	cmp	r3, r4
 800ae50:	4607      	mov	r7, r0
 800ae52:	db7e      	blt.n	800af52 <quorem+0x10c>
 800ae54:	3c01      	subs	r4, #1
 800ae56:	f101 0814 	add.w	r8, r1, #20
 800ae5a:	00a3      	lsls	r3, r4, #2
 800ae5c:	f100 0514 	add.w	r5, r0, #20
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae66:	9301      	str	r3, [sp, #4]
 800ae68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae70:	3301      	adds	r3, #1
 800ae72:	429a      	cmp	r2, r3
 800ae74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae78:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae7c:	d32e      	bcc.n	800aedc <quorem+0x96>
 800ae7e:	f04f 0a00 	mov.w	sl, #0
 800ae82:	46c4      	mov	ip, r8
 800ae84:	46ae      	mov	lr, r5
 800ae86:	46d3      	mov	fp, sl
 800ae88:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae8c:	b298      	uxth	r0, r3
 800ae8e:	fb06 a000 	mla	r0, r6, r0, sl
 800ae92:	0c02      	lsrs	r2, r0, #16
 800ae94:	0c1b      	lsrs	r3, r3, #16
 800ae96:	fb06 2303 	mla	r3, r6, r3, r2
 800ae9a:	f8de 2000 	ldr.w	r2, [lr]
 800ae9e:	b280      	uxth	r0, r0
 800aea0:	b292      	uxth	r2, r2
 800aea2:	1a12      	subs	r2, r2, r0
 800aea4:	445a      	add	r2, fp
 800aea6:	f8de 0000 	ldr.w	r0, [lr]
 800aeaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aeb4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aeb8:	b292      	uxth	r2, r2
 800aeba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aebe:	45e1      	cmp	r9, ip
 800aec0:	f84e 2b04 	str.w	r2, [lr], #4
 800aec4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aec8:	d2de      	bcs.n	800ae88 <quorem+0x42>
 800aeca:	9b00      	ldr	r3, [sp, #0]
 800aecc:	58eb      	ldr	r3, [r5, r3]
 800aece:	b92b      	cbnz	r3, 800aedc <quorem+0x96>
 800aed0:	9b01      	ldr	r3, [sp, #4]
 800aed2:	3b04      	subs	r3, #4
 800aed4:	429d      	cmp	r5, r3
 800aed6:	461a      	mov	r2, r3
 800aed8:	d32f      	bcc.n	800af3a <quorem+0xf4>
 800aeda:	613c      	str	r4, [r7, #16]
 800aedc:	4638      	mov	r0, r7
 800aede:	f001 f979 	bl	800c1d4 <__mcmp>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	db25      	blt.n	800af32 <quorem+0xec>
 800aee6:	4629      	mov	r1, r5
 800aee8:	2000      	movs	r0, #0
 800aeea:	f858 2b04 	ldr.w	r2, [r8], #4
 800aeee:	f8d1 c000 	ldr.w	ip, [r1]
 800aef2:	fa1f fe82 	uxth.w	lr, r2
 800aef6:	fa1f f38c 	uxth.w	r3, ip
 800aefa:	eba3 030e 	sub.w	r3, r3, lr
 800aefe:	4403      	add	r3, r0
 800af00:	0c12      	lsrs	r2, r2, #16
 800af02:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800af06:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af10:	45c1      	cmp	r9, r8
 800af12:	f841 3b04 	str.w	r3, [r1], #4
 800af16:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af1a:	d2e6      	bcs.n	800aeea <quorem+0xa4>
 800af1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af24:	b922      	cbnz	r2, 800af30 <quorem+0xea>
 800af26:	3b04      	subs	r3, #4
 800af28:	429d      	cmp	r5, r3
 800af2a:	461a      	mov	r2, r3
 800af2c:	d30b      	bcc.n	800af46 <quorem+0x100>
 800af2e:	613c      	str	r4, [r7, #16]
 800af30:	3601      	adds	r6, #1
 800af32:	4630      	mov	r0, r6
 800af34:	b003      	add	sp, #12
 800af36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af3a:	6812      	ldr	r2, [r2, #0]
 800af3c:	3b04      	subs	r3, #4
 800af3e:	2a00      	cmp	r2, #0
 800af40:	d1cb      	bne.n	800aeda <quorem+0x94>
 800af42:	3c01      	subs	r4, #1
 800af44:	e7c6      	b.n	800aed4 <quorem+0x8e>
 800af46:	6812      	ldr	r2, [r2, #0]
 800af48:	3b04      	subs	r3, #4
 800af4a:	2a00      	cmp	r2, #0
 800af4c:	d1ef      	bne.n	800af2e <quorem+0xe8>
 800af4e:	3c01      	subs	r4, #1
 800af50:	e7ea      	b.n	800af28 <quorem+0xe2>
 800af52:	2000      	movs	r0, #0
 800af54:	e7ee      	b.n	800af34 <quorem+0xee>
	...

0800af58 <_dtoa_r>:
 800af58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5c:	69c7      	ldr	r7, [r0, #28]
 800af5e:	b099      	sub	sp, #100	@ 0x64
 800af60:	ed8d 0b02 	vstr	d0, [sp, #8]
 800af64:	ec55 4b10 	vmov	r4, r5, d0
 800af68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800af6a:	9109      	str	r1, [sp, #36]	@ 0x24
 800af6c:	4683      	mov	fp, r0
 800af6e:	920e      	str	r2, [sp, #56]	@ 0x38
 800af70:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af72:	b97f      	cbnz	r7, 800af94 <_dtoa_r+0x3c>
 800af74:	2010      	movs	r0, #16
 800af76:	f000 fdfd 	bl	800bb74 <malloc>
 800af7a:	4602      	mov	r2, r0
 800af7c:	f8cb 001c 	str.w	r0, [fp, #28]
 800af80:	b920      	cbnz	r0, 800af8c <_dtoa_r+0x34>
 800af82:	4ba7      	ldr	r3, [pc, #668]	@ (800b220 <_dtoa_r+0x2c8>)
 800af84:	21ef      	movs	r1, #239	@ 0xef
 800af86:	48a7      	ldr	r0, [pc, #668]	@ (800b224 <_dtoa_r+0x2cc>)
 800af88:	f001 fc68 	bl	800c85c <__assert_func>
 800af8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800af90:	6007      	str	r7, [r0, #0]
 800af92:	60c7      	str	r7, [r0, #12]
 800af94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af98:	6819      	ldr	r1, [r3, #0]
 800af9a:	b159      	cbz	r1, 800afb4 <_dtoa_r+0x5c>
 800af9c:	685a      	ldr	r2, [r3, #4]
 800af9e:	604a      	str	r2, [r1, #4]
 800afa0:	2301      	movs	r3, #1
 800afa2:	4093      	lsls	r3, r2
 800afa4:	608b      	str	r3, [r1, #8]
 800afa6:	4658      	mov	r0, fp
 800afa8:	f000 feda 	bl	800bd60 <_Bfree>
 800afac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800afb0:	2200      	movs	r2, #0
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	1e2b      	subs	r3, r5, #0
 800afb6:	bfb9      	ittee	lt
 800afb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800afbc:	9303      	strlt	r3, [sp, #12]
 800afbe:	2300      	movge	r3, #0
 800afc0:	6033      	strge	r3, [r6, #0]
 800afc2:	9f03      	ldr	r7, [sp, #12]
 800afc4:	4b98      	ldr	r3, [pc, #608]	@ (800b228 <_dtoa_r+0x2d0>)
 800afc6:	bfbc      	itt	lt
 800afc8:	2201      	movlt	r2, #1
 800afca:	6032      	strlt	r2, [r6, #0]
 800afcc:	43bb      	bics	r3, r7
 800afce:	d112      	bne.n	800aff6 <_dtoa_r+0x9e>
 800afd0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800afd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afdc:	4323      	orrs	r3, r4
 800afde:	f000 854d 	beq.w	800ba7c <_dtoa_r+0xb24>
 800afe2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800afe4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b23c <_dtoa_r+0x2e4>
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f000 854f 	beq.w	800ba8c <_dtoa_r+0xb34>
 800afee:	f10a 0303 	add.w	r3, sl, #3
 800aff2:	f000 bd49 	b.w	800ba88 <_dtoa_r+0xb30>
 800aff6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800affa:	2200      	movs	r2, #0
 800affc:	ec51 0b17 	vmov	r0, r1, d7
 800b000:	2300      	movs	r3, #0
 800b002:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b006:	f7f5 fd67 	bl	8000ad8 <__aeabi_dcmpeq>
 800b00a:	4680      	mov	r8, r0
 800b00c:	b158      	cbz	r0, 800b026 <_dtoa_r+0xce>
 800b00e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b010:	2301      	movs	r3, #1
 800b012:	6013      	str	r3, [r2, #0]
 800b014:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b016:	b113      	cbz	r3, 800b01e <_dtoa_r+0xc6>
 800b018:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b01a:	4b84      	ldr	r3, [pc, #528]	@ (800b22c <_dtoa_r+0x2d4>)
 800b01c:	6013      	str	r3, [r2, #0]
 800b01e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b240 <_dtoa_r+0x2e8>
 800b022:	f000 bd33 	b.w	800ba8c <_dtoa_r+0xb34>
 800b026:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b02a:	aa16      	add	r2, sp, #88	@ 0x58
 800b02c:	a917      	add	r1, sp, #92	@ 0x5c
 800b02e:	4658      	mov	r0, fp
 800b030:	f001 f980 	bl	800c334 <__d2b>
 800b034:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b038:	4681      	mov	r9, r0
 800b03a:	2e00      	cmp	r6, #0
 800b03c:	d077      	beq.n	800b12e <_dtoa_r+0x1d6>
 800b03e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b040:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b04c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b050:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b054:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b058:	4619      	mov	r1, r3
 800b05a:	2200      	movs	r2, #0
 800b05c:	4b74      	ldr	r3, [pc, #464]	@ (800b230 <_dtoa_r+0x2d8>)
 800b05e:	f7f5 f91b 	bl	8000298 <__aeabi_dsub>
 800b062:	a369      	add	r3, pc, #420	@ (adr r3, 800b208 <_dtoa_r+0x2b0>)
 800b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b068:	f7f5 face 	bl	8000608 <__aeabi_dmul>
 800b06c:	a368      	add	r3, pc, #416	@ (adr r3, 800b210 <_dtoa_r+0x2b8>)
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	f7f5 f913 	bl	800029c <__adddf3>
 800b076:	4604      	mov	r4, r0
 800b078:	4630      	mov	r0, r6
 800b07a:	460d      	mov	r5, r1
 800b07c:	f7f5 fa5a 	bl	8000534 <__aeabi_i2d>
 800b080:	a365      	add	r3, pc, #404	@ (adr r3, 800b218 <_dtoa_r+0x2c0>)
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	f7f5 fabf 	bl	8000608 <__aeabi_dmul>
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	4620      	mov	r0, r4
 800b090:	4629      	mov	r1, r5
 800b092:	f7f5 f903 	bl	800029c <__adddf3>
 800b096:	4604      	mov	r4, r0
 800b098:	460d      	mov	r5, r1
 800b09a:	f7f5 fd65 	bl	8000b68 <__aeabi_d2iz>
 800b09e:	2200      	movs	r2, #0
 800b0a0:	4607      	mov	r7, r0
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	f7f5 fd20 	bl	8000aec <__aeabi_dcmplt>
 800b0ac:	b140      	cbz	r0, 800b0c0 <_dtoa_r+0x168>
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	f7f5 fa40 	bl	8000534 <__aeabi_i2d>
 800b0b4:	4622      	mov	r2, r4
 800b0b6:	462b      	mov	r3, r5
 800b0b8:	f7f5 fd0e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0bc:	b900      	cbnz	r0, 800b0c0 <_dtoa_r+0x168>
 800b0be:	3f01      	subs	r7, #1
 800b0c0:	2f16      	cmp	r7, #22
 800b0c2:	d851      	bhi.n	800b168 <_dtoa_r+0x210>
 800b0c4:	4b5b      	ldr	r3, [pc, #364]	@ (800b234 <_dtoa_r+0x2dc>)
 800b0c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0d2:	f7f5 fd0b 	bl	8000aec <__aeabi_dcmplt>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d048      	beq.n	800b16c <_dtoa_r+0x214>
 800b0da:	3f01      	subs	r7, #1
 800b0dc:	2300      	movs	r3, #0
 800b0de:	9312      	str	r3, [sp, #72]	@ 0x48
 800b0e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b0e2:	1b9b      	subs	r3, r3, r6
 800b0e4:	1e5a      	subs	r2, r3, #1
 800b0e6:	bf44      	itt	mi
 800b0e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b0ec:	2300      	movmi	r3, #0
 800b0ee:	9208      	str	r2, [sp, #32]
 800b0f0:	bf54      	ite	pl
 800b0f2:	f04f 0800 	movpl.w	r8, #0
 800b0f6:	9308      	strmi	r3, [sp, #32]
 800b0f8:	2f00      	cmp	r7, #0
 800b0fa:	db39      	blt.n	800b170 <_dtoa_r+0x218>
 800b0fc:	9b08      	ldr	r3, [sp, #32]
 800b0fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b100:	443b      	add	r3, r7
 800b102:	9308      	str	r3, [sp, #32]
 800b104:	2300      	movs	r3, #0
 800b106:	930a      	str	r3, [sp, #40]	@ 0x28
 800b108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b10a:	2b09      	cmp	r3, #9
 800b10c:	d864      	bhi.n	800b1d8 <_dtoa_r+0x280>
 800b10e:	2b05      	cmp	r3, #5
 800b110:	bfc4      	itt	gt
 800b112:	3b04      	subgt	r3, #4
 800b114:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b118:	f1a3 0302 	sub.w	r3, r3, #2
 800b11c:	bfcc      	ite	gt
 800b11e:	2400      	movgt	r4, #0
 800b120:	2401      	movle	r4, #1
 800b122:	2b03      	cmp	r3, #3
 800b124:	d863      	bhi.n	800b1ee <_dtoa_r+0x296>
 800b126:	e8df f003 	tbb	[pc, r3]
 800b12a:	372a      	.short	0x372a
 800b12c:	5535      	.short	0x5535
 800b12e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b132:	441e      	add	r6, r3
 800b134:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b138:	2b20      	cmp	r3, #32
 800b13a:	bfc1      	itttt	gt
 800b13c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b140:	409f      	lslgt	r7, r3
 800b142:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b146:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b14a:	bfd6      	itet	le
 800b14c:	f1c3 0320 	rsble	r3, r3, #32
 800b150:	ea47 0003 	orrgt.w	r0, r7, r3
 800b154:	fa04 f003 	lslle.w	r0, r4, r3
 800b158:	f7f5 f9dc 	bl	8000514 <__aeabi_ui2d>
 800b15c:	2201      	movs	r2, #1
 800b15e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b162:	3e01      	subs	r6, #1
 800b164:	9214      	str	r2, [sp, #80]	@ 0x50
 800b166:	e777      	b.n	800b058 <_dtoa_r+0x100>
 800b168:	2301      	movs	r3, #1
 800b16a:	e7b8      	b.n	800b0de <_dtoa_r+0x186>
 800b16c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b16e:	e7b7      	b.n	800b0e0 <_dtoa_r+0x188>
 800b170:	427b      	negs	r3, r7
 800b172:	930a      	str	r3, [sp, #40]	@ 0x28
 800b174:	2300      	movs	r3, #0
 800b176:	eba8 0807 	sub.w	r8, r8, r7
 800b17a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b17c:	e7c4      	b.n	800b108 <_dtoa_r+0x1b0>
 800b17e:	2300      	movs	r3, #0
 800b180:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b184:	2b00      	cmp	r3, #0
 800b186:	dc35      	bgt.n	800b1f4 <_dtoa_r+0x29c>
 800b188:	2301      	movs	r3, #1
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	9307      	str	r3, [sp, #28]
 800b18e:	461a      	mov	r2, r3
 800b190:	920e      	str	r2, [sp, #56]	@ 0x38
 800b192:	e00b      	b.n	800b1ac <_dtoa_r+0x254>
 800b194:	2301      	movs	r3, #1
 800b196:	e7f3      	b.n	800b180 <_dtoa_r+0x228>
 800b198:	2300      	movs	r3, #0
 800b19a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b19c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b19e:	18fb      	adds	r3, r7, r3
 800b1a0:	9300      	str	r3, [sp, #0]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	9307      	str	r3, [sp, #28]
 800b1a8:	bfb8      	it	lt
 800b1aa:	2301      	movlt	r3, #1
 800b1ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	2204      	movs	r2, #4
 800b1b4:	f102 0514 	add.w	r5, r2, #20
 800b1b8:	429d      	cmp	r5, r3
 800b1ba:	d91f      	bls.n	800b1fc <_dtoa_r+0x2a4>
 800b1bc:	6041      	str	r1, [r0, #4]
 800b1be:	4658      	mov	r0, fp
 800b1c0:	f000 fd8e 	bl	800bce0 <_Balloc>
 800b1c4:	4682      	mov	sl, r0
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d13c      	bne.n	800b244 <_dtoa_r+0x2ec>
 800b1ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b238 <_dtoa_r+0x2e0>)
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800b1d2:	e6d8      	b.n	800af86 <_dtoa_r+0x2e>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e7e0      	b.n	800b19a <_dtoa_r+0x242>
 800b1d8:	2401      	movs	r4, #1
 800b1da:	2300      	movs	r3, #0
 800b1dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	9307      	str	r3, [sp, #28]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2312      	movs	r3, #18
 800b1ec:	e7d0      	b.n	800b190 <_dtoa_r+0x238>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1f2:	e7f5      	b.n	800b1e0 <_dtoa_r+0x288>
 800b1f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	9307      	str	r3, [sp, #28]
 800b1fa:	e7d7      	b.n	800b1ac <_dtoa_r+0x254>
 800b1fc:	3101      	adds	r1, #1
 800b1fe:	0052      	lsls	r2, r2, #1
 800b200:	e7d8      	b.n	800b1b4 <_dtoa_r+0x25c>
 800b202:	bf00      	nop
 800b204:	f3af 8000 	nop.w
 800b208:	636f4361 	.word	0x636f4361
 800b20c:	3fd287a7 	.word	0x3fd287a7
 800b210:	8b60c8b3 	.word	0x8b60c8b3
 800b214:	3fc68a28 	.word	0x3fc68a28
 800b218:	509f79fb 	.word	0x509f79fb
 800b21c:	3fd34413 	.word	0x3fd34413
 800b220:	0800d011 	.word	0x0800d011
 800b224:	0800d028 	.word	0x0800d028
 800b228:	7ff00000 	.word	0x7ff00000
 800b22c:	0800cfe1 	.word	0x0800cfe1
 800b230:	3ff80000 	.word	0x3ff80000
 800b234:	0800d120 	.word	0x0800d120
 800b238:	0800d080 	.word	0x0800d080
 800b23c:	0800d00d 	.word	0x0800d00d
 800b240:	0800cfe0 	.word	0x0800cfe0
 800b244:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b248:	6018      	str	r0, [r3, #0]
 800b24a:	9b07      	ldr	r3, [sp, #28]
 800b24c:	2b0e      	cmp	r3, #14
 800b24e:	f200 80a4 	bhi.w	800b39a <_dtoa_r+0x442>
 800b252:	2c00      	cmp	r4, #0
 800b254:	f000 80a1 	beq.w	800b39a <_dtoa_r+0x442>
 800b258:	2f00      	cmp	r7, #0
 800b25a:	dd33      	ble.n	800b2c4 <_dtoa_r+0x36c>
 800b25c:	4bad      	ldr	r3, [pc, #692]	@ (800b514 <_dtoa_r+0x5bc>)
 800b25e:	f007 020f 	and.w	r2, r7, #15
 800b262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b266:	ed93 7b00 	vldr	d7, [r3]
 800b26a:	05f8      	lsls	r0, r7, #23
 800b26c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b270:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b274:	d516      	bpl.n	800b2a4 <_dtoa_r+0x34c>
 800b276:	4ba8      	ldr	r3, [pc, #672]	@ (800b518 <_dtoa_r+0x5c0>)
 800b278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b27c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b280:	f7f5 faec 	bl	800085c <__aeabi_ddiv>
 800b284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b288:	f004 040f 	and.w	r4, r4, #15
 800b28c:	2603      	movs	r6, #3
 800b28e:	4da2      	ldr	r5, [pc, #648]	@ (800b518 <_dtoa_r+0x5c0>)
 800b290:	b954      	cbnz	r4, 800b2a8 <_dtoa_r+0x350>
 800b292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b29a:	f7f5 fadf 	bl	800085c <__aeabi_ddiv>
 800b29e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2a2:	e028      	b.n	800b2f6 <_dtoa_r+0x39e>
 800b2a4:	2602      	movs	r6, #2
 800b2a6:	e7f2      	b.n	800b28e <_dtoa_r+0x336>
 800b2a8:	07e1      	lsls	r1, r4, #31
 800b2aa:	d508      	bpl.n	800b2be <_dtoa_r+0x366>
 800b2ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2b4:	f7f5 f9a8 	bl	8000608 <__aeabi_dmul>
 800b2b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2bc:	3601      	adds	r6, #1
 800b2be:	1064      	asrs	r4, r4, #1
 800b2c0:	3508      	adds	r5, #8
 800b2c2:	e7e5      	b.n	800b290 <_dtoa_r+0x338>
 800b2c4:	f000 80d2 	beq.w	800b46c <_dtoa_r+0x514>
 800b2c8:	427c      	negs	r4, r7
 800b2ca:	4b92      	ldr	r3, [pc, #584]	@ (800b514 <_dtoa_r+0x5bc>)
 800b2cc:	4d92      	ldr	r5, [pc, #584]	@ (800b518 <_dtoa_r+0x5c0>)
 800b2ce:	f004 020f 	and.w	r2, r4, #15
 800b2d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2de:	f7f5 f993 	bl	8000608 <__aeabi_dmul>
 800b2e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2e6:	1124      	asrs	r4, r4, #4
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	2602      	movs	r6, #2
 800b2ec:	2c00      	cmp	r4, #0
 800b2ee:	f040 80b2 	bne.w	800b456 <_dtoa_r+0x4fe>
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1d3      	bne.n	800b29e <_dtoa_r+0x346>
 800b2f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b2f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f000 80b7 	beq.w	800b470 <_dtoa_r+0x518>
 800b302:	4b86      	ldr	r3, [pc, #536]	@ (800b51c <_dtoa_r+0x5c4>)
 800b304:	2200      	movs	r2, #0
 800b306:	4620      	mov	r0, r4
 800b308:	4629      	mov	r1, r5
 800b30a:	f7f5 fbef 	bl	8000aec <__aeabi_dcmplt>
 800b30e:	2800      	cmp	r0, #0
 800b310:	f000 80ae 	beq.w	800b470 <_dtoa_r+0x518>
 800b314:	9b07      	ldr	r3, [sp, #28]
 800b316:	2b00      	cmp	r3, #0
 800b318:	f000 80aa 	beq.w	800b470 <_dtoa_r+0x518>
 800b31c:	9b00      	ldr	r3, [sp, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	dd37      	ble.n	800b392 <_dtoa_r+0x43a>
 800b322:	1e7b      	subs	r3, r7, #1
 800b324:	9304      	str	r3, [sp, #16]
 800b326:	4620      	mov	r0, r4
 800b328:	4b7d      	ldr	r3, [pc, #500]	@ (800b520 <_dtoa_r+0x5c8>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	4629      	mov	r1, r5
 800b32e:	f7f5 f96b 	bl	8000608 <__aeabi_dmul>
 800b332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b336:	9c00      	ldr	r4, [sp, #0]
 800b338:	3601      	adds	r6, #1
 800b33a:	4630      	mov	r0, r6
 800b33c:	f7f5 f8fa 	bl	8000534 <__aeabi_i2d>
 800b340:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b344:	f7f5 f960 	bl	8000608 <__aeabi_dmul>
 800b348:	4b76      	ldr	r3, [pc, #472]	@ (800b524 <_dtoa_r+0x5cc>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	f7f4 ffa6 	bl	800029c <__adddf3>
 800b350:	4605      	mov	r5, r0
 800b352:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b356:	2c00      	cmp	r4, #0
 800b358:	f040 808d 	bne.w	800b476 <_dtoa_r+0x51e>
 800b35c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b360:	4b71      	ldr	r3, [pc, #452]	@ (800b528 <_dtoa_r+0x5d0>)
 800b362:	2200      	movs	r2, #0
 800b364:	f7f4 ff98 	bl	8000298 <__aeabi_dsub>
 800b368:	4602      	mov	r2, r0
 800b36a:	460b      	mov	r3, r1
 800b36c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b370:	462a      	mov	r2, r5
 800b372:	4633      	mov	r3, r6
 800b374:	f7f5 fbd8 	bl	8000b28 <__aeabi_dcmpgt>
 800b378:	2800      	cmp	r0, #0
 800b37a:	f040 828b 	bne.w	800b894 <_dtoa_r+0x93c>
 800b37e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b382:	462a      	mov	r2, r5
 800b384:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b388:	f7f5 fbb0 	bl	8000aec <__aeabi_dcmplt>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	f040 8128 	bne.w	800b5e2 <_dtoa_r+0x68a>
 800b392:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b396:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b39a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f2c0 815a 	blt.w	800b656 <_dtoa_r+0x6fe>
 800b3a2:	2f0e      	cmp	r7, #14
 800b3a4:	f300 8157 	bgt.w	800b656 <_dtoa_r+0x6fe>
 800b3a8:	4b5a      	ldr	r3, [pc, #360]	@ (800b514 <_dtoa_r+0x5bc>)
 800b3aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b3ae:	ed93 7b00 	vldr	d7, [r3]
 800b3b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	ed8d 7b00 	vstr	d7, [sp]
 800b3ba:	da03      	bge.n	800b3c4 <_dtoa_r+0x46c>
 800b3bc:	9b07      	ldr	r3, [sp, #28]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f340 8101 	ble.w	800b5c6 <_dtoa_r+0x66e>
 800b3c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b3c8:	4656      	mov	r6, sl
 800b3ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	f7f5 fa43 	bl	800085c <__aeabi_ddiv>
 800b3d6:	f7f5 fbc7 	bl	8000b68 <__aeabi_d2iz>
 800b3da:	4680      	mov	r8, r0
 800b3dc:	f7f5 f8aa 	bl	8000534 <__aeabi_i2d>
 800b3e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3e4:	f7f5 f910 	bl	8000608 <__aeabi_dmul>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b3f4:	f7f4 ff50 	bl	8000298 <__aeabi_dsub>
 800b3f8:	f806 4b01 	strb.w	r4, [r6], #1
 800b3fc:	9d07      	ldr	r5, [sp, #28]
 800b3fe:	eba6 040a 	sub.w	r4, r6, sl
 800b402:	42a5      	cmp	r5, r4
 800b404:	4602      	mov	r2, r0
 800b406:	460b      	mov	r3, r1
 800b408:	f040 8117 	bne.w	800b63a <_dtoa_r+0x6e2>
 800b40c:	f7f4 ff46 	bl	800029c <__adddf3>
 800b410:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b414:	4604      	mov	r4, r0
 800b416:	460d      	mov	r5, r1
 800b418:	f7f5 fb86 	bl	8000b28 <__aeabi_dcmpgt>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	f040 80f9 	bne.w	800b614 <_dtoa_r+0x6bc>
 800b422:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b426:	4620      	mov	r0, r4
 800b428:	4629      	mov	r1, r5
 800b42a:	f7f5 fb55 	bl	8000ad8 <__aeabi_dcmpeq>
 800b42e:	b118      	cbz	r0, 800b438 <_dtoa_r+0x4e0>
 800b430:	f018 0f01 	tst.w	r8, #1
 800b434:	f040 80ee 	bne.w	800b614 <_dtoa_r+0x6bc>
 800b438:	4649      	mov	r1, r9
 800b43a:	4658      	mov	r0, fp
 800b43c:	f000 fc90 	bl	800bd60 <_Bfree>
 800b440:	2300      	movs	r3, #0
 800b442:	7033      	strb	r3, [r6, #0]
 800b444:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b446:	3701      	adds	r7, #1
 800b448:	601f      	str	r7, [r3, #0]
 800b44a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f000 831d 	beq.w	800ba8c <_dtoa_r+0xb34>
 800b452:	601e      	str	r6, [r3, #0]
 800b454:	e31a      	b.n	800ba8c <_dtoa_r+0xb34>
 800b456:	07e2      	lsls	r2, r4, #31
 800b458:	d505      	bpl.n	800b466 <_dtoa_r+0x50e>
 800b45a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b45e:	f7f5 f8d3 	bl	8000608 <__aeabi_dmul>
 800b462:	3601      	adds	r6, #1
 800b464:	2301      	movs	r3, #1
 800b466:	1064      	asrs	r4, r4, #1
 800b468:	3508      	adds	r5, #8
 800b46a:	e73f      	b.n	800b2ec <_dtoa_r+0x394>
 800b46c:	2602      	movs	r6, #2
 800b46e:	e742      	b.n	800b2f6 <_dtoa_r+0x39e>
 800b470:	9c07      	ldr	r4, [sp, #28]
 800b472:	9704      	str	r7, [sp, #16]
 800b474:	e761      	b.n	800b33a <_dtoa_r+0x3e2>
 800b476:	4b27      	ldr	r3, [pc, #156]	@ (800b514 <_dtoa_r+0x5bc>)
 800b478:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b47a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b47e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b482:	4454      	add	r4, sl
 800b484:	2900      	cmp	r1, #0
 800b486:	d053      	beq.n	800b530 <_dtoa_r+0x5d8>
 800b488:	4928      	ldr	r1, [pc, #160]	@ (800b52c <_dtoa_r+0x5d4>)
 800b48a:	2000      	movs	r0, #0
 800b48c:	f7f5 f9e6 	bl	800085c <__aeabi_ddiv>
 800b490:	4633      	mov	r3, r6
 800b492:	462a      	mov	r2, r5
 800b494:	f7f4 ff00 	bl	8000298 <__aeabi_dsub>
 800b498:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b49c:	4656      	mov	r6, sl
 800b49e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4a2:	f7f5 fb61 	bl	8000b68 <__aeabi_d2iz>
 800b4a6:	4605      	mov	r5, r0
 800b4a8:	f7f5 f844 	bl	8000534 <__aeabi_i2d>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4b4:	f7f4 fef0 	bl	8000298 <__aeabi_dsub>
 800b4b8:	3530      	adds	r5, #48	@ 0x30
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4c2:	f806 5b01 	strb.w	r5, [r6], #1
 800b4c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4ca:	f7f5 fb0f 	bl	8000aec <__aeabi_dcmplt>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d171      	bne.n	800b5b6 <_dtoa_r+0x65e>
 800b4d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4d6:	4911      	ldr	r1, [pc, #68]	@ (800b51c <_dtoa_r+0x5c4>)
 800b4d8:	2000      	movs	r0, #0
 800b4da:	f7f4 fedd 	bl	8000298 <__aeabi_dsub>
 800b4de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4e2:	f7f5 fb03 	bl	8000aec <__aeabi_dcmplt>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	f040 8095 	bne.w	800b616 <_dtoa_r+0x6be>
 800b4ec:	42a6      	cmp	r6, r4
 800b4ee:	f43f af50 	beq.w	800b392 <_dtoa_r+0x43a>
 800b4f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b4f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b520 <_dtoa_r+0x5c8>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f7f5 f885 	bl	8000608 <__aeabi_dmul>
 800b4fe:	4b08      	ldr	r3, [pc, #32]	@ (800b520 <_dtoa_r+0x5c8>)
 800b500:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b504:	2200      	movs	r2, #0
 800b506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b50a:	f7f5 f87d 	bl	8000608 <__aeabi_dmul>
 800b50e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b512:	e7c4      	b.n	800b49e <_dtoa_r+0x546>
 800b514:	0800d120 	.word	0x0800d120
 800b518:	0800d0f8 	.word	0x0800d0f8
 800b51c:	3ff00000 	.word	0x3ff00000
 800b520:	40240000 	.word	0x40240000
 800b524:	401c0000 	.word	0x401c0000
 800b528:	40140000 	.word	0x40140000
 800b52c:	3fe00000 	.word	0x3fe00000
 800b530:	4631      	mov	r1, r6
 800b532:	4628      	mov	r0, r5
 800b534:	f7f5 f868 	bl	8000608 <__aeabi_dmul>
 800b538:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b53c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b53e:	4656      	mov	r6, sl
 800b540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b544:	f7f5 fb10 	bl	8000b68 <__aeabi_d2iz>
 800b548:	4605      	mov	r5, r0
 800b54a:	f7f4 fff3 	bl	8000534 <__aeabi_i2d>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b556:	f7f4 fe9f 	bl	8000298 <__aeabi_dsub>
 800b55a:	3530      	adds	r5, #48	@ 0x30
 800b55c:	f806 5b01 	strb.w	r5, [r6], #1
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	42a6      	cmp	r6, r4
 800b566:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b56a:	f04f 0200 	mov.w	r2, #0
 800b56e:	d124      	bne.n	800b5ba <_dtoa_r+0x662>
 800b570:	4bac      	ldr	r3, [pc, #688]	@ (800b824 <_dtoa_r+0x8cc>)
 800b572:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b576:	f7f4 fe91 	bl	800029c <__adddf3>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b582:	f7f5 fad1 	bl	8000b28 <__aeabi_dcmpgt>
 800b586:	2800      	cmp	r0, #0
 800b588:	d145      	bne.n	800b616 <_dtoa_r+0x6be>
 800b58a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b58e:	49a5      	ldr	r1, [pc, #660]	@ (800b824 <_dtoa_r+0x8cc>)
 800b590:	2000      	movs	r0, #0
 800b592:	f7f4 fe81 	bl	8000298 <__aeabi_dsub>
 800b596:	4602      	mov	r2, r0
 800b598:	460b      	mov	r3, r1
 800b59a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b59e:	f7f5 faa5 	bl	8000aec <__aeabi_dcmplt>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	f43f aef5 	beq.w	800b392 <_dtoa_r+0x43a>
 800b5a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b5aa:	1e73      	subs	r3, r6, #1
 800b5ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5b2:	2b30      	cmp	r3, #48	@ 0x30
 800b5b4:	d0f8      	beq.n	800b5a8 <_dtoa_r+0x650>
 800b5b6:	9f04      	ldr	r7, [sp, #16]
 800b5b8:	e73e      	b.n	800b438 <_dtoa_r+0x4e0>
 800b5ba:	4b9b      	ldr	r3, [pc, #620]	@ (800b828 <_dtoa_r+0x8d0>)
 800b5bc:	f7f5 f824 	bl	8000608 <__aeabi_dmul>
 800b5c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5c4:	e7bc      	b.n	800b540 <_dtoa_r+0x5e8>
 800b5c6:	d10c      	bne.n	800b5e2 <_dtoa_r+0x68a>
 800b5c8:	4b98      	ldr	r3, [pc, #608]	@ (800b82c <_dtoa_r+0x8d4>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5d0:	f7f5 f81a 	bl	8000608 <__aeabi_dmul>
 800b5d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5d8:	f7f5 fa9c 	bl	8000b14 <__aeabi_dcmpge>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	f000 8157 	beq.w	800b890 <_dtoa_r+0x938>
 800b5e2:	2400      	movs	r4, #0
 800b5e4:	4625      	mov	r5, r4
 800b5e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5e8:	43db      	mvns	r3, r3
 800b5ea:	9304      	str	r3, [sp, #16]
 800b5ec:	4656      	mov	r6, sl
 800b5ee:	2700      	movs	r7, #0
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	4658      	mov	r0, fp
 800b5f4:	f000 fbb4 	bl	800bd60 <_Bfree>
 800b5f8:	2d00      	cmp	r5, #0
 800b5fa:	d0dc      	beq.n	800b5b6 <_dtoa_r+0x65e>
 800b5fc:	b12f      	cbz	r7, 800b60a <_dtoa_r+0x6b2>
 800b5fe:	42af      	cmp	r7, r5
 800b600:	d003      	beq.n	800b60a <_dtoa_r+0x6b2>
 800b602:	4639      	mov	r1, r7
 800b604:	4658      	mov	r0, fp
 800b606:	f000 fbab 	bl	800bd60 <_Bfree>
 800b60a:	4629      	mov	r1, r5
 800b60c:	4658      	mov	r0, fp
 800b60e:	f000 fba7 	bl	800bd60 <_Bfree>
 800b612:	e7d0      	b.n	800b5b6 <_dtoa_r+0x65e>
 800b614:	9704      	str	r7, [sp, #16]
 800b616:	4633      	mov	r3, r6
 800b618:	461e      	mov	r6, r3
 800b61a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b61e:	2a39      	cmp	r2, #57	@ 0x39
 800b620:	d107      	bne.n	800b632 <_dtoa_r+0x6da>
 800b622:	459a      	cmp	sl, r3
 800b624:	d1f8      	bne.n	800b618 <_dtoa_r+0x6c0>
 800b626:	9a04      	ldr	r2, [sp, #16]
 800b628:	3201      	adds	r2, #1
 800b62a:	9204      	str	r2, [sp, #16]
 800b62c:	2230      	movs	r2, #48	@ 0x30
 800b62e:	f88a 2000 	strb.w	r2, [sl]
 800b632:	781a      	ldrb	r2, [r3, #0]
 800b634:	3201      	adds	r2, #1
 800b636:	701a      	strb	r2, [r3, #0]
 800b638:	e7bd      	b.n	800b5b6 <_dtoa_r+0x65e>
 800b63a:	4b7b      	ldr	r3, [pc, #492]	@ (800b828 <_dtoa_r+0x8d0>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	f7f4 ffe3 	bl	8000608 <__aeabi_dmul>
 800b642:	2200      	movs	r2, #0
 800b644:	2300      	movs	r3, #0
 800b646:	4604      	mov	r4, r0
 800b648:	460d      	mov	r5, r1
 800b64a:	f7f5 fa45 	bl	8000ad8 <__aeabi_dcmpeq>
 800b64e:	2800      	cmp	r0, #0
 800b650:	f43f aebb 	beq.w	800b3ca <_dtoa_r+0x472>
 800b654:	e6f0      	b.n	800b438 <_dtoa_r+0x4e0>
 800b656:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b658:	2a00      	cmp	r2, #0
 800b65a:	f000 80db 	beq.w	800b814 <_dtoa_r+0x8bc>
 800b65e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b660:	2a01      	cmp	r2, #1
 800b662:	f300 80bf 	bgt.w	800b7e4 <_dtoa_r+0x88c>
 800b666:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b668:	2a00      	cmp	r2, #0
 800b66a:	f000 80b7 	beq.w	800b7dc <_dtoa_r+0x884>
 800b66e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b672:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b674:	4646      	mov	r6, r8
 800b676:	9a08      	ldr	r2, [sp, #32]
 800b678:	2101      	movs	r1, #1
 800b67a:	441a      	add	r2, r3
 800b67c:	4658      	mov	r0, fp
 800b67e:	4498      	add	r8, r3
 800b680:	9208      	str	r2, [sp, #32]
 800b682:	f000 fc21 	bl	800bec8 <__i2b>
 800b686:	4605      	mov	r5, r0
 800b688:	b15e      	cbz	r6, 800b6a2 <_dtoa_r+0x74a>
 800b68a:	9b08      	ldr	r3, [sp, #32]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	dd08      	ble.n	800b6a2 <_dtoa_r+0x74a>
 800b690:	42b3      	cmp	r3, r6
 800b692:	9a08      	ldr	r2, [sp, #32]
 800b694:	bfa8      	it	ge
 800b696:	4633      	movge	r3, r6
 800b698:	eba8 0803 	sub.w	r8, r8, r3
 800b69c:	1af6      	subs	r6, r6, r3
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	9308      	str	r3, [sp, #32]
 800b6a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6a4:	b1f3      	cbz	r3, 800b6e4 <_dtoa_r+0x78c>
 800b6a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f000 80b7 	beq.w	800b81c <_dtoa_r+0x8c4>
 800b6ae:	b18c      	cbz	r4, 800b6d4 <_dtoa_r+0x77c>
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	4622      	mov	r2, r4
 800b6b4:	4658      	mov	r0, fp
 800b6b6:	f000 fcc7 	bl	800c048 <__pow5mult>
 800b6ba:	464a      	mov	r2, r9
 800b6bc:	4601      	mov	r1, r0
 800b6be:	4605      	mov	r5, r0
 800b6c0:	4658      	mov	r0, fp
 800b6c2:	f000 fc17 	bl	800bef4 <__multiply>
 800b6c6:	4649      	mov	r1, r9
 800b6c8:	9004      	str	r0, [sp, #16]
 800b6ca:	4658      	mov	r0, fp
 800b6cc:	f000 fb48 	bl	800bd60 <_Bfree>
 800b6d0:	9b04      	ldr	r3, [sp, #16]
 800b6d2:	4699      	mov	r9, r3
 800b6d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6d6:	1b1a      	subs	r2, r3, r4
 800b6d8:	d004      	beq.n	800b6e4 <_dtoa_r+0x78c>
 800b6da:	4649      	mov	r1, r9
 800b6dc:	4658      	mov	r0, fp
 800b6de:	f000 fcb3 	bl	800c048 <__pow5mult>
 800b6e2:	4681      	mov	r9, r0
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	4658      	mov	r0, fp
 800b6e8:	f000 fbee 	bl	800bec8 <__i2b>
 800b6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f000 81cf 	beq.w	800ba94 <_dtoa_r+0xb3c>
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	4601      	mov	r1, r0
 800b6fa:	4658      	mov	r0, fp
 800b6fc:	f000 fca4 	bl	800c048 <__pow5mult>
 800b700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b702:	2b01      	cmp	r3, #1
 800b704:	4604      	mov	r4, r0
 800b706:	f300 8095 	bgt.w	800b834 <_dtoa_r+0x8dc>
 800b70a:	9b02      	ldr	r3, [sp, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f040 8087 	bne.w	800b820 <_dtoa_r+0x8c8>
 800b712:	9b03      	ldr	r3, [sp, #12]
 800b714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f040 8089 	bne.w	800b830 <_dtoa_r+0x8d8>
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b724:	0d1b      	lsrs	r3, r3, #20
 800b726:	051b      	lsls	r3, r3, #20
 800b728:	b12b      	cbz	r3, 800b736 <_dtoa_r+0x7de>
 800b72a:	9b08      	ldr	r3, [sp, #32]
 800b72c:	3301      	adds	r3, #1
 800b72e:	9308      	str	r3, [sp, #32]
 800b730:	f108 0801 	add.w	r8, r8, #1
 800b734:	2301      	movs	r3, #1
 800b736:	930a      	str	r3, [sp, #40]	@ 0x28
 800b738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 81b0 	beq.w	800baa0 <_dtoa_r+0xb48>
 800b740:	6923      	ldr	r3, [r4, #16]
 800b742:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b746:	6918      	ldr	r0, [r3, #16]
 800b748:	f000 fb72 	bl	800be30 <__hi0bits>
 800b74c:	f1c0 0020 	rsb	r0, r0, #32
 800b750:	9b08      	ldr	r3, [sp, #32]
 800b752:	4418      	add	r0, r3
 800b754:	f010 001f 	ands.w	r0, r0, #31
 800b758:	d077      	beq.n	800b84a <_dtoa_r+0x8f2>
 800b75a:	f1c0 0320 	rsb	r3, r0, #32
 800b75e:	2b04      	cmp	r3, #4
 800b760:	dd6b      	ble.n	800b83a <_dtoa_r+0x8e2>
 800b762:	9b08      	ldr	r3, [sp, #32]
 800b764:	f1c0 001c 	rsb	r0, r0, #28
 800b768:	4403      	add	r3, r0
 800b76a:	4480      	add	r8, r0
 800b76c:	4406      	add	r6, r0
 800b76e:	9308      	str	r3, [sp, #32]
 800b770:	f1b8 0f00 	cmp.w	r8, #0
 800b774:	dd05      	ble.n	800b782 <_dtoa_r+0x82a>
 800b776:	4649      	mov	r1, r9
 800b778:	4642      	mov	r2, r8
 800b77a:	4658      	mov	r0, fp
 800b77c:	f000 fcbe 	bl	800c0fc <__lshift>
 800b780:	4681      	mov	r9, r0
 800b782:	9b08      	ldr	r3, [sp, #32]
 800b784:	2b00      	cmp	r3, #0
 800b786:	dd05      	ble.n	800b794 <_dtoa_r+0x83c>
 800b788:	4621      	mov	r1, r4
 800b78a:	461a      	mov	r2, r3
 800b78c:	4658      	mov	r0, fp
 800b78e:	f000 fcb5 	bl	800c0fc <__lshift>
 800b792:	4604      	mov	r4, r0
 800b794:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b796:	2b00      	cmp	r3, #0
 800b798:	d059      	beq.n	800b84e <_dtoa_r+0x8f6>
 800b79a:	4621      	mov	r1, r4
 800b79c:	4648      	mov	r0, r9
 800b79e:	f000 fd19 	bl	800c1d4 <__mcmp>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	da53      	bge.n	800b84e <_dtoa_r+0x8f6>
 800b7a6:	1e7b      	subs	r3, r7, #1
 800b7a8:	9304      	str	r3, [sp, #16]
 800b7aa:	4649      	mov	r1, r9
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	220a      	movs	r2, #10
 800b7b0:	4658      	mov	r0, fp
 800b7b2:	f000 faf7 	bl	800bda4 <__multadd>
 800b7b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7b8:	4681      	mov	r9, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f000 8172 	beq.w	800baa4 <_dtoa_r+0xb4c>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	220a      	movs	r2, #10
 800b7c6:	4658      	mov	r0, fp
 800b7c8:	f000 faec 	bl	800bda4 <__multadd>
 800b7cc:	9b00      	ldr	r3, [sp, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	dc67      	bgt.n	800b8a4 <_dtoa_r+0x94c>
 800b7d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	dc41      	bgt.n	800b85e <_dtoa_r+0x906>
 800b7da:	e063      	b.n	800b8a4 <_dtoa_r+0x94c>
 800b7dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b7de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b7e2:	e746      	b.n	800b672 <_dtoa_r+0x71a>
 800b7e4:	9b07      	ldr	r3, [sp, #28]
 800b7e6:	1e5c      	subs	r4, r3, #1
 800b7e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7ea:	42a3      	cmp	r3, r4
 800b7ec:	bfbf      	itttt	lt
 800b7ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b7f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b7f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b7f4:	1ae3      	sublt	r3, r4, r3
 800b7f6:	bfb4      	ite	lt
 800b7f8:	18d2      	addlt	r2, r2, r3
 800b7fa:	1b1c      	subge	r4, r3, r4
 800b7fc:	9b07      	ldr	r3, [sp, #28]
 800b7fe:	bfbc      	itt	lt
 800b800:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b802:	2400      	movlt	r4, #0
 800b804:	2b00      	cmp	r3, #0
 800b806:	bfb5      	itete	lt
 800b808:	eba8 0603 	sublt.w	r6, r8, r3
 800b80c:	9b07      	ldrge	r3, [sp, #28]
 800b80e:	2300      	movlt	r3, #0
 800b810:	4646      	movge	r6, r8
 800b812:	e730      	b.n	800b676 <_dtoa_r+0x71e>
 800b814:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b816:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b818:	4646      	mov	r6, r8
 800b81a:	e735      	b.n	800b688 <_dtoa_r+0x730>
 800b81c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b81e:	e75c      	b.n	800b6da <_dtoa_r+0x782>
 800b820:	2300      	movs	r3, #0
 800b822:	e788      	b.n	800b736 <_dtoa_r+0x7de>
 800b824:	3fe00000 	.word	0x3fe00000
 800b828:	40240000 	.word	0x40240000
 800b82c:	40140000 	.word	0x40140000
 800b830:	9b02      	ldr	r3, [sp, #8]
 800b832:	e780      	b.n	800b736 <_dtoa_r+0x7de>
 800b834:	2300      	movs	r3, #0
 800b836:	930a      	str	r3, [sp, #40]	@ 0x28
 800b838:	e782      	b.n	800b740 <_dtoa_r+0x7e8>
 800b83a:	d099      	beq.n	800b770 <_dtoa_r+0x818>
 800b83c:	9a08      	ldr	r2, [sp, #32]
 800b83e:	331c      	adds	r3, #28
 800b840:	441a      	add	r2, r3
 800b842:	4498      	add	r8, r3
 800b844:	441e      	add	r6, r3
 800b846:	9208      	str	r2, [sp, #32]
 800b848:	e792      	b.n	800b770 <_dtoa_r+0x818>
 800b84a:	4603      	mov	r3, r0
 800b84c:	e7f6      	b.n	800b83c <_dtoa_r+0x8e4>
 800b84e:	9b07      	ldr	r3, [sp, #28]
 800b850:	9704      	str	r7, [sp, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	dc20      	bgt.n	800b898 <_dtoa_r+0x940>
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	dd1e      	ble.n	800b89c <_dtoa_r+0x944>
 800b85e:	9b00      	ldr	r3, [sp, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	f47f aec0 	bne.w	800b5e6 <_dtoa_r+0x68e>
 800b866:	4621      	mov	r1, r4
 800b868:	2205      	movs	r2, #5
 800b86a:	4658      	mov	r0, fp
 800b86c:	f000 fa9a 	bl	800bda4 <__multadd>
 800b870:	4601      	mov	r1, r0
 800b872:	4604      	mov	r4, r0
 800b874:	4648      	mov	r0, r9
 800b876:	f000 fcad 	bl	800c1d4 <__mcmp>
 800b87a:	2800      	cmp	r0, #0
 800b87c:	f77f aeb3 	ble.w	800b5e6 <_dtoa_r+0x68e>
 800b880:	4656      	mov	r6, sl
 800b882:	2331      	movs	r3, #49	@ 0x31
 800b884:	f806 3b01 	strb.w	r3, [r6], #1
 800b888:	9b04      	ldr	r3, [sp, #16]
 800b88a:	3301      	adds	r3, #1
 800b88c:	9304      	str	r3, [sp, #16]
 800b88e:	e6ae      	b.n	800b5ee <_dtoa_r+0x696>
 800b890:	9c07      	ldr	r4, [sp, #28]
 800b892:	9704      	str	r7, [sp, #16]
 800b894:	4625      	mov	r5, r4
 800b896:	e7f3      	b.n	800b880 <_dtoa_r+0x928>
 800b898:	9b07      	ldr	r3, [sp, #28]
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f000 8104 	beq.w	800baac <_dtoa_r+0xb54>
 800b8a4:	2e00      	cmp	r6, #0
 800b8a6:	dd05      	ble.n	800b8b4 <_dtoa_r+0x95c>
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	4632      	mov	r2, r6
 800b8ac:	4658      	mov	r0, fp
 800b8ae:	f000 fc25 	bl	800c0fc <__lshift>
 800b8b2:	4605      	mov	r5, r0
 800b8b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d05a      	beq.n	800b970 <_dtoa_r+0xa18>
 800b8ba:	6869      	ldr	r1, [r5, #4]
 800b8bc:	4658      	mov	r0, fp
 800b8be:	f000 fa0f 	bl	800bce0 <_Balloc>
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	b928      	cbnz	r0, 800b8d2 <_dtoa_r+0x97a>
 800b8c6:	4b84      	ldr	r3, [pc, #528]	@ (800bad8 <_dtoa_r+0xb80>)
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b8ce:	f7ff bb5a 	b.w	800af86 <_dtoa_r+0x2e>
 800b8d2:	692a      	ldr	r2, [r5, #16]
 800b8d4:	3202      	adds	r2, #2
 800b8d6:	0092      	lsls	r2, r2, #2
 800b8d8:	f105 010c 	add.w	r1, r5, #12
 800b8dc:	300c      	adds	r0, #12
 800b8de:	f000 ffaf 	bl	800c840 <memcpy>
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	4631      	mov	r1, r6
 800b8e6:	4658      	mov	r0, fp
 800b8e8:	f000 fc08 	bl	800c0fc <__lshift>
 800b8ec:	f10a 0301 	add.w	r3, sl, #1
 800b8f0:	9307      	str	r3, [sp, #28]
 800b8f2:	9b00      	ldr	r3, [sp, #0]
 800b8f4:	4453      	add	r3, sl
 800b8f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8f8:	9b02      	ldr	r3, [sp, #8]
 800b8fa:	f003 0301 	and.w	r3, r3, #1
 800b8fe:	462f      	mov	r7, r5
 800b900:	930a      	str	r3, [sp, #40]	@ 0x28
 800b902:	4605      	mov	r5, r0
 800b904:	9b07      	ldr	r3, [sp, #28]
 800b906:	4621      	mov	r1, r4
 800b908:	3b01      	subs	r3, #1
 800b90a:	4648      	mov	r0, r9
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	f7ff fa9a 	bl	800ae46 <quorem>
 800b912:	4639      	mov	r1, r7
 800b914:	9002      	str	r0, [sp, #8]
 800b916:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b91a:	4648      	mov	r0, r9
 800b91c:	f000 fc5a 	bl	800c1d4 <__mcmp>
 800b920:	462a      	mov	r2, r5
 800b922:	9008      	str	r0, [sp, #32]
 800b924:	4621      	mov	r1, r4
 800b926:	4658      	mov	r0, fp
 800b928:	f000 fc70 	bl	800c20c <__mdiff>
 800b92c:	68c2      	ldr	r2, [r0, #12]
 800b92e:	4606      	mov	r6, r0
 800b930:	bb02      	cbnz	r2, 800b974 <_dtoa_r+0xa1c>
 800b932:	4601      	mov	r1, r0
 800b934:	4648      	mov	r0, r9
 800b936:	f000 fc4d 	bl	800c1d4 <__mcmp>
 800b93a:	4602      	mov	r2, r0
 800b93c:	4631      	mov	r1, r6
 800b93e:	4658      	mov	r0, fp
 800b940:	920e      	str	r2, [sp, #56]	@ 0x38
 800b942:	f000 fa0d 	bl	800bd60 <_Bfree>
 800b946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b948:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b94a:	9e07      	ldr	r6, [sp, #28]
 800b94c:	ea43 0102 	orr.w	r1, r3, r2
 800b950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b952:	4319      	orrs	r1, r3
 800b954:	d110      	bne.n	800b978 <_dtoa_r+0xa20>
 800b956:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b95a:	d029      	beq.n	800b9b0 <_dtoa_r+0xa58>
 800b95c:	9b08      	ldr	r3, [sp, #32]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	dd02      	ble.n	800b968 <_dtoa_r+0xa10>
 800b962:	9b02      	ldr	r3, [sp, #8]
 800b964:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b968:	9b00      	ldr	r3, [sp, #0]
 800b96a:	f883 8000 	strb.w	r8, [r3]
 800b96e:	e63f      	b.n	800b5f0 <_dtoa_r+0x698>
 800b970:	4628      	mov	r0, r5
 800b972:	e7bb      	b.n	800b8ec <_dtoa_r+0x994>
 800b974:	2201      	movs	r2, #1
 800b976:	e7e1      	b.n	800b93c <_dtoa_r+0x9e4>
 800b978:	9b08      	ldr	r3, [sp, #32]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	db04      	blt.n	800b988 <_dtoa_r+0xa30>
 800b97e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b980:	430b      	orrs	r3, r1
 800b982:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b984:	430b      	orrs	r3, r1
 800b986:	d120      	bne.n	800b9ca <_dtoa_r+0xa72>
 800b988:	2a00      	cmp	r2, #0
 800b98a:	dded      	ble.n	800b968 <_dtoa_r+0xa10>
 800b98c:	4649      	mov	r1, r9
 800b98e:	2201      	movs	r2, #1
 800b990:	4658      	mov	r0, fp
 800b992:	f000 fbb3 	bl	800c0fc <__lshift>
 800b996:	4621      	mov	r1, r4
 800b998:	4681      	mov	r9, r0
 800b99a:	f000 fc1b 	bl	800c1d4 <__mcmp>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	dc03      	bgt.n	800b9aa <_dtoa_r+0xa52>
 800b9a2:	d1e1      	bne.n	800b968 <_dtoa_r+0xa10>
 800b9a4:	f018 0f01 	tst.w	r8, #1
 800b9a8:	d0de      	beq.n	800b968 <_dtoa_r+0xa10>
 800b9aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9ae:	d1d8      	bne.n	800b962 <_dtoa_r+0xa0a>
 800b9b0:	9a00      	ldr	r2, [sp, #0]
 800b9b2:	2339      	movs	r3, #57	@ 0x39
 800b9b4:	7013      	strb	r3, [r2, #0]
 800b9b6:	4633      	mov	r3, r6
 800b9b8:	461e      	mov	r6, r3
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b9c0:	2a39      	cmp	r2, #57	@ 0x39
 800b9c2:	d052      	beq.n	800ba6a <_dtoa_r+0xb12>
 800b9c4:	3201      	adds	r2, #1
 800b9c6:	701a      	strb	r2, [r3, #0]
 800b9c8:	e612      	b.n	800b5f0 <_dtoa_r+0x698>
 800b9ca:	2a00      	cmp	r2, #0
 800b9cc:	dd07      	ble.n	800b9de <_dtoa_r+0xa86>
 800b9ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9d2:	d0ed      	beq.n	800b9b0 <_dtoa_r+0xa58>
 800b9d4:	9a00      	ldr	r2, [sp, #0]
 800b9d6:	f108 0301 	add.w	r3, r8, #1
 800b9da:	7013      	strb	r3, [r2, #0]
 800b9dc:	e608      	b.n	800b5f0 <_dtoa_r+0x698>
 800b9de:	9b07      	ldr	r3, [sp, #28]
 800b9e0:	9a07      	ldr	r2, [sp, #28]
 800b9e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b9e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d028      	beq.n	800ba3e <_dtoa_r+0xae6>
 800b9ec:	4649      	mov	r1, r9
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	220a      	movs	r2, #10
 800b9f2:	4658      	mov	r0, fp
 800b9f4:	f000 f9d6 	bl	800bda4 <__multadd>
 800b9f8:	42af      	cmp	r7, r5
 800b9fa:	4681      	mov	r9, r0
 800b9fc:	f04f 0300 	mov.w	r3, #0
 800ba00:	f04f 020a 	mov.w	r2, #10
 800ba04:	4639      	mov	r1, r7
 800ba06:	4658      	mov	r0, fp
 800ba08:	d107      	bne.n	800ba1a <_dtoa_r+0xac2>
 800ba0a:	f000 f9cb 	bl	800bda4 <__multadd>
 800ba0e:	4607      	mov	r7, r0
 800ba10:	4605      	mov	r5, r0
 800ba12:	9b07      	ldr	r3, [sp, #28]
 800ba14:	3301      	adds	r3, #1
 800ba16:	9307      	str	r3, [sp, #28]
 800ba18:	e774      	b.n	800b904 <_dtoa_r+0x9ac>
 800ba1a:	f000 f9c3 	bl	800bda4 <__multadd>
 800ba1e:	4629      	mov	r1, r5
 800ba20:	4607      	mov	r7, r0
 800ba22:	2300      	movs	r3, #0
 800ba24:	220a      	movs	r2, #10
 800ba26:	4658      	mov	r0, fp
 800ba28:	f000 f9bc 	bl	800bda4 <__multadd>
 800ba2c:	4605      	mov	r5, r0
 800ba2e:	e7f0      	b.n	800ba12 <_dtoa_r+0xaba>
 800ba30:	9b00      	ldr	r3, [sp, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	bfcc      	ite	gt
 800ba36:	461e      	movgt	r6, r3
 800ba38:	2601      	movle	r6, #1
 800ba3a:	4456      	add	r6, sl
 800ba3c:	2700      	movs	r7, #0
 800ba3e:	4649      	mov	r1, r9
 800ba40:	2201      	movs	r2, #1
 800ba42:	4658      	mov	r0, fp
 800ba44:	f000 fb5a 	bl	800c0fc <__lshift>
 800ba48:	4621      	mov	r1, r4
 800ba4a:	4681      	mov	r9, r0
 800ba4c:	f000 fbc2 	bl	800c1d4 <__mcmp>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	dcb0      	bgt.n	800b9b6 <_dtoa_r+0xa5e>
 800ba54:	d102      	bne.n	800ba5c <_dtoa_r+0xb04>
 800ba56:	f018 0f01 	tst.w	r8, #1
 800ba5a:	d1ac      	bne.n	800b9b6 <_dtoa_r+0xa5e>
 800ba5c:	4633      	mov	r3, r6
 800ba5e:	461e      	mov	r6, r3
 800ba60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba64:	2a30      	cmp	r2, #48	@ 0x30
 800ba66:	d0fa      	beq.n	800ba5e <_dtoa_r+0xb06>
 800ba68:	e5c2      	b.n	800b5f0 <_dtoa_r+0x698>
 800ba6a:	459a      	cmp	sl, r3
 800ba6c:	d1a4      	bne.n	800b9b8 <_dtoa_r+0xa60>
 800ba6e:	9b04      	ldr	r3, [sp, #16]
 800ba70:	3301      	adds	r3, #1
 800ba72:	9304      	str	r3, [sp, #16]
 800ba74:	2331      	movs	r3, #49	@ 0x31
 800ba76:	f88a 3000 	strb.w	r3, [sl]
 800ba7a:	e5b9      	b.n	800b5f0 <_dtoa_r+0x698>
 800ba7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800badc <_dtoa_r+0xb84>
 800ba82:	b11b      	cbz	r3, 800ba8c <_dtoa_r+0xb34>
 800ba84:	f10a 0308 	add.w	r3, sl, #8
 800ba88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ba8a:	6013      	str	r3, [r2, #0]
 800ba8c:	4650      	mov	r0, sl
 800ba8e:	b019      	add	sp, #100	@ 0x64
 800ba90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	f77f ae37 	ble.w	800b70a <_dtoa_r+0x7b2>
 800ba9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800baa0:	2001      	movs	r0, #1
 800baa2:	e655      	b.n	800b750 <_dtoa_r+0x7f8>
 800baa4:	9b00      	ldr	r3, [sp, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f77f aed6 	ble.w	800b858 <_dtoa_r+0x900>
 800baac:	4656      	mov	r6, sl
 800baae:	4621      	mov	r1, r4
 800bab0:	4648      	mov	r0, r9
 800bab2:	f7ff f9c8 	bl	800ae46 <quorem>
 800bab6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800baba:	f806 8b01 	strb.w	r8, [r6], #1
 800babe:	9b00      	ldr	r3, [sp, #0]
 800bac0:	eba6 020a 	sub.w	r2, r6, sl
 800bac4:	4293      	cmp	r3, r2
 800bac6:	ddb3      	ble.n	800ba30 <_dtoa_r+0xad8>
 800bac8:	4649      	mov	r1, r9
 800baca:	2300      	movs	r3, #0
 800bacc:	220a      	movs	r2, #10
 800bace:	4658      	mov	r0, fp
 800bad0:	f000 f968 	bl	800bda4 <__multadd>
 800bad4:	4681      	mov	r9, r0
 800bad6:	e7ea      	b.n	800baae <_dtoa_r+0xb56>
 800bad8:	0800d080 	.word	0x0800d080
 800badc:	0800d004 	.word	0x0800d004

0800bae0 <_free_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4605      	mov	r5, r0
 800bae4:	2900      	cmp	r1, #0
 800bae6:	d041      	beq.n	800bb6c <_free_r+0x8c>
 800bae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baec:	1f0c      	subs	r4, r1, #4
 800baee:	2b00      	cmp	r3, #0
 800baf0:	bfb8      	it	lt
 800baf2:	18e4      	addlt	r4, r4, r3
 800baf4:	f000 f8e8 	bl	800bcc8 <__malloc_lock>
 800baf8:	4a1d      	ldr	r2, [pc, #116]	@ (800bb70 <_free_r+0x90>)
 800bafa:	6813      	ldr	r3, [r2, #0]
 800bafc:	b933      	cbnz	r3, 800bb0c <_free_r+0x2c>
 800bafe:	6063      	str	r3, [r4, #4]
 800bb00:	6014      	str	r4, [r2, #0]
 800bb02:	4628      	mov	r0, r5
 800bb04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb08:	f000 b8e4 	b.w	800bcd4 <__malloc_unlock>
 800bb0c:	42a3      	cmp	r3, r4
 800bb0e:	d908      	bls.n	800bb22 <_free_r+0x42>
 800bb10:	6820      	ldr	r0, [r4, #0]
 800bb12:	1821      	adds	r1, r4, r0
 800bb14:	428b      	cmp	r3, r1
 800bb16:	bf01      	itttt	eq
 800bb18:	6819      	ldreq	r1, [r3, #0]
 800bb1a:	685b      	ldreq	r3, [r3, #4]
 800bb1c:	1809      	addeq	r1, r1, r0
 800bb1e:	6021      	streq	r1, [r4, #0]
 800bb20:	e7ed      	b.n	800bafe <_free_r+0x1e>
 800bb22:	461a      	mov	r2, r3
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	b10b      	cbz	r3, 800bb2c <_free_r+0x4c>
 800bb28:	42a3      	cmp	r3, r4
 800bb2a:	d9fa      	bls.n	800bb22 <_free_r+0x42>
 800bb2c:	6811      	ldr	r1, [r2, #0]
 800bb2e:	1850      	adds	r0, r2, r1
 800bb30:	42a0      	cmp	r0, r4
 800bb32:	d10b      	bne.n	800bb4c <_free_r+0x6c>
 800bb34:	6820      	ldr	r0, [r4, #0]
 800bb36:	4401      	add	r1, r0
 800bb38:	1850      	adds	r0, r2, r1
 800bb3a:	4283      	cmp	r3, r0
 800bb3c:	6011      	str	r1, [r2, #0]
 800bb3e:	d1e0      	bne.n	800bb02 <_free_r+0x22>
 800bb40:	6818      	ldr	r0, [r3, #0]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	6053      	str	r3, [r2, #4]
 800bb46:	4408      	add	r0, r1
 800bb48:	6010      	str	r0, [r2, #0]
 800bb4a:	e7da      	b.n	800bb02 <_free_r+0x22>
 800bb4c:	d902      	bls.n	800bb54 <_free_r+0x74>
 800bb4e:	230c      	movs	r3, #12
 800bb50:	602b      	str	r3, [r5, #0]
 800bb52:	e7d6      	b.n	800bb02 <_free_r+0x22>
 800bb54:	6820      	ldr	r0, [r4, #0]
 800bb56:	1821      	adds	r1, r4, r0
 800bb58:	428b      	cmp	r3, r1
 800bb5a:	bf04      	itt	eq
 800bb5c:	6819      	ldreq	r1, [r3, #0]
 800bb5e:	685b      	ldreq	r3, [r3, #4]
 800bb60:	6063      	str	r3, [r4, #4]
 800bb62:	bf04      	itt	eq
 800bb64:	1809      	addeq	r1, r1, r0
 800bb66:	6021      	streq	r1, [r4, #0]
 800bb68:	6054      	str	r4, [r2, #4]
 800bb6a:	e7ca      	b.n	800bb02 <_free_r+0x22>
 800bb6c:	bd38      	pop	{r3, r4, r5, pc}
 800bb6e:	bf00      	nop
 800bb70:	20000978 	.word	0x20000978

0800bb74 <malloc>:
 800bb74:	4b02      	ldr	r3, [pc, #8]	@ (800bb80 <malloc+0xc>)
 800bb76:	4601      	mov	r1, r0
 800bb78:	6818      	ldr	r0, [r3, #0]
 800bb7a:	f000 b825 	b.w	800bbc8 <_malloc_r>
 800bb7e:	bf00      	nop
 800bb80:	20000018 	.word	0x20000018

0800bb84 <sbrk_aligned>:
 800bb84:	b570      	push	{r4, r5, r6, lr}
 800bb86:	4e0f      	ldr	r6, [pc, #60]	@ (800bbc4 <sbrk_aligned+0x40>)
 800bb88:	460c      	mov	r4, r1
 800bb8a:	6831      	ldr	r1, [r6, #0]
 800bb8c:	4605      	mov	r5, r0
 800bb8e:	b911      	cbnz	r1, 800bb96 <sbrk_aligned+0x12>
 800bb90:	f000 fe46 	bl	800c820 <_sbrk_r>
 800bb94:	6030      	str	r0, [r6, #0]
 800bb96:	4621      	mov	r1, r4
 800bb98:	4628      	mov	r0, r5
 800bb9a:	f000 fe41 	bl	800c820 <_sbrk_r>
 800bb9e:	1c43      	adds	r3, r0, #1
 800bba0:	d103      	bne.n	800bbaa <sbrk_aligned+0x26>
 800bba2:	f04f 34ff 	mov.w	r4, #4294967295
 800bba6:	4620      	mov	r0, r4
 800bba8:	bd70      	pop	{r4, r5, r6, pc}
 800bbaa:	1cc4      	adds	r4, r0, #3
 800bbac:	f024 0403 	bic.w	r4, r4, #3
 800bbb0:	42a0      	cmp	r0, r4
 800bbb2:	d0f8      	beq.n	800bba6 <sbrk_aligned+0x22>
 800bbb4:	1a21      	subs	r1, r4, r0
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f000 fe32 	bl	800c820 <_sbrk_r>
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	d1f2      	bne.n	800bba6 <sbrk_aligned+0x22>
 800bbc0:	e7ef      	b.n	800bba2 <sbrk_aligned+0x1e>
 800bbc2:	bf00      	nop
 800bbc4:	20000974 	.word	0x20000974

0800bbc8 <_malloc_r>:
 800bbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbcc:	1ccd      	adds	r5, r1, #3
 800bbce:	f025 0503 	bic.w	r5, r5, #3
 800bbd2:	3508      	adds	r5, #8
 800bbd4:	2d0c      	cmp	r5, #12
 800bbd6:	bf38      	it	cc
 800bbd8:	250c      	movcc	r5, #12
 800bbda:	2d00      	cmp	r5, #0
 800bbdc:	4606      	mov	r6, r0
 800bbde:	db01      	blt.n	800bbe4 <_malloc_r+0x1c>
 800bbe0:	42a9      	cmp	r1, r5
 800bbe2:	d904      	bls.n	800bbee <_malloc_r+0x26>
 800bbe4:	230c      	movs	r3, #12
 800bbe6:	6033      	str	r3, [r6, #0]
 800bbe8:	2000      	movs	r0, #0
 800bbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bcc4 <_malloc_r+0xfc>
 800bbf2:	f000 f869 	bl	800bcc8 <__malloc_lock>
 800bbf6:	f8d8 3000 	ldr.w	r3, [r8]
 800bbfa:	461c      	mov	r4, r3
 800bbfc:	bb44      	cbnz	r4, 800bc50 <_malloc_r+0x88>
 800bbfe:	4629      	mov	r1, r5
 800bc00:	4630      	mov	r0, r6
 800bc02:	f7ff ffbf 	bl	800bb84 <sbrk_aligned>
 800bc06:	1c43      	adds	r3, r0, #1
 800bc08:	4604      	mov	r4, r0
 800bc0a:	d158      	bne.n	800bcbe <_malloc_r+0xf6>
 800bc0c:	f8d8 4000 	ldr.w	r4, [r8]
 800bc10:	4627      	mov	r7, r4
 800bc12:	2f00      	cmp	r7, #0
 800bc14:	d143      	bne.n	800bc9e <_malloc_r+0xd6>
 800bc16:	2c00      	cmp	r4, #0
 800bc18:	d04b      	beq.n	800bcb2 <_malloc_r+0xea>
 800bc1a:	6823      	ldr	r3, [r4, #0]
 800bc1c:	4639      	mov	r1, r7
 800bc1e:	4630      	mov	r0, r6
 800bc20:	eb04 0903 	add.w	r9, r4, r3
 800bc24:	f000 fdfc 	bl	800c820 <_sbrk_r>
 800bc28:	4581      	cmp	r9, r0
 800bc2a:	d142      	bne.n	800bcb2 <_malloc_r+0xea>
 800bc2c:	6821      	ldr	r1, [r4, #0]
 800bc2e:	1a6d      	subs	r5, r5, r1
 800bc30:	4629      	mov	r1, r5
 800bc32:	4630      	mov	r0, r6
 800bc34:	f7ff ffa6 	bl	800bb84 <sbrk_aligned>
 800bc38:	3001      	adds	r0, #1
 800bc3a:	d03a      	beq.n	800bcb2 <_malloc_r+0xea>
 800bc3c:	6823      	ldr	r3, [r4, #0]
 800bc3e:	442b      	add	r3, r5
 800bc40:	6023      	str	r3, [r4, #0]
 800bc42:	f8d8 3000 	ldr.w	r3, [r8]
 800bc46:	685a      	ldr	r2, [r3, #4]
 800bc48:	bb62      	cbnz	r2, 800bca4 <_malloc_r+0xdc>
 800bc4a:	f8c8 7000 	str.w	r7, [r8]
 800bc4e:	e00f      	b.n	800bc70 <_malloc_r+0xa8>
 800bc50:	6822      	ldr	r2, [r4, #0]
 800bc52:	1b52      	subs	r2, r2, r5
 800bc54:	d420      	bmi.n	800bc98 <_malloc_r+0xd0>
 800bc56:	2a0b      	cmp	r2, #11
 800bc58:	d917      	bls.n	800bc8a <_malloc_r+0xc2>
 800bc5a:	1961      	adds	r1, r4, r5
 800bc5c:	42a3      	cmp	r3, r4
 800bc5e:	6025      	str	r5, [r4, #0]
 800bc60:	bf18      	it	ne
 800bc62:	6059      	strne	r1, [r3, #4]
 800bc64:	6863      	ldr	r3, [r4, #4]
 800bc66:	bf08      	it	eq
 800bc68:	f8c8 1000 	streq.w	r1, [r8]
 800bc6c:	5162      	str	r2, [r4, r5]
 800bc6e:	604b      	str	r3, [r1, #4]
 800bc70:	4630      	mov	r0, r6
 800bc72:	f000 f82f 	bl	800bcd4 <__malloc_unlock>
 800bc76:	f104 000b 	add.w	r0, r4, #11
 800bc7a:	1d23      	adds	r3, r4, #4
 800bc7c:	f020 0007 	bic.w	r0, r0, #7
 800bc80:	1ac2      	subs	r2, r0, r3
 800bc82:	bf1c      	itt	ne
 800bc84:	1a1b      	subne	r3, r3, r0
 800bc86:	50a3      	strne	r3, [r4, r2]
 800bc88:	e7af      	b.n	800bbea <_malloc_r+0x22>
 800bc8a:	6862      	ldr	r2, [r4, #4]
 800bc8c:	42a3      	cmp	r3, r4
 800bc8e:	bf0c      	ite	eq
 800bc90:	f8c8 2000 	streq.w	r2, [r8]
 800bc94:	605a      	strne	r2, [r3, #4]
 800bc96:	e7eb      	b.n	800bc70 <_malloc_r+0xa8>
 800bc98:	4623      	mov	r3, r4
 800bc9a:	6864      	ldr	r4, [r4, #4]
 800bc9c:	e7ae      	b.n	800bbfc <_malloc_r+0x34>
 800bc9e:	463c      	mov	r4, r7
 800bca0:	687f      	ldr	r7, [r7, #4]
 800bca2:	e7b6      	b.n	800bc12 <_malloc_r+0x4a>
 800bca4:	461a      	mov	r2, r3
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	42a3      	cmp	r3, r4
 800bcaa:	d1fb      	bne.n	800bca4 <_malloc_r+0xdc>
 800bcac:	2300      	movs	r3, #0
 800bcae:	6053      	str	r3, [r2, #4]
 800bcb0:	e7de      	b.n	800bc70 <_malloc_r+0xa8>
 800bcb2:	230c      	movs	r3, #12
 800bcb4:	6033      	str	r3, [r6, #0]
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	f000 f80c 	bl	800bcd4 <__malloc_unlock>
 800bcbc:	e794      	b.n	800bbe8 <_malloc_r+0x20>
 800bcbe:	6005      	str	r5, [r0, #0]
 800bcc0:	e7d6      	b.n	800bc70 <_malloc_r+0xa8>
 800bcc2:	bf00      	nop
 800bcc4:	20000978 	.word	0x20000978

0800bcc8 <__malloc_lock>:
 800bcc8:	4801      	ldr	r0, [pc, #4]	@ (800bcd0 <__malloc_lock+0x8>)
 800bcca:	f7ff b8ba 	b.w	800ae42 <__retarget_lock_acquire_recursive>
 800bcce:	bf00      	nop
 800bcd0:	20000970 	.word	0x20000970

0800bcd4 <__malloc_unlock>:
 800bcd4:	4801      	ldr	r0, [pc, #4]	@ (800bcdc <__malloc_unlock+0x8>)
 800bcd6:	f7ff b8b5 	b.w	800ae44 <__retarget_lock_release_recursive>
 800bcda:	bf00      	nop
 800bcdc:	20000970 	.word	0x20000970

0800bce0 <_Balloc>:
 800bce0:	b570      	push	{r4, r5, r6, lr}
 800bce2:	69c6      	ldr	r6, [r0, #28]
 800bce4:	4604      	mov	r4, r0
 800bce6:	460d      	mov	r5, r1
 800bce8:	b976      	cbnz	r6, 800bd08 <_Balloc+0x28>
 800bcea:	2010      	movs	r0, #16
 800bcec:	f7ff ff42 	bl	800bb74 <malloc>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	61e0      	str	r0, [r4, #28]
 800bcf4:	b920      	cbnz	r0, 800bd00 <_Balloc+0x20>
 800bcf6:	4b18      	ldr	r3, [pc, #96]	@ (800bd58 <_Balloc+0x78>)
 800bcf8:	4818      	ldr	r0, [pc, #96]	@ (800bd5c <_Balloc+0x7c>)
 800bcfa:	216b      	movs	r1, #107	@ 0x6b
 800bcfc:	f000 fdae 	bl	800c85c <__assert_func>
 800bd00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd04:	6006      	str	r6, [r0, #0]
 800bd06:	60c6      	str	r6, [r0, #12]
 800bd08:	69e6      	ldr	r6, [r4, #28]
 800bd0a:	68f3      	ldr	r3, [r6, #12]
 800bd0c:	b183      	cbz	r3, 800bd30 <_Balloc+0x50>
 800bd0e:	69e3      	ldr	r3, [r4, #28]
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd16:	b9b8      	cbnz	r0, 800bd48 <_Balloc+0x68>
 800bd18:	2101      	movs	r1, #1
 800bd1a:	fa01 f605 	lsl.w	r6, r1, r5
 800bd1e:	1d72      	adds	r2, r6, #5
 800bd20:	0092      	lsls	r2, r2, #2
 800bd22:	4620      	mov	r0, r4
 800bd24:	f000 fdb8 	bl	800c898 <_calloc_r>
 800bd28:	b160      	cbz	r0, 800bd44 <_Balloc+0x64>
 800bd2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd2e:	e00e      	b.n	800bd4e <_Balloc+0x6e>
 800bd30:	2221      	movs	r2, #33	@ 0x21
 800bd32:	2104      	movs	r1, #4
 800bd34:	4620      	mov	r0, r4
 800bd36:	f000 fdaf 	bl	800c898 <_calloc_r>
 800bd3a:	69e3      	ldr	r3, [r4, #28]
 800bd3c:	60f0      	str	r0, [r6, #12]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1e4      	bne.n	800bd0e <_Balloc+0x2e>
 800bd44:	2000      	movs	r0, #0
 800bd46:	bd70      	pop	{r4, r5, r6, pc}
 800bd48:	6802      	ldr	r2, [r0, #0]
 800bd4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd54:	e7f7      	b.n	800bd46 <_Balloc+0x66>
 800bd56:	bf00      	nop
 800bd58:	0800d011 	.word	0x0800d011
 800bd5c:	0800d091 	.word	0x0800d091

0800bd60 <_Bfree>:
 800bd60:	b570      	push	{r4, r5, r6, lr}
 800bd62:	69c6      	ldr	r6, [r0, #28]
 800bd64:	4605      	mov	r5, r0
 800bd66:	460c      	mov	r4, r1
 800bd68:	b976      	cbnz	r6, 800bd88 <_Bfree+0x28>
 800bd6a:	2010      	movs	r0, #16
 800bd6c:	f7ff ff02 	bl	800bb74 <malloc>
 800bd70:	4602      	mov	r2, r0
 800bd72:	61e8      	str	r0, [r5, #28]
 800bd74:	b920      	cbnz	r0, 800bd80 <_Bfree+0x20>
 800bd76:	4b09      	ldr	r3, [pc, #36]	@ (800bd9c <_Bfree+0x3c>)
 800bd78:	4809      	ldr	r0, [pc, #36]	@ (800bda0 <_Bfree+0x40>)
 800bd7a:	218f      	movs	r1, #143	@ 0x8f
 800bd7c:	f000 fd6e 	bl	800c85c <__assert_func>
 800bd80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd84:	6006      	str	r6, [r0, #0]
 800bd86:	60c6      	str	r6, [r0, #12]
 800bd88:	b13c      	cbz	r4, 800bd9a <_Bfree+0x3a>
 800bd8a:	69eb      	ldr	r3, [r5, #28]
 800bd8c:	6862      	ldr	r2, [r4, #4]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd94:	6021      	str	r1, [r4, #0]
 800bd96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}
 800bd9c:	0800d011 	.word	0x0800d011
 800bda0:	0800d091 	.word	0x0800d091

0800bda4 <__multadd>:
 800bda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda8:	690d      	ldr	r5, [r1, #16]
 800bdaa:	4607      	mov	r7, r0
 800bdac:	460c      	mov	r4, r1
 800bdae:	461e      	mov	r6, r3
 800bdb0:	f101 0c14 	add.w	ip, r1, #20
 800bdb4:	2000      	movs	r0, #0
 800bdb6:	f8dc 3000 	ldr.w	r3, [ip]
 800bdba:	b299      	uxth	r1, r3
 800bdbc:	fb02 6101 	mla	r1, r2, r1, r6
 800bdc0:	0c1e      	lsrs	r6, r3, #16
 800bdc2:	0c0b      	lsrs	r3, r1, #16
 800bdc4:	fb02 3306 	mla	r3, r2, r6, r3
 800bdc8:	b289      	uxth	r1, r1
 800bdca:	3001      	adds	r0, #1
 800bdcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bdd0:	4285      	cmp	r5, r0
 800bdd2:	f84c 1b04 	str.w	r1, [ip], #4
 800bdd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdda:	dcec      	bgt.n	800bdb6 <__multadd+0x12>
 800bddc:	b30e      	cbz	r6, 800be22 <__multadd+0x7e>
 800bdde:	68a3      	ldr	r3, [r4, #8]
 800bde0:	42ab      	cmp	r3, r5
 800bde2:	dc19      	bgt.n	800be18 <__multadd+0x74>
 800bde4:	6861      	ldr	r1, [r4, #4]
 800bde6:	4638      	mov	r0, r7
 800bde8:	3101      	adds	r1, #1
 800bdea:	f7ff ff79 	bl	800bce0 <_Balloc>
 800bdee:	4680      	mov	r8, r0
 800bdf0:	b928      	cbnz	r0, 800bdfe <__multadd+0x5a>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	4b0c      	ldr	r3, [pc, #48]	@ (800be28 <__multadd+0x84>)
 800bdf6:	480d      	ldr	r0, [pc, #52]	@ (800be2c <__multadd+0x88>)
 800bdf8:	21ba      	movs	r1, #186	@ 0xba
 800bdfa:	f000 fd2f 	bl	800c85c <__assert_func>
 800bdfe:	6922      	ldr	r2, [r4, #16]
 800be00:	3202      	adds	r2, #2
 800be02:	f104 010c 	add.w	r1, r4, #12
 800be06:	0092      	lsls	r2, r2, #2
 800be08:	300c      	adds	r0, #12
 800be0a:	f000 fd19 	bl	800c840 <memcpy>
 800be0e:	4621      	mov	r1, r4
 800be10:	4638      	mov	r0, r7
 800be12:	f7ff ffa5 	bl	800bd60 <_Bfree>
 800be16:	4644      	mov	r4, r8
 800be18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be1c:	3501      	adds	r5, #1
 800be1e:	615e      	str	r6, [r3, #20]
 800be20:	6125      	str	r5, [r4, #16]
 800be22:	4620      	mov	r0, r4
 800be24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be28:	0800d080 	.word	0x0800d080
 800be2c:	0800d091 	.word	0x0800d091

0800be30 <__hi0bits>:
 800be30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800be34:	4603      	mov	r3, r0
 800be36:	bf36      	itet	cc
 800be38:	0403      	lslcc	r3, r0, #16
 800be3a:	2000      	movcs	r0, #0
 800be3c:	2010      	movcc	r0, #16
 800be3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be42:	bf3c      	itt	cc
 800be44:	021b      	lslcc	r3, r3, #8
 800be46:	3008      	addcc	r0, #8
 800be48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be4c:	bf3c      	itt	cc
 800be4e:	011b      	lslcc	r3, r3, #4
 800be50:	3004      	addcc	r0, #4
 800be52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be56:	bf3c      	itt	cc
 800be58:	009b      	lslcc	r3, r3, #2
 800be5a:	3002      	addcc	r0, #2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	db05      	blt.n	800be6c <__hi0bits+0x3c>
 800be60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800be64:	f100 0001 	add.w	r0, r0, #1
 800be68:	bf08      	it	eq
 800be6a:	2020      	moveq	r0, #32
 800be6c:	4770      	bx	lr

0800be6e <__lo0bits>:
 800be6e:	6803      	ldr	r3, [r0, #0]
 800be70:	4602      	mov	r2, r0
 800be72:	f013 0007 	ands.w	r0, r3, #7
 800be76:	d00b      	beq.n	800be90 <__lo0bits+0x22>
 800be78:	07d9      	lsls	r1, r3, #31
 800be7a:	d421      	bmi.n	800bec0 <__lo0bits+0x52>
 800be7c:	0798      	lsls	r0, r3, #30
 800be7e:	bf49      	itett	mi
 800be80:	085b      	lsrmi	r3, r3, #1
 800be82:	089b      	lsrpl	r3, r3, #2
 800be84:	2001      	movmi	r0, #1
 800be86:	6013      	strmi	r3, [r2, #0]
 800be88:	bf5c      	itt	pl
 800be8a:	6013      	strpl	r3, [r2, #0]
 800be8c:	2002      	movpl	r0, #2
 800be8e:	4770      	bx	lr
 800be90:	b299      	uxth	r1, r3
 800be92:	b909      	cbnz	r1, 800be98 <__lo0bits+0x2a>
 800be94:	0c1b      	lsrs	r3, r3, #16
 800be96:	2010      	movs	r0, #16
 800be98:	b2d9      	uxtb	r1, r3
 800be9a:	b909      	cbnz	r1, 800bea0 <__lo0bits+0x32>
 800be9c:	3008      	adds	r0, #8
 800be9e:	0a1b      	lsrs	r3, r3, #8
 800bea0:	0719      	lsls	r1, r3, #28
 800bea2:	bf04      	itt	eq
 800bea4:	091b      	lsreq	r3, r3, #4
 800bea6:	3004      	addeq	r0, #4
 800bea8:	0799      	lsls	r1, r3, #30
 800beaa:	bf04      	itt	eq
 800beac:	089b      	lsreq	r3, r3, #2
 800beae:	3002      	addeq	r0, #2
 800beb0:	07d9      	lsls	r1, r3, #31
 800beb2:	d403      	bmi.n	800bebc <__lo0bits+0x4e>
 800beb4:	085b      	lsrs	r3, r3, #1
 800beb6:	f100 0001 	add.w	r0, r0, #1
 800beba:	d003      	beq.n	800bec4 <__lo0bits+0x56>
 800bebc:	6013      	str	r3, [r2, #0]
 800bebe:	4770      	bx	lr
 800bec0:	2000      	movs	r0, #0
 800bec2:	4770      	bx	lr
 800bec4:	2020      	movs	r0, #32
 800bec6:	4770      	bx	lr

0800bec8 <__i2b>:
 800bec8:	b510      	push	{r4, lr}
 800beca:	460c      	mov	r4, r1
 800becc:	2101      	movs	r1, #1
 800bece:	f7ff ff07 	bl	800bce0 <_Balloc>
 800bed2:	4602      	mov	r2, r0
 800bed4:	b928      	cbnz	r0, 800bee2 <__i2b+0x1a>
 800bed6:	4b05      	ldr	r3, [pc, #20]	@ (800beec <__i2b+0x24>)
 800bed8:	4805      	ldr	r0, [pc, #20]	@ (800bef0 <__i2b+0x28>)
 800beda:	f240 1145 	movw	r1, #325	@ 0x145
 800bede:	f000 fcbd 	bl	800c85c <__assert_func>
 800bee2:	2301      	movs	r3, #1
 800bee4:	6144      	str	r4, [r0, #20]
 800bee6:	6103      	str	r3, [r0, #16]
 800bee8:	bd10      	pop	{r4, pc}
 800beea:	bf00      	nop
 800beec:	0800d080 	.word	0x0800d080
 800bef0:	0800d091 	.word	0x0800d091

0800bef4 <__multiply>:
 800bef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef8:	4614      	mov	r4, r2
 800befa:	690a      	ldr	r2, [r1, #16]
 800befc:	6923      	ldr	r3, [r4, #16]
 800befe:	429a      	cmp	r2, r3
 800bf00:	bfa8      	it	ge
 800bf02:	4623      	movge	r3, r4
 800bf04:	460f      	mov	r7, r1
 800bf06:	bfa4      	itt	ge
 800bf08:	460c      	movge	r4, r1
 800bf0a:	461f      	movge	r7, r3
 800bf0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bf10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bf14:	68a3      	ldr	r3, [r4, #8]
 800bf16:	6861      	ldr	r1, [r4, #4]
 800bf18:	eb0a 0609 	add.w	r6, sl, r9
 800bf1c:	42b3      	cmp	r3, r6
 800bf1e:	b085      	sub	sp, #20
 800bf20:	bfb8      	it	lt
 800bf22:	3101      	addlt	r1, #1
 800bf24:	f7ff fedc 	bl	800bce0 <_Balloc>
 800bf28:	b930      	cbnz	r0, 800bf38 <__multiply+0x44>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	4b44      	ldr	r3, [pc, #272]	@ (800c040 <__multiply+0x14c>)
 800bf2e:	4845      	ldr	r0, [pc, #276]	@ (800c044 <__multiply+0x150>)
 800bf30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bf34:	f000 fc92 	bl	800c85c <__assert_func>
 800bf38:	f100 0514 	add.w	r5, r0, #20
 800bf3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf40:	462b      	mov	r3, r5
 800bf42:	2200      	movs	r2, #0
 800bf44:	4543      	cmp	r3, r8
 800bf46:	d321      	bcc.n	800bf8c <__multiply+0x98>
 800bf48:	f107 0114 	add.w	r1, r7, #20
 800bf4c:	f104 0214 	add.w	r2, r4, #20
 800bf50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bf54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bf58:	9302      	str	r3, [sp, #8]
 800bf5a:	1b13      	subs	r3, r2, r4
 800bf5c:	3b15      	subs	r3, #21
 800bf5e:	f023 0303 	bic.w	r3, r3, #3
 800bf62:	3304      	adds	r3, #4
 800bf64:	f104 0715 	add.w	r7, r4, #21
 800bf68:	42ba      	cmp	r2, r7
 800bf6a:	bf38      	it	cc
 800bf6c:	2304      	movcc	r3, #4
 800bf6e:	9301      	str	r3, [sp, #4]
 800bf70:	9b02      	ldr	r3, [sp, #8]
 800bf72:	9103      	str	r1, [sp, #12]
 800bf74:	428b      	cmp	r3, r1
 800bf76:	d80c      	bhi.n	800bf92 <__multiply+0x9e>
 800bf78:	2e00      	cmp	r6, #0
 800bf7a:	dd03      	ble.n	800bf84 <__multiply+0x90>
 800bf7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d05b      	beq.n	800c03c <__multiply+0x148>
 800bf84:	6106      	str	r6, [r0, #16]
 800bf86:	b005      	add	sp, #20
 800bf88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf8c:	f843 2b04 	str.w	r2, [r3], #4
 800bf90:	e7d8      	b.n	800bf44 <__multiply+0x50>
 800bf92:	f8b1 a000 	ldrh.w	sl, [r1]
 800bf96:	f1ba 0f00 	cmp.w	sl, #0
 800bf9a:	d024      	beq.n	800bfe6 <__multiply+0xf2>
 800bf9c:	f104 0e14 	add.w	lr, r4, #20
 800bfa0:	46a9      	mov	r9, r5
 800bfa2:	f04f 0c00 	mov.w	ip, #0
 800bfa6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bfaa:	f8d9 3000 	ldr.w	r3, [r9]
 800bfae:	fa1f fb87 	uxth.w	fp, r7
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	fb0a 330b 	mla	r3, sl, fp, r3
 800bfb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bfbc:	f8d9 7000 	ldr.w	r7, [r9]
 800bfc0:	4463      	add	r3, ip
 800bfc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bfc6:	fb0a c70b 	mla	r7, sl, fp, ip
 800bfca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bfd4:	4572      	cmp	r2, lr
 800bfd6:	f849 3b04 	str.w	r3, [r9], #4
 800bfda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bfde:	d8e2      	bhi.n	800bfa6 <__multiply+0xb2>
 800bfe0:	9b01      	ldr	r3, [sp, #4]
 800bfe2:	f845 c003 	str.w	ip, [r5, r3]
 800bfe6:	9b03      	ldr	r3, [sp, #12]
 800bfe8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bfec:	3104      	adds	r1, #4
 800bfee:	f1b9 0f00 	cmp.w	r9, #0
 800bff2:	d021      	beq.n	800c038 <__multiply+0x144>
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	f104 0c14 	add.w	ip, r4, #20
 800bffa:	46ae      	mov	lr, r5
 800bffc:	f04f 0a00 	mov.w	sl, #0
 800c000:	f8bc b000 	ldrh.w	fp, [ip]
 800c004:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c008:	fb09 770b 	mla	r7, r9, fp, r7
 800c00c:	4457      	add	r7, sl
 800c00e:	b29b      	uxth	r3, r3
 800c010:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c014:	f84e 3b04 	str.w	r3, [lr], #4
 800c018:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c01c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c020:	f8be 3000 	ldrh.w	r3, [lr]
 800c024:	fb09 330a 	mla	r3, r9, sl, r3
 800c028:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c02c:	4562      	cmp	r2, ip
 800c02e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c032:	d8e5      	bhi.n	800c000 <__multiply+0x10c>
 800c034:	9f01      	ldr	r7, [sp, #4]
 800c036:	51eb      	str	r3, [r5, r7]
 800c038:	3504      	adds	r5, #4
 800c03a:	e799      	b.n	800bf70 <__multiply+0x7c>
 800c03c:	3e01      	subs	r6, #1
 800c03e:	e79b      	b.n	800bf78 <__multiply+0x84>
 800c040:	0800d080 	.word	0x0800d080
 800c044:	0800d091 	.word	0x0800d091

0800c048 <__pow5mult>:
 800c048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c04c:	4615      	mov	r5, r2
 800c04e:	f012 0203 	ands.w	r2, r2, #3
 800c052:	4607      	mov	r7, r0
 800c054:	460e      	mov	r6, r1
 800c056:	d007      	beq.n	800c068 <__pow5mult+0x20>
 800c058:	4c25      	ldr	r4, [pc, #148]	@ (800c0f0 <__pow5mult+0xa8>)
 800c05a:	3a01      	subs	r2, #1
 800c05c:	2300      	movs	r3, #0
 800c05e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c062:	f7ff fe9f 	bl	800bda4 <__multadd>
 800c066:	4606      	mov	r6, r0
 800c068:	10ad      	asrs	r5, r5, #2
 800c06a:	d03d      	beq.n	800c0e8 <__pow5mult+0xa0>
 800c06c:	69fc      	ldr	r4, [r7, #28]
 800c06e:	b97c      	cbnz	r4, 800c090 <__pow5mult+0x48>
 800c070:	2010      	movs	r0, #16
 800c072:	f7ff fd7f 	bl	800bb74 <malloc>
 800c076:	4602      	mov	r2, r0
 800c078:	61f8      	str	r0, [r7, #28]
 800c07a:	b928      	cbnz	r0, 800c088 <__pow5mult+0x40>
 800c07c:	4b1d      	ldr	r3, [pc, #116]	@ (800c0f4 <__pow5mult+0xac>)
 800c07e:	481e      	ldr	r0, [pc, #120]	@ (800c0f8 <__pow5mult+0xb0>)
 800c080:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c084:	f000 fbea 	bl	800c85c <__assert_func>
 800c088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c08c:	6004      	str	r4, [r0, #0]
 800c08e:	60c4      	str	r4, [r0, #12]
 800c090:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c098:	b94c      	cbnz	r4, 800c0ae <__pow5mult+0x66>
 800c09a:	f240 2171 	movw	r1, #625	@ 0x271
 800c09e:	4638      	mov	r0, r7
 800c0a0:	f7ff ff12 	bl	800bec8 <__i2b>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0aa:	4604      	mov	r4, r0
 800c0ac:	6003      	str	r3, [r0, #0]
 800c0ae:	f04f 0900 	mov.w	r9, #0
 800c0b2:	07eb      	lsls	r3, r5, #31
 800c0b4:	d50a      	bpl.n	800c0cc <__pow5mult+0x84>
 800c0b6:	4631      	mov	r1, r6
 800c0b8:	4622      	mov	r2, r4
 800c0ba:	4638      	mov	r0, r7
 800c0bc:	f7ff ff1a 	bl	800bef4 <__multiply>
 800c0c0:	4631      	mov	r1, r6
 800c0c2:	4680      	mov	r8, r0
 800c0c4:	4638      	mov	r0, r7
 800c0c6:	f7ff fe4b 	bl	800bd60 <_Bfree>
 800c0ca:	4646      	mov	r6, r8
 800c0cc:	106d      	asrs	r5, r5, #1
 800c0ce:	d00b      	beq.n	800c0e8 <__pow5mult+0xa0>
 800c0d0:	6820      	ldr	r0, [r4, #0]
 800c0d2:	b938      	cbnz	r0, 800c0e4 <__pow5mult+0x9c>
 800c0d4:	4622      	mov	r2, r4
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	4638      	mov	r0, r7
 800c0da:	f7ff ff0b 	bl	800bef4 <__multiply>
 800c0de:	6020      	str	r0, [r4, #0]
 800c0e0:	f8c0 9000 	str.w	r9, [r0]
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	e7e4      	b.n	800c0b2 <__pow5mult+0x6a>
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ee:	bf00      	nop
 800c0f0:	0800d0ec 	.word	0x0800d0ec
 800c0f4:	0800d011 	.word	0x0800d011
 800c0f8:	0800d091 	.word	0x0800d091

0800c0fc <__lshift>:
 800c0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c100:	460c      	mov	r4, r1
 800c102:	6849      	ldr	r1, [r1, #4]
 800c104:	6923      	ldr	r3, [r4, #16]
 800c106:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c10a:	68a3      	ldr	r3, [r4, #8]
 800c10c:	4607      	mov	r7, r0
 800c10e:	4691      	mov	r9, r2
 800c110:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c114:	f108 0601 	add.w	r6, r8, #1
 800c118:	42b3      	cmp	r3, r6
 800c11a:	db0b      	blt.n	800c134 <__lshift+0x38>
 800c11c:	4638      	mov	r0, r7
 800c11e:	f7ff fddf 	bl	800bce0 <_Balloc>
 800c122:	4605      	mov	r5, r0
 800c124:	b948      	cbnz	r0, 800c13a <__lshift+0x3e>
 800c126:	4602      	mov	r2, r0
 800c128:	4b28      	ldr	r3, [pc, #160]	@ (800c1cc <__lshift+0xd0>)
 800c12a:	4829      	ldr	r0, [pc, #164]	@ (800c1d0 <__lshift+0xd4>)
 800c12c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c130:	f000 fb94 	bl	800c85c <__assert_func>
 800c134:	3101      	adds	r1, #1
 800c136:	005b      	lsls	r3, r3, #1
 800c138:	e7ee      	b.n	800c118 <__lshift+0x1c>
 800c13a:	2300      	movs	r3, #0
 800c13c:	f100 0114 	add.w	r1, r0, #20
 800c140:	f100 0210 	add.w	r2, r0, #16
 800c144:	4618      	mov	r0, r3
 800c146:	4553      	cmp	r3, sl
 800c148:	db33      	blt.n	800c1b2 <__lshift+0xb6>
 800c14a:	6920      	ldr	r0, [r4, #16]
 800c14c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c150:	f104 0314 	add.w	r3, r4, #20
 800c154:	f019 091f 	ands.w	r9, r9, #31
 800c158:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c15c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c160:	d02b      	beq.n	800c1ba <__lshift+0xbe>
 800c162:	f1c9 0e20 	rsb	lr, r9, #32
 800c166:	468a      	mov	sl, r1
 800c168:	2200      	movs	r2, #0
 800c16a:	6818      	ldr	r0, [r3, #0]
 800c16c:	fa00 f009 	lsl.w	r0, r0, r9
 800c170:	4310      	orrs	r0, r2
 800c172:	f84a 0b04 	str.w	r0, [sl], #4
 800c176:	f853 2b04 	ldr.w	r2, [r3], #4
 800c17a:	459c      	cmp	ip, r3
 800c17c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c180:	d8f3      	bhi.n	800c16a <__lshift+0x6e>
 800c182:	ebac 0304 	sub.w	r3, ip, r4
 800c186:	3b15      	subs	r3, #21
 800c188:	f023 0303 	bic.w	r3, r3, #3
 800c18c:	3304      	adds	r3, #4
 800c18e:	f104 0015 	add.w	r0, r4, #21
 800c192:	4584      	cmp	ip, r0
 800c194:	bf38      	it	cc
 800c196:	2304      	movcc	r3, #4
 800c198:	50ca      	str	r2, [r1, r3]
 800c19a:	b10a      	cbz	r2, 800c1a0 <__lshift+0xa4>
 800c19c:	f108 0602 	add.w	r6, r8, #2
 800c1a0:	3e01      	subs	r6, #1
 800c1a2:	4638      	mov	r0, r7
 800c1a4:	612e      	str	r6, [r5, #16]
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	f7ff fdda 	bl	800bd60 <_Bfree>
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	e7c5      	b.n	800c146 <__lshift+0x4a>
 800c1ba:	3904      	subs	r1, #4
 800c1bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1c4:	459c      	cmp	ip, r3
 800c1c6:	d8f9      	bhi.n	800c1bc <__lshift+0xc0>
 800c1c8:	e7ea      	b.n	800c1a0 <__lshift+0xa4>
 800c1ca:	bf00      	nop
 800c1cc:	0800d080 	.word	0x0800d080
 800c1d0:	0800d091 	.word	0x0800d091

0800c1d4 <__mcmp>:
 800c1d4:	690a      	ldr	r2, [r1, #16]
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	6900      	ldr	r0, [r0, #16]
 800c1da:	1a80      	subs	r0, r0, r2
 800c1dc:	b530      	push	{r4, r5, lr}
 800c1de:	d10e      	bne.n	800c1fe <__mcmp+0x2a>
 800c1e0:	3314      	adds	r3, #20
 800c1e2:	3114      	adds	r1, #20
 800c1e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c1e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c1ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c1f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c1f4:	4295      	cmp	r5, r2
 800c1f6:	d003      	beq.n	800c200 <__mcmp+0x2c>
 800c1f8:	d205      	bcs.n	800c206 <__mcmp+0x32>
 800c1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fe:	bd30      	pop	{r4, r5, pc}
 800c200:	42a3      	cmp	r3, r4
 800c202:	d3f3      	bcc.n	800c1ec <__mcmp+0x18>
 800c204:	e7fb      	b.n	800c1fe <__mcmp+0x2a>
 800c206:	2001      	movs	r0, #1
 800c208:	e7f9      	b.n	800c1fe <__mcmp+0x2a>
	...

0800c20c <__mdiff>:
 800c20c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c210:	4689      	mov	r9, r1
 800c212:	4606      	mov	r6, r0
 800c214:	4611      	mov	r1, r2
 800c216:	4648      	mov	r0, r9
 800c218:	4614      	mov	r4, r2
 800c21a:	f7ff ffdb 	bl	800c1d4 <__mcmp>
 800c21e:	1e05      	subs	r5, r0, #0
 800c220:	d112      	bne.n	800c248 <__mdiff+0x3c>
 800c222:	4629      	mov	r1, r5
 800c224:	4630      	mov	r0, r6
 800c226:	f7ff fd5b 	bl	800bce0 <_Balloc>
 800c22a:	4602      	mov	r2, r0
 800c22c:	b928      	cbnz	r0, 800c23a <__mdiff+0x2e>
 800c22e:	4b3f      	ldr	r3, [pc, #252]	@ (800c32c <__mdiff+0x120>)
 800c230:	f240 2137 	movw	r1, #567	@ 0x237
 800c234:	483e      	ldr	r0, [pc, #248]	@ (800c330 <__mdiff+0x124>)
 800c236:	f000 fb11 	bl	800c85c <__assert_func>
 800c23a:	2301      	movs	r3, #1
 800c23c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c240:	4610      	mov	r0, r2
 800c242:	b003      	add	sp, #12
 800c244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c248:	bfbc      	itt	lt
 800c24a:	464b      	movlt	r3, r9
 800c24c:	46a1      	movlt	r9, r4
 800c24e:	4630      	mov	r0, r6
 800c250:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c254:	bfba      	itte	lt
 800c256:	461c      	movlt	r4, r3
 800c258:	2501      	movlt	r5, #1
 800c25a:	2500      	movge	r5, #0
 800c25c:	f7ff fd40 	bl	800bce0 <_Balloc>
 800c260:	4602      	mov	r2, r0
 800c262:	b918      	cbnz	r0, 800c26c <__mdiff+0x60>
 800c264:	4b31      	ldr	r3, [pc, #196]	@ (800c32c <__mdiff+0x120>)
 800c266:	f240 2145 	movw	r1, #581	@ 0x245
 800c26a:	e7e3      	b.n	800c234 <__mdiff+0x28>
 800c26c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c270:	6926      	ldr	r6, [r4, #16]
 800c272:	60c5      	str	r5, [r0, #12]
 800c274:	f109 0310 	add.w	r3, r9, #16
 800c278:	f109 0514 	add.w	r5, r9, #20
 800c27c:	f104 0e14 	add.w	lr, r4, #20
 800c280:	f100 0b14 	add.w	fp, r0, #20
 800c284:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c288:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c28c:	9301      	str	r3, [sp, #4]
 800c28e:	46d9      	mov	r9, fp
 800c290:	f04f 0c00 	mov.w	ip, #0
 800c294:	9b01      	ldr	r3, [sp, #4]
 800c296:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c29a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c29e:	9301      	str	r3, [sp, #4]
 800c2a0:	fa1f f38a 	uxth.w	r3, sl
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	b283      	uxth	r3, r0
 800c2a8:	1acb      	subs	r3, r1, r3
 800c2aa:	0c00      	lsrs	r0, r0, #16
 800c2ac:	4463      	add	r3, ip
 800c2ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c2b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c2bc:	4576      	cmp	r6, lr
 800c2be:	f849 3b04 	str.w	r3, [r9], #4
 800c2c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c2c6:	d8e5      	bhi.n	800c294 <__mdiff+0x88>
 800c2c8:	1b33      	subs	r3, r6, r4
 800c2ca:	3b15      	subs	r3, #21
 800c2cc:	f023 0303 	bic.w	r3, r3, #3
 800c2d0:	3415      	adds	r4, #21
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	42a6      	cmp	r6, r4
 800c2d6:	bf38      	it	cc
 800c2d8:	2304      	movcc	r3, #4
 800c2da:	441d      	add	r5, r3
 800c2dc:	445b      	add	r3, fp
 800c2de:	461e      	mov	r6, r3
 800c2e0:	462c      	mov	r4, r5
 800c2e2:	4544      	cmp	r4, r8
 800c2e4:	d30e      	bcc.n	800c304 <__mdiff+0xf8>
 800c2e6:	f108 0103 	add.w	r1, r8, #3
 800c2ea:	1b49      	subs	r1, r1, r5
 800c2ec:	f021 0103 	bic.w	r1, r1, #3
 800c2f0:	3d03      	subs	r5, #3
 800c2f2:	45a8      	cmp	r8, r5
 800c2f4:	bf38      	it	cc
 800c2f6:	2100      	movcc	r1, #0
 800c2f8:	440b      	add	r3, r1
 800c2fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c2fe:	b191      	cbz	r1, 800c326 <__mdiff+0x11a>
 800c300:	6117      	str	r7, [r2, #16]
 800c302:	e79d      	b.n	800c240 <__mdiff+0x34>
 800c304:	f854 1b04 	ldr.w	r1, [r4], #4
 800c308:	46e6      	mov	lr, ip
 800c30a:	0c08      	lsrs	r0, r1, #16
 800c30c:	fa1c fc81 	uxtah	ip, ip, r1
 800c310:	4471      	add	r1, lr
 800c312:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c316:	b289      	uxth	r1, r1
 800c318:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c31c:	f846 1b04 	str.w	r1, [r6], #4
 800c320:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c324:	e7dd      	b.n	800c2e2 <__mdiff+0xd6>
 800c326:	3f01      	subs	r7, #1
 800c328:	e7e7      	b.n	800c2fa <__mdiff+0xee>
 800c32a:	bf00      	nop
 800c32c:	0800d080 	.word	0x0800d080
 800c330:	0800d091 	.word	0x0800d091

0800c334 <__d2b>:
 800c334:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c338:	460f      	mov	r7, r1
 800c33a:	2101      	movs	r1, #1
 800c33c:	ec59 8b10 	vmov	r8, r9, d0
 800c340:	4616      	mov	r6, r2
 800c342:	f7ff fccd 	bl	800bce0 <_Balloc>
 800c346:	4604      	mov	r4, r0
 800c348:	b930      	cbnz	r0, 800c358 <__d2b+0x24>
 800c34a:	4602      	mov	r2, r0
 800c34c:	4b23      	ldr	r3, [pc, #140]	@ (800c3dc <__d2b+0xa8>)
 800c34e:	4824      	ldr	r0, [pc, #144]	@ (800c3e0 <__d2b+0xac>)
 800c350:	f240 310f 	movw	r1, #783	@ 0x30f
 800c354:	f000 fa82 	bl	800c85c <__assert_func>
 800c358:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c35c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c360:	b10d      	cbz	r5, 800c366 <__d2b+0x32>
 800c362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c366:	9301      	str	r3, [sp, #4]
 800c368:	f1b8 0300 	subs.w	r3, r8, #0
 800c36c:	d023      	beq.n	800c3b6 <__d2b+0x82>
 800c36e:	4668      	mov	r0, sp
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	f7ff fd7c 	bl	800be6e <__lo0bits>
 800c376:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c37a:	b1d0      	cbz	r0, 800c3b2 <__d2b+0x7e>
 800c37c:	f1c0 0320 	rsb	r3, r0, #32
 800c380:	fa02 f303 	lsl.w	r3, r2, r3
 800c384:	430b      	orrs	r3, r1
 800c386:	40c2      	lsrs	r2, r0
 800c388:	6163      	str	r3, [r4, #20]
 800c38a:	9201      	str	r2, [sp, #4]
 800c38c:	9b01      	ldr	r3, [sp, #4]
 800c38e:	61a3      	str	r3, [r4, #24]
 800c390:	2b00      	cmp	r3, #0
 800c392:	bf0c      	ite	eq
 800c394:	2201      	moveq	r2, #1
 800c396:	2202      	movne	r2, #2
 800c398:	6122      	str	r2, [r4, #16]
 800c39a:	b1a5      	cbz	r5, 800c3c6 <__d2b+0x92>
 800c39c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c3a0:	4405      	add	r5, r0
 800c3a2:	603d      	str	r5, [r7, #0]
 800c3a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c3a8:	6030      	str	r0, [r6, #0]
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	b003      	add	sp, #12
 800c3ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3b2:	6161      	str	r1, [r4, #20]
 800c3b4:	e7ea      	b.n	800c38c <__d2b+0x58>
 800c3b6:	a801      	add	r0, sp, #4
 800c3b8:	f7ff fd59 	bl	800be6e <__lo0bits>
 800c3bc:	9b01      	ldr	r3, [sp, #4]
 800c3be:	6163      	str	r3, [r4, #20]
 800c3c0:	3020      	adds	r0, #32
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	e7e8      	b.n	800c398 <__d2b+0x64>
 800c3c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c3ce:	6038      	str	r0, [r7, #0]
 800c3d0:	6918      	ldr	r0, [r3, #16]
 800c3d2:	f7ff fd2d 	bl	800be30 <__hi0bits>
 800c3d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3da:	e7e5      	b.n	800c3a8 <__d2b+0x74>
 800c3dc:	0800d080 	.word	0x0800d080
 800c3e0:	0800d091 	.word	0x0800d091

0800c3e4 <__ssputs_r>:
 800c3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3e8:	688e      	ldr	r6, [r1, #8]
 800c3ea:	461f      	mov	r7, r3
 800c3ec:	42be      	cmp	r6, r7
 800c3ee:	680b      	ldr	r3, [r1, #0]
 800c3f0:	4682      	mov	sl, r0
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	4690      	mov	r8, r2
 800c3f6:	d82d      	bhi.n	800c454 <__ssputs_r+0x70>
 800c3f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c400:	d026      	beq.n	800c450 <__ssputs_r+0x6c>
 800c402:	6965      	ldr	r5, [r4, #20]
 800c404:	6909      	ldr	r1, [r1, #16]
 800c406:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c40a:	eba3 0901 	sub.w	r9, r3, r1
 800c40e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c412:	1c7b      	adds	r3, r7, #1
 800c414:	444b      	add	r3, r9
 800c416:	106d      	asrs	r5, r5, #1
 800c418:	429d      	cmp	r5, r3
 800c41a:	bf38      	it	cc
 800c41c:	461d      	movcc	r5, r3
 800c41e:	0553      	lsls	r3, r2, #21
 800c420:	d527      	bpl.n	800c472 <__ssputs_r+0x8e>
 800c422:	4629      	mov	r1, r5
 800c424:	f7ff fbd0 	bl	800bbc8 <_malloc_r>
 800c428:	4606      	mov	r6, r0
 800c42a:	b360      	cbz	r0, 800c486 <__ssputs_r+0xa2>
 800c42c:	6921      	ldr	r1, [r4, #16]
 800c42e:	464a      	mov	r2, r9
 800c430:	f000 fa06 	bl	800c840 <memcpy>
 800c434:	89a3      	ldrh	r3, [r4, #12]
 800c436:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c43a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c43e:	81a3      	strh	r3, [r4, #12]
 800c440:	6126      	str	r6, [r4, #16]
 800c442:	6165      	str	r5, [r4, #20]
 800c444:	444e      	add	r6, r9
 800c446:	eba5 0509 	sub.w	r5, r5, r9
 800c44a:	6026      	str	r6, [r4, #0]
 800c44c:	60a5      	str	r5, [r4, #8]
 800c44e:	463e      	mov	r6, r7
 800c450:	42be      	cmp	r6, r7
 800c452:	d900      	bls.n	800c456 <__ssputs_r+0x72>
 800c454:	463e      	mov	r6, r7
 800c456:	6820      	ldr	r0, [r4, #0]
 800c458:	4632      	mov	r2, r6
 800c45a:	4641      	mov	r1, r8
 800c45c:	f000 f9c6 	bl	800c7ec <memmove>
 800c460:	68a3      	ldr	r3, [r4, #8]
 800c462:	1b9b      	subs	r3, r3, r6
 800c464:	60a3      	str	r3, [r4, #8]
 800c466:	6823      	ldr	r3, [r4, #0]
 800c468:	4433      	add	r3, r6
 800c46a:	6023      	str	r3, [r4, #0]
 800c46c:	2000      	movs	r0, #0
 800c46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c472:	462a      	mov	r2, r5
 800c474:	f000 fa36 	bl	800c8e4 <_realloc_r>
 800c478:	4606      	mov	r6, r0
 800c47a:	2800      	cmp	r0, #0
 800c47c:	d1e0      	bne.n	800c440 <__ssputs_r+0x5c>
 800c47e:	6921      	ldr	r1, [r4, #16]
 800c480:	4650      	mov	r0, sl
 800c482:	f7ff fb2d 	bl	800bae0 <_free_r>
 800c486:	230c      	movs	r3, #12
 800c488:	f8ca 3000 	str.w	r3, [sl]
 800c48c:	89a3      	ldrh	r3, [r4, #12]
 800c48e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c492:	81a3      	strh	r3, [r4, #12]
 800c494:	f04f 30ff 	mov.w	r0, #4294967295
 800c498:	e7e9      	b.n	800c46e <__ssputs_r+0x8a>
	...

0800c49c <_svfiprintf_r>:
 800c49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a0:	4698      	mov	r8, r3
 800c4a2:	898b      	ldrh	r3, [r1, #12]
 800c4a4:	061b      	lsls	r3, r3, #24
 800c4a6:	b09d      	sub	sp, #116	@ 0x74
 800c4a8:	4607      	mov	r7, r0
 800c4aa:	460d      	mov	r5, r1
 800c4ac:	4614      	mov	r4, r2
 800c4ae:	d510      	bpl.n	800c4d2 <_svfiprintf_r+0x36>
 800c4b0:	690b      	ldr	r3, [r1, #16]
 800c4b2:	b973      	cbnz	r3, 800c4d2 <_svfiprintf_r+0x36>
 800c4b4:	2140      	movs	r1, #64	@ 0x40
 800c4b6:	f7ff fb87 	bl	800bbc8 <_malloc_r>
 800c4ba:	6028      	str	r0, [r5, #0]
 800c4bc:	6128      	str	r0, [r5, #16]
 800c4be:	b930      	cbnz	r0, 800c4ce <_svfiprintf_r+0x32>
 800c4c0:	230c      	movs	r3, #12
 800c4c2:	603b      	str	r3, [r7, #0]
 800c4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c8:	b01d      	add	sp, #116	@ 0x74
 800c4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ce:	2340      	movs	r3, #64	@ 0x40
 800c4d0:	616b      	str	r3, [r5, #20]
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4d6:	2320      	movs	r3, #32
 800c4d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4e0:	2330      	movs	r3, #48	@ 0x30
 800c4e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c680 <_svfiprintf_r+0x1e4>
 800c4e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4ea:	f04f 0901 	mov.w	r9, #1
 800c4ee:	4623      	mov	r3, r4
 800c4f0:	469a      	mov	sl, r3
 800c4f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4f6:	b10a      	cbz	r2, 800c4fc <_svfiprintf_r+0x60>
 800c4f8:	2a25      	cmp	r2, #37	@ 0x25
 800c4fa:	d1f9      	bne.n	800c4f0 <_svfiprintf_r+0x54>
 800c4fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c500:	d00b      	beq.n	800c51a <_svfiprintf_r+0x7e>
 800c502:	465b      	mov	r3, fp
 800c504:	4622      	mov	r2, r4
 800c506:	4629      	mov	r1, r5
 800c508:	4638      	mov	r0, r7
 800c50a:	f7ff ff6b 	bl	800c3e4 <__ssputs_r>
 800c50e:	3001      	adds	r0, #1
 800c510:	f000 80a7 	beq.w	800c662 <_svfiprintf_r+0x1c6>
 800c514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c516:	445a      	add	r2, fp
 800c518:	9209      	str	r2, [sp, #36]	@ 0x24
 800c51a:	f89a 3000 	ldrb.w	r3, [sl]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f000 809f 	beq.w	800c662 <_svfiprintf_r+0x1c6>
 800c524:	2300      	movs	r3, #0
 800c526:	f04f 32ff 	mov.w	r2, #4294967295
 800c52a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c52e:	f10a 0a01 	add.w	sl, sl, #1
 800c532:	9304      	str	r3, [sp, #16]
 800c534:	9307      	str	r3, [sp, #28]
 800c536:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c53a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c53c:	4654      	mov	r4, sl
 800c53e:	2205      	movs	r2, #5
 800c540:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c544:	484e      	ldr	r0, [pc, #312]	@ (800c680 <_svfiprintf_r+0x1e4>)
 800c546:	f7f3 fe4b 	bl	80001e0 <memchr>
 800c54a:	9a04      	ldr	r2, [sp, #16]
 800c54c:	b9d8      	cbnz	r0, 800c586 <_svfiprintf_r+0xea>
 800c54e:	06d0      	lsls	r0, r2, #27
 800c550:	bf44      	itt	mi
 800c552:	2320      	movmi	r3, #32
 800c554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c558:	0711      	lsls	r1, r2, #28
 800c55a:	bf44      	itt	mi
 800c55c:	232b      	movmi	r3, #43	@ 0x2b
 800c55e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c562:	f89a 3000 	ldrb.w	r3, [sl]
 800c566:	2b2a      	cmp	r3, #42	@ 0x2a
 800c568:	d015      	beq.n	800c596 <_svfiprintf_r+0xfa>
 800c56a:	9a07      	ldr	r2, [sp, #28]
 800c56c:	4654      	mov	r4, sl
 800c56e:	2000      	movs	r0, #0
 800c570:	f04f 0c0a 	mov.w	ip, #10
 800c574:	4621      	mov	r1, r4
 800c576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c57a:	3b30      	subs	r3, #48	@ 0x30
 800c57c:	2b09      	cmp	r3, #9
 800c57e:	d94b      	bls.n	800c618 <_svfiprintf_r+0x17c>
 800c580:	b1b0      	cbz	r0, 800c5b0 <_svfiprintf_r+0x114>
 800c582:	9207      	str	r2, [sp, #28]
 800c584:	e014      	b.n	800c5b0 <_svfiprintf_r+0x114>
 800c586:	eba0 0308 	sub.w	r3, r0, r8
 800c58a:	fa09 f303 	lsl.w	r3, r9, r3
 800c58e:	4313      	orrs	r3, r2
 800c590:	9304      	str	r3, [sp, #16]
 800c592:	46a2      	mov	sl, r4
 800c594:	e7d2      	b.n	800c53c <_svfiprintf_r+0xa0>
 800c596:	9b03      	ldr	r3, [sp, #12]
 800c598:	1d19      	adds	r1, r3, #4
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	9103      	str	r1, [sp, #12]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	bfbb      	ittet	lt
 800c5a2:	425b      	neglt	r3, r3
 800c5a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c5a8:	9307      	strge	r3, [sp, #28]
 800c5aa:	9307      	strlt	r3, [sp, #28]
 800c5ac:	bfb8      	it	lt
 800c5ae:	9204      	strlt	r2, [sp, #16]
 800c5b0:	7823      	ldrb	r3, [r4, #0]
 800c5b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5b4:	d10a      	bne.n	800c5cc <_svfiprintf_r+0x130>
 800c5b6:	7863      	ldrb	r3, [r4, #1]
 800c5b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5ba:	d132      	bne.n	800c622 <_svfiprintf_r+0x186>
 800c5bc:	9b03      	ldr	r3, [sp, #12]
 800c5be:	1d1a      	adds	r2, r3, #4
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	9203      	str	r2, [sp, #12]
 800c5c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5c8:	3402      	adds	r4, #2
 800c5ca:	9305      	str	r3, [sp, #20]
 800c5cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c690 <_svfiprintf_r+0x1f4>
 800c5d0:	7821      	ldrb	r1, [r4, #0]
 800c5d2:	2203      	movs	r2, #3
 800c5d4:	4650      	mov	r0, sl
 800c5d6:	f7f3 fe03 	bl	80001e0 <memchr>
 800c5da:	b138      	cbz	r0, 800c5ec <_svfiprintf_r+0x150>
 800c5dc:	9b04      	ldr	r3, [sp, #16]
 800c5de:	eba0 000a 	sub.w	r0, r0, sl
 800c5e2:	2240      	movs	r2, #64	@ 0x40
 800c5e4:	4082      	lsls	r2, r0
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	3401      	adds	r4, #1
 800c5ea:	9304      	str	r3, [sp, #16]
 800c5ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5f0:	4824      	ldr	r0, [pc, #144]	@ (800c684 <_svfiprintf_r+0x1e8>)
 800c5f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5f6:	2206      	movs	r2, #6
 800c5f8:	f7f3 fdf2 	bl	80001e0 <memchr>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d036      	beq.n	800c66e <_svfiprintf_r+0x1d2>
 800c600:	4b21      	ldr	r3, [pc, #132]	@ (800c688 <_svfiprintf_r+0x1ec>)
 800c602:	bb1b      	cbnz	r3, 800c64c <_svfiprintf_r+0x1b0>
 800c604:	9b03      	ldr	r3, [sp, #12]
 800c606:	3307      	adds	r3, #7
 800c608:	f023 0307 	bic.w	r3, r3, #7
 800c60c:	3308      	adds	r3, #8
 800c60e:	9303      	str	r3, [sp, #12]
 800c610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c612:	4433      	add	r3, r6
 800c614:	9309      	str	r3, [sp, #36]	@ 0x24
 800c616:	e76a      	b.n	800c4ee <_svfiprintf_r+0x52>
 800c618:	fb0c 3202 	mla	r2, ip, r2, r3
 800c61c:	460c      	mov	r4, r1
 800c61e:	2001      	movs	r0, #1
 800c620:	e7a8      	b.n	800c574 <_svfiprintf_r+0xd8>
 800c622:	2300      	movs	r3, #0
 800c624:	3401      	adds	r4, #1
 800c626:	9305      	str	r3, [sp, #20]
 800c628:	4619      	mov	r1, r3
 800c62a:	f04f 0c0a 	mov.w	ip, #10
 800c62e:	4620      	mov	r0, r4
 800c630:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c634:	3a30      	subs	r2, #48	@ 0x30
 800c636:	2a09      	cmp	r2, #9
 800c638:	d903      	bls.n	800c642 <_svfiprintf_r+0x1a6>
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d0c6      	beq.n	800c5cc <_svfiprintf_r+0x130>
 800c63e:	9105      	str	r1, [sp, #20]
 800c640:	e7c4      	b.n	800c5cc <_svfiprintf_r+0x130>
 800c642:	fb0c 2101 	mla	r1, ip, r1, r2
 800c646:	4604      	mov	r4, r0
 800c648:	2301      	movs	r3, #1
 800c64a:	e7f0      	b.n	800c62e <_svfiprintf_r+0x192>
 800c64c:	ab03      	add	r3, sp, #12
 800c64e:	9300      	str	r3, [sp, #0]
 800c650:	462a      	mov	r2, r5
 800c652:	4b0e      	ldr	r3, [pc, #56]	@ (800c68c <_svfiprintf_r+0x1f0>)
 800c654:	a904      	add	r1, sp, #16
 800c656:	4638      	mov	r0, r7
 800c658:	f7fd fe98 	bl	800a38c <_printf_float>
 800c65c:	1c42      	adds	r2, r0, #1
 800c65e:	4606      	mov	r6, r0
 800c660:	d1d6      	bne.n	800c610 <_svfiprintf_r+0x174>
 800c662:	89ab      	ldrh	r3, [r5, #12]
 800c664:	065b      	lsls	r3, r3, #25
 800c666:	f53f af2d 	bmi.w	800c4c4 <_svfiprintf_r+0x28>
 800c66a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c66c:	e72c      	b.n	800c4c8 <_svfiprintf_r+0x2c>
 800c66e:	ab03      	add	r3, sp, #12
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	462a      	mov	r2, r5
 800c674:	4b05      	ldr	r3, [pc, #20]	@ (800c68c <_svfiprintf_r+0x1f0>)
 800c676:	a904      	add	r1, sp, #16
 800c678:	4638      	mov	r0, r7
 800c67a:	f7fe f91f 	bl	800a8bc <_printf_i>
 800c67e:	e7ed      	b.n	800c65c <_svfiprintf_r+0x1c0>
 800c680:	0800d1e8 	.word	0x0800d1e8
 800c684:	0800d1f2 	.word	0x0800d1f2
 800c688:	0800a38d 	.word	0x0800a38d
 800c68c:	0800c3e5 	.word	0x0800c3e5
 800c690:	0800d1ee 	.word	0x0800d1ee

0800c694 <__sflush_r>:
 800c694:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c69c:	0716      	lsls	r6, r2, #28
 800c69e:	4605      	mov	r5, r0
 800c6a0:	460c      	mov	r4, r1
 800c6a2:	d454      	bmi.n	800c74e <__sflush_r+0xba>
 800c6a4:	684b      	ldr	r3, [r1, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	dc02      	bgt.n	800c6b0 <__sflush_r+0x1c>
 800c6aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	dd48      	ble.n	800c742 <__sflush_r+0xae>
 800c6b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6b2:	2e00      	cmp	r6, #0
 800c6b4:	d045      	beq.n	800c742 <__sflush_r+0xae>
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c6bc:	682f      	ldr	r7, [r5, #0]
 800c6be:	6a21      	ldr	r1, [r4, #32]
 800c6c0:	602b      	str	r3, [r5, #0]
 800c6c2:	d030      	beq.n	800c726 <__sflush_r+0x92>
 800c6c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6c6:	89a3      	ldrh	r3, [r4, #12]
 800c6c8:	0759      	lsls	r1, r3, #29
 800c6ca:	d505      	bpl.n	800c6d8 <__sflush_r+0x44>
 800c6cc:	6863      	ldr	r3, [r4, #4]
 800c6ce:	1ad2      	subs	r2, r2, r3
 800c6d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6d2:	b10b      	cbz	r3, 800c6d8 <__sflush_r+0x44>
 800c6d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c6d6:	1ad2      	subs	r2, r2, r3
 800c6d8:	2300      	movs	r3, #0
 800c6da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6dc:	6a21      	ldr	r1, [r4, #32]
 800c6de:	4628      	mov	r0, r5
 800c6e0:	47b0      	blx	r6
 800c6e2:	1c43      	adds	r3, r0, #1
 800c6e4:	89a3      	ldrh	r3, [r4, #12]
 800c6e6:	d106      	bne.n	800c6f6 <__sflush_r+0x62>
 800c6e8:	6829      	ldr	r1, [r5, #0]
 800c6ea:	291d      	cmp	r1, #29
 800c6ec:	d82b      	bhi.n	800c746 <__sflush_r+0xb2>
 800c6ee:	4a2a      	ldr	r2, [pc, #168]	@ (800c798 <__sflush_r+0x104>)
 800c6f0:	410a      	asrs	r2, r1
 800c6f2:	07d6      	lsls	r6, r2, #31
 800c6f4:	d427      	bmi.n	800c746 <__sflush_r+0xb2>
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	6062      	str	r2, [r4, #4]
 800c6fa:	04d9      	lsls	r1, r3, #19
 800c6fc:	6922      	ldr	r2, [r4, #16]
 800c6fe:	6022      	str	r2, [r4, #0]
 800c700:	d504      	bpl.n	800c70c <__sflush_r+0x78>
 800c702:	1c42      	adds	r2, r0, #1
 800c704:	d101      	bne.n	800c70a <__sflush_r+0x76>
 800c706:	682b      	ldr	r3, [r5, #0]
 800c708:	b903      	cbnz	r3, 800c70c <__sflush_r+0x78>
 800c70a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c70c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c70e:	602f      	str	r7, [r5, #0]
 800c710:	b1b9      	cbz	r1, 800c742 <__sflush_r+0xae>
 800c712:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c716:	4299      	cmp	r1, r3
 800c718:	d002      	beq.n	800c720 <__sflush_r+0x8c>
 800c71a:	4628      	mov	r0, r5
 800c71c:	f7ff f9e0 	bl	800bae0 <_free_r>
 800c720:	2300      	movs	r3, #0
 800c722:	6363      	str	r3, [r4, #52]	@ 0x34
 800c724:	e00d      	b.n	800c742 <__sflush_r+0xae>
 800c726:	2301      	movs	r3, #1
 800c728:	4628      	mov	r0, r5
 800c72a:	47b0      	blx	r6
 800c72c:	4602      	mov	r2, r0
 800c72e:	1c50      	adds	r0, r2, #1
 800c730:	d1c9      	bne.n	800c6c6 <__sflush_r+0x32>
 800c732:	682b      	ldr	r3, [r5, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d0c6      	beq.n	800c6c6 <__sflush_r+0x32>
 800c738:	2b1d      	cmp	r3, #29
 800c73a:	d001      	beq.n	800c740 <__sflush_r+0xac>
 800c73c:	2b16      	cmp	r3, #22
 800c73e:	d11e      	bne.n	800c77e <__sflush_r+0xea>
 800c740:	602f      	str	r7, [r5, #0]
 800c742:	2000      	movs	r0, #0
 800c744:	e022      	b.n	800c78c <__sflush_r+0xf8>
 800c746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c74a:	b21b      	sxth	r3, r3
 800c74c:	e01b      	b.n	800c786 <__sflush_r+0xf2>
 800c74e:	690f      	ldr	r7, [r1, #16]
 800c750:	2f00      	cmp	r7, #0
 800c752:	d0f6      	beq.n	800c742 <__sflush_r+0xae>
 800c754:	0793      	lsls	r3, r2, #30
 800c756:	680e      	ldr	r6, [r1, #0]
 800c758:	bf08      	it	eq
 800c75a:	694b      	ldreq	r3, [r1, #20]
 800c75c:	600f      	str	r7, [r1, #0]
 800c75e:	bf18      	it	ne
 800c760:	2300      	movne	r3, #0
 800c762:	eba6 0807 	sub.w	r8, r6, r7
 800c766:	608b      	str	r3, [r1, #8]
 800c768:	f1b8 0f00 	cmp.w	r8, #0
 800c76c:	dde9      	ble.n	800c742 <__sflush_r+0xae>
 800c76e:	6a21      	ldr	r1, [r4, #32]
 800c770:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c772:	4643      	mov	r3, r8
 800c774:	463a      	mov	r2, r7
 800c776:	4628      	mov	r0, r5
 800c778:	47b0      	blx	r6
 800c77a:	2800      	cmp	r0, #0
 800c77c:	dc08      	bgt.n	800c790 <__sflush_r+0xfc>
 800c77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c786:	81a3      	strh	r3, [r4, #12]
 800c788:	f04f 30ff 	mov.w	r0, #4294967295
 800c78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c790:	4407      	add	r7, r0
 800c792:	eba8 0800 	sub.w	r8, r8, r0
 800c796:	e7e7      	b.n	800c768 <__sflush_r+0xd4>
 800c798:	dfbffffe 	.word	0xdfbffffe

0800c79c <_fflush_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	690b      	ldr	r3, [r1, #16]
 800c7a0:	4605      	mov	r5, r0
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	b913      	cbnz	r3, 800c7ac <_fflush_r+0x10>
 800c7a6:	2500      	movs	r5, #0
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	bd38      	pop	{r3, r4, r5, pc}
 800c7ac:	b118      	cbz	r0, 800c7b6 <_fflush_r+0x1a>
 800c7ae:	6a03      	ldr	r3, [r0, #32]
 800c7b0:	b90b      	cbnz	r3, 800c7b6 <_fflush_r+0x1a>
 800c7b2:	f7fe fa2f 	bl	800ac14 <__sinit>
 800c7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d0f3      	beq.n	800c7a6 <_fflush_r+0xa>
 800c7be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7c0:	07d0      	lsls	r0, r2, #31
 800c7c2:	d404      	bmi.n	800c7ce <_fflush_r+0x32>
 800c7c4:	0599      	lsls	r1, r3, #22
 800c7c6:	d402      	bmi.n	800c7ce <_fflush_r+0x32>
 800c7c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7ca:	f7fe fb3a 	bl	800ae42 <__retarget_lock_acquire_recursive>
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	4621      	mov	r1, r4
 800c7d2:	f7ff ff5f 	bl	800c694 <__sflush_r>
 800c7d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7d8:	07da      	lsls	r2, r3, #31
 800c7da:	4605      	mov	r5, r0
 800c7dc:	d4e4      	bmi.n	800c7a8 <_fflush_r+0xc>
 800c7de:	89a3      	ldrh	r3, [r4, #12]
 800c7e0:	059b      	lsls	r3, r3, #22
 800c7e2:	d4e1      	bmi.n	800c7a8 <_fflush_r+0xc>
 800c7e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7e6:	f7fe fb2d 	bl	800ae44 <__retarget_lock_release_recursive>
 800c7ea:	e7dd      	b.n	800c7a8 <_fflush_r+0xc>

0800c7ec <memmove>:
 800c7ec:	4288      	cmp	r0, r1
 800c7ee:	b510      	push	{r4, lr}
 800c7f0:	eb01 0402 	add.w	r4, r1, r2
 800c7f4:	d902      	bls.n	800c7fc <memmove+0x10>
 800c7f6:	4284      	cmp	r4, r0
 800c7f8:	4623      	mov	r3, r4
 800c7fa:	d807      	bhi.n	800c80c <memmove+0x20>
 800c7fc:	1e43      	subs	r3, r0, #1
 800c7fe:	42a1      	cmp	r1, r4
 800c800:	d008      	beq.n	800c814 <memmove+0x28>
 800c802:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c806:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c80a:	e7f8      	b.n	800c7fe <memmove+0x12>
 800c80c:	4402      	add	r2, r0
 800c80e:	4601      	mov	r1, r0
 800c810:	428a      	cmp	r2, r1
 800c812:	d100      	bne.n	800c816 <memmove+0x2a>
 800c814:	bd10      	pop	{r4, pc}
 800c816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c81a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c81e:	e7f7      	b.n	800c810 <memmove+0x24>

0800c820 <_sbrk_r>:
 800c820:	b538      	push	{r3, r4, r5, lr}
 800c822:	4d06      	ldr	r5, [pc, #24]	@ (800c83c <_sbrk_r+0x1c>)
 800c824:	2300      	movs	r3, #0
 800c826:	4604      	mov	r4, r0
 800c828:	4608      	mov	r0, r1
 800c82a:	602b      	str	r3, [r5, #0]
 800c82c:	f7f6 f994 	bl	8002b58 <_sbrk>
 800c830:	1c43      	adds	r3, r0, #1
 800c832:	d102      	bne.n	800c83a <_sbrk_r+0x1a>
 800c834:	682b      	ldr	r3, [r5, #0]
 800c836:	b103      	cbz	r3, 800c83a <_sbrk_r+0x1a>
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	bd38      	pop	{r3, r4, r5, pc}
 800c83c:	2000096c 	.word	0x2000096c

0800c840 <memcpy>:
 800c840:	440a      	add	r2, r1
 800c842:	4291      	cmp	r1, r2
 800c844:	f100 33ff 	add.w	r3, r0, #4294967295
 800c848:	d100      	bne.n	800c84c <memcpy+0xc>
 800c84a:	4770      	bx	lr
 800c84c:	b510      	push	{r4, lr}
 800c84e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c852:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c856:	4291      	cmp	r1, r2
 800c858:	d1f9      	bne.n	800c84e <memcpy+0xe>
 800c85a:	bd10      	pop	{r4, pc}

0800c85c <__assert_func>:
 800c85c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c85e:	4614      	mov	r4, r2
 800c860:	461a      	mov	r2, r3
 800c862:	4b09      	ldr	r3, [pc, #36]	@ (800c888 <__assert_func+0x2c>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4605      	mov	r5, r0
 800c868:	68d8      	ldr	r0, [r3, #12]
 800c86a:	b954      	cbnz	r4, 800c882 <__assert_func+0x26>
 800c86c:	4b07      	ldr	r3, [pc, #28]	@ (800c88c <__assert_func+0x30>)
 800c86e:	461c      	mov	r4, r3
 800c870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c874:	9100      	str	r1, [sp, #0]
 800c876:	462b      	mov	r3, r5
 800c878:	4905      	ldr	r1, [pc, #20]	@ (800c890 <__assert_func+0x34>)
 800c87a:	f000 f86f 	bl	800c95c <fiprintf>
 800c87e:	f000 f87f 	bl	800c980 <abort>
 800c882:	4b04      	ldr	r3, [pc, #16]	@ (800c894 <__assert_func+0x38>)
 800c884:	e7f4      	b.n	800c870 <__assert_func+0x14>
 800c886:	bf00      	nop
 800c888:	20000018 	.word	0x20000018
 800c88c:	0800d23e 	.word	0x0800d23e
 800c890:	0800d210 	.word	0x0800d210
 800c894:	0800d203 	.word	0x0800d203

0800c898 <_calloc_r>:
 800c898:	b570      	push	{r4, r5, r6, lr}
 800c89a:	fba1 5402 	umull	r5, r4, r1, r2
 800c89e:	b93c      	cbnz	r4, 800c8b0 <_calloc_r+0x18>
 800c8a0:	4629      	mov	r1, r5
 800c8a2:	f7ff f991 	bl	800bbc8 <_malloc_r>
 800c8a6:	4606      	mov	r6, r0
 800c8a8:	b928      	cbnz	r0, 800c8b6 <_calloc_r+0x1e>
 800c8aa:	2600      	movs	r6, #0
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	bd70      	pop	{r4, r5, r6, pc}
 800c8b0:	220c      	movs	r2, #12
 800c8b2:	6002      	str	r2, [r0, #0]
 800c8b4:	e7f9      	b.n	800c8aa <_calloc_r+0x12>
 800c8b6:	462a      	mov	r2, r5
 800c8b8:	4621      	mov	r1, r4
 800c8ba:	f7fe fa44 	bl	800ad46 <memset>
 800c8be:	e7f5      	b.n	800c8ac <_calloc_r+0x14>

0800c8c0 <__ascii_mbtowc>:
 800c8c0:	b082      	sub	sp, #8
 800c8c2:	b901      	cbnz	r1, 800c8c6 <__ascii_mbtowc+0x6>
 800c8c4:	a901      	add	r1, sp, #4
 800c8c6:	b142      	cbz	r2, 800c8da <__ascii_mbtowc+0x1a>
 800c8c8:	b14b      	cbz	r3, 800c8de <__ascii_mbtowc+0x1e>
 800c8ca:	7813      	ldrb	r3, [r2, #0]
 800c8cc:	600b      	str	r3, [r1, #0]
 800c8ce:	7812      	ldrb	r2, [r2, #0]
 800c8d0:	1e10      	subs	r0, r2, #0
 800c8d2:	bf18      	it	ne
 800c8d4:	2001      	movne	r0, #1
 800c8d6:	b002      	add	sp, #8
 800c8d8:	4770      	bx	lr
 800c8da:	4610      	mov	r0, r2
 800c8dc:	e7fb      	b.n	800c8d6 <__ascii_mbtowc+0x16>
 800c8de:	f06f 0001 	mvn.w	r0, #1
 800c8e2:	e7f8      	b.n	800c8d6 <__ascii_mbtowc+0x16>

0800c8e4 <_realloc_r>:
 800c8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e8:	4680      	mov	r8, r0
 800c8ea:	4615      	mov	r5, r2
 800c8ec:	460c      	mov	r4, r1
 800c8ee:	b921      	cbnz	r1, 800c8fa <_realloc_r+0x16>
 800c8f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f4:	4611      	mov	r1, r2
 800c8f6:	f7ff b967 	b.w	800bbc8 <_malloc_r>
 800c8fa:	b92a      	cbnz	r2, 800c908 <_realloc_r+0x24>
 800c8fc:	f7ff f8f0 	bl	800bae0 <_free_r>
 800c900:	2400      	movs	r4, #0
 800c902:	4620      	mov	r0, r4
 800c904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c908:	f000 f841 	bl	800c98e <_malloc_usable_size_r>
 800c90c:	4285      	cmp	r5, r0
 800c90e:	4606      	mov	r6, r0
 800c910:	d802      	bhi.n	800c918 <_realloc_r+0x34>
 800c912:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c916:	d8f4      	bhi.n	800c902 <_realloc_r+0x1e>
 800c918:	4629      	mov	r1, r5
 800c91a:	4640      	mov	r0, r8
 800c91c:	f7ff f954 	bl	800bbc8 <_malloc_r>
 800c920:	4607      	mov	r7, r0
 800c922:	2800      	cmp	r0, #0
 800c924:	d0ec      	beq.n	800c900 <_realloc_r+0x1c>
 800c926:	42b5      	cmp	r5, r6
 800c928:	462a      	mov	r2, r5
 800c92a:	4621      	mov	r1, r4
 800c92c:	bf28      	it	cs
 800c92e:	4632      	movcs	r2, r6
 800c930:	f7ff ff86 	bl	800c840 <memcpy>
 800c934:	4621      	mov	r1, r4
 800c936:	4640      	mov	r0, r8
 800c938:	f7ff f8d2 	bl	800bae0 <_free_r>
 800c93c:	463c      	mov	r4, r7
 800c93e:	e7e0      	b.n	800c902 <_realloc_r+0x1e>

0800c940 <__ascii_wctomb>:
 800c940:	4603      	mov	r3, r0
 800c942:	4608      	mov	r0, r1
 800c944:	b141      	cbz	r1, 800c958 <__ascii_wctomb+0x18>
 800c946:	2aff      	cmp	r2, #255	@ 0xff
 800c948:	d904      	bls.n	800c954 <__ascii_wctomb+0x14>
 800c94a:	228a      	movs	r2, #138	@ 0x8a
 800c94c:	601a      	str	r2, [r3, #0]
 800c94e:	f04f 30ff 	mov.w	r0, #4294967295
 800c952:	4770      	bx	lr
 800c954:	700a      	strb	r2, [r1, #0]
 800c956:	2001      	movs	r0, #1
 800c958:	4770      	bx	lr
	...

0800c95c <fiprintf>:
 800c95c:	b40e      	push	{r1, r2, r3}
 800c95e:	b503      	push	{r0, r1, lr}
 800c960:	4601      	mov	r1, r0
 800c962:	ab03      	add	r3, sp, #12
 800c964:	4805      	ldr	r0, [pc, #20]	@ (800c97c <fiprintf+0x20>)
 800c966:	f853 2b04 	ldr.w	r2, [r3], #4
 800c96a:	6800      	ldr	r0, [r0, #0]
 800c96c:	9301      	str	r3, [sp, #4]
 800c96e:	f000 f83f 	bl	800c9f0 <_vfiprintf_r>
 800c972:	b002      	add	sp, #8
 800c974:	f85d eb04 	ldr.w	lr, [sp], #4
 800c978:	b003      	add	sp, #12
 800c97a:	4770      	bx	lr
 800c97c:	20000018 	.word	0x20000018

0800c980 <abort>:
 800c980:	b508      	push	{r3, lr}
 800c982:	2006      	movs	r0, #6
 800c984:	f000 fa08 	bl	800cd98 <raise>
 800c988:	2001      	movs	r0, #1
 800c98a:	f7f6 f86d 	bl	8002a68 <_exit>

0800c98e <_malloc_usable_size_r>:
 800c98e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c992:	1f18      	subs	r0, r3, #4
 800c994:	2b00      	cmp	r3, #0
 800c996:	bfbc      	itt	lt
 800c998:	580b      	ldrlt	r3, [r1, r0]
 800c99a:	18c0      	addlt	r0, r0, r3
 800c99c:	4770      	bx	lr

0800c99e <__sfputc_r>:
 800c99e:	6893      	ldr	r3, [r2, #8]
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	b410      	push	{r4}
 800c9a6:	6093      	str	r3, [r2, #8]
 800c9a8:	da08      	bge.n	800c9bc <__sfputc_r+0x1e>
 800c9aa:	6994      	ldr	r4, [r2, #24]
 800c9ac:	42a3      	cmp	r3, r4
 800c9ae:	db01      	blt.n	800c9b4 <__sfputc_r+0x16>
 800c9b0:	290a      	cmp	r1, #10
 800c9b2:	d103      	bne.n	800c9bc <__sfputc_r+0x1e>
 800c9b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9b8:	f000 b932 	b.w	800cc20 <__swbuf_r>
 800c9bc:	6813      	ldr	r3, [r2, #0]
 800c9be:	1c58      	adds	r0, r3, #1
 800c9c0:	6010      	str	r0, [r2, #0]
 800c9c2:	7019      	strb	r1, [r3, #0]
 800c9c4:	4608      	mov	r0, r1
 800c9c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <__sfputs_r>:
 800c9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ce:	4606      	mov	r6, r0
 800c9d0:	460f      	mov	r7, r1
 800c9d2:	4614      	mov	r4, r2
 800c9d4:	18d5      	adds	r5, r2, r3
 800c9d6:	42ac      	cmp	r4, r5
 800c9d8:	d101      	bne.n	800c9de <__sfputs_r+0x12>
 800c9da:	2000      	movs	r0, #0
 800c9dc:	e007      	b.n	800c9ee <__sfputs_r+0x22>
 800c9de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9e2:	463a      	mov	r2, r7
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f7ff ffda 	bl	800c99e <__sfputc_r>
 800c9ea:	1c43      	adds	r3, r0, #1
 800c9ec:	d1f3      	bne.n	800c9d6 <__sfputs_r+0xa>
 800c9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9f0 <_vfiprintf_r>:
 800c9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f4:	460d      	mov	r5, r1
 800c9f6:	b09d      	sub	sp, #116	@ 0x74
 800c9f8:	4614      	mov	r4, r2
 800c9fa:	4698      	mov	r8, r3
 800c9fc:	4606      	mov	r6, r0
 800c9fe:	b118      	cbz	r0, 800ca08 <_vfiprintf_r+0x18>
 800ca00:	6a03      	ldr	r3, [r0, #32]
 800ca02:	b90b      	cbnz	r3, 800ca08 <_vfiprintf_r+0x18>
 800ca04:	f7fe f906 	bl	800ac14 <__sinit>
 800ca08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca0a:	07d9      	lsls	r1, r3, #31
 800ca0c:	d405      	bmi.n	800ca1a <_vfiprintf_r+0x2a>
 800ca0e:	89ab      	ldrh	r3, [r5, #12]
 800ca10:	059a      	lsls	r2, r3, #22
 800ca12:	d402      	bmi.n	800ca1a <_vfiprintf_r+0x2a>
 800ca14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca16:	f7fe fa14 	bl	800ae42 <__retarget_lock_acquire_recursive>
 800ca1a:	89ab      	ldrh	r3, [r5, #12]
 800ca1c:	071b      	lsls	r3, r3, #28
 800ca1e:	d501      	bpl.n	800ca24 <_vfiprintf_r+0x34>
 800ca20:	692b      	ldr	r3, [r5, #16]
 800ca22:	b99b      	cbnz	r3, 800ca4c <_vfiprintf_r+0x5c>
 800ca24:	4629      	mov	r1, r5
 800ca26:	4630      	mov	r0, r6
 800ca28:	f000 f938 	bl	800cc9c <__swsetup_r>
 800ca2c:	b170      	cbz	r0, 800ca4c <_vfiprintf_r+0x5c>
 800ca2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca30:	07dc      	lsls	r4, r3, #31
 800ca32:	d504      	bpl.n	800ca3e <_vfiprintf_r+0x4e>
 800ca34:	f04f 30ff 	mov.w	r0, #4294967295
 800ca38:	b01d      	add	sp, #116	@ 0x74
 800ca3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca3e:	89ab      	ldrh	r3, [r5, #12]
 800ca40:	0598      	lsls	r0, r3, #22
 800ca42:	d4f7      	bmi.n	800ca34 <_vfiprintf_r+0x44>
 800ca44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca46:	f7fe f9fd 	bl	800ae44 <__retarget_lock_release_recursive>
 800ca4a:	e7f3      	b.n	800ca34 <_vfiprintf_r+0x44>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca50:	2320      	movs	r3, #32
 800ca52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca5a:	2330      	movs	r3, #48	@ 0x30
 800ca5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc0c <_vfiprintf_r+0x21c>
 800ca60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca64:	f04f 0901 	mov.w	r9, #1
 800ca68:	4623      	mov	r3, r4
 800ca6a:	469a      	mov	sl, r3
 800ca6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca70:	b10a      	cbz	r2, 800ca76 <_vfiprintf_r+0x86>
 800ca72:	2a25      	cmp	r2, #37	@ 0x25
 800ca74:	d1f9      	bne.n	800ca6a <_vfiprintf_r+0x7a>
 800ca76:	ebba 0b04 	subs.w	fp, sl, r4
 800ca7a:	d00b      	beq.n	800ca94 <_vfiprintf_r+0xa4>
 800ca7c:	465b      	mov	r3, fp
 800ca7e:	4622      	mov	r2, r4
 800ca80:	4629      	mov	r1, r5
 800ca82:	4630      	mov	r0, r6
 800ca84:	f7ff ffa2 	bl	800c9cc <__sfputs_r>
 800ca88:	3001      	adds	r0, #1
 800ca8a:	f000 80a7 	beq.w	800cbdc <_vfiprintf_r+0x1ec>
 800ca8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca90:	445a      	add	r2, fp
 800ca92:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca94:	f89a 3000 	ldrb.w	r3, [sl]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	f000 809f 	beq.w	800cbdc <_vfiprintf_r+0x1ec>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	f04f 32ff 	mov.w	r2, #4294967295
 800caa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caa8:	f10a 0a01 	add.w	sl, sl, #1
 800caac:	9304      	str	r3, [sp, #16]
 800caae:	9307      	str	r3, [sp, #28]
 800cab0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cab4:	931a      	str	r3, [sp, #104]	@ 0x68
 800cab6:	4654      	mov	r4, sl
 800cab8:	2205      	movs	r2, #5
 800caba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cabe:	4853      	ldr	r0, [pc, #332]	@ (800cc0c <_vfiprintf_r+0x21c>)
 800cac0:	f7f3 fb8e 	bl	80001e0 <memchr>
 800cac4:	9a04      	ldr	r2, [sp, #16]
 800cac6:	b9d8      	cbnz	r0, 800cb00 <_vfiprintf_r+0x110>
 800cac8:	06d1      	lsls	r1, r2, #27
 800caca:	bf44      	itt	mi
 800cacc:	2320      	movmi	r3, #32
 800cace:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cad2:	0713      	lsls	r3, r2, #28
 800cad4:	bf44      	itt	mi
 800cad6:	232b      	movmi	r3, #43	@ 0x2b
 800cad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cadc:	f89a 3000 	ldrb.w	r3, [sl]
 800cae0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cae2:	d015      	beq.n	800cb10 <_vfiprintf_r+0x120>
 800cae4:	9a07      	ldr	r2, [sp, #28]
 800cae6:	4654      	mov	r4, sl
 800cae8:	2000      	movs	r0, #0
 800caea:	f04f 0c0a 	mov.w	ip, #10
 800caee:	4621      	mov	r1, r4
 800caf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caf4:	3b30      	subs	r3, #48	@ 0x30
 800caf6:	2b09      	cmp	r3, #9
 800caf8:	d94b      	bls.n	800cb92 <_vfiprintf_r+0x1a2>
 800cafa:	b1b0      	cbz	r0, 800cb2a <_vfiprintf_r+0x13a>
 800cafc:	9207      	str	r2, [sp, #28]
 800cafe:	e014      	b.n	800cb2a <_vfiprintf_r+0x13a>
 800cb00:	eba0 0308 	sub.w	r3, r0, r8
 800cb04:	fa09 f303 	lsl.w	r3, r9, r3
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	9304      	str	r3, [sp, #16]
 800cb0c:	46a2      	mov	sl, r4
 800cb0e:	e7d2      	b.n	800cab6 <_vfiprintf_r+0xc6>
 800cb10:	9b03      	ldr	r3, [sp, #12]
 800cb12:	1d19      	adds	r1, r3, #4
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	9103      	str	r1, [sp, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	bfbb      	ittet	lt
 800cb1c:	425b      	neglt	r3, r3
 800cb1e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb22:	9307      	strge	r3, [sp, #28]
 800cb24:	9307      	strlt	r3, [sp, #28]
 800cb26:	bfb8      	it	lt
 800cb28:	9204      	strlt	r2, [sp, #16]
 800cb2a:	7823      	ldrb	r3, [r4, #0]
 800cb2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb2e:	d10a      	bne.n	800cb46 <_vfiprintf_r+0x156>
 800cb30:	7863      	ldrb	r3, [r4, #1]
 800cb32:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb34:	d132      	bne.n	800cb9c <_vfiprintf_r+0x1ac>
 800cb36:	9b03      	ldr	r3, [sp, #12]
 800cb38:	1d1a      	adds	r2, r3, #4
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	9203      	str	r2, [sp, #12]
 800cb3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb42:	3402      	adds	r4, #2
 800cb44:	9305      	str	r3, [sp, #20]
 800cb46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc1c <_vfiprintf_r+0x22c>
 800cb4a:	7821      	ldrb	r1, [r4, #0]
 800cb4c:	2203      	movs	r2, #3
 800cb4e:	4650      	mov	r0, sl
 800cb50:	f7f3 fb46 	bl	80001e0 <memchr>
 800cb54:	b138      	cbz	r0, 800cb66 <_vfiprintf_r+0x176>
 800cb56:	9b04      	ldr	r3, [sp, #16]
 800cb58:	eba0 000a 	sub.w	r0, r0, sl
 800cb5c:	2240      	movs	r2, #64	@ 0x40
 800cb5e:	4082      	lsls	r2, r0
 800cb60:	4313      	orrs	r3, r2
 800cb62:	3401      	adds	r4, #1
 800cb64:	9304      	str	r3, [sp, #16]
 800cb66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb6a:	4829      	ldr	r0, [pc, #164]	@ (800cc10 <_vfiprintf_r+0x220>)
 800cb6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb70:	2206      	movs	r2, #6
 800cb72:	f7f3 fb35 	bl	80001e0 <memchr>
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d03f      	beq.n	800cbfa <_vfiprintf_r+0x20a>
 800cb7a:	4b26      	ldr	r3, [pc, #152]	@ (800cc14 <_vfiprintf_r+0x224>)
 800cb7c:	bb1b      	cbnz	r3, 800cbc6 <_vfiprintf_r+0x1d6>
 800cb7e:	9b03      	ldr	r3, [sp, #12]
 800cb80:	3307      	adds	r3, #7
 800cb82:	f023 0307 	bic.w	r3, r3, #7
 800cb86:	3308      	adds	r3, #8
 800cb88:	9303      	str	r3, [sp, #12]
 800cb8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb8c:	443b      	add	r3, r7
 800cb8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb90:	e76a      	b.n	800ca68 <_vfiprintf_r+0x78>
 800cb92:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb96:	460c      	mov	r4, r1
 800cb98:	2001      	movs	r0, #1
 800cb9a:	e7a8      	b.n	800caee <_vfiprintf_r+0xfe>
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	3401      	adds	r4, #1
 800cba0:	9305      	str	r3, [sp, #20]
 800cba2:	4619      	mov	r1, r3
 800cba4:	f04f 0c0a 	mov.w	ip, #10
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbae:	3a30      	subs	r2, #48	@ 0x30
 800cbb0:	2a09      	cmp	r2, #9
 800cbb2:	d903      	bls.n	800cbbc <_vfiprintf_r+0x1cc>
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d0c6      	beq.n	800cb46 <_vfiprintf_r+0x156>
 800cbb8:	9105      	str	r1, [sp, #20]
 800cbba:	e7c4      	b.n	800cb46 <_vfiprintf_r+0x156>
 800cbbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbc0:	4604      	mov	r4, r0
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	e7f0      	b.n	800cba8 <_vfiprintf_r+0x1b8>
 800cbc6:	ab03      	add	r3, sp, #12
 800cbc8:	9300      	str	r3, [sp, #0]
 800cbca:	462a      	mov	r2, r5
 800cbcc:	4b12      	ldr	r3, [pc, #72]	@ (800cc18 <_vfiprintf_r+0x228>)
 800cbce:	a904      	add	r1, sp, #16
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f7fd fbdb 	bl	800a38c <_printf_float>
 800cbd6:	4607      	mov	r7, r0
 800cbd8:	1c78      	adds	r0, r7, #1
 800cbda:	d1d6      	bne.n	800cb8a <_vfiprintf_r+0x19a>
 800cbdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbde:	07d9      	lsls	r1, r3, #31
 800cbe0:	d405      	bmi.n	800cbee <_vfiprintf_r+0x1fe>
 800cbe2:	89ab      	ldrh	r3, [r5, #12]
 800cbe4:	059a      	lsls	r2, r3, #22
 800cbe6:	d402      	bmi.n	800cbee <_vfiprintf_r+0x1fe>
 800cbe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbea:	f7fe f92b 	bl	800ae44 <__retarget_lock_release_recursive>
 800cbee:	89ab      	ldrh	r3, [r5, #12]
 800cbf0:	065b      	lsls	r3, r3, #25
 800cbf2:	f53f af1f 	bmi.w	800ca34 <_vfiprintf_r+0x44>
 800cbf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbf8:	e71e      	b.n	800ca38 <_vfiprintf_r+0x48>
 800cbfa:	ab03      	add	r3, sp, #12
 800cbfc:	9300      	str	r3, [sp, #0]
 800cbfe:	462a      	mov	r2, r5
 800cc00:	4b05      	ldr	r3, [pc, #20]	@ (800cc18 <_vfiprintf_r+0x228>)
 800cc02:	a904      	add	r1, sp, #16
 800cc04:	4630      	mov	r0, r6
 800cc06:	f7fd fe59 	bl	800a8bc <_printf_i>
 800cc0a:	e7e4      	b.n	800cbd6 <_vfiprintf_r+0x1e6>
 800cc0c:	0800d1e8 	.word	0x0800d1e8
 800cc10:	0800d1f2 	.word	0x0800d1f2
 800cc14:	0800a38d 	.word	0x0800a38d
 800cc18:	0800c9cd 	.word	0x0800c9cd
 800cc1c:	0800d1ee 	.word	0x0800d1ee

0800cc20 <__swbuf_r>:
 800cc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc22:	460e      	mov	r6, r1
 800cc24:	4614      	mov	r4, r2
 800cc26:	4605      	mov	r5, r0
 800cc28:	b118      	cbz	r0, 800cc32 <__swbuf_r+0x12>
 800cc2a:	6a03      	ldr	r3, [r0, #32]
 800cc2c:	b90b      	cbnz	r3, 800cc32 <__swbuf_r+0x12>
 800cc2e:	f7fd fff1 	bl	800ac14 <__sinit>
 800cc32:	69a3      	ldr	r3, [r4, #24]
 800cc34:	60a3      	str	r3, [r4, #8]
 800cc36:	89a3      	ldrh	r3, [r4, #12]
 800cc38:	071a      	lsls	r2, r3, #28
 800cc3a:	d501      	bpl.n	800cc40 <__swbuf_r+0x20>
 800cc3c:	6923      	ldr	r3, [r4, #16]
 800cc3e:	b943      	cbnz	r3, 800cc52 <__swbuf_r+0x32>
 800cc40:	4621      	mov	r1, r4
 800cc42:	4628      	mov	r0, r5
 800cc44:	f000 f82a 	bl	800cc9c <__swsetup_r>
 800cc48:	b118      	cbz	r0, 800cc52 <__swbuf_r+0x32>
 800cc4a:	f04f 37ff 	mov.w	r7, #4294967295
 800cc4e:	4638      	mov	r0, r7
 800cc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc52:	6823      	ldr	r3, [r4, #0]
 800cc54:	6922      	ldr	r2, [r4, #16]
 800cc56:	1a98      	subs	r0, r3, r2
 800cc58:	6963      	ldr	r3, [r4, #20]
 800cc5a:	b2f6      	uxtb	r6, r6
 800cc5c:	4283      	cmp	r3, r0
 800cc5e:	4637      	mov	r7, r6
 800cc60:	dc05      	bgt.n	800cc6e <__swbuf_r+0x4e>
 800cc62:	4621      	mov	r1, r4
 800cc64:	4628      	mov	r0, r5
 800cc66:	f7ff fd99 	bl	800c79c <_fflush_r>
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	d1ed      	bne.n	800cc4a <__swbuf_r+0x2a>
 800cc6e:	68a3      	ldr	r3, [r4, #8]
 800cc70:	3b01      	subs	r3, #1
 800cc72:	60a3      	str	r3, [r4, #8]
 800cc74:	6823      	ldr	r3, [r4, #0]
 800cc76:	1c5a      	adds	r2, r3, #1
 800cc78:	6022      	str	r2, [r4, #0]
 800cc7a:	701e      	strb	r6, [r3, #0]
 800cc7c:	6962      	ldr	r2, [r4, #20]
 800cc7e:	1c43      	adds	r3, r0, #1
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d004      	beq.n	800cc8e <__swbuf_r+0x6e>
 800cc84:	89a3      	ldrh	r3, [r4, #12]
 800cc86:	07db      	lsls	r3, r3, #31
 800cc88:	d5e1      	bpl.n	800cc4e <__swbuf_r+0x2e>
 800cc8a:	2e0a      	cmp	r6, #10
 800cc8c:	d1df      	bne.n	800cc4e <__swbuf_r+0x2e>
 800cc8e:	4621      	mov	r1, r4
 800cc90:	4628      	mov	r0, r5
 800cc92:	f7ff fd83 	bl	800c79c <_fflush_r>
 800cc96:	2800      	cmp	r0, #0
 800cc98:	d0d9      	beq.n	800cc4e <__swbuf_r+0x2e>
 800cc9a:	e7d6      	b.n	800cc4a <__swbuf_r+0x2a>

0800cc9c <__swsetup_r>:
 800cc9c:	b538      	push	{r3, r4, r5, lr}
 800cc9e:	4b29      	ldr	r3, [pc, #164]	@ (800cd44 <__swsetup_r+0xa8>)
 800cca0:	4605      	mov	r5, r0
 800cca2:	6818      	ldr	r0, [r3, #0]
 800cca4:	460c      	mov	r4, r1
 800cca6:	b118      	cbz	r0, 800ccb0 <__swsetup_r+0x14>
 800cca8:	6a03      	ldr	r3, [r0, #32]
 800ccaa:	b90b      	cbnz	r3, 800ccb0 <__swsetup_r+0x14>
 800ccac:	f7fd ffb2 	bl	800ac14 <__sinit>
 800ccb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccb4:	0719      	lsls	r1, r3, #28
 800ccb6:	d422      	bmi.n	800ccfe <__swsetup_r+0x62>
 800ccb8:	06da      	lsls	r2, r3, #27
 800ccba:	d407      	bmi.n	800cccc <__swsetup_r+0x30>
 800ccbc:	2209      	movs	r2, #9
 800ccbe:	602a      	str	r2, [r5, #0]
 800ccc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccc4:	81a3      	strh	r3, [r4, #12]
 800ccc6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccca:	e033      	b.n	800cd34 <__swsetup_r+0x98>
 800cccc:	0758      	lsls	r0, r3, #29
 800ccce:	d512      	bpl.n	800ccf6 <__swsetup_r+0x5a>
 800ccd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccd2:	b141      	cbz	r1, 800cce6 <__swsetup_r+0x4a>
 800ccd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccd8:	4299      	cmp	r1, r3
 800ccda:	d002      	beq.n	800cce2 <__swsetup_r+0x46>
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f7fe feff 	bl	800bae0 <_free_r>
 800cce2:	2300      	movs	r3, #0
 800cce4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cce6:	89a3      	ldrh	r3, [r4, #12]
 800cce8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ccec:	81a3      	strh	r3, [r4, #12]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	6063      	str	r3, [r4, #4]
 800ccf2:	6923      	ldr	r3, [r4, #16]
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	89a3      	ldrh	r3, [r4, #12]
 800ccf8:	f043 0308 	orr.w	r3, r3, #8
 800ccfc:	81a3      	strh	r3, [r4, #12]
 800ccfe:	6923      	ldr	r3, [r4, #16]
 800cd00:	b94b      	cbnz	r3, 800cd16 <__swsetup_r+0x7a>
 800cd02:	89a3      	ldrh	r3, [r4, #12]
 800cd04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd0c:	d003      	beq.n	800cd16 <__swsetup_r+0x7a>
 800cd0e:	4621      	mov	r1, r4
 800cd10:	4628      	mov	r0, r5
 800cd12:	f000 f883 	bl	800ce1c <__smakebuf_r>
 800cd16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd1a:	f013 0201 	ands.w	r2, r3, #1
 800cd1e:	d00a      	beq.n	800cd36 <__swsetup_r+0x9a>
 800cd20:	2200      	movs	r2, #0
 800cd22:	60a2      	str	r2, [r4, #8]
 800cd24:	6962      	ldr	r2, [r4, #20]
 800cd26:	4252      	negs	r2, r2
 800cd28:	61a2      	str	r2, [r4, #24]
 800cd2a:	6922      	ldr	r2, [r4, #16]
 800cd2c:	b942      	cbnz	r2, 800cd40 <__swsetup_r+0xa4>
 800cd2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd32:	d1c5      	bne.n	800ccc0 <__swsetup_r+0x24>
 800cd34:	bd38      	pop	{r3, r4, r5, pc}
 800cd36:	0799      	lsls	r1, r3, #30
 800cd38:	bf58      	it	pl
 800cd3a:	6962      	ldrpl	r2, [r4, #20]
 800cd3c:	60a2      	str	r2, [r4, #8]
 800cd3e:	e7f4      	b.n	800cd2a <__swsetup_r+0x8e>
 800cd40:	2000      	movs	r0, #0
 800cd42:	e7f7      	b.n	800cd34 <__swsetup_r+0x98>
 800cd44:	20000018 	.word	0x20000018

0800cd48 <_raise_r>:
 800cd48:	291f      	cmp	r1, #31
 800cd4a:	b538      	push	{r3, r4, r5, lr}
 800cd4c:	4605      	mov	r5, r0
 800cd4e:	460c      	mov	r4, r1
 800cd50:	d904      	bls.n	800cd5c <_raise_r+0x14>
 800cd52:	2316      	movs	r3, #22
 800cd54:	6003      	str	r3, [r0, #0]
 800cd56:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}
 800cd5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cd5e:	b112      	cbz	r2, 800cd66 <_raise_r+0x1e>
 800cd60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd64:	b94b      	cbnz	r3, 800cd7a <_raise_r+0x32>
 800cd66:	4628      	mov	r0, r5
 800cd68:	f000 f830 	bl	800cdcc <_getpid_r>
 800cd6c:	4622      	mov	r2, r4
 800cd6e:	4601      	mov	r1, r0
 800cd70:	4628      	mov	r0, r5
 800cd72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd76:	f000 b817 	b.w	800cda8 <_kill_r>
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d00a      	beq.n	800cd94 <_raise_r+0x4c>
 800cd7e:	1c59      	adds	r1, r3, #1
 800cd80:	d103      	bne.n	800cd8a <_raise_r+0x42>
 800cd82:	2316      	movs	r3, #22
 800cd84:	6003      	str	r3, [r0, #0]
 800cd86:	2001      	movs	r0, #1
 800cd88:	e7e7      	b.n	800cd5a <_raise_r+0x12>
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cd90:	4620      	mov	r0, r4
 800cd92:	4798      	blx	r3
 800cd94:	2000      	movs	r0, #0
 800cd96:	e7e0      	b.n	800cd5a <_raise_r+0x12>

0800cd98 <raise>:
 800cd98:	4b02      	ldr	r3, [pc, #8]	@ (800cda4 <raise+0xc>)
 800cd9a:	4601      	mov	r1, r0
 800cd9c:	6818      	ldr	r0, [r3, #0]
 800cd9e:	f7ff bfd3 	b.w	800cd48 <_raise_r>
 800cda2:	bf00      	nop
 800cda4:	20000018 	.word	0x20000018

0800cda8 <_kill_r>:
 800cda8:	b538      	push	{r3, r4, r5, lr}
 800cdaa:	4d07      	ldr	r5, [pc, #28]	@ (800cdc8 <_kill_r+0x20>)
 800cdac:	2300      	movs	r3, #0
 800cdae:	4604      	mov	r4, r0
 800cdb0:	4608      	mov	r0, r1
 800cdb2:	4611      	mov	r1, r2
 800cdb4:	602b      	str	r3, [r5, #0]
 800cdb6:	f7f5 fe47 	bl	8002a48 <_kill>
 800cdba:	1c43      	adds	r3, r0, #1
 800cdbc:	d102      	bne.n	800cdc4 <_kill_r+0x1c>
 800cdbe:	682b      	ldr	r3, [r5, #0]
 800cdc0:	b103      	cbz	r3, 800cdc4 <_kill_r+0x1c>
 800cdc2:	6023      	str	r3, [r4, #0]
 800cdc4:	bd38      	pop	{r3, r4, r5, pc}
 800cdc6:	bf00      	nop
 800cdc8:	2000096c 	.word	0x2000096c

0800cdcc <_getpid_r>:
 800cdcc:	f7f5 be34 	b.w	8002a38 <_getpid>

0800cdd0 <__swhatbuf_r>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	460c      	mov	r4, r1
 800cdd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdd8:	2900      	cmp	r1, #0
 800cdda:	b096      	sub	sp, #88	@ 0x58
 800cddc:	4615      	mov	r5, r2
 800cdde:	461e      	mov	r6, r3
 800cde0:	da0d      	bge.n	800cdfe <__swhatbuf_r+0x2e>
 800cde2:	89a3      	ldrh	r3, [r4, #12]
 800cde4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cde8:	f04f 0100 	mov.w	r1, #0
 800cdec:	bf14      	ite	ne
 800cdee:	2340      	movne	r3, #64	@ 0x40
 800cdf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	6031      	str	r1, [r6, #0]
 800cdf8:	602b      	str	r3, [r5, #0]
 800cdfa:	b016      	add	sp, #88	@ 0x58
 800cdfc:	bd70      	pop	{r4, r5, r6, pc}
 800cdfe:	466a      	mov	r2, sp
 800ce00:	f000 f848 	bl	800ce94 <_fstat_r>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	dbec      	blt.n	800cde2 <__swhatbuf_r+0x12>
 800ce08:	9901      	ldr	r1, [sp, #4]
 800ce0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce12:	4259      	negs	r1, r3
 800ce14:	4159      	adcs	r1, r3
 800ce16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce1a:	e7eb      	b.n	800cdf4 <__swhatbuf_r+0x24>

0800ce1c <__smakebuf_r>:
 800ce1c:	898b      	ldrh	r3, [r1, #12]
 800ce1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce20:	079d      	lsls	r5, r3, #30
 800ce22:	4606      	mov	r6, r0
 800ce24:	460c      	mov	r4, r1
 800ce26:	d507      	bpl.n	800ce38 <__smakebuf_r+0x1c>
 800ce28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	6123      	str	r3, [r4, #16]
 800ce30:	2301      	movs	r3, #1
 800ce32:	6163      	str	r3, [r4, #20]
 800ce34:	b003      	add	sp, #12
 800ce36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce38:	ab01      	add	r3, sp, #4
 800ce3a:	466a      	mov	r2, sp
 800ce3c:	f7ff ffc8 	bl	800cdd0 <__swhatbuf_r>
 800ce40:	9f00      	ldr	r7, [sp, #0]
 800ce42:	4605      	mov	r5, r0
 800ce44:	4639      	mov	r1, r7
 800ce46:	4630      	mov	r0, r6
 800ce48:	f7fe febe 	bl	800bbc8 <_malloc_r>
 800ce4c:	b948      	cbnz	r0, 800ce62 <__smakebuf_r+0x46>
 800ce4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce52:	059a      	lsls	r2, r3, #22
 800ce54:	d4ee      	bmi.n	800ce34 <__smakebuf_r+0x18>
 800ce56:	f023 0303 	bic.w	r3, r3, #3
 800ce5a:	f043 0302 	orr.w	r3, r3, #2
 800ce5e:	81a3      	strh	r3, [r4, #12]
 800ce60:	e7e2      	b.n	800ce28 <__smakebuf_r+0xc>
 800ce62:	89a3      	ldrh	r3, [r4, #12]
 800ce64:	6020      	str	r0, [r4, #0]
 800ce66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce6a:	81a3      	strh	r3, [r4, #12]
 800ce6c:	9b01      	ldr	r3, [sp, #4]
 800ce6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce72:	b15b      	cbz	r3, 800ce8c <__smakebuf_r+0x70>
 800ce74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f000 f81d 	bl	800ceb8 <_isatty_r>
 800ce7e:	b128      	cbz	r0, 800ce8c <__smakebuf_r+0x70>
 800ce80:	89a3      	ldrh	r3, [r4, #12]
 800ce82:	f023 0303 	bic.w	r3, r3, #3
 800ce86:	f043 0301 	orr.w	r3, r3, #1
 800ce8a:	81a3      	strh	r3, [r4, #12]
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	431d      	orrs	r5, r3
 800ce90:	81a5      	strh	r5, [r4, #12]
 800ce92:	e7cf      	b.n	800ce34 <__smakebuf_r+0x18>

0800ce94 <_fstat_r>:
 800ce94:	b538      	push	{r3, r4, r5, lr}
 800ce96:	4d07      	ldr	r5, [pc, #28]	@ (800ceb4 <_fstat_r+0x20>)
 800ce98:	2300      	movs	r3, #0
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	4608      	mov	r0, r1
 800ce9e:	4611      	mov	r1, r2
 800cea0:	602b      	str	r3, [r5, #0]
 800cea2:	f7f5 fe31 	bl	8002b08 <_fstat>
 800cea6:	1c43      	adds	r3, r0, #1
 800cea8:	d102      	bne.n	800ceb0 <_fstat_r+0x1c>
 800ceaa:	682b      	ldr	r3, [r5, #0]
 800ceac:	b103      	cbz	r3, 800ceb0 <_fstat_r+0x1c>
 800ceae:	6023      	str	r3, [r4, #0]
 800ceb0:	bd38      	pop	{r3, r4, r5, pc}
 800ceb2:	bf00      	nop
 800ceb4:	2000096c 	.word	0x2000096c

0800ceb8 <_isatty_r>:
 800ceb8:	b538      	push	{r3, r4, r5, lr}
 800ceba:	4d06      	ldr	r5, [pc, #24]	@ (800ced4 <_isatty_r+0x1c>)
 800cebc:	2300      	movs	r3, #0
 800cebe:	4604      	mov	r4, r0
 800cec0:	4608      	mov	r0, r1
 800cec2:	602b      	str	r3, [r5, #0]
 800cec4:	f7f5 fe30 	bl	8002b28 <_isatty>
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	d102      	bne.n	800ced2 <_isatty_r+0x1a>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	b103      	cbz	r3, 800ced2 <_isatty_r+0x1a>
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	bd38      	pop	{r3, r4, r5, pc}
 800ced4:	2000096c 	.word	0x2000096c

0800ced8 <_init>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	bf00      	nop
 800cedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cede:	bc08      	pop	{r3}
 800cee0:	469e      	mov	lr, r3
 800cee2:	4770      	bx	lr

0800cee4 <_fini>:
 800cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee6:	bf00      	nop
 800cee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceea:	bc08      	pop	{r3}
 800ceec:	469e      	mov	lr, r3
 800ceee:	4770      	bx	lr
