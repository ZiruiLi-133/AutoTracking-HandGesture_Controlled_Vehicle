
motor_driver_144.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be88  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800c028  0800c028  0000d028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c478  0800c478  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c478  0800c478  0000d478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c480  0800c480  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c480  0800c480  0000d480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c484  0800c484  0000d484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c488  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d4  2**0
                  CONTENTS
 10 .bss          000006f0  200001d4  200001d4  0000e1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008c4  200008c4  0000e1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001402a  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002819  00000000  00000000  0002222e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00024a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d15  00000000  00000000  00025b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f82  00000000  00000000  0002682d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000151d2  00000000  00000000  000497af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5a9e  00000000  00000000  0005e981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013441f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005828  00000000  00000000  00134464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00139c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c010 	.word	0x0800c010

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800c010 	.word	0x0800c010

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <compute_ideal_speed>:
 */

#include "drive_model.h"
#include "chassis_param.h"

void compute_ideal_speed(volatile float v, volatile float w, volatile float *lb_speed, volatile float *rb_speed) {
 8000c58:	b5b0      	push	{r4, r5, r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000c62:	edc7 0a02 	vstr	s1, [r7, #8]
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
	*lb_speed = v - w * CHASSIS_WIDTH / 2.0;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fc73 	bl	8000558 <__aeabi_f2d>
 8000c72:	4604      	mov	r4, r0
 8000c74:	460d      	mov	r5, r1
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fc6d 	bl	8000558 <__aeabi_f2d>
 8000c7e:	a326      	add	r3, pc, #152	@ (adr r3, 8000d18 <compute_ideal_speed+0xc0>)
 8000c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c84:	f7ff fcc0 	bl	8000608 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4610      	mov	r0, r2
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f04f 0200 	mov.w	r2, #0
 8000c94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c98:	f7ff fde0 	bl	800085c <__aeabi_ddiv>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	f7ff faf8 	bl	8000298 <__aeabi_dsub>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f7ff ff82 	bl	8000bb8 <__aeabi_d2f>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
	*rb_speed = v + w * CHASSIS_WIDTH / 2.0;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fc4b 	bl	8000558 <__aeabi_f2d>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fc45 	bl	8000558 <__aeabi_f2d>
 8000cce:	a312      	add	r3, pc, #72	@ (adr r3, 8000d18 <compute_ideal_speed+0xc0>)
 8000cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd4:	f7ff fc98 	bl	8000608 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4610      	mov	r0, r2
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f04f 0200 	mov.w	r2, #0
 8000ce4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ce8:	f7ff fdb8 	bl	800085c <__aeabi_ddiv>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	f7ff fad2 	bl	800029c <__adddf3>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f7ff ff5a 	bl	8000bb8 <__aeabi_d2f>
 8000d04:	4602      	mov	r2, r0
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	601a      	str	r2, [r3, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bdb0      	pop	{r4, r5, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	f3af 8000 	nop.w
 8000d18:	9999999a 	.word	0x9999999a
 8000d1c:	3fc99999 	.word	0x3fc99999

08000d20 <lb_forward>:
 */
#include "h_bridge_control.h"
#include "main.h"


void lb_forward(void){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d2a:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <lb_forward+0x20>)
 8000d2c:	f001 ff2e 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d36:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <lb_forward+0x20>)
 8000d38:	f001 ff28 	bl	8002b8c <HAL_GPIO_WritePin>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	48001400 	.word	0x48001400

08000d44 <lb_backward>:

void lb_backward(void){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <lb_backward+0x20>)
 8000d50:	f001 ff1c 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d5a:	4802      	ldr	r0, [pc, #8]	@ (8000d64 <lb_backward+0x20>)
 8000d5c:	f001 ff16 	bl	8002b8c <HAL_GPIO_WritePin>
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	48001400 	.word	0x48001400

08000d68 <lb_stop>:

void lb_stop(void){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <lb_stop+0x20>)
 8000d74:	f001 ff0a 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d7e:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <lb_stop+0x20>)
 8000d80:	f001 ff04 	bl	8002b8c <HAL_GPIO_WritePin>
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	48001400 	.word	0x48001400

08000d8c <rb_forward>:

void rb_forward(void){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2110      	movs	r1, #16
 8000d94:	4804      	ldr	r0, [pc, #16]	@ (8000da8 <rb_forward+0x1c>)
 8000d96:	f001 fef9 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	4802      	ldr	r0, [pc, #8]	@ (8000da8 <rb_forward+0x1c>)
 8000da0:	f001 fef4 	bl	8002b8c <HAL_GPIO_WritePin>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	48001000 	.word	0x48001000

08000dac <rb_backward>:

void rb_backward(void){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2110      	movs	r1, #16
 8000db4:	4804      	ldr	r0, [pc, #16]	@ (8000dc8 <rb_backward+0x1c>)
 8000db6:	f001 fee9 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2120      	movs	r1, #32
 8000dbe:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <rb_backward+0x1c>)
 8000dc0:	f001 fee4 	bl	8002b8c <HAL_GPIO_WritePin>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	48001000 	.word	0x48001000

08000dcc <rb_stop>:

void rb_stop(void){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	4804      	ldr	r0, [pc, #16]	@ (8000de8 <rb_stop+0x1c>)
 8000dd6:	f001 fed9 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2120      	movs	r1, #32
 8000dde:	4802      	ldr	r0, [pc, #8]	@ (8000de8 <rb_stop+0x1c>)
 8000de0:	f001 fed4 	bl	8002b8c <HAL_GPIO_WritePin>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	48001000 	.word	0x48001000

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df2:	f001 fba5 	bl	8002540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df6:	f000 f887 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfa:	f000 fb73 	bl	80014e4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000dfe:	f000 f8f5 	bl	8000fec <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000e02:	f000 fb19 	bl	8001438 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000e06:	f000 fb47 	bl	8001498 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000e0a:	f000 f915 	bl	8001038 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e0e:	f000 f96d 	bl	80010ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e12:	f000 f9e5 	bl	80011e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e16:	f000 fa39 	bl	800128c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000e1a:	f000 fa8d 	bl	8001338 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000e1e:	f000 fae5 	bl	80013ec <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim16);
 8000e22:	4830      	ldr	r0, [pc, #192]	@ (8000ee4 <main+0xf8>)
 8000e24:	f004 ff84 	bl	8005d30 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000e28:	213c      	movs	r1, #60	@ 0x3c
 8000e2a:	482f      	ldr	r0, [pc, #188]	@ (8000ee8 <main+0xfc>)
 8000e2c:	f005 f9fa 	bl	8006224 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000e30:	213c      	movs	r1, #60	@ 0x3c
 8000e32:	482e      	ldr	r0, [pc, #184]	@ (8000eec <main+0x100>)
 8000e34:	f005 f9f6 	bl	8006224 <HAL_TIM_Encoder_Start>

	//start PWM
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
	set_direction(LB, BREAK);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fd1c 	bl	800187c <set_direction>
	set_direction(RB, BREAK);
 8000e44:	2301      	movs	r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 fd16 	bl	800187c <set_direction>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000e50:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <main+0x104>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2200      	movs	r2, #0
 8000e56:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000e58:	4b25      	ldr	r3, [pc, #148]	@ (8000ef0 <main+0x104>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	641a      	str	r2, [r3, #64]	@ 0x40
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e60:	2108      	movs	r1, #8
 8000e62:	4823      	ldr	r0, [pc, #140]	@ (8000ef0 <main+0x104>)
 8000e64:	f005 f82c 	bl	8005ec0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e68:	210c      	movs	r1, #12
 8000e6a:	4821      	ldr	r0, [pc, #132]	@ (8000ef0 <main+0x104>)
 8000e6c:	f005 f828 	bl	8005ec0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	log_to_uart("Hello\n\r");
 8000e70:	4820      	ldr	r0, [pc, #128]	@ (8000ef4 <main+0x108>)
 8000e72:	f000 ff97 	bl	8001da4 <log_to_uart>
	char str[30];
//	sprintf(str, "%d", HAL_RCC_GetPCLK1Freq());
//	log_to_uart(str);

	lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
 8000e76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <main+0xfc>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef8 <main+0x10c>)
 8000e7e:	6013      	str	r3, [r2, #0]
	rb_count_last = __HAL_TIM_GET_COUNTER(&htim4);
 8000e80:	4b1a      	ldr	r3, [pc, #104]	@ (8000eec <main+0x100>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e86:	4a1d      	ldr	r2, [pc, #116]	@ (8000efc <main+0x110>)
 8000e88:	6013      	str	r3, [r2, #0]

	HAL_Delay(3000);
 8000e8a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e8e:	f001 fbbd 	bl	800260c <HAL_Delay>
//		angle = (float) counter / 1320.0 * 360.0;
//		sprintf(str, "count: %ld, angle: %.2f\r\n", counter, angle);
//		log_to_uart(str);
//		HAL_Delay(100);

		v_desired = 1;
 8000e92:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <main+0x114>)
 8000e94:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000e98:	601a      	str	r2, [r3, #0]
		reset_pid();
 8000e9a:	f000 fd29 	bl	80018f0 <reset_pid>
		HAL_Delay(3000);
 8000e9e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ea2:	f001 fbb3 	bl	800260c <HAL_Delay>
		v_desired = 0.5;
 8000ea6:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <main+0x114>)
 8000ea8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000eac:	601a      	str	r2, [r3, #0]
		reset_pid();
 8000eae:	f000 fd1f 	bl	80018f0 <reset_pid>
		HAL_Delay(3000);
 8000eb2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000eb6:	f001 fba9 	bl	800260c <HAL_Delay>
		v_desired = -1;
 8000eba:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <main+0x114>)
 8000ebc:	4a11      	ldr	r2, [pc, #68]	@ (8000f04 <main+0x118>)
 8000ebe:	601a      	str	r2, [r3, #0]
		reset_pid();
 8000ec0:	f000 fd16 	bl	80018f0 <reset_pid>
		HAL_Delay(3000);
 8000ec4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ec8:	f001 fba0 	bl	800260c <HAL_Delay>
		v_desired = -0.5;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <main+0x114>)
 8000ece:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8000ed2:	601a      	str	r2, [r3, #0]
		reset_pid();
 8000ed4:	f000 fd0c 	bl	80018f0 <reset_pid>
		HAL_Delay(3000);
 8000ed8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000edc:	f001 fb96 	bl	800260c <HAL_Delay>
		v_desired = 1;
 8000ee0:	bf00      	nop
 8000ee2:	e7d6      	b.n	8000e92 <main+0xa6>
 8000ee4:	2000038c 	.word	0x2000038c
 8000ee8:	200002a8 	.word	0x200002a8
 8000eec:	200002f4 	.word	0x200002f4
 8000ef0:	2000025c 	.word	0x2000025c
 8000ef4:	0800c028 	.word	0x0800c028
 8000ef8:	20000740 	.word	0x20000740
 8000efc:	20000744 	.word	0x20000744
 8000f00:	20000768 	.word	0x20000768
 8000f04:	bf800000 	.word	0xbf800000

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0a6      	sub	sp, #152	@ 0x98
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f12:	2228      	movs	r2, #40	@ 0x28
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f008 ffb1 	bl	8009e7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2258      	movs	r2, #88	@ 0x58
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f008 ffa3 	bl	8009e7e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f38:	2309      	movs	r3, #9
 8000f3a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f3c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000f40:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f42:	2301      	movs	r3, #1
 8000f44:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f46:	2301      	movs	r3, #1
 8000f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f5a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f68:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 f8ef 	bl	8004150 <HAL_RCC_OscConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f78:	f000 ff2a 	bl	8001dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f80:	2302      	movs	r3, #2
 8000f82:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f92:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f96:	2102      	movs	r1, #2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f004 f92d 	bl	80051f8 <HAL_RCC_ClockConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000fa4:	f000 ff14 	bl	8001dd0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <SystemClock_Config+0xe0>)
 8000faa:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fb4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 fb31 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000fdc:	f000 fef8 	bl	8001dd0 <Error_Handler>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3798      	adds	r7, #152	@ 0x98
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	00b33004 	.word	0x00b33004

08000fec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <MX_RTC_Init+0x44>)
 8000ff2:	4a10      	ldr	r2, [pc, #64]	@ (8001034 <MX_RTC_Init+0x48>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_RTC_Init+0x44>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_RTC_Init+0x44>)
 8000ffe:	227f      	movs	r2, #127	@ 0x7f
 8001000:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <MX_RTC_Init+0x44>)
 8001004:	22ff      	movs	r2, #255	@ 0xff
 8001006:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_RTC_Init+0x44>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <MX_RTC_Init+0x44>)
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <MX_RTC_Init+0x44>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_RTC_Init+0x44>)
 800101c:	f004 fd2a 	bl	8005a74 <HAL_RTC_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001026:	f000 fed3 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001f0 	.word	0x200001f0
 8001034:	40002800 	.word	0x40002800

08001038 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	@ 0x30
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2224      	movs	r2, #36	@ 0x24
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f008 ff19 	bl	8009e7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104c:	463b      	mov	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001056:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <MX_TIM1_Init+0xac>)
 8001058:	4a23      	ldr	r2, [pc, #140]	@ (80010e8 <MX_TIM1_Init+0xb0>)
 800105a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800105c:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <MX_TIM1_Init+0xac>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001062:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <MX_TIM1_Init+0xac>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001068:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <MX_TIM1_Init+0xac>)
 800106a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800106e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001070:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_TIM1_Init+0xac>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001076:	4b1b      	ldr	r3, [pc, #108]	@ (80010e4 <MX_TIM1_Init+0xac>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <MX_TIM1_Init+0xac>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001082:	2301      	movs	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800108a:	2301      	movs	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800109a:	2301      	movs	r3, #1
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	4619      	mov	r1, r3
 80010ac:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <MX_TIM1_Init+0xac>)
 80010ae:	f005 f813 	bl	80060d8 <HAL_TIM_Encoder_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80010b8:	f000 fe8a 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <MX_TIM1_Init+0xac>)
 80010ce:	f005 ff4b 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80010d8:	f000 fe7a 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3730      	adds	r7, #48	@ 0x30
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000210 	.word	0x20000210
 80010e8:	40012c00 	.word	0x40012c00

080010ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	615a      	str	r2, [r3, #20]
 800110e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001110:	4b32      	ldr	r3, [pc, #200]	@ (80011dc <MX_TIM2_Init+0xf0>)
 8001112:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001116:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = APB1_FREQ / TIM2_FREQ - 1;
 8001118:	4b30      	ldr	r3, [pc, #192]	@ (80011dc <MX_TIM2_Init+0xf0>)
 800111a:	2202      	movs	r2, #2
 800111c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <MX_TIM2_Init+0xf0>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_FREQ / PWM_FREQ - 1;
 8001124:	4b2d      	ldr	r3, [pc, #180]	@ (80011dc <MX_TIM2_Init+0xf0>)
 8001126:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800112a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112c:	4b2b      	ldr	r3, [pc, #172]	@ (80011dc <MX_TIM2_Init+0xf0>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001132:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <MX_TIM2_Init+0xf0>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001138:	4828      	ldr	r0, [pc, #160]	@ (80011dc <MX_TIM2_Init+0xf0>)
 800113a:	f004 fe69 	bl	8005e10 <HAL_TIM_PWM_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001144:	f000 fe44 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4821      	ldr	r0, [pc, #132]	@ (80011dc <MX_TIM2_Init+0xf0>)
 8001158:	f005 ff06 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001162:	f000 fe35 	bl	8001dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001166:	2360      	movs	r3, #96	@ 0x60
 8001168:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	4817      	ldr	r0, [pc, #92]	@ (80011dc <MX_TIM2_Init+0xf0>)
 800117e:	f005 f9e1 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001188:	f000 fe22 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800118c:	463b      	mov	r3, r7
 800118e:	2204      	movs	r2, #4
 8001190:	4619      	mov	r1, r3
 8001192:	4812      	ldr	r0, [pc, #72]	@ (80011dc <MX_TIM2_Init+0xf0>)
 8001194:	f005 f9d6 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800119e:	f000 fe17 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	2208      	movs	r2, #8
 80011a6:	4619      	mov	r1, r3
 80011a8:	480c      	ldr	r0, [pc, #48]	@ (80011dc <MX_TIM2_Init+0xf0>)
 80011aa:	f005 f9cb 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80011b4:	f000 fe0c 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	220c      	movs	r2, #12
 80011bc:	4619      	mov	r1, r3
 80011be:	4807      	ldr	r0, [pc, #28]	@ (80011dc <MX_TIM2_Init+0xf0>)
 80011c0:	f005 f9c0 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80011ca:	f000 fe01 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011ce:	4803      	ldr	r0, [pc, #12]	@ (80011dc <MX_TIM2_Init+0xf0>)
 80011d0:	f000 ffae 	bl	8002130 <HAL_TIM_MspPostInit>

}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	@ 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000025c 	.word	0x2000025c

080011e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	@ 0x30
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2224      	movs	r2, #36	@ 0x24
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f008 fe45 	bl	8009e7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011fe:	4b21      	ldr	r3, [pc, #132]	@ (8001284 <MX_TIM3_Init+0xa4>)
 8001200:	4a21      	ldr	r2, [pc, #132]	@ (8001288 <MX_TIM3_Init+0xa8>)
 8001202:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001204:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <MX_TIM3_Init+0xa4>)
 8001206:	2200      	movs	r2, #0
 8001208:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120a:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <MX_TIM3_Init+0xa4>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001210:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <MX_TIM3_Init+0xa4>)
 8001212:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001216:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_TIM3_Init+0xa4>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <MX_TIM3_Init+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001224:	2303      	movs	r3, #3
 8001226:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800122c:	2301      	movs	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800123c:	2301      	movs	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	4619      	mov	r1, r3
 800124e:	480d      	ldr	r0, [pc, #52]	@ (8001284 <MX_TIM3_Init+0xa4>)
 8001250:	f004 ff42 	bl	80060d8 <HAL_TIM_Encoder_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800125a:	f000 fdb9 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	@ (8001284 <MX_TIM3_Init+0xa4>)
 800126c:	f005 fe7c 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001276:	f000 fdab 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3730      	adds	r7, #48	@ 0x30
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200002a8 	.word	0x200002a8
 8001288:	40000400 	.word	0x40000400

0800128c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	@ 0x30
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	2224      	movs	r2, #36	@ 0x24
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f008 fdef 	bl	8009e7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	463b      	mov	r3, r7
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012aa:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <MX_TIM4_Init+0xa4>)
 80012ac:	4a21      	ldr	r2, [pc, #132]	@ (8001334 <MX_TIM4_Init+0xa8>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <MX_TIM4_Init+0xa4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <MX_TIM4_Init+0xa4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <MX_TIM4_Init+0xa4>)
 80012be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <MX_TIM4_Init+0xa4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <MX_TIM4_Init+0xa4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012d0:	2303      	movs	r3, #3
 80012d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012d8:	2301      	movs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012e8:	2301      	movs	r3, #1
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	@ (8001330 <MX_TIM4_Init+0xa4>)
 80012fc:	f004 feec 	bl	80060d8 <HAL_TIM_Encoder_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001306:	f000 fd63 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	@ (8001330 <MX_TIM4_Init+0xa4>)
 8001318:	f005 fe26 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001322:	f000 fd55 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3730      	adds	r7, #48	@ 0x30
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200002f4 	.word	0x200002f4
 8001334:	40000800 	.word	0x40000800

08001338 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	@ 0x30
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	2224      	movs	r2, #36	@ 0x24
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f008 fd99 	bl	8009e7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001356:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <MX_TIM8_Init+0xac>)
 8001358:	4a23      	ldr	r2, [pc, #140]	@ (80013e8 <MX_TIM8_Init+0xb0>)
 800135a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800135c:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <MX_TIM8_Init+0xac>)
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <MX_TIM8_Init+0xac>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001368:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <MX_TIM8_Init+0xac>)
 800136a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800136e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <MX_TIM8_Init+0xac>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <MX_TIM8_Init+0xac>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137c:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <MX_TIM8_Init+0xac>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001382:	2301      	movs	r3, #1
 8001384:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800138a:	2301      	movs	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800139a:	2301      	movs	r3, #1
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <MX_TIM8_Init+0xac>)
 80013ae:	f004 fe93 	bl	80060d8 <HAL_TIM_Encoder_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80013b8:	f000 fd0a 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_TIM8_Init+0xac>)
 80013ce:	f005 fdcb 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80013d8:	f000 fcfa 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	3730      	adds	r7, #48	@ 0x30
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000340 	.word	0x20000340
 80013e8:	40013400 	.word	0x40013400

080013ec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_TIM16_Init+0x44>)
 80013f2:	4a10      	ldr	r2, [pc, #64]	@ (8001434 <MX_TIM16_Init+0x48>)
 80013f4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = APB2_FREQ / TIM16_FREQ - 1;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_TIM16_Init+0x44>)
 80013f8:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80013fc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_TIM16_Init+0x44>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_FREQ / ENCODER_SAMPLE_FREQ -1;
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <MX_TIM16_Init+0x44>)
 8001406:	22c7      	movs	r2, #199	@ 0xc7
 8001408:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_TIM16_Init+0x44>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_TIM16_Init+0x44>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_TIM16_Init+0x44>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_TIM16_Init+0x44>)
 800141e:	f004 fc2f 	bl	8005c80 <HAL_TIM_Base_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001428:	f000 fcd2 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000038c 	.word	0x2000038c
 8001434:	40014400 	.word	0x40014400

08001438 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <MX_USART3_UART_Init+0x58>)
 800143e:	4a15      	ldr	r2, [pc, #84]	@ (8001494 <MX_USART3_UART_Init+0x5c>)
 8001440:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001442:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <MX_USART3_UART_Init+0x58>)
 8001444:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001448:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <MX_USART3_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <MX_USART3_UART_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <MX_USART3_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <MX_USART3_UART_Init+0x58>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <MX_USART3_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <MX_USART3_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146e:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <MX_USART3_UART_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <MX_USART3_UART_Init+0x58>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <MX_USART3_UART_Init+0x58>)
 800147c:	f005 fe1e 	bl	80070bc <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001486:	f000 fca3 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200003d8 	.word	0x200003d8
 8001494:	40004800 	.word	0x40004800

08001498 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800149c:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <MX_USB_PCD_Init+0x44>)
 800149e:	4a10      	ldr	r2, [pc, #64]	@ (80014e0 <MX_USB_PCD_Init+0x48>)
 80014a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <MX_USB_PCD_Init+0x44>)
 80014a4:	2208      	movs	r2, #8
 80014a6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <MX_USB_PCD_Init+0x44>)
 80014aa:	2202      	movs	r2, #2
 80014ac:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <MX_USB_PCD_Init+0x44>)
 80014b0:	2202      	movs	r2, #2
 80014b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <MX_USB_PCD_Init+0x44>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <MX_USB_PCD_Init+0x44>)
 80014bc:	2200      	movs	r2, #0
 80014be:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <MX_USB_PCD_Init+0x44>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	@ (80014dc <MX_USB_PCD_Init+0x44>)
 80014c8:	f001 fb78 	bl	8002bbc <HAL_PCD_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80014d2:	f000 fc7d 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000460 	.word	0x20000460
 80014e0:	40005c00 	.word	0x40005c00

080014e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	@ 0x30
 80014e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fa:	4b61      	ldr	r3, [pc, #388]	@ (8001680 <MX_GPIO_Init+0x19c>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	4a60      	ldr	r2, [pc, #384]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001500:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001504:	6153      	str	r3, [r2, #20]
 8001506:	4b5e      	ldr	r3, [pc, #376]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800150e:	61bb      	str	r3, [r7, #24]
 8001510:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	4b5b      	ldr	r3, [pc, #364]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	4a5a      	ldr	r2, [pc, #360]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001518:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800151c:	6153      	str	r3, [r2, #20]
 800151e:	4b58      	ldr	r3, [pc, #352]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800152a:	4b55      	ldr	r3, [pc, #340]	@ (8001680 <MX_GPIO_Init+0x19c>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	4a54      	ldr	r2, [pc, #336]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001530:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001534:	6153      	str	r3, [r2, #20]
 8001536:	4b52      	ldr	r3, [pc, #328]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	4b4f      	ldr	r3, [pc, #316]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	4a4e      	ldr	r2, [pc, #312]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800154c:	6153      	str	r3, [r2, #20]
 800154e:	4b4c      	ldr	r3, [pc, #304]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b49      	ldr	r3, [pc, #292]	@ (8001680 <MX_GPIO_Init+0x19c>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	4a48      	ldr	r2, [pc, #288]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001564:	6153      	str	r3, [r2, #20]
 8001566:	4b46      	ldr	r3, [pc, #280]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001572:	4b43      	ldr	r3, [pc, #268]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	4a42      	ldr	r2, [pc, #264]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001578:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800157c:	6153      	str	r3, [r2, #20]
 800157e:	4b40      	ldr	r3, [pc, #256]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	4b3d      	ldr	r3, [pc, #244]	@ (8001680 <MX_GPIO_Init+0x19c>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	4a3c      	ldr	r2, [pc, #240]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001590:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001594:	6153      	str	r3, [r2, #20]
 8001596:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <MX_GPIO_Init+0x19c>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2130      	movs	r1, #48	@ 0x30
 80015a6:	4837      	ldr	r0, [pc, #220]	@ (8001684 <MX_GPIO_Init+0x1a0>)
 80015a8:	f001 faf0 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f244 3101 	movw	r1, #17153	@ 0x4301
 80015b2:	4835      	ldr	r0, [pc, #212]	@ (8001688 <MX_GPIO_Init+0x1a4>)
 80015b4:	f001 faea 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80015be:	4833      	ldr	r0, [pc, #204]	@ (800168c <MX_GPIO_Init+0x1a8>)
 80015c0:	f001 fae4 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2142      	movs	r1, #66	@ 0x42
 80015c8:	4831      	ldr	r0, [pc, #196]	@ (8001690 <MX_GPIO_Init+0x1ac>)
 80015ca:	f001 fadf 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015ce:	2330      	movs	r3, #48	@ 0x30
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	4827      	ldr	r0, [pc, #156]	@ (8001684 <MX_GPIO_Init+0x1a0>)
 80015e6:	f001 f947 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	4824      	ldr	r0, [pc, #144]	@ (8001694 <MX_GPIO_Init+0x1b0>)
 8001602:	f001 f939 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001606:	f244 3301 	movw	r3, #17153	@ 0x4301
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	481a      	ldr	r0, [pc, #104]	@ (8001688 <MX_GPIO_Init+0x1a4>)
 8001620:	f001 f92a 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001624:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4619      	mov	r1, r3
 800163c:	4813      	ldr	r0, [pc, #76]	@ (800168c <MX_GPIO_Init+0x1a8>)
 800163e:	f001 f91b 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 8001642:	2342      	movs	r3, #66	@ 0x42
 8001644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	480d      	ldr	r0, [pc, #52]	@ (8001690 <MX_GPIO_Init+0x1ac>)
 800165a:	f001 f90d 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800165e:	2380      	movs	r3, #128	@ 0x80
 8001660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4807      	ldr	r0, [pc, #28]	@ (8001690 <MX_GPIO_Init+0x1ac>)
 8001672:	f001 f901 	bl	8002878 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001676:	bf00      	nop
 8001678:	3730      	adds	r7, #48	@ 0x30
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	48001000 	.word	0x48001000
 8001688:	48000400 	.word	0x48000400
 800168c:	48001400 	.word	0x48001400
 8001690:	48001800 	.word	0x48001800
 8001694:	48000800 	.word	0x48000800

08001698 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) {
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001724 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d138      	bne.n	800171c <HAL_TIM_PeriodElapsedCallback+0x84>
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		float time_gap = (float) (HAL_GetTick() - last_interrupt_time) / 1000.0;
 80016aa:	f000 ffa3 	bl	80025f4 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	ee07 3a90 	vmov	s15, r3
 80016ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016be:	ee17 0a90 	vmov	r0, s15
 80016c2:	f7fe ff49 	bl	8000558 <__aeabi_f2d>
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b18      	ldr	r3, [pc, #96]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80016cc:	f7ff f8c6 	bl	800085c <__aeabi_ddiv>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f7ff fa6e 	bl	8000bb8 <__aeabi_d2f>
 80016dc:	4603      	mov	r3, r0
 80016de:	617b      	str	r3, [r7, #20]
		if (time_gap < EPSILON) {
 80016e0:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001730 <HAL_TIM_PeriodElapsedCallback+0x98>
 80016e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f0:	d501      	bpl.n	80016f6 <HAL_TIM_PeriodElapsedCallback+0x5e>
			time_gap = EPSILON;
 80016f2:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80016f4:	617b      	str	r3, [r7, #20]
		}

		last_interrupt_time = HAL_GetTick();
 80016f6:	f000 ff7d 	bl	80025f4 <HAL_GetTick>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016fe:	6013      	str	r3, [r2, #0]
		int lb_control = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
		int rb_control = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
		compute_control(time_gap, &lb_control, &rb_control);
 8001708:	f107 020c 	add.w	r2, r7, #12
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	ed97 0a05 	vldr	s0, [r7, #20]
 8001718:	f000 f8fe 	bl	8001918 <compute_control>
//		}
//		if (duty_cycle_lb > TIM2_PRD) {
//			duty_cycle_lb = TIM2_PRD;
//		}
	}
}
 800171c:	bf00      	nop
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40014400 	.word	0x40014400
 8001728:	2000073c 	.word	0x2000073c
 800172c:	408f4000 	.word	0x408f4000
 8001730:	3a83126f 	.word	0x3a83126f
 8001734:	3a83126f 	.word	0x3a83126f

08001738 <pwm_mapping>:

int pwm_mapping(int duty_cycle) {
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
//	if(duty_cycle < PWM_MIN) {
//		return PWM_MIN;
//	}
	return (int) ((float) duty_cycle / (float) TIM2_PRD
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800174a:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800178c <pwm_mapping+0x54>
 800174e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			* (float) (TIM2_PRD - PWM_MIN) + (float) PWM_MIN);
 8001756:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800175a:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800176c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8001790 <pwm_mapping+0x58>
 8001770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001774:	ee77 7a27 	vadd.f32	s15, s14, s15
	return (int) ((float) duty_cycle / (float) TIM2_PRD
 8001778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800177c:	ee17 3a90 	vmov	r3, s15
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	000003e7 	.word	0x000003e7
 8001790:	00000258 	.word	0x00000258

08001794 <motor_control>:

void motor_control(int motor, int control, float v_desired) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_cycle = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
	if (fabs(v_desired) > DEAD_BAND) {
 80017a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017aa:	eef0 7ae7 	vabs.f32	s15, s15
 80017ae:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001868 <motor_control+0xd4>
 80017b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ba:	dd29      	ble.n	8001810 <motor_control+0x7c>
		if (control > 0) {
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	dd1e      	ble.n	8001800 <motor_control+0x6c>
			duty_cycle = control;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	617b      	str	r3, [r7, #20]
			if (v_desired > 0) {
 80017c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d2:	dd0a      	ble.n	80017ea <motor_control+0x56>
				set_direction(motor, FORWARD);
 80017d4:	2301      	movs	r3, #1
 80017d6:	4619      	mov	r1, r3
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 f84f 	bl	800187c <set_direction>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	2101      	movs	r1, #1
 80017e2:	4822      	ldr	r0, [pc, #136]	@ (800186c <motor_control+0xd8>)
 80017e4:	f001 f9d2 	bl	8002b8c <HAL_GPIO_WritePin>
 80017e8:	e017      	b.n	800181a <motor_control+0x86>
			} else {
				set_direction(motor, BACKWARD);
 80017ea:	2302      	movs	r3, #2
 80017ec:	4619      	mov	r1, r3
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 f844 	bl	800187c <set_direction>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2101      	movs	r1, #1
 80017f8:	481c      	ldr	r0, [pc, #112]	@ (800186c <motor_control+0xd8>)
 80017fa:	f001 f9c7 	bl	8002b8c <HAL_GPIO_WritePin>
 80017fe:	e00c      	b.n	800181a <motor_control+0x86>
			}
		} else {
			duty_cycle = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
			set_direction(motor, BREAK);
 8001804:	2303      	movs	r3, #3
 8001806:	4619      	mov	r1, r3
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f000 f837 	bl	800187c <set_direction>
 800180e:	e004      	b.n	800181a <motor_control+0x86>
		}
	} else {
		set_direction(motor, BREAK);
 8001810:	2303      	movs	r3, #3
 8001812:	4619      	mov	r1, r3
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 f831 	bl	800187c <set_direction>
	}

	if (duty_cycle > TIM2_PRD) {
 800181a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	4293      	cmp	r3, r2
 8001822:	dd02      	ble.n	800182a <motor_control+0x96>
		duty_cycle = TIM2_PRD;
 8001824:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001828:	617b      	str	r3, [r7, #20]
	}

	duty_cycle = pwm_mapping(duty_cycle);
 800182a:	6978      	ldr	r0, [r7, #20]
 800182c:	f7ff ff84 	bl	8001738 <pwm_mapping>
 8001830:	6178      	str	r0, [r7, #20]
	if (motor == LB) {
 8001832:	2200      	movs	r2, #0
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4293      	cmp	r3, r2
 8001838:	d107      	bne.n	800184a <motor_control+0xb6>
		duty_cycle_lb = duty_cycle;
 800183a:	4a0d      	ldr	r2, [pc, #52]	@ (8001870 <motor_control+0xdc>)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 8001840:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <motor_control+0xe0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if (motor == RB) {
		duty_cycle_rb = duty_cycle;
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycle);
	}
}
 8001848:	e00a      	b.n	8001860 <motor_control+0xcc>
	else if (motor == RB) {
 800184a:	2201      	movs	r2, #1
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4293      	cmp	r3, r2
 8001850:	d106      	bne.n	8001860 <motor_control+0xcc>
		duty_cycle_rb = duty_cycle;
 8001852:	4a09      	ldr	r2, [pc, #36]	@ (8001878 <motor_control+0xe4>)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycle);
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <motor_control+0xe0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001860:	bf00      	nop
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	3dcccccd 	.word	0x3dcccccd
 800186c:	48000400 	.word	0x48000400
 8001870:	20000734 	.word	0x20000734
 8001874:	2000025c 	.word	0x2000025c
 8001878:	20000738 	.word	0x20000738

0800187c <set_direction>:

void set_direction(int motor, int direction) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	if (motor == LB){
 8001886:	2200      	movs	r2, #0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4293      	cmp	r3, r2
 800188c:	d114      	bne.n	80018b8 <set_direction+0x3c>
		if (direction == FORWARD) {
 800188e:	2201      	movs	r2, #1
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4293      	cmp	r3, r2
 8001894:	d102      	bne.n	800189c <set_direction+0x20>
			lb_forward();
 8001896:	f7ff fa43 	bl	8000d20 <lb_forward>
		}
		else if (direction == BREAK) {
			rb_stop();
		}
	}
}
 800189a:	e025      	b.n	80018e8 <set_direction+0x6c>
		else if (direction == BACKWARD) {
 800189c:	2202      	movs	r2, #2
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d102      	bne.n	80018aa <set_direction+0x2e>
			lb_backward();
 80018a4:	f7ff fa4e 	bl	8000d44 <lb_backward>
}
 80018a8:	e01e      	b.n	80018e8 <set_direction+0x6c>
		else if (direction == BREAK) {
 80018aa:	2203      	movs	r2, #3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d11a      	bne.n	80018e8 <set_direction+0x6c>
			lb_stop();
 80018b2:	f7ff fa59 	bl	8000d68 <lb_stop>
}
 80018b6:	e017      	b.n	80018e8 <set_direction+0x6c>
	else if (motor == RB) {
 80018b8:	2201      	movs	r2, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4293      	cmp	r3, r2
 80018be:	d113      	bne.n	80018e8 <set_direction+0x6c>
		if (direction == FORWARD) {
 80018c0:	2201      	movs	r2, #1
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d102      	bne.n	80018ce <set_direction+0x52>
			rb_forward();
 80018c8:	f7ff fa60 	bl	8000d8c <rb_forward>
}
 80018cc:	e00c      	b.n	80018e8 <set_direction+0x6c>
		else if (direction == BACKWARD) {
 80018ce:	2202      	movs	r2, #2
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d102      	bne.n	80018dc <set_direction+0x60>
			rb_backward();
 80018d6:	f7ff fa69 	bl	8000dac <rb_backward>
}
 80018da:	e005      	b.n	80018e8 <set_direction+0x6c>
		else if (direction == BREAK) {
 80018dc:	2203      	movs	r2, #3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d101      	bne.n	80018e8 <set_direction+0x6c>
			rb_stop();
 80018e4:	f7ff fa72 	bl	8000dcc <rb_stop>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <reset_pid>:

void reset_pid(void) {
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	lb_integral = 0.0;
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <reset_pid+0x20>)
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
	lb_previous_err = 0.0;
 80018fc:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <reset_pid+0x24>)
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000758 	.word	0x20000758
 8001914:	2000075c 	.word	0x2000075c

08001918 <compute_control>:

void compute_control(float time_gap, int *lb_control, int *rb_control) {
 8001918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800191c:	b0d8      	sub	sp, #352	@ 0x160
 800191e:	af10      	add	r7, sp, #64	@ 0x40
 8001920:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
 8001924:	6338      	str	r0, [r7, #48]	@ 0x30
 8001926:	62f9      	str	r1, [r7, #44]	@ 0x2c
	const float Kp = 1000, Ki = 7500, Kd = 0.0;
 8001928:	4bb1      	ldr	r3, [pc, #708]	@ (8001bf0 <compute_control+0x2d8>)
 800192a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800192e:	4bb1      	ldr	r3, [pc, #708]	@ (8001bf4 <compute_control+0x2dc>)
 8001930:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	compute_ideal_speed(v_desired, w_desired, &lb_speed_ideal,
 800193c:	4bae      	ldr	r3, [pc, #696]	@ (8001bf8 <compute_control+0x2e0>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	4bae      	ldr	r3, [pc, #696]	@ (8001bfc <compute_control+0x2e4>)
 8001944:	ed93 7a00 	vldr	s14, [r3]
 8001948:	49ad      	ldr	r1, [pc, #692]	@ (8001c00 <compute_control+0x2e8>)
 800194a:	48ae      	ldr	r0, [pc, #696]	@ (8001c04 <compute_control+0x2ec>)
 800194c:	eef0 0a47 	vmov.f32	s1, s14
 8001950:	eeb0 0a67 	vmov.f32	s0, s15
 8001954:	f7ff f980 	bl	8000c58 <compute_ideal_speed>
			&rb_speed_ideal);
	lb_speed_real = compute_real_speed(time_gap, LB);
 8001958:	2300      	movs	r3, #0
 800195a:	4618      	mov	r0, r3
 800195c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001960:	f000 f962 	bl	8001c28 <compute_real_speed>
 8001964:	eef0 7a40 	vmov.f32	s15, s0
 8001968:	4ba7      	ldr	r3, [pc, #668]	@ (8001c08 <compute_control+0x2f0>)
 800196a:	edc3 7a00 	vstr	s15, [r3]

	float lb_error = fabs(lb_speed_ideal) - fabs(lb_speed_real);
 800196e:	4ba5      	ldr	r3, [pc, #660]	@ (8001c04 <compute_control+0x2ec>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	eef0 7ae7 	vabs.f32	s15, s15
 8001978:	ee17 0a90 	vmov	r0, s15
 800197c:	f7fe fdec 	bl	8000558 <__aeabi_f2d>
 8001980:	4604      	mov	r4, r0
 8001982:	460d      	mov	r5, r1
 8001984:	4ba0      	ldr	r3, [pc, #640]	@ (8001c08 <compute_control+0x2f0>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	eef0 7ae7 	vabs.f32	s15, s15
 800198e:	ee17 0a90 	vmov	r0, s15
 8001992:	f7fe fde1 	bl	8000558 <__aeabi_f2d>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4620      	mov	r0, r4
 800199c:	4629      	mov	r1, r5
 800199e:	f7fe fc7b 	bl	8000298 <__aeabi_dsub>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff f905 	bl	8000bb8 <__aeabi_d2f>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	lb_integral += lb_error * time_gap;
 80019b4:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 80019b8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c0:	4b92      	ldr	r3, [pc, #584]	@ (8001c0c <compute_control+0x2f4>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ca:	4b90      	ldr	r3, [pc, #576]	@ (8001c0c <compute_control+0x2f4>)
 80019cc:	edc3 7a00 	vstr	s15, [r3]
	float lb_derivative = (lb_error - lb_previous_err) / time_gap;
 80019d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001c10 <compute_control+0x2f8>)
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 80019da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019de:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80019e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e6:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
	lb_previous_err = lb_error;
 80019ea:	4a89      	ldr	r2, [pc, #548]	@ (8001c10 <compute_control+0x2f8>)
 80019ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019f0:	6013      	str	r3, [r2, #0]
	*lb_control = (int) (Kp * lb_error + Ki * lb_integral
 80019f2:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 80019f6:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 80019fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fe:	4b83      	ldr	r3, [pc, #524]	@ (8001c0c <compute_control+0x2f4>)
 8001a00:	edd3 6a00 	vldr	s13, [r3]
 8001a04:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8001a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * lb_derivative);
 8001a10:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 8001a14:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8001a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
	*lb_control = (int) (Kp * lb_error + Ki * lb_integral
 8001a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a24:	ee17 2a90 	vmov	r2, s15
 8001a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a2a:	601a      	str	r2, [r3, #0]

	rb_speed_real = compute_real_speed(time_gap, RB);
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	4618      	mov	r0, r3
 8001a30:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001a34:	f000 f8f8 	bl	8001c28 <compute_real_speed>
 8001a38:	eef0 7a40 	vmov.f32	s15, s0
 8001a3c:	4b75      	ldr	r3, [pc, #468]	@ (8001c14 <compute_control+0x2fc>)
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
	float rb_error = fabs(rb_speed_ideal) - fabs(rb_speed_real);
 8001a42:	4b6f      	ldr	r3, [pc, #444]	@ (8001c00 <compute_control+0x2e8>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	eef0 7ae7 	vabs.f32	s15, s15
 8001a4c:	ee17 0a90 	vmov	r0, s15
 8001a50:	f7fe fd82 	bl	8000558 <__aeabi_f2d>
 8001a54:	4604      	mov	r4, r0
 8001a56:	460d      	mov	r5, r1
 8001a58:	4b6e      	ldr	r3, [pc, #440]	@ (8001c14 <compute_control+0x2fc>)
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	eef0 7ae7 	vabs.f32	s15, s15
 8001a62:	ee17 0a90 	vmov	r0, s15
 8001a66:	f7fe fd77 	bl	8000558 <__aeabi_f2d>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4620      	mov	r0, r4
 8001a70:	4629      	mov	r1, r5
 8001a72:	f7fe fc11 	bl	8000298 <__aeabi_dsub>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f7ff f89b 	bl	8000bb8 <__aeabi_d2f>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	rb_integral += rb_error * time_gap;
 8001a88:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 8001a8c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a94:	4b60      	ldr	r3, [pc, #384]	@ (8001c18 <compute_control+0x300>)
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9e:	4b5e      	ldr	r3, [pc, #376]	@ (8001c18 <compute_control+0x300>)
 8001aa0:	edc3 7a00 	vstr	s15, [r3]
	float rb_derivative = (rb_error - rb_previous_err) / time_gap;
 8001aa4:	4b5d      	ldr	r3, [pc, #372]	@ (8001c1c <compute_control+0x304>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 8001aae:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ab2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aba:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
	rb_previous_err = rb_error;
 8001abe:	4a57      	ldr	r2, [pc, #348]	@ (8001c1c <compute_control+0x304>)
 8001ac0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ac4:	6013      	str	r3, [r2, #0]
	*rb_control = (int) (Kp * rb_error + Ki * rb_integral
 8001ac6:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8001aca:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8001ace:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ad2:	4b51      	ldr	r3, [pc, #324]	@ (8001c18 <compute_control+0x300>)
 8001ad4:	edd3 6a00 	vldr	s13, [r3]
 8001ad8:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8001adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * rb_derivative);
 8001ae4:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 8001ae8:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8001aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af0:	ee77 7a27 	vadd.f32	s15, s14, s15
	*rb_control = (int) (Kp * rb_error + Ki * rb_integral
 8001af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af8:	ee17 2a90 	vmov	r2, s15
 8001afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001afe:	601a      	str	r2, [r3, #0]

	motor_control(LB, *lb_control, lb_speed_ideal);
 8001b00:	2000      	movs	r0, #0
 8001b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a3f      	ldr	r2, [pc, #252]	@ (8001c04 <compute_control+0x2ec>)
 8001b08:	edd2 7a00 	vldr	s15, [r2]
 8001b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7ff fe3f 	bl	8001794 <motor_control>
	motor_control(RB, *rb_control, rb_speed_ideal);
 8001b16:	2001      	movs	r0, #1
 8001b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a38      	ldr	r2, [pc, #224]	@ (8001c00 <compute_control+0x2e8>)
 8001b1e:	edd2 7a00 	vldr	s15, [r2]
 8001b22:	eeb0 0a67 	vmov.f32	s0, s15
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7ff fe34 	bl	8001794 <motor_control>

	char temp_str[200];
	sprintf(temp_str,
 8001b2c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b2e:	f7fe fd13 	bl	8000558 <__aeabi_f2d>
 8001b32:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001b36:	4b30      	ldr	r3, [pc, #192]	@ (8001bf8 <compute_control+0x2e0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd0c 	bl	8000558 <__aeabi_f2d>
 8001b40:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001b44:	4b2d      	ldr	r3, [pc, #180]	@ (8001bfc <compute_control+0x2e4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd05 	bl	8000558 <__aeabi_f2d>
 8001b4e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001b52:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001b56:	f7fe fcff 	bl	8000558 <__aeabi_f2d>
 8001b5a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c0c <compute_control+0x2f4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fcf8 	bl	8000558 <__aeabi_f2d>
 8001b68:	e9c7 0100 	strd	r0, r1, [r7]
 8001b6c:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001b70:	f7fe fcf2 	bl	8000558 <__aeabi_f2d>
 8001b74:	4682      	mov	sl, r0
 8001b76:	468b      	mov	fp, r1
 8001b78:	4b22      	ldr	r3, [pc, #136]	@ (8001c04 <compute_control+0x2ec>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fceb 	bl	8000558 <__aeabi_f2d>
 8001b82:	4680      	mov	r8, r0
 8001b84:	4689      	mov	r9, r1
 8001b86:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <compute_control+0x2f0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fce4 	bl	8000558 <__aeabi_f2d>
 8001b90:	4604      	mov	r4, r0
 8001b92:	460d      	mov	r5, r1
 8001b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <compute_control+0x308>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001ba0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001ba2:	920e      	str	r2, [sp, #56]	@ 0x38
 8001ba4:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8001ba8:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8001bac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001bb0:	ed97 7b00 	vldr	d7, [r7]
 8001bb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001bb8:	ed97 7b02 	vldr	d7, [r7, #8]
 8001bbc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001bc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8001bc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001bc8:	ed97 7b06 	vldr	d7, [r7, #24]
 8001bcc:	ed8d 7b00 	vstr	d7, [sp]
 8001bd0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bd4:	4913      	ldr	r1, [pc, #76]	@ (8001c24 <compute_control+0x30c>)
 8001bd6:	f008 f8ef 	bl	8009db8 <siprintf>
//			"[Δt: %6.2f s] v: %+6.2f | w: %+6.2f | err: %+6.2f | int: %+6.2f | der: %+6.2f | LB Ideal: %+6.2f | LB Real: %+6.2f | LB Control: %04d | LB Duty Cycle: %03d\r\n",
//			time_gap, v_desired, w_desired, rb_error, rb_integral,
//			rb_derivative, rb_speed_ideal, rb_speed_real, *rb_control,
//			duty_cycle_rb);

	log_to_uart(temp_str);
 8001bda:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f8e0 	bl	8001da4 <log_to_uart>
}
 8001be4:	bf00      	nop
 8001be6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001bea:	46bd      	mov	sp, r7
 8001bec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bf0:	447a0000 	.word	0x447a0000
 8001bf4:	45ea6000 	.word	0x45ea6000
 8001bf8:	20000768 	.word	0x20000768
 8001bfc:	2000076c 	.word	0x2000076c
 8001c00:	20000754 	.word	0x20000754
 8001c04:	20000750 	.word	0x20000750
 8001c08:	20000748 	.word	0x20000748
 8001c0c:	20000758 	.word	0x20000758
 8001c10:	2000075c 	.word	0x2000075c
 8001c14:	2000074c 	.word	0x2000074c
 8001c18:	20000760 	.word	0x20000760
 8001c1c:	20000764 	.word	0x20000764
 8001c20:	20000734 	.word	0x20000734
 8001c24:	0800c030 	.word	0x0800c030

08001c28 <compute_real_speed>:
//			lb_angle_current, lb_angle_diff);
//	log_to_uart(temp_str);
	lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
}

float compute_real_speed(float time_gap, int motor) {
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c32:	6038      	str	r0, [r7, #0]
	int16_t count_diff = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	817b      	strh	r3, [r7, #10]
	float speed_real = 0.0;
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
	if (motor == LB) {
 8001c3e:	2200      	movs	r2, #0
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d148      	bne.n	8001cd8 <compute_real_speed+0xb0>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim3) - lb_count_last);
 8001c46:	4b52      	ldr	r3, [pc, #328]	@ (8001d90 <compute_real_speed+0x168>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	4b51      	ldr	r3, [pc, #324]	@ (8001d94 <compute_real_speed+0x16c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	817b      	strh	r3, [r7, #10]
		speed_real = count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 8001c5a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc68 	bl	8000534 <__aeabi_i2d>
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	4b4b      	ldr	r3, [pc, #300]	@ (8001d98 <compute_real_speed+0x170>)
 8001c6a:	f7fe fdf7 	bl	800085c <__aeabi_ddiv>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	f7fe fb0f 	bl	800029c <__adddf3>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	a33e      	add	r3, pc, #248	@ (adr r3, 8001d80 <compute_real_speed+0x158>)
 8001c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8c:	f7fe fcbc 	bl	8000608 <__aeabi_dmul>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	a33b      	add	r3, pc, #236	@ (adr r3, 8001d88 <compute_real_speed+0x160>)
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	f7fe fcb3 	bl	8000608 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4614      	mov	r4, r2
 8001ca8:	461d      	mov	r5, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fc54 	bl	8000558 <__aeabi_f2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe fdd0 	bl	800085c <__aeabi_ddiv>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7fe ff78 	bl	8000bb8 <__aeabi_d2f>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60fb      	str	r3, [r7, #12]
		lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
 8001ccc:	4b30      	ldr	r3, [pc, #192]	@ (8001d90 <compute_real_speed+0x168>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd2:	4a30      	ldr	r2, [pc, #192]	@ (8001d94 <compute_real_speed+0x16c>)
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e04b      	b.n	8001d70 <compute_real_speed+0x148>
	}
	else if (motor == RB) {
 8001cd8:	2201      	movs	r2, #1
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d147      	bne.n	8001d70 <compute_real_speed+0x148>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim4) - rb_count_last);
 8001ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d9c <compute_real_speed+0x174>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8001da0 <compute_real_speed+0x178>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	817b      	strh	r3, [r7, #10]
		speed_real = count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 8001cf4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc1b 	bl	8000534 <__aeabi_i2d>
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <compute_real_speed+0x170>)
 8001d04:	f7fe fdaa 	bl	800085c <__aeabi_ddiv>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	f7fe fac2 	bl	800029c <__adddf3>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	a317      	add	r3, pc, #92	@ (adr r3, 8001d80 <compute_real_speed+0x158>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fc6f 	bl	8000608 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	a315      	add	r3, pc, #84	@ (adr r3, 8001d88 <compute_real_speed+0x160>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f7fe fc66 	bl	8000608 <__aeabi_dmul>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4614      	mov	r4, r2
 8001d42:	461d      	mov	r5, r3
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7fe fc07 	bl	8000558 <__aeabi_f2d>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4620      	mov	r0, r4
 8001d50:	4629      	mov	r1, r5
 8001d52:	f7fe fd83 	bl	800085c <__aeabi_ddiv>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f7fe ff2b 	bl	8000bb8 <__aeabi_d2f>
 8001d62:	4603      	mov	r3, r0
 8001d64:	60fb      	str	r3, [r7, #12]
		rb_count_last = __HAL_TIM_GET_COUNTER(&htim4);
 8001d66:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <compute_real_speed+0x174>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001da0 <compute_real_speed+0x178>)
 8001d6e:	6013      	str	r3, [r2, #0]
	}
	return speed_real;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	ee07 3a90 	vmov	s15, r3
}
 8001d76:	eeb0 0a67 	vmov.f32	s0, s15
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d80:	54442d18 	.word	0x54442d18
 8001d84:	400921fb 	.word	0x400921fb
 8001d88:	25460aa6 	.word	0x25460aa6
 8001d8c:	3f9a0275 	.word	0x3f9a0275
 8001d90:	200002a8 	.word	0x200002a8
 8001d94:	20000740 	.word	0x20000740
 8001d98:	4094a000 	.word	0x4094a000
 8001d9c:	200002f4 	.word	0x200002f4
 8001da0:	20000744 	.word	0x20000744

08001da4 <log_to_uart>:

void log_to_uart(const char *msg) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7fe fa67 	bl	8000280 <strlen>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <log_to_uart+0x28>)
 8001dbe:	f005 f9cb 	bl	8007158 <HAL_UART_Transmit>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200003d8 	.word	0x200003d8

08001dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd4:	b672      	cpsid	i
}
 8001dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <Error_Handler+0x8>

08001ddc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <HAL_MspInit+0x44>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e20 <HAL_MspInit+0x44>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6193      	str	r3, [r2, #24]
 8001dee:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <HAL_MspInit+0x44>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <HAL_MspInit+0x44>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a08      	ldr	r2, [pc, #32]	@ (8001e20 <HAL_MspInit+0x44>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_MspInit+0x44>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000

08001e24 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	@ (8001e68 <HAL_RTC_MspInit+0x44>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d111      	bne.n	8001e5a <HAL_RTC_MspInit+0x36>
 8001e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e3a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e44:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <HAL_RTC_MspInit+0x48>)
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	461a      	mov	r2, r3
 8001e56:	2301      	movs	r3, #1
 8001e58:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40002800 	.word	0x40002800
 8001e6c:	10908100 	.word	0x10908100

08001e70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b092      	sub	sp, #72	@ 0x48
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a7d      	ldr	r2, [pc, #500]	@ (8002084 <HAL_TIM_Encoder_MspInit+0x214>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d14e      	bne.n	8001f30 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e92:	4b7d      	ldr	r3, [pc, #500]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	4a7c      	ldr	r2, [pc, #496]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001e98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e9c:	6193      	str	r3, [r2, #24]
 8001e9e:	4b7a      	ldr	r3, [pc, #488]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ea6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eaa:	4b77      	ldr	r3, [pc, #476]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	4a76      	ldr	r2, [pc, #472]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001eb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001eb4:	6153      	str	r3, [r2, #20]
 8001eb6:	4b74      	ldr	r3, [pc, #464]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	4b71      	ldr	r3, [pc, #452]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	4a70      	ldr	r2, [pc, #448]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ecc:	6153      	str	r3, [r2, #20]
 8001ece:	4b6e      	ldr	r3, [pc, #440]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eda:	2301      	movs	r3, #1
 8001edc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001eea:	2302      	movs	r3, #2
 8001eec:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4865      	ldr	r0, [pc, #404]	@ (800208c <HAL_TIM_Encoder_MspInit+0x21c>)
 8001ef6:	f000 fcbf 	bl	8002878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001efa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001efe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001f0c:	2306      	movs	r3, #6
 8001f0e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f1a:	f000 fcad 	bl	8002878 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	2019      	movs	r0, #25
 8001f24:	f000 fc71 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f28:	2019      	movs	r0, #25
 8001f2a:	f000 fc8a 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f2e:	e0a5      	b.n	800207c <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM3)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a56      	ldr	r2, [pc, #344]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x220>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d128      	bne.n	8001f8c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f3a:	4b53      	ldr	r3, [pc, #332]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a52      	ldr	r2, [pc, #328]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	61d3      	str	r3, [r2, #28]
 8001f46:	4b50      	ldr	r3, [pc, #320]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f52:	4b4d      	ldr	r3, [pc, #308]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	4a4c      	ldr	r2, [pc, #304]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001f58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f5c:	6153      	str	r3, [r2, #20]
 8001f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f66:	623b      	str	r3, [r7, #32]
 8001f68:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f7e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f82:	4619      	mov	r1, r3
 8001f84:	4843      	ldr	r0, [pc, #268]	@ (8002094 <HAL_TIM_Encoder_MspInit+0x224>)
 8001f86:	f000 fc77 	bl	8002878 <HAL_GPIO_Init>
}
 8001f8a:	e077      	b.n	800207c <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM4)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a41      	ldr	r2, [pc, #260]	@ (8002098 <HAL_TIM_Encoder_MspInit+0x228>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d145      	bne.n	8002022 <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f96:	4b3c      	ldr	r3, [pc, #240]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4a3b      	ldr	r2, [pc, #236]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	61d3      	str	r3, [r2, #28]
 8001fa2:	4b39      	ldr	r3, [pc, #228]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fae:	4b36      	ldr	r3, [pc, #216]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	4a35      	ldr	r2, [pc, #212]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001fb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fb8:	6153      	str	r3, [r2, #20]
 8001fba:	4b33      	ldr	r3, [pc, #204]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	4b30      	ldr	r3, [pc, #192]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	4a2f      	ldr	r2, [pc, #188]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd0:	6153      	str	r3, [r2, #20]
 8001fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fe2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4828      	ldr	r0, [pc, #160]	@ (800209c <HAL_TIM_Encoder_MspInit+0x22c>)
 8001ffc:	f000 fc3c 	bl	8002878 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002000:	2340      	movs	r3, #64	@ 0x40
 8002002:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002010:	2302      	movs	r3, #2
 8002012:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002018:	4619      	mov	r1, r3
 800201a:	4821      	ldr	r0, [pc, #132]	@ (80020a0 <HAL_TIM_Encoder_MspInit+0x230>)
 800201c:	f000 fc2c 	bl	8002878 <HAL_GPIO_Init>
}
 8002020:	e02c      	b.n	800207c <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM8)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1f      	ldr	r2, [pc, #124]	@ (80020a4 <HAL_TIM_Encoder_MspInit+0x234>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d127      	bne.n	800207c <HAL_TIM_Encoder_MspInit+0x20c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800202c:	4b16      	ldr	r3, [pc, #88]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a15      	ldr	r2, [pc, #84]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8002032:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002044:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	4a0f      	ldr	r2, [pc, #60]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 800204a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800204e:	6153      	str	r3, [r2, #20]
 8002050:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x218>)
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800205c:	23c0      	movs	r3, #192	@ 0xc0
 800205e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800206c:	2304      	movs	r3, #4
 800206e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002070:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002074:	4619      	mov	r1, r3
 8002076:	4805      	ldr	r0, [pc, #20]	@ (800208c <HAL_TIM_Encoder_MspInit+0x21c>)
 8002078:	f000 fbfe 	bl	8002878 <HAL_GPIO_Init>
}
 800207c:	bf00      	nop
 800207e:	3748      	adds	r7, #72	@ 0x48
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40012c00 	.word	0x40012c00
 8002088:	40021000 	.word	0x40021000
 800208c:	48000800 	.word	0x48000800
 8002090:	40000400 	.word	0x40000400
 8002094:	48001000 	.word	0x48001000
 8002098:	40000800 	.word	0x40000800
 800209c:	48000c00 	.word	0x48000c00
 80020a0:	48000400 	.word	0x48000400
 80020a4:	40013400 	.word	0x40013400

080020a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020b8:	d10b      	bne.n	80020d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ba:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x38>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a08      	ldr	r2, [pc, #32]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x38>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	61d3      	str	r3, [r2, #28]
 80020c6:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x38>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002128 <HAL_TIM_Base_MspInit+0x44>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d113      	bne.n	800211e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80020f6:	4b0d      	ldr	r3, [pc, #52]	@ (800212c <HAL_TIM_Base_MspInit+0x48>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	4a0c      	ldr	r2, [pc, #48]	@ (800212c <HAL_TIM_Base_MspInit+0x48>)
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002100:	6193      	str	r3, [r2, #24]
 8002102:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <HAL_TIM_Base_MspInit+0x48>)
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	2019      	movs	r0, #25
 8002114:	f000 fb79 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002118:	2019      	movs	r0, #25
 800211a:	f000 fb92 	bl	8002842 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40014400 	.word	0x40014400
 800212c:	40021000 	.word	0x40021000

08002130 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	@ 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002150:	d139      	bne.n	80021c6 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <HAL_TIM_MspPostInit+0xa0>)
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4a1e      	ldr	r2, [pc, #120]	@ (80021d0 <HAL_TIM_MspPostInit+0xa0>)
 8002158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800215c:	6153      	str	r3, [r2, #20]
 800215e:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <HAL_TIM_MspPostInit+0xa0>)
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_TIM_MspPostInit+0xa0>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	4a18      	ldr	r2, [pc, #96]	@ (80021d0 <HAL_TIM_MspPostInit+0xa0>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002174:	6153      	str	r3, [r2, #20]
 8002176:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <HAL_TIM_MspPostInit+0xa0>)
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002182:	2303      	movs	r3, #3
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002192:	2301      	movs	r3, #1
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a0:	f000 fb6a 	bl	8002878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021a4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021b6:	2301      	movs	r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	4804      	ldr	r0, [pc, #16]	@ (80021d4 <HAL_TIM_MspPostInit+0xa4>)
 80021c2:	f000 fb59 	bl	8002878 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021c6:	bf00      	nop
 80021c8:	3728      	adds	r7, #40	@ 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	48000400 	.word	0x48000400

080021d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	@ 0x28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a17      	ldr	r2, [pc, #92]	@ (8002254 <HAL_UART_MspInit+0x7c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d128      	bne.n	800224c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021fa:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <HAL_UART_MspInit+0x80>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4a16      	ldr	r2, [pc, #88]	@ (8002258 <HAL_UART_MspInit+0x80>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002204:	61d3      	str	r3, [r2, #28]
 8002206:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <HAL_UART_MspInit+0x80>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <HAL_UART_MspInit+0x80>)
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4a10      	ldr	r2, [pc, #64]	@ (8002258 <HAL_UART_MspInit+0x80>)
 8002218:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800221c:	6153      	str	r3, [r2, #20]
 800221e:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <HAL_UART_MspInit+0x80>)
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800222a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800222e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800223c:	2307      	movs	r3, #7
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4619      	mov	r1, r3
 8002246:	4805      	ldr	r0, [pc, #20]	@ (800225c <HAL_UART_MspInit+0x84>)
 8002248:	f000 fb16 	bl	8002878 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800224c:	bf00      	nop
 800224e:	3728      	adds	r7, #40	@ 0x28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40004800 	.word	0x40004800
 8002258:	40021000 	.word	0x40021000
 800225c:	48000c00 	.word	0x48000c00

08002260 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0d      	ldr	r2, [pc, #52]	@ (80022a4 <HAL_PCD_MspInit+0x44>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d113      	bne.n	800229a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002272:	4b0d      	ldr	r3, [pc, #52]	@ (80022a8 <HAL_PCD_MspInit+0x48>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a0c      	ldr	r2, [pc, #48]	@ (80022a8 <HAL_PCD_MspInit+0x48>)
 8002278:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800227c:	61d3      	str	r3, [r2, #28]
 800227e:	4b0a      	ldr	r3, [pc, #40]	@ (80022a8 <HAL_PCD_MspInit+0x48>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	2014      	movs	r0, #20
 8002290:	f000 fabb 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8002294:	2014      	movs	r0, #20
 8002296:	f000 fad4 	bl	8002842 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_MspInit 1 */

  }

}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40005c00 	.word	0x40005c00
 80022a8:	40021000 	.word	0x40021000

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <NMI_Handler+0x4>

080022b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <HardFault_Handler+0x4>

080022bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <MemManage_Handler+0x4>

080022c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <BusFault_Handler+0x4>

080022cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <UsageFault_Handler+0x4>

080022d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002302:	f000 f963 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002310:	4802      	ldr	r0, [pc, #8]	@ (800231c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002312:	f000 fd1a 	bl	8002d4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000460 	.word	0x20000460

08002320 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002324:	4803      	ldr	r0, [pc, #12]	@ (8002334 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002326:	f004 f80b 	bl	8006340 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800232a:	4803      	ldr	r0, [pc, #12]	@ (8002338 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800232c:	f004 f808 	bl	8006340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000210 	.word	0x20000210
 8002338:	2000038c 	.word	0x2000038c

0800233c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return 1;
 8002340:	2301      	movs	r3, #1
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <_kill>:

int _kill(int pid, int sig)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002356:	f007 fde5 	bl	8009f24 <__errno>
 800235a:	4603      	mov	r3, r0
 800235c:	2216      	movs	r2, #22
 800235e:	601a      	str	r2, [r3, #0]
  return -1;
 8002360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_exit>:

void _exit (int status)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002374:	f04f 31ff 	mov.w	r1, #4294967295
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ffe7 	bl	800234c <_kill>
  while (1) {}    /* Make sure we hang here */
 800237e:	bf00      	nop
 8002380:	e7fd      	b.n	800237e <_exit+0x12>

08002382 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	e00a      	b.n	80023aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002394:	f3af 8000 	nop.w
 8002398:	4601      	mov	r1, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	60ba      	str	r2, [r7, #8]
 80023a0:	b2ca      	uxtb	r2, r1
 80023a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3301      	adds	r3, #1
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	dbf0      	blt.n	8002394 <_read+0x12>
  }

  return len;
 80023b2:	687b      	ldr	r3, [r7, #4]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	e009      	b.n	80023e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	60ba      	str	r2, [r7, #8]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3301      	adds	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	dbf1      	blt.n	80023ce <_write+0x12>
  }
  return len;
 80023ea:	687b      	ldr	r3, [r7, #4]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <_close>:

int _close(int file)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800241c:	605a      	str	r2, [r3, #4]
  return 0;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <_isatty>:

int _isatty(int file)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002434:	2301      	movs	r3, #1
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002442:	b480      	push	{r7}
 8002444:	b085      	sub	sp, #20
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002464:	4a14      	ldr	r2, [pc, #80]	@ (80024b8 <_sbrk+0x5c>)
 8002466:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <_sbrk+0x60>)
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002470:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002478:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <_sbrk+0x64>)
 800247a:	4a12      	ldr	r2, [pc, #72]	@ (80024c4 <_sbrk+0x68>)
 800247c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247e:	4b10      	ldr	r3, [pc, #64]	@ (80024c0 <_sbrk+0x64>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	429a      	cmp	r2, r3
 800248a:	d207      	bcs.n	800249c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800248c:	f007 fd4a 	bl	8009f24 <__errno>
 8002490:	4603      	mov	r3, r0
 8002492:	220c      	movs	r2, #12
 8002494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	e009      	b.n	80024b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800249c:	4b08      	ldr	r3, [pc, #32]	@ (80024c0 <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a2:	4b07      	ldr	r3, [pc, #28]	@ (80024c0 <_sbrk+0x64>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	4a05      	ldr	r2, [pc, #20]	@ (80024c0 <_sbrk+0x64>)
 80024ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ae:	68fb      	ldr	r3, [r7, #12]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20010000 	.word	0x20010000
 80024bc:	00000400 	.word	0x00000400
 80024c0:	20000770 	.word	0x20000770
 80024c4:	200008c8 	.word	0x200008c8

080024c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <SystemInit+0x20>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d2:	4a05      	ldr	r2, [pc, #20]	@ (80024e8 <SystemInit+0x20>)
 80024d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002524 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024f0:	f7ff ffea 	bl	80024c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <LoopForever+0x6>)
  ldr r1, =_edata
 80024f6:	490d      	ldr	r1, [pc, #52]	@ (800252c <LoopForever+0xa>)
  ldr r2, =_sidata
 80024f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002530 <LoopForever+0xe>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024fc:	e002      	b.n	8002504 <LoopCopyDataInit>

080024fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002502:	3304      	adds	r3, #4

08002504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002508:	d3f9      	bcc.n	80024fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250a:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800250c:	4c0a      	ldr	r4, [pc, #40]	@ (8002538 <LoopForever+0x16>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002510:	e001      	b.n	8002516 <LoopFillZerobss>

08002512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002514:	3204      	adds	r2, #4

08002516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002518:	d3fb      	bcc.n	8002512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800251a:	f007 fd09 	bl	8009f30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800251e:	f7fe fc65 	bl	8000dec <main>

08002522 <LoopForever>:

LoopForever:
    b LoopForever
 8002522:	e7fe      	b.n	8002522 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002524:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800252c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002530:	0800c488 	.word	0x0800c488
  ldr r2, =_sbss
 8002534:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002538:	200008c4 	.word	0x200008c4

0800253c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800253c:	e7fe      	b.n	800253c <ADC1_2_IRQHandler>
	...

08002540 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002544:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <HAL_Init+0x28>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a07      	ldr	r2, [pc, #28]	@ (8002568 <HAL_Init+0x28>)
 800254a:	f043 0310 	orr.w	r3, r3, #16
 800254e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002550:	2003      	movs	r0, #3
 8002552:	f000 f94f 	bl	80027f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002556:	2000      	movs	r0, #0
 8002558:	f000 f808 	bl	800256c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800255c:	f7ff fc3e 	bl	8001ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40022000 	.word	0x40022000

0800256c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <HAL_InitTick+0x54>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <HAL_InitTick+0x58>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002582:	fbb3 f3f1 	udiv	r3, r3, r1
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f967 	bl	800285e <HAL_SYSTICK_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e00e      	b.n	80025b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b0f      	cmp	r3, #15
 800259e:	d80a      	bhi.n	80025b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a0:	2200      	movs	r2, #0
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f000 f92f 	bl	800280a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ac:	4a06      	ldr	r2, [pc, #24]	@ (80025c8 <HAL_InitTick+0x5c>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000008 	.word	0x20000008
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d0:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_IncTick+0x20>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_IncTick+0x24>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	4a04      	ldr	r2, [pc, #16]	@ (80025f0 <HAL_IncTick+0x24>)
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000008 	.word	0x20000008
 80025f0:	20000774 	.word	0x20000774

080025f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80025f8:	4b03      	ldr	r3, [pc, #12]	@ (8002608 <HAL_GetTick+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000774 	.word	0x20000774

0800260c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff ffee 	bl	80025f4 <HAL_GetTick>
 8002618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d005      	beq.n	8002632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002626:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <HAL_Delay+0x44>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4413      	add	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002632:	bf00      	nop
 8002634:	f7ff ffde 	bl	80025f4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	429a      	cmp	r2, r3
 8002642:	d8f7      	bhi.n	8002634 <HAL_Delay+0x28>
  {
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000008 	.word	0x20000008

08002654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002686:	4a04      	ldr	r2, [pc, #16]	@ (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	60d3      	str	r3, [r2, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a0:	4b04      	ldr	r3, [pc, #16]	@ (80026b4 <__NVIC_GetPriorityGrouping+0x18>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0307 	and.w	r3, r3, #7
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	db0b      	blt.n	80026e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4907      	ldr	r1, [pc, #28]	@ (80026f0 <__NVIC_EnableIRQ+0x38>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2001      	movs	r0, #1
 80026da:	fa00 f202 	lsl.w	r2, r0, r2
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	db0a      	blt.n	800271e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	490c      	ldr	r1, [pc, #48]	@ (8002740 <__NVIC_SetPriority+0x4c>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	440b      	add	r3, r1
 8002718:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800271c:	e00a      	b.n	8002734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4908      	ldr	r1, [pc, #32]	@ (8002744 <__NVIC_SetPriority+0x50>)
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	3b04      	subs	r3, #4
 800272c:	0112      	lsls	r2, r2, #4
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	440b      	add	r3, r1
 8002732:	761a      	strb	r2, [r3, #24]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000e100 	.word	0xe000e100
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	@ 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f1c3 0307 	rsb	r3, r3, #7
 8002762:	2b04      	cmp	r3, #4
 8002764:	bf28      	it	cs
 8002766:	2304      	movcs	r3, #4
 8002768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3304      	adds	r3, #4
 800276e:	2b06      	cmp	r3, #6
 8002770:	d902      	bls.n	8002778 <NVIC_EncodePriority+0x30>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3b03      	subs	r3, #3
 8002776:	e000      	b.n	800277a <NVIC_EncodePriority+0x32>
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	f04f 32ff 	mov.w	r2, #4294967295
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	401a      	ands	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002790:	f04f 31ff 	mov.w	r1, #4294967295
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	43d9      	mvns	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	4313      	orrs	r3, r2
         );
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3724      	adds	r7, #36	@ 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027c0:	d301      	bcc.n	80027c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00f      	b.n	80027e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c6:	4a0a      	ldr	r2, [pc, #40]	@ (80027f0 <SysTick_Config+0x40>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ce:	210f      	movs	r1, #15
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f7ff ff8e 	bl	80026f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d8:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <SysTick_Config+0x40>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027de:	4b04      	ldr	r3, [pc, #16]	@ (80027f0 <SysTick_Config+0x40>)
 80027e0:	2207      	movs	r2, #7
 80027e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	e000e010 	.word	0xe000e010

080027f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ff29 	bl	8002654 <__NVIC_SetPriorityGrouping>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b086      	sub	sp, #24
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800281c:	f7ff ff3e 	bl	800269c <__NVIC_GetPriorityGrouping>
 8002820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	6978      	ldr	r0, [r7, #20]
 8002828:	f7ff ff8e 	bl	8002748 <NVIC_EncodePriority>
 800282c:	4602      	mov	r2, r0
 800282e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff5d 	bl	80026f4 <__NVIC_SetPriority>
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff31 	bl	80026b8 <__NVIC_EnableIRQ>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ffa2 	bl	80027b0 <SysTick_Config>
 800286c:	4603      	mov	r3, r0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002886:	e160      	b.n	8002b4a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2101      	movs	r1, #1
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	4013      	ands	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8152 	beq.w	8002b44 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d005      	beq.n	80028b8 <HAL_GPIO_Init+0x40>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d130      	bne.n	800291a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	2203      	movs	r2, #3
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028ee:	2201      	movs	r2, #1
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	f003 0201 	and.w	r2, r3, #1
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b03      	cmp	r3, #3
 8002924:	d017      	beq.n	8002956 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	2203      	movs	r2, #3
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d123      	bne.n	80029aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	220f      	movs	r2, #15
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	08da      	lsrs	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3208      	adds	r2, #8
 80029a4:	6939      	ldr	r1, [r7, #16]
 80029a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	2203      	movs	r2, #3
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4013      	ands	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0203 	and.w	r2, r3, #3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80ac 	beq.w	8002b44 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002b68 <HAL_GPIO_Init+0x2f0>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002b68 <HAL_GPIO_Init+0x2f0>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6193      	str	r3, [r2, #24]
 80029f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002b68 <HAL_GPIO_Init+0x2f0>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a04:	4a59      	ldr	r2, [pc, #356]	@ (8002b6c <HAL_GPIO_Init+0x2f4>)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	089b      	lsrs	r3, r3, #2
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	220f      	movs	r2, #15
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a2e:	d025      	beq.n	8002a7c <HAL_GPIO_Init+0x204>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a4f      	ldr	r2, [pc, #316]	@ (8002b70 <HAL_GPIO_Init+0x2f8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d01f      	beq.n	8002a78 <HAL_GPIO_Init+0x200>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a4e      	ldr	r2, [pc, #312]	@ (8002b74 <HAL_GPIO_Init+0x2fc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d019      	beq.n	8002a74 <HAL_GPIO_Init+0x1fc>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a4d      	ldr	r2, [pc, #308]	@ (8002b78 <HAL_GPIO_Init+0x300>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d013      	beq.n	8002a70 <HAL_GPIO_Init+0x1f8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a4c      	ldr	r2, [pc, #304]	@ (8002b7c <HAL_GPIO_Init+0x304>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00d      	beq.n	8002a6c <HAL_GPIO_Init+0x1f4>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a4b      	ldr	r2, [pc, #300]	@ (8002b80 <HAL_GPIO_Init+0x308>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <HAL_GPIO_Init+0x1f0>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b84 <HAL_GPIO_Init+0x30c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d101      	bne.n	8002a64 <HAL_GPIO_Init+0x1ec>
 8002a60:	2306      	movs	r3, #6
 8002a62:	e00c      	b.n	8002a7e <HAL_GPIO_Init+0x206>
 8002a64:	2307      	movs	r3, #7
 8002a66:	e00a      	b.n	8002a7e <HAL_GPIO_Init+0x206>
 8002a68:	2305      	movs	r3, #5
 8002a6a:	e008      	b.n	8002a7e <HAL_GPIO_Init+0x206>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	e006      	b.n	8002a7e <HAL_GPIO_Init+0x206>
 8002a70:	2303      	movs	r3, #3
 8002a72:	e004      	b.n	8002a7e <HAL_GPIO_Init+0x206>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e002      	b.n	8002a7e <HAL_GPIO_Init+0x206>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <HAL_GPIO_Init+0x206>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	f002 0203 	and.w	r2, r2, #3
 8002a84:	0092      	lsls	r2, r2, #2
 8002a86:	4093      	lsls	r3, r2
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a8e:	4937      	ldr	r1, [pc, #220]	@ (8002b6c <HAL_GPIO_Init+0x2f4>)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	3302      	adds	r3, #2
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b88 <HAL_GPIO_Init+0x310>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ac0:	4a31      	ldr	r2, [pc, #196]	@ (8002b88 <HAL_GPIO_Init+0x310>)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac6:	4b30      	ldr	r3, [pc, #192]	@ (8002b88 <HAL_GPIO_Init+0x310>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002aea:	4a27      	ldr	r2, [pc, #156]	@ (8002b88 <HAL_GPIO_Init+0x310>)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002af0:	4b25      	ldr	r3, [pc, #148]	@ (8002b88 <HAL_GPIO_Init+0x310>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b14:	4a1c      	ldr	r2, [pc, #112]	@ (8002b88 <HAL_GPIO_Init+0x310>)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b88 <HAL_GPIO_Init+0x310>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b3e:	4a12      	ldr	r2, [pc, #72]	@ (8002b88 <HAL_GPIO_Init+0x310>)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3301      	adds	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f47f ae97 	bne.w	8002888 <HAL_GPIO_Init+0x10>
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	bf00      	nop
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	48000400 	.word	0x48000400
 8002b74:	48000800 	.word	0x48000800
 8002b78:	48000c00 	.word	0x48000c00
 8002b7c:	48001000 	.word	0x48001000
 8002b80:	48001400 	.word	0x48001400
 8002b84:	48001800 	.word	0x48001800
 8002b88:	40010400 	.word	0x40010400

08002b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b9c:	787b      	ldrb	r3, [r7, #1]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ba8:	e002      	b.n	8002bb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0b9      	b.n	8002d42 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff fb3c 	bl	8002260 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2203      	movs	r2, #3
 8002bec:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f004 ff28 	bl	8007a4a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	e03e      	b.n	8002c7e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3311      	adds	r3, #17
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	3310      	adds	r3, #16
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	440b      	add	r3, r1
 8002c36:	3313      	adds	r3, #19
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	3320      	adds	r3, #32
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3324      	adds	r3, #36	@ 0x24
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	791b      	ldrb	r3, [r3, #4]
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d3bb      	bcc.n	8002c00 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	e044      	b.n	8002d18 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cd0:	7bfa      	ldrb	r2, [r7, #15]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cfc:	7bfa      	ldrb	r2, [r7, #15]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	3301      	adds	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	791b      	ldrb	r3, [r3, #4]
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d3b5      	bcc.n	8002c8e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d2e:	f004 fea7 	bl	8007a80 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f006 fa76 	bl	8009248 <USB_ReadInterrupts>
 8002d5c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f930 	bl	8002fce <PCD_EP_ISR_Handler>

    return;
 8002d6e:	e0bd      	b.n	8002eec <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d013      	beq.n	8002da2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d8c:	b292      	uxth	r2, r2
 8002d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f8d9 	bl	8002f4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d98:	2100      	movs	r1, #0
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f8f3 	bl	8002f86 <HAL_PCD_SetAddress>

    return;
 8002da0:	e0a4      	b.n	8002eec <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00c      	beq.n	8002dc6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002dbe:	b292      	uxth	r2, r2
 8002dc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002dc4:	e092      	b.n	8002eec <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00c      	beq.n	8002dea <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002de2:	b292      	uxth	r2, r2
 8002de4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002de8:	e080      	b.n	8002eec <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d027      	beq.n	8002e44 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0204 	bic.w	r2, r2, #4
 8002e06:	b292      	uxth	r2, r2
 8002e08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0208 	bic.w	r2, r2, #8
 8002e1e:	b292      	uxth	r2, r2
 8002e20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f8a4 	bl	8002f72 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e3c:	b292      	uxth	r2, r2
 8002e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e42:	e053      	b.n	8002eec <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d027      	beq.n	8002e9e <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0208 	orr.w	r2, r2, #8
 8002e60:	b292      	uxth	r2, r2
 8002e62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e78:	b292      	uxth	r2, r2
 8002e7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0204 	orr.w	r2, r2, #4
 8002e90:	b292      	uxth	r2, r2
 8002e92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f861 	bl	8002f5e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e9c:	e026      	b.n	8002eec <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00f      	beq.n	8002ec8 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f838 	bl	8002f36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ec6:	e011      	b.n	8002eec <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00c      	beq.n	8002eec <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ee4:	b292      	uxth	r2, r2
 8002ee6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002eea:	bf00      	nop
  }
}
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	460b      	mov	r3, r1
 8002f14:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_PCD_SetAddress+0x1a>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e012      	b.n	8002fc6 <HAL_PCD_SetAddress+0x40>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f006 f932 	bl	8009220 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b096      	sub	sp, #88	@ 0x58
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002fd6:	e3ad      	b.n	8003734 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fe0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002fe4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8002ff2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 816f 	bne.w	80032da <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002ffc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	d14c      	bne.n	80030a2 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003018:	81fb      	strh	r3, [r7, #14]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	89fb      	ldrh	r3, [r7, #14]
 8003020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003028:	b29b      	uxth	r3, r3
 800302a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3310      	adds	r3, #16
 8003030:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800303a:	b29b      	uxth	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	4413      	add	r3, r2
 800304c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003058:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800305a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	441a      	add	r2, r3
 8003064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003066:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003068:	2100      	movs	r1, #0
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ff4d 	bl	8002f0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	7b1b      	ldrb	r3, [r3, #12]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 835c 	beq.w	8003734 <PCD_EP_ISR_Handler+0x766>
 800307c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f040 8357 	bne.w	8003734 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7b1b      	ldrb	r3, [r3, #12]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003090:	b2da      	uxtb	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	731a      	strb	r2, [r3, #12]
 80030a0:	e348      	b.n	8003734 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030a8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80030b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80030b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d032      	beq.n	8003126 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	4413      	add	r3, r2
 80030da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80030f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80030f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f006 f8f6 	bl	80092ec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29a      	uxth	r2, r3
 8003108:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800310c:	4013      	ands	r3, r2
 800310e:	823b      	strh	r3, [r7, #16]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	8a3a      	ldrh	r2, [r7, #16]
 8003116:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800311a:	b292      	uxth	r2, r2
 800311c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff feff 	bl	8002f22 <HAL_PCD_SetupStageCallback>
 8003124:	e306      	b.n	8003734 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003126:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800312a:	2b00      	cmp	r3, #0
 800312c:	f280 8302 	bge.w	8003734 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b29a      	uxth	r2, r3
 8003138:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800313c:	4013      	ands	r3, r2
 800313e:	83fb      	strh	r3, [r7, #30]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	8bfa      	ldrh	r2, [r7, #30]
 8003146:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800314a:	b292      	uxth	r2, r2
 800314c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003156:	b29b      	uxth	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	4413      	add	r3, r2
 8003168:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003174:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d019      	beq.n	80031b2 <PCD_EP_ISR_Handler+0x1e4>
 800317e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d015      	beq.n	80031b2 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800318c:	6959      	ldr	r1, [r3, #20]
 800318e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003190:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003194:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003196:	b29b      	uxth	r3, r3
 8003198:	f006 f8a8 	bl	80092ec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800319c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	441a      	add	r2, r3
 80031a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80031aa:	2100      	movs	r1, #0
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fea0 	bl	8002ef2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80031bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80031c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f040 82b5 	bne.w	8003734 <PCD_EP_ISR_Handler+0x766>
 80031ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80031ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80031d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031d6:	f000 82ad 	beq.w	8003734 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	4413      	add	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003204:	b29a      	uxth	r2, r3
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	801a      	strh	r2, [r3, #0]
 800320a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10a      	bne.n	8003228 <PCD_EP_ISR_Handler+0x25a>
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800321c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003220:	b29a      	uxth	r2, r3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	e039      	b.n	800329c <PCD_EP_ISR_Handler+0x2ce>
 8003228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b3e      	cmp	r3, #62	@ 0x3e
 800322e:	d818      	bhi.n	8003262 <PCD_EP_ISR_Handler+0x294>
 8003230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	647b      	str	r3, [r7, #68]	@ 0x44
 8003238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <PCD_EP_ISR_Handler+0x27c>
 8003244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003246:	3301      	adds	r3, #1
 8003248:	647b      	str	r3, [r7, #68]	@ 0x44
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	b29a      	uxth	r2, r3
 8003250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003252:	b29b      	uxth	r3, r3
 8003254:	029b      	lsls	r3, r3, #10
 8003256:	b29b      	uxth	r3, r3
 8003258:	4313      	orrs	r3, r2
 800325a:	b29a      	uxth	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	801a      	strh	r2, [r3, #0]
 8003260:	e01c      	b.n	800329c <PCD_EP_ISR_Handler+0x2ce>
 8003262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	647b      	str	r3, [r7, #68]	@ 0x44
 800326a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <PCD_EP_ISR_Handler+0x2ae>
 8003276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003278:	3b01      	subs	r3, #1
 800327a:	647b      	str	r3, [r7, #68]	@ 0x44
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	b29a      	uxth	r2, r3
 8003282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003284:	b29b      	uxth	r3, r3
 8003286:	029b      	lsls	r3, r3, #10
 8003288:	b29b      	uxth	r3, r3
 800328a:	4313      	orrs	r3, r2
 800328c:	b29b      	uxth	r3, r3
 800328e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003296:	b29a      	uxth	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ac:	827b      	strh	r3, [r7, #18]
 80032ae:	8a7b      	ldrh	r3, [r7, #18]
 80032b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80032b4:	827b      	strh	r3, [r7, #18]
 80032b6:	8a7b      	ldrh	r3, [r7, #18]
 80032b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80032bc:	827b      	strh	r3, [r7, #18]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	8a7b      	ldrh	r3, [r7, #18]
 80032c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	8013      	strh	r3, [r2, #0]
 80032d8:	e22c      	b.n	8003734 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032ee:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f280 80f6 	bge.w	80034e4 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b29a      	uxth	r2, r3
 800330a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800330e:	4013      	ands	r3, r2
 8003310:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8003326:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800332a:	b292      	uxth	r2, r2
 800332c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800332e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003346:	7b1b      	ldrb	r3, [r3, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d123      	bne.n	8003394 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003354:	b29b      	uxth	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	4413      	add	r3, r2
 8003366:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003370:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003374:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 808e 	beq.w	800349a <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003384:	6959      	ldr	r1, [r3, #20]
 8003386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003388:	88da      	ldrh	r2, [r3, #6]
 800338a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800338e:	f005 ffad 	bl	80092ec <USB_ReadPMA>
 8003392:	e082      	b.n	800349a <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003396:	78db      	ldrb	r3, [r3, #3]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d10a      	bne.n	80033b2 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800339c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80033a0:	461a      	mov	r2, r3
 80033a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f9d3 	bl	8003750 <HAL_PCD_EP_DB_Receive>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80033b0:	e073      	b.n	800349a <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033cc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	441a      	add	r2, r3
 80033de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80033e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d022      	beq.n	8003456 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003418:	b29b      	uxth	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4413      	add	r3, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	4413      	add	r3, r2
 800342a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003434:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003438:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800343c:	2b00      	cmp	r3, #0
 800343e:	d02c      	beq.n	800349a <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003446:	6959      	ldr	r1, [r3, #20]
 8003448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344a:	891a      	ldrh	r2, [r3, #8]
 800344c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003450:	f005 ff4c 	bl	80092ec <USB_ReadPMA>
 8003454:	e021      	b.n	800349a <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800345e:	b29b      	uxth	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	4413      	add	r3, r2
 8003470:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800347a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800347e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348c:	6959      	ldr	r1, [r3, #20]
 800348e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003490:	895a      	ldrh	r2, [r3, #10]
 8003492:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003496:	f005 ff29 	bl	80092ec <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800349a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034a2:	441a      	add	r2, r3
 80034a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80034a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034b0:	441a      	add	r2, r3
 80034b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80034b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <PCD_EP_ISR_Handler+0x4fc>
 80034be:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80034c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d206      	bcs.n	80034d8 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80034ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	4619      	mov	r1, r3
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff fd0e 	bl	8002ef2 <HAL_PCD_DataOutStageCallback>
 80034d6:	e005      	b.n	80034e4 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034de:	4618      	mov	r0, r3
 80034e0:	f004 faec 	bl	8007abc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80034e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8121 	beq.w	8003734 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80034f2:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	3310      	adds	r3, #16
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4413      	add	r3, r2
 8003504:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800351c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003520:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	441a      	add	r2, r3
 8003532:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800353a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800353e:	b29b      	uxth	r3, r3
 8003540:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003544:	78db      	ldrb	r3, [r3, #3]
 8003546:	2b01      	cmp	r3, #1
 8003548:	f040 80a2 	bne.w	8003690 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800354c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354e:	2200      	movs	r2, #0
 8003550:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003554:	7b1b      	ldrb	r3, [r3, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8093 	beq.w	8003682 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800355c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003564:	2b00      	cmp	r3, #0
 8003566:	d046      	beq.n	80035f6 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356a:	785b      	ldrb	r3, [r3, #1]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d126      	bne.n	80035be <PCD_EP_ISR_Handler+0x5f0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800357e:	b29b      	uxth	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	4413      	add	r3, r2
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
 8003588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	00da      	lsls	r2, r3, #3
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	4413      	add	r3, r2
 8003592:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003596:	623b      	str	r3, [r7, #32]
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b29b      	uxth	r3, r3
 800359e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	801a      	strh	r2, [r3, #0]
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	801a      	strh	r2, [r3, #0]
 80035bc:	e061      	b.n	8003682 <PCD_EP_ISR_Handler+0x6b4>
 80035be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c0:	785b      	ldrb	r3, [r3, #1]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d15d      	bne.n	8003682 <PCD_EP_ISR_Handler+0x6b4>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035da:	4413      	add	r3, r2
 80035dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	00da      	lsls	r2, r3, #3
 80035e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e6:	4413      	add	r3, r2
 80035e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80035ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f0:	2200      	movs	r2, #0
 80035f2:	801a      	strh	r2, [r3, #0]
 80035f4:	e045      	b.n	8003682 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fe:	785b      	ldrb	r3, [r3, #1]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d126      	bne.n	8003652 <PCD_EP_ISR_Handler+0x684>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	637b      	str	r3, [r7, #52]	@ 0x34
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003612:	b29b      	uxth	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003618:	4413      	add	r3, r2
 800361a:	637b      	str	r3, [r7, #52]	@ 0x34
 800361c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	00da      	lsls	r2, r3, #3
 8003622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003624:	4413      	add	r3, r2
 8003626:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800362a:	633b      	str	r3, [r7, #48]	@ 0x30
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b29b      	uxth	r3, r3
 8003632:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003636:	b29a      	uxth	r2, r3
 8003638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363a:	801a      	strh	r2, [r3, #0]
 800363c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800364a:	b29a      	uxth	r2, r3
 800364c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364e:	801a      	strh	r2, [r3, #0]
 8003650:	e017      	b.n	8003682 <PCD_EP_ISR_Handler+0x6b4>
 8003652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003654:	785b      	ldrb	r3, [r3, #1]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d113      	bne.n	8003682 <PCD_EP_ISR_Handler+0x6b4>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003662:	b29b      	uxth	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003668:	4413      	add	r3, r2
 800366a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800366c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	00da      	lsls	r2, r3, #3
 8003672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003674:	4413      	add	r3, r2
 8003676:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800367a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800367c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367e:	2200      	movs	r2, #0
 8003680:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	4619      	mov	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff fc3e 	bl	8002f0a <HAL_PCD_DataInStageCallback>
 800368e:	e051      	b.n	8003734 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003690:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d144      	bne.n	8003726 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	4413      	add	r3, r2
 80036b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80036c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c6:	699a      	ldr	r2, [r3, #24]
 80036c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d907      	bls.n	80036e0 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80036d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80036d8:	1ad2      	subs	r2, r2, r3
 80036da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036dc:	619a      	str	r2, [r3, #24]
 80036de:	e002      	b.n	80036e6 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80036e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e2:	2200      	movs	r2, #0
 80036e4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80036e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff fc08 	bl	8002f0a <HAL_PCD_DataInStageCallback>
 80036fa:	e01b      	b.n	8003734 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80036fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003704:	441a      	add	r2, r3
 8003706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003708:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800370a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003712:	441a      	add	r2, r3
 8003714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003716:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800371e:	4618      	mov	r0, r3
 8003720:	f004 f9cc 	bl	8007abc <USB_EPStartXfer>
 8003724:	e006      	b.n	8003734 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003726:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800372a:	461a      	mov	r2, r3
 800372c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f917 	bl	8003962 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800373c:	b29b      	uxth	r3, r3
 800373e:	b21b      	sxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	f6ff ac49 	blt.w	8002fd8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3758      	adds	r7, #88	@ 0x58
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d07c      	beq.n	8003862 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003770:	b29b      	uxth	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	4413      	add	r3, r2
 8003782:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800378c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	8b7b      	ldrh	r3, [r7, #26]
 8003794:	429a      	cmp	r2, r3
 8003796:	d306      	bcc.n	80037a6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	699a      	ldr	r2, [r3, #24]
 800379c:	8b7b      	ldrh	r3, [r7, #26]
 800379e:	1ad2      	subs	r2, r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	619a      	str	r2, [r3, #24]
 80037a4:	e002      	b.n	80037ac <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2200      	movs	r2, #0
 80037aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d123      	bne.n	80037fc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ce:	833b      	strh	r3, [r7, #24]
 80037d0:	8b3b      	ldrh	r3, [r7, #24]
 80037d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80037d6:	833b      	strh	r3, [r7, #24]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	441a      	add	r2, r3
 80037e6:	8b3b      	ldrh	r3, [r7, #24]
 80037e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01f      	beq.n	8003846 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	b29b      	uxth	r3, r3
 8003818:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800381c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003820:	82fb      	strh	r3, [r7, #22]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	441a      	add	r2, r3
 8003830:	8afb      	ldrh	r3, [r7, #22]
 8003832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800383a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800383e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003842:	b29b      	uxth	r3, r3
 8003844:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003846:	8b7b      	ldrh	r3, [r7, #26]
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8085 	beq.w	8003958 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6959      	ldr	r1, [r3, #20]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	891a      	ldrh	r2, [r3, #8]
 800385a:	8b7b      	ldrh	r3, [r7, #26]
 800385c:	f005 fd46 	bl	80092ec <USB_ReadPMA>
 8003860:	e07a      	b.n	8003958 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800386a:	b29b      	uxth	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	4413      	add	r3, r2
 800387c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003886:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	699a      	ldr	r2, [r3, #24]
 800388c:	8b7b      	ldrh	r3, [r7, #26]
 800388e:	429a      	cmp	r2, r3
 8003890:	d306      	bcc.n	80038a0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	8b7b      	ldrh	r3, [r7, #26]
 8003898:	1ad2      	subs	r2, r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	619a      	str	r2, [r3, #24]
 800389e:	e002      	b.n	80038a6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2200      	movs	r2, #0
 80038a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d123      	bne.n	80038f6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c8:	83fb      	strh	r3, [r7, #30]
 80038ca:	8bfb      	ldrh	r3, [r7, #30]
 80038cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038d0:	83fb      	strh	r3, [r7, #30]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	441a      	add	r2, r3
 80038e0:	8bfb      	ldrh	r3, [r7, #30]
 80038e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11f      	bne.n	8003940 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391a:	83bb      	strh	r3, [r7, #28]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	441a      	add	r2, r3
 800392a:	8bbb      	ldrh	r3, [r7, #28]
 800392c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003930:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003938:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800393c:	b29b      	uxth	r3, r3
 800393e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003940:	8b7b      	ldrh	r3, [r7, #26]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	6959      	ldr	r1, [r3, #20]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	895a      	ldrh	r2, [r3, #10]
 8003952:	8b7b      	ldrh	r3, [r7, #26]
 8003954:	f005 fcca 	bl	80092ec <USB_ReadPMA>
    }
  }

  return count;
 8003958:	8b7b      	ldrh	r3, [r7, #26]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3720      	adds	r7, #32
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b0a4      	sub	sp, #144	@ 0x90
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	4613      	mov	r3, r2
 800396e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 81db 	beq.w	8003d32 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003984:	b29b      	uxth	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	4413      	add	r3, r2
 8003996:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	699a      	ldr	r2, [r3, #24]
 80039a8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d907      	bls.n	80039c0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80039b8:	1ad2      	subs	r2, r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	619a      	str	r2, [r3, #24]
 80039be:	e002      	b.n	80039c6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2200      	movs	r2, #0
 80039c4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 80b9 	bne.w	8003b42 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	785b      	ldrb	r3, [r3, #1]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d126      	bne.n	8003a26 <HAL_PCD_EP_DB_Transmit+0xc4>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ec:	4413      	add	r3, r2
 80039ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	00da      	lsls	r2, r3, #3
 80039f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f8:	4413      	add	r3, r2
 80039fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80039fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0e:	801a      	strh	r2, [r3, #0]
 8003a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a22:	801a      	strh	r2, [r3, #0]
 8003a24:	e01a      	b.n	8003a5c <HAL_PCD_EP_DB_Transmit+0xfa>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	785b      	ldrb	r3, [r3, #1]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d116      	bne.n	8003a5c <HAL_PCD_EP_DB_Transmit+0xfa>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a42:	4413      	add	r3, r2
 8003a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	00da      	lsls	r2, r3, #3
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4e:	4413      	add	r3, r2
 8003a50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a58:	2200      	movs	r2, #0
 8003a5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	785b      	ldrb	r3, [r3, #1]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d126      	bne.n	8003ab8 <HAL_PCD_EP_DB_Transmit+0x156>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	4413      	add	r3, r2
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	00da      	lsls	r2, r3, #3
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	801a      	strh	r2, [r3, #0]
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	801a      	strh	r2, [r3, #0]
 8003ab6:	e017      	b.n	8003ae8 <HAL_PCD_EP_DB_Transmit+0x186>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	785b      	ldrb	r3, [r3, #1]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d113      	bne.n	8003ae8 <HAL_PCD_EP_DB_Transmit+0x186>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	4413      	add	r3, r2
 8003ad0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	00da      	lsls	r2, r3, #3
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	4413      	add	r3, r2
 8003adc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ae0:	623b      	str	r3, [r7, #32]
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	4619      	mov	r1, r3
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f7ff fa0b 	bl	8002f0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 82fa 	beq.w	80040f4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b1a:	82fb      	strh	r3, [r7, #22]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	441a      	add	r2, r3
 8003b2a:	8afb      	ldrh	r3, [r7, #22]
 8003b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	8013      	strh	r3, [r2, #0]
 8003b40:	e2d8      	b.n	80040f4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d021      	beq.n	8003b90 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b66:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	441a      	add	r2, r3
 8003b78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	f040 82ac 	bne.w	80040f4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003ba4:	441a      	add	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003bb2:	441a      	add	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	6a1a      	ldr	r2, [r3, #32]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d30b      	bcc.n	8003bdc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	6a1a      	ldr	r2, [r3, #32]
 8003bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bd4:	1ad2      	subs	r2, r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	621a      	str	r2, [r3, #32]
 8003bda:	e017      	b.n	8003c0c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d108      	bne.n	8003bf6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003be4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003be8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003bf4:	e00a      	b.n	8003c0c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d165      	bne.n	8003ce0 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c28:	4413      	add	r3, r2
 8003c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	00da      	lsls	r2, r3, #3
 8003c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c34:	4413      	add	r3, r2
 8003c36:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4a:	801a      	strh	r2, [r3, #0]
 8003c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <HAL_PCD_EP_DB_Transmit+0x308>
 8003c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c66:	801a      	strh	r2, [r3, #0]
 8003c68:	e057      	b.n	8003d1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c70:	d818      	bhi.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x342>
 8003c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_PCD_EP_DB_Transmit+0x32a>
 8003c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c88:	3301      	adds	r3, #1
 8003c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	029b      	lsls	r3, r3, #10
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca0:	801a      	strh	r2, [r3, #0]
 8003ca2:	e03a      	b.n	8003d1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <HAL_PCD_EP_DB_Transmit+0x35c>
 8003cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	029b      	lsls	r3, r3, #10
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cdc:	801a      	strh	r2, [r3, #0]
 8003cde:	e01c      	b.n	8003d1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d118      	bne.n	8003d1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cfc:	4413      	add	r3, r2
 8003cfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	00da      	lsls	r2, r3, #3
 8003d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d08:	4413      	add	r3, r2
 8003d0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d18:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	6959      	ldr	r1, [r3, #20]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	891a      	ldrh	r2, [r3, #8]
 8003d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f005 fa9c 	bl	8009268 <USB_WritePMA>
 8003d30:	e1e0      	b.n	80040f4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d56:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d307      	bcc.n	8003d76 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003d6e:	1ad2      	subs	r2, r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	619a      	str	r2, [r3, #24]
 8003d74:	e002      	b.n	8003d7c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f040 80c0 	bne.w	8003f06 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	785b      	ldrb	r3, [r3, #1]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d126      	bne.n	8003ddc <HAL_PCD_EP_DB_Transmit+0x47a>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003da2:	4413      	add	r3, r2
 8003da4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	00da      	lsls	r2, r3, #3
 8003dac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dae:	4413      	add	r3, r2
 8003db0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003db4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003db6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dc4:	801a      	strh	r2, [r3, #0]
 8003dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	e01a      	b.n	8003e12 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	785b      	ldrb	r3, [r3, #1]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d116      	bne.n	8003e12 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	461a      	mov	r2, r3
 8003df6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003df8:	4413      	add	r3, r2
 8003dfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	00da      	lsls	r2, r3, #3
 8003e02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e04:	4413      	add	r3, r2
 8003e06:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e0e:	2200      	movs	r2, #0
 8003e10:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	785b      	ldrb	r3, [r3, #1]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d12b      	bne.n	8003e78 <HAL_PCD_EP_DB_Transmit+0x516>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e34:	4413      	add	r3, r2
 8003e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	00da      	lsls	r2, r3, #3
 8003e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e40:	4413      	add	r3, r2
 8003e42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e5c:	801a      	strh	r2, [r3, #0]
 8003e5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e74:	801a      	strh	r2, [r3, #0]
 8003e76:	e017      	b.n	8003ea8 <HAL_PCD_EP_DB_Transmit+0x546>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	785b      	ldrb	r3, [r3, #1]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d113      	bne.n	8003ea8 <HAL_PCD_EP_DB_Transmit+0x546>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e8e:	4413      	add	r3, r2
 8003e90:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	00da      	lsls	r2, r3, #3
 8003e98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ea0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ea2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	4619      	mov	r1, r3
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f7ff f82b 	bl	8002f0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 811a 	bne.w	80040f4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eda:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8003ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ef8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	8013      	strh	r3, [r2, #0]
 8003f04:	e0f6      	b.n	80040f4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d121      	bne.n	8003f54 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f2a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	f040 80ca 	bne.w	80040f4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	695a      	ldr	r2, [r3, #20]
 8003f64:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003f68:	441a      	add	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	69da      	ldr	r2, [r3, #28]
 8003f72:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003f76:	441a      	add	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	6a1a      	ldr	r2, [r3, #32]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d30b      	bcc.n	8003fa0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	6a1a      	ldr	r2, [r3, #32]
 8003f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f98:	1ad2      	subs	r2, r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	621a      	str	r2, [r3, #32]
 8003f9e:	e017      	b.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d108      	bne.n	8003fba <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003fa8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003fac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003fb8:	e00a      	b.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	785b      	ldrb	r3, [r3, #1]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d165      	bne.n	80040aa <HAL_PCD_EP_DB_Transmit+0x748>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ff2:	4413      	add	r3, r2
 8003ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	00da      	lsls	r2, r3, #3
 8003ffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ffe:	4413      	add	r3, r2
 8004000:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004004:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004006:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004010:	b29a      	uxth	r2, r3
 8004012:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004014:	801a      	strh	r2, [r3, #0]
 8004016:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <HAL_PCD_EP_DB_Transmit+0x6d2>
 800401e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29b      	uxth	r3, r3
 8004024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800402c:	b29a      	uxth	r2, r3
 800402e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004030:	801a      	strh	r2, [r3, #0]
 8004032:	e054      	b.n	80040de <HAL_PCD_EP_DB_Transmit+0x77c>
 8004034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004038:	2b3e      	cmp	r3, #62	@ 0x3e
 800403a:	d818      	bhi.n	800406e <HAL_PCD_EP_DB_Transmit+0x70c>
 800403c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004044:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8004050:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004052:	3301      	adds	r3, #1
 8004054:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004056:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b29a      	uxth	r2, r3
 800405c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800405e:	b29b      	uxth	r3, r3
 8004060:	029b      	lsls	r3, r3, #10
 8004062:	b29b      	uxth	r3, r3
 8004064:	4313      	orrs	r3, r2
 8004066:	b29a      	uxth	r2, r3
 8004068:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	e037      	b.n	80040de <HAL_PCD_EP_DB_Transmit+0x77c>
 800406e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <HAL_PCD_EP_DB_Transmit+0x726>
 8004082:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004084:	3b01      	subs	r3, #1
 8004086:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004088:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29a      	uxth	r2, r3
 800408e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004090:	b29b      	uxth	r3, r3
 8004092:	029b      	lsls	r3, r3, #10
 8004094:	b29b      	uxth	r3, r3
 8004096:	4313      	orrs	r3, r2
 8004098:	b29b      	uxth	r3, r3
 800409a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800409e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040a6:	801a      	strh	r2, [r3, #0]
 80040a8:	e019      	b.n	80040de <HAL_PCD_EP_DB_Transmit+0x77c>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	785b      	ldrb	r3, [r3, #1]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d115      	bne.n	80040de <HAL_PCD_EP_DB_Transmit+0x77c>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c0:	4413      	add	r3, r2
 80040c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	00da      	lsls	r2, r3, #3
 80040ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040cc:	4413      	add	r3, r2
 80040ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80040d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040d8:	b29a      	uxth	r2, r3
 80040da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040dc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	6959      	ldr	r1, [r3, #20]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	895a      	ldrh	r2, [r3, #10]
 80040ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	f005 f8ba 	bl	8009268 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800410a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800410e:	82bb      	strh	r3, [r7, #20]
 8004110:	8abb      	ldrh	r3, [r7, #20]
 8004112:	f083 0310 	eor.w	r3, r3, #16
 8004116:	82bb      	strh	r3, [r7, #20]
 8004118:	8abb      	ldrh	r3, [r7, #20]
 800411a:	f083 0320 	eor.w	r3, r3, #32
 800411e:	82bb      	strh	r3, [r7, #20]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	441a      	add	r2, r3
 800412e:	8abb      	ldrh	r3, [r7, #20]
 8004130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800413c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004140:	b29b      	uxth	r3, r3
 8004142:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3790      	adds	r7, #144	@ 0x90
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8004156:	af00      	add	r7, sp, #0
 8004158:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800415c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004160:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004162:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004166:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d102      	bne.n	8004176 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	f001 b83a 	b.w	80051ea <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004176:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800417a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 816f 	beq.w	800446a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800418c:	4bb5      	ldr	r3, [pc, #724]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 030c 	and.w	r3, r3, #12
 8004194:	2b04      	cmp	r3, #4
 8004196:	d00c      	beq.n	80041b2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004198:	4bb2      	ldr	r3, [pc, #712]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d15c      	bne.n	800425e <HAL_RCC_OscConfig+0x10e>
 80041a4:	4baf      	ldr	r3, [pc, #700]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80041ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b0:	d155      	bne.n	800425e <HAL_RCC_OscConfig+0x10e>
 80041b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041b6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 80041c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d102      	bne.n	80041e4 <HAL_RCC_OscConfig+0x94>
 80041de:	4ba1      	ldr	r3, [pc, #644]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	e015      	b.n	8004210 <HAL_RCC_OscConfig+0xc0>
 80041e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041e8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80041f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041fc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004200:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004204:	fa93 f3a3 	rbit	r3, r3
 8004208:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800420c:	4b95      	ldr	r3, [pc, #596]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004214:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8004218:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800421c:	fa92 f2a2 	rbit	r2, r2
 8004220:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8004224:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004228:	fab2 f282 	clz	r2, r2
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	f042 0220 	orr.w	r2, r2, #32
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	f002 021f 	and.w	r2, r2, #31
 8004238:	2101      	movs	r1, #1
 800423a:	fa01 f202 	lsl.w	r2, r1, r2
 800423e:	4013      	ands	r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8111 	beq.w	8004468 <HAL_RCC_OscConfig+0x318>
 8004246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800424a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f040 8108 	bne.w	8004468 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f000 bfc6 	b.w	80051ea <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800425e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004262:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800426e:	d106      	bne.n	800427e <HAL_RCC_OscConfig+0x12e>
 8004270:	4b7c      	ldr	r3, [pc, #496]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a7b      	ldr	r2, [pc, #492]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 8004276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	e036      	b.n	80042ec <HAL_RCC_OscConfig+0x19c>
 800427e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004282:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10c      	bne.n	80042a8 <HAL_RCC_OscConfig+0x158>
 800428e:	4b75      	ldr	r3, [pc, #468]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a74      	ldr	r2, [pc, #464]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 8004294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	4b72      	ldr	r3, [pc, #456]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a71      	ldr	r2, [pc, #452]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 80042a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e021      	b.n	80042ec <HAL_RCC_OscConfig+0x19c>
 80042a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x184>
 80042ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a69      	ldr	r2, [pc, #420]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 80042c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b67      	ldr	r3, [pc, #412]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a66      	ldr	r2, [pc, #408]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 80042cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e00b      	b.n	80042ec <HAL_RCC_OscConfig+0x19c>
 80042d4:	4b63      	ldr	r3, [pc, #396]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a62      	ldr	r2, [pc, #392]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 80042da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	4b60      	ldr	r3, [pc, #384]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a5f      	ldr	r2, [pc, #380]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 80042e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ea:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d059      	beq.n	80043b0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fe f97a 	bl	80025f4 <HAL_GetTick>
 8004300:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004304:	e00a      	b.n	800431c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004306:	f7fe f975 	bl	80025f4 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	@ 0x64
 8004314:	d902      	bls.n	800431c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	f000 bf67 	b.w	80051ea <HAL_RCC_OscConfig+0x109a>
 800431c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004320:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004324:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8004328:	fa93 f3a3 	rbit	r3, r3
 800432c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8004330:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004334:	fab3 f383 	clz	r3, r3
 8004338:	b2db      	uxtb	r3, r3
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d102      	bne.n	800434e <HAL_RCC_OscConfig+0x1fe>
 8004348:	4b46      	ldr	r3, [pc, #280]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	e015      	b.n	800437a <HAL_RCC_OscConfig+0x22a>
 800434e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004352:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800435a:	fa93 f3a3 	rbit	r3, r3
 800435e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8004362:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004366:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800436a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800436e:	fa93 f3a3 	rbit	r3, r3
 8004372:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004376:	4b3b      	ldr	r3, [pc, #236]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800437e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8004382:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8004386:	fa92 f2a2 	rbit	r2, r2
 800438a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800438e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004392:	fab2 f282 	clz	r2, r2
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	f042 0220 	orr.w	r2, r2, #32
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	f002 021f 	and.w	r2, r2, #31
 80043a2:	2101      	movs	r1, #1
 80043a4:	fa01 f202 	lsl.w	r2, r1, r2
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0ab      	beq.n	8004306 <HAL_RCC_OscConfig+0x1b6>
 80043ae:	e05c      	b.n	800446a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b0:	f7fe f920 	bl	80025f4 <HAL_GetTick>
 80043b4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b8:	e00a      	b.n	80043d0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043ba:	f7fe f91b 	bl	80025f4 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	@ 0x64
 80043c8:	d902      	bls.n	80043d0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	f000 bf0d 	b.w	80051ea <HAL_RCC_OscConfig+0x109a>
 80043d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043d4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80043e4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e8:	fab3 f383 	clz	r3, r3
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d102      	bne.n	8004402 <HAL_RCC_OscConfig+0x2b2>
 80043fc:	4b19      	ldr	r3, [pc, #100]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	e015      	b.n	800442e <HAL_RCC_OscConfig+0x2de>
 8004402:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004406:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800440e:	fa93 f3a3 	rbit	r3, r3
 8004412:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004416:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800441a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800441e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800442a:	4b0e      	ldr	r3, [pc, #56]	@ (8004464 <HAL_RCC_OscConfig+0x314>)
 800442c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004432:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8004436:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800443a:	fa92 f2a2 	rbit	r2, r2
 800443e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8004442:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004446:	fab2 f282 	clz	r2, r2
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	f042 0220 	orr.w	r2, r2, #32
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	f002 021f 	and.w	r2, r2, #31
 8004456:	2101      	movs	r1, #1
 8004458:	fa01 f202 	lsl.w	r2, r1, r2
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1ab      	bne.n	80043ba <HAL_RCC_OscConfig+0x26a>
 8004462:	e002      	b.n	800446a <HAL_RCC_OscConfig+0x31a>
 8004464:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800446a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800446e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 817f 	beq.w	800477e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004480:	4ba7      	ldr	r3, [pc, #668]	@ (8004720 <HAL_RCC_OscConfig+0x5d0>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 030c 	and.w	r3, r3, #12
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00c      	beq.n	80044a6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800448c:	4ba4      	ldr	r3, [pc, #656]	@ (8004720 <HAL_RCC_OscConfig+0x5d0>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b08      	cmp	r3, #8
 8004496:	d173      	bne.n	8004580 <HAL_RCC_OscConfig+0x430>
 8004498:	4ba1      	ldr	r3, [pc, #644]	@ (8004720 <HAL_RCC_OscConfig+0x5d0>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80044a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a4:	d16c      	bne.n	8004580 <HAL_RCC_OscConfig+0x430>
 80044a6:	2302      	movs	r3, #2
 80044a8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ac:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80044b0:	fa93 f3a3 	rbit	r3, r3
 80044b4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80044b8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044bc:	fab3 f383 	clz	r3, r3
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d102      	bne.n	80044d6 <HAL_RCC_OscConfig+0x386>
 80044d0:	4b93      	ldr	r3, [pc, #588]	@ (8004720 <HAL_RCC_OscConfig+0x5d0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	e013      	b.n	80044fe <HAL_RCC_OscConfig+0x3ae>
 80044d6:	2302      	movs	r3, #2
 80044d8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80044e0:	fa93 f3a3 	rbit	r3, r3
 80044e4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80044e8:	2302      	movs	r3, #2
 80044ea:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80044ee:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80044f2:	fa93 f3a3 	rbit	r3, r3
 80044f6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80044fa:	4b89      	ldr	r3, [pc, #548]	@ (8004720 <HAL_RCC_OscConfig+0x5d0>)
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	2202      	movs	r2, #2
 8004500:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004504:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8004508:	fa92 f2a2 	rbit	r2, r2
 800450c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8004510:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004514:	fab2 f282 	clz	r2, r2
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	f042 0220 	orr.w	r2, r2, #32
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	f002 021f 	and.w	r2, r2, #31
 8004524:	2101      	movs	r1, #1
 8004526:	fa01 f202 	lsl.w	r2, r1, r2
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCC_OscConfig+0x3f6>
 8004530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004534:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d002      	beq.n	8004546 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f000 be52 	b.w	80051ea <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004546:	4b76      	ldr	r3, [pc, #472]	@ (8004720 <HAL_RCC_OscConfig+0x5d0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800454e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004552:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	21f8      	movs	r1, #248	@ 0xf8
 800455c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004560:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8004564:	fa91 f1a1 	rbit	r1, r1
 8004568:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800456c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004570:	fab1 f181 	clz	r1, r1
 8004574:	b2c9      	uxtb	r1, r1
 8004576:	408b      	lsls	r3, r1
 8004578:	4969      	ldr	r1, [pc, #420]	@ (8004720 <HAL_RCC_OscConfig+0x5d0>)
 800457a:	4313      	orrs	r3, r2
 800457c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800457e:	e0fe      	b.n	800477e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004584:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8088 	beq.w	80046a2 <HAL_RCC_OscConfig+0x552>
 8004592:	2301      	movs	r3, #1
 8004594:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004598:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800459c:	fa93 f3a3 	rbit	r3, r3
 80045a0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80045a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a8:	fab3 f383 	clz	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80045b2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	461a      	mov	r2, r3
 80045ba:	2301      	movs	r3, #1
 80045bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045be:	f7fe f819 	bl	80025f4 <HAL_GetTick>
 80045c2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c6:	e00a      	b.n	80045de <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045c8:	f7fe f814 	bl	80025f4 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d902      	bls.n	80045de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	f000 be06 	b.w	80051ea <HAL_RCC_OscConfig+0x109a>
 80045de:	2302      	movs	r3, #2
 80045e0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80045e8:	fa93 f3a3 	rbit	r3, r3
 80045ec:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80045f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f4:	fab3 f383 	clz	r3, r3
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	d102      	bne.n	800460e <HAL_RCC_OscConfig+0x4be>
 8004608:	4b45      	ldr	r3, [pc, #276]	@ (8004720 <HAL_RCC_OscConfig+0x5d0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	e013      	b.n	8004636 <HAL_RCC_OscConfig+0x4e6>
 800460e:	2302      	movs	r3, #2
 8004610:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004614:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004618:	fa93 f3a3 	rbit	r3, r3
 800461c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004620:	2302      	movs	r3, #2
 8004622:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004626:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800462a:	fa93 f3a3 	rbit	r3, r3
 800462e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004632:	4b3b      	ldr	r3, [pc, #236]	@ (8004720 <HAL_RCC_OscConfig+0x5d0>)
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	2202      	movs	r2, #2
 8004638:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800463c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8004640:	fa92 f2a2 	rbit	r2, r2
 8004644:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8004648:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800464c:	fab2 f282 	clz	r2, r2
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	f042 0220 	orr.w	r2, r2, #32
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	f002 021f 	and.w	r2, r2, #31
 800465c:	2101      	movs	r1, #1
 800465e:	fa01 f202 	lsl.w	r2, r1, r2
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0af      	beq.n	80045c8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004668:	4b2d      	ldr	r3, [pc, #180]	@ (8004720 <HAL_RCC_OscConfig+0x5d0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004670:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004674:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	21f8      	movs	r1, #248	@ 0xf8
 800467e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8004686:	fa91 f1a1 	rbit	r1, r1
 800468a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800468e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004692:	fab1 f181 	clz	r1, r1
 8004696:	b2c9      	uxtb	r1, r1
 8004698:	408b      	lsls	r3, r1
 800469a:	4921      	ldr	r1, [pc, #132]	@ (8004720 <HAL_RCC_OscConfig+0x5d0>)
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]
 80046a0:	e06d      	b.n	800477e <HAL_RCC_OscConfig+0x62e>
 80046a2:	2301      	movs	r3, #1
 80046a4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80046ac:	fa93 f3a3 	rbit	r3, r3
 80046b0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80046b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b8:	fab3 f383 	clz	r3, r3
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80046c2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	461a      	mov	r2, r3
 80046ca:	2300      	movs	r3, #0
 80046cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fd ff91 	bl	80025f4 <HAL_GetTick>
 80046d2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d6:	e00a      	b.n	80046ee <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d8:	f7fd ff8c 	bl	80025f4 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d902      	bls.n	80046ee <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	f000 bd7e 	b.w	80051ea <HAL_RCC_OscConfig+0x109a>
 80046ee:	2302      	movs	r3, #2
 80046f0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80046f8:	fa93 f3a3 	rbit	r3, r3
 80046fc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8004700:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004704:	fab3 f383 	clz	r3, r3
 8004708:	b2db      	uxtb	r3, r3
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d105      	bne.n	8004724 <HAL_RCC_OscConfig+0x5d4>
 8004718:	4b01      	ldr	r3, [pc, #4]	@ (8004720 <HAL_RCC_OscConfig+0x5d0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	e016      	b.n	800474c <HAL_RCC_OscConfig+0x5fc>
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000
 8004724:	2302      	movs	r3, #2
 8004726:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004736:	2302      	movs	r3, #2
 8004738:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800473c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004740:	fa93 f3a3 	rbit	r3, r3
 8004744:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004748:	4bbf      	ldr	r3, [pc, #764]	@ (8004a48 <HAL_RCC_OscConfig+0x8f8>)
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	2202      	movs	r2, #2
 800474e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004752:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004756:	fa92 f2a2 	rbit	r2, r2
 800475a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800475e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004762:	fab2 f282 	clz	r2, r2
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	f042 0220 	orr.w	r2, r2, #32
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	f002 021f 	and.w	r2, r2, #31
 8004772:	2101      	movs	r1, #1
 8004774:	fa01 f202 	lsl.w	r2, r1, r2
 8004778:	4013      	ands	r3, r2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1ac      	bne.n	80046d8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800477e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004782:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 8113 	beq.w	80049ba <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004798:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d07c      	beq.n	800489e <HAL_RCC_OscConfig+0x74e>
 80047a4:	2301      	movs	r3, #1
 80047a6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80047b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ba:	fab3 f383 	clz	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	4ba2      	ldr	r3, [pc, #648]	@ (8004a4c <HAL_RCC_OscConfig+0x8fc>)
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	461a      	mov	r2, r3
 80047ca:	2301      	movs	r3, #1
 80047cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ce:	f7fd ff11 	bl	80025f4 <HAL_GetTick>
 80047d2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d6:	e00a      	b.n	80047ee <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047d8:	f7fd ff0c 	bl	80025f4 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d902      	bls.n	80047ee <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	f000 bcfe 	b.w	80051ea <HAL_RCC_OscConfig+0x109a>
 80047ee:	2302      	movs	r3, #2
 80047f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047f8:	fa93 f2a3 	rbit	r2, r3
 80047fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004800:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800480a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800480e:	2202      	movs	r2, #2
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	fa93 f2a3 	rbit	r2, r3
 8004820:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800482e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004832:	2202      	movs	r2, #2
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800483a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	fa93 f2a3 	rbit	r2, r3
 8004844:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004848:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800484c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484e:	4b7e      	ldr	r3, [pc, #504]	@ (8004a48 <HAL_RCC_OscConfig+0x8f8>)
 8004850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004852:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004856:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800485a:	2102      	movs	r1, #2
 800485c:	6019      	str	r1, [r3, #0]
 800485e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004862:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	fa93 f1a3 	rbit	r1, r3
 800486c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004870:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004874:	6019      	str	r1, [r3, #0]
  return result;
 8004876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800487a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	fab3 f383 	clz	r3, r3
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2101      	movs	r1, #1
 8004892:	fa01 f303 	lsl.w	r3, r1, r3
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d09d      	beq.n	80047d8 <HAL_RCC_OscConfig+0x688>
 800489c:	e08d      	b.n	80049ba <HAL_RCC_OscConfig+0x86a>
 800489e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048a2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80048a6:	2201      	movs	r2, #1
 80048a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	fa93 f2a3 	rbit	r2, r3
 80048b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048bc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80048c0:	601a      	str	r2, [r3, #0]
  return result;
 80048c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80048ca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048cc:	fab3 f383 	clz	r3, r3
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	4b5d      	ldr	r3, [pc, #372]	@ (8004a4c <HAL_RCC_OscConfig+0x8fc>)
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	461a      	mov	r2, r3
 80048dc:	2300      	movs	r3, #0
 80048de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e0:	f7fd fe88 	bl	80025f4 <HAL_GetTick>
 80048e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e8:	e00a      	b.n	8004900 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ea:	f7fd fe83 	bl	80025f4 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d902      	bls.n	8004900 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	f000 bc75 	b.w	80051ea <HAL_RCC_OscConfig+0x109a>
 8004900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004904:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004908:	2202      	movs	r2, #2
 800490a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004910:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	fa93 f2a3 	rbit	r2, r3
 800491a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800491e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004928:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800492c:	2202      	movs	r2, #2
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004934:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	fa93 f2a3 	rbit	r2, r3
 800493e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004942:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800494c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004950:	2202      	movs	r2, #2
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004958:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	fa93 f2a3 	rbit	r2, r3
 8004962:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004966:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800496a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800496c:	4b36      	ldr	r3, [pc, #216]	@ (8004a48 <HAL_RCC_OscConfig+0x8f8>)
 800496e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004970:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004974:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004978:	2102      	movs	r1, #2
 800497a:	6019      	str	r1, [r3, #0]
 800497c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004980:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	fa93 f1a3 	rbit	r1, r3
 800498a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800498e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004992:	6019      	str	r1, [r3, #0]
  return result;
 8004994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004998:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	fab3 f383 	clz	r3, r3
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	2101      	movs	r1, #1
 80049b0:	fa01 f303 	lsl.w	r3, r1, r3
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d197      	bne.n	80048ea <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 81a5 	beq.w	8004d1a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049d0:	2300      	movs	r3, #0
 80049d2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a48 <HAL_RCC_OscConfig+0x8f8>)
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d116      	bne.n	8004a10 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e2:	4b19      	ldr	r3, [pc, #100]	@ (8004a48 <HAL_RCC_OscConfig+0x8f8>)
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4a18      	ldr	r2, [pc, #96]	@ (8004a48 <HAL_RCC_OscConfig+0x8f8>)
 80049e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ec:	61d3      	str	r3, [r2, #28]
 80049ee:	4b16      	ldr	r3, [pc, #88]	@ (8004a48 <HAL_RCC_OscConfig+0x8f8>)
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80049f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a08:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a10:	4b0f      	ldr	r3, [pc, #60]	@ (8004a50 <HAL_RCC_OscConfig+0x900>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d121      	bne.n	8004a60 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a50 <HAL_RCC_OscConfig+0x900>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0b      	ldr	r2, [pc, #44]	@ (8004a50 <HAL_RCC_OscConfig+0x900>)
 8004a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a26:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a28:	f7fd fde4 	bl	80025f4 <HAL_GetTick>
 8004a2c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a30:	e010      	b.n	8004a54 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a32:	f7fd fddf 	bl	80025f4 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	@ 0x64
 8004a40:	d908      	bls.n	8004a54 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e3d1      	b.n	80051ea <HAL_RCC_OscConfig+0x109a>
 8004a46:	bf00      	nop
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	10908120 	.word	0x10908120
 8004a50:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a54:	4b8d      	ldr	r3, [pc, #564]	@ (8004c8c <HAL_RCC_OscConfig+0xb3c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0e8      	beq.n	8004a32 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d106      	bne.n	8004a7e <HAL_RCC_OscConfig+0x92e>
 8004a70:	4b87      	ldr	r3, [pc, #540]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	4a86      	ldr	r2, [pc, #536]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6213      	str	r3, [r2, #32]
 8004a7c:	e035      	b.n	8004aea <HAL_RCC_OscConfig+0x99a>
 8004a7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a82:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x958>
 8004a8e:	4b80      	ldr	r3, [pc, #512]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	4a7f      	ldr	r2, [pc, #508]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004a94:	f023 0301 	bic.w	r3, r3, #1
 8004a98:	6213      	str	r3, [r2, #32]
 8004a9a:	4b7d      	ldr	r3, [pc, #500]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004aa0:	f023 0304 	bic.w	r3, r3, #4
 8004aa4:	6213      	str	r3, [r2, #32]
 8004aa6:	e020      	b.n	8004aea <HAL_RCC_OscConfig+0x99a>
 8004aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004aac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b05      	cmp	r3, #5
 8004ab6:	d10c      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x982>
 8004ab8:	4b75      	ldr	r3, [pc, #468]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	4a74      	ldr	r2, [pc, #464]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004abe:	f043 0304 	orr.w	r3, r3, #4
 8004ac2:	6213      	str	r3, [r2, #32]
 8004ac4:	4b72      	ldr	r3, [pc, #456]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	4a71      	ldr	r2, [pc, #452]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	6213      	str	r3, [r2, #32]
 8004ad0:	e00b      	b.n	8004aea <HAL_RCC_OscConfig+0x99a>
 8004ad2:	4b6f      	ldr	r3, [pc, #444]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	4a6e      	ldr	r2, [pc, #440]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004ad8:	f023 0301 	bic.w	r3, r3, #1
 8004adc:	6213      	str	r3, [r2, #32]
 8004ade:	4b6c      	ldr	r3, [pc, #432]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	4a6b      	ldr	r2, [pc, #428]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004ae4:	f023 0304 	bic.w	r3, r3, #4
 8004ae8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004aee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 8081 	beq.w	8004bfe <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004afc:	f7fd fd7a 	bl	80025f4 <HAL_GetTick>
 8004b00:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b04:	e00b      	b.n	8004b1e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7fd fd75 	bl	80025f4 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e365      	b.n	80051ea <HAL_RCC_OscConfig+0x109a>
 8004b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b22:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004b26:	2202      	movs	r2, #2
 8004b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b2e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	fa93 f2a3 	rbit	r2, r3
 8004b38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b3c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b46:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b52:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	fa93 f2a3 	rbit	r2, r3
 8004b5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b60:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b64:	601a      	str	r2, [r3, #0]
  return result;
 8004b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b6a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b70:	fab3 f383 	clz	r3, r3
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f043 0302 	orr.w	r3, r3, #2
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d102      	bne.n	8004b8a <HAL_RCC_OscConfig+0xa3a>
 8004b84:	4b42      	ldr	r3, [pc, #264]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	e013      	b.n	8004bb2 <HAL_RCC_OscConfig+0xa62>
 8004b8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b8e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004b92:	2202      	movs	r2, #2
 8004b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b9a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	fa93 f2a3 	rbit	r2, r3
 8004ba4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ba8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	4b38      	ldr	r3, [pc, #224]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004bb6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004bba:	2102      	movs	r1, #2
 8004bbc:	6011      	str	r1, [r2, #0]
 8004bbe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004bc2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	fa92 f1a2 	rbit	r1, r2
 8004bcc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004bd0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8004bd4:	6011      	str	r1, [r2, #0]
  return result;
 8004bd6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004bda:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	fab2 f282 	clz	r2, r2
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	f002 021f 	and.w	r2, r2, #31
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d084      	beq.n	8004b06 <HAL_RCC_OscConfig+0x9b6>
 8004bfc:	e083      	b.n	8004d06 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bfe:	f7fd fcf9 	bl	80025f4 <HAL_GetTick>
 8004c02:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c06:	e00b      	b.n	8004c20 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c08:	f7fd fcf4 	bl	80025f4 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e2e4      	b.n	80051ea <HAL_RCC_OscConfig+0x109a>
 8004c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c24:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004c28:	2202      	movs	r2, #2
 8004c2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c30:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	fa93 f2a3 	rbit	r2, r3
 8004c3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c3e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c48:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c54:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	fa93 f2a3 	rbit	r2, r3
 8004c5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c62:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c66:	601a      	str	r2, [r3, #0]
  return result;
 8004c68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c6c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c72:	fab3 f383 	clz	r3, r3
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	f043 0302 	orr.w	r3, r3, #2
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d106      	bne.n	8004c94 <HAL_RCC_OscConfig+0xb44>
 8004c86:	4b02      	ldr	r3, [pc, #8]	@ (8004c90 <HAL_RCC_OscConfig+0xb40>)
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	e017      	b.n	8004cbc <HAL_RCC_OscConfig+0xb6c>
 8004c8c:	40007000 	.word	0x40007000
 8004c90:	40021000 	.word	0x40021000
 8004c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c98:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ca4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	fa93 f2a3 	rbit	r2, r3
 8004cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004cb2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	4bb3      	ldr	r3, [pc, #716]	@ (8004f88 <HAL_RCC_OscConfig+0xe38>)
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004cc0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004cc4:	2102      	movs	r1, #2
 8004cc6:	6011      	str	r1, [r2, #0]
 8004cc8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004ccc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	fa92 f1a2 	rbit	r1, r2
 8004cd6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004cda:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8004cde:	6011      	str	r1, [r2, #0]
  return result;
 8004ce0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004ce4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8004ce8:	6812      	ldr	r2, [r2, #0]
 8004cea:	fab2 f282 	clz	r2, r2
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	f002 021f 	and.w	r2, r2, #31
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d180      	bne.n	8004c08 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d06:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d105      	bne.n	8004d1a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d0e:	4b9e      	ldr	r3, [pc, #632]	@ (8004f88 <HAL_RCC_OscConfig+0xe38>)
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	4a9d      	ldr	r2, [pc, #628]	@ (8004f88 <HAL_RCC_OscConfig+0xe38>)
 8004d14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d18:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 825e 	beq.w	80051e8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d2c:	4b96      	ldr	r3, [pc, #600]	@ (8004f88 <HAL_RCC_OscConfig+0xe38>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f003 030c 	and.w	r3, r3, #12
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	f000 821f 	beq.w	8005178 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	f040 8170 	bne.w	800502c <HAL_RCC_OscConfig+0xedc>
 8004d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d50:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004d54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d5e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	fa93 f2a3 	rbit	r2, r3
 8004d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d6c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004d70:	601a      	str	r2, [r3, #0]
  return result;
 8004d72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d76:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004d7a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7c:	fab3 f383 	clz	r3, r3
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004d86:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d92:	f7fd fc2f 	bl	80025f4 <HAL_GetTick>
 8004d96:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d9a:	e009      	b.n	8004db0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d9c:	f7fd fc2a 	bl	80025f4 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e21c      	b.n	80051ea <HAL_RCC_OscConfig+0x109a>
 8004db0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004db4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004db8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dc2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	fa93 f2a3 	rbit	r2, r3
 8004dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dd0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004dd4:	601a      	str	r2, [r3, #0]
  return result;
 8004dd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dda:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004dde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004de0:	fab3 f383 	clz	r3, r3
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d102      	bne.n	8004dfa <HAL_RCC_OscConfig+0xcaa>
 8004df4:	4b64      	ldr	r3, [pc, #400]	@ (8004f88 <HAL_RCC_OscConfig+0xe38>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	e027      	b.n	8004e4a <HAL_RCC_OscConfig+0xcfa>
 8004dfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dfe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004e02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e0c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	fa93 f2a3 	rbit	r2, r3
 8004e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e1a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e24:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004e28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e32:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	fa93 f2a3 	rbit	r2, r3
 8004e3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e40:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	4b50      	ldr	r3, [pc, #320]	@ (8004f88 <HAL_RCC_OscConfig+0xe38>)
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004e4e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004e52:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004e56:	6011      	str	r1, [r2, #0]
 8004e58:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004e5c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	fa92 f1a2 	rbit	r1, r2
 8004e66:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004e6a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8004e6e:	6011      	str	r1, [r2, #0]
  return result;
 8004e70:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004e74:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	fab2 f282 	clz	r2, r2
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	f042 0220 	orr.w	r2, r2, #32
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	f002 021f 	and.w	r2, r2, #31
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d182      	bne.n	8004d9c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e96:	4b3c      	ldr	r3, [pc, #240]	@ (8004f88 <HAL_RCC_OscConfig+0xe38>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9a:	f023 020f 	bic.w	r2, r3, #15
 8004e9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ea2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eaa:	4937      	ldr	r1, [pc, #220]	@ (8004f88 <HAL_RCC_OscConfig+0xe38>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004eb0:	4b35      	ldr	r3, [pc, #212]	@ (8004f88 <HAL_RCC_OscConfig+0xe38>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8004eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ebc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a19      	ldr	r1, [r3, #32]
 8004ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ec8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	492d      	ldr	r1, [pc, #180]	@ (8004f88 <HAL_RCC_OscConfig+0xe38>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	604b      	str	r3, [r1, #4]
 8004ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004edc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004ee0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004eea:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	fa93 f2a3 	rbit	r2, r3
 8004ef4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ef8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004efc:	601a      	str	r2, [r3, #0]
  return result;
 8004efe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f02:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004f06:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f08:	fab3 f383 	clz	r3, r3
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004f12:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1e:	f7fd fb69 	bl	80025f4 <HAL_GetTick>
 8004f22:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f26:	e009      	b.n	8004f3c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f28:	f7fd fb64 	bl	80025f4 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e156      	b.n	80051ea <HAL_RCC_OscConfig+0x109a>
 8004f3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f40:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004f44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f4e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	fa93 f2a3 	rbit	r2, r3
 8004f58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f5c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004f60:	601a      	str	r2, [r3, #0]
  return result;
 8004f62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f66:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004f6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f6c:	fab3 f383 	clz	r3, r3
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d105      	bne.n	8004f8c <HAL_RCC_OscConfig+0xe3c>
 8004f80:	4b01      	ldr	r3, [pc, #4]	@ (8004f88 <HAL_RCC_OscConfig+0xe38>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	e02a      	b.n	8004fdc <HAL_RCC_OscConfig+0xe8c>
 8004f86:	bf00      	nop
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f90:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004f94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f9e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	fa93 f2a3 	rbit	r2, r3
 8004fa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fac:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fb6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004fba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fc4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	fa93 f2a3 	rbit	r2, r3
 8004fce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fd2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	4b86      	ldr	r3, [pc, #536]	@ (80051f4 <HAL_RCC_OscConfig+0x10a4>)
 8004fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fdc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004fe0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004fe4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004fe8:	6011      	str	r1, [r2, #0]
 8004fea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004fee:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	fa92 f1a2 	rbit	r1, r2
 8004ff8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004ffc:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8005000:	6011      	str	r1, [r2, #0]
  return result;
 8005002:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005006:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	fab2 f282 	clz	r2, r2
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	f042 0220 	orr.w	r2, r2, #32
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	f002 021f 	and.w	r2, r2, #31
 800501c:	2101      	movs	r1, #1
 800501e:	fa01 f202 	lsl.w	r2, r1, r2
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	f43f af7f 	beq.w	8004f28 <HAL_RCC_OscConfig+0xdd8>
 800502a:	e0dd      	b.n	80051e8 <HAL_RCC_OscConfig+0x1098>
 800502c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005030:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005034:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800503e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	fa93 f2a3 	rbit	r2, r3
 8005048:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800504c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005050:	601a      	str	r2, [r3, #0]
  return result;
 8005052:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005056:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800505a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505c:	fab3 f383 	clz	r3, r3
 8005060:	b2db      	uxtb	r3, r3
 8005062:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005066:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	461a      	mov	r2, r3
 800506e:	2300      	movs	r3, #0
 8005070:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005072:	f7fd fabf 	bl	80025f4 <HAL_GetTick>
 8005076:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800507a:	e009      	b.n	8005090 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800507c:	f7fd faba 	bl	80025f4 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e0ac      	b.n	80051ea <HAL_RCC_OscConfig+0x109a>
 8005090:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005094:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005098:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800509c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050a2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	fa93 f2a3 	rbit	r2, r3
 80050ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050b0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80050b4:	601a      	str	r2, [r3, #0]
  return result;
 80050b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050ba:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80050be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c0:	fab3 f383 	clz	r3, r3
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d102      	bne.n	80050da <HAL_RCC_OscConfig+0xf8a>
 80050d4:	4b47      	ldr	r3, [pc, #284]	@ (80051f4 <HAL_RCC_OscConfig+0x10a4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	e027      	b.n	800512a <HAL_RCC_OscConfig+0xfda>
 80050da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050de:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80050e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050ec:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	fa93 f2a3 	rbit	r2, r3
 80050f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050fa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005104:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005108:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005112:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	fa93 f2a3 	rbit	r2, r3
 800511c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005120:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	4b33      	ldr	r3, [pc, #204]	@ (80051f4 <HAL_RCC_OscConfig+0x10a4>)
 8005128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800512e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005132:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005136:	6011      	str	r1, [r2, #0]
 8005138:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800513c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	fa92 f1a2 	rbit	r1, r2
 8005146:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800514a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800514e:	6011      	str	r1, [r2, #0]
  return result;
 8005150:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005154:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	fab2 f282 	clz	r2, r2
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	f042 0220 	orr.w	r2, r2, #32
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	f002 021f 	and.w	r2, r2, #31
 800516a:	2101      	movs	r1, #1
 800516c:	fa01 f202 	lsl.w	r2, r1, r2
 8005170:	4013      	ands	r3, r2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d182      	bne.n	800507c <HAL_RCC_OscConfig+0xf2c>
 8005176:	e037      	b.n	80051e8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005178:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800517c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e02e      	b.n	80051ea <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800518c:	4b19      	ldr	r3, [pc, #100]	@ (80051f4 <HAL_RCC_OscConfig+0x10a4>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005194:	4b17      	ldr	r3, [pc, #92]	@ (80051f4 <HAL_RCC_OscConfig+0x10a4>)
 8005196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005198:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800519c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80051a0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80051a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d117      	bne.n	80051e4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80051b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80051b8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80051bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d10b      	bne.n	80051e4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80051cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80051d0:	f003 020f 	and.w	r2, r3, #15
 80051d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40021000 	.word	0x40021000

080051f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b09e      	sub	sp, #120	@ 0x78
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e162      	b.n	80054d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005210:	4b90      	ldr	r3, [pc, #576]	@ (8005454 <HAL_RCC_ClockConfig+0x25c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d910      	bls.n	8005240 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521e:	4b8d      	ldr	r3, [pc, #564]	@ (8005454 <HAL_RCC_ClockConfig+0x25c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f023 0207 	bic.w	r2, r3, #7
 8005226:	498b      	ldr	r1, [pc, #556]	@ (8005454 <HAL_RCC_ClockConfig+0x25c>)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	4313      	orrs	r3, r2
 800522c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522e:	4b89      	ldr	r3, [pc, #548]	@ (8005454 <HAL_RCC_ClockConfig+0x25c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d001      	beq.n	8005240 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e14a      	b.n	80054d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800524c:	4b82      	ldr	r3, [pc, #520]	@ (8005458 <HAL_RCC_ClockConfig+0x260>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	497f      	ldr	r1, [pc, #508]	@ (8005458 <HAL_RCC_ClockConfig+0x260>)
 800525a:	4313      	orrs	r3, r2
 800525c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 80dc 	beq.w	8005424 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d13c      	bne.n	80052ee <HAL_RCC_ClockConfig+0xf6>
 8005274:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005278:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800527c:	fa93 f3a3 	rbit	r3, r3
 8005280:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005284:	fab3 f383 	clz	r3, r3
 8005288:	b2db      	uxtb	r3, r3
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d102      	bne.n	800529e <HAL_RCC_ClockConfig+0xa6>
 8005298:	4b6f      	ldr	r3, [pc, #444]	@ (8005458 <HAL_RCC_ClockConfig+0x260>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	e00f      	b.n	80052be <HAL_RCC_ClockConfig+0xc6>
 800529e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80052a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052a6:	fa93 f3a3 	rbit	r3, r3
 80052aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80052ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80052b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80052b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052b4:	fa93 f3a3 	rbit	r3, r3
 80052b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052ba:	4b67      	ldr	r3, [pc, #412]	@ (8005458 <HAL_RCC_ClockConfig+0x260>)
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80052c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80052c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052c6:	fa92 f2a2 	rbit	r2, r2
 80052ca:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80052cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052ce:	fab2 f282 	clz	r2, r2
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	f042 0220 	orr.w	r2, r2, #32
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	f002 021f 	and.w	r2, r2, #31
 80052de:	2101      	movs	r1, #1
 80052e0:	fa01 f202 	lsl.w	r2, r1, r2
 80052e4:	4013      	ands	r3, r2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d17b      	bne.n	80053e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e0f3      	b.n	80054d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d13c      	bne.n	8005370 <HAL_RCC_ClockConfig+0x178>
 80052f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052fe:	fa93 f3a3 	rbit	r3, r3
 8005302:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005306:	fab3 f383 	clz	r3, r3
 800530a:	b2db      	uxtb	r3, r3
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f043 0301 	orr.w	r3, r3, #1
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b01      	cmp	r3, #1
 8005318:	d102      	bne.n	8005320 <HAL_RCC_ClockConfig+0x128>
 800531a:	4b4f      	ldr	r3, [pc, #316]	@ (8005458 <HAL_RCC_ClockConfig+0x260>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	e00f      	b.n	8005340 <HAL_RCC_ClockConfig+0x148>
 8005320:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005324:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005328:	fa93 f3a3 	rbit	r3, r3
 800532c:	647b      	str	r3, [r7, #68]	@ 0x44
 800532e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005332:	643b      	str	r3, [r7, #64]	@ 0x40
 8005334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005336:	fa93 f3a3 	rbit	r3, r3
 800533a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800533c:	4b46      	ldr	r3, [pc, #280]	@ (8005458 <HAL_RCC_ClockConfig+0x260>)
 800533e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005340:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005344:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005346:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005348:	fa92 f2a2 	rbit	r2, r2
 800534c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800534e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005350:	fab2 f282 	clz	r2, r2
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	f042 0220 	orr.w	r2, r2, #32
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	f002 021f 	and.w	r2, r2, #31
 8005360:	2101      	movs	r1, #1
 8005362:	fa01 f202 	lsl.w	r2, r1, r2
 8005366:	4013      	ands	r3, r2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d13a      	bne.n	80053e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0b2      	b.n	80054d6 <HAL_RCC_ClockConfig+0x2de>
 8005370:	2302      	movs	r3, #2
 8005372:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800537c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800537e:	fab3 f383 	clz	r3, r3
 8005382:	b2db      	uxtb	r3, r3
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f043 0301 	orr.w	r3, r3, #1
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b01      	cmp	r3, #1
 8005390:	d102      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1a0>
 8005392:	4b31      	ldr	r3, [pc, #196]	@ (8005458 <HAL_RCC_ClockConfig+0x260>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	e00d      	b.n	80053b4 <HAL_RCC_ClockConfig+0x1bc>
 8005398:	2302      	movs	r3, #2
 800539a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	fa93 f3a3 	rbit	r3, r3
 80053a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80053a4:	2302      	movs	r3, #2
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	fa93 f3a3 	rbit	r3, r3
 80053ae:	61fb      	str	r3, [r7, #28]
 80053b0:	4b29      	ldr	r3, [pc, #164]	@ (8005458 <HAL_RCC_ClockConfig+0x260>)
 80053b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b4:	2202      	movs	r2, #2
 80053b6:	61ba      	str	r2, [r7, #24]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	fa92 f2a2 	rbit	r2, r2
 80053be:	617a      	str	r2, [r7, #20]
  return result;
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	fab2 f282 	clz	r2, r2
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	f042 0220 	orr.w	r2, r2, #32
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	f002 021f 	and.w	r2, r2, #31
 80053d2:	2101      	movs	r1, #1
 80053d4:	fa01 f202 	lsl.w	r2, r1, r2
 80053d8:	4013      	ands	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e079      	b.n	80054d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005458 <HAL_RCC_ClockConfig+0x260>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f023 0203 	bic.w	r2, r3, #3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	491a      	ldr	r1, [pc, #104]	@ (8005458 <HAL_RCC_ClockConfig+0x260>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053f4:	f7fd f8fe 	bl	80025f4 <HAL_GetTick>
 80053f8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fa:	e00a      	b.n	8005412 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053fc:	f7fd f8fa 	bl	80025f4 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e061      	b.n	80054d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005412:	4b11      	ldr	r3, [pc, #68]	@ (8005458 <HAL_RCC_ClockConfig+0x260>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f003 020c 	and.w	r2, r3, #12
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	429a      	cmp	r2, r3
 8005422:	d1eb      	bne.n	80053fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005424:	4b0b      	ldr	r3, [pc, #44]	@ (8005454 <HAL_RCC_ClockConfig+0x25c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d214      	bcs.n	800545c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005432:	4b08      	ldr	r3, [pc, #32]	@ (8005454 <HAL_RCC_ClockConfig+0x25c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f023 0207 	bic.w	r2, r3, #7
 800543a:	4906      	ldr	r1, [pc, #24]	@ (8005454 <HAL_RCC_ClockConfig+0x25c>)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	4313      	orrs	r3, r2
 8005440:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005442:	4b04      	ldr	r3, [pc, #16]	@ (8005454 <HAL_RCC_ClockConfig+0x25c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d005      	beq.n	800545c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e040      	b.n	80054d6 <HAL_RCC_ClockConfig+0x2de>
 8005454:	40022000 	.word	0x40022000
 8005458:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005468:	4b1d      	ldr	r3, [pc, #116]	@ (80054e0 <HAL_RCC_ClockConfig+0x2e8>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	491a      	ldr	r1, [pc, #104]	@ (80054e0 <HAL_RCC_ClockConfig+0x2e8>)
 8005476:	4313      	orrs	r3, r2
 8005478:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d009      	beq.n	800549a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005486:	4b16      	ldr	r3, [pc, #88]	@ (80054e0 <HAL_RCC_ClockConfig+0x2e8>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4912      	ldr	r1, [pc, #72]	@ (80054e0 <HAL_RCC_ClockConfig+0x2e8>)
 8005496:	4313      	orrs	r3, r2
 8005498:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800549a:	f000 f829 	bl	80054f0 <HAL_RCC_GetSysClockFreq>
 800549e:	4601      	mov	r1, r0
 80054a0:	4b0f      	ldr	r3, [pc, #60]	@ (80054e0 <HAL_RCC_ClockConfig+0x2e8>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054a8:	22f0      	movs	r2, #240	@ 0xf0
 80054aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	fa92 f2a2 	rbit	r2, r2
 80054b2:	60fa      	str	r2, [r7, #12]
  return result;
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	fab2 f282 	clz	r2, r2
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	40d3      	lsrs	r3, r2
 80054be:	4a09      	ldr	r2, [pc, #36]	@ (80054e4 <HAL_RCC_ClockConfig+0x2ec>)
 80054c0:	5cd3      	ldrb	r3, [r2, r3]
 80054c2:	fa21 f303 	lsr.w	r3, r1, r3
 80054c6:	4a08      	ldr	r2, [pc, #32]	@ (80054e8 <HAL_RCC_ClockConfig+0x2f0>)
 80054c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80054ca:	4b08      	ldr	r3, [pc, #32]	@ (80054ec <HAL_RCC_ClockConfig+0x2f4>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fd f84c 	bl	800256c <HAL_InitTick>
  
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3778      	adds	r7, #120	@ 0x78
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40021000 	.word	0x40021000
 80054e4:	0800c0d0 	.word	0x0800c0d0
 80054e8:	20000000 	.word	0x20000000
 80054ec:	20000004 	.word	0x20000004

080054f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	2300      	movs	r3, #0
 8005504:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800550a:	4b1f      	ldr	r3, [pc, #124]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x98>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 030c 	and.w	r3, r3, #12
 8005516:	2b04      	cmp	r3, #4
 8005518:	d002      	beq.n	8005520 <HAL_RCC_GetSysClockFreq+0x30>
 800551a:	2b08      	cmp	r3, #8
 800551c:	d003      	beq.n	8005526 <HAL_RCC_GetSysClockFreq+0x36>
 800551e:	e029      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005520:	4b1a      	ldr	r3, [pc, #104]	@ (800558c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005522:	613b      	str	r3, [r7, #16]
      break;
 8005524:	e029      	b.n	800557a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	0c9b      	lsrs	r3, r3, #18
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	4a18      	ldr	r2, [pc, #96]	@ (8005590 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005530:	5cd3      	ldrb	r3, [r2, r3]
 8005532:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005534:	4b14      	ldr	r3, [pc, #80]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x98>)
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	4a15      	ldr	r2, [pc, #84]	@ (8005594 <HAL_RCC_GetSysClockFreq+0xa4>)
 800553e:	5cd3      	ldrb	r3, [r2, r3]
 8005540:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d008      	beq.n	800555e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800554c:	4a0f      	ldr	r2, [pc, #60]	@ (800558c <HAL_RCC_GetSysClockFreq+0x9c>)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	fbb2 f2f3 	udiv	r2, r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	fb02 f303 	mul.w	r3, r2, r3
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	e007      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800555e:	4a0b      	ldr	r2, [pc, #44]	@ (800558c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	fbb2 f2f3 	udiv	r2, r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	fb02 f303 	mul.w	r3, r2, r3
 800556c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	613b      	str	r3, [r7, #16]
      break;
 8005572:	e002      	b.n	800557a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005574:	4b05      	ldr	r3, [pc, #20]	@ (800558c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005576:	613b      	str	r3, [r7, #16]
      break;
 8005578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800557a:	693b      	ldr	r3, [r7, #16]
}
 800557c:	4618      	mov	r0, r3
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	40021000 	.word	0x40021000
 800558c:	007a1200 	.word	0x007a1200
 8005590:	0800c0e8 	.word	0x0800c0e8
 8005594:	0800c0f8 	.word	0x0800c0f8

08005598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800559c:	4b03      	ldr	r3, [pc, #12]	@ (80055ac <HAL_RCC_GetHCLKFreq+0x14>)
 800559e:	681b      	ldr	r3, [r3, #0]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	20000000 	.word	0x20000000

080055b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80055b6:	f7ff ffef 	bl	8005598 <HAL_RCC_GetHCLKFreq>
 80055ba:	4601      	mov	r1, r0
 80055bc:	4b0b      	ldr	r3, [pc, #44]	@ (80055ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055c4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80055c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	fa92 f2a2 	rbit	r2, r2
 80055d0:	603a      	str	r2, [r7, #0]
  return result;
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	fab2 f282 	clz	r2, r2
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	40d3      	lsrs	r3, r2
 80055dc:	4a04      	ldr	r2, [pc, #16]	@ (80055f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80055de:	5cd3      	ldrb	r3, [r2, r3]
 80055e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40021000 	.word	0x40021000
 80055f0:	0800c0e0 	.word	0x0800c0e0

080055f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80055fa:	f7ff ffcd 	bl	8005598 <HAL_RCC_GetHCLKFreq>
 80055fe:	4601      	mov	r1, r0
 8005600:	4b0b      	ldr	r3, [pc, #44]	@ (8005630 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005608:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800560c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	fa92 f2a2 	rbit	r2, r2
 8005614:	603a      	str	r2, [r7, #0]
  return result;
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	fab2 f282 	clz	r2, r2
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	40d3      	lsrs	r3, r2
 8005620:	4a04      	ldr	r2, [pc, #16]	@ (8005634 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005622:	5cd3      	ldrb	r3, [r2, r3]
 8005624:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40021000 	.word	0x40021000
 8005634:	0800c0e0 	.word	0x0800c0e0

08005638 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b092      	sub	sp, #72	@ 0x48
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005648:	2300      	movs	r3, #0
 800564a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 80d4 	beq.w	8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800565c:	4b4e      	ldr	r3, [pc, #312]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10e      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005668:	4b4b      	ldr	r3, [pc, #300]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	4a4a      	ldr	r2, [pc, #296]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005672:	61d3      	str	r3, [r2, #28]
 8005674:	4b48      	ldr	r3, [pc, #288]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005680:	2301      	movs	r3, #1
 8005682:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005686:	4b45      	ldr	r3, [pc, #276]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d118      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005692:	4b42      	ldr	r3, [pc, #264]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a41      	ldr	r2, [pc, #260]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800569c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800569e:	f7fc ffa9 	bl	80025f4 <HAL_GetTick>
 80056a2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a4:	e008      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a6:	f7fc ffa5 	bl	80025f4 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b64      	cmp	r3, #100	@ 0x64
 80056b2:	d901      	bls.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e1d6      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b8:	4b38      	ldr	r3, [pc, #224]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0f0      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056c4:	4b34      	ldr	r3, [pc, #208]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 8084 	beq.w	80057de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d07c      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80056f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f6:	fa93 f3a3 	rbit	r3, r3
 80056fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80056fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056fe:	fab3 f383 	clz	r3, r3
 8005702:	b2db      	uxtb	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	4b26      	ldr	r3, [pc, #152]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005708:	4413      	add	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	461a      	mov	r2, r3
 800570e:	2301      	movs	r3, #1
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005716:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571a:	fa93 f3a3 	rbit	r3, r3
 800571e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005722:	fab3 f383 	clz	r3, r3
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	4b1d      	ldr	r3, [pc, #116]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	461a      	mov	r2, r3
 8005732:	2300      	movs	r3, #0
 8005734:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005736:	4a18      	ldr	r2, [pc, #96]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800573a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800573c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d04b      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005746:	f7fc ff55 	bl	80025f4 <HAL_GetTick>
 800574a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574c:	e00a      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574e:	f7fc ff51 	bl	80025f4 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575c:	4293      	cmp	r3, r2
 800575e:	d901      	bls.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e180      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005764:	2302      	movs	r3, #2
 8005766:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576a:	fa93 f3a3 	rbit	r3, r3
 800576e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005770:	2302      	movs	r3, #2
 8005772:	623b      	str	r3, [r7, #32]
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	fa93 f3a3 	rbit	r3, r3
 800577a:	61fb      	str	r3, [r7, #28]
  return result;
 800577c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577e:	fab3 f383 	clz	r3, r3
 8005782:	b2db      	uxtb	r3, r3
 8005784:	095b      	lsrs	r3, r3, #5
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f043 0302 	orr.w	r3, r3, #2
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d108      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005792:	4b01      	ldr	r3, [pc, #4]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	e00d      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005798:	40021000 	.word	0x40021000
 800579c:	40007000 	.word	0x40007000
 80057a0:	10908100 	.word	0x10908100
 80057a4:	2302      	movs	r3, #2
 80057a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	fa93 f3a3 	rbit	r3, r3
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	4b9a      	ldr	r3, [pc, #616]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b4:	2202      	movs	r2, #2
 80057b6:	613a      	str	r2, [r7, #16]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	fa92 f2a2 	rbit	r2, r2
 80057be:	60fa      	str	r2, [r7, #12]
  return result;
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	fab2 f282 	clz	r2, r2
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	f002 021f 	and.w	r2, r2, #31
 80057d2:	2101      	movs	r1, #1
 80057d4:	fa01 f202 	lsl.w	r2, r1, r2
 80057d8:	4013      	ands	r3, r2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0b7      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80057de:	4b8f      	ldr	r3, [pc, #572]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	498c      	ldr	r1, [pc, #560]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d105      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f8:	4b88      	ldr	r3, [pc, #544]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	4a87      	ldr	r2, [pc, #540]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005802:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005810:	4b82      	ldr	r3, [pc, #520]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005814:	f023 0203 	bic.w	r2, r3, #3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	497f      	ldr	r1, [pc, #508]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800581e:	4313      	orrs	r3, r2
 8005820:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d008      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800582e:	4b7b      	ldr	r3, [pc, #492]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005832:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	4978      	ldr	r1, [pc, #480]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800583c:	4313      	orrs	r3, r2
 800583e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800584c:	4b73      	ldr	r3, [pc, #460]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800584e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005850:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	4970      	ldr	r1, [pc, #448]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800585a:	4313      	orrs	r3, r2
 800585c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800586a:	4b6c      	ldr	r3, [pc, #432]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586e:	f023 0210 	bic.w	r2, r3, #16
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	4969      	ldr	r1, [pc, #420]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005878:	4313      	orrs	r3, r2
 800587a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005888:	4b64      	ldr	r3, [pc, #400]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005894:	4961      	ldr	r1, [pc, #388]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005896:	4313      	orrs	r3, r2
 8005898:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058a6:	4b5d      	ldr	r3, [pc, #372]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058aa:	f023 0220 	bic.w	r2, r3, #32
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	495a      	ldr	r1, [pc, #360]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d008      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058c4:	4b55      	ldr	r3, [pc, #340]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d0:	4952      	ldr	r1, [pc, #328]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058e2:	4b4e      	ldr	r3, [pc, #312]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	494b      	ldr	r1, [pc, #300]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d008      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005900:	4b46      	ldr	r3, [pc, #280]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005904:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	4943      	ldr	r1, [pc, #268]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800590e:	4313      	orrs	r3, r2
 8005910:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800591a:	2b00      	cmp	r3, #0
 800591c:	d008      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800591e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592a:	493c      	ldr	r1, [pc, #240]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800592c:	4313      	orrs	r3, r2
 800592e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005938:	2b00      	cmp	r3, #0
 800593a:	d008      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800593c:	4b37      	ldr	r3, [pc, #220]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800593e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005940:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005948:	4934      	ldr	r1, [pc, #208]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800594a:	4313      	orrs	r3, r2
 800594c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d008      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800595a:	4b30      	ldr	r3, [pc, #192]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800595c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005966:	492d      	ldr	r1, [pc, #180]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005968:	4313      	orrs	r3, r2
 800596a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d008      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005978:	4b28      	ldr	r3, [pc, #160]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800597a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005984:	4925      	ldr	r1, [pc, #148]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005986:	4313      	orrs	r3, r2
 8005988:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d008      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005996:	4b21      	ldr	r3, [pc, #132]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	491e      	ldr	r1, [pc, #120]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d008      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80059b4:	4b19      	ldr	r3, [pc, #100]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c0:	4916      	ldr	r1, [pc, #88]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d008      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80059d2:	4b12      	ldr	r3, [pc, #72]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059de:	490f      	ldr	r1, [pc, #60]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d008      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80059f0:	4b0a      	ldr	r3, [pc, #40]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fc:	4907      	ldr	r1, [pc, #28]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00c      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005a0e:	4b03      	ldr	r3, [pc, #12]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a12:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	e002      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005a1a:	bf00      	nop
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a22:	4913      	ldr	r1, [pc, #76]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005a34:	4b0e      	ldr	r3, [pc, #56]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a40:	490b      	ldr	r1, [pc, #44]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d008      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005a52:	4b07      	ldr	r3, [pc, #28]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a5e:	4904      	ldr	r1, [pc, #16]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3748      	adds	r7, #72	@ 0x48
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40021000 	.word	0x40021000

08005a74 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e073      	b.n	8005b72 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7f5b      	ldrb	r3, [r3, #29]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d105      	bne.n	8005aa0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fc f9c2 	bl	8001e24 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	d055      	beq.n	8005b60 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	22ca      	movs	r2, #202	@ 0xca
 8005aba:	625a      	str	r2, [r3, #36]	@ 0x24
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2253      	movs	r2, #83	@ 0x53
 8005ac2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f87f 	bl	8005bc8 <RTC_EnterInitMode>
 8005aca:	4603      	mov	r3, r0
 8005acc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d12c      	bne.n	8005b2e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6812      	ldr	r2, [r2, #0]
 8005ade:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005ae2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6899      	ldr	r1, [r3, #8]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	68d2      	ldr	r2, [r2, #12]
 8005b0e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6919      	ldr	r1, [r3, #16]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	041a      	lsls	r2, r3, #16
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f886 	bl	8005c36 <RTC_ExitInitMode>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d110      	bne.n	8005b56 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b42:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	22ff      	movs	r2, #255	@ 0xff
 8005b5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b5e:	e001      	b.n	8005b64 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d102      	bne.n	8005b70 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8005bc4 <HAL_RTC_WaitForSynchro+0x48>)
 8005b8e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b90:	f7fc fd30 	bl	80025f4 <HAL_GetTick>
 8005b94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b96:	e009      	b.n	8005bac <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b98:	f7fc fd2c 	bl	80025f4 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ba6:	d901      	bls.n	8005bac <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e007      	b.n	8005bbc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0ee      	beq.n	8005b98 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	0001ff5f 	.word	0x0001ff5f

08005bc8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d122      	bne.n	8005c2c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005bf4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bf6:	f7fc fcfd 	bl	80025f4 <HAL_GetTick>
 8005bfa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005bfc:	e00c      	b.n	8005c18 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bfe:	f7fc fcf9 	bl	80025f4 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c0c:	d904      	bls.n	8005c18 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2204      	movs	r2, #4
 8005c12:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <RTC_EnterInitMode+0x64>
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d1e8      	bne.n	8005bfe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c50:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff ff8b 	bl	8005b7c <HAL_RTC_WaitForSynchro>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d004      	beq.n	8005c76 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e049      	b.n	8005d26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d106      	bne.n	8005cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7fc fa1c 	bl	80020e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f000 fd7c 	bl	80067bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d001      	beq.n	8005d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e04f      	b.n	8005de8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0201 	orr.w	r2, r2, #1
 8005d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a23      	ldr	r2, [pc, #140]	@ (8005df4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01d      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d72:	d018      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1f      	ldr	r2, [pc, #124]	@ (8005df8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d013      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1e      	ldr	r2, [pc, #120]	@ (8005dfc <HAL_TIM_Base_Start_IT+0xcc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00e      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005e00 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d009      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1b      	ldr	r2, [pc, #108]	@ (8005e04 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d004      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a19      	ldr	r2, [pc, #100]	@ (8005e08 <HAL_TIM_Base_Start_IT+0xd8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d115      	bne.n	8005dd2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	4b17      	ldr	r3, [pc, #92]	@ (8005e0c <HAL_TIM_Base_Start_IT+0xdc>)
 8005dae:	4013      	ands	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b06      	cmp	r3, #6
 8005db6:	d015      	beq.n	8005de4 <HAL_TIM_Base_Start_IT+0xb4>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dbe:	d011      	beq.n	8005de4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd0:	e008      	b.n	8005de4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0201 	orr.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	e000      	b.n	8005de6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40000400 	.word	0x40000400
 8005dfc:	40000800 	.word	0x40000800
 8005e00:	40013400 	.word	0x40013400
 8005e04:	40014000 	.word	0x40014000
 8005e08:	40015000 	.word	0x40015000
 8005e0c:	00010007 	.word	0x00010007

08005e10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e049      	b.n	8005eb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fc f936 	bl	80020a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f000 fcb4 	bl	80067bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d109      	bne.n	8005ee4 <HAL_TIM_PWM_Start+0x24>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	bf14      	ite	ne
 8005edc:	2301      	movne	r3, #1
 8005ede:	2300      	moveq	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	e03c      	b.n	8005f5e <HAL_TIM_PWM_Start+0x9e>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d109      	bne.n	8005efe <HAL_TIM_PWM_Start+0x3e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	bf14      	ite	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	2300      	moveq	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	e02f      	b.n	8005f5e <HAL_TIM_PWM_Start+0x9e>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d109      	bne.n	8005f18 <HAL_TIM_PWM_Start+0x58>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	bf14      	ite	ne
 8005f10:	2301      	movne	r3, #1
 8005f12:	2300      	moveq	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	e022      	b.n	8005f5e <HAL_TIM_PWM_Start+0x9e>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b0c      	cmp	r3, #12
 8005f1c:	d109      	bne.n	8005f32 <HAL_TIM_PWM_Start+0x72>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	bf14      	ite	ne
 8005f2a:	2301      	movne	r3, #1
 8005f2c:	2300      	moveq	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	e015      	b.n	8005f5e <HAL_TIM_PWM_Start+0x9e>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	d109      	bne.n	8005f4c <HAL_TIM_PWM_Start+0x8c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	bf14      	ite	ne
 8005f44:	2301      	movne	r3, #1
 8005f46:	2300      	moveq	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	e008      	b.n	8005f5e <HAL_TIM_PWM_Start+0x9e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e0a1      	b.n	80060aa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <HAL_TIM_PWM_Start+0xb6>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f74:	e023      	b.n	8005fbe <HAL_TIM_PWM_Start+0xfe>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d104      	bne.n	8005f86 <HAL_TIM_PWM_Start+0xc6>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f84:	e01b      	b.n	8005fbe <HAL_TIM_PWM_Start+0xfe>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d104      	bne.n	8005f96 <HAL_TIM_PWM_Start+0xd6>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f94:	e013      	b.n	8005fbe <HAL_TIM_PWM_Start+0xfe>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b0c      	cmp	r3, #12
 8005f9a:	d104      	bne.n	8005fa6 <HAL_TIM_PWM_Start+0xe6>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fa4:	e00b      	b.n	8005fbe <HAL_TIM_PWM_Start+0xfe>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d104      	bne.n	8005fb6 <HAL_TIM_PWM_Start+0xf6>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fb4:	e003      	b.n	8005fbe <HAL_TIM_PWM_Start+0xfe>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 ffa8 	bl	8006f1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a38      	ldr	r2, [pc, #224]	@ (80060b4 <HAL_TIM_PWM_Start+0x1f4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d018      	beq.n	8006008 <HAL_TIM_PWM_Start+0x148>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a37      	ldr	r2, [pc, #220]	@ (80060b8 <HAL_TIM_PWM_Start+0x1f8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d013      	beq.n	8006008 <HAL_TIM_PWM_Start+0x148>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a35      	ldr	r2, [pc, #212]	@ (80060bc <HAL_TIM_PWM_Start+0x1fc>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00e      	beq.n	8006008 <HAL_TIM_PWM_Start+0x148>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a34      	ldr	r2, [pc, #208]	@ (80060c0 <HAL_TIM_PWM_Start+0x200>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d009      	beq.n	8006008 <HAL_TIM_PWM_Start+0x148>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a32      	ldr	r2, [pc, #200]	@ (80060c4 <HAL_TIM_PWM_Start+0x204>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_TIM_PWM_Start+0x148>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a31      	ldr	r2, [pc, #196]	@ (80060c8 <HAL_TIM_PWM_Start+0x208>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d101      	bne.n	800600c <HAL_TIM_PWM_Start+0x14c>
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <HAL_TIM_PWM_Start+0x14e>
 800600c:	2300      	movs	r3, #0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006020:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a23      	ldr	r2, [pc, #140]	@ (80060b4 <HAL_TIM_PWM_Start+0x1f4>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d01d      	beq.n	8006068 <HAL_TIM_PWM_Start+0x1a8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006034:	d018      	beq.n	8006068 <HAL_TIM_PWM_Start+0x1a8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a24      	ldr	r2, [pc, #144]	@ (80060cc <HAL_TIM_PWM_Start+0x20c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d013      	beq.n	8006068 <HAL_TIM_PWM_Start+0x1a8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a22      	ldr	r2, [pc, #136]	@ (80060d0 <HAL_TIM_PWM_Start+0x210>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00e      	beq.n	8006068 <HAL_TIM_PWM_Start+0x1a8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1a      	ldr	r2, [pc, #104]	@ (80060b8 <HAL_TIM_PWM_Start+0x1f8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d009      	beq.n	8006068 <HAL_TIM_PWM_Start+0x1a8>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a18      	ldr	r2, [pc, #96]	@ (80060bc <HAL_TIM_PWM_Start+0x1fc>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <HAL_TIM_PWM_Start+0x1a8>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a19      	ldr	r2, [pc, #100]	@ (80060c8 <HAL_TIM_PWM_Start+0x208>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d115      	bne.n	8006094 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	4b19      	ldr	r3, [pc, #100]	@ (80060d4 <HAL_TIM_PWM_Start+0x214>)
 8006070:	4013      	ands	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b06      	cmp	r3, #6
 8006078:	d015      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x1e6>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006080:	d011      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0201 	orr.w	r2, r2, #1
 8006090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006092:	e008      	b.n	80060a6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	e000      	b.n	80060a8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40013400 	.word	0x40013400
 80060bc:	40014000 	.word	0x40014000
 80060c0:	40014400 	.word	0x40014400
 80060c4:	40014800 	.word	0x40014800
 80060c8:	40015000 	.word	0x40015000
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800
 80060d4:	00010007 	.word	0x00010007

080060d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e097      	b.n	800621c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d106      	bne.n	8006106 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7fb feb5 	bl	8001e70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2202      	movs	r2, #2
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800611c:	f023 0307 	bic.w	r3, r3, #7
 8006120:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3304      	adds	r3, #4
 800612a:	4619      	mov	r1, r3
 800612c:	4610      	mov	r0, r2
 800612e:	f000 fb45 	bl	80067bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615a:	f023 0303 	bic.w	r3, r3, #3
 800615e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	021b      	lsls	r3, r3, #8
 800616a:	4313      	orrs	r3, r2
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006178:	f023 030c 	bic.w	r3, r3, #12
 800617c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006184:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006188:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	4313      	orrs	r3, r2
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	011a      	lsls	r2, r3, #4
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	031b      	lsls	r3, r3, #12
 80061a8:	4313      	orrs	r3, r2
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80061b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80061be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	4313      	orrs	r3, r2
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006234:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800623c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006244:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800624c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d110      	bne.n	8006276 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d102      	bne.n	8006260 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800625a:	7b7b      	ldrb	r3, [r7, #13]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d001      	beq.n	8006264 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e069      	b.n	8006338 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006274:	e031      	b.n	80062da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b04      	cmp	r3, #4
 800627a:	d110      	bne.n	800629e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d102      	bne.n	8006288 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006282:	7b3b      	ldrb	r3, [r7, #12]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d001      	beq.n	800628c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e055      	b.n	8006338 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800629c:	e01d      	b.n	80062da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d108      	bne.n	80062b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062a4:	7bbb      	ldrb	r3, [r7, #14]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d105      	bne.n	80062b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062aa:	7b7b      	ldrb	r3, [r7, #13]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d102      	bne.n	80062b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062b0:	7b3b      	ldrb	r3, [r7, #12]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d001      	beq.n	80062ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e03e      	b.n	8006338 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2202      	movs	r2, #2
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2202      	movs	r2, #2
 80062c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2202      	movs	r2, #2
 80062ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2202      	movs	r2, #2
 80062d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <HAL_TIM_Encoder_Start+0xc4>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d008      	beq.n	80062f8 <HAL_TIM_Encoder_Start+0xd4>
 80062e6:	e00f      	b.n	8006308 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2201      	movs	r2, #1
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fe13 	bl	8006f1c <TIM_CCxChannelCmd>
      break;
 80062f6:	e016      	b.n	8006326 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2201      	movs	r2, #1
 80062fe:	2104      	movs	r1, #4
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fe0b 	bl	8006f1c <TIM_CCxChannelCmd>
      break;
 8006306:	e00e      	b.n	8006326 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2201      	movs	r2, #1
 800630e:	2100      	movs	r1, #0
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fe03 	bl	8006f1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2201      	movs	r2, #1
 800631c:	2104      	movs	r1, #4
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fdfc 	bl	8006f1c <TIM_CCxChannelCmd>
      break;
 8006324:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0201 	orr.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d020      	beq.n	80063a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01b      	beq.n	80063a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0202 	mvn.w	r2, #2
 8006374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f9f8 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 8006390:	e005      	b.n	800639e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f9ea 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f9fb 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d020      	beq.n	80063f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01b      	beq.n	80063f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f06f 0204 	mvn.w	r2, #4
 80063c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2202      	movs	r2, #2
 80063c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f9d2 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 80063dc:	e005      	b.n	80063ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f9c4 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f9d5 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f003 0308 	and.w	r3, r3, #8
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d020      	beq.n	800643c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01b      	beq.n	800643c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f06f 0208 	mvn.w	r2, #8
 800640c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2204      	movs	r2, #4
 8006412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	f003 0303 	and.w	r3, r3, #3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f9ac 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 8006428:	e005      	b.n	8006436 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f99e 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f9af 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b00      	cmp	r3, #0
 8006444:	d020      	beq.n	8006488 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f003 0310 	and.w	r3, r3, #16
 800644c:	2b00      	cmp	r3, #0
 800644e:	d01b      	beq.n	8006488 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0210 	mvn.w	r2, #16
 8006458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2208      	movs	r2, #8
 800645e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f986 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 8006474:	e005      	b.n	8006482 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f978 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f989 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00c      	beq.n	80064ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0201 	mvn.w	r2, #1
 80064a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fb f8f6 	bl	8001698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00c      	beq.n	80064d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d007      	beq.n	80064d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80064c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fde2 	bl	8007094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00c      	beq.n	80064f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80064ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fdda 	bl	80070a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00c      	beq.n	8006518 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f948 	bl	80067a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00c      	beq.n	800653c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	d007      	beq.n	800653c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0220 	mvn.w	r2, #32
 8006534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fda2 	bl	8007080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800653c:	bf00      	nop
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800655e:	2302      	movs	r3, #2
 8006560:	e0ff      	b.n	8006762 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b14      	cmp	r3, #20
 800656e:	f200 80f0 	bhi.w	8006752 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006572:	a201      	add	r2, pc, #4	@ (adr r2, 8006578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	080065cd 	.word	0x080065cd
 800657c:	08006753 	.word	0x08006753
 8006580:	08006753 	.word	0x08006753
 8006584:	08006753 	.word	0x08006753
 8006588:	0800660d 	.word	0x0800660d
 800658c:	08006753 	.word	0x08006753
 8006590:	08006753 	.word	0x08006753
 8006594:	08006753 	.word	0x08006753
 8006598:	0800664f 	.word	0x0800664f
 800659c:	08006753 	.word	0x08006753
 80065a0:	08006753 	.word	0x08006753
 80065a4:	08006753 	.word	0x08006753
 80065a8:	0800668f 	.word	0x0800668f
 80065ac:	08006753 	.word	0x08006753
 80065b0:	08006753 	.word	0x08006753
 80065b4:	08006753 	.word	0x08006753
 80065b8:	080066d1 	.word	0x080066d1
 80065bc:	08006753 	.word	0x08006753
 80065c0:	08006753 	.word	0x08006753
 80065c4:	08006753 	.word	0x08006753
 80065c8:	08006711 	.word	0x08006711
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 f99c 	bl	8006910 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0208 	orr.w	r2, r2, #8
 80065e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0204 	bic.w	r2, r2, #4
 80065f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6999      	ldr	r1, [r3, #24]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	691a      	ldr	r2, [r3, #16]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	619a      	str	r2, [r3, #24]
      break;
 800660a:	e0a5      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fa16 	bl	8006a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6999      	ldr	r1, [r3, #24]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	021a      	lsls	r2, r3, #8
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	619a      	str	r2, [r3, #24]
      break;
 800664c:	e084      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fa89 	bl	8006b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 0208 	orr.w	r2, r2, #8
 8006668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0204 	bic.w	r2, r2, #4
 8006678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69d9      	ldr	r1, [r3, #28]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	61da      	str	r2, [r3, #28]
      break;
 800668c:	e064      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fafb 	bl	8006c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69d9      	ldr	r1, [r3, #28]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	021a      	lsls	r2, r3, #8
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	61da      	str	r2, [r3, #28]
      break;
 80066ce:	e043      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fb4a 	bl	8006d70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0208 	orr.w	r2, r2, #8
 80066ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0204 	bic.w	r2, r2, #4
 80066fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	691a      	ldr	r2, [r3, #16]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800670e:	e023      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fb94 	bl	8006e44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800672a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800673a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	021a      	lsls	r2, r3, #8
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006750:	e002      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	75fb      	strb	r3, [r7, #23]
      break;
 8006756:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006760:	7dfb      	ldrb	r3, [r7, #23]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop

0800676c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a48      	ldr	r2, [pc, #288]	@ (80068f0 <TIM_Base_SetConfig+0x134>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d013      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067da:	d00f      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a45      	ldr	r2, [pc, #276]	@ (80068f4 <TIM_Base_SetConfig+0x138>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00b      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a44      	ldr	r2, [pc, #272]	@ (80068f8 <TIM_Base_SetConfig+0x13c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d007      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a43      	ldr	r2, [pc, #268]	@ (80068fc <TIM_Base_SetConfig+0x140>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a42      	ldr	r2, [pc, #264]	@ (8006900 <TIM_Base_SetConfig+0x144>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d108      	bne.n	800680e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a37      	ldr	r2, [pc, #220]	@ (80068f0 <TIM_Base_SetConfig+0x134>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01f      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800681c:	d01b      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a34      	ldr	r2, [pc, #208]	@ (80068f4 <TIM_Base_SetConfig+0x138>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d017      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a33      	ldr	r2, [pc, #204]	@ (80068f8 <TIM_Base_SetConfig+0x13c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d013      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a32      	ldr	r2, [pc, #200]	@ (80068fc <TIM_Base_SetConfig+0x140>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00f      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a32      	ldr	r2, [pc, #200]	@ (8006904 <TIM_Base_SetConfig+0x148>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00b      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a31      	ldr	r2, [pc, #196]	@ (8006908 <TIM_Base_SetConfig+0x14c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d007      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a30      	ldr	r2, [pc, #192]	@ (800690c <TIM_Base_SetConfig+0x150>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d003      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a2b      	ldr	r2, [pc, #172]	@ (8006900 <TIM_Base_SetConfig+0x144>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d108      	bne.n	8006868 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800685c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a18      	ldr	r2, [pc, #96]	@ (80068f0 <TIM_Base_SetConfig+0x134>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d013      	beq.n	80068bc <TIM_Base_SetConfig+0x100>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a19      	ldr	r2, [pc, #100]	@ (80068fc <TIM_Base_SetConfig+0x140>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00f      	beq.n	80068bc <TIM_Base_SetConfig+0x100>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a19      	ldr	r2, [pc, #100]	@ (8006904 <TIM_Base_SetConfig+0x148>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00b      	beq.n	80068bc <TIM_Base_SetConfig+0x100>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a18      	ldr	r2, [pc, #96]	@ (8006908 <TIM_Base_SetConfig+0x14c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d007      	beq.n	80068bc <TIM_Base_SetConfig+0x100>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a17      	ldr	r2, [pc, #92]	@ (800690c <TIM_Base_SetConfig+0x150>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d003      	beq.n	80068bc <TIM_Base_SetConfig+0x100>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a12      	ldr	r2, [pc, #72]	@ (8006900 <TIM_Base_SetConfig+0x144>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d103      	bne.n	80068c4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	691a      	ldr	r2, [r3, #16]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d105      	bne.n	80068e2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f023 0201 	bic.w	r2, r3, #1
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	611a      	str	r2, [r3, #16]
  }
}
 80068e2:	bf00      	nop
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40000400 	.word	0x40000400
 80068f8:	40000800 	.word	0x40000800
 80068fc:	40013400 	.word	0x40013400
 8006900:	40015000 	.word	0x40015000
 8006904:	40014000 	.word	0x40014000
 8006908:	40014400 	.word	0x40014400
 800690c:	40014800 	.word	0x40014800

08006910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	f023 0201 	bic.w	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800693e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0303 	bic.w	r3, r3, #3
 800694a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f023 0302 	bic.w	r3, r3, #2
 800695c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a30      	ldr	r2, [pc, #192]	@ (8006a2c <TIM_OC1_SetConfig+0x11c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d013      	beq.n	8006998 <TIM_OC1_SetConfig+0x88>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a2f      	ldr	r2, [pc, #188]	@ (8006a30 <TIM_OC1_SetConfig+0x120>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00f      	beq.n	8006998 <TIM_OC1_SetConfig+0x88>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a2e      	ldr	r2, [pc, #184]	@ (8006a34 <TIM_OC1_SetConfig+0x124>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d00b      	beq.n	8006998 <TIM_OC1_SetConfig+0x88>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a2d      	ldr	r2, [pc, #180]	@ (8006a38 <TIM_OC1_SetConfig+0x128>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d007      	beq.n	8006998 <TIM_OC1_SetConfig+0x88>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a2c      	ldr	r2, [pc, #176]	@ (8006a3c <TIM_OC1_SetConfig+0x12c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d003      	beq.n	8006998 <TIM_OC1_SetConfig+0x88>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a2b      	ldr	r2, [pc, #172]	@ (8006a40 <TIM_OC1_SetConfig+0x130>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d10c      	bne.n	80069b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f023 0308 	bic.w	r3, r3, #8
 800699e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f023 0304 	bic.w	r3, r3, #4
 80069b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a2c <TIM_OC1_SetConfig+0x11c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d013      	beq.n	80069e2 <TIM_OC1_SetConfig+0xd2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006a30 <TIM_OC1_SetConfig+0x120>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00f      	beq.n	80069e2 <TIM_OC1_SetConfig+0xd2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a34 <TIM_OC1_SetConfig+0x124>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00b      	beq.n	80069e2 <TIM_OC1_SetConfig+0xd2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006a38 <TIM_OC1_SetConfig+0x128>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d007      	beq.n	80069e2 <TIM_OC1_SetConfig+0xd2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a19      	ldr	r2, [pc, #100]	@ (8006a3c <TIM_OC1_SetConfig+0x12c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d003      	beq.n	80069e2 <TIM_OC1_SetConfig+0xd2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a18      	ldr	r2, [pc, #96]	@ (8006a40 <TIM_OC1_SetConfig+0x130>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d111      	bne.n	8006a06 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	621a      	str	r2, [r3, #32]
}
 8006a20:	bf00      	nop
 8006a22:	371c      	adds	r7, #28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	40012c00 	.word	0x40012c00
 8006a30:	40013400 	.word	0x40013400
 8006a34:	40014000 	.word	0x40014000
 8006a38:	40014400 	.word	0x40014400
 8006a3c:	40014800 	.word	0x40014800
 8006a40:	40015000 	.word	0x40015000

08006a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	f023 0210 	bic.w	r2, r3, #16
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	021b      	lsls	r3, r3, #8
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 0320 	bic.w	r3, r3, #32
 8006a92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	011b      	lsls	r3, r3, #4
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8006b54 <TIM_OC2_SetConfig+0x110>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d007      	beq.n	8006ab8 <TIM_OC2_SetConfig+0x74>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a2b      	ldr	r2, [pc, #172]	@ (8006b58 <TIM_OC2_SetConfig+0x114>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d003      	beq.n	8006ab8 <TIM_OC2_SetConfig+0x74>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8006b5c <TIM_OC2_SetConfig+0x118>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d10d      	bne.n	8006ad4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ad2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8006b54 <TIM_OC2_SetConfig+0x110>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d013      	beq.n	8006b04 <TIM_OC2_SetConfig+0xc0>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a1e      	ldr	r2, [pc, #120]	@ (8006b58 <TIM_OC2_SetConfig+0x114>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00f      	beq.n	8006b04 <TIM_OC2_SetConfig+0xc0>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b60 <TIM_OC2_SetConfig+0x11c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00b      	beq.n	8006b04 <TIM_OC2_SetConfig+0xc0>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a1d      	ldr	r2, [pc, #116]	@ (8006b64 <TIM_OC2_SetConfig+0x120>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d007      	beq.n	8006b04 <TIM_OC2_SetConfig+0xc0>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a1c      	ldr	r2, [pc, #112]	@ (8006b68 <TIM_OC2_SetConfig+0x124>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d003      	beq.n	8006b04 <TIM_OC2_SetConfig+0xc0>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a17      	ldr	r2, [pc, #92]	@ (8006b5c <TIM_OC2_SetConfig+0x118>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d113      	bne.n	8006b2c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b0a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b12:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	621a      	str	r2, [r3, #32]
}
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	40012c00 	.word	0x40012c00
 8006b58:	40013400 	.word	0x40013400
 8006b5c:	40015000 	.word	0x40015000
 8006b60:	40014000 	.word	0x40014000
 8006b64:	40014400 	.word	0x40014400
 8006b68:	40014800 	.word	0x40014800

08006b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	021b      	lsls	r3, r3, #8
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a2b      	ldr	r2, [pc, #172]	@ (8006c78 <TIM_OC3_SetConfig+0x10c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d007      	beq.n	8006bde <TIM_OC3_SetConfig+0x72>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c7c <TIM_OC3_SetConfig+0x110>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d003      	beq.n	8006bde <TIM_OC3_SetConfig+0x72>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a29      	ldr	r2, [pc, #164]	@ (8006c80 <TIM_OC3_SetConfig+0x114>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d10d      	bne.n	8006bfa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	021b      	lsls	r3, r3, #8
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bf8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8006c78 <TIM_OC3_SetConfig+0x10c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <TIM_OC3_SetConfig+0xbe>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a1d      	ldr	r2, [pc, #116]	@ (8006c7c <TIM_OC3_SetConfig+0x110>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00f      	beq.n	8006c2a <TIM_OC3_SetConfig+0xbe>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006c84 <TIM_OC3_SetConfig+0x118>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00b      	beq.n	8006c2a <TIM_OC3_SetConfig+0xbe>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a1c      	ldr	r2, [pc, #112]	@ (8006c88 <TIM_OC3_SetConfig+0x11c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d007      	beq.n	8006c2a <TIM_OC3_SetConfig+0xbe>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c8c <TIM_OC3_SetConfig+0x120>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_OC3_SetConfig+0xbe>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a16      	ldr	r2, [pc, #88]	@ (8006c80 <TIM_OC3_SetConfig+0x114>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d113      	bne.n	8006c52 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	011b      	lsls	r3, r3, #4
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	621a      	str	r2, [r3, #32]
}
 8006c6c:	bf00      	nop
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	40012c00 	.word	0x40012c00
 8006c7c:	40013400 	.word	0x40013400
 8006c80:	40015000 	.word	0x40015000
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40014400 	.word	0x40014400
 8006c8c:	40014800 	.word	0x40014800

08006c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	031b      	lsls	r3, r3, #12
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a1a      	ldr	r2, [pc, #104]	@ (8006d58 <TIM_OC4_SetConfig+0xc8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d013      	beq.n	8006d1c <TIM_OC4_SetConfig+0x8c>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a19      	ldr	r2, [pc, #100]	@ (8006d5c <TIM_OC4_SetConfig+0xcc>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00f      	beq.n	8006d1c <TIM_OC4_SetConfig+0x8c>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a18      	ldr	r2, [pc, #96]	@ (8006d60 <TIM_OC4_SetConfig+0xd0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00b      	beq.n	8006d1c <TIM_OC4_SetConfig+0x8c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a17      	ldr	r2, [pc, #92]	@ (8006d64 <TIM_OC4_SetConfig+0xd4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d007      	beq.n	8006d1c <TIM_OC4_SetConfig+0x8c>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a16      	ldr	r2, [pc, #88]	@ (8006d68 <TIM_OC4_SetConfig+0xd8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d003      	beq.n	8006d1c <TIM_OC4_SetConfig+0x8c>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a15      	ldr	r2, [pc, #84]	@ (8006d6c <TIM_OC4_SetConfig+0xdc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d109      	bne.n	8006d30 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	019b      	lsls	r3, r3, #6
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	621a      	str	r2, [r3, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40012c00 	.word	0x40012c00
 8006d5c:	40013400 	.word	0x40013400
 8006d60:	40014000 	.word	0x40014000
 8006d64:	40014400 	.word	0x40014400
 8006d68:	40014800 	.word	0x40014800
 8006d6c:	40015000 	.word	0x40015000

08006d70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006db4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	041b      	lsls	r3, r3, #16
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a19      	ldr	r2, [pc, #100]	@ (8006e2c <TIM_OC5_SetConfig+0xbc>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d013      	beq.n	8006df2 <TIM_OC5_SetConfig+0x82>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a18      	ldr	r2, [pc, #96]	@ (8006e30 <TIM_OC5_SetConfig+0xc0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00f      	beq.n	8006df2 <TIM_OC5_SetConfig+0x82>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a17      	ldr	r2, [pc, #92]	@ (8006e34 <TIM_OC5_SetConfig+0xc4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d00b      	beq.n	8006df2 <TIM_OC5_SetConfig+0x82>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a16      	ldr	r2, [pc, #88]	@ (8006e38 <TIM_OC5_SetConfig+0xc8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d007      	beq.n	8006df2 <TIM_OC5_SetConfig+0x82>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a15      	ldr	r2, [pc, #84]	@ (8006e3c <TIM_OC5_SetConfig+0xcc>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d003      	beq.n	8006df2 <TIM_OC5_SetConfig+0x82>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a14      	ldr	r2, [pc, #80]	@ (8006e40 <TIM_OC5_SetConfig+0xd0>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d109      	bne.n	8006e06 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006df8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	621a      	str	r2, [r3, #32]
}
 8006e20:	bf00      	nop
 8006e22:	371c      	adds	r7, #28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	40012c00 	.word	0x40012c00
 8006e30:	40013400 	.word	0x40013400
 8006e34:	40014000 	.word	0x40014000
 8006e38:	40014400 	.word	0x40014400
 8006e3c:	40014800 	.word	0x40014800
 8006e40:	40015000 	.word	0x40015000

08006e44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	021b      	lsls	r3, r3, #8
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	051b      	lsls	r3, r3, #20
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006f04 <TIM_OC6_SetConfig+0xc0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d013      	beq.n	8006ec8 <TIM_OC6_SetConfig+0x84>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a19      	ldr	r2, [pc, #100]	@ (8006f08 <TIM_OC6_SetConfig+0xc4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00f      	beq.n	8006ec8 <TIM_OC6_SetConfig+0x84>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a18      	ldr	r2, [pc, #96]	@ (8006f0c <TIM_OC6_SetConfig+0xc8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00b      	beq.n	8006ec8 <TIM_OC6_SetConfig+0x84>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a17      	ldr	r2, [pc, #92]	@ (8006f10 <TIM_OC6_SetConfig+0xcc>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d007      	beq.n	8006ec8 <TIM_OC6_SetConfig+0x84>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a16      	ldr	r2, [pc, #88]	@ (8006f14 <TIM_OC6_SetConfig+0xd0>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d003      	beq.n	8006ec8 <TIM_OC6_SetConfig+0x84>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a15      	ldr	r2, [pc, #84]	@ (8006f18 <TIM_OC6_SetConfig+0xd4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d109      	bne.n	8006edc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ece:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	029b      	lsls	r3, r3, #10
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40012c00 	.word	0x40012c00
 8006f08:	40013400 	.word	0x40013400
 8006f0c:	40014000 	.word	0x40014000
 8006f10:	40014400 	.word	0x40014400
 8006f14:	40014800 	.word	0x40014800
 8006f18:	40015000 	.word	0x40015000

08006f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f003 031f 	and.w	r3, r3, #31
 8006f2e:	2201      	movs	r2, #1
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1a      	ldr	r2, [r3, #32]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	43db      	mvns	r3, r3
 8006f3e:	401a      	ands	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a1a      	ldr	r2, [r3, #32]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	fa01 f303 	lsl.w	r3, r1, r3
 8006f54:	431a      	orrs	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	621a      	str	r2, [r3, #32]
}
 8006f5a:	bf00      	nop
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e06d      	b.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a30      	ldr	r2, [pc, #192]	@ (8007068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d009      	beq.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a2f      	ldr	r2, [pc, #188]	@ (800706c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d004      	beq.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8007070 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d108      	bne.n	8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006fc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1e      	ldr	r2, [pc, #120]	@ (8007068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d01d      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ffc:	d018      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a1c      	ldr	r2, [pc, #112]	@ (8007074 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d013      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a1a      	ldr	r2, [pc, #104]	@ (8007078 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00e      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a15      	ldr	r2, [pc, #84]	@ (800706c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d009      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a16      	ldr	r2, [pc, #88]	@ (800707c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d004      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a11      	ldr	r2, [pc, #68]	@ (8007070 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d10c      	bne.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	4313      	orrs	r3, r2
 8007040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	40012c00 	.word	0x40012c00
 800706c:	40013400 	.word	0x40013400
 8007070:	40015000 	.word	0x40015000
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800
 800707c:	40014000 	.word	0x40014000

08007080 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e040      	b.n	8007150 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d106      	bne.n	80070e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7fb f87a 	bl	80021d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2224      	movs	r2, #36	@ 0x24
 80070e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0201 	bic.w	r2, r2, #1
 80070f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa86 	bl	8007614 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f8af 	bl	800726c <UART_SetConfig>
 800710e:	4603      	mov	r3, r0
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e01b      	b.n	8007150 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689a      	ldr	r2, [r3, #8]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0201 	orr.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fb05 	bl	8007758 <UART_CheckIdleState>
 800714e:	4603      	mov	r3, r0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08a      	sub	sp, #40	@ 0x28
 800715c:	af02      	add	r7, sp, #8
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	4613      	mov	r3, r2
 8007166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800716c:	2b20      	cmp	r3, #32
 800716e:	d177      	bne.n	8007260 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <HAL_UART_Transmit+0x24>
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e070      	b.n	8007262 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2221      	movs	r2, #33	@ 0x21
 800718c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800718e:	f7fb fa31 	bl	80025f4 <HAL_GetTick>
 8007192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	88fa      	ldrh	r2, [r7, #6]
 8007198:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	88fa      	ldrh	r2, [r7, #6]
 80071a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ac:	d108      	bne.n	80071c0 <HAL_UART_Transmit+0x68>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	61bb      	str	r3, [r7, #24]
 80071be:	e003      	b.n	80071c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071c4:	2300      	movs	r3, #0
 80071c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071c8:	e02f      	b.n	800722a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2200      	movs	r2, #0
 80071d2:	2180      	movs	r1, #128	@ 0x80
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 fb67 	bl	80078a8 <UART_WaitOnFlagUntilTimeout>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d004      	beq.n	80071ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2220      	movs	r2, #32
 80071e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e03b      	b.n	8007262 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10b      	bne.n	8007208 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	881a      	ldrh	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071fc:	b292      	uxth	r2, r2
 80071fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	3302      	adds	r3, #2
 8007204:	61bb      	str	r3, [r7, #24]
 8007206:	e007      	b.n	8007218 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	781a      	ldrb	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	3301      	adds	r3, #1
 8007216:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1c9      	bne.n	80071ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2200      	movs	r2, #0
 800723e:	2140      	movs	r1, #64	@ 0x40
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fb31 	bl	80078a8 <UART_WaitOnFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d004      	beq.n	8007256 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2220      	movs	r2, #32
 8007250:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e005      	b.n	8007262 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	e000      	b.n	8007262 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007260:	2302      	movs	r3, #2
  }
}
 8007262:	4618      	mov	r0, r3
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b088      	sub	sp, #32
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	4313      	orrs	r3, r2
 800728e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4b92      	ldr	r3, [pc, #584]	@ (80074e0 <UART_SetConfig+0x274>)
 8007298:	4013      	ands	r3, r2
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6812      	ldr	r2, [r2, #0]
 800729e:	6979      	ldr	r1, [r7, #20]
 80072a0:	430b      	orrs	r3, r1
 80072a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	430a      	orrs	r2, r1
 80072dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a80      	ldr	r2, [pc, #512]	@ (80074e4 <UART_SetConfig+0x278>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d120      	bne.n	800732a <UART_SetConfig+0xbe>
 80072e8:	4b7f      	ldr	r3, [pc, #508]	@ (80074e8 <UART_SetConfig+0x27c>)
 80072ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ec:	f003 0303 	and.w	r3, r3, #3
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d817      	bhi.n	8007324 <UART_SetConfig+0xb8>
 80072f4:	a201      	add	r2, pc, #4	@ (adr r2, 80072fc <UART_SetConfig+0x90>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	0800730d 	.word	0x0800730d
 8007300:	08007319 	.word	0x08007319
 8007304:	0800731f 	.word	0x0800731f
 8007308:	08007313 	.word	0x08007313
 800730c:	2301      	movs	r3, #1
 800730e:	77fb      	strb	r3, [r7, #31]
 8007310:	e0b5      	b.n	800747e <UART_SetConfig+0x212>
 8007312:	2302      	movs	r3, #2
 8007314:	77fb      	strb	r3, [r7, #31]
 8007316:	e0b2      	b.n	800747e <UART_SetConfig+0x212>
 8007318:	2304      	movs	r3, #4
 800731a:	77fb      	strb	r3, [r7, #31]
 800731c:	e0af      	b.n	800747e <UART_SetConfig+0x212>
 800731e:	2308      	movs	r3, #8
 8007320:	77fb      	strb	r3, [r7, #31]
 8007322:	e0ac      	b.n	800747e <UART_SetConfig+0x212>
 8007324:	2310      	movs	r3, #16
 8007326:	77fb      	strb	r3, [r7, #31]
 8007328:	e0a9      	b.n	800747e <UART_SetConfig+0x212>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a6f      	ldr	r2, [pc, #444]	@ (80074ec <UART_SetConfig+0x280>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d124      	bne.n	800737e <UART_SetConfig+0x112>
 8007334:	4b6c      	ldr	r3, [pc, #432]	@ (80074e8 <UART_SetConfig+0x27c>)
 8007336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007338:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800733c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007340:	d011      	beq.n	8007366 <UART_SetConfig+0xfa>
 8007342:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007346:	d817      	bhi.n	8007378 <UART_SetConfig+0x10c>
 8007348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800734c:	d011      	beq.n	8007372 <UART_SetConfig+0x106>
 800734e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007352:	d811      	bhi.n	8007378 <UART_SetConfig+0x10c>
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <UART_SetConfig+0xf4>
 8007358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800735c:	d006      	beq.n	800736c <UART_SetConfig+0x100>
 800735e:	e00b      	b.n	8007378 <UART_SetConfig+0x10c>
 8007360:	2300      	movs	r3, #0
 8007362:	77fb      	strb	r3, [r7, #31]
 8007364:	e08b      	b.n	800747e <UART_SetConfig+0x212>
 8007366:	2302      	movs	r3, #2
 8007368:	77fb      	strb	r3, [r7, #31]
 800736a:	e088      	b.n	800747e <UART_SetConfig+0x212>
 800736c:	2304      	movs	r3, #4
 800736e:	77fb      	strb	r3, [r7, #31]
 8007370:	e085      	b.n	800747e <UART_SetConfig+0x212>
 8007372:	2308      	movs	r3, #8
 8007374:	77fb      	strb	r3, [r7, #31]
 8007376:	e082      	b.n	800747e <UART_SetConfig+0x212>
 8007378:	2310      	movs	r3, #16
 800737a:	77fb      	strb	r3, [r7, #31]
 800737c:	e07f      	b.n	800747e <UART_SetConfig+0x212>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a5b      	ldr	r2, [pc, #364]	@ (80074f0 <UART_SetConfig+0x284>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d124      	bne.n	80073d2 <UART_SetConfig+0x166>
 8007388:	4b57      	ldr	r3, [pc, #348]	@ (80074e8 <UART_SetConfig+0x27c>)
 800738a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007390:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007394:	d011      	beq.n	80073ba <UART_SetConfig+0x14e>
 8007396:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800739a:	d817      	bhi.n	80073cc <UART_SetConfig+0x160>
 800739c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80073a0:	d011      	beq.n	80073c6 <UART_SetConfig+0x15a>
 80073a2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80073a6:	d811      	bhi.n	80073cc <UART_SetConfig+0x160>
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <UART_SetConfig+0x148>
 80073ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073b0:	d006      	beq.n	80073c0 <UART_SetConfig+0x154>
 80073b2:	e00b      	b.n	80073cc <UART_SetConfig+0x160>
 80073b4:	2300      	movs	r3, #0
 80073b6:	77fb      	strb	r3, [r7, #31]
 80073b8:	e061      	b.n	800747e <UART_SetConfig+0x212>
 80073ba:	2302      	movs	r3, #2
 80073bc:	77fb      	strb	r3, [r7, #31]
 80073be:	e05e      	b.n	800747e <UART_SetConfig+0x212>
 80073c0:	2304      	movs	r3, #4
 80073c2:	77fb      	strb	r3, [r7, #31]
 80073c4:	e05b      	b.n	800747e <UART_SetConfig+0x212>
 80073c6:	2308      	movs	r3, #8
 80073c8:	77fb      	strb	r3, [r7, #31]
 80073ca:	e058      	b.n	800747e <UART_SetConfig+0x212>
 80073cc:	2310      	movs	r3, #16
 80073ce:	77fb      	strb	r3, [r7, #31]
 80073d0:	e055      	b.n	800747e <UART_SetConfig+0x212>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a47      	ldr	r2, [pc, #284]	@ (80074f4 <UART_SetConfig+0x288>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d124      	bne.n	8007426 <UART_SetConfig+0x1ba>
 80073dc:	4b42      	ldr	r3, [pc, #264]	@ (80074e8 <UART_SetConfig+0x27c>)
 80073de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80073e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073e8:	d011      	beq.n	800740e <UART_SetConfig+0x1a2>
 80073ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073ee:	d817      	bhi.n	8007420 <UART_SetConfig+0x1b4>
 80073f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073f4:	d011      	beq.n	800741a <UART_SetConfig+0x1ae>
 80073f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073fa:	d811      	bhi.n	8007420 <UART_SetConfig+0x1b4>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <UART_SetConfig+0x19c>
 8007400:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007404:	d006      	beq.n	8007414 <UART_SetConfig+0x1a8>
 8007406:	e00b      	b.n	8007420 <UART_SetConfig+0x1b4>
 8007408:	2300      	movs	r3, #0
 800740a:	77fb      	strb	r3, [r7, #31]
 800740c:	e037      	b.n	800747e <UART_SetConfig+0x212>
 800740e:	2302      	movs	r3, #2
 8007410:	77fb      	strb	r3, [r7, #31]
 8007412:	e034      	b.n	800747e <UART_SetConfig+0x212>
 8007414:	2304      	movs	r3, #4
 8007416:	77fb      	strb	r3, [r7, #31]
 8007418:	e031      	b.n	800747e <UART_SetConfig+0x212>
 800741a:	2308      	movs	r3, #8
 800741c:	77fb      	strb	r3, [r7, #31]
 800741e:	e02e      	b.n	800747e <UART_SetConfig+0x212>
 8007420:	2310      	movs	r3, #16
 8007422:	77fb      	strb	r3, [r7, #31]
 8007424:	e02b      	b.n	800747e <UART_SetConfig+0x212>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a33      	ldr	r2, [pc, #204]	@ (80074f8 <UART_SetConfig+0x28c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d124      	bne.n	800747a <UART_SetConfig+0x20e>
 8007430:	4b2d      	ldr	r3, [pc, #180]	@ (80074e8 <UART_SetConfig+0x27c>)
 8007432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007434:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007438:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800743c:	d011      	beq.n	8007462 <UART_SetConfig+0x1f6>
 800743e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007442:	d817      	bhi.n	8007474 <UART_SetConfig+0x208>
 8007444:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007448:	d011      	beq.n	800746e <UART_SetConfig+0x202>
 800744a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800744e:	d811      	bhi.n	8007474 <UART_SetConfig+0x208>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <UART_SetConfig+0x1f0>
 8007454:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007458:	d006      	beq.n	8007468 <UART_SetConfig+0x1fc>
 800745a:	e00b      	b.n	8007474 <UART_SetConfig+0x208>
 800745c:	2300      	movs	r3, #0
 800745e:	77fb      	strb	r3, [r7, #31]
 8007460:	e00d      	b.n	800747e <UART_SetConfig+0x212>
 8007462:	2302      	movs	r3, #2
 8007464:	77fb      	strb	r3, [r7, #31]
 8007466:	e00a      	b.n	800747e <UART_SetConfig+0x212>
 8007468:	2304      	movs	r3, #4
 800746a:	77fb      	strb	r3, [r7, #31]
 800746c:	e007      	b.n	800747e <UART_SetConfig+0x212>
 800746e:	2308      	movs	r3, #8
 8007470:	77fb      	strb	r3, [r7, #31]
 8007472:	e004      	b.n	800747e <UART_SetConfig+0x212>
 8007474:	2310      	movs	r3, #16
 8007476:	77fb      	strb	r3, [r7, #31]
 8007478:	e001      	b.n	800747e <UART_SetConfig+0x212>
 800747a:	2310      	movs	r3, #16
 800747c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007486:	d16b      	bne.n	8007560 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007488:	7ffb      	ldrb	r3, [r7, #31]
 800748a:	2b08      	cmp	r3, #8
 800748c:	d838      	bhi.n	8007500 <UART_SetConfig+0x294>
 800748e:	a201      	add	r2, pc, #4	@ (adr r2, 8007494 <UART_SetConfig+0x228>)
 8007490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074c1 	.word	0x080074c1
 800749c:	080074c9 	.word	0x080074c9
 80074a0:	08007501 	.word	0x08007501
 80074a4:	080074cf 	.word	0x080074cf
 80074a8:	08007501 	.word	0x08007501
 80074ac:	08007501 	.word	0x08007501
 80074b0:	08007501 	.word	0x08007501
 80074b4:	080074d7 	.word	0x080074d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074b8:	f7fe f87a 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 80074bc:	61b8      	str	r0, [r7, #24]
        break;
 80074be:	e024      	b.n	800750a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074c0:	f7fe f898 	bl	80055f4 <HAL_RCC_GetPCLK2Freq>
 80074c4:	61b8      	str	r0, [r7, #24]
        break;
 80074c6:	e020      	b.n	800750a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074c8:	4b0c      	ldr	r3, [pc, #48]	@ (80074fc <UART_SetConfig+0x290>)
 80074ca:	61bb      	str	r3, [r7, #24]
        break;
 80074cc:	e01d      	b.n	800750a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074ce:	f7fe f80f 	bl	80054f0 <HAL_RCC_GetSysClockFreq>
 80074d2:	61b8      	str	r0, [r7, #24]
        break;
 80074d4:	e019      	b.n	800750a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074da:	61bb      	str	r3, [r7, #24]
        break;
 80074dc:	e015      	b.n	800750a <UART_SetConfig+0x29e>
 80074de:	bf00      	nop
 80074e0:	efff69f3 	.word	0xefff69f3
 80074e4:	40013800 	.word	0x40013800
 80074e8:	40021000 	.word	0x40021000
 80074ec:	40004400 	.word	0x40004400
 80074f0:	40004800 	.word	0x40004800
 80074f4:	40004c00 	.word	0x40004c00
 80074f8:	40005000 	.word	0x40005000
 80074fc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	77bb      	strb	r3, [r7, #30]
        break;
 8007508:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d073      	beq.n	80075f8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	005a      	lsls	r2, r3, #1
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	085b      	lsrs	r3, r3, #1
 800751a:	441a      	add	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	fbb2 f3f3 	udiv	r3, r2, r3
 8007524:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	2b0f      	cmp	r3, #15
 800752a:	d916      	bls.n	800755a <UART_SetConfig+0x2ee>
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007532:	d212      	bcs.n	800755a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	b29b      	uxth	r3, r3
 8007538:	f023 030f 	bic.w	r3, r3, #15
 800753c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	085b      	lsrs	r3, r3, #1
 8007542:	b29b      	uxth	r3, r3
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	b29a      	uxth	r2, r3
 800754a:	89fb      	ldrh	r3, [r7, #14]
 800754c:	4313      	orrs	r3, r2
 800754e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	89fa      	ldrh	r2, [r7, #14]
 8007556:	60da      	str	r2, [r3, #12]
 8007558:	e04e      	b.n	80075f8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	77bb      	strb	r3, [r7, #30]
 800755e:	e04b      	b.n	80075f8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007560:	7ffb      	ldrb	r3, [r7, #31]
 8007562:	2b08      	cmp	r3, #8
 8007564:	d827      	bhi.n	80075b6 <UART_SetConfig+0x34a>
 8007566:	a201      	add	r2, pc, #4	@ (adr r2, 800756c <UART_SetConfig+0x300>)
 8007568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756c:	08007591 	.word	0x08007591
 8007570:	08007599 	.word	0x08007599
 8007574:	080075a1 	.word	0x080075a1
 8007578:	080075b7 	.word	0x080075b7
 800757c:	080075a7 	.word	0x080075a7
 8007580:	080075b7 	.word	0x080075b7
 8007584:	080075b7 	.word	0x080075b7
 8007588:	080075b7 	.word	0x080075b7
 800758c:	080075af 	.word	0x080075af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007590:	f7fe f80e 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 8007594:	61b8      	str	r0, [r7, #24]
        break;
 8007596:	e013      	b.n	80075c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007598:	f7fe f82c 	bl	80055f4 <HAL_RCC_GetPCLK2Freq>
 800759c:	61b8      	str	r0, [r7, #24]
        break;
 800759e:	e00f      	b.n	80075c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007610 <UART_SetConfig+0x3a4>)
 80075a2:	61bb      	str	r3, [r7, #24]
        break;
 80075a4:	e00c      	b.n	80075c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075a6:	f7fd ffa3 	bl	80054f0 <HAL_RCC_GetSysClockFreq>
 80075aa:	61b8      	str	r0, [r7, #24]
        break;
 80075ac:	e008      	b.n	80075c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075b2:	61bb      	str	r3, [r7, #24]
        break;
 80075b4:	e004      	b.n	80075c0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	77bb      	strb	r3, [r7, #30]
        break;
 80075be:	bf00      	nop
    }

    if (pclk != 0U)
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d018      	beq.n	80075f8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	085a      	lsrs	r2, r3, #1
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	441a      	add	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	2b0f      	cmp	r3, #15
 80075de:	d909      	bls.n	80075f4 <UART_SetConfig+0x388>
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075e6:	d205      	bcs.n	80075f4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	60da      	str	r2, [r3, #12]
 80075f2:	e001      	b.n	80075f8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007604:	7fbb      	ldrb	r3, [r7, #30]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3720      	adds	r7, #32
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	007a1200 	.word	0x007a1200

08007614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007620:	f003 0308 	and.w	r3, r3, #8
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00a      	beq.n	800763e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00a      	beq.n	8007682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007686:	f003 0304 	and.w	r3, r3, #4
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a8:	f003 0310 	and.w	r3, r3, #16
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00a      	beq.n	80076c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01a      	beq.n	800772a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800770e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007712:	d10a      	bne.n	800772a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800772e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	605a      	str	r2, [r3, #4]
  }
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b098      	sub	sp, #96	@ 0x60
 800775c:	af02      	add	r7, sp, #8
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007768:	f7fa ff44 	bl	80025f4 <HAL_GetTick>
 800776c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0308 	and.w	r3, r3, #8
 8007778:	2b08      	cmp	r3, #8
 800777a:	d12e      	bne.n	80077da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800777c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007784:	2200      	movs	r2, #0
 8007786:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f88c 	bl	80078a8 <UART_WaitOnFlagUntilTimeout>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d021      	beq.n	80077da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80077b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e6      	bne.n	8007796 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2220      	movs	r2, #32
 80077cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e062      	b.n	80078a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	d149      	bne.n	800787c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077f0:	2200      	movs	r2, #0
 80077f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f856 	bl	80078a8 <UART_WaitOnFlagUntilTimeout>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d03c      	beq.n	800787c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780a:	e853 3f00 	ldrex	r3, [r3]
 800780e:	623b      	str	r3, [r7, #32]
   return(result);
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	461a      	mov	r2, r3
 800781e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007820:	633b      	str	r3, [r7, #48]	@ 0x30
 8007822:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007824:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007828:	e841 2300 	strex	r3, r2, [r1]
 800782c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800782e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e6      	bne.n	8007802 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3308      	adds	r3, #8
 800783a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	60fb      	str	r3, [r7, #12]
   return(result);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0301 	bic.w	r3, r3, #1
 800784a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3308      	adds	r3, #8
 8007852:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007854:	61fa      	str	r2, [r7, #28]
 8007856:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007858:	69b9      	ldr	r1, [r7, #24]
 800785a:	69fa      	ldr	r2, [r7, #28]
 800785c:	e841 2300 	strex	r3, r2, [r1]
 8007860:	617b      	str	r3, [r7, #20]
   return(result);
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e5      	bne.n	8007834 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2220      	movs	r2, #32
 800786c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e011      	b.n	80078a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2220      	movs	r2, #32
 8007886:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3758      	adds	r7, #88	@ 0x58
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	4613      	mov	r3, r2
 80078b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b8:	e04f      	b.n	800795a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c0:	d04b      	beq.n	800795a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078c2:	f7fa fe97 	bl	80025f4 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d302      	bcc.n	80078d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e04e      	b.n	800797a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0304 	and.w	r3, r3, #4
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d037      	beq.n	800795a <UART_WaitOnFlagUntilTimeout+0xb2>
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2b80      	cmp	r3, #128	@ 0x80
 80078ee:	d034      	beq.n	800795a <UART_WaitOnFlagUntilTimeout+0xb2>
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b40      	cmp	r3, #64	@ 0x40
 80078f4:	d031      	beq.n	800795a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	f003 0308 	and.w	r3, r3, #8
 8007900:	2b08      	cmp	r3, #8
 8007902:	d110      	bne.n	8007926 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2208      	movs	r2, #8
 800790a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f838 	bl	8007982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2208      	movs	r2, #8
 8007916:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e029      	b.n	800797a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007930:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007934:	d111      	bne.n	800795a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800793e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 f81e 	bl	8007982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2220      	movs	r2, #32
 800794a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e00f      	b.n	800797a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69da      	ldr	r2, [r3, #28]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	4013      	ands	r3, r2
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	429a      	cmp	r2, r3
 8007968:	bf0c      	ite	eq
 800796a:	2301      	moveq	r3, #1
 800796c:	2300      	movne	r3, #0
 800796e:	b2db      	uxtb	r3, r3
 8007970:	461a      	mov	r2, r3
 8007972:	79fb      	ldrb	r3, [r7, #7]
 8007974:	429a      	cmp	r2, r3
 8007976:	d0a0      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007982:	b480      	push	{r7}
 8007984:	b095      	sub	sp, #84	@ 0x54
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800799e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	461a      	mov	r2, r3
 80079a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80079aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079b0:	e841 2300 	strex	r3, r2, [r1]
 80079b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e6      	bne.n	800798a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3308      	adds	r3, #8
 80079c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3308      	adds	r3, #8
 80079da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e5      	bne.n	80079bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d118      	bne.n	8007a2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f023 0310 	bic.w	r3, r3, #16
 8007a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a16:	61bb      	str	r3, [r7, #24]
 8007a18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1a:	6979      	ldr	r1, [r7, #20]
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	613b      	str	r3, [r7, #16]
   return(result);
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e6      	bne.n	80079f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007a3e:	bf00      	nop
 8007a40:	3754      	adds	r7, #84	@ 0x54
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a52:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007a56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	43db      	mvns	r3, r3
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	4013      	ands	r3, r2
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	1d3b      	adds	r3, r7, #4
 8007a8a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b0c2      	sub	sp, #264	@ 0x108
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aca:	6018      	str	r0, [r3, #0]
 8007acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	785b      	ldrb	r3, [r3, #1]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	f040 86b7 	bne.w	8008856 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	699a      	ldr	r2, [r3, #24]
 8007af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d908      	bls.n	8007b16 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007b14:	e007      	b.n	8007b26 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	7b1b      	ldrb	r3, [r3, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d13a      	bne.n	8007bac <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6959      	ldr	r1, [r3, #20]
 8007b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	88da      	ldrh	r2, [r3, #6]
 8007b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b58:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b5c:	6800      	ldr	r0, [r0, #0]
 8007b5e:	f001 fb83 	bl	8009268 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	613b      	str	r3, [r7, #16]
 8007b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	461a      	mov	r2, r3
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	4413      	add	r3, r2
 8007b84:	613b      	str	r3, [r7, #16]
 8007b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	00da      	lsls	r2, r3, #3
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	4413      	add	r3, r2
 8007b98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	801a      	strh	r2, [r3, #0]
 8007ba8:	f000 be1f 	b.w	80087ea <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	78db      	ldrb	r3, [r3, #3]
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	f040 8462 	bne.w	8008482 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6a1a      	ldr	r2, [r3, #32]
 8007bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	f240 83df 	bls.w	800839a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c02:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	441a      	add	r2, r3
 8007c20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c2c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6a1a      	ldr	r2, [r3, #32]
 8007c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c48:	1ad2      	subs	r2, r2, r3
 8007c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 81c7 	beq.w	800800c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	785b      	ldrb	r3, [r3, #1]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d177      	bne.n	8007d8a <USB_EPStartXfer+0x2ce>
 8007c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cba:	4413      	add	r3, r2
 8007cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	00da      	lsls	r2, r3, #3
 8007ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cce:	4413      	add	r3, r2
 8007cd0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce4:	801a      	strh	r2, [r3, #0]
 8007ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10a      	bne.n	8007d04 <USB_EPStartXfer+0x248>
 8007cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d00:	801a      	strh	r2, [r3, #0]
 8007d02:	e067      	b.n	8007dd4 <USB_EPStartXfer+0x318>
 8007d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d08:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d0a:	d81c      	bhi.n	8007d46 <USB_EPStartXfer+0x28a>
 8007d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d10:	085b      	lsrs	r3, r3, #1
 8007d12:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d004      	beq.n	8007d2c <USB_EPStartXfer+0x270>
 8007d22:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007d26:	3301      	adds	r3, #1
 8007d28:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2e:	881b      	ldrh	r3, [r3, #0]
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	029b      	lsls	r3, r3, #10
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d42:	801a      	strh	r2, [r3, #0]
 8007d44:	e046      	b.n	8007dd4 <USB_EPStartXfer+0x318>
 8007d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d4a:	095b      	lsrs	r3, r3, #5
 8007d4c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d54:	f003 031f 	and.w	r3, r3, #31
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d104      	bne.n	8007d66 <USB_EPStartXfer+0x2aa>
 8007d5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007d60:	3b01      	subs	r3, #1
 8007d62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	029b      	lsls	r3, r3, #10
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	4313      	orrs	r3, r2
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d86:	801a      	strh	r2, [r3, #0]
 8007d88:	e024      	b.n	8007dd4 <USB_EPStartXfer+0x318>
 8007d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	785b      	ldrb	r3, [r3, #1]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d11c      	bne.n	8007dd4 <USB_EPStartXfer+0x318>
 8007d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	461a      	mov	r2, r3
 8007dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dae:	4413      	add	r3, r2
 8007db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	00da      	lsls	r2, r3, #3
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	895b      	ldrh	r3, [r3, #10]
 8007de0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6959      	ldr	r1, [r3, #20]
 8007df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007dfa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007dfe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e02:	6800      	ldr	r0, [r0, #0]
 8007e04:	f001 fa30 	bl	8009268 <USB_WritePMA>
            ep->xfer_buff += len;
 8007e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	695a      	ldr	r2, [r3, #20]
 8007e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e18:	441a      	add	r2, r3
 8007e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6a1a      	ldr	r2, [r3, #32]
 8007e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d90f      	bls.n	8007e62 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6a1a      	ldr	r2, [r3, #32]
 8007e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e52:	1ad2      	subs	r2, r2, r3
 8007e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	621a      	str	r2, [r3, #32]
 8007e60:	e00e      	b.n	8007e80 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	785b      	ldrb	r3, [r3, #1]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d177      	bne.n	8007f80 <USB_EPStartXfer+0x4c4>
 8007e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	61bb      	str	r3, [r7, #24]
 8007e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	461a      	mov	r2, r3
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	61bb      	str	r3, [r7, #24]
 8007eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	00da      	lsls	r2, r3, #3
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	801a      	strh	r2, [r3, #0]
 8007edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10a      	bne.n	8007efa <USB_EPStartXfer+0x43e>
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	801a      	strh	r2, [r3, #0]
 8007ef8:	e06d      	b.n	8007fd6 <USB_EPStartXfer+0x51a>
 8007efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efe:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f00:	d81c      	bhi.n	8007f3c <USB_EPStartXfer+0x480>
 8007f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f06:	085b      	lsrs	r3, r3, #1
 8007f08:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d004      	beq.n	8007f22 <USB_EPStartXfer+0x466>
 8007f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	029b      	lsls	r3, r3, #10
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	4313      	orrs	r3, r2
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	801a      	strh	r2, [r3, #0]
 8007f3a:	e04c      	b.n	8007fd6 <USB_EPStartXfer+0x51a>
 8007f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f40:	095b      	lsrs	r3, r3, #5
 8007f42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f4a:	f003 031f 	and.w	r3, r3, #31
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d104      	bne.n	8007f5c <USB_EPStartXfer+0x4a0>
 8007f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f56:	3b01      	subs	r3, #1
 8007f58:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	029b      	lsls	r3, r3, #10
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	801a      	strh	r2, [r3, #0]
 8007f7e:	e02a      	b.n	8007fd6 <USB_EPStartXfer+0x51a>
 8007f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	785b      	ldrb	r3, [r3, #1]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d122      	bne.n	8007fd6 <USB_EPStartXfer+0x51a>
 8007f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	623b      	str	r3, [r7, #32]
 8007f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	461a      	mov	r2, r3
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	623b      	str	r3, [r7, #32]
 8007fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	00da      	lsls	r2, r3, #3
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007fca:	61fb      	str	r3, [r7, #28]
 8007fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	891b      	ldrh	r3, [r3, #8]
 8007fe2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6959      	ldr	r1, [r3, #20]
 8007ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007ffc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008000:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008004:	6800      	ldr	r0, [r0, #0]
 8008006:	f001 f92f 	bl	8009268 <USB_WritePMA>
 800800a:	e3ee      	b.n	80087ea <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800800c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	785b      	ldrb	r3, [r3, #1]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d177      	bne.n	800810c <USB_EPStartXfer+0x650>
 800801c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008020:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008036:	b29b      	uxth	r3, r3
 8008038:	461a      	mov	r2, r3
 800803a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800803c:	4413      	add	r3, r2
 800803e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	00da      	lsls	r2, r3, #3
 800804e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008050:	4413      	add	r3, r2
 8008052:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008056:	647b      	str	r3, [r7, #68]	@ 0x44
 8008058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008062:	b29a      	uxth	r2, r3
 8008064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008066:	801a      	strh	r2, [r3, #0]
 8008068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10a      	bne.n	8008086 <USB_EPStartXfer+0x5ca>
 8008070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	b29b      	uxth	r3, r3
 8008076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800807a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800807e:	b29a      	uxth	r2, r3
 8008080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	e06d      	b.n	8008162 <USB_EPStartXfer+0x6a6>
 8008086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808a:	2b3e      	cmp	r3, #62	@ 0x3e
 800808c:	d81c      	bhi.n	80080c8 <USB_EPStartXfer+0x60c>
 800808e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008092:	085b      	lsrs	r3, r3, #1
 8008094:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d004      	beq.n	80080ae <USB_EPStartXfer+0x5f2>
 80080a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80080a8:	3301      	adds	r3, #1
 80080aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80080ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	029b      	lsls	r3, r3, #10
 80080bc:	b29b      	uxth	r3, r3
 80080be:	4313      	orrs	r3, r2
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080c4:	801a      	strh	r2, [r3, #0]
 80080c6:	e04c      	b.n	8008162 <USB_EPStartXfer+0x6a6>
 80080c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080cc:	095b      	lsrs	r3, r3, #5
 80080ce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80080d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d6:	f003 031f 	and.w	r3, r3, #31
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d104      	bne.n	80080e8 <USB_EPStartXfer+0x62c>
 80080de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80080e2:	3b01      	subs	r3, #1
 80080e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80080e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	029b      	lsls	r3, r3, #10
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	4313      	orrs	r3, r2
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008104:	b29a      	uxth	r2, r3
 8008106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008108:	801a      	strh	r2, [r3, #0]
 800810a:	e02a      	b.n	8008162 <USB_EPStartXfer+0x6a6>
 800810c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	785b      	ldrb	r3, [r3, #1]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d122      	bne.n	8008162 <USB_EPStartXfer+0x6a6>
 800811c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	653b      	str	r3, [r7, #80]	@ 0x50
 8008128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008136:	b29b      	uxth	r3, r3
 8008138:	461a      	mov	r2, r3
 800813a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800813c:	4413      	add	r3, r2
 800813e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	00da      	lsls	r2, r3, #3
 800814e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008150:	4413      	add	r3, r2
 8008152:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815c:	b29a      	uxth	r2, r3
 800815e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008160:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	891b      	ldrh	r3, [r3, #8]
 800816e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6959      	ldr	r1, [r3, #20]
 800817e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008182:	b29b      	uxth	r3, r3
 8008184:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008188:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800818c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008190:	6800      	ldr	r0, [r0, #0]
 8008192:	f001 f869 	bl	8009268 <USB_WritePMA>
            ep->xfer_buff += len;
 8008196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800819a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	695a      	ldr	r2, [r3, #20]
 80081a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a6:	441a      	add	r2, r3
 80081a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80081b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6a1a      	ldr	r2, [r3, #32]
 80081c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d90f      	bls.n	80081f0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80081d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6a1a      	ldr	r2, [r3, #32]
 80081dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e0:	1ad2      	subs	r2, r2, r3
 80081e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	621a      	str	r2, [r3, #32]
 80081ee:	e00e      	b.n	800820e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80081f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2200      	movs	r2, #0
 800820c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800820e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008212:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	643b      	str	r3, [r7, #64]	@ 0x40
 800821a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800821e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	785b      	ldrb	r3, [r3, #1]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d177      	bne.n	800831a <USB_EPStartXfer+0x85e>
 800822a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800822e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008244:	b29b      	uxth	r3, r3
 8008246:	461a      	mov	r2, r3
 8008248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800824a:	4413      	add	r3, r2
 800824c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800824e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	00da      	lsls	r2, r3, #3
 800825c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825e:	4413      	add	r3, r2
 8008260:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008264:	637b      	str	r3, [r7, #52]	@ 0x34
 8008266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b29b      	uxth	r3, r3
 800826c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008270:	b29a      	uxth	r2, r3
 8008272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008274:	801a      	strh	r2, [r3, #0]
 8008276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <USB_EPStartXfer+0x7d8>
 800827e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	b29b      	uxth	r3, r3
 8008284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800828c:	b29a      	uxth	r2, r3
 800828e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008290:	801a      	strh	r2, [r3, #0]
 8008292:	e067      	b.n	8008364 <USB_EPStartXfer+0x8a8>
 8008294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008298:	2b3e      	cmp	r3, #62	@ 0x3e
 800829a:	d81c      	bhi.n	80082d6 <USB_EPStartXfer+0x81a>
 800829c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a0:	085b      	lsrs	r3, r3, #1
 80082a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80082a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d004      	beq.n	80082bc <USB_EPStartXfer+0x800>
 80082b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082b6:	3301      	adds	r3, #1
 80082b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80082bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	029b      	lsls	r3, r3, #10
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4313      	orrs	r3, r2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d2:	801a      	strh	r2, [r3, #0]
 80082d4:	e046      	b.n	8008364 <USB_EPStartXfer+0x8a8>
 80082d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082da:	095b      	lsrs	r3, r3, #5
 80082dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80082e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e4:	f003 031f 	and.w	r3, r3, #31
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d104      	bne.n	80082f6 <USB_EPStartXfer+0x83a>
 80082ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082f0:	3b01      	subs	r3, #1
 80082f2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80082f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008300:	b29b      	uxth	r3, r3
 8008302:	029b      	lsls	r3, r3, #10
 8008304:	b29b      	uxth	r3, r3
 8008306:	4313      	orrs	r3, r2
 8008308:	b29b      	uxth	r3, r3
 800830a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800830e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008312:	b29a      	uxth	r2, r3
 8008314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008316:	801a      	strh	r2, [r3, #0]
 8008318:	e024      	b.n	8008364 <USB_EPStartXfer+0x8a8>
 800831a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800831e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	785b      	ldrb	r3, [r3, #1]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d11c      	bne.n	8008364 <USB_EPStartXfer+0x8a8>
 800832a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800832e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008338:	b29b      	uxth	r3, r3
 800833a:	461a      	mov	r2, r3
 800833c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800833e:	4413      	add	r3, r2
 8008340:	643b      	str	r3, [r7, #64]	@ 0x40
 8008342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	00da      	lsls	r2, r3, #3
 8008350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008352:	4413      	add	r3, r2
 8008354:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800835a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800835e:	b29a      	uxth	r2, r3
 8008360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008362:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	895b      	ldrh	r3, [r3, #10]
 8008370:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6959      	ldr	r1, [r3, #20]
 8008380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008384:	b29b      	uxth	r3, r3
 8008386:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800838a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800838e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008392:	6800      	ldr	r0, [r0, #0]
 8008394:	f000 ff68 	bl	8009268 <USB_WritePMA>
 8008398:	e227      	b.n	80087ea <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800839a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800839e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80083aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80083cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083d0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80083d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	441a      	add	r2, r3
 80083ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80083f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008402:	b29b      	uxth	r3, r3
 8008404:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008416:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008420:	b29b      	uxth	r3, r3
 8008422:	461a      	mov	r2, r3
 8008424:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008426:	4413      	add	r3, r2
 8008428:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800842a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	00da      	lsls	r2, r3, #3
 8008438:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800843a:	4413      	add	r3, r2
 800843c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008440:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008446:	b29a      	uxth	r2, r3
 8008448:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800844a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800844c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	891b      	ldrh	r3, [r3, #8]
 8008458:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800845c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6959      	ldr	r1, [r3, #20]
 8008468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800846c:	b29b      	uxth	r3, r3
 800846e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008472:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008476:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800847a:	6800      	ldr	r0, [r0, #0]
 800847c:	f000 fef4 	bl	8009268 <USB_WritePMA>
 8008480:	e1b3      	b.n	80087ea <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6a1a      	ldr	r2, [r3, #32]
 800848e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008492:	1ad2      	subs	r2, r2, r3
 8008494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80084a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	881b      	ldrh	r3, [r3, #0]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 80c6 	beq.w	8008654 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80084c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80084d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d177      	bne.n	80085d4 <USB_EPStartXfer+0xb18>
 80084e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084fe:	b29b      	uxth	r3, r3
 8008500:	461a      	mov	r2, r3
 8008502:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008504:	4413      	add	r3, r2
 8008506:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	00da      	lsls	r2, r3, #3
 8008516:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008518:	4413      	add	r3, r2
 800851a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800851e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008520:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b29b      	uxth	r3, r3
 8008526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800852a:	b29a      	uxth	r2, r3
 800852c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800852e:	801a      	strh	r2, [r3, #0]
 8008530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10a      	bne.n	800854e <USB_EPStartXfer+0xa92>
 8008538:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	b29b      	uxth	r3, r3
 800853e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008546:	b29a      	uxth	r2, r3
 8008548:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800854a:	801a      	strh	r2, [r3, #0]
 800854c:	e067      	b.n	800861e <USB_EPStartXfer+0xb62>
 800854e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008552:	2b3e      	cmp	r3, #62	@ 0x3e
 8008554:	d81c      	bhi.n	8008590 <USB_EPStartXfer+0xad4>
 8008556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800855a:	085b      	lsrs	r3, r3, #1
 800855c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	d004      	beq.n	8008576 <USB_EPStartXfer+0xaba>
 800856c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008570:	3301      	adds	r3, #1
 8008572:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008576:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	b29a      	uxth	r2, r3
 800857c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008580:	b29b      	uxth	r3, r3
 8008582:	029b      	lsls	r3, r3, #10
 8008584:	b29b      	uxth	r3, r3
 8008586:	4313      	orrs	r3, r2
 8008588:	b29a      	uxth	r2, r3
 800858a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800858c:	801a      	strh	r2, [r3, #0]
 800858e:	e046      	b.n	800861e <USB_EPStartXfer+0xb62>
 8008590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008594:	095b      	lsrs	r3, r3, #5
 8008596:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800859a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800859e:	f003 031f 	and.w	r3, r3, #31
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d104      	bne.n	80085b0 <USB_EPStartXfer+0xaf4>
 80085a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80085aa:	3b01      	subs	r3, #1
 80085ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80085b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	029b      	lsls	r3, r3, #10
 80085be:	b29b      	uxth	r3, r3
 80085c0:	4313      	orrs	r3, r2
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085d0:	801a      	strh	r2, [r3, #0]
 80085d2:	e024      	b.n	800861e <USB_EPStartXfer+0xb62>
 80085d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	785b      	ldrb	r3, [r3, #1]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d11c      	bne.n	800861e <USB_EPStartXfer+0xb62>
 80085e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	461a      	mov	r2, r3
 80085f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80085f8:	4413      	add	r3, r2
 80085fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80085fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	00da      	lsls	r2, r3, #3
 800860a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800860c:	4413      	add	r3, r2
 800860e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008612:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008618:	b29a      	uxth	r2, r3
 800861a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800861c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800861e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	895b      	ldrh	r3, [r3, #10]
 800862a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800862e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6959      	ldr	r1, [r3, #20]
 800863a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800863e:	b29b      	uxth	r3, r3
 8008640:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008644:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008648:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800864c:	6800      	ldr	r0, [r0, #0]
 800864e:	f000 fe0b 	bl	8009268 <USB_WritePMA>
 8008652:	e0ca      	b.n	80087ea <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	785b      	ldrb	r3, [r3, #1]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d177      	bne.n	8008754 <USB_EPStartXfer+0xc98>
 8008664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008668:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800867e:	b29b      	uxth	r3, r3
 8008680:	461a      	mov	r2, r3
 8008682:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008684:	4413      	add	r3, r2
 8008686:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800868c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	00da      	lsls	r2, r3, #3
 8008696:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008698:	4413      	add	r3, r2
 800869a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800869e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086ae:	801a      	strh	r2, [r3, #0]
 80086b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10a      	bne.n	80086ce <USB_EPStartXfer+0xc12>
 80086b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086ca:	801a      	strh	r2, [r3, #0]
 80086cc:	e073      	b.n	80087b6 <USB_EPStartXfer+0xcfa>
 80086ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80086d4:	d81c      	bhi.n	8008710 <USB_EPStartXfer+0xc54>
 80086d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086da:	085b      	lsrs	r3, r3, #1
 80086dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80086e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d004      	beq.n	80086f6 <USB_EPStartXfer+0xc3a>
 80086ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80086f0:	3301      	adds	r3, #1
 80086f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80086f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008700:	b29b      	uxth	r3, r3
 8008702:	029b      	lsls	r3, r3, #10
 8008704:	b29b      	uxth	r3, r3
 8008706:	4313      	orrs	r3, r2
 8008708:	b29a      	uxth	r2, r3
 800870a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800870c:	801a      	strh	r2, [r3, #0]
 800870e:	e052      	b.n	80087b6 <USB_EPStartXfer+0xcfa>
 8008710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008714:	095b      	lsrs	r3, r3, #5
 8008716:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800871a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800871e:	f003 031f 	and.w	r3, r3, #31
 8008722:	2b00      	cmp	r3, #0
 8008724:	d104      	bne.n	8008730 <USB_EPStartXfer+0xc74>
 8008726:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800872a:	3b01      	subs	r3, #1
 800872c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	b29a      	uxth	r2, r3
 8008736:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800873a:	b29b      	uxth	r3, r3
 800873c:	029b      	lsls	r3, r3, #10
 800873e:	b29b      	uxth	r3, r3
 8008740:	4313      	orrs	r3, r2
 8008742:	b29b      	uxth	r3, r3
 8008744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800874c:	b29a      	uxth	r2, r3
 800874e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008750:	801a      	strh	r2, [r3, #0]
 8008752:	e030      	b.n	80087b6 <USB_EPStartXfer+0xcfa>
 8008754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d128      	bne.n	80087b6 <USB_EPStartXfer+0xcfa>
 8008764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008776:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008780:	b29b      	uxth	r3, r3
 8008782:	461a      	mov	r2, r3
 8008784:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008788:	4413      	add	r3, r2
 800878a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800878e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	00da      	lsls	r2, r3, #3
 800879c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80087a0:	4413      	add	r3, r2
 80087a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80087a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80087b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80087b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	891b      	ldrh	r3, [r3, #8]
 80087c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6959      	ldr	r1, [r3, #20]
 80087d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80087dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80087e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80087e4:	6800      	ldr	r0, [r0, #0]
 80087e6:	f000 fd3f 	bl	8009268 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80087ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	b29b      	uxth	r3, r3
 8008808:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800880c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008810:	817b      	strh	r3, [r7, #10]
 8008812:	897b      	ldrh	r3, [r7, #10]
 8008814:	f083 0310 	eor.w	r3, r3, #16
 8008818:	817b      	strh	r3, [r7, #10]
 800881a:	897b      	ldrh	r3, [r7, #10]
 800881c:	f083 0320 	eor.w	r3, r3, #32
 8008820:	817b      	strh	r3, [r7, #10]
 8008822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	441a      	add	r2, r3
 800883c:	897b      	ldrh	r3, [r7, #10]
 800883e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008842:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800884a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800884e:	b29b      	uxth	r3, r3
 8008850:	8013      	strh	r3, [r2, #0]
 8008852:	f000 bcdf 	b.w	8009214 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800885a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	7b1b      	ldrb	r3, [r3, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	f040 80bc 	bne.w	80089e0 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800886c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	699a      	ldr	r2, [r3, #24]
 8008874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	429a      	cmp	r2, r3
 8008882:	d917      	bls.n	80088b4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	699a      	ldr	r2, [r3, #24]
 80088a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a4:	1ad2      	subs	r2, r2, r3
 80088a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	619a      	str	r2, [r3, #24]
 80088b2:	e00e      	b.n	80088d2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80088b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80088c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2200      	movs	r2, #0
 80088d0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80088d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80088e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	461a      	mov	r2, r3
 80088f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80088f6:	4413      	add	r3, r2
 80088f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80088fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	00da      	lsls	r2, r3, #3
 800890a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800890e:	4413      	add	r3, r2
 8008910:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008914:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008918:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	b29b      	uxth	r3, r3
 8008920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008924:	b29a      	uxth	r2, r3
 8008926:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800892a:	801a      	strh	r2, [r3, #0]
 800892c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10d      	bne.n	8008950 <USB_EPStartXfer+0xe94>
 8008934:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	b29b      	uxth	r3, r3
 800893c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008944:	b29a      	uxth	r2, r3
 8008946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800894a:	801a      	strh	r2, [r3, #0]
 800894c:	f000 bc28 	b.w	80091a0 <USB_EPStartXfer+0x16e4>
 8008950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008954:	2b3e      	cmp	r3, #62	@ 0x3e
 8008956:	d81f      	bhi.n	8008998 <USB_EPStartXfer+0xedc>
 8008958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800895c:	085b      	lsrs	r3, r3, #1
 800895e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	2b00      	cmp	r3, #0
 800896c:	d004      	beq.n	8008978 <USB_EPStartXfer+0xebc>
 800896e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008972:	3301      	adds	r3, #1
 8008974:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008978:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29a      	uxth	r2, r3
 8008980:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008984:	b29b      	uxth	r3, r3
 8008986:	029b      	lsls	r3, r3, #10
 8008988:	b29b      	uxth	r3, r3
 800898a:	4313      	orrs	r3, r2
 800898c:	b29a      	uxth	r2, r3
 800898e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008992:	801a      	strh	r2, [r3, #0]
 8008994:	f000 bc04 	b.w	80091a0 <USB_EPStartXfer+0x16e4>
 8008998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800899c:	095b      	lsrs	r3, r3, #5
 800899e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80089a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a6:	f003 031f 	and.w	r3, r3, #31
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d104      	bne.n	80089b8 <USB_EPStartXfer+0xefc>
 80089ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80089b2:	3b01      	subs	r3, #1
 80089b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80089b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	b29a      	uxth	r2, r3
 80089c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	029b      	lsls	r3, r3, #10
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	4313      	orrs	r3, r2
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089dc:	801a      	strh	r2, [r3, #0]
 80089de:	e3df      	b.n	80091a0 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80089e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	78db      	ldrb	r3, [r3, #3]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	f040 8218 	bne.w	8008e22 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80089f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	785b      	ldrb	r3, [r3, #1]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f040 809d 	bne.w	8008b3e <USB_EPStartXfer+0x1082>
 8008a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	461a      	mov	r2, r3
 8008a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a28:	4413      	add	r3, r2
 8008a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	00da      	lsls	r2, r3, #3
 8008a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a40:	4413      	add	r3, r2
 8008a42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a5c:	801a      	strh	r2, [r3, #0]
 8008a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10c      	bne.n	8008a88 <USB_EPStartXfer+0xfcc>
 8008a6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a84:	801a      	strh	r2, [r3, #0]
 8008a86:	e08f      	b.n	8008ba8 <USB_EPStartXfer+0x10ec>
 8008a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a96:	d826      	bhi.n	8008ae6 <USB_EPStartXfer+0x102a>
 8008a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	085b      	lsrs	r3, r3, #1
 8008aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d004      	beq.n	8008ac8 <USB_EPStartXfer+0x100c>
 8008abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	029b      	lsls	r3, r3, #10
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	4313      	orrs	r3, r2
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008ae2:	801a      	strh	r2, [r3, #0]
 8008ae4:	e060      	b.n	8008ba8 <USB_EPStartXfer+0x10ec>
 8008ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	095b      	lsrs	r3, r3, #5
 8008af4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	f003 031f 	and.w	r3, r3, #31
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d104      	bne.n	8008b16 <USB_EPStartXfer+0x105a>
 8008b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b10:	3b01      	subs	r3, #1
 8008b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	029b      	lsls	r3, r3, #10
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008b3a:	801a      	strh	r2, [r3, #0]
 8008b3c:	e034      	b.n	8008ba8 <USB_EPStartXfer+0x10ec>
 8008b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	785b      	ldrb	r3, [r3, #1]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d12c      	bne.n	8008ba8 <USB_EPStartXfer+0x10ec>
 8008b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b72:	4413      	add	r3, r2
 8008b74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	00da      	lsls	r2, r3, #3
 8008b86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008ba6:	801a      	strh	r2, [r3, #0]
 8008ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	785b      	ldrb	r3, [r3, #1]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f040 809d 	bne.w	8008d02 <USB_EPStartXfer+0x1246>
 8008bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	461a      	mov	r2, r3
 8008be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008bec:	4413      	add	r3, r2
 8008bee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	00da      	lsls	r2, r3, #3
 8008c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c04:	4413      	add	r3, r2
 8008c06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008c0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c20:	801a      	strh	r2, [r3, #0]
 8008c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10c      	bne.n	8008c4c <USB_EPStartXfer+0x1190>
 8008c32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c48:	801a      	strh	r2, [r3, #0]
 8008c4a:	e088      	b.n	8008d5e <USB_EPStartXfer+0x12a2>
 8008c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c5a:	d826      	bhi.n	8008caa <USB_EPStartXfer+0x11ee>
 8008c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	085b      	lsrs	r3, r3, #1
 8008c6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d004      	beq.n	8008c8c <USB_EPStartXfer+0x11d0>
 8008c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c86:	3301      	adds	r3, #1
 8008c88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	029b      	lsls	r3, r3, #10
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ca6:	801a      	strh	r2, [r3, #0]
 8008ca8:	e059      	b.n	8008d5e <USB_EPStartXfer+0x12a2>
 8008caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	095b      	lsrs	r3, r3, #5
 8008cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	f003 031f 	and.w	r3, r3, #31
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d104      	bne.n	8008cda <USB_EPStartXfer+0x121e>
 8008cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008cda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	029b      	lsls	r3, r3, #10
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	4313      	orrs	r3, r2
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cfe:	801a      	strh	r2, [r3, #0]
 8008d00:	e02d      	b.n	8008d5e <USB_EPStartXfer+0x12a2>
 8008d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	785b      	ldrb	r3, [r3, #1]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d125      	bne.n	8008d5e <USB_EPStartXfer+0x12a2>
 8008d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	461a      	mov	r2, r3
 8008d24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008d28:	4413      	add	r3, r2
 8008d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	00da      	lsls	r2, r3, #3
 8008d3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008d40:	4413      	add	r3, r2
 8008d42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008d46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d5c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 8218 	beq.w	80091a0 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008d90:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008d94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d005      	beq.n	8008da8 <USB_EPStartXfer+0x12ec>
 8008d9c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10d      	bne.n	8008dc4 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008da8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008dac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f040 81f5 	bne.w	80091a0 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008db6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f040 81ee 	bne.w	80091a0 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	881b      	ldrh	r3, [r3, #0]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dea:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	441a      	add	r2, r3
 8008e08:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008e0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	8013      	strh	r3, [r2, #0]
 8008e20:	e1be      	b.n	80091a0 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	78db      	ldrb	r3, [r3, #3]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	f040 81b4 	bne.w	800919c <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	699a      	ldr	r2, [r3, #24]
 8008e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d917      	bls.n	8008e80 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8008e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	699a      	ldr	r2, [r3, #24]
 8008e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e70:	1ad2      	subs	r2, r2, r3
 8008e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	619a      	str	r2, [r3, #24]
 8008e7e:	e00e      	b.n	8008e9e <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8008e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	785b      	ldrb	r3, [r3, #1]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f040 8085 	bne.w	8008fba <USB_EPStartXfer+0x14fe>
 8008eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	00da      	lsls	r2, r3, #3
 8008ee8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008eec:	4413      	add	r3, r2
 8008eee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008ef2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ef6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008efa:	881b      	ldrh	r3, [r3, #0]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008f08:	801a      	strh	r2, [r3, #0]
 8008f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10c      	bne.n	8008f2c <USB_EPStartXfer+0x1470>
 8008f12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008f28:	801a      	strh	r2, [r3, #0]
 8008f2a:	e077      	b.n	800901c <USB_EPStartXfer+0x1560>
 8008f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f30:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f32:	d81e      	bhi.n	8008f72 <USB_EPStartXfer+0x14b6>
 8008f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f38:	085b      	lsrs	r3, r3, #1
 8008f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f42:	f003 0301 	and.w	r3, r3, #1
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d004      	beq.n	8008f54 <USB_EPStartXfer+0x1498>
 8008f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f4e:	3301      	adds	r3, #1
 8008f50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008f54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	029b      	lsls	r3, r3, #10
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	4313      	orrs	r3, r2
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008f6e:	801a      	strh	r2, [r3, #0]
 8008f70:	e054      	b.n	800901c <USB_EPStartXfer+0x1560>
 8008f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f76:	095b      	lsrs	r3, r3, #5
 8008f78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f80:	f003 031f 	and.w	r3, r3, #31
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d104      	bne.n	8008f92 <USB_EPStartXfer+0x14d6>
 8008f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	029b      	lsls	r3, r3, #10
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008fb6:	801a      	strh	r2, [r3, #0]
 8008fb8:	e030      	b.n	800901c <USB_EPStartXfer+0x1560>
 8008fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	785b      	ldrb	r3, [r3, #1]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d128      	bne.n	800901c <USB_EPStartXfer+0x1560>
 8008fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008fee:	4413      	add	r3, r2
 8008ff0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	00da      	lsls	r2, r3, #3
 8009002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009006:	4413      	add	r3, r2
 8009008:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800900c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009014:	b29a      	uxth	r2, r3
 8009016:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800901a:	801a      	strh	r2, [r3, #0]
 800901c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009020:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800902a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800902e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	785b      	ldrb	r3, [r3, #1]
 8009036:	2b00      	cmp	r3, #0
 8009038:	f040 8085 	bne.w	8009146 <USB_EPStartXfer+0x168a>
 800903c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009040:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800904a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800904e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009058:	b29b      	uxth	r3, r3
 800905a:	461a      	mov	r2, r3
 800905c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009060:	4413      	add	r3, r2
 8009062:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800906a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	00da      	lsls	r2, r3, #3
 8009074:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009078:	4413      	add	r3, r2
 800907a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800907e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	b29b      	uxth	r3, r3
 800908a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800908e:	b29a      	uxth	r2, r3
 8009090:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009094:	801a      	strh	r2, [r3, #0]
 8009096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10c      	bne.n	80090b8 <USB_EPStartXfer+0x15fc>
 800909e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80090b4:	801a      	strh	r2, [r3, #0]
 80090b6:	e073      	b.n	80091a0 <USB_EPStartXfer+0x16e4>
 80090b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80090be:	d81e      	bhi.n	80090fe <USB_EPStartXfer+0x1642>
 80090c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c4:	085b      	lsrs	r3, r3, #1
 80090c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80090ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d004      	beq.n	80090e0 <USB_EPStartXfer+0x1624>
 80090d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090da:	3301      	adds	r3, #1
 80090dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80090e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	029b      	lsls	r3, r3, #10
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	4313      	orrs	r3, r2
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80090fa:	801a      	strh	r2, [r3, #0]
 80090fc:	e050      	b.n	80091a0 <USB_EPStartXfer+0x16e4>
 80090fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009102:	095b      	lsrs	r3, r3, #5
 8009104:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800910c:	f003 031f 	and.w	r3, r3, #31
 8009110:	2b00      	cmp	r3, #0
 8009112:	d104      	bne.n	800911e <USB_EPStartXfer+0x1662>
 8009114:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009118:	3b01      	subs	r3, #1
 800911a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800911e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	b29a      	uxth	r2, r3
 8009126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800912a:	b29b      	uxth	r3, r3
 800912c:	029b      	lsls	r3, r3, #10
 800912e:	b29b      	uxth	r3, r3
 8009130:	4313      	orrs	r3, r2
 8009132:	b29b      	uxth	r3, r3
 8009134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800913c:	b29a      	uxth	r2, r3
 800913e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009142:	801a      	strh	r2, [r3, #0]
 8009144:	e02c      	b.n	80091a0 <USB_EPStartXfer+0x16e4>
 8009146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800914a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	785b      	ldrb	r3, [r3, #1]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d124      	bne.n	80091a0 <USB_EPStartXfer+0x16e4>
 8009156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800915a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009164:	b29b      	uxth	r3, r3
 8009166:	461a      	mov	r2, r3
 8009168:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800916c:	4413      	add	r3, r2
 800916e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	00da      	lsls	r2, r3, #3
 8009180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009184:	4413      	add	r3, r2
 8009186:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800918a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800918e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009192:	b29a      	uxth	r2, r3
 8009194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009198:	801a      	strh	r2, [r3, #0]
 800919a:	e001      	b.n	80091a0 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e03a      	b.n	8009216 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80091a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091c6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80091ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80091ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80091d2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80091d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80091da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80091de:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80091e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	441a      	add	r2, r3
 80091fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009200:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009204:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800920c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009210:	b29b      	uxth	r3, r3
 8009212:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800922c:	78fb      	ldrb	r3, [r7, #3]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d103      	bne.n	800923a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2280      	movs	r2, #128	@ 0x80
 8009236:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009256:	b29b      	uxth	r3, r3
 8009258:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800925a:	68fb      	ldr	r3, [r7, #12]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009268:	b480      	push	{r7}
 800926a:	b08b      	sub	sp, #44	@ 0x2c
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	4611      	mov	r1, r2
 8009274:	461a      	mov	r2, r3
 8009276:	460b      	mov	r3, r1
 8009278:	80fb      	strh	r3, [r7, #6]
 800927a:	4613      	mov	r3, r2
 800927c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800927e:	88bb      	ldrh	r3, [r7, #4]
 8009280:	3301      	adds	r3, #1
 8009282:	085b      	lsrs	r3, r3, #1
 8009284:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800928e:	88fa      	ldrh	r2, [r7, #6]
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	4413      	add	r3, r2
 8009294:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009298:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	627b      	str	r3, [r7, #36]	@ 0x24
 800929e:	e01b      	b.n	80092d8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	3301      	adds	r3, #1
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	021b      	lsls	r3, r3, #8
 80092ae:	b21a      	sxth	r2, r3
 80092b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	b21b      	sxth	r3, r3
 80092b8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	8a7a      	ldrh	r2, [r7, #18]
 80092be:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	3302      	adds	r3, #2
 80092c4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	3301      	adds	r3, #1
 80092ca:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	3301      	adds	r3, #1
 80092d0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80092d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d4:	3b01      	subs	r3, #1
 80092d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80092d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1e0      	bne.n	80092a0 <USB_WritePMA+0x38>
  }
}
 80092de:	bf00      	nop
 80092e0:	bf00      	nop
 80092e2:	372c      	adds	r7, #44	@ 0x2c
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b08b      	sub	sp, #44	@ 0x2c
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	4611      	mov	r1, r2
 80092f8:	461a      	mov	r2, r3
 80092fa:	460b      	mov	r3, r1
 80092fc:	80fb      	strh	r3, [r7, #6]
 80092fe:	4613      	mov	r3, r2
 8009300:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009302:	88bb      	ldrh	r3, [r7, #4]
 8009304:	085b      	lsrs	r3, r3, #1
 8009306:	b29b      	uxth	r3, r3
 8009308:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009312:	88fa      	ldrh	r2, [r7, #6]
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	4413      	add	r3, r2
 8009318:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800931c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	627b      	str	r3, [r7, #36]	@ 0x24
 8009322:	e018      	b.n	8009356 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	b29b      	uxth	r3, r3
 800932a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	3302      	adds	r3, #2
 8009330:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	b2da      	uxtb	r2, r3
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	3301      	adds	r3, #1
 800933e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	0a1b      	lsrs	r3, r3, #8
 8009344:	b2da      	uxtb	r2, r3
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	3301      	adds	r3, #1
 800934e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009352:	3b01      	subs	r3, #1
 8009354:	627b      	str	r3, [r7, #36]	@ 0x24
 8009356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e3      	bne.n	8009324 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800935c:	88bb      	ldrh	r3, [r7, #4]
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	b29b      	uxth	r3, r3
 8009364:	2b00      	cmp	r3, #0
 8009366:	d007      	beq.n	8009378 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	881b      	ldrh	r3, [r3, #0]
 800936c:	b29b      	uxth	r3, r3
 800936e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	b2da      	uxtb	r2, r3
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	701a      	strb	r2, [r3, #0]
  }
}
 8009378:	bf00      	nop
 800937a:	372c      	adds	r7, #44	@ 0x2c
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <__cvt>:
 8009384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	ec57 6b10 	vmov	r6, r7, d0
 800938c:	2f00      	cmp	r7, #0
 800938e:	460c      	mov	r4, r1
 8009390:	4619      	mov	r1, r3
 8009392:	463b      	mov	r3, r7
 8009394:	bfbb      	ittet	lt
 8009396:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800939a:	461f      	movlt	r7, r3
 800939c:	2300      	movge	r3, #0
 800939e:	232d      	movlt	r3, #45	@ 0x2d
 80093a0:	700b      	strb	r3, [r1, #0]
 80093a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80093a8:	4691      	mov	r9, r2
 80093aa:	f023 0820 	bic.w	r8, r3, #32
 80093ae:	bfbc      	itt	lt
 80093b0:	4632      	movlt	r2, r6
 80093b2:	4616      	movlt	r6, r2
 80093b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80093b8:	d005      	beq.n	80093c6 <__cvt+0x42>
 80093ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80093be:	d100      	bne.n	80093c2 <__cvt+0x3e>
 80093c0:	3401      	adds	r4, #1
 80093c2:	2102      	movs	r1, #2
 80093c4:	e000      	b.n	80093c8 <__cvt+0x44>
 80093c6:	2103      	movs	r1, #3
 80093c8:	ab03      	add	r3, sp, #12
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	ab02      	add	r3, sp, #8
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	ec47 6b10 	vmov	d0, r6, r7
 80093d4:	4653      	mov	r3, sl
 80093d6:	4622      	mov	r2, r4
 80093d8:	f000 fe5a 	bl	800a090 <_dtoa_r>
 80093dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80093e0:	4605      	mov	r5, r0
 80093e2:	d119      	bne.n	8009418 <__cvt+0x94>
 80093e4:	f019 0f01 	tst.w	r9, #1
 80093e8:	d00e      	beq.n	8009408 <__cvt+0x84>
 80093ea:	eb00 0904 	add.w	r9, r0, r4
 80093ee:	2200      	movs	r2, #0
 80093f0:	2300      	movs	r3, #0
 80093f2:	4630      	mov	r0, r6
 80093f4:	4639      	mov	r1, r7
 80093f6:	f7f7 fb6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80093fa:	b108      	cbz	r0, 8009400 <__cvt+0x7c>
 80093fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009400:	2230      	movs	r2, #48	@ 0x30
 8009402:	9b03      	ldr	r3, [sp, #12]
 8009404:	454b      	cmp	r3, r9
 8009406:	d31e      	bcc.n	8009446 <__cvt+0xc2>
 8009408:	9b03      	ldr	r3, [sp, #12]
 800940a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800940c:	1b5b      	subs	r3, r3, r5
 800940e:	4628      	mov	r0, r5
 8009410:	6013      	str	r3, [r2, #0]
 8009412:	b004      	add	sp, #16
 8009414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009418:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800941c:	eb00 0904 	add.w	r9, r0, r4
 8009420:	d1e5      	bne.n	80093ee <__cvt+0x6a>
 8009422:	7803      	ldrb	r3, [r0, #0]
 8009424:	2b30      	cmp	r3, #48	@ 0x30
 8009426:	d10a      	bne.n	800943e <__cvt+0xba>
 8009428:	2200      	movs	r2, #0
 800942a:	2300      	movs	r3, #0
 800942c:	4630      	mov	r0, r6
 800942e:	4639      	mov	r1, r7
 8009430:	f7f7 fb52 	bl	8000ad8 <__aeabi_dcmpeq>
 8009434:	b918      	cbnz	r0, 800943e <__cvt+0xba>
 8009436:	f1c4 0401 	rsb	r4, r4, #1
 800943a:	f8ca 4000 	str.w	r4, [sl]
 800943e:	f8da 3000 	ldr.w	r3, [sl]
 8009442:	4499      	add	r9, r3
 8009444:	e7d3      	b.n	80093ee <__cvt+0x6a>
 8009446:	1c59      	adds	r1, r3, #1
 8009448:	9103      	str	r1, [sp, #12]
 800944a:	701a      	strb	r2, [r3, #0]
 800944c:	e7d9      	b.n	8009402 <__cvt+0x7e>

0800944e <__exponent>:
 800944e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009450:	2900      	cmp	r1, #0
 8009452:	bfba      	itte	lt
 8009454:	4249      	neglt	r1, r1
 8009456:	232d      	movlt	r3, #45	@ 0x2d
 8009458:	232b      	movge	r3, #43	@ 0x2b
 800945a:	2909      	cmp	r1, #9
 800945c:	7002      	strb	r2, [r0, #0]
 800945e:	7043      	strb	r3, [r0, #1]
 8009460:	dd29      	ble.n	80094b6 <__exponent+0x68>
 8009462:	f10d 0307 	add.w	r3, sp, #7
 8009466:	461d      	mov	r5, r3
 8009468:	270a      	movs	r7, #10
 800946a:	461a      	mov	r2, r3
 800946c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009470:	fb07 1416 	mls	r4, r7, r6, r1
 8009474:	3430      	adds	r4, #48	@ 0x30
 8009476:	f802 4c01 	strb.w	r4, [r2, #-1]
 800947a:	460c      	mov	r4, r1
 800947c:	2c63      	cmp	r4, #99	@ 0x63
 800947e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009482:	4631      	mov	r1, r6
 8009484:	dcf1      	bgt.n	800946a <__exponent+0x1c>
 8009486:	3130      	adds	r1, #48	@ 0x30
 8009488:	1e94      	subs	r4, r2, #2
 800948a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800948e:	1c41      	adds	r1, r0, #1
 8009490:	4623      	mov	r3, r4
 8009492:	42ab      	cmp	r3, r5
 8009494:	d30a      	bcc.n	80094ac <__exponent+0x5e>
 8009496:	f10d 0309 	add.w	r3, sp, #9
 800949a:	1a9b      	subs	r3, r3, r2
 800949c:	42ac      	cmp	r4, r5
 800949e:	bf88      	it	hi
 80094a0:	2300      	movhi	r3, #0
 80094a2:	3302      	adds	r3, #2
 80094a4:	4403      	add	r3, r0
 80094a6:	1a18      	subs	r0, r3, r0
 80094a8:	b003      	add	sp, #12
 80094aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 80094b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80094b4:	e7ed      	b.n	8009492 <__exponent+0x44>
 80094b6:	2330      	movs	r3, #48	@ 0x30
 80094b8:	3130      	adds	r1, #48	@ 0x30
 80094ba:	7083      	strb	r3, [r0, #2]
 80094bc:	70c1      	strb	r1, [r0, #3]
 80094be:	1d03      	adds	r3, r0, #4
 80094c0:	e7f1      	b.n	80094a6 <__exponent+0x58>
	...

080094c4 <_printf_float>:
 80094c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c8:	b08d      	sub	sp, #52	@ 0x34
 80094ca:	460c      	mov	r4, r1
 80094cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80094d0:	4616      	mov	r6, r2
 80094d2:	461f      	mov	r7, r3
 80094d4:	4605      	mov	r5, r0
 80094d6:	f000 fcdb 	bl	8009e90 <_localeconv_r>
 80094da:	6803      	ldr	r3, [r0, #0]
 80094dc:	9304      	str	r3, [sp, #16]
 80094de:	4618      	mov	r0, r3
 80094e0:	f7f6 fece 	bl	8000280 <strlen>
 80094e4:	2300      	movs	r3, #0
 80094e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80094e8:	f8d8 3000 	ldr.w	r3, [r8]
 80094ec:	9005      	str	r0, [sp, #20]
 80094ee:	3307      	adds	r3, #7
 80094f0:	f023 0307 	bic.w	r3, r3, #7
 80094f4:	f103 0208 	add.w	r2, r3, #8
 80094f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80094fc:	f8d4 b000 	ldr.w	fp, [r4]
 8009500:	f8c8 2000 	str.w	r2, [r8]
 8009504:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009508:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800950c:	9307      	str	r3, [sp, #28]
 800950e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009512:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009516:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800951a:	4b9c      	ldr	r3, [pc, #624]	@ (800978c <_printf_float+0x2c8>)
 800951c:	f04f 32ff 	mov.w	r2, #4294967295
 8009520:	f7f7 fb0c 	bl	8000b3c <__aeabi_dcmpun>
 8009524:	bb70      	cbnz	r0, 8009584 <_printf_float+0xc0>
 8009526:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800952a:	4b98      	ldr	r3, [pc, #608]	@ (800978c <_printf_float+0x2c8>)
 800952c:	f04f 32ff 	mov.w	r2, #4294967295
 8009530:	f7f7 fae6 	bl	8000b00 <__aeabi_dcmple>
 8009534:	bb30      	cbnz	r0, 8009584 <_printf_float+0xc0>
 8009536:	2200      	movs	r2, #0
 8009538:	2300      	movs	r3, #0
 800953a:	4640      	mov	r0, r8
 800953c:	4649      	mov	r1, r9
 800953e:	f7f7 fad5 	bl	8000aec <__aeabi_dcmplt>
 8009542:	b110      	cbz	r0, 800954a <_printf_float+0x86>
 8009544:	232d      	movs	r3, #45	@ 0x2d
 8009546:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800954a:	4a91      	ldr	r2, [pc, #580]	@ (8009790 <_printf_float+0x2cc>)
 800954c:	4b91      	ldr	r3, [pc, #580]	@ (8009794 <_printf_float+0x2d0>)
 800954e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009552:	bf94      	ite	ls
 8009554:	4690      	movls	r8, r2
 8009556:	4698      	movhi	r8, r3
 8009558:	2303      	movs	r3, #3
 800955a:	6123      	str	r3, [r4, #16]
 800955c:	f02b 0304 	bic.w	r3, fp, #4
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	f04f 0900 	mov.w	r9, #0
 8009566:	9700      	str	r7, [sp, #0]
 8009568:	4633      	mov	r3, r6
 800956a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800956c:	4621      	mov	r1, r4
 800956e:	4628      	mov	r0, r5
 8009570:	f000 f9d2 	bl	8009918 <_printf_common>
 8009574:	3001      	adds	r0, #1
 8009576:	f040 808d 	bne.w	8009694 <_printf_float+0x1d0>
 800957a:	f04f 30ff 	mov.w	r0, #4294967295
 800957e:	b00d      	add	sp, #52	@ 0x34
 8009580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009584:	4642      	mov	r2, r8
 8009586:	464b      	mov	r3, r9
 8009588:	4640      	mov	r0, r8
 800958a:	4649      	mov	r1, r9
 800958c:	f7f7 fad6 	bl	8000b3c <__aeabi_dcmpun>
 8009590:	b140      	cbz	r0, 80095a4 <_printf_float+0xe0>
 8009592:	464b      	mov	r3, r9
 8009594:	2b00      	cmp	r3, #0
 8009596:	bfbc      	itt	lt
 8009598:	232d      	movlt	r3, #45	@ 0x2d
 800959a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800959e:	4a7e      	ldr	r2, [pc, #504]	@ (8009798 <_printf_float+0x2d4>)
 80095a0:	4b7e      	ldr	r3, [pc, #504]	@ (800979c <_printf_float+0x2d8>)
 80095a2:	e7d4      	b.n	800954e <_printf_float+0x8a>
 80095a4:	6863      	ldr	r3, [r4, #4]
 80095a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80095aa:	9206      	str	r2, [sp, #24]
 80095ac:	1c5a      	adds	r2, r3, #1
 80095ae:	d13b      	bne.n	8009628 <_printf_float+0x164>
 80095b0:	2306      	movs	r3, #6
 80095b2:	6063      	str	r3, [r4, #4]
 80095b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80095b8:	2300      	movs	r3, #0
 80095ba:	6022      	str	r2, [r4, #0]
 80095bc:	9303      	str	r3, [sp, #12]
 80095be:	ab0a      	add	r3, sp, #40	@ 0x28
 80095c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80095c4:	ab09      	add	r3, sp, #36	@ 0x24
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	6861      	ldr	r1, [r4, #4]
 80095ca:	ec49 8b10 	vmov	d0, r8, r9
 80095ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80095d2:	4628      	mov	r0, r5
 80095d4:	f7ff fed6 	bl	8009384 <__cvt>
 80095d8:	9b06      	ldr	r3, [sp, #24]
 80095da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095dc:	2b47      	cmp	r3, #71	@ 0x47
 80095de:	4680      	mov	r8, r0
 80095e0:	d129      	bne.n	8009636 <_printf_float+0x172>
 80095e2:	1cc8      	adds	r0, r1, #3
 80095e4:	db02      	blt.n	80095ec <_printf_float+0x128>
 80095e6:	6863      	ldr	r3, [r4, #4]
 80095e8:	4299      	cmp	r1, r3
 80095ea:	dd41      	ble.n	8009670 <_printf_float+0x1ac>
 80095ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80095f0:	fa5f fa8a 	uxtb.w	sl, sl
 80095f4:	3901      	subs	r1, #1
 80095f6:	4652      	mov	r2, sl
 80095f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80095fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80095fe:	f7ff ff26 	bl	800944e <__exponent>
 8009602:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009604:	1813      	adds	r3, r2, r0
 8009606:	2a01      	cmp	r2, #1
 8009608:	4681      	mov	r9, r0
 800960a:	6123      	str	r3, [r4, #16]
 800960c:	dc02      	bgt.n	8009614 <_printf_float+0x150>
 800960e:	6822      	ldr	r2, [r4, #0]
 8009610:	07d2      	lsls	r2, r2, #31
 8009612:	d501      	bpl.n	8009618 <_printf_float+0x154>
 8009614:	3301      	adds	r3, #1
 8009616:	6123      	str	r3, [r4, #16]
 8009618:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800961c:	2b00      	cmp	r3, #0
 800961e:	d0a2      	beq.n	8009566 <_printf_float+0xa2>
 8009620:	232d      	movs	r3, #45	@ 0x2d
 8009622:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009626:	e79e      	b.n	8009566 <_printf_float+0xa2>
 8009628:	9a06      	ldr	r2, [sp, #24]
 800962a:	2a47      	cmp	r2, #71	@ 0x47
 800962c:	d1c2      	bne.n	80095b4 <_printf_float+0xf0>
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1c0      	bne.n	80095b4 <_printf_float+0xf0>
 8009632:	2301      	movs	r3, #1
 8009634:	e7bd      	b.n	80095b2 <_printf_float+0xee>
 8009636:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800963a:	d9db      	bls.n	80095f4 <_printf_float+0x130>
 800963c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009640:	d118      	bne.n	8009674 <_printf_float+0x1b0>
 8009642:	2900      	cmp	r1, #0
 8009644:	6863      	ldr	r3, [r4, #4]
 8009646:	dd0b      	ble.n	8009660 <_printf_float+0x19c>
 8009648:	6121      	str	r1, [r4, #16]
 800964a:	b913      	cbnz	r3, 8009652 <_printf_float+0x18e>
 800964c:	6822      	ldr	r2, [r4, #0]
 800964e:	07d0      	lsls	r0, r2, #31
 8009650:	d502      	bpl.n	8009658 <_printf_float+0x194>
 8009652:	3301      	adds	r3, #1
 8009654:	440b      	add	r3, r1
 8009656:	6123      	str	r3, [r4, #16]
 8009658:	65a1      	str	r1, [r4, #88]	@ 0x58
 800965a:	f04f 0900 	mov.w	r9, #0
 800965e:	e7db      	b.n	8009618 <_printf_float+0x154>
 8009660:	b913      	cbnz	r3, 8009668 <_printf_float+0x1a4>
 8009662:	6822      	ldr	r2, [r4, #0]
 8009664:	07d2      	lsls	r2, r2, #31
 8009666:	d501      	bpl.n	800966c <_printf_float+0x1a8>
 8009668:	3302      	adds	r3, #2
 800966a:	e7f4      	b.n	8009656 <_printf_float+0x192>
 800966c:	2301      	movs	r3, #1
 800966e:	e7f2      	b.n	8009656 <_printf_float+0x192>
 8009670:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009676:	4299      	cmp	r1, r3
 8009678:	db05      	blt.n	8009686 <_printf_float+0x1c2>
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	6121      	str	r1, [r4, #16]
 800967e:	07d8      	lsls	r0, r3, #31
 8009680:	d5ea      	bpl.n	8009658 <_printf_float+0x194>
 8009682:	1c4b      	adds	r3, r1, #1
 8009684:	e7e7      	b.n	8009656 <_printf_float+0x192>
 8009686:	2900      	cmp	r1, #0
 8009688:	bfd4      	ite	le
 800968a:	f1c1 0202 	rsble	r2, r1, #2
 800968e:	2201      	movgt	r2, #1
 8009690:	4413      	add	r3, r2
 8009692:	e7e0      	b.n	8009656 <_printf_float+0x192>
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	055a      	lsls	r2, r3, #21
 8009698:	d407      	bmi.n	80096aa <_printf_float+0x1e6>
 800969a:	6923      	ldr	r3, [r4, #16]
 800969c:	4642      	mov	r2, r8
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	47b8      	blx	r7
 80096a4:	3001      	adds	r0, #1
 80096a6:	d12b      	bne.n	8009700 <_printf_float+0x23c>
 80096a8:	e767      	b.n	800957a <_printf_float+0xb6>
 80096aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80096ae:	f240 80dd 	bls.w	800986c <_printf_float+0x3a8>
 80096b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80096b6:	2200      	movs	r2, #0
 80096b8:	2300      	movs	r3, #0
 80096ba:	f7f7 fa0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d033      	beq.n	800972a <_printf_float+0x266>
 80096c2:	4a37      	ldr	r2, [pc, #220]	@ (80097a0 <_printf_float+0x2dc>)
 80096c4:	2301      	movs	r3, #1
 80096c6:	4631      	mov	r1, r6
 80096c8:	4628      	mov	r0, r5
 80096ca:	47b8      	blx	r7
 80096cc:	3001      	adds	r0, #1
 80096ce:	f43f af54 	beq.w	800957a <_printf_float+0xb6>
 80096d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80096d6:	4543      	cmp	r3, r8
 80096d8:	db02      	blt.n	80096e0 <_printf_float+0x21c>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	07d8      	lsls	r0, r3, #31
 80096de:	d50f      	bpl.n	8009700 <_printf_float+0x23c>
 80096e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096e4:	4631      	mov	r1, r6
 80096e6:	4628      	mov	r0, r5
 80096e8:	47b8      	blx	r7
 80096ea:	3001      	adds	r0, #1
 80096ec:	f43f af45 	beq.w	800957a <_printf_float+0xb6>
 80096f0:	f04f 0900 	mov.w	r9, #0
 80096f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80096f8:	f104 0a1a 	add.w	sl, r4, #26
 80096fc:	45c8      	cmp	r8, r9
 80096fe:	dc09      	bgt.n	8009714 <_printf_float+0x250>
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	079b      	lsls	r3, r3, #30
 8009704:	f100 8103 	bmi.w	800990e <_printf_float+0x44a>
 8009708:	68e0      	ldr	r0, [r4, #12]
 800970a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800970c:	4298      	cmp	r0, r3
 800970e:	bfb8      	it	lt
 8009710:	4618      	movlt	r0, r3
 8009712:	e734      	b.n	800957e <_printf_float+0xba>
 8009714:	2301      	movs	r3, #1
 8009716:	4652      	mov	r2, sl
 8009718:	4631      	mov	r1, r6
 800971a:	4628      	mov	r0, r5
 800971c:	47b8      	blx	r7
 800971e:	3001      	adds	r0, #1
 8009720:	f43f af2b 	beq.w	800957a <_printf_float+0xb6>
 8009724:	f109 0901 	add.w	r9, r9, #1
 8009728:	e7e8      	b.n	80096fc <_printf_float+0x238>
 800972a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800972c:	2b00      	cmp	r3, #0
 800972e:	dc39      	bgt.n	80097a4 <_printf_float+0x2e0>
 8009730:	4a1b      	ldr	r2, [pc, #108]	@ (80097a0 <_printf_float+0x2dc>)
 8009732:	2301      	movs	r3, #1
 8009734:	4631      	mov	r1, r6
 8009736:	4628      	mov	r0, r5
 8009738:	47b8      	blx	r7
 800973a:	3001      	adds	r0, #1
 800973c:	f43f af1d 	beq.w	800957a <_printf_float+0xb6>
 8009740:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009744:	ea59 0303 	orrs.w	r3, r9, r3
 8009748:	d102      	bne.n	8009750 <_printf_float+0x28c>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	07d9      	lsls	r1, r3, #31
 800974e:	d5d7      	bpl.n	8009700 <_printf_float+0x23c>
 8009750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009754:	4631      	mov	r1, r6
 8009756:	4628      	mov	r0, r5
 8009758:	47b8      	blx	r7
 800975a:	3001      	adds	r0, #1
 800975c:	f43f af0d 	beq.w	800957a <_printf_float+0xb6>
 8009760:	f04f 0a00 	mov.w	sl, #0
 8009764:	f104 0b1a 	add.w	fp, r4, #26
 8009768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800976a:	425b      	negs	r3, r3
 800976c:	4553      	cmp	r3, sl
 800976e:	dc01      	bgt.n	8009774 <_printf_float+0x2b0>
 8009770:	464b      	mov	r3, r9
 8009772:	e793      	b.n	800969c <_printf_float+0x1d8>
 8009774:	2301      	movs	r3, #1
 8009776:	465a      	mov	r2, fp
 8009778:	4631      	mov	r1, r6
 800977a:	4628      	mov	r0, r5
 800977c:	47b8      	blx	r7
 800977e:	3001      	adds	r0, #1
 8009780:	f43f aefb 	beq.w	800957a <_printf_float+0xb6>
 8009784:	f10a 0a01 	add.w	sl, sl, #1
 8009788:	e7ee      	b.n	8009768 <_printf_float+0x2a4>
 800978a:	bf00      	nop
 800978c:	7fefffff 	.word	0x7fefffff
 8009790:	0800c108 	.word	0x0800c108
 8009794:	0800c10c 	.word	0x0800c10c
 8009798:	0800c110 	.word	0x0800c110
 800979c:	0800c114 	.word	0x0800c114
 80097a0:	0800c118 	.word	0x0800c118
 80097a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80097aa:	4553      	cmp	r3, sl
 80097ac:	bfa8      	it	ge
 80097ae:	4653      	movge	r3, sl
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	4699      	mov	r9, r3
 80097b4:	dc36      	bgt.n	8009824 <_printf_float+0x360>
 80097b6:	f04f 0b00 	mov.w	fp, #0
 80097ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097be:	f104 021a 	add.w	r2, r4, #26
 80097c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097c4:	9306      	str	r3, [sp, #24]
 80097c6:	eba3 0309 	sub.w	r3, r3, r9
 80097ca:	455b      	cmp	r3, fp
 80097cc:	dc31      	bgt.n	8009832 <_printf_float+0x36e>
 80097ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d0:	459a      	cmp	sl, r3
 80097d2:	dc3a      	bgt.n	800984a <_printf_float+0x386>
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	07da      	lsls	r2, r3, #31
 80097d8:	d437      	bmi.n	800984a <_printf_float+0x386>
 80097da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097dc:	ebaa 0903 	sub.w	r9, sl, r3
 80097e0:	9b06      	ldr	r3, [sp, #24]
 80097e2:	ebaa 0303 	sub.w	r3, sl, r3
 80097e6:	4599      	cmp	r9, r3
 80097e8:	bfa8      	it	ge
 80097ea:	4699      	movge	r9, r3
 80097ec:	f1b9 0f00 	cmp.w	r9, #0
 80097f0:	dc33      	bgt.n	800985a <_printf_float+0x396>
 80097f2:	f04f 0800 	mov.w	r8, #0
 80097f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097fa:	f104 0b1a 	add.w	fp, r4, #26
 80097fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009800:	ebaa 0303 	sub.w	r3, sl, r3
 8009804:	eba3 0309 	sub.w	r3, r3, r9
 8009808:	4543      	cmp	r3, r8
 800980a:	f77f af79 	ble.w	8009700 <_printf_float+0x23c>
 800980e:	2301      	movs	r3, #1
 8009810:	465a      	mov	r2, fp
 8009812:	4631      	mov	r1, r6
 8009814:	4628      	mov	r0, r5
 8009816:	47b8      	blx	r7
 8009818:	3001      	adds	r0, #1
 800981a:	f43f aeae 	beq.w	800957a <_printf_float+0xb6>
 800981e:	f108 0801 	add.w	r8, r8, #1
 8009822:	e7ec      	b.n	80097fe <_printf_float+0x33a>
 8009824:	4642      	mov	r2, r8
 8009826:	4631      	mov	r1, r6
 8009828:	4628      	mov	r0, r5
 800982a:	47b8      	blx	r7
 800982c:	3001      	adds	r0, #1
 800982e:	d1c2      	bne.n	80097b6 <_printf_float+0x2f2>
 8009830:	e6a3      	b.n	800957a <_printf_float+0xb6>
 8009832:	2301      	movs	r3, #1
 8009834:	4631      	mov	r1, r6
 8009836:	4628      	mov	r0, r5
 8009838:	9206      	str	r2, [sp, #24]
 800983a:	47b8      	blx	r7
 800983c:	3001      	adds	r0, #1
 800983e:	f43f ae9c 	beq.w	800957a <_printf_float+0xb6>
 8009842:	9a06      	ldr	r2, [sp, #24]
 8009844:	f10b 0b01 	add.w	fp, fp, #1
 8009848:	e7bb      	b.n	80097c2 <_printf_float+0x2fe>
 800984a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800984e:	4631      	mov	r1, r6
 8009850:	4628      	mov	r0, r5
 8009852:	47b8      	blx	r7
 8009854:	3001      	adds	r0, #1
 8009856:	d1c0      	bne.n	80097da <_printf_float+0x316>
 8009858:	e68f      	b.n	800957a <_printf_float+0xb6>
 800985a:	9a06      	ldr	r2, [sp, #24]
 800985c:	464b      	mov	r3, r9
 800985e:	4442      	add	r2, r8
 8009860:	4631      	mov	r1, r6
 8009862:	4628      	mov	r0, r5
 8009864:	47b8      	blx	r7
 8009866:	3001      	adds	r0, #1
 8009868:	d1c3      	bne.n	80097f2 <_printf_float+0x32e>
 800986a:	e686      	b.n	800957a <_printf_float+0xb6>
 800986c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009870:	f1ba 0f01 	cmp.w	sl, #1
 8009874:	dc01      	bgt.n	800987a <_printf_float+0x3b6>
 8009876:	07db      	lsls	r3, r3, #31
 8009878:	d536      	bpl.n	80098e8 <_printf_float+0x424>
 800987a:	2301      	movs	r3, #1
 800987c:	4642      	mov	r2, r8
 800987e:	4631      	mov	r1, r6
 8009880:	4628      	mov	r0, r5
 8009882:	47b8      	blx	r7
 8009884:	3001      	adds	r0, #1
 8009886:	f43f ae78 	beq.w	800957a <_printf_float+0xb6>
 800988a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800988e:	4631      	mov	r1, r6
 8009890:	4628      	mov	r0, r5
 8009892:	47b8      	blx	r7
 8009894:	3001      	adds	r0, #1
 8009896:	f43f ae70 	beq.w	800957a <_printf_float+0xb6>
 800989a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800989e:	2200      	movs	r2, #0
 80098a0:	2300      	movs	r3, #0
 80098a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098a6:	f7f7 f917 	bl	8000ad8 <__aeabi_dcmpeq>
 80098aa:	b9c0      	cbnz	r0, 80098de <_printf_float+0x41a>
 80098ac:	4653      	mov	r3, sl
 80098ae:	f108 0201 	add.w	r2, r8, #1
 80098b2:	4631      	mov	r1, r6
 80098b4:	4628      	mov	r0, r5
 80098b6:	47b8      	blx	r7
 80098b8:	3001      	adds	r0, #1
 80098ba:	d10c      	bne.n	80098d6 <_printf_float+0x412>
 80098bc:	e65d      	b.n	800957a <_printf_float+0xb6>
 80098be:	2301      	movs	r3, #1
 80098c0:	465a      	mov	r2, fp
 80098c2:	4631      	mov	r1, r6
 80098c4:	4628      	mov	r0, r5
 80098c6:	47b8      	blx	r7
 80098c8:	3001      	adds	r0, #1
 80098ca:	f43f ae56 	beq.w	800957a <_printf_float+0xb6>
 80098ce:	f108 0801 	add.w	r8, r8, #1
 80098d2:	45d0      	cmp	r8, sl
 80098d4:	dbf3      	blt.n	80098be <_printf_float+0x3fa>
 80098d6:	464b      	mov	r3, r9
 80098d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80098dc:	e6df      	b.n	800969e <_printf_float+0x1da>
 80098de:	f04f 0800 	mov.w	r8, #0
 80098e2:	f104 0b1a 	add.w	fp, r4, #26
 80098e6:	e7f4      	b.n	80098d2 <_printf_float+0x40e>
 80098e8:	2301      	movs	r3, #1
 80098ea:	4642      	mov	r2, r8
 80098ec:	e7e1      	b.n	80098b2 <_printf_float+0x3ee>
 80098ee:	2301      	movs	r3, #1
 80098f0:	464a      	mov	r2, r9
 80098f2:	4631      	mov	r1, r6
 80098f4:	4628      	mov	r0, r5
 80098f6:	47b8      	blx	r7
 80098f8:	3001      	adds	r0, #1
 80098fa:	f43f ae3e 	beq.w	800957a <_printf_float+0xb6>
 80098fe:	f108 0801 	add.w	r8, r8, #1
 8009902:	68e3      	ldr	r3, [r4, #12]
 8009904:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009906:	1a5b      	subs	r3, r3, r1
 8009908:	4543      	cmp	r3, r8
 800990a:	dcf0      	bgt.n	80098ee <_printf_float+0x42a>
 800990c:	e6fc      	b.n	8009708 <_printf_float+0x244>
 800990e:	f04f 0800 	mov.w	r8, #0
 8009912:	f104 0919 	add.w	r9, r4, #25
 8009916:	e7f4      	b.n	8009902 <_printf_float+0x43e>

08009918 <_printf_common>:
 8009918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800991c:	4616      	mov	r6, r2
 800991e:	4698      	mov	r8, r3
 8009920:	688a      	ldr	r2, [r1, #8]
 8009922:	690b      	ldr	r3, [r1, #16]
 8009924:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009928:	4293      	cmp	r3, r2
 800992a:	bfb8      	it	lt
 800992c:	4613      	movlt	r3, r2
 800992e:	6033      	str	r3, [r6, #0]
 8009930:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009934:	4607      	mov	r7, r0
 8009936:	460c      	mov	r4, r1
 8009938:	b10a      	cbz	r2, 800993e <_printf_common+0x26>
 800993a:	3301      	adds	r3, #1
 800993c:	6033      	str	r3, [r6, #0]
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	0699      	lsls	r1, r3, #26
 8009942:	bf42      	ittt	mi
 8009944:	6833      	ldrmi	r3, [r6, #0]
 8009946:	3302      	addmi	r3, #2
 8009948:	6033      	strmi	r3, [r6, #0]
 800994a:	6825      	ldr	r5, [r4, #0]
 800994c:	f015 0506 	ands.w	r5, r5, #6
 8009950:	d106      	bne.n	8009960 <_printf_common+0x48>
 8009952:	f104 0a19 	add.w	sl, r4, #25
 8009956:	68e3      	ldr	r3, [r4, #12]
 8009958:	6832      	ldr	r2, [r6, #0]
 800995a:	1a9b      	subs	r3, r3, r2
 800995c:	42ab      	cmp	r3, r5
 800995e:	dc26      	bgt.n	80099ae <_printf_common+0x96>
 8009960:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009964:	6822      	ldr	r2, [r4, #0]
 8009966:	3b00      	subs	r3, #0
 8009968:	bf18      	it	ne
 800996a:	2301      	movne	r3, #1
 800996c:	0692      	lsls	r2, r2, #26
 800996e:	d42b      	bmi.n	80099c8 <_printf_common+0xb0>
 8009970:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009974:	4641      	mov	r1, r8
 8009976:	4638      	mov	r0, r7
 8009978:	47c8      	blx	r9
 800997a:	3001      	adds	r0, #1
 800997c:	d01e      	beq.n	80099bc <_printf_common+0xa4>
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	6922      	ldr	r2, [r4, #16]
 8009982:	f003 0306 	and.w	r3, r3, #6
 8009986:	2b04      	cmp	r3, #4
 8009988:	bf02      	ittt	eq
 800998a:	68e5      	ldreq	r5, [r4, #12]
 800998c:	6833      	ldreq	r3, [r6, #0]
 800998e:	1aed      	subeq	r5, r5, r3
 8009990:	68a3      	ldr	r3, [r4, #8]
 8009992:	bf0c      	ite	eq
 8009994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009998:	2500      	movne	r5, #0
 800999a:	4293      	cmp	r3, r2
 800999c:	bfc4      	itt	gt
 800999e:	1a9b      	subgt	r3, r3, r2
 80099a0:	18ed      	addgt	r5, r5, r3
 80099a2:	2600      	movs	r6, #0
 80099a4:	341a      	adds	r4, #26
 80099a6:	42b5      	cmp	r5, r6
 80099a8:	d11a      	bne.n	80099e0 <_printf_common+0xc8>
 80099aa:	2000      	movs	r0, #0
 80099ac:	e008      	b.n	80099c0 <_printf_common+0xa8>
 80099ae:	2301      	movs	r3, #1
 80099b0:	4652      	mov	r2, sl
 80099b2:	4641      	mov	r1, r8
 80099b4:	4638      	mov	r0, r7
 80099b6:	47c8      	blx	r9
 80099b8:	3001      	adds	r0, #1
 80099ba:	d103      	bne.n	80099c4 <_printf_common+0xac>
 80099bc:	f04f 30ff 	mov.w	r0, #4294967295
 80099c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c4:	3501      	adds	r5, #1
 80099c6:	e7c6      	b.n	8009956 <_printf_common+0x3e>
 80099c8:	18e1      	adds	r1, r4, r3
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	2030      	movs	r0, #48	@ 0x30
 80099ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80099d2:	4422      	add	r2, r4
 80099d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80099d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80099dc:	3302      	adds	r3, #2
 80099de:	e7c7      	b.n	8009970 <_printf_common+0x58>
 80099e0:	2301      	movs	r3, #1
 80099e2:	4622      	mov	r2, r4
 80099e4:	4641      	mov	r1, r8
 80099e6:	4638      	mov	r0, r7
 80099e8:	47c8      	blx	r9
 80099ea:	3001      	adds	r0, #1
 80099ec:	d0e6      	beq.n	80099bc <_printf_common+0xa4>
 80099ee:	3601      	adds	r6, #1
 80099f0:	e7d9      	b.n	80099a6 <_printf_common+0x8e>
	...

080099f4 <_printf_i>:
 80099f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099f8:	7e0f      	ldrb	r7, [r1, #24]
 80099fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099fc:	2f78      	cmp	r7, #120	@ 0x78
 80099fe:	4691      	mov	r9, r2
 8009a00:	4680      	mov	r8, r0
 8009a02:	460c      	mov	r4, r1
 8009a04:	469a      	mov	sl, r3
 8009a06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a0a:	d807      	bhi.n	8009a1c <_printf_i+0x28>
 8009a0c:	2f62      	cmp	r7, #98	@ 0x62
 8009a0e:	d80a      	bhi.n	8009a26 <_printf_i+0x32>
 8009a10:	2f00      	cmp	r7, #0
 8009a12:	f000 80d2 	beq.w	8009bba <_printf_i+0x1c6>
 8009a16:	2f58      	cmp	r7, #88	@ 0x58
 8009a18:	f000 80b9 	beq.w	8009b8e <_printf_i+0x19a>
 8009a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a24:	e03a      	b.n	8009a9c <_printf_i+0xa8>
 8009a26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a2a:	2b15      	cmp	r3, #21
 8009a2c:	d8f6      	bhi.n	8009a1c <_printf_i+0x28>
 8009a2e:	a101      	add	r1, pc, #4	@ (adr r1, 8009a34 <_printf_i+0x40>)
 8009a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a34:	08009a8d 	.word	0x08009a8d
 8009a38:	08009aa1 	.word	0x08009aa1
 8009a3c:	08009a1d 	.word	0x08009a1d
 8009a40:	08009a1d 	.word	0x08009a1d
 8009a44:	08009a1d 	.word	0x08009a1d
 8009a48:	08009a1d 	.word	0x08009a1d
 8009a4c:	08009aa1 	.word	0x08009aa1
 8009a50:	08009a1d 	.word	0x08009a1d
 8009a54:	08009a1d 	.word	0x08009a1d
 8009a58:	08009a1d 	.word	0x08009a1d
 8009a5c:	08009a1d 	.word	0x08009a1d
 8009a60:	08009ba1 	.word	0x08009ba1
 8009a64:	08009acb 	.word	0x08009acb
 8009a68:	08009b5b 	.word	0x08009b5b
 8009a6c:	08009a1d 	.word	0x08009a1d
 8009a70:	08009a1d 	.word	0x08009a1d
 8009a74:	08009bc3 	.word	0x08009bc3
 8009a78:	08009a1d 	.word	0x08009a1d
 8009a7c:	08009acb 	.word	0x08009acb
 8009a80:	08009a1d 	.word	0x08009a1d
 8009a84:	08009a1d 	.word	0x08009a1d
 8009a88:	08009b63 	.word	0x08009b63
 8009a8c:	6833      	ldr	r3, [r6, #0]
 8009a8e:	1d1a      	adds	r2, r3, #4
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6032      	str	r2, [r6, #0]
 8009a94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e09d      	b.n	8009bdc <_printf_i+0x1e8>
 8009aa0:	6833      	ldr	r3, [r6, #0]
 8009aa2:	6820      	ldr	r0, [r4, #0]
 8009aa4:	1d19      	adds	r1, r3, #4
 8009aa6:	6031      	str	r1, [r6, #0]
 8009aa8:	0606      	lsls	r6, r0, #24
 8009aaa:	d501      	bpl.n	8009ab0 <_printf_i+0xbc>
 8009aac:	681d      	ldr	r5, [r3, #0]
 8009aae:	e003      	b.n	8009ab8 <_printf_i+0xc4>
 8009ab0:	0645      	lsls	r5, r0, #25
 8009ab2:	d5fb      	bpl.n	8009aac <_printf_i+0xb8>
 8009ab4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ab8:	2d00      	cmp	r5, #0
 8009aba:	da03      	bge.n	8009ac4 <_printf_i+0xd0>
 8009abc:	232d      	movs	r3, #45	@ 0x2d
 8009abe:	426d      	negs	r5, r5
 8009ac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ac4:	4859      	ldr	r0, [pc, #356]	@ (8009c2c <_printf_i+0x238>)
 8009ac6:	230a      	movs	r3, #10
 8009ac8:	e011      	b.n	8009aee <_printf_i+0xfa>
 8009aca:	6821      	ldr	r1, [r4, #0]
 8009acc:	6833      	ldr	r3, [r6, #0]
 8009ace:	0608      	lsls	r0, r1, #24
 8009ad0:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ad4:	d402      	bmi.n	8009adc <_printf_i+0xe8>
 8009ad6:	0649      	lsls	r1, r1, #25
 8009ad8:	bf48      	it	mi
 8009ada:	b2ad      	uxthmi	r5, r5
 8009adc:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ade:	4853      	ldr	r0, [pc, #332]	@ (8009c2c <_printf_i+0x238>)
 8009ae0:	6033      	str	r3, [r6, #0]
 8009ae2:	bf14      	ite	ne
 8009ae4:	230a      	movne	r3, #10
 8009ae6:	2308      	moveq	r3, #8
 8009ae8:	2100      	movs	r1, #0
 8009aea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009aee:	6866      	ldr	r6, [r4, #4]
 8009af0:	60a6      	str	r6, [r4, #8]
 8009af2:	2e00      	cmp	r6, #0
 8009af4:	bfa2      	ittt	ge
 8009af6:	6821      	ldrge	r1, [r4, #0]
 8009af8:	f021 0104 	bicge.w	r1, r1, #4
 8009afc:	6021      	strge	r1, [r4, #0]
 8009afe:	b90d      	cbnz	r5, 8009b04 <_printf_i+0x110>
 8009b00:	2e00      	cmp	r6, #0
 8009b02:	d04b      	beq.n	8009b9c <_printf_i+0x1a8>
 8009b04:	4616      	mov	r6, r2
 8009b06:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b0a:	fb03 5711 	mls	r7, r3, r1, r5
 8009b0e:	5dc7      	ldrb	r7, [r0, r7]
 8009b10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b14:	462f      	mov	r7, r5
 8009b16:	42bb      	cmp	r3, r7
 8009b18:	460d      	mov	r5, r1
 8009b1a:	d9f4      	bls.n	8009b06 <_printf_i+0x112>
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d10b      	bne.n	8009b38 <_printf_i+0x144>
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	07df      	lsls	r7, r3, #31
 8009b24:	d508      	bpl.n	8009b38 <_printf_i+0x144>
 8009b26:	6923      	ldr	r3, [r4, #16]
 8009b28:	6861      	ldr	r1, [r4, #4]
 8009b2a:	4299      	cmp	r1, r3
 8009b2c:	bfde      	ittt	le
 8009b2e:	2330      	movle	r3, #48	@ 0x30
 8009b30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b38:	1b92      	subs	r2, r2, r6
 8009b3a:	6122      	str	r2, [r4, #16]
 8009b3c:	f8cd a000 	str.w	sl, [sp]
 8009b40:	464b      	mov	r3, r9
 8009b42:	aa03      	add	r2, sp, #12
 8009b44:	4621      	mov	r1, r4
 8009b46:	4640      	mov	r0, r8
 8009b48:	f7ff fee6 	bl	8009918 <_printf_common>
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d14a      	bne.n	8009be6 <_printf_i+0x1f2>
 8009b50:	f04f 30ff 	mov.w	r0, #4294967295
 8009b54:	b004      	add	sp, #16
 8009b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	f043 0320 	orr.w	r3, r3, #32
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	4833      	ldr	r0, [pc, #204]	@ (8009c30 <_printf_i+0x23c>)
 8009b64:	2778      	movs	r7, #120	@ 0x78
 8009b66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	6831      	ldr	r1, [r6, #0]
 8009b6e:	061f      	lsls	r7, r3, #24
 8009b70:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b74:	d402      	bmi.n	8009b7c <_printf_i+0x188>
 8009b76:	065f      	lsls	r7, r3, #25
 8009b78:	bf48      	it	mi
 8009b7a:	b2ad      	uxthmi	r5, r5
 8009b7c:	6031      	str	r1, [r6, #0]
 8009b7e:	07d9      	lsls	r1, r3, #31
 8009b80:	bf44      	itt	mi
 8009b82:	f043 0320 	orrmi.w	r3, r3, #32
 8009b86:	6023      	strmi	r3, [r4, #0]
 8009b88:	b11d      	cbz	r5, 8009b92 <_printf_i+0x19e>
 8009b8a:	2310      	movs	r3, #16
 8009b8c:	e7ac      	b.n	8009ae8 <_printf_i+0xf4>
 8009b8e:	4827      	ldr	r0, [pc, #156]	@ (8009c2c <_printf_i+0x238>)
 8009b90:	e7e9      	b.n	8009b66 <_printf_i+0x172>
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	f023 0320 	bic.w	r3, r3, #32
 8009b98:	6023      	str	r3, [r4, #0]
 8009b9a:	e7f6      	b.n	8009b8a <_printf_i+0x196>
 8009b9c:	4616      	mov	r6, r2
 8009b9e:	e7bd      	b.n	8009b1c <_printf_i+0x128>
 8009ba0:	6833      	ldr	r3, [r6, #0]
 8009ba2:	6825      	ldr	r5, [r4, #0]
 8009ba4:	6961      	ldr	r1, [r4, #20]
 8009ba6:	1d18      	adds	r0, r3, #4
 8009ba8:	6030      	str	r0, [r6, #0]
 8009baa:	062e      	lsls	r6, r5, #24
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	d501      	bpl.n	8009bb4 <_printf_i+0x1c0>
 8009bb0:	6019      	str	r1, [r3, #0]
 8009bb2:	e002      	b.n	8009bba <_printf_i+0x1c6>
 8009bb4:	0668      	lsls	r0, r5, #25
 8009bb6:	d5fb      	bpl.n	8009bb0 <_printf_i+0x1bc>
 8009bb8:	8019      	strh	r1, [r3, #0]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	6123      	str	r3, [r4, #16]
 8009bbe:	4616      	mov	r6, r2
 8009bc0:	e7bc      	b.n	8009b3c <_printf_i+0x148>
 8009bc2:	6833      	ldr	r3, [r6, #0]
 8009bc4:	1d1a      	adds	r2, r3, #4
 8009bc6:	6032      	str	r2, [r6, #0]
 8009bc8:	681e      	ldr	r6, [r3, #0]
 8009bca:	6862      	ldr	r2, [r4, #4]
 8009bcc:	2100      	movs	r1, #0
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f7f6 fb06 	bl	80001e0 <memchr>
 8009bd4:	b108      	cbz	r0, 8009bda <_printf_i+0x1e6>
 8009bd6:	1b80      	subs	r0, r0, r6
 8009bd8:	6060      	str	r0, [r4, #4]
 8009bda:	6863      	ldr	r3, [r4, #4]
 8009bdc:	6123      	str	r3, [r4, #16]
 8009bde:	2300      	movs	r3, #0
 8009be0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009be4:	e7aa      	b.n	8009b3c <_printf_i+0x148>
 8009be6:	6923      	ldr	r3, [r4, #16]
 8009be8:	4632      	mov	r2, r6
 8009bea:	4649      	mov	r1, r9
 8009bec:	4640      	mov	r0, r8
 8009bee:	47d0      	blx	sl
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d0ad      	beq.n	8009b50 <_printf_i+0x15c>
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	079b      	lsls	r3, r3, #30
 8009bf8:	d413      	bmi.n	8009c22 <_printf_i+0x22e>
 8009bfa:	68e0      	ldr	r0, [r4, #12]
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	4298      	cmp	r0, r3
 8009c00:	bfb8      	it	lt
 8009c02:	4618      	movlt	r0, r3
 8009c04:	e7a6      	b.n	8009b54 <_printf_i+0x160>
 8009c06:	2301      	movs	r3, #1
 8009c08:	4632      	mov	r2, r6
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	47d0      	blx	sl
 8009c10:	3001      	adds	r0, #1
 8009c12:	d09d      	beq.n	8009b50 <_printf_i+0x15c>
 8009c14:	3501      	adds	r5, #1
 8009c16:	68e3      	ldr	r3, [r4, #12]
 8009c18:	9903      	ldr	r1, [sp, #12]
 8009c1a:	1a5b      	subs	r3, r3, r1
 8009c1c:	42ab      	cmp	r3, r5
 8009c1e:	dcf2      	bgt.n	8009c06 <_printf_i+0x212>
 8009c20:	e7eb      	b.n	8009bfa <_printf_i+0x206>
 8009c22:	2500      	movs	r5, #0
 8009c24:	f104 0619 	add.w	r6, r4, #25
 8009c28:	e7f5      	b.n	8009c16 <_printf_i+0x222>
 8009c2a:	bf00      	nop
 8009c2c:	0800c11a 	.word	0x0800c11a
 8009c30:	0800c12b 	.word	0x0800c12b

08009c34 <std>:
 8009c34:	2300      	movs	r3, #0
 8009c36:	b510      	push	{r4, lr}
 8009c38:	4604      	mov	r4, r0
 8009c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c42:	6083      	str	r3, [r0, #8]
 8009c44:	8181      	strh	r1, [r0, #12]
 8009c46:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c48:	81c2      	strh	r2, [r0, #14]
 8009c4a:	6183      	str	r3, [r0, #24]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	2208      	movs	r2, #8
 8009c50:	305c      	adds	r0, #92	@ 0x5c
 8009c52:	f000 f914 	bl	8009e7e <memset>
 8009c56:	4b0d      	ldr	r3, [pc, #52]	@ (8009c8c <std+0x58>)
 8009c58:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c90 <std+0x5c>)
 8009c5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c94 <std+0x60>)
 8009c60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c62:	4b0d      	ldr	r3, [pc, #52]	@ (8009c98 <std+0x64>)
 8009c64:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c66:	4b0d      	ldr	r3, [pc, #52]	@ (8009c9c <std+0x68>)
 8009c68:	6224      	str	r4, [r4, #32]
 8009c6a:	429c      	cmp	r4, r3
 8009c6c:	d006      	beq.n	8009c7c <std+0x48>
 8009c6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c72:	4294      	cmp	r4, r2
 8009c74:	d002      	beq.n	8009c7c <std+0x48>
 8009c76:	33d0      	adds	r3, #208	@ 0xd0
 8009c78:	429c      	cmp	r4, r3
 8009c7a:	d105      	bne.n	8009c88 <std+0x54>
 8009c7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c84:	f000 b978 	b.w	8009f78 <__retarget_lock_init_recursive>
 8009c88:	bd10      	pop	{r4, pc}
 8009c8a:	bf00      	nop
 8009c8c:	08009df9 	.word	0x08009df9
 8009c90:	08009e1b 	.word	0x08009e1b
 8009c94:	08009e53 	.word	0x08009e53
 8009c98:	08009e77 	.word	0x08009e77
 8009c9c:	20000778 	.word	0x20000778

08009ca0 <stdio_exit_handler>:
 8009ca0:	4a02      	ldr	r2, [pc, #8]	@ (8009cac <stdio_exit_handler+0xc>)
 8009ca2:	4903      	ldr	r1, [pc, #12]	@ (8009cb0 <stdio_exit_handler+0x10>)
 8009ca4:	4803      	ldr	r0, [pc, #12]	@ (8009cb4 <stdio_exit_handler+0x14>)
 8009ca6:	f000 b869 	b.w	8009d7c <_fwalk_sglue>
 8009caa:	bf00      	nop
 8009cac:	2000000c 	.word	0x2000000c
 8009cb0:	0800b8d5 	.word	0x0800b8d5
 8009cb4:	2000001c 	.word	0x2000001c

08009cb8 <cleanup_stdio>:
 8009cb8:	6841      	ldr	r1, [r0, #4]
 8009cba:	4b0c      	ldr	r3, [pc, #48]	@ (8009cec <cleanup_stdio+0x34>)
 8009cbc:	4299      	cmp	r1, r3
 8009cbe:	b510      	push	{r4, lr}
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	d001      	beq.n	8009cc8 <cleanup_stdio+0x10>
 8009cc4:	f001 fe06 	bl	800b8d4 <_fflush_r>
 8009cc8:	68a1      	ldr	r1, [r4, #8]
 8009cca:	4b09      	ldr	r3, [pc, #36]	@ (8009cf0 <cleanup_stdio+0x38>)
 8009ccc:	4299      	cmp	r1, r3
 8009cce:	d002      	beq.n	8009cd6 <cleanup_stdio+0x1e>
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f001 fdff 	bl	800b8d4 <_fflush_r>
 8009cd6:	68e1      	ldr	r1, [r4, #12]
 8009cd8:	4b06      	ldr	r3, [pc, #24]	@ (8009cf4 <cleanup_stdio+0x3c>)
 8009cda:	4299      	cmp	r1, r3
 8009cdc:	d004      	beq.n	8009ce8 <cleanup_stdio+0x30>
 8009cde:	4620      	mov	r0, r4
 8009ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ce4:	f001 bdf6 	b.w	800b8d4 <_fflush_r>
 8009ce8:	bd10      	pop	{r4, pc}
 8009cea:	bf00      	nop
 8009cec:	20000778 	.word	0x20000778
 8009cf0:	200007e0 	.word	0x200007e0
 8009cf4:	20000848 	.word	0x20000848

08009cf8 <global_stdio_init.part.0>:
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8009d28 <global_stdio_init.part.0+0x30>)
 8009cfc:	4c0b      	ldr	r4, [pc, #44]	@ (8009d2c <global_stdio_init.part.0+0x34>)
 8009cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8009d30 <global_stdio_init.part.0+0x38>)
 8009d00:	601a      	str	r2, [r3, #0]
 8009d02:	4620      	mov	r0, r4
 8009d04:	2200      	movs	r2, #0
 8009d06:	2104      	movs	r1, #4
 8009d08:	f7ff ff94 	bl	8009c34 <std>
 8009d0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d10:	2201      	movs	r2, #1
 8009d12:	2109      	movs	r1, #9
 8009d14:	f7ff ff8e 	bl	8009c34 <std>
 8009d18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d22:	2112      	movs	r1, #18
 8009d24:	f7ff bf86 	b.w	8009c34 <std>
 8009d28:	200008b0 	.word	0x200008b0
 8009d2c:	20000778 	.word	0x20000778
 8009d30:	08009ca1 	.word	0x08009ca1

08009d34 <__sfp_lock_acquire>:
 8009d34:	4801      	ldr	r0, [pc, #4]	@ (8009d3c <__sfp_lock_acquire+0x8>)
 8009d36:	f000 b920 	b.w	8009f7a <__retarget_lock_acquire_recursive>
 8009d3a:	bf00      	nop
 8009d3c:	200008b9 	.word	0x200008b9

08009d40 <__sfp_lock_release>:
 8009d40:	4801      	ldr	r0, [pc, #4]	@ (8009d48 <__sfp_lock_release+0x8>)
 8009d42:	f000 b91b 	b.w	8009f7c <__retarget_lock_release_recursive>
 8009d46:	bf00      	nop
 8009d48:	200008b9 	.word	0x200008b9

08009d4c <__sinit>:
 8009d4c:	b510      	push	{r4, lr}
 8009d4e:	4604      	mov	r4, r0
 8009d50:	f7ff fff0 	bl	8009d34 <__sfp_lock_acquire>
 8009d54:	6a23      	ldr	r3, [r4, #32]
 8009d56:	b11b      	cbz	r3, 8009d60 <__sinit+0x14>
 8009d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d5c:	f7ff bff0 	b.w	8009d40 <__sfp_lock_release>
 8009d60:	4b04      	ldr	r3, [pc, #16]	@ (8009d74 <__sinit+0x28>)
 8009d62:	6223      	str	r3, [r4, #32]
 8009d64:	4b04      	ldr	r3, [pc, #16]	@ (8009d78 <__sinit+0x2c>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1f5      	bne.n	8009d58 <__sinit+0xc>
 8009d6c:	f7ff ffc4 	bl	8009cf8 <global_stdio_init.part.0>
 8009d70:	e7f2      	b.n	8009d58 <__sinit+0xc>
 8009d72:	bf00      	nop
 8009d74:	08009cb9 	.word	0x08009cb9
 8009d78:	200008b0 	.word	0x200008b0

08009d7c <_fwalk_sglue>:
 8009d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d80:	4607      	mov	r7, r0
 8009d82:	4688      	mov	r8, r1
 8009d84:	4614      	mov	r4, r2
 8009d86:	2600      	movs	r6, #0
 8009d88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d8c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d90:	d505      	bpl.n	8009d9e <_fwalk_sglue+0x22>
 8009d92:	6824      	ldr	r4, [r4, #0]
 8009d94:	2c00      	cmp	r4, #0
 8009d96:	d1f7      	bne.n	8009d88 <_fwalk_sglue+0xc>
 8009d98:	4630      	mov	r0, r6
 8009d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d9e:	89ab      	ldrh	r3, [r5, #12]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d907      	bls.n	8009db4 <_fwalk_sglue+0x38>
 8009da4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009da8:	3301      	adds	r3, #1
 8009daa:	d003      	beq.n	8009db4 <_fwalk_sglue+0x38>
 8009dac:	4629      	mov	r1, r5
 8009dae:	4638      	mov	r0, r7
 8009db0:	47c0      	blx	r8
 8009db2:	4306      	orrs	r6, r0
 8009db4:	3568      	adds	r5, #104	@ 0x68
 8009db6:	e7e9      	b.n	8009d8c <_fwalk_sglue+0x10>

08009db8 <siprintf>:
 8009db8:	b40e      	push	{r1, r2, r3}
 8009dba:	b500      	push	{lr}
 8009dbc:	b09c      	sub	sp, #112	@ 0x70
 8009dbe:	ab1d      	add	r3, sp, #116	@ 0x74
 8009dc0:	9002      	str	r0, [sp, #8]
 8009dc2:	9006      	str	r0, [sp, #24]
 8009dc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009dc8:	4809      	ldr	r0, [pc, #36]	@ (8009df0 <siprintf+0x38>)
 8009dca:	9107      	str	r1, [sp, #28]
 8009dcc:	9104      	str	r1, [sp, #16]
 8009dce:	4909      	ldr	r1, [pc, #36]	@ (8009df4 <siprintf+0x3c>)
 8009dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd4:	9105      	str	r1, [sp, #20]
 8009dd6:	6800      	ldr	r0, [r0, #0]
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	a902      	add	r1, sp, #8
 8009ddc:	f001 fbfa 	bl	800b5d4 <_svfiprintf_r>
 8009de0:	9b02      	ldr	r3, [sp, #8]
 8009de2:	2200      	movs	r2, #0
 8009de4:	701a      	strb	r2, [r3, #0]
 8009de6:	b01c      	add	sp, #112	@ 0x70
 8009de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dec:	b003      	add	sp, #12
 8009dee:	4770      	bx	lr
 8009df0:	20000018 	.word	0x20000018
 8009df4:	ffff0208 	.word	0xffff0208

08009df8 <__sread>:
 8009df8:	b510      	push	{r4, lr}
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e00:	f000 f86c 	bl	8009edc <_read_r>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	bfab      	itete	ge
 8009e08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e0c:	181b      	addge	r3, r3, r0
 8009e0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e12:	bfac      	ite	ge
 8009e14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e16:	81a3      	strhlt	r3, [r4, #12]
 8009e18:	bd10      	pop	{r4, pc}

08009e1a <__swrite>:
 8009e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1e:	461f      	mov	r7, r3
 8009e20:	898b      	ldrh	r3, [r1, #12]
 8009e22:	05db      	lsls	r3, r3, #23
 8009e24:	4605      	mov	r5, r0
 8009e26:	460c      	mov	r4, r1
 8009e28:	4616      	mov	r6, r2
 8009e2a:	d505      	bpl.n	8009e38 <__swrite+0x1e>
 8009e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e30:	2302      	movs	r3, #2
 8009e32:	2200      	movs	r2, #0
 8009e34:	f000 f840 	bl	8009eb8 <_lseek_r>
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e42:	81a3      	strh	r3, [r4, #12]
 8009e44:	4632      	mov	r2, r6
 8009e46:	463b      	mov	r3, r7
 8009e48:	4628      	mov	r0, r5
 8009e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4e:	f000 b857 	b.w	8009f00 <_write_r>

08009e52 <__sseek>:
 8009e52:	b510      	push	{r4, lr}
 8009e54:	460c      	mov	r4, r1
 8009e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5a:	f000 f82d 	bl	8009eb8 <_lseek_r>
 8009e5e:	1c43      	adds	r3, r0, #1
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	bf15      	itete	ne
 8009e64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e6e:	81a3      	strheq	r3, [r4, #12]
 8009e70:	bf18      	it	ne
 8009e72:	81a3      	strhne	r3, [r4, #12]
 8009e74:	bd10      	pop	{r4, pc}

08009e76 <__sclose>:
 8009e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7a:	f000 b80d 	b.w	8009e98 <_close_r>

08009e7e <memset>:
 8009e7e:	4402      	add	r2, r0
 8009e80:	4603      	mov	r3, r0
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d100      	bne.n	8009e88 <memset+0xa>
 8009e86:	4770      	bx	lr
 8009e88:	f803 1b01 	strb.w	r1, [r3], #1
 8009e8c:	e7f9      	b.n	8009e82 <memset+0x4>
	...

08009e90 <_localeconv_r>:
 8009e90:	4800      	ldr	r0, [pc, #0]	@ (8009e94 <_localeconv_r+0x4>)
 8009e92:	4770      	bx	lr
 8009e94:	20000158 	.word	0x20000158

08009e98 <_close_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4d06      	ldr	r5, [pc, #24]	@ (8009eb4 <_close_r+0x1c>)
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	602b      	str	r3, [r5, #0]
 8009ea4:	f7f8 faa6 	bl	80023f4 <_close>
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	d102      	bne.n	8009eb2 <_close_r+0x1a>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	b103      	cbz	r3, 8009eb2 <_close_r+0x1a>
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}
 8009eb4:	200008b4 	.word	0x200008b4

08009eb8 <_lseek_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4d07      	ldr	r5, [pc, #28]	@ (8009ed8 <_lseek_r+0x20>)
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	4608      	mov	r0, r1
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	602a      	str	r2, [r5, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f7f8 fabb 	bl	8002442 <_lseek>
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	d102      	bne.n	8009ed6 <_lseek_r+0x1e>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	b103      	cbz	r3, 8009ed6 <_lseek_r+0x1e>
 8009ed4:	6023      	str	r3, [r4, #0]
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
 8009ed8:	200008b4 	.word	0x200008b4

08009edc <_read_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4d07      	ldr	r5, [pc, #28]	@ (8009efc <_read_r+0x20>)
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	4608      	mov	r0, r1
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	602a      	str	r2, [r5, #0]
 8009eea:	461a      	mov	r2, r3
 8009eec:	f7f8 fa49 	bl	8002382 <_read>
 8009ef0:	1c43      	adds	r3, r0, #1
 8009ef2:	d102      	bne.n	8009efa <_read_r+0x1e>
 8009ef4:	682b      	ldr	r3, [r5, #0]
 8009ef6:	b103      	cbz	r3, 8009efa <_read_r+0x1e>
 8009ef8:	6023      	str	r3, [r4, #0]
 8009efa:	bd38      	pop	{r3, r4, r5, pc}
 8009efc:	200008b4 	.word	0x200008b4

08009f00 <_write_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d07      	ldr	r5, [pc, #28]	@ (8009f20 <_write_r+0x20>)
 8009f04:	4604      	mov	r4, r0
 8009f06:	4608      	mov	r0, r1
 8009f08:	4611      	mov	r1, r2
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	602a      	str	r2, [r5, #0]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	f7f8 fa54 	bl	80023bc <_write>
 8009f14:	1c43      	adds	r3, r0, #1
 8009f16:	d102      	bne.n	8009f1e <_write_r+0x1e>
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	b103      	cbz	r3, 8009f1e <_write_r+0x1e>
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	bd38      	pop	{r3, r4, r5, pc}
 8009f20:	200008b4 	.word	0x200008b4

08009f24 <__errno>:
 8009f24:	4b01      	ldr	r3, [pc, #4]	@ (8009f2c <__errno+0x8>)
 8009f26:	6818      	ldr	r0, [r3, #0]
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	20000018 	.word	0x20000018

08009f30 <__libc_init_array>:
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	4d0d      	ldr	r5, [pc, #52]	@ (8009f68 <__libc_init_array+0x38>)
 8009f34:	4c0d      	ldr	r4, [pc, #52]	@ (8009f6c <__libc_init_array+0x3c>)
 8009f36:	1b64      	subs	r4, r4, r5
 8009f38:	10a4      	asrs	r4, r4, #2
 8009f3a:	2600      	movs	r6, #0
 8009f3c:	42a6      	cmp	r6, r4
 8009f3e:	d109      	bne.n	8009f54 <__libc_init_array+0x24>
 8009f40:	4d0b      	ldr	r5, [pc, #44]	@ (8009f70 <__libc_init_array+0x40>)
 8009f42:	4c0c      	ldr	r4, [pc, #48]	@ (8009f74 <__libc_init_array+0x44>)
 8009f44:	f002 f864 	bl	800c010 <_init>
 8009f48:	1b64      	subs	r4, r4, r5
 8009f4a:	10a4      	asrs	r4, r4, #2
 8009f4c:	2600      	movs	r6, #0
 8009f4e:	42a6      	cmp	r6, r4
 8009f50:	d105      	bne.n	8009f5e <__libc_init_array+0x2e>
 8009f52:	bd70      	pop	{r4, r5, r6, pc}
 8009f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f58:	4798      	blx	r3
 8009f5a:	3601      	adds	r6, #1
 8009f5c:	e7ee      	b.n	8009f3c <__libc_init_array+0xc>
 8009f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f62:	4798      	blx	r3
 8009f64:	3601      	adds	r6, #1
 8009f66:	e7f2      	b.n	8009f4e <__libc_init_array+0x1e>
 8009f68:	0800c480 	.word	0x0800c480
 8009f6c:	0800c480 	.word	0x0800c480
 8009f70:	0800c480 	.word	0x0800c480
 8009f74:	0800c484 	.word	0x0800c484

08009f78 <__retarget_lock_init_recursive>:
 8009f78:	4770      	bx	lr

08009f7a <__retarget_lock_acquire_recursive>:
 8009f7a:	4770      	bx	lr

08009f7c <__retarget_lock_release_recursive>:
 8009f7c:	4770      	bx	lr

08009f7e <quorem>:
 8009f7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f82:	6903      	ldr	r3, [r0, #16]
 8009f84:	690c      	ldr	r4, [r1, #16]
 8009f86:	42a3      	cmp	r3, r4
 8009f88:	4607      	mov	r7, r0
 8009f8a:	db7e      	blt.n	800a08a <quorem+0x10c>
 8009f8c:	3c01      	subs	r4, #1
 8009f8e:	f101 0814 	add.w	r8, r1, #20
 8009f92:	00a3      	lsls	r3, r4, #2
 8009f94:	f100 0514 	add.w	r5, r0, #20
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	429a      	cmp	r2, r3
 8009fac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009fb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8009fb4:	d32e      	bcc.n	800a014 <quorem+0x96>
 8009fb6:	f04f 0a00 	mov.w	sl, #0
 8009fba:	46c4      	mov	ip, r8
 8009fbc:	46ae      	mov	lr, r5
 8009fbe:	46d3      	mov	fp, sl
 8009fc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009fc4:	b298      	uxth	r0, r3
 8009fc6:	fb06 a000 	mla	r0, r6, r0, sl
 8009fca:	0c02      	lsrs	r2, r0, #16
 8009fcc:	0c1b      	lsrs	r3, r3, #16
 8009fce:	fb06 2303 	mla	r3, r6, r3, r2
 8009fd2:	f8de 2000 	ldr.w	r2, [lr]
 8009fd6:	b280      	uxth	r0, r0
 8009fd8:	b292      	uxth	r2, r2
 8009fda:	1a12      	subs	r2, r2, r0
 8009fdc:	445a      	add	r2, fp
 8009fde:	f8de 0000 	ldr.w	r0, [lr]
 8009fe2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009fec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009ff0:	b292      	uxth	r2, r2
 8009ff2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009ff6:	45e1      	cmp	r9, ip
 8009ff8:	f84e 2b04 	str.w	r2, [lr], #4
 8009ffc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a000:	d2de      	bcs.n	8009fc0 <quorem+0x42>
 800a002:	9b00      	ldr	r3, [sp, #0]
 800a004:	58eb      	ldr	r3, [r5, r3]
 800a006:	b92b      	cbnz	r3, 800a014 <quorem+0x96>
 800a008:	9b01      	ldr	r3, [sp, #4]
 800a00a:	3b04      	subs	r3, #4
 800a00c:	429d      	cmp	r5, r3
 800a00e:	461a      	mov	r2, r3
 800a010:	d32f      	bcc.n	800a072 <quorem+0xf4>
 800a012:	613c      	str	r4, [r7, #16]
 800a014:	4638      	mov	r0, r7
 800a016:	f001 f979 	bl	800b30c <__mcmp>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	db25      	blt.n	800a06a <quorem+0xec>
 800a01e:	4629      	mov	r1, r5
 800a020:	2000      	movs	r0, #0
 800a022:	f858 2b04 	ldr.w	r2, [r8], #4
 800a026:	f8d1 c000 	ldr.w	ip, [r1]
 800a02a:	fa1f fe82 	uxth.w	lr, r2
 800a02e:	fa1f f38c 	uxth.w	r3, ip
 800a032:	eba3 030e 	sub.w	r3, r3, lr
 800a036:	4403      	add	r3, r0
 800a038:	0c12      	lsrs	r2, r2, #16
 800a03a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a03e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a042:	b29b      	uxth	r3, r3
 800a044:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a048:	45c1      	cmp	r9, r8
 800a04a:	f841 3b04 	str.w	r3, [r1], #4
 800a04e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a052:	d2e6      	bcs.n	800a022 <quorem+0xa4>
 800a054:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a058:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a05c:	b922      	cbnz	r2, 800a068 <quorem+0xea>
 800a05e:	3b04      	subs	r3, #4
 800a060:	429d      	cmp	r5, r3
 800a062:	461a      	mov	r2, r3
 800a064:	d30b      	bcc.n	800a07e <quorem+0x100>
 800a066:	613c      	str	r4, [r7, #16]
 800a068:	3601      	adds	r6, #1
 800a06a:	4630      	mov	r0, r6
 800a06c:	b003      	add	sp, #12
 800a06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a072:	6812      	ldr	r2, [r2, #0]
 800a074:	3b04      	subs	r3, #4
 800a076:	2a00      	cmp	r2, #0
 800a078:	d1cb      	bne.n	800a012 <quorem+0x94>
 800a07a:	3c01      	subs	r4, #1
 800a07c:	e7c6      	b.n	800a00c <quorem+0x8e>
 800a07e:	6812      	ldr	r2, [r2, #0]
 800a080:	3b04      	subs	r3, #4
 800a082:	2a00      	cmp	r2, #0
 800a084:	d1ef      	bne.n	800a066 <quorem+0xe8>
 800a086:	3c01      	subs	r4, #1
 800a088:	e7ea      	b.n	800a060 <quorem+0xe2>
 800a08a:	2000      	movs	r0, #0
 800a08c:	e7ee      	b.n	800a06c <quorem+0xee>
	...

0800a090 <_dtoa_r>:
 800a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	69c7      	ldr	r7, [r0, #28]
 800a096:	b099      	sub	sp, #100	@ 0x64
 800a098:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a09c:	ec55 4b10 	vmov	r4, r5, d0
 800a0a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a0a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0a4:	4683      	mov	fp, r0
 800a0a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a0aa:	b97f      	cbnz	r7, 800a0cc <_dtoa_r+0x3c>
 800a0ac:	2010      	movs	r0, #16
 800a0ae:	f000 fdfd 	bl	800acac <malloc>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a0b8:	b920      	cbnz	r0, 800a0c4 <_dtoa_r+0x34>
 800a0ba:	4ba7      	ldr	r3, [pc, #668]	@ (800a358 <_dtoa_r+0x2c8>)
 800a0bc:	21ef      	movs	r1, #239	@ 0xef
 800a0be:	48a7      	ldr	r0, [pc, #668]	@ (800a35c <_dtoa_r+0x2cc>)
 800a0c0:	f001 fc68 	bl	800b994 <__assert_func>
 800a0c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a0c8:	6007      	str	r7, [r0, #0]
 800a0ca:	60c7      	str	r7, [r0, #12]
 800a0cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a0d0:	6819      	ldr	r1, [r3, #0]
 800a0d2:	b159      	cbz	r1, 800a0ec <_dtoa_r+0x5c>
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	604a      	str	r2, [r1, #4]
 800a0d8:	2301      	movs	r3, #1
 800a0da:	4093      	lsls	r3, r2
 800a0dc:	608b      	str	r3, [r1, #8]
 800a0de:	4658      	mov	r0, fp
 800a0e0:	f000 feda 	bl	800ae98 <_Bfree>
 800a0e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	1e2b      	subs	r3, r5, #0
 800a0ee:	bfb9      	ittee	lt
 800a0f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a0f4:	9303      	strlt	r3, [sp, #12]
 800a0f6:	2300      	movge	r3, #0
 800a0f8:	6033      	strge	r3, [r6, #0]
 800a0fa:	9f03      	ldr	r7, [sp, #12]
 800a0fc:	4b98      	ldr	r3, [pc, #608]	@ (800a360 <_dtoa_r+0x2d0>)
 800a0fe:	bfbc      	itt	lt
 800a100:	2201      	movlt	r2, #1
 800a102:	6032      	strlt	r2, [r6, #0]
 800a104:	43bb      	bics	r3, r7
 800a106:	d112      	bne.n	800a12e <_dtoa_r+0x9e>
 800a108:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a10a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a114:	4323      	orrs	r3, r4
 800a116:	f000 854d 	beq.w	800abb4 <_dtoa_r+0xb24>
 800a11a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a11c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a374 <_dtoa_r+0x2e4>
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 854f 	beq.w	800abc4 <_dtoa_r+0xb34>
 800a126:	f10a 0303 	add.w	r3, sl, #3
 800a12a:	f000 bd49 	b.w	800abc0 <_dtoa_r+0xb30>
 800a12e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a132:	2200      	movs	r2, #0
 800a134:	ec51 0b17 	vmov	r0, r1, d7
 800a138:	2300      	movs	r3, #0
 800a13a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a13e:	f7f6 fccb 	bl	8000ad8 <__aeabi_dcmpeq>
 800a142:	4680      	mov	r8, r0
 800a144:	b158      	cbz	r0, 800a15e <_dtoa_r+0xce>
 800a146:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a148:	2301      	movs	r3, #1
 800a14a:	6013      	str	r3, [r2, #0]
 800a14c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a14e:	b113      	cbz	r3, 800a156 <_dtoa_r+0xc6>
 800a150:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a152:	4b84      	ldr	r3, [pc, #528]	@ (800a364 <_dtoa_r+0x2d4>)
 800a154:	6013      	str	r3, [r2, #0]
 800a156:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a378 <_dtoa_r+0x2e8>
 800a15a:	f000 bd33 	b.w	800abc4 <_dtoa_r+0xb34>
 800a15e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a162:	aa16      	add	r2, sp, #88	@ 0x58
 800a164:	a917      	add	r1, sp, #92	@ 0x5c
 800a166:	4658      	mov	r0, fp
 800a168:	f001 f980 	bl	800b46c <__d2b>
 800a16c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a170:	4681      	mov	r9, r0
 800a172:	2e00      	cmp	r6, #0
 800a174:	d077      	beq.n	800a266 <_dtoa_r+0x1d6>
 800a176:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a178:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a17c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a184:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a188:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a18c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a190:	4619      	mov	r1, r3
 800a192:	2200      	movs	r2, #0
 800a194:	4b74      	ldr	r3, [pc, #464]	@ (800a368 <_dtoa_r+0x2d8>)
 800a196:	f7f6 f87f 	bl	8000298 <__aeabi_dsub>
 800a19a:	a369      	add	r3, pc, #420	@ (adr r3, 800a340 <_dtoa_r+0x2b0>)
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	f7f6 fa32 	bl	8000608 <__aeabi_dmul>
 800a1a4:	a368      	add	r3, pc, #416	@ (adr r3, 800a348 <_dtoa_r+0x2b8>)
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	f7f6 f877 	bl	800029c <__adddf3>
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	460d      	mov	r5, r1
 800a1b4:	f7f6 f9be 	bl	8000534 <__aeabi_i2d>
 800a1b8:	a365      	add	r3, pc, #404	@ (adr r3, 800a350 <_dtoa_r+0x2c0>)
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	f7f6 fa23 	bl	8000608 <__aeabi_dmul>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	f7f6 f867 	bl	800029c <__adddf3>
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	460d      	mov	r5, r1
 800a1d2:	f7f6 fcc9 	bl	8000b68 <__aeabi_d2iz>
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	4607      	mov	r7, r0
 800a1da:	2300      	movs	r3, #0
 800a1dc:	4620      	mov	r0, r4
 800a1de:	4629      	mov	r1, r5
 800a1e0:	f7f6 fc84 	bl	8000aec <__aeabi_dcmplt>
 800a1e4:	b140      	cbz	r0, 800a1f8 <_dtoa_r+0x168>
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	f7f6 f9a4 	bl	8000534 <__aeabi_i2d>
 800a1ec:	4622      	mov	r2, r4
 800a1ee:	462b      	mov	r3, r5
 800a1f0:	f7f6 fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1f4:	b900      	cbnz	r0, 800a1f8 <_dtoa_r+0x168>
 800a1f6:	3f01      	subs	r7, #1
 800a1f8:	2f16      	cmp	r7, #22
 800a1fa:	d851      	bhi.n	800a2a0 <_dtoa_r+0x210>
 800a1fc:	4b5b      	ldr	r3, [pc, #364]	@ (800a36c <_dtoa_r+0x2dc>)
 800a1fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a20a:	f7f6 fc6f 	bl	8000aec <__aeabi_dcmplt>
 800a20e:	2800      	cmp	r0, #0
 800a210:	d048      	beq.n	800a2a4 <_dtoa_r+0x214>
 800a212:	3f01      	subs	r7, #1
 800a214:	2300      	movs	r3, #0
 800a216:	9312      	str	r3, [sp, #72]	@ 0x48
 800a218:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a21a:	1b9b      	subs	r3, r3, r6
 800a21c:	1e5a      	subs	r2, r3, #1
 800a21e:	bf44      	itt	mi
 800a220:	f1c3 0801 	rsbmi	r8, r3, #1
 800a224:	2300      	movmi	r3, #0
 800a226:	9208      	str	r2, [sp, #32]
 800a228:	bf54      	ite	pl
 800a22a:	f04f 0800 	movpl.w	r8, #0
 800a22e:	9308      	strmi	r3, [sp, #32]
 800a230:	2f00      	cmp	r7, #0
 800a232:	db39      	blt.n	800a2a8 <_dtoa_r+0x218>
 800a234:	9b08      	ldr	r3, [sp, #32]
 800a236:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a238:	443b      	add	r3, r7
 800a23a:	9308      	str	r3, [sp, #32]
 800a23c:	2300      	movs	r3, #0
 800a23e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a242:	2b09      	cmp	r3, #9
 800a244:	d864      	bhi.n	800a310 <_dtoa_r+0x280>
 800a246:	2b05      	cmp	r3, #5
 800a248:	bfc4      	itt	gt
 800a24a:	3b04      	subgt	r3, #4
 800a24c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a250:	f1a3 0302 	sub.w	r3, r3, #2
 800a254:	bfcc      	ite	gt
 800a256:	2400      	movgt	r4, #0
 800a258:	2401      	movle	r4, #1
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	d863      	bhi.n	800a326 <_dtoa_r+0x296>
 800a25e:	e8df f003 	tbb	[pc, r3]
 800a262:	372a      	.short	0x372a
 800a264:	5535      	.short	0x5535
 800a266:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a26a:	441e      	add	r6, r3
 800a26c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a270:	2b20      	cmp	r3, #32
 800a272:	bfc1      	itttt	gt
 800a274:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a278:	409f      	lslgt	r7, r3
 800a27a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a27e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a282:	bfd6      	itet	le
 800a284:	f1c3 0320 	rsble	r3, r3, #32
 800a288:	ea47 0003 	orrgt.w	r0, r7, r3
 800a28c:	fa04 f003 	lslle.w	r0, r4, r3
 800a290:	f7f6 f940 	bl	8000514 <__aeabi_ui2d>
 800a294:	2201      	movs	r2, #1
 800a296:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a29a:	3e01      	subs	r6, #1
 800a29c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a29e:	e777      	b.n	800a190 <_dtoa_r+0x100>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e7b8      	b.n	800a216 <_dtoa_r+0x186>
 800a2a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a2a6:	e7b7      	b.n	800a218 <_dtoa_r+0x188>
 800a2a8:	427b      	negs	r3, r7
 800a2aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	eba8 0807 	sub.w	r8, r8, r7
 800a2b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2b4:	e7c4      	b.n	800a240 <_dtoa_r+0x1b0>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	dc35      	bgt.n	800a32c <_dtoa_r+0x29c>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	9307      	str	r3, [sp, #28]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2ca:	e00b      	b.n	800a2e4 <_dtoa_r+0x254>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e7f3      	b.n	800a2b8 <_dtoa_r+0x228>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2d6:	18fb      	adds	r3, r7, r3
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	9307      	str	r3, [sp, #28]
 800a2e0:	bfb8      	it	lt
 800a2e2:	2301      	movlt	r3, #1
 800a2e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	2204      	movs	r2, #4
 800a2ec:	f102 0514 	add.w	r5, r2, #20
 800a2f0:	429d      	cmp	r5, r3
 800a2f2:	d91f      	bls.n	800a334 <_dtoa_r+0x2a4>
 800a2f4:	6041      	str	r1, [r0, #4]
 800a2f6:	4658      	mov	r0, fp
 800a2f8:	f000 fd8e 	bl	800ae18 <_Balloc>
 800a2fc:	4682      	mov	sl, r0
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d13c      	bne.n	800a37c <_dtoa_r+0x2ec>
 800a302:	4b1b      	ldr	r3, [pc, #108]	@ (800a370 <_dtoa_r+0x2e0>)
 800a304:	4602      	mov	r2, r0
 800a306:	f240 11af 	movw	r1, #431	@ 0x1af
 800a30a:	e6d8      	b.n	800a0be <_dtoa_r+0x2e>
 800a30c:	2301      	movs	r3, #1
 800a30e:	e7e0      	b.n	800a2d2 <_dtoa_r+0x242>
 800a310:	2401      	movs	r4, #1
 800a312:	2300      	movs	r3, #0
 800a314:	9309      	str	r3, [sp, #36]	@ 0x24
 800a316:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a318:	f04f 33ff 	mov.w	r3, #4294967295
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	9307      	str	r3, [sp, #28]
 800a320:	2200      	movs	r2, #0
 800a322:	2312      	movs	r3, #18
 800a324:	e7d0      	b.n	800a2c8 <_dtoa_r+0x238>
 800a326:	2301      	movs	r3, #1
 800a328:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a32a:	e7f5      	b.n	800a318 <_dtoa_r+0x288>
 800a32c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	9307      	str	r3, [sp, #28]
 800a332:	e7d7      	b.n	800a2e4 <_dtoa_r+0x254>
 800a334:	3101      	adds	r1, #1
 800a336:	0052      	lsls	r2, r2, #1
 800a338:	e7d8      	b.n	800a2ec <_dtoa_r+0x25c>
 800a33a:	bf00      	nop
 800a33c:	f3af 8000 	nop.w
 800a340:	636f4361 	.word	0x636f4361
 800a344:	3fd287a7 	.word	0x3fd287a7
 800a348:	8b60c8b3 	.word	0x8b60c8b3
 800a34c:	3fc68a28 	.word	0x3fc68a28
 800a350:	509f79fb 	.word	0x509f79fb
 800a354:	3fd34413 	.word	0x3fd34413
 800a358:	0800c149 	.word	0x0800c149
 800a35c:	0800c160 	.word	0x0800c160
 800a360:	7ff00000 	.word	0x7ff00000
 800a364:	0800c119 	.word	0x0800c119
 800a368:	3ff80000 	.word	0x3ff80000
 800a36c:	0800c258 	.word	0x0800c258
 800a370:	0800c1b8 	.word	0x0800c1b8
 800a374:	0800c145 	.word	0x0800c145
 800a378:	0800c118 	.word	0x0800c118
 800a37c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a380:	6018      	str	r0, [r3, #0]
 800a382:	9b07      	ldr	r3, [sp, #28]
 800a384:	2b0e      	cmp	r3, #14
 800a386:	f200 80a4 	bhi.w	800a4d2 <_dtoa_r+0x442>
 800a38a:	2c00      	cmp	r4, #0
 800a38c:	f000 80a1 	beq.w	800a4d2 <_dtoa_r+0x442>
 800a390:	2f00      	cmp	r7, #0
 800a392:	dd33      	ble.n	800a3fc <_dtoa_r+0x36c>
 800a394:	4bad      	ldr	r3, [pc, #692]	@ (800a64c <_dtoa_r+0x5bc>)
 800a396:	f007 020f 	and.w	r2, r7, #15
 800a39a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a39e:	ed93 7b00 	vldr	d7, [r3]
 800a3a2:	05f8      	lsls	r0, r7, #23
 800a3a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a3a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a3ac:	d516      	bpl.n	800a3dc <_dtoa_r+0x34c>
 800a3ae:	4ba8      	ldr	r3, [pc, #672]	@ (800a650 <_dtoa_r+0x5c0>)
 800a3b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a3b8:	f7f6 fa50 	bl	800085c <__aeabi_ddiv>
 800a3bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3c0:	f004 040f 	and.w	r4, r4, #15
 800a3c4:	2603      	movs	r6, #3
 800a3c6:	4da2      	ldr	r5, [pc, #648]	@ (800a650 <_dtoa_r+0x5c0>)
 800a3c8:	b954      	cbnz	r4, 800a3e0 <_dtoa_r+0x350>
 800a3ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3d2:	f7f6 fa43 	bl	800085c <__aeabi_ddiv>
 800a3d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3da:	e028      	b.n	800a42e <_dtoa_r+0x39e>
 800a3dc:	2602      	movs	r6, #2
 800a3de:	e7f2      	b.n	800a3c6 <_dtoa_r+0x336>
 800a3e0:	07e1      	lsls	r1, r4, #31
 800a3e2:	d508      	bpl.n	800a3f6 <_dtoa_r+0x366>
 800a3e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3ec:	f7f6 f90c 	bl	8000608 <__aeabi_dmul>
 800a3f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3f4:	3601      	adds	r6, #1
 800a3f6:	1064      	asrs	r4, r4, #1
 800a3f8:	3508      	adds	r5, #8
 800a3fa:	e7e5      	b.n	800a3c8 <_dtoa_r+0x338>
 800a3fc:	f000 80d2 	beq.w	800a5a4 <_dtoa_r+0x514>
 800a400:	427c      	negs	r4, r7
 800a402:	4b92      	ldr	r3, [pc, #584]	@ (800a64c <_dtoa_r+0x5bc>)
 800a404:	4d92      	ldr	r5, [pc, #584]	@ (800a650 <_dtoa_r+0x5c0>)
 800a406:	f004 020f 	and.w	r2, r4, #15
 800a40a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a416:	f7f6 f8f7 	bl	8000608 <__aeabi_dmul>
 800a41a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a41e:	1124      	asrs	r4, r4, #4
 800a420:	2300      	movs	r3, #0
 800a422:	2602      	movs	r6, #2
 800a424:	2c00      	cmp	r4, #0
 800a426:	f040 80b2 	bne.w	800a58e <_dtoa_r+0x4fe>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1d3      	bne.n	800a3d6 <_dtoa_r+0x346>
 800a42e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a430:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a434:	2b00      	cmp	r3, #0
 800a436:	f000 80b7 	beq.w	800a5a8 <_dtoa_r+0x518>
 800a43a:	4b86      	ldr	r3, [pc, #536]	@ (800a654 <_dtoa_r+0x5c4>)
 800a43c:	2200      	movs	r2, #0
 800a43e:	4620      	mov	r0, r4
 800a440:	4629      	mov	r1, r5
 800a442:	f7f6 fb53 	bl	8000aec <__aeabi_dcmplt>
 800a446:	2800      	cmp	r0, #0
 800a448:	f000 80ae 	beq.w	800a5a8 <_dtoa_r+0x518>
 800a44c:	9b07      	ldr	r3, [sp, #28]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f000 80aa 	beq.w	800a5a8 <_dtoa_r+0x518>
 800a454:	9b00      	ldr	r3, [sp, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	dd37      	ble.n	800a4ca <_dtoa_r+0x43a>
 800a45a:	1e7b      	subs	r3, r7, #1
 800a45c:	9304      	str	r3, [sp, #16]
 800a45e:	4620      	mov	r0, r4
 800a460:	4b7d      	ldr	r3, [pc, #500]	@ (800a658 <_dtoa_r+0x5c8>)
 800a462:	2200      	movs	r2, #0
 800a464:	4629      	mov	r1, r5
 800a466:	f7f6 f8cf 	bl	8000608 <__aeabi_dmul>
 800a46a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a46e:	9c00      	ldr	r4, [sp, #0]
 800a470:	3601      	adds	r6, #1
 800a472:	4630      	mov	r0, r6
 800a474:	f7f6 f85e 	bl	8000534 <__aeabi_i2d>
 800a478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a47c:	f7f6 f8c4 	bl	8000608 <__aeabi_dmul>
 800a480:	4b76      	ldr	r3, [pc, #472]	@ (800a65c <_dtoa_r+0x5cc>)
 800a482:	2200      	movs	r2, #0
 800a484:	f7f5 ff0a 	bl	800029c <__adddf3>
 800a488:	4605      	mov	r5, r0
 800a48a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a48e:	2c00      	cmp	r4, #0
 800a490:	f040 808d 	bne.w	800a5ae <_dtoa_r+0x51e>
 800a494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a498:	4b71      	ldr	r3, [pc, #452]	@ (800a660 <_dtoa_r+0x5d0>)
 800a49a:	2200      	movs	r2, #0
 800a49c:	f7f5 fefc 	bl	8000298 <__aeabi_dsub>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4a8:	462a      	mov	r2, r5
 800a4aa:	4633      	mov	r3, r6
 800a4ac:	f7f6 fb3c 	bl	8000b28 <__aeabi_dcmpgt>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	f040 828b 	bne.w	800a9cc <_dtoa_r+0x93c>
 800a4b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4ba:	462a      	mov	r2, r5
 800a4bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a4c0:	f7f6 fb14 	bl	8000aec <__aeabi_dcmplt>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	f040 8128 	bne.w	800a71a <_dtoa_r+0x68a>
 800a4ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a4ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a4d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f2c0 815a 	blt.w	800a78e <_dtoa_r+0x6fe>
 800a4da:	2f0e      	cmp	r7, #14
 800a4dc:	f300 8157 	bgt.w	800a78e <_dtoa_r+0x6fe>
 800a4e0:	4b5a      	ldr	r3, [pc, #360]	@ (800a64c <_dtoa_r+0x5bc>)
 800a4e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a4e6:	ed93 7b00 	vldr	d7, [r3]
 800a4ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	ed8d 7b00 	vstr	d7, [sp]
 800a4f2:	da03      	bge.n	800a4fc <_dtoa_r+0x46c>
 800a4f4:	9b07      	ldr	r3, [sp, #28]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f340 8101 	ble.w	800a6fe <_dtoa_r+0x66e>
 800a4fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a500:	4656      	mov	r6, sl
 800a502:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a506:	4620      	mov	r0, r4
 800a508:	4629      	mov	r1, r5
 800a50a:	f7f6 f9a7 	bl	800085c <__aeabi_ddiv>
 800a50e:	f7f6 fb2b 	bl	8000b68 <__aeabi_d2iz>
 800a512:	4680      	mov	r8, r0
 800a514:	f7f6 f80e 	bl	8000534 <__aeabi_i2d>
 800a518:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a51c:	f7f6 f874 	bl	8000608 <__aeabi_dmul>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	4620      	mov	r0, r4
 800a526:	4629      	mov	r1, r5
 800a528:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a52c:	f7f5 feb4 	bl	8000298 <__aeabi_dsub>
 800a530:	f806 4b01 	strb.w	r4, [r6], #1
 800a534:	9d07      	ldr	r5, [sp, #28]
 800a536:	eba6 040a 	sub.w	r4, r6, sl
 800a53a:	42a5      	cmp	r5, r4
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	f040 8117 	bne.w	800a772 <_dtoa_r+0x6e2>
 800a544:	f7f5 feaa 	bl	800029c <__adddf3>
 800a548:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a54c:	4604      	mov	r4, r0
 800a54e:	460d      	mov	r5, r1
 800a550:	f7f6 faea 	bl	8000b28 <__aeabi_dcmpgt>
 800a554:	2800      	cmp	r0, #0
 800a556:	f040 80f9 	bne.w	800a74c <_dtoa_r+0x6bc>
 800a55a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a55e:	4620      	mov	r0, r4
 800a560:	4629      	mov	r1, r5
 800a562:	f7f6 fab9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a566:	b118      	cbz	r0, 800a570 <_dtoa_r+0x4e0>
 800a568:	f018 0f01 	tst.w	r8, #1
 800a56c:	f040 80ee 	bne.w	800a74c <_dtoa_r+0x6bc>
 800a570:	4649      	mov	r1, r9
 800a572:	4658      	mov	r0, fp
 800a574:	f000 fc90 	bl	800ae98 <_Bfree>
 800a578:	2300      	movs	r3, #0
 800a57a:	7033      	strb	r3, [r6, #0]
 800a57c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a57e:	3701      	adds	r7, #1
 800a580:	601f      	str	r7, [r3, #0]
 800a582:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a584:	2b00      	cmp	r3, #0
 800a586:	f000 831d 	beq.w	800abc4 <_dtoa_r+0xb34>
 800a58a:	601e      	str	r6, [r3, #0]
 800a58c:	e31a      	b.n	800abc4 <_dtoa_r+0xb34>
 800a58e:	07e2      	lsls	r2, r4, #31
 800a590:	d505      	bpl.n	800a59e <_dtoa_r+0x50e>
 800a592:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a596:	f7f6 f837 	bl	8000608 <__aeabi_dmul>
 800a59a:	3601      	adds	r6, #1
 800a59c:	2301      	movs	r3, #1
 800a59e:	1064      	asrs	r4, r4, #1
 800a5a0:	3508      	adds	r5, #8
 800a5a2:	e73f      	b.n	800a424 <_dtoa_r+0x394>
 800a5a4:	2602      	movs	r6, #2
 800a5a6:	e742      	b.n	800a42e <_dtoa_r+0x39e>
 800a5a8:	9c07      	ldr	r4, [sp, #28]
 800a5aa:	9704      	str	r7, [sp, #16]
 800a5ac:	e761      	b.n	800a472 <_dtoa_r+0x3e2>
 800a5ae:	4b27      	ldr	r3, [pc, #156]	@ (800a64c <_dtoa_r+0x5bc>)
 800a5b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a5b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a5b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5ba:	4454      	add	r4, sl
 800a5bc:	2900      	cmp	r1, #0
 800a5be:	d053      	beq.n	800a668 <_dtoa_r+0x5d8>
 800a5c0:	4928      	ldr	r1, [pc, #160]	@ (800a664 <_dtoa_r+0x5d4>)
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	f7f6 f94a 	bl	800085c <__aeabi_ddiv>
 800a5c8:	4633      	mov	r3, r6
 800a5ca:	462a      	mov	r2, r5
 800a5cc:	f7f5 fe64 	bl	8000298 <__aeabi_dsub>
 800a5d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a5d4:	4656      	mov	r6, sl
 800a5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5da:	f7f6 fac5 	bl	8000b68 <__aeabi_d2iz>
 800a5de:	4605      	mov	r5, r0
 800a5e0:	f7f5 ffa8 	bl	8000534 <__aeabi_i2d>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5ec:	f7f5 fe54 	bl	8000298 <__aeabi_dsub>
 800a5f0:	3530      	adds	r5, #48	@ 0x30
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5fa:	f806 5b01 	strb.w	r5, [r6], #1
 800a5fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a602:	f7f6 fa73 	bl	8000aec <__aeabi_dcmplt>
 800a606:	2800      	cmp	r0, #0
 800a608:	d171      	bne.n	800a6ee <_dtoa_r+0x65e>
 800a60a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a60e:	4911      	ldr	r1, [pc, #68]	@ (800a654 <_dtoa_r+0x5c4>)
 800a610:	2000      	movs	r0, #0
 800a612:	f7f5 fe41 	bl	8000298 <__aeabi_dsub>
 800a616:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a61a:	f7f6 fa67 	bl	8000aec <__aeabi_dcmplt>
 800a61e:	2800      	cmp	r0, #0
 800a620:	f040 8095 	bne.w	800a74e <_dtoa_r+0x6be>
 800a624:	42a6      	cmp	r6, r4
 800a626:	f43f af50 	beq.w	800a4ca <_dtoa_r+0x43a>
 800a62a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a62e:	4b0a      	ldr	r3, [pc, #40]	@ (800a658 <_dtoa_r+0x5c8>)
 800a630:	2200      	movs	r2, #0
 800a632:	f7f5 ffe9 	bl	8000608 <__aeabi_dmul>
 800a636:	4b08      	ldr	r3, [pc, #32]	@ (800a658 <_dtoa_r+0x5c8>)
 800a638:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a63c:	2200      	movs	r2, #0
 800a63e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a642:	f7f5 ffe1 	bl	8000608 <__aeabi_dmul>
 800a646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a64a:	e7c4      	b.n	800a5d6 <_dtoa_r+0x546>
 800a64c:	0800c258 	.word	0x0800c258
 800a650:	0800c230 	.word	0x0800c230
 800a654:	3ff00000 	.word	0x3ff00000
 800a658:	40240000 	.word	0x40240000
 800a65c:	401c0000 	.word	0x401c0000
 800a660:	40140000 	.word	0x40140000
 800a664:	3fe00000 	.word	0x3fe00000
 800a668:	4631      	mov	r1, r6
 800a66a:	4628      	mov	r0, r5
 800a66c:	f7f5 ffcc 	bl	8000608 <__aeabi_dmul>
 800a670:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a674:	9415      	str	r4, [sp, #84]	@ 0x54
 800a676:	4656      	mov	r6, sl
 800a678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a67c:	f7f6 fa74 	bl	8000b68 <__aeabi_d2iz>
 800a680:	4605      	mov	r5, r0
 800a682:	f7f5 ff57 	bl	8000534 <__aeabi_i2d>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a68e:	f7f5 fe03 	bl	8000298 <__aeabi_dsub>
 800a692:	3530      	adds	r5, #48	@ 0x30
 800a694:	f806 5b01 	strb.w	r5, [r6], #1
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	42a6      	cmp	r6, r4
 800a69e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6a2:	f04f 0200 	mov.w	r2, #0
 800a6a6:	d124      	bne.n	800a6f2 <_dtoa_r+0x662>
 800a6a8:	4bac      	ldr	r3, [pc, #688]	@ (800a95c <_dtoa_r+0x8cc>)
 800a6aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a6ae:	f7f5 fdf5 	bl	800029c <__adddf3>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6ba:	f7f6 fa35 	bl	8000b28 <__aeabi_dcmpgt>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d145      	bne.n	800a74e <_dtoa_r+0x6be>
 800a6c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a6c6:	49a5      	ldr	r1, [pc, #660]	@ (800a95c <_dtoa_r+0x8cc>)
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	f7f5 fde5 	bl	8000298 <__aeabi_dsub>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6d6:	f7f6 fa09 	bl	8000aec <__aeabi_dcmplt>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	f43f aef5 	beq.w	800a4ca <_dtoa_r+0x43a>
 800a6e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a6e2:	1e73      	subs	r3, r6, #1
 800a6e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a6e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6ea:	2b30      	cmp	r3, #48	@ 0x30
 800a6ec:	d0f8      	beq.n	800a6e0 <_dtoa_r+0x650>
 800a6ee:	9f04      	ldr	r7, [sp, #16]
 800a6f0:	e73e      	b.n	800a570 <_dtoa_r+0x4e0>
 800a6f2:	4b9b      	ldr	r3, [pc, #620]	@ (800a960 <_dtoa_r+0x8d0>)
 800a6f4:	f7f5 ff88 	bl	8000608 <__aeabi_dmul>
 800a6f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6fc:	e7bc      	b.n	800a678 <_dtoa_r+0x5e8>
 800a6fe:	d10c      	bne.n	800a71a <_dtoa_r+0x68a>
 800a700:	4b98      	ldr	r3, [pc, #608]	@ (800a964 <_dtoa_r+0x8d4>)
 800a702:	2200      	movs	r2, #0
 800a704:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a708:	f7f5 ff7e 	bl	8000608 <__aeabi_dmul>
 800a70c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a710:	f7f6 fa00 	bl	8000b14 <__aeabi_dcmpge>
 800a714:	2800      	cmp	r0, #0
 800a716:	f000 8157 	beq.w	800a9c8 <_dtoa_r+0x938>
 800a71a:	2400      	movs	r4, #0
 800a71c:	4625      	mov	r5, r4
 800a71e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a720:	43db      	mvns	r3, r3
 800a722:	9304      	str	r3, [sp, #16]
 800a724:	4656      	mov	r6, sl
 800a726:	2700      	movs	r7, #0
 800a728:	4621      	mov	r1, r4
 800a72a:	4658      	mov	r0, fp
 800a72c:	f000 fbb4 	bl	800ae98 <_Bfree>
 800a730:	2d00      	cmp	r5, #0
 800a732:	d0dc      	beq.n	800a6ee <_dtoa_r+0x65e>
 800a734:	b12f      	cbz	r7, 800a742 <_dtoa_r+0x6b2>
 800a736:	42af      	cmp	r7, r5
 800a738:	d003      	beq.n	800a742 <_dtoa_r+0x6b2>
 800a73a:	4639      	mov	r1, r7
 800a73c:	4658      	mov	r0, fp
 800a73e:	f000 fbab 	bl	800ae98 <_Bfree>
 800a742:	4629      	mov	r1, r5
 800a744:	4658      	mov	r0, fp
 800a746:	f000 fba7 	bl	800ae98 <_Bfree>
 800a74a:	e7d0      	b.n	800a6ee <_dtoa_r+0x65e>
 800a74c:	9704      	str	r7, [sp, #16]
 800a74e:	4633      	mov	r3, r6
 800a750:	461e      	mov	r6, r3
 800a752:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a756:	2a39      	cmp	r2, #57	@ 0x39
 800a758:	d107      	bne.n	800a76a <_dtoa_r+0x6da>
 800a75a:	459a      	cmp	sl, r3
 800a75c:	d1f8      	bne.n	800a750 <_dtoa_r+0x6c0>
 800a75e:	9a04      	ldr	r2, [sp, #16]
 800a760:	3201      	adds	r2, #1
 800a762:	9204      	str	r2, [sp, #16]
 800a764:	2230      	movs	r2, #48	@ 0x30
 800a766:	f88a 2000 	strb.w	r2, [sl]
 800a76a:	781a      	ldrb	r2, [r3, #0]
 800a76c:	3201      	adds	r2, #1
 800a76e:	701a      	strb	r2, [r3, #0]
 800a770:	e7bd      	b.n	800a6ee <_dtoa_r+0x65e>
 800a772:	4b7b      	ldr	r3, [pc, #492]	@ (800a960 <_dtoa_r+0x8d0>)
 800a774:	2200      	movs	r2, #0
 800a776:	f7f5 ff47 	bl	8000608 <__aeabi_dmul>
 800a77a:	2200      	movs	r2, #0
 800a77c:	2300      	movs	r3, #0
 800a77e:	4604      	mov	r4, r0
 800a780:	460d      	mov	r5, r1
 800a782:	f7f6 f9a9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a786:	2800      	cmp	r0, #0
 800a788:	f43f aebb 	beq.w	800a502 <_dtoa_r+0x472>
 800a78c:	e6f0      	b.n	800a570 <_dtoa_r+0x4e0>
 800a78e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a790:	2a00      	cmp	r2, #0
 800a792:	f000 80db 	beq.w	800a94c <_dtoa_r+0x8bc>
 800a796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a798:	2a01      	cmp	r2, #1
 800a79a:	f300 80bf 	bgt.w	800a91c <_dtoa_r+0x88c>
 800a79e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a7a0:	2a00      	cmp	r2, #0
 800a7a2:	f000 80b7 	beq.w	800a914 <_dtoa_r+0x884>
 800a7a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a7aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a7ac:	4646      	mov	r6, r8
 800a7ae:	9a08      	ldr	r2, [sp, #32]
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	441a      	add	r2, r3
 800a7b4:	4658      	mov	r0, fp
 800a7b6:	4498      	add	r8, r3
 800a7b8:	9208      	str	r2, [sp, #32]
 800a7ba:	f000 fc21 	bl	800b000 <__i2b>
 800a7be:	4605      	mov	r5, r0
 800a7c0:	b15e      	cbz	r6, 800a7da <_dtoa_r+0x74a>
 800a7c2:	9b08      	ldr	r3, [sp, #32]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	dd08      	ble.n	800a7da <_dtoa_r+0x74a>
 800a7c8:	42b3      	cmp	r3, r6
 800a7ca:	9a08      	ldr	r2, [sp, #32]
 800a7cc:	bfa8      	it	ge
 800a7ce:	4633      	movge	r3, r6
 800a7d0:	eba8 0803 	sub.w	r8, r8, r3
 800a7d4:	1af6      	subs	r6, r6, r3
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	9308      	str	r3, [sp, #32]
 800a7da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7dc:	b1f3      	cbz	r3, 800a81c <_dtoa_r+0x78c>
 800a7de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 80b7 	beq.w	800a954 <_dtoa_r+0x8c4>
 800a7e6:	b18c      	cbz	r4, 800a80c <_dtoa_r+0x77c>
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	4622      	mov	r2, r4
 800a7ec:	4658      	mov	r0, fp
 800a7ee:	f000 fcc7 	bl	800b180 <__pow5mult>
 800a7f2:	464a      	mov	r2, r9
 800a7f4:	4601      	mov	r1, r0
 800a7f6:	4605      	mov	r5, r0
 800a7f8:	4658      	mov	r0, fp
 800a7fa:	f000 fc17 	bl	800b02c <__multiply>
 800a7fe:	4649      	mov	r1, r9
 800a800:	9004      	str	r0, [sp, #16]
 800a802:	4658      	mov	r0, fp
 800a804:	f000 fb48 	bl	800ae98 <_Bfree>
 800a808:	9b04      	ldr	r3, [sp, #16]
 800a80a:	4699      	mov	r9, r3
 800a80c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a80e:	1b1a      	subs	r2, r3, r4
 800a810:	d004      	beq.n	800a81c <_dtoa_r+0x78c>
 800a812:	4649      	mov	r1, r9
 800a814:	4658      	mov	r0, fp
 800a816:	f000 fcb3 	bl	800b180 <__pow5mult>
 800a81a:	4681      	mov	r9, r0
 800a81c:	2101      	movs	r1, #1
 800a81e:	4658      	mov	r0, fp
 800a820:	f000 fbee 	bl	800b000 <__i2b>
 800a824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a826:	4604      	mov	r4, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f000 81cf 	beq.w	800abcc <_dtoa_r+0xb3c>
 800a82e:	461a      	mov	r2, r3
 800a830:	4601      	mov	r1, r0
 800a832:	4658      	mov	r0, fp
 800a834:	f000 fca4 	bl	800b180 <__pow5mult>
 800a838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	4604      	mov	r4, r0
 800a83e:	f300 8095 	bgt.w	800a96c <_dtoa_r+0x8dc>
 800a842:	9b02      	ldr	r3, [sp, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	f040 8087 	bne.w	800a958 <_dtoa_r+0x8c8>
 800a84a:	9b03      	ldr	r3, [sp, #12]
 800a84c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a850:	2b00      	cmp	r3, #0
 800a852:	f040 8089 	bne.w	800a968 <_dtoa_r+0x8d8>
 800a856:	9b03      	ldr	r3, [sp, #12]
 800a858:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a85c:	0d1b      	lsrs	r3, r3, #20
 800a85e:	051b      	lsls	r3, r3, #20
 800a860:	b12b      	cbz	r3, 800a86e <_dtoa_r+0x7de>
 800a862:	9b08      	ldr	r3, [sp, #32]
 800a864:	3301      	adds	r3, #1
 800a866:	9308      	str	r3, [sp, #32]
 800a868:	f108 0801 	add.w	r8, r8, #1
 800a86c:	2301      	movs	r3, #1
 800a86e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 81b0 	beq.w	800abd8 <_dtoa_r+0xb48>
 800a878:	6923      	ldr	r3, [r4, #16]
 800a87a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a87e:	6918      	ldr	r0, [r3, #16]
 800a880:	f000 fb72 	bl	800af68 <__hi0bits>
 800a884:	f1c0 0020 	rsb	r0, r0, #32
 800a888:	9b08      	ldr	r3, [sp, #32]
 800a88a:	4418      	add	r0, r3
 800a88c:	f010 001f 	ands.w	r0, r0, #31
 800a890:	d077      	beq.n	800a982 <_dtoa_r+0x8f2>
 800a892:	f1c0 0320 	rsb	r3, r0, #32
 800a896:	2b04      	cmp	r3, #4
 800a898:	dd6b      	ble.n	800a972 <_dtoa_r+0x8e2>
 800a89a:	9b08      	ldr	r3, [sp, #32]
 800a89c:	f1c0 001c 	rsb	r0, r0, #28
 800a8a0:	4403      	add	r3, r0
 800a8a2:	4480      	add	r8, r0
 800a8a4:	4406      	add	r6, r0
 800a8a6:	9308      	str	r3, [sp, #32]
 800a8a8:	f1b8 0f00 	cmp.w	r8, #0
 800a8ac:	dd05      	ble.n	800a8ba <_dtoa_r+0x82a>
 800a8ae:	4649      	mov	r1, r9
 800a8b0:	4642      	mov	r2, r8
 800a8b2:	4658      	mov	r0, fp
 800a8b4:	f000 fcbe 	bl	800b234 <__lshift>
 800a8b8:	4681      	mov	r9, r0
 800a8ba:	9b08      	ldr	r3, [sp, #32]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	dd05      	ble.n	800a8cc <_dtoa_r+0x83c>
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	4658      	mov	r0, fp
 800a8c6:	f000 fcb5 	bl	800b234 <__lshift>
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d059      	beq.n	800a986 <_dtoa_r+0x8f6>
 800a8d2:	4621      	mov	r1, r4
 800a8d4:	4648      	mov	r0, r9
 800a8d6:	f000 fd19 	bl	800b30c <__mcmp>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	da53      	bge.n	800a986 <_dtoa_r+0x8f6>
 800a8de:	1e7b      	subs	r3, r7, #1
 800a8e0:	9304      	str	r3, [sp, #16]
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	220a      	movs	r2, #10
 800a8e8:	4658      	mov	r0, fp
 800a8ea:	f000 faf7 	bl	800aedc <__multadd>
 800a8ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8f0:	4681      	mov	r9, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f000 8172 	beq.w	800abdc <_dtoa_r+0xb4c>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	220a      	movs	r2, #10
 800a8fe:	4658      	mov	r0, fp
 800a900:	f000 faec 	bl	800aedc <__multadd>
 800a904:	9b00      	ldr	r3, [sp, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	4605      	mov	r5, r0
 800a90a:	dc67      	bgt.n	800a9dc <_dtoa_r+0x94c>
 800a90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a90e:	2b02      	cmp	r3, #2
 800a910:	dc41      	bgt.n	800a996 <_dtoa_r+0x906>
 800a912:	e063      	b.n	800a9dc <_dtoa_r+0x94c>
 800a914:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a916:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a91a:	e746      	b.n	800a7aa <_dtoa_r+0x71a>
 800a91c:	9b07      	ldr	r3, [sp, #28]
 800a91e:	1e5c      	subs	r4, r3, #1
 800a920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a922:	42a3      	cmp	r3, r4
 800a924:	bfbf      	itttt	lt
 800a926:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a928:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a92a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a92c:	1ae3      	sublt	r3, r4, r3
 800a92e:	bfb4      	ite	lt
 800a930:	18d2      	addlt	r2, r2, r3
 800a932:	1b1c      	subge	r4, r3, r4
 800a934:	9b07      	ldr	r3, [sp, #28]
 800a936:	bfbc      	itt	lt
 800a938:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a93a:	2400      	movlt	r4, #0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	bfb5      	itete	lt
 800a940:	eba8 0603 	sublt.w	r6, r8, r3
 800a944:	9b07      	ldrge	r3, [sp, #28]
 800a946:	2300      	movlt	r3, #0
 800a948:	4646      	movge	r6, r8
 800a94a:	e730      	b.n	800a7ae <_dtoa_r+0x71e>
 800a94c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a94e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a950:	4646      	mov	r6, r8
 800a952:	e735      	b.n	800a7c0 <_dtoa_r+0x730>
 800a954:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a956:	e75c      	b.n	800a812 <_dtoa_r+0x782>
 800a958:	2300      	movs	r3, #0
 800a95a:	e788      	b.n	800a86e <_dtoa_r+0x7de>
 800a95c:	3fe00000 	.word	0x3fe00000
 800a960:	40240000 	.word	0x40240000
 800a964:	40140000 	.word	0x40140000
 800a968:	9b02      	ldr	r3, [sp, #8]
 800a96a:	e780      	b.n	800a86e <_dtoa_r+0x7de>
 800a96c:	2300      	movs	r3, #0
 800a96e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a970:	e782      	b.n	800a878 <_dtoa_r+0x7e8>
 800a972:	d099      	beq.n	800a8a8 <_dtoa_r+0x818>
 800a974:	9a08      	ldr	r2, [sp, #32]
 800a976:	331c      	adds	r3, #28
 800a978:	441a      	add	r2, r3
 800a97a:	4498      	add	r8, r3
 800a97c:	441e      	add	r6, r3
 800a97e:	9208      	str	r2, [sp, #32]
 800a980:	e792      	b.n	800a8a8 <_dtoa_r+0x818>
 800a982:	4603      	mov	r3, r0
 800a984:	e7f6      	b.n	800a974 <_dtoa_r+0x8e4>
 800a986:	9b07      	ldr	r3, [sp, #28]
 800a988:	9704      	str	r7, [sp, #16]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	dc20      	bgt.n	800a9d0 <_dtoa_r+0x940>
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a992:	2b02      	cmp	r3, #2
 800a994:	dd1e      	ble.n	800a9d4 <_dtoa_r+0x944>
 800a996:	9b00      	ldr	r3, [sp, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f47f aec0 	bne.w	800a71e <_dtoa_r+0x68e>
 800a99e:	4621      	mov	r1, r4
 800a9a0:	2205      	movs	r2, #5
 800a9a2:	4658      	mov	r0, fp
 800a9a4:	f000 fa9a 	bl	800aedc <__multadd>
 800a9a8:	4601      	mov	r1, r0
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	4648      	mov	r0, r9
 800a9ae:	f000 fcad 	bl	800b30c <__mcmp>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	f77f aeb3 	ble.w	800a71e <_dtoa_r+0x68e>
 800a9b8:	4656      	mov	r6, sl
 800a9ba:	2331      	movs	r3, #49	@ 0x31
 800a9bc:	f806 3b01 	strb.w	r3, [r6], #1
 800a9c0:	9b04      	ldr	r3, [sp, #16]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	9304      	str	r3, [sp, #16]
 800a9c6:	e6ae      	b.n	800a726 <_dtoa_r+0x696>
 800a9c8:	9c07      	ldr	r4, [sp, #28]
 800a9ca:	9704      	str	r7, [sp, #16]
 800a9cc:	4625      	mov	r5, r4
 800a9ce:	e7f3      	b.n	800a9b8 <_dtoa_r+0x928>
 800a9d0:	9b07      	ldr	r3, [sp, #28]
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f000 8104 	beq.w	800abe4 <_dtoa_r+0xb54>
 800a9dc:	2e00      	cmp	r6, #0
 800a9de:	dd05      	ble.n	800a9ec <_dtoa_r+0x95c>
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	4632      	mov	r2, r6
 800a9e4:	4658      	mov	r0, fp
 800a9e6:	f000 fc25 	bl	800b234 <__lshift>
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d05a      	beq.n	800aaa8 <_dtoa_r+0xa18>
 800a9f2:	6869      	ldr	r1, [r5, #4]
 800a9f4:	4658      	mov	r0, fp
 800a9f6:	f000 fa0f 	bl	800ae18 <_Balloc>
 800a9fa:	4606      	mov	r6, r0
 800a9fc:	b928      	cbnz	r0, 800aa0a <_dtoa_r+0x97a>
 800a9fe:	4b84      	ldr	r3, [pc, #528]	@ (800ac10 <_dtoa_r+0xb80>)
 800aa00:	4602      	mov	r2, r0
 800aa02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aa06:	f7ff bb5a 	b.w	800a0be <_dtoa_r+0x2e>
 800aa0a:	692a      	ldr	r2, [r5, #16]
 800aa0c:	3202      	adds	r2, #2
 800aa0e:	0092      	lsls	r2, r2, #2
 800aa10:	f105 010c 	add.w	r1, r5, #12
 800aa14:	300c      	adds	r0, #12
 800aa16:	f000 ffaf 	bl	800b978 <memcpy>
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	4631      	mov	r1, r6
 800aa1e:	4658      	mov	r0, fp
 800aa20:	f000 fc08 	bl	800b234 <__lshift>
 800aa24:	f10a 0301 	add.w	r3, sl, #1
 800aa28:	9307      	str	r3, [sp, #28]
 800aa2a:	9b00      	ldr	r3, [sp, #0]
 800aa2c:	4453      	add	r3, sl
 800aa2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa30:	9b02      	ldr	r3, [sp, #8]
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	462f      	mov	r7, r5
 800aa38:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	9b07      	ldr	r3, [sp, #28]
 800aa3e:	4621      	mov	r1, r4
 800aa40:	3b01      	subs	r3, #1
 800aa42:	4648      	mov	r0, r9
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	f7ff fa9a 	bl	8009f7e <quorem>
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	9002      	str	r0, [sp, #8]
 800aa4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aa52:	4648      	mov	r0, r9
 800aa54:	f000 fc5a 	bl	800b30c <__mcmp>
 800aa58:	462a      	mov	r2, r5
 800aa5a:	9008      	str	r0, [sp, #32]
 800aa5c:	4621      	mov	r1, r4
 800aa5e:	4658      	mov	r0, fp
 800aa60:	f000 fc70 	bl	800b344 <__mdiff>
 800aa64:	68c2      	ldr	r2, [r0, #12]
 800aa66:	4606      	mov	r6, r0
 800aa68:	bb02      	cbnz	r2, 800aaac <_dtoa_r+0xa1c>
 800aa6a:	4601      	mov	r1, r0
 800aa6c:	4648      	mov	r0, r9
 800aa6e:	f000 fc4d 	bl	800b30c <__mcmp>
 800aa72:	4602      	mov	r2, r0
 800aa74:	4631      	mov	r1, r6
 800aa76:	4658      	mov	r0, fp
 800aa78:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa7a:	f000 fa0d 	bl	800ae98 <_Bfree>
 800aa7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa82:	9e07      	ldr	r6, [sp, #28]
 800aa84:	ea43 0102 	orr.w	r1, r3, r2
 800aa88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa8a:	4319      	orrs	r1, r3
 800aa8c:	d110      	bne.n	800aab0 <_dtoa_r+0xa20>
 800aa8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa92:	d029      	beq.n	800aae8 <_dtoa_r+0xa58>
 800aa94:	9b08      	ldr	r3, [sp, #32]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	dd02      	ble.n	800aaa0 <_dtoa_r+0xa10>
 800aa9a:	9b02      	ldr	r3, [sp, #8]
 800aa9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aaa0:	9b00      	ldr	r3, [sp, #0]
 800aaa2:	f883 8000 	strb.w	r8, [r3]
 800aaa6:	e63f      	b.n	800a728 <_dtoa_r+0x698>
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	e7bb      	b.n	800aa24 <_dtoa_r+0x994>
 800aaac:	2201      	movs	r2, #1
 800aaae:	e7e1      	b.n	800aa74 <_dtoa_r+0x9e4>
 800aab0:	9b08      	ldr	r3, [sp, #32]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	db04      	blt.n	800aac0 <_dtoa_r+0xa30>
 800aab6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aab8:	430b      	orrs	r3, r1
 800aaba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aabc:	430b      	orrs	r3, r1
 800aabe:	d120      	bne.n	800ab02 <_dtoa_r+0xa72>
 800aac0:	2a00      	cmp	r2, #0
 800aac2:	dded      	ble.n	800aaa0 <_dtoa_r+0xa10>
 800aac4:	4649      	mov	r1, r9
 800aac6:	2201      	movs	r2, #1
 800aac8:	4658      	mov	r0, fp
 800aaca:	f000 fbb3 	bl	800b234 <__lshift>
 800aace:	4621      	mov	r1, r4
 800aad0:	4681      	mov	r9, r0
 800aad2:	f000 fc1b 	bl	800b30c <__mcmp>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	dc03      	bgt.n	800aae2 <_dtoa_r+0xa52>
 800aada:	d1e1      	bne.n	800aaa0 <_dtoa_r+0xa10>
 800aadc:	f018 0f01 	tst.w	r8, #1
 800aae0:	d0de      	beq.n	800aaa0 <_dtoa_r+0xa10>
 800aae2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aae6:	d1d8      	bne.n	800aa9a <_dtoa_r+0xa0a>
 800aae8:	9a00      	ldr	r2, [sp, #0]
 800aaea:	2339      	movs	r3, #57	@ 0x39
 800aaec:	7013      	strb	r3, [r2, #0]
 800aaee:	4633      	mov	r3, r6
 800aaf0:	461e      	mov	r6, r3
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aaf8:	2a39      	cmp	r2, #57	@ 0x39
 800aafa:	d052      	beq.n	800aba2 <_dtoa_r+0xb12>
 800aafc:	3201      	adds	r2, #1
 800aafe:	701a      	strb	r2, [r3, #0]
 800ab00:	e612      	b.n	800a728 <_dtoa_r+0x698>
 800ab02:	2a00      	cmp	r2, #0
 800ab04:	dd07      	ble.n	800ab16 <_dtoa_r+0xa86>
 800ab06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab0a:	d0ed      	beq.n	800aae8 <_dtoa_r+0xa58>
 800ab0c:	9a00      	ldr	r2, [sp, #0]
 800ab0e:	f108 0301 	add.w	r3, r8, #1
 800ab12:	7013      	strb	r3, [r2, #0]
 800ab14:	e608      	b.n	800a728 <_dtoa_r+0x698>
 800ab16:	9b07      	ldr	r3, [sp, #28]
 800ab18:	9a07      	ldr	r2, [sp, #28]
 800ab1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ab1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d028      	beq.n	800ab76 <_dtoa_r+0xae6>
 800ab24:	4649      	mov	r1, r9
 800ab26:	2300      	movs	r3, #0
 800ab28:	220a      	movs	r2, #10
 800ab2a:	4658      	mov	r0, fp
 800ab2c:	f000 f9d6 	bl	800aedc <__multadd>
 800ab30:	42af      	cmp	r7, r5
 800ab32:	4681      	mov	r9, r0
 800ab34:	f04f 0300 	mov.w	r3, #0
 800ab38:	f04f 020a 	mov.w	r2, #10
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	4658      	mov	r0, fp
 800ab40:	d107      	bne.n	800ab52 <_dtoa_r+0xac2>
 800ab42:	f000 f9cb 	bl	800aedc <__multadd>
 800ab46:	4607      	mov	r7, r0
 800ab48:	4605      	mov	r5, r0
 800ab4a:	9b07      	ldr	r3, [sp, #28]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	9307      	str	r3, [sp, #28]
 800ab50:	e774      	b.n	800aa3c <_dtoa_r+0x9ac>
 800ab52:	f000 f9c3 	bl	800aedc <__multadd>
 800ab56:	4629      	mov	r1, r5
 800ab58:	4607      	mov	r7, r0
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	220a      	movs	r2, #10
 800ab5e:	4658      	mov	r0, fp
 800ab60:	f000 f9bc 	bl	800aedc <__multadd>
 800ab64:	4605      	mov	r5, r0
 800ab66:	e7f0      	b.n	800ab4a <_dtoa_r+0xaba>
 800ab68:	9b00      	ldr	r3, [sp, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	bfcc      	ite	gt
 800ab6e:	461e      	movgt	r6, r3
 800ab70:	2601      	movle	r6, #1
 800ab72:	4456      	add	r6, sl
 800ab74:	2700      	movs	r7, #0
 800ab76:	4649      	mov	r1, r9
 800ab78:	2201      	movs	r2, #1
 800ab7a:	4658      	mov	r0, fp
 800ab7c:	f000 fb5a 	bl	800b234 <__lshift>
 800ab80:	4621      	mov	r1, r4
 800ab82:	4681      	mov	r9, r0
 800ab84:	f000 fbc2 	bl	800b30c <__mcmp>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	dcb0      	bgt.n	800aaee <_dtoa_r+0xa5e>
 800ab8c:	d102      	bne.n	800ab94 <_dtoa_r+0xb04>
 800ab8e:	f018 0f01 	tst.w	r8, #1
 800ab92:	d1ac      	bne.n	800aaee <_dtoa_r+0xa5e>
 800ab94:	4633      	mov	r3, r6
 800ab96:	461e      	mov	r6, r3
 800ab98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab9c:	2a30      	cmp	r2, #48	@ 0x30
 800ab9e:	d0fa      	beq.n	800ab96 <_dtoa_r+0xb06>
 800aba0:	e5c2      	b.n	800a728 <_dtoa_r+0x698>
 800aba2:	459a      	cmp	sl, r3
 800aba4:	d1a4      	bne.n	800aaf0 <_dtoa_r+0xa60>
 800aba6:	9b04      	ldr	r3, [sp, #16]
 800aba8:	3301      	adds	r3, #1
 800abaa:	9304      	str	r3, [sp, #16]
 800abac:	2331      	movs	r3, #49	@ 0x31
 800abae:	f88a 3000 	strb.w	r3, [sl]
 800abb2:	e5b9      	b.n	800a728 <_dtoa_r+0x698>
 800abb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800abb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ac14 <_dtoa_r+0xb84>
 800abba:	b11b      	cbz	r3, 800abc4 <_dtoa_r+0xb34>
 800abbc:	f10a 0308 	add.w	r3, sl, #8
 800abc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800abc2:	6013      	str	r3, [r2, #0]
 800abc4:	4650      	mov	r0, sl
 800abc6:	b019      	add	sp, #100	@ 0x64
 800abc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abce:	2b01      	cmp	r3, #1
 800abd0:	f77f ae37 	ble.w	800a842 <_dtoa_r+0x7b2>
 800abd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800abd8:	2001      	movs	r0, #1
 800abda:	e655      	b.n	800a888 <_dtoa_r+0x7f8>
 800abdc:	9b00      	ldr	r3, [sp, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f77f aed6 	ble.w	800a990 <_dtoa_r+0x900>
 800abe4:	4656      	mov	r6, sl
 800abe6:	4621      	mov	r1, r4
 800abe8:	4648      	mov	r0, r9
 800abea:	f7ff f9c8 	bl	8009f7e <quorem>
 800abee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800abf2:	f806 8b01 	strb.w	r8, [r6], #1
 800abf6:	9b00      	ldr	r3, [sp, #0]
 800abf8:	eba6 020a 	sub.w	r2, r6, sl
 800abfc:	4293      	cmp	r3, r2
 800abfe:	ddb3      	ble.n	800ab68 <_dtoa_r+0xad8>
 800ac00:	4649      	mov	r1, r9
 800ac02:	2300      	movs	r3, #0
 800ac04:	220a      	movs	r2, #10
 800ac06:	4658      	mov	r0, fp
 800ac08:	f000 f968 	bl	800aedc <__multadd>
 800ac0c:	4681      	mov	r9, r0
 800ac0e:	e7ea      	b.n	800abe6 <_dtoa_r+0xb56>
 800ac10:	0800c1b8 	.word	0x0800c1b8
 800ac14:	0800c13c 	.word	0x0800c13c

0800ac18 <_free_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	2900      	cmp	r1, #0
 800ac1e:	d041      	beq.n	800aca4 <_free_r+0x8c>
 800ac20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac24:	1f0c      	subs	r4, r1, #4
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	bfb8      	it	lt
 800ac2a:	18e4      	addlt	r4, r4, r3
 800ac2c:	f000 f8e8 	bl	800ae00 <__malloc_lock>
 800ac30:	4a1d      	ldr	r2, [pc, #116]	@ (800aca8 <_free_r+0x90>)
 800ac32:	6813      	ldr	r3, [r2, #0]
 800ac34:	b933      	cbnz	r3, 800ac44 <_free_r+0x2c>
 800ac36:	6063      	str	r3, [r4, #4]
 800ac38:	6014      	str	r4, [r2, #0]
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac40:	f000 b8e4 	b.w	800ae0c <__malloc_unlock>
 800ac44:	42a3      	cmp	r3, r4
 800ac46:	d908      	bls.n	800ac5a <_free_r+0x42>
 800ac48:	6820      	ldr	r0, [r4, #0]
 800ac4a:	1821      	adds	r1, r4, r0
 800ac4c:	428b      	cmp	r3, r1
 800ac4e:	bf01      	itttt	eq
 800ac50:	6819      	ldreq	r1, [r3, #0]
 800ac52:	685b      	ldreq	r3, [r3, #4]
 800ac54:	1809      	addeq	r1, r1, r0
 800ac56:	6021      	streq	r1, [r4, #0]
 800ac58:	e7ed      	b.n	800ac36 <_free_r+0x1e>
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	b10b      	cbz	r3, 800ac64 <_free_r+0x4c>
 800ac60:	42a3      	cmp	r3, r4
 800ac62:	d9fa      	bls.n	800ac5a <_free_r+0x42>
 800ac64:	6811      	ldr	r1, [r2, #0]
 800ac66:	1850      	adds	r0, r2, r1
 800ac68:	42a0      	cmp	r0, r4
 800ac6a:	d10b      	bne.n	800ac84 <_free_r+0x6c>
 800ac6c:	6820      	ldr	r0, [r4, #0]
 800ac6e:	4401      	add	r1, r0
 800ac70:	1850      	adds	r0, r2, r1
 800ac72:	4283      	cmp	r3, r0
 800ac74:	6011      	str	r1, [r2, #0]
 800ac76:	d1e0      	bne.n	800ac3a <_free_r+0x22>
 800ac78:	6818      	ldr	r0, [r3, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	6053      	str	r3, [r2, #4]
 800ac7e:	4408      	add	r0, r1
 800ac80:	6010      	str	r0, [r2, #0]
 800ac82:	e7da      	b.n	800ac3a <_free_r+0x22>
 800ac84:	d902      	bls.n	800ac8c <_free_r+0x74>
 800ac86:	230c      	movs	r3, #12
 800ac88:	602b      	str	r3, [r5, #0]
 800ac8a:	e7d6      	b.n	800ac3a <_free_r+0x22>
 800ac8c:	6820      	ldr	r0, [r4, #0]
 800ac8e:	1821      	adds	r1, r4, r0
 800ac90:	428b      	cmp	r3, r1
 800ac92:	bf04      	itt	eq
 800ac94:	6819      	ldreq	r1, [r3, #0]
 800ac96:	685b      	ldreq	r3, [r3, #4]
 800ac98:	6063      	str	r3, [r4, #4]
 800ac9a:	bf04      	itt	eq
 800ac9c:	1809      	addeq	r1, r1, r0
 800ac9e:	6021      	streq	r1, [r4, #0]
 800aca0:	6054      	str	r4, [r2, #4]
 800aca2:	e7ca      	b.n	800ac3a <_free_r+0x22>
 800aca4:	bd38      	pop	{r3, r4, r5, pc}
 800aca6:	bf00      	nop
 800aca8:	200008c0 	.word	0x200008c0

0800acac <malloc>:
 800acac:	4b02      	ldr	r3, [pc, #8]	@ (800acb8 <malloc+0xc>)
 800acae:	4601      	mov	r1, r0
 800acb0:	6818      	ldr	r0, [r3, #0]
 800acb2:	f000 b825 	b.w	800ad00 <_malloc_r>
 800acb6:	bf00      	nop
 800acb8:	20000018 	.word	0x20000018

0800acbc <sbrk_aligned>:
 800acbc:	b570      	push	{r4, r5, r6, lr}
 800acbe:	4e0f      	ldr	r6, [pc, #60]	@ (800acfc <sbrk_aligned+0x40>)
 800acc0:	460c      	mov	r4, r1
 800acc2:	6831      	ldr	r1, [r6, #0]
 800acc4:	4605      	mov	r5, r0
 800acc6:	b911      	cbnz	r1, 800acce <sbrk_aligned+0x12>
 800acc8:	f000 fe46 	bl	800b958 <_sbrk_r>
 800accc:	6030      	str	r0, [r6, #0]
 800acce:	4621      	mov	r1, r4
 800acd0:	4628      	mov	r0, r5
 800acd2:	f000 fe41 	bl	800b958 <_sbrk_r>
 800acd6:	1c43      	adds	r3, r0, #1
 800acd8:	d103      	bne.n	800ace2 <sbrk_aligned+0x26>
 800acda:	f04f 34ff 	mov.w	r4, #4294967295
 800acde:	4620      	mov	r0, r4
 800ace0:	bd70      	pop	{r4, r5, r6, pc}
 800ace2:	1cc4      	adds	r4, r0, #3
 800ace4:	f024 0403 	bic.w	r4, r4, #3
 800ace8:	42a0      	cmp	r0, r4
 800acea:	d0f8      	beq.n	800acde <sbrk_aligned+0x22>
 800acec:	1a21      	subs	r1, r4, r0
 800acee:	4628      	mov	r0, r5
 800acf0:	f000 fe32 	bl	800b958 <_sbrk_r>
 800acf4:	3001      	adds	r0, #1
 800acf6:	d1f2      	bne.n	800acde <sbrk_aligned+0x22>
 800acf8:	e7ef      	b.n	800acda <sbrk_aligned+0x1e>
 800acfa:	bf00      	nop
 800acfc:	200008bc 	.word	0x200008bc

0800ad00 <_malloc_r>:
 800ad00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad04:	1ccd      	adds	r5, r1, #3
 800ad06:	f025 0503 	bic.w	r5, r5, #3
 800ad0a:	3508      	adds	r5, #8
 800ad0c:	2d0c      	cmp	r5, #12
 800ad0e:	bf38      	it	cc
 800ad10:	250c      	movcc	r5, #12
 800ad12:	2d00      	cmp	r5, #0
 800ad14:	4606      	mov	r6, r0
 800ad16:	db01      	blt.n	800ad1c <_malloc_r+0x1c>
 800ad18:	42a9      	cmp	r1, r5
 800ad1a:	d904      	bls.n	800ad26 <_malloc_r+0x26>
 800ad1c:	230c      	movs	r3, #12
 800ad1e:	6033      	str	r3, [r6, #0]
 800ad20:	2000      	movs	r0, #0
 800ad22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800adfc <_malloc_r+0xfc>
 800ad2a:	f000 f869 	bl	800ae00 <__malloc_lock>
 800ad2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ad32:	461c      	mov	r4, r3
 800ad34:	bb44      	cbnz	r4, 800ad88 <_malloc_r+0x88>
 800ad36:	4629      	mov	r1, r5
 800ad38:	4630      	mov	r0, r6
 800ad3a:	f7ff ffbf 	bl	800acbc <sbrk_aligned>
 800ad3e:	1c43      	adds	r3, r0, #1
 800ad40:	4604      	mov	r4, r0
 800ad42:	d158      	bne.n	800adf6 <_malloc_r+0xf6>
 800ad44:	f8d8 4000 	ldr.w	r4, [r8]
 800ad48:	4627      	mov	r7, r4
 800ad4a:	2f00      	cmp	r7, #0
 800ad4c:	d143      	bne.n	800add6 <_malloc_r+0xd6>
 800ad4e:	2c00      	cmp	r4, #0
 800ad50:	d04b      	beq.n	800adea <_malloc_r+0xea>
 800ad52:	6823      	ldr	r3, [r4, #0]
 800ad54:	4639      	mov	r1, r7
 800ad56:	4630      	mov	r0, r6
 800ad58:	eb04 0903 	add.w	r9, r4, r3
 800ad5c:	f000 fdfc 	bl	800b958 <_sbrk_r>
 800ad60:	4581      	cmp	r9, r0
 800ad62:	d142      	bne.n	800adea <_malloc_r+0xea>
 800ad64:	6821      	ldr	r1, [r4, #0]
 800ad66:	1a6d      	subs	r5, r5, r1
 800ad68:	4629      	mov	r1, r5
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f7ff ffa6 	bl	800acbc <sbrk_aligned>
 800ad70:	3001      	adds	r0, #1
 800ad72:	d03a      	beq.n	800adea <_malloc_r+0xea>
 800ad74:	6823      	ldr	r3, [r4, #0]
 800ad76:	442b      	add	r3, r5
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad7e:	685a      	ldr	r2, [r3, #4]
 800ad80:	bb62      	cbnz	r2, 800addc <_malloc_r+0xdc>
 800ad82:	f8c8 7000 	str.w	r7, [r8]
 800ad86:	e00f      	b.n	800ada8 <_malloc_r+0xa8>
 800ad88:	6822      	ldr	r2, [r4, #0]
 800ad8a:	1b52      	subs	r2, r2, r5
 800ad8c:	d420      	bmi.n	800add0 <_malloc_r+0xd0>
 800ad8e:	2a0b      	cmp	r2, #11
 800ad90:	d917      	bls.n	800adc2 <_malloc_r+0xc2>
 800ad92:	1961      	adds	r1, r4, r5
 800ad94:	42a3      	cmp	r3, r4
 800ad96:	6025      	str	r5, [r4, #0]
 800ad98:	bf18      	it	ne
 800ad9a:	6059      	strne	r1, [r3, #4]
 800ad9c:	6863      	ldr	r3, [r4, #4]
 800ad9e:	bf08      	it	eq
 800ada0:	f8c8 1000 	streq.w	r1, [r8]
 800ada4:	5162      	str	r2, [r4, r5]
 800ada6:	604b      	str	r3, [r1, #4]
 800ada8:	4630      	mov	r0, r6
 800adaa:	f000 f82f 	bl	800ae0c <__malloc_unlock>
 800adae:	f104 000b 	add.w	r0, r4, #11
 800adb2:	1d23      	adds	r3, r4, #4
 800adb4:	f020 0007 	bic.w	r0, r0, #7
 800adb8:	1ac2      	subs	r2, r0, r3
 800adba:	bf1c      	itt	ne
 800adbc:	1a1b      	subne	r3, r3, r0
 800adbe:	50a3      	strne	r3, [r4, r2]
 800adc0:	e7af      	b.n	800ad22 <_malloc_r+0x22>
 800adc2:	6862      	ldr	r2, [r4, #4]
 800adc4:	42a3      	cmp	r3, r4
 800adc6:	bf0c      	ite	eq
 800adc8:	f8c8 2000 	streq.w	r2, [r8]
 800adcc:	605a      	strne	r2, [r3, #4]
 800adce:	e7eb      	b.n	800ada8 <_malloc_r+0xa8>
 800add0:	4623      	mov	r3, r4
 800add2:	6864      	ldr	r4, [r4, #4]
 800add4:	e7ae      	b.n	800ad34 <_malloc_r+0x34>
 800add6:	463c      	mov	r4, r7
 800add8:	687f      	ldr	r7, [r7, #4]
 800adda:	e7b6      	b.n	800ad4a <_malloc_r+0x4a>
 800addc:	461a      	mov	r2, r3
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	42a3      	cmp	r3, r4
 800ade2:	d1fb      	bne.n	800addc <_malloc_r+0xdc>
 800ade4:	2300      	movs	r3, #0
 800ade6:	6053      	str	r3, [r2, #4]
 800ade8:	e7de      	b.n	800ada8 <_malloc_r+0xa8>
 800adea:	230c      	movs	r3, #12
 800adec:	6033      	str	r3, [r6, #0]
 800adee:	4630      	mov	r0, r6
 800adf0:	f000 f80c 	bl	800ae0c <__malloc_unlock>
 800adf4:	e794      	b.n	800ad20 <_malloc_r+0x20>
 800adf6:	6005      	str	r5, [r0, #0]
 800adf8:	e7d6      	b.n	800ada8 <_malloc_r+0xa8>
 800adfa:	bf00      	nop
 800adfc:	200008c0 	.word	0x200008c0

0800ae00 <__malloc_lock>:
 800ae00:	4801      	ldr	r0, [pc, #4]	@ (800ae08 <__malloc_lock+0x8>)
 800ae02:	f7ff b8ba 	b.w	8009f7a <__retarget_lock_acquire_recursive>
 800ae06:	bf00      	nop
 800ae08:	200008b8 	.word	0x200008b8

0800ae0c <__malloc_unlock>:
 800ae0c:	4801      	ldr	r0, [pc, #4]	@ (800ae14 <__malloc_unlock+0x8>)
 800ae0e:	f7ff b8b5 	b.w	8009f7c <__retarget_lock_release_recursive>
 800ae12:	bf00      	nop
 800ae14:	200008b8 	.word	0x200008b8

0800ae18 <_Balloc>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	69c6      	ldr	r6, [r0, #28]
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	460d      	mov	r5, r1
 800ae20:	b976      	cbnz	r6, 800ae40 <_Balloc+0x28>
 800ae22:	2010      	movs	r0, #16
 800ae24:	f7ff ff42 	bl	800acac <malloc>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	61e0      	str	r0, [r4, #28]
 800ae2c:	b920      	cbnz	r0, 800ae38 <_Balloc+0x20>
 800ae2e:	4b18      	ldr	r3, [pc, #96]	@ (800ae90 <_Balloc+0x78>)
 800ae30:	4818      	ldr	r0, [pc, #96]	@ (800ae94 <_Balloc+0x7c>)
 800ae32:	216b      	movs	r1, #107	@ 0x6b
 800ae34:	f000 fdae 	bl	800b994 <__assert_func>
 800ae38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae3c:	6006      	str	r6, [r0, #0]
 800ae3e:	60c6      	str	r6, [r0, #12]
 800ae40:	69e6      	ldr	r6, [r4, #28]
 800ae42:	68f3      	ldr	r3, [r6, #12]
 800ae44:	b183      	cbz	r3, 800ae68 <_Balloc+0x50>
 800ae46:	69e3      	ldr	r3, [r4, #28]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae4e:	b9b8      	cbnz	r0, 800ae80 <_Balloc+0x68>
 800ae50:	2101      	movs	r1, #1
 800ae52:	fa01 f605 	lsl.w	r6, r1, r5
 800ae56:	1d72      	adds	r2, r6, #5
 800ae58:	0092      	lsls	r2, r2, #2
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f000 fdb8 	bl	800b9d0 <_calloc_r>
 800ae60:	b160      	cbz	r0, 800ae7c <_Balloc+0x64>
 800ae62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae66:	e00e      	b.n	800ae86 <_Balloc+0x6e>
 800ae68:	2221      	movs	r2, #33	@ 0x21
 800ae6a:	2104      	movs	r1, #4
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f000 fdaf 	bl	800b9d0 <_calloc_r>
 800ae72:	69e3      	ldr	r3, [r4, #28]
 800ae74:	60f0      	str	r0, [r6, #12]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1e4      	bne.n	800ae46 <_Balloc+0x2e>
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}
 800ae80:	6802      	ldr	r2, [r0, #0]
 800ae82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae86:	2300      	movs	r3, #0
 800ae88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae8c:	e7f7      	b.n	800ae7e <_Balloc+0x66>
 800ae8e:	bf00      	nop
 800ae90:	0800c149 	.word	0x0800c149
 800ae94:	0800c1c9 	.word	0x0800c1c9

0800ae98 <_Bfree>:
 800ae98:	b570      	push	{r4, r5, r6, lr}
 800ae9a:	69c6      	ldr	r6, [r0, #28]
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	460c      	mov	r4, r1
 800aea0:	b976      	cbnz	r6, 800aec0 <_Bfree+0x28>
 800aea2:	2010      	movs	r0, #16
 800aea4:	f7ff ff02 	bl	800acac <malloc>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	61e8      	str	r0, [r5, #28]
 800aeac:	b920      	cbnz	r0, 800aeb8 <_Bfree+0x20>
 800aeae:	4b09      	ldr	r3, [pc, #36]	@ (800aed4 <_Bfree+0x3c>)
 800aeb0:	4809      	ldr	r0, [pc, #36]	@ (800aed8 <_Bfree+0x40>)
 800aeb2:	218f      	movs	r1, #143	@ 0x8f
 800aeb4:	f000 fd6e 	bl	800b994 <__assert_func>
 800aeb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aebc:	6006      	str	r6, [r0, #0]
 800aebe:	60c6      	str	r6, [r0, #12]
 800aec0:	b13c      	cbz	r4, 800aed2 <_Bfree+0x3a>
 800aec2:	69eb      	ldr	r3, [r5, #28]
 800aec4:	6862      	ldr	r2, [r4, #4]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aecc:	6021      	str	r1, [r4, #0]
 800aece:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aed2:	bd70      	pop	{r4, r5, r6, pc}
 800aed4:	0800c149 	.word	0x0800c149
 800aed8:	0800c1c9 	.word	0x0800c1c9

0800aedc <__multadd>:
 800aedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee0:	690d      	ldr	r5, [r1, #16]
 800aee2:	4607      	mov	r7, r0
 800aee4:	460c      	mov	r4, r1
 800aee6:	461e      	mov	r6, r3
 800aee8:	f101 0c14 	add.w	ip, r1, #20
 800aeec:	2000      	movs	r0, #0
 800aeee:	f8dc 3000 	ldr.w	r3, [ip]
 800aef2:	b299      	uxth	r1, r3
 800aef4:	fb02 6101 	mla	r1, r2, r1, r6
 800aef8:	0c1e      	lsrs	r6, r3, #16
 800aefa:	0c0b      	lsrs	r3, r1, #16
 800aefc:	fb02 3306 	mla	r3, r2, r6, r3
 800af00:	b289      	uxth	r1, r1
 800af02:	3001      	adds	r0, #1
 800af04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af08:	4285      	cmp	r5, r0
 800af0a:	f84c 1b04 	str.w	r1, [ip], #4
 800af0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af12:	dcec      	bgt.n	800aeee <__multadd+0x12>
 800af14:	b30e      	cbz	r6, 800af5a <__multadd+0x7e>
 800af16:	68a3      	ldr	r3, [r4, #8]
 800af18:	42ab      	cmp	r3, r5
 800af1a:	dc19      	bgt.n	800af50 <__multadd+0x74>
 800af1c:	6861      	ldr	r1, [r4, #4]
 800af1e:	4638      	mov	r0, r7
 800af20:	3101      	adds	r1, #1
 800af22:	f7ff ff79 	bl	800ae18 <_Balloc>
 800af26:	4680      	mov	r8, r0
 800af28:	b928      	cbnz	r0, 800af36 <__multadd+0x5a>
 800af2a:	4602      	mov	r2, r0
 800af2c:	4b0c      	ldr	r3, [pc, #48]	@ (800af60 <__multadd+0x84>)
 800af2e:	480d      	ldr	r0, [pc, #52]	@ (800af64 <__multadd+0x88>)
 800af30:	21ba      	movs	r1, #186	@ 0xba
 800af32:	f000 fd2f 	bl	800b994 <__assert_func>
 800af36:	6922      	ldr	r2, [r4, #16]
 800af38:	3202      	adds	r2, #2
 800af3a:	f104 010c 	add.w	r1, r4, #12
 800af3e:	0092      	lsls	r2, r2, #2
 800af40:	300c      	adds	r0, #12
 800af42:	f000 fd19 	bl	800b978 <memcpy>
 800af46:	4621      	mov	r1, r4
 800af48:	4638      	mov	r0, r7
 800af4a:	f7ff ffa5 	bl	800ae98 <_Bfree>
 800af4e:	4644      	mov	r4, r8
 800af50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af54:	3501      	adds	r5, #1
 800af56:	615e      	str	r6, [r3, #20]
 800af58:	6125      	str	r5, [r4, #16]
 800af5a:	4620      	mov	r0, r4
 800af5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af60:	0800c1b8 	.word	0x0800c1b8
 800af64:	0800c1c9 	.word	0x0800c1c9

0800af68 <__hi0bits>:
 800af68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800af6c:	4603      	mov	r3, r0
 800af6e:	bf36      	itet	cc
 800af70:	0403      	lslcc	r3, r0, #16
 800af72:	2000      	movcs	r0, #0
 800af74:	2010      	movcc	r0, #16
 800af76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af7a:	bf3c      	itt	cc
 800af7c:	021b      	lslcc	r3, r3, #8
 800af7e:	3008      	addcc	r0, #8
 800af80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af84:	bf3c      	itt	cc
 800af86:	011b      	lslcc	r3, r3, #4
 800af88:	3004      	addcc	r0, #4
 800af8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af8e:	bf3c      	itt	cc
 800af90:	009b      	lslcc	r3, r3, #2
 800af92:	3002      	addcc	r0, #2
 800af94:	2b00      	cmp	r3, #0
 800af96:	db05      	blt.n	800afa4 <__hi0bits+0x3c>
 800af98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800af9c:	f100 0001 	add.w	r0, r0, #1
 800afa0:	bf08      	it	eq
 800afa2:	2020      	moveq	r0, #32
 800afa4:	4770      	bx	lr

0800afa6 <__lo0bits>:
 800afa6:	6803      	ldr	r3, [r0, #0]
 800afa8:	4602      	mov	r2, r0
 800afaa:	f013 0007 	ands.w	r0, r3, #7
 800afae:	d00b      	beq.n	800afc8 <__lo0bits+0x22>
 800afb0:	07d9      	lsls	r1, r3, #31
 800afb2:	d421      	bmi.n	800aff8 <__lo0bits+0x52>
 800afb4:	0798      	lsls	r0, r3, #30
 800afb6:	bf49      	itett	mi
 800afb8:	085b      	lsrmi	r3, r3, #1
 800afba:	089b      	lsrpl	r3, r3, #2
 800afbc:	2001      	movmi	r0, #1
 800afbe:	6013      	strmi	r3, [r2, #0]
 800afc0:	bf5c      	itt	pl
 800afc2:	6013      	strpl	r3, [r2, #0]
 800afc4:	2002      	movpl	r0, #2
 800afc6:	4770      	bx	lr
 800afc8:	b299      	uxth	r1, r3
 800afca:	b909      	cbnz	r1, 800afd0 <__lo0bits+0x2a>
 800afcc:	0c1b      	lsrs	r3, r3, #16
 800afce:	2010      	movs	r0, #16
 800afd0:	b2d9      	uxtb	r1, r3
 800afd2:	b909      	cbnz	r1, 800afd8 <__lo0bits+0x32>
 800afd4:	3008      	adds	r0, #8
 800afd6:	0a1b      	lsrs	r3, r3, #8
 800afd8:	0719      	lsls	r1, r3, #28
 800afda:	bf04      	itt	eq
 800afdc:	091b      	lsreq	r3, r3, #4
 800afde:	3004      	addeq	r0, #4
 800afe0:	0799      	lsls	r1, r3, #30
 800afe2:	bf04      	itt	eq
 800afe4:	089b      	lsreq	r3, r3, #2
 800afe6:	3002      	addeq	r0, #2
 800afe8:	07d9      	lsls	r1, r3, #31
 800afea:	d403      	bmi.n	800aff4 <__lo0bits+0x4e>
 800afec:	085b      	lsrs	r3, r3, #1
 800afee:	f100 0001 	add.w	r0, r0, #1
 800aff2:	d003      	beq.n	800affc <__lo0bits+0x56>
 800aff4:	6013      	str	r3, [r2, #0]
 800aff6:	4770      	bx	lr
 800aff8:	2000      	movs	r0, #0
 800affa:	4770      	bx	lr
 800affc:	2020      	movs	r0, #32
 800affe:	4770      	bx	lr

0800b000 <__i2b>:
 800b000:	b510      	push	{r4, lr}
 800b002:	460c      	mov	r4, r1
 800b004:	2101      	movs	r1, #1
 800b006:	f7ff ff07 	bl	800ae18 <_Balloc>
 800b00a:	4602      	mov	r2, r0
 800b00c:	b928      	cbnz	r0, 800b01a <__i2b+0x1a>
 800b00e:	4b05      	ldr	r3, [pc, #20]	@ (800b024 <__i2b+0x24>)
 800b010:	4805      	ldr	r0, [pc, #20]	@ (800b028 <__i2b+0x28>)
 800b012:	f240 1145 	movw	r1, #325	@ 0x145
 800b016:	f000 fcbd 	bl	800b994 <__assert_func>
 800b01a:	2301      	movs	r3, #1
 800b01c:	6144      	str	r4, [r0, #20]
 800b01e:	6103      	str	r3, [r0, #16]
 800b020:	bd10      	pop	{r4, pc}
 800b022:	bf00      	nop
 800b024:	0800c1b8 	.word	0x0800c1b8
 800b028:	0800c1c9 	.word	0x0800c1c9

0800b02c <__multiply>:
 800b02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b030:	4614      	mov	r4, r2
 800b032:	690a      	ldr	r2, [r1, #16]
 800b034:	6923      	ldr	r3, [r4, #16]
 800b036:	429a      	cmp	r2, r3
 800b038:	bfa8      	it	ge
 800b03a:	4623      	movge	r3, r4
 800b03c:	460f      	mov	r7, r1
 800b03e:	bfa4      	itt	ge
 800b040:	460c      	movge	r4, r1
 800b042:	461f      	movge	r7, r3
 800b044:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b048:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b04c:	68a3      	ldr	r3, [r4, #8]
 800b04e:	6861      	ldr	r1, [r4, #4]
 800b050:	eb0a 0609 	add.w	r6, sl, r9
 800b054:	42b3      	cmp	r3, r6
 800b056:	b085      	sub	sp, #20
 800b058:	bfb8      	it	lt
 800b05a:	3101      	addlt	r1, #1
 800b05c:	f7ff fedc 	bl	800ae18 <_Balloc>
 800b060:	b930      	cbnz	r0, 800b070 <__multiply+0x44>
 800b062:	4602      	mov	r2, r0
 800b064:	4b44      	ldr	r3, [pc, #272]	@ (800b178 <__multiply+0x14c>)
 800b066:	4845      	ldr	r0, [pc, #276]	@ (800b17c <__multiply+0x150>)
 800b068:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b06c:	f000 fc92 	bl	800b994 <__assert_func>
 800b070:	f100 0514 	add.w	r5, r0, #20
 800b074:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b078:	462b      	mov	r3, r5
 800b07a:	2200      	movs	r2, #0
 800b07c:	4543      	cmp	r3, r8
 800b07e:	d321      	bcc.n	800b0c4 <__multiply+0x98>
 800b080:	f107 0114 	add.w	r1, r7, #20
 800b084:	f104 0214 	add.w	r2, r4, #20
 800b088:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b08c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b090:	9302      	str	r3, [sp, #8]
 800b092:	1b13      	subs	r3, r2, r4
 800b094:	3b15      	subs	r3, #21
 800b096:	f023 0303 	bic.w	r3, r3, #3
 800b09a:	3304      	adds	r3, #4
 800b09c:	f104 0715 	add.w	r7, r4, #21
 800b0a0:	42ba      	cmp	r2, r7
 800b0a2:	bf38      	it	cc
 800b0a4:	2304      	movcc	r3, #4
 800b0a6:	9301      	str	r3, [sp, #4]
 800b0a8:	9b02      	ldr	r3, [sp, #8]
 800b0aa:	9103      	str	r1, [sp, #12]
 800b0ac:	428b      	cmp	r3, r1
 800b0ae:	d80c      	bhi.n	800b0ca <__multiply+0x9e>
 800b0b0:	2e00      	cmp	r6, #0
 800b0b2:	dd03      	ble.n	800b0bc <__multiply+0x90>
 800b0b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d05b      	beq.n	800b174 <__multiply+0x148>
 800b0bc:	6106      	str	r6, [r0, #16]
 800b0be:	b005      	add	sp, #20
 800b0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c4:	f843 2b04 	str.w	r2, [r3], #4
 800b0c8:	e7d8      	b.n	800b07c <__multiply+0x50>
 800b0ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800b0ce:	f1ba 0f00 	cmp.w	sl, #0
 800b0d2:	d024      	beq.n	800b11e <__multiply+0xf2>
 800b0d4:	f104 0e14 	add.w	lr, r4, #20
 800b0d8:	46a9      	mov	r9, r5
 800b0da:	f04f 0c00 	mov.w	ip, #0
 800b0de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0e2:	f8d9 3000 	ldr.w	r3, [r9]
 800b0e6:	fa1f fb87 	uxth.w	fp, r7
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800b0f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b0f4:	f8d9 7000 	ldr.w	r7, [r9]
 800b0f8:	4463      	add	r3, ip
 800b0fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b0fe:	fb0a c70b 	mla	r7, sl, fp, ip
 800b102:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b106:	b29b      	uxth	r3, r3
 800b108:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b10c:	4572      	cmp	r2, lr
 800b10e:	f849 3b04 	str.w	r3, [r9], #4
 800b112:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b116:	d8e2      	bhi.n	800b0de <__multiply+0xb2>
 800b118:	9b01      	ldr	r3, [sp, #4]
 800b11a:	f845 c003 	str.w	ip, [r5, r3]
 800b11e:	9b03      	ldr	r3, [sp, #12]
 800b120:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b124:	3104      	adds	r1, #4
 800b126:	f1b9 0f00 	cmp.w	r9, #0
 800b12a:	d021      	beq.n	800b170 <__multiply+0x144>
 800b12c:	682b      	ldr	r3, [r5, #0]
 800b12e:	f104 0c14 	add.w	ip, r4, #20
 800b132:	46ae      	mov	lr, r5
 800b134:	f04f 0a00 	mov.w	sl, #0
 800b138:	f8bc b000 	ldrh.w	fp, [ip]
 800b13c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b140:	fb09 770b 	mla	r7, r9, fp, r7
 800b144:	4457      	add	r7, sl
 800b146:	b29b      	uxth	r3, r3
 800b148:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b14c:	f84e 3b04 	str.w	r3, [lr], #4
 800b150:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b154:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b158:	f8be 3000 	ldrh.w	r3, [lr]
 800b15c:	fb09 330a 	mla	r3, r9, sl, r3
 800b160:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b164:	4562      	cmp	r2, ip
 800b166:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b16a:	d8e5      	bhi.n	800b138 <__multiply+0x10c>
 800b16c:	9f01      	ldr	r7, [sp, #4]
 800b16e:	51eb      	str	r3, [r5, r7]
 800b170:	3504      	adds	r5, #4
 800b172:	e799      	b.n	800b0a8 <__multiply+0x7c>
 800b174:	3e01      	subs	r6, #1
 800b176:	e79b      	b.n	800b0b0 <__multiply+0x84>
 800b178:	0800c1b8 	.word	0x0800c1b8
 800b17c:	0800c1c9 	.word	0x0800c1c9

0800b180 <__pow5mult>:
 800b180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b184:	4615      	mov	r5, r2
 800b186:	f012 0203 	ands.w	r2, r2, #3
 800b18a:	4607      	mov	r7, r0
 800b18c:	460e      	mov	r6, r1
 800b18e:	d007      	beq.n	800b1a0 <__pow5mult+0x20>
 800b190:	4c25      	ldr	r4, [pc, #148]	@ (800b228 <__pow5mult+0xa8>)
 800b192:	3a01      	subs	r2, #1
 800b194:	2300      	movs	r3, #0
 800b196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b19a:	f7ff fe9f 	bl	800aedc <__multadd>
 800b19e:	4606      	mov	r6, r0
 800b1a0:	10ad      	asrs	r5, r5, #2
 800b1a2:	d03d      	beq.n	800b220 <__pow5mult+0xa0>
 800b1a4:	69fc      	ldr	r4, [r7, #28]
 800b1a6:	b97c      	cbnz	r4, 800b1c8 <__pow5mult+0x48>
 800b1a8:	2010      	movs	r0, #16
 800b1aa:	f7ff fd7f 	bl	800acac <malloc>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	61f8      	str	r0, [r7, #28]
 800b1b2:	b928      	cbnz	r0, 800b1c0 <__pow5mult+0x40>
 800b1b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b22c <__pow5mult+0xac>)
 800b1b6:	481e      	ldr	r0, [pc, #120]	@ (800b230 <__pow5mult+0xb0>)
 800b1b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b1bc:	f000 fbea 	bl	800b994 <__assert_func>
 800b1c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1c4:	6004      	str	r4, [r0, #0]
 800b1c6:	60c4      	str	r4, [r0, #12]
 800b1c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b1cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1d0:	b94c      	cbnz	r4, 800b1e6 <__pow5mult+0x66>
 800b1d2:	f240 2171 	movw	r1, #625	@ 0x271
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	f7ff ff12 	bl	800b000 <__i2b>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	6003      	str	r3, [r0, #0]
 800b1e6:	f04f 0900 	mov.w	r9, #0
 800b1ea:	07eb      	lsls	r3, r5, #31
 800b1ec:	d50a      	bpl.n	800b204 <__pow5mult+0x84>
 800b1ee:	4631      	mov	r1, r6
 800b1f0:	4622      	mov	r2, r4
 800b1f2:	4638      	mov	r0, r7
 800b1f4:	f7ff ff1a 	bl	800b02c <__multiply>
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4680      	mov	r8, r0
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	f7ff fe4b 	bl	800ae98 <_Bfree>
 800b202:	4646      	mov	r6, r8
 800b204:	106d      	asrs	r5, r5, #1
 800b206:	d00b      	beq.n	800b220 <__pow5mult+0xa0>
 800b208:	6820      	ldr	r0, [r4, #0]
 800b20a:	b938      	cbnz	r0, 800b21c <__pow5mult+0x9c>
 800b20c:	4622      	mov	r2, r4
 800b20e:	4621      	mov	r1, r4
 800b210:	4638      	mov	r0, r7
 800b212:	f7ff ff0b 	bl	800b02c <__multiply>
 800b216:	6020      	str	r0, [r4, #0]
 800b218:	f8c0 9000 	str.w	r9, [r0]
 800b21c:	4604      	mov	r4, r0
 800b21e:	e7e4      	b.n	800b1ea <__pow5mult+0x6a>
 800b220:	4630      	mov	r0, r6
 800b222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b226:	bf00      	nop
 800b228:	0800c224 	.word	0x0800c224
 800b22c:	0800c149 	.word	0x0800c149
 800b230:	0800c1c9 	.word	0x0800c1c9

0800b234 <__lshift>:
 800b234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b238:	460c      	mov	r4, r1
 800b23a:	6849      	ldr	r1, [r1, #4]
 800b23c:	6923      	ldr	r3, [r4, #16]
 800b23e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b242:	68a3      	ldr	r3, [r4, #8]
 800b244:	4607      	mov	r7, r0
 800b246:	4691      	mov	r9, r2
 800b248:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b24c:	f108 0601 	add.w	r6, r8, #1
 800b250:	42b3      	cmp	r3, r6
 800b252:	db0b      	blt.n	800b26c <__lshift+0x38>
 800b254:	4638      	mov	r0, r7
 800b256:	f7ff fddf 	bl	800ae18 <_Balloc>
 800b25a:	4605      	mov	r5, r0
 800b25c:	b948      	cbnz	r0, 800b272 <__lshift+0x3e>
 800b25e:	4602      	mov	r2, r0
 800b260:	4b28      	ldr	r3, [pc, #160]	@ (800b304 <__lshift+0xd0>)
 800b262:	4829      	ldr	r0, [pc, #164]	@ (800b308 <__lshift+0xd4>)
 800b264:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b268:	f000 fb94 	bl	800b994 <__assert_func>
 800b26c:	3101      	adds	r1, #1
 800b26e:	005b      	lsls	r3, r3, #1
 800b270:	e7ee      	b.n	800b250 <__lshift+0x1c>
 800b272:	2300      	movs	r3, #0
 800b274:	f100 0114 	add.w	r1, r0, #20
 800b278:	f100 0210 	add.w	r2, r0, #16
 800b27c:	4618      	mov	r0, r3
 800b27e:	4553      	cmp	r3, sl
 800b280:	db33      	blt.n	800b2ea <__lshift+0xb6>
 800b282:	6920      	ldr	r0, [r4, #16]
 800b284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b288:	f104 0314 	add.w	r3, r4, #20
 800b28c:	f019 091f 	ands.w	r9, r9, #31
 800b290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b294:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b298:	d02b      	beq.n	800b2f2 <__lshift+0xbe>
 800b29a:	f1c9 0e20 	rsb	lr, r9, #32
 800b29e:	468a      	mov	sl, r1
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	6818      	ldr	r0, [r3, #0]
 800b2a4:	fa00 f009 	lsl.w	r0, r0, r9
 800b2a8:	4310      	orrs	r0, r2
 800b2aa:	f84a 0b04 	str.w	r0, [sl], #4
 800b2ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2b2:	459c      	cmp	ip, r3
 800b2b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2b8:	d8f3      	bhi.n	800b2a2 <__lshift+0x6e>
 800b2ba:	ebac 0304 	sub.w	r3, ip, r4
 800b2be:	3b15      	subs	r3, #21
 800b2c0:	f023 0303 	bic.w	r3, r3, #3
 800b2c4:	3304      	adds	r3, #4
 800b2c6:	f104 0015 	add.w	r0, r4, #21
 800b2ca:	4584      	cmp	ip, r0
 800b2cc:	bf38      	it	cc
 800b2ce:	2304      	movcc	r3, #4
 800b2d0:	50ca      	str	r2, [r1, r3]
 800b2d2:	b10a      	cbz	r2, 800b2d8 <__lshift+0xa4>
 800b2d4:	f108 0602 	add.w	r6, r8, #2
 800b2d8:	3e01      	subs	r6, #1
 800b2da:	4638      	mov	r0, r7
 800b2dc:	612e      	str	r6, [r5, #16]
 800b2de:	4621      	mov	r1, r4
 800b2e0:	f7ff fdda 	bl	800ae98 <_Bfree>
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	e7c5      	b.n	800b27e <__lshift+0x4a>
 800b2f2:	3904      	subs	r1, #4
 800b2f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2fc:	459c      	cmp	ip, r3
 800b2fe:	d8f9      	bhi.n	800b2f4 <__lshift+0xc0>
 800b300:	e7ea      	b.n	800b2d8 <__lshift+0xa4>
 800b302:	bf00      	nop
 800b304:	0800c1b8 	.word	0x0800c1b8
 800b308:	0800c1c9 	.word	0x0800c1c9

0800b30c <__mcmp>:
 800b30c:	690a      	ldr	r2, [r1, #16]
 800b30e:	4603      	mov	r3, r0
 800b310:	6900      	ldr	r0, [r0, #16]
 800b312:	1a80      	subs	r0, r0, r2
 800b314:	b530      	push	{r4, r5, lr}
 800b316:	d10e      	bne.n	800b336 <__mcmp+0x2a>
 800b318:	3314      	adds	r3, #20
 800b31a:	3114      	adds	r1, #20
 800b31c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b320:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b324:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b328:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b32c:	4295      	cmp	r5, r2
 800b32e:	d003      	beq.n	800b338 <__mcmp+0x2c>
 800b330:	d205      	bcs.n	800b33e <__mcmp+0x32>
 800b332:	f04f 30ff 	mov.w	r0, #4294967295
 800b336:	bd30      	pop	{r4, r5, pc}
 800b338:	42a3      	cmp	r3, r4
 800b33a:	d3f3      	bcc.n	800b324 <__mcmp+0x18>
 800b33c:	e7fb      	b.n	800b336 <__mcmp+0x2a>
 800b33e:	2001      	movs	r0, #1
 800b340:	e7f9      	b.n	800b336 <__mcmp+0x2a>
	...

0800b344 <__mdiff>:
 800b344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b348:	4689      	mov	r9, r1
 800b34a:	4606      	mov	r6, r0
 800b34c:	4611      	mov	r1, r2
 800b34e:	4648      	mov	r0, r9
 800b350:	4614      	mov	r4, r2
 800b352:	f7ff ffdb 	bl	800b30c <__mcmp>
 800b356:	1e05      	subs	r5, r0, #0
 800b358:	d112      	bne.n	800b380 <__mdiff+0x3c>
 800b35a:	4629      	mov	r1, r5
 800b35c:	4630      	mov	r0, r6
 800b35e:	f7ff fd5b 	bl	800ae18 <_Balloc>
 800b362:	4602      	mov	r2, r0
 800b364:	b928      	cbnz	r0, 800b372 <__mdiff+0x2e>
 800b366:	4b3f      	ldr	r3, [pc, #252]	@ (800b464 <__mdiff+0x120>)
 800b368:	f240 2137 	movw	r1, #567	@ 0x237
 800b36c:	483e      	ldr	r0, [pc, #248]	@ (800b468 <__mdiff+0x124>)
 800b36e:	f000 fb11 	bl	800b994 <__assert_func>
 800b372:	2301      	movs	r3, #1
 800b374:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b378:	4610      	mov	r0, r2
 800b37a:	b003      	add	sp, #12
 800b37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b380:	bfbc      	itt	lt
 800b382:	464b      	movlt	r3, r9
 800b384:	46a1      	movlt	r9, r4
 800b386:	4630      	mov	r0, r6
 800b388:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b38c:	bfba      	itte	lt
 800b38e:	461c      	movlt	r4, r3
 800b390:	2501      	movlt	r5, #1
 800b392:	2500      	movge	r5, #0
 800b394:	f7ff fd40 	bl	800ae18 <_Balloc>
 800b398:	4602      	mov	r2, r0
 800b39a:	b918      	cbnz	r0, 800b3a4 <__mdiff+0x60>
 800b39c:	4b31      	ldr	r3, [pc, #196]	@ (800b464 <__mdiff+0x120>)
 800b39e:	f240 2145 	movw	r1, #581	@ 0x245
 800b3a2:	e7e3      	b.n	800b36c <__mdiff+0x28>
 800b3a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b3a8:	6926      	ldr	r6, [r4, #16]
 800b3aa:	60c5      	str	r5, [r0, #12]
 800b3ac:	f109 0310 	add.w	r3, r9, #16
 800b3b0:	f109 0514 	add.w	r5, r9, #20
 800b3b4:	f104 0e14 	add.w	lr, r4, #20
 800b3b8:	f100 0b14 	add.w	fp, r0, #20
 800b3bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b3c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	46d9      	mov	r9, fp
 800b3c8:	f04f 0c00 	mov.w	ip, #0
 800b3cc:	9b01      	ldr	r3, [sp, #4]
 800b3ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b3d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b3d6:	9301      	str	r3, [sp, #4]
 800b3d8:	fa1f f38a 	uxth.w	r3, sl
 800b3dc:	4619      	mov	r1, r3
 800b3de:	b283      	uxth	r3, r0
 800b3e0:	1acb      	subs	r3, r1, r3
 800b3e2:	0c00      	lsrs	r0, r0, #16
 800b3e4:	4463      	add	r3, ip
 800b3e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b3ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b3f4:	4576      	cmp	r6, lr
 800b3f6:	f849 3b04 	str.w	r3, [r9], #4
 800b3fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b3fe:	d8e5      	bhi.n	800b3cc <__mdiff+0x88>
 800b400:	1b33      	subs	r3, r6, r4
 800b402:	3b15      	subs	r3, #21
 800b404:	f023 0303 	bic.w	r3, r3, #3
 800b408:	3415      	adds	r4, #21
 800b40a:	3304      	adds	r3, #4
 800b40c:	42a6      	cmp	r6, r4
 800b40e:	bf38      	it	cc
 800b410:	2304      	movcc	r3, #4
 800b412:	441d      	add	r5, r3
 800b414:	445b      	add	r3, fp
 800b416:	461e      	mov	r6, r3
 800b418:	462c      	mov	r4, r5
 800b41a:	4544      	cmp	r4, r8
 800b41c:	d30e      	bcc.n	800b43c <__mdiff+0xf8>
 800b41e:	f108 0103 	add.w	r1, r8, #3
 800b422:	1b49      	subs	r1, r1, r5
 800b424:	f021 0103 	bic.w	r1, r1, #3
 800b428:	3d03      	subs	r5, #3
 800b42a:	45a8      	cmp	r8, r5
 800b42c:	bf38      	it	cc
 800b42e:	2100      	movcc	r1, #0
 800b430:	440b      	add	r3, r1
 800b432:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b436:	b191      	cbz	r1, 800b45e <__mdiff+0x11a>
 800b438:	6117      	str	r7, [r2, #16]
 800b43a:	e79d      	b.n	800b378 <__mdiff+0x34>
 800b43c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b440:	46e6      	mov	lr, ip
 800b442:	0c08      	lsrs	r0, r1, #16
 800b444:	fa1c fc81 	uxtah	ip, ip, r1
 800b448:	4471      	add	r1, lr
 800b44a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b44e:	b289      	uxth	r1, r1
 800b450:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b454:	f846 1b04 	str.w	r1, [r6], #4
 800b458:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b45c:	e7dd      	b.n	800b41a <__mdiff+0xd6>
 800b45e:	3f01      	subs	r7, #1
 800b460:	e7e7      	b.n	800b432 <__mdiff+0xee>
 800b462:	bf00      	nop
 800b464:	0800c1b8 	.word	0x0800c1b8
 800b468:	0800c1c9 	.word	0x0800c1c9

0800b46c <__d2b>:
 800b46c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b470:	460f      	mov	r7, r1
 800b472:	2101      	movs	r1, #1
 800b474:	ec59 8b10 	vmov	r8, r9, d0
 800b478:	4616      	mov	r6, r2
 800b47a:	f7ff fccd 	bl	800ae18 <_Balloc>
 800b47e:	4604      	mov	r4, r0
 800b480:	b930      	cbnz	r0, 800b490 <__d2b+0x24>
 800b482:	4602      	mov	r2, r0
 800b484:	4b23      	ldr	r3, [pc, #140]	@ (800b514 <__d2b+0xa8>)
 800b486:	4824      	ldr	r0, [pc, #144]	@ (800b518 <__d2b+0xac>)
 800b488:	f240 310f 	movw	r1, #783	@ 0x30f
 800b48c:	f000 fa82 	bl	800b994 <__assert_func>
 800b490:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b494:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b498:	b10d      	cbz	r5, 800b49e <__d2b+0x32>
 800b49a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	f1b8 0300 	subs.w	r3, r8, #0
 800b4a4:	d023      	beq.n	800b4ee <__d2b+0x82>
 800b4a6:	4668      	mov	r0, sp
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	f7ff fd7c 	bl	800afa6 <__lo0bits>
 800b4ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b4b2:	b1d0      	cbz	r0, 800b4ea <__d2b+0x7e>
 800b4b4:	f1c0 0320 	rsb	r3, r0, #32
 800b4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4bc:	430b      	orrs	r3, r1
 800b4be:	40c2      	lsrs	r2, r0
 800b4c0:	6163      	str	r3, [r4, #20]
 800b4c2:	9201      	str	r2, [sp, #4]
 800b4c4:	9b01      	ldr	r3, [sp, #4]
 800b4c6:	61a3      	str	r3, [r4, #24]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	bf0c      	ite	eq
 800b4cc:	2201      	moveq	r2, #1
 800b4ce:	2202      	movne	r2, #2
 800b4d0:	6122      	str	r2, [r4, #16]
 800b4d2:	b1a5      	cbz	r5, 800b4fe <__d2b+0x92>
 800b4d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b4d8:	4405      	add	r5, r0
 800b4da:	603d      	str	r5, [r7, #0]
 800b4dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b4e0:	6030      	str	r0, [r6, #0]
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	b003      	add	sp, #12
 800b4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4ea:	6161      	str	r1, [r4, #20]
 800b4ec:	e7ea      	b.n	800b4c4 <__d2b+0x58>
 800b4ee:	a801      	add	r0, sp, #4
 800b4f0:	f7ff fd59 	bl	800afa6 <__lo0bits>
 800b4f4:	9b01      	ldr	r3, [sp, #4]
 800b4f6:	6163      	str	r3, [r4, #20]
 800b4f8:	3020      	adds	r0, #32
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	e7e8      	b.n	800b4d0 <__d2b+0x64>
 800b4fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b502:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b506:	6038      	str	r0, [r7, #0]
 800b508:	6918      	ldr	r0, [r3, #16]
 800b50a:	f7ff fd2d 	bl	800af68 <__hi0bits>
 800b50e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b512:	e7e5      	b.n	800b4e0 <__d2b+0x74>
 800b514:	0800c1b8 	.word	0x0800c1b8
 800b518:	0800c1c9 	.word	0x0800c1c9

0800b51c <__ssputs_r>:
 800b51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b520:	688e      	ldr	r6, [r1, #8]
 800b522:	461f      	mov	r7, r3
 800b524:	42be      	cmp	r6, r7
 800b526:	680b      	ldr	r3, [r1, #0]
 800b528:	4682      	mov	sl, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	4690      	mov	r8, r2
 800b52e:	d82d      	bhi.n	800b58c <__ssputs_r+0x70>
 800b530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b534:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b538:	d026      	beq.n	800b588 <__ssputs_r+0x6c>
 800b53a:	6965      	ldr	r5, [r4, #20]
 800b53c:	6909      	ldr	r1, [r1, #16]
 800b53e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b542:	eba3 0901 	sub.w	r9, r3, r1
 800b546:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b54a:	1c7b      	adds	r3, r7, #1
 800b54c:	444b      	add	r3, r9
 800b54e:	106d      	asrs	r5, r5, #1
 800b550:	429d      	cmp	r5, r3
 800b552:	bf38      	it	cc
 800b554:	461d      	movcc	r5, r3
 800b556:	0553      	lsls	r3, r2, #21
 800b558:	d527      	bpl.n	800b5aa <__ssputs_r+0x8e>
 800b55a:	4629      	mov	r1, r5
 800b55c:	f7ff fbd0 	bl	800ad00 <_malloc_r>
 800b560:	4606      	mov	r6, r0
 800b562:	b360      	cbz	r0, 800b5be <__ssputs_r+0xa2>
 800b564:	6921      	ldr	r1, [r4, #16]
 800b566:	464a      	mov	r2, r9
 800b568:	f000 fa06 	bl	800b978 <memcpy>
 800b56c:	89a3      	ldrh	r3, [r4, #12]
 800b56e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b576:	81a3      	strh	r3, [r4, #12]
 800b578:	6126      	str	r6, [r4, #16]
 800b57a:	6165      	str	r5, [r4, #20]
 800b57c:	444e      	add	r6, r9
 800b57e:	eba5 0509 	sub.w	r5, r5, r9
 800b582:	6026      	str	r6, [r4, #0]
 800b584:	60a5      	str	r5, [r4, #8]
 800b586:	463e      	mov	r6, r7
 800b588:	42be      	cmp	r6, r7
 800b58a:	d900      	bls.n	800b58e <__ssputs_r+0x72>
 800b58c:	463e      	mov	r6, r7
 800b58e:	6820      	ldr	r0, [r4, #0]
 800b590:	4632      	mov	r2, r6
 800b592:	4641      	mov	r1, r8
 800b594:	f000 f9c6 	bl	800b924 <memmove>
 800b598:	68a3      	ldr	r3, [r4, #8]
 800b59a:	1b9b      	subs	r3, r3, r6
 800b59c:	60a3      	str	r3, [r4, #8]
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	4433      	add	r3, r6
 800b5a2:	6023      	str	r3, [r4, #0]
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5aa:	462a      	mov	r2, r5
 800b5ac:	f000 fa36 	bl	800ba1c <_realloc_r>
 800b5b0:	4606      	mov	r6, r0
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d1e0      	bne.n	800b578 <__ssputs_r+0x5c>
 800b5b6:	6921      	ldr	r1, [r4, #16]
 800b5b8:	4650      	mov	r0, sl
 800b5ba:	f7ff fb2d 	bl	800ac18 <_free_r>
 800b5be:	230c      	movs	r3, #12
 800b5c0:	f8ca 3000 	str.w	r3, [sl]
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5ca:	81a3      	strh	r3, [r4, #12]
 800b5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d0:	e7e9      	b.n	800b5a6 <__ssputs_r+0x8a>
	...

0800b5d4 <_svfiprintf_r>:
 800b5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d8:	4698      	mov	r8, r3
 800b5da:	898b      	ldrh	r3, [r1, #12]
 800b5dc:	061b      	lsls	r3, r3, #24
 800b5de:	b09d      	sub	sp, #116	@ 0x74
 800b5e0:	4607      	mov	r7, r0
 800b5e2:	460d      	mov	r5, r1
 800b5e4:	4614      	mov	r4, r2
 800b5e6:	d510      	bpl.n	800b60a <_svfiprintf_r+0x36>
 800b5e8:	690b      	ldr	r3, [r1, #16]
 800b5ea:	b973      	cbnz	r3, 800b60a <_svfiprintf_r+0x36>
 800b5ec:	2140      	movs	r1, #64	@ 0x40
 800b5ee:	f7ff fb87 	bl	800ad00 <_malloc_r>
 800b5f2:	6028      	str	r0, [r5, #0]
 800b5f4:	6128      	str	r0, [r5, #16]
 800b5f6:	b930      	cbnz	r0, 800b606 <_svfiprintf_r+0x32>
 800b5f8:	230c      	movs	r3, #12
 800b5fa:	603b      	str	r3, [r7, #0]
 800b5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b600:	b01d      	add	sp, #116	@ 0x74
 800b602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b606:	2340      	movs	r3, #64	@ 0x40
 800b608:	616b      	str	r3, [r5, #20]
 800b60a:	2300      	movs	r3, #0
 800b60c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b60e:	2320      	movs	r3, #32
 800b610:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b614:	f8cd 800c 	str.w	r8, [sp, #12]
 800b618:	2330      	movs	r3, #48	@ 0x30
 800b61a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b7b8 <_svfiprintf_r+0x1e4>
 800b61e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b622:	f04f 0901 	mov.w	r9, #1
 800b626:	4623      	mov	r3, r4
 800b628:	469a      	mov	sl, r3
 800b62a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b62e:	b10a      	cbz	r2, 800b634 <_svfiprintf_r+0x60>
 800b630:	2a25      	cmp	r2, #37	@ 0x25
 800b632:	d1f9      	bne.n	800b628 <_svfiprintf_r+0x54>
 800b634:	ebba 0b04 	subs.w	fp, sl, r4
 800b638:	d00b      	beq.n	800b652 <_svfiprintf_r+0x7e>
 800b63a:	465b      	mov	r3, fp
 800b63c:	4622      	mov	r2, r4
 800b63e:	4629      	mov	r1, r5
 800b640:	4638      	mov	r0, r7
 800b642:	f7ff ff6b 	bl	800b51c <__ssputs_r>
 800b646:	3001      	adds	r0, #1
 800b648:	f000 80a7 	beq.w	800b79a <_svfiprintf_r+0x1c6>
 800b64c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b64e:	445a      	add	r2, fp
 800b650:	9209      	str	r2, [sp, #36]	@ 0x24
 800b652:	f89a 3000 	ldrb.w	r3, [sl]
 800b656:	2b00      	cmp	r3, #0
 800b658:	f000 809f 	beq.w	800b79a <_svfiprintf_r+0x1c6>
 800b65c:	2300      	movs	r3, #0
 800b65e:	f04f 32ff 	mov.w	r2, #4294967295
 800b662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b666:	f10a 0a01 	add.w	sl, sl, #1
 800b66a:	9304      	str	r3, [sp, #16]
 800b66c:	9307      	str	r3, [sp, #28]
 800b66e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b672:	931a      	str	r3, [sp, #104]	@ 0x68
 800b674:	4654      	mov	r4, sl
 800b676:	2205      	movs	r2, #5
 800b678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b67c:	484e      	ldr	r0, [pc, #312]	@ (800b7b8 <_svfiprintf_r+0x1e4>)
 800b67e:	f7f4 fdaf 	bl	80001e0 <memchr>
 800b682:	9a04      	ldr	r2, [sp, #16]
 800b684:	b9d8      	cbnz	r0, 800b6be <_svfiprintf_r+0xea>
 800b686:	06d0      	lsls	r0, r2, #27
 800b688:	bf44      	itt	mi
 800b68a:	2320      	movmi	r3, #32
 800b68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b690:	0711      	lsls	r1, r2, #28
 800b692:	bf44      	itt	mi
 800b694:	232b      	movmi	r3, #43	@ 0x2b
 800b696:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b69a:	f89a 3000 	ldrb.w	r3, [sl]
 800b69e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6a0:	d015      	beq.n	800b6ce <_svfiprintf_r+0xfa>
 800b6a2:	9a07      	ldr	r2, [sp, #28]
 800b6a4:	4654      	mov	r4, sl
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	f04f 0c0a 	mov.w	ip, #10
 800b6ac:	4621      	mov	r1, r4
 800b6ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6b2:	3b30      	subs	r3, #48	@ 0x30
 800b6b4:	2b09      	cmp	r3, #9
 800b6b6:	d94b      	bls.n	800b750 <_svfiprintf_r+0x17c>
 800b6b8:	b1b0      	cbz	r0, 800b6e8 <_svfiprintf_r+0x114>
 800b6ba:	9207      	str	r2, [sp, #28]
 800b6bc:	e014      	b.n	800b6e8 <_svfiprintf_r+0x114>
 800b6be:	eba0 0308 	sub.w	r3, r0, r8
 800b6c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	9304      	str	r3, [sp, #16]
 800b6ca:	46a2      	mov	sl, r4
 800b6cc:	e7d2      	b.n	800b674 <_svfiprintf_r+0xa0>
 800b6ce:	9b03      	ldr	r3, [sp, #12]
 800b6d0:	1d19      	adds	r1, r3, #4
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	9103      	str	r1, [sp, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	bfbb      	ittet	lt
 800b6da:	425b      	neglt	r3, r3
 800b6dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b6e0:	9307      	strge	r3, [sp, #28]
 800b6e2:	9307      	strlt	r3, [sp, #28]
 800b6e4:	bfb8      	it	lt
 800b6e6:	9204      	strlt	r2, [sp, #16]
 800b6e8:	7823      	ldrb	r3, [r4, #0]
 800b6ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6ec:	d10a      	bne.n	800b704 <_svfiprintf_r+0x130>
 800b6ee:	7863      	ldrb	r3, [r4, #1]
 800b6f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6f2:	d132      	bne.n	800b75a <_svfiprintf_r+0x186>
 800b6f4:	9b03      	ldr	r3, [sp, #12]
 800b6f6:	1d1a      	adds	r2, r3, #4
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	9203      	str	r2, [sp, #12]
 800b6fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b700:	3402      	adds	r4, #2
 800b702:	9305      	str	r3, [sp, #20]
 800b704:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b7c8 <_svfiprintf_r+0x1f4>
 800b708:	7821      	ldrb	r1, [r4, #0]
 800b70a:	2203      	movs	r2, #3
 800b70c:	4650      	mov	r0, sl
 800b70e:	f7f4 fd67 	bl	80001e0 <memchr>
 800b712:	b138      	cbz	r0, 800b724 <_svfiprintf_r+0x150>
 800b714:	9b04      	ldr	r3, [sp, #16]
 800b716:	eba0 000a 	sub.w	r0, r0, sl
 800b71a:	2240      	movs	r2, #64	@ 0x40
 800b71c:	4082      	lsls	r2, r0
 800b71e:	4313      	orrs	r3, r2
 800b720:	3401      	adds	r4, #1
 800b722:	9304      	str	r3, [sp, #16]
 800b724:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b728:	4824      	ldr	r0, [pc, #144]	@ (800b7bc <_svfiprintf_r+0x1e8>)
 800b72a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b72e:	2206      	movs	r2, #6
 800b730:	f7f4 fd56 	bl	80001e0 <memchr>
 800b734:	2800      	cmp	r0, #0
 800b736:	d036      	beq.n	800b7a6 <_svfiprintf_r+0x1d2>
 800b738:	4b21      	ldr	r3, [pc, #132]	@ (800b7c0 <_svfiprintf_r+0x1ec>)
 800b73a:	bb1b      	cbnz	r3, 800b784 <_svfiprintf_r+0x1b0>
 800b73c:	9b03      	ldr	r3, [sp, #12]
 800b73e:	3307      	adds	r3, #7
 800b740:	f023 0307 	bic.w	r3, r3, #7
 800b744:	3308      	adds	r3, #8
 800b746:	9303      	str	r3, [sp, #12]
 800b748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b74a:	4433      	add	r3, r6
 800b74c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b74e:	e76a      	b.n	800b626 <_svfiprintf_r+0x52>
 800b750:	fb0c 3202 	mla	r2, ip, r2, r3
 800b754:	460c      	mov	r4, r1
 800b756:	2001      	movs	r0, #1
 800b758:	e7a8      	b.n	800b6ac <_svfiprintf_r+0xd8>
 800b75a:	2300      	movs	r3, #0
 800b75c:	3401      	adds	r4, #1
 800b75e:	9305      	str	r3, [sp, #20]
 800b760:	4619      	mov	r1, r3
 800b762:	f04f 0c0a 	mov.w	ip, #10
 800b766:	4620      	mov	r0, r4
 800b768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b76c:	3a30      	subs	r2, #48	@ 0x30
 800b76e:	2a09      	cmp	r2, #9
 800b770:	d903      	bls.n	800b77a <_svfiprintf_r+0x1a6>
 800b772:	2b00      	cmp	r3, #0
 800b774:	d0c6      	beq.n	800b704 <_svfiprintf_r+0x130>
 800b776:	9105      	str	r1, [sp, #20]
 800b778:	e7c4      	b.n	800b704 <_svfiprintf_r+0x130>
 800b77a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b77e:	4604      	mov	r4, r0
 800b780:	2301      	movs	r3, #1
 800b782:	e7f0      	b.n	800b766 <_svfiprintf_r+0x192>
 800b784:	ab03      	add	r3, sp, #12
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	462a      	mov	r2, r5
 800b78a:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c4 <_svfiprintf_r+0x1f0>)
 800b78c:	a904      	add	r1, sp, #16
 800b78e:	4638      	mov	r0, r7
 800b790:	f7fd fe98 	bl	80094c4 <_printf_float>
 800b794:	1c42      	adds	r2, r0, #1
 800b796:	4606      	mov	r6, r0
 800b798:	d1d6      	bne.n	800b748 <_svfiprintf_r+0x174>
 800b79a:	89ab      	ldrh	r3, [r5, #12]
 800b79c:	065b      	lsls	r3, r3, #25
 800b79e:	f53f af2d 	bmi.w	800b5fc <_svfiprintf_r+0x28>
 800b7a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7a4:	e72c      	b.n	800b600 <_svfiprintf_r+0x2c>
 800b7a6:	ab03      	add	r3, sp, #12
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	462a      	mov	r2, r5
 800b7ac:	4b05      	ldr	r3, [pc, #20]	@ (800b7c4 <_svfiprintf_r+0x1f0>)
 800b7ae:	a904      	add	r1, sp, #16
 800b7b0:	4638      	mov	r0, r7
 800b7b2:	f7fe f91f 	bl	80099f4 <_printf_i>
 800b7b6:	e7ed      	b.n	800b794 <_svfiprintf_r+0x1c0>
 800b7b8:	0800c320 	.word	0x0800c320
 800b7bc:	0800c32a 	.word	0x0800c32a
 800b7c0:	080094c5 	.word	0x080094c5
 800b7c4:	0800b51d 	.word	0x0800b51d
 800b7c8:	0800c326 	.word	0x0800c326

0800b7cc <__sflush_r>:
 800b7cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d4:	0716      	lsls	r6, r2, #28
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	460c      	mov	r4, r1
 800b7da:	d454      	bmi.n	800b886 <__sflush_r+0xba>
 800b7dc:	684b      	ldr	r3, [r1, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	dc02      	bgt.n	800b7e8 <__sflush_r+0x1c>
 800b7e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	dd48      	ble.n	800b87a <__sflush_r+0xae>
 800b7e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7ea:	2e00      	cmp	r6, #0
 800b7ec:	d045      	beq.n	800b87a <__sflush_r+0xae>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b7f4:	682f      	ldr	r7, [r5, #0]
 800b7f6:	6a21      	ldr	r1, [r4, #32]
 800b7f8:	602b      	str	r3, [r5, #0]
 800b7fa:	d030      	beq.n	800b85e <__sflush_r+0x92>
 800b7fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	0759      	lsls	r1, r3, #29
 800b802:	d505      	bpl.n	800b810 <__sflush_r+0x44>
 800b804:	6863      	ldr	r3, [r4, #4]
 800b806:	1ad2      	subs	r2, r2, r3
 800b808:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b80a:	b10b      	cbz	r3, 800b810 <__sflush_r+0x44>
 800b80c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b80e:	1ad2      	subs	r2, r2, r3
 800b810:	2300      	movs	r3, #0
 800b812:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b814:	6a21      	ldr	r1, [r4, #32]
 800b816:	4628      	mov	r0, r5
 800b818:	47b0      	blx	r6
 800b81a:	1c43      	adds	r3, r0, #1
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	d106      	bne.n	800b82e <__sflush_r+0x62>
 800b820:	6829      	ldr	r1, [r5, #0]
 800b822:	291d      	cmp	r1, #29
 800b824:	d82b      	bhi.n	800b87e <__sflush_r+0xb2>
 800b826:	4a2a      	ldr	r2, [pc, #168]	@ (800b8d0 <__sflush_r+0x104>)
 800b828:	410a      	asrs	r2, r1
 800b82a:	07d6      	lsls	r6, r2, #31
 800b82c:	d427      	bmi.n	800b87e <__sflush_r+0xb2>
 800b82e:	2200      	movs	r2, #0
 800b830:	6062      	str	r2, [r4, #4]
 800b832:	04d9      	lsls	r1, r3, #19
 800b834:	6922      	ldr	r2, [r4, #16]
 800b836:	6022      	str	r2, [r4, #0]
 800b838:	d504      	bpl.n	800b844 <__sflush_r+0x78>
 800b83a:	1c42      	adds	r2, r0, #1
 800b83c:	d101      	bne.n	800b842 <__sflush_r+0x76>
 800b83e:	682b      	ldr	r3, [r5, #0]
 800b840:	b903      	cbnz	r3, 800b844 <__sflush_r+0x78>
 800b842:	6560      	str	r0, [r4, #84]	@ 0x54
 800b844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b846:	602f      	str	r7, [r5, #0]
 800b848:	b1b9      	cbz	r1, 800b87a <__sflush_r+0xae>
 800b84a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b84e:	4299      	cmp	r1, r3
 800b850:	d002      	beq.n	800b858 <__sflush_r+0x8c>
 800b852:	4628      	mov	r0, r5
 800b854:	f7ff f9e0 	bl	800ac18 <_free_r>
 800b858:	2300      	movs	r3, #0
 800b85a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b85c:	e00d      	b.n	800b87a <__sflush_r+0xae>
 800b85e:	2301      	movs	r3, #1
 800b860:	4628      	mov	r0, r5
 800b862:	47b0      	blx	r6
 800b864:	4602      	mov	r2, r0
 800b866:	1c50      	adds	r0, r2, #1
 800b868:	d1c9      	bne.n	800b7fe <__sflush_r+0x32>
 800b86a:	682b      	ldr	r3, [r5, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0c6      	beq.n	800b7fe <__sflush_r+0x32>
 800b870:	2b1d      	cmp	r3, #29
 800b872:	d001      	beq.n	800b878 <__sflush_r+0xac>
 800b874:	2b16      	cmp	r3, #22
 800b876:	d11e      	bne.n	800b8b6 <__sflush_r+0xea>
 800b878:	602f      	str	r7, [r5, #0]
 800b87a:	2000      	movs	r0, #0
 800b87c:	e022      	b.n	800b8c4 <__sflush_r+0xf8>
 800b87e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b882:	b21b      	sxth	r3, r3
 800b884:	e01b      	b.n	800b8be <__sflush_r+0xf2>
 800b886:	690f      	ldr	r7, [r1, #16]
 800b888:	2f00      	cmp	r7, #0
 800b88a:	d0f6      	beq.n	800b87a <__sflush_r+0xae>
 800b88c:	0793      	lsls	r3, r2, #30
 800b88e:	680e      	ldr	r6, [r1, #0]
 800b890:	bf08      	it	eq
 800b892:	694b      	ldreq	r3, [r1, #20]
 800b894:	600f      	str	r7, [r1, #0]
 800b896:	bf18      	it	ne
 800b898:	2300      	movne	r3, #0
 800b89a:	eba6 0807 	sub.w	r8, r6, r7
 800b89e:	608b      	str	r3, [r1, #8]
 800b8a0:	f1b8 0f00 	cmp.w	r8, #0
 800b8a4:	dde9      	ble.n	800b87a <__sflush_r+0xae>
 800b8a6:	6a21      	ldr	r1, [r4, #32]
 800b8a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8aa:	4643      	mov	r3, r8
 800b8ac:	463a      	mov	r2, r7
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	47b0      	blx	r6
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	dc08      	bgt.n	800b8c8 <__sflush_r+0xfc>
 800b8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8be:	81a3      	strh	r3, [r4, #12]
 800b8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8c8:	4407      	add	r7, r0
 800b8ca:	eba8 0800 	sub.w	r8, r8, r0
 800b8ce:	e7e7      	b.n	800b8a0 <__sflush_r+0xd4>
 800b8d0:	dfbffffe 	.word	0xdfbffffe

0800b8d4 <_fflush_r>:
 800b8d4:	b538      	push	{r3, r4, r5, lr}
 800b8d6:	690b      	ldr	r3, [r1, #16]
 800b8d8:	4605      	mov	r5, r0
 800b8da:	460c      	mov	r4, r1
 800b8dc:	b913      	cbnz	r3, 800b8e4 <_fflush_r+0x10>
 800b8de:	2500      	movs	r5, #0
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	bd38      	pop	{r3, r4, r5, pc}
 800b8e4:	b118      	cbz	r0, 800b8ee <_fflush_r+0x1a>
 800b8e6:	6a03      	ldr	r3, [r0, #32]
 800b8e8:	b90b      	cbnz	r3, 800b8ee <_fflush_r+0x1a>
 800b8ea:	f7fe fa2f 	bl	8009d4c <__sinit>
 800b8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d0f3      	beq.n	800b8de <_fflush_r+0xa>
 800b8f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b8f8:	07d0      	lsls	r0, r2, #31
 800b8fa:	d404      	bmi.n	800b906 <_fflush_r+0x32>
 800b8fc:	0599      	lsls	r1, r3, #22
 800b8fe:	d402      	bmi.n	800b906 <_fflush_r+0x32>
 800b900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b902:	f7fe fb3a 	bl	8009f7a <__retarget_lock_acquire_recursive>
 800b906:	4628      	mov	r0, r5
 800b908:	4621      	mov	r1, r4
 800b90a:	f7ff ff5f 	bl	800b7cc <__sflush_r>
 800b90e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b910:	07da      	lsls	r2, r3, #31
 800b912:	4605      	mov	r5, r0
 800b914:	d4e4      	bmi.n	800b8e0 <_fflush_r+0xc>
 800b916:	89a3      	ldrh	r3, [r4, #12]
 800b918:	059b      	lsls	r3, r3, #22
 800b91a:	d4e1      	bmi.n	800b8e0 <_fflush_r+0xc>
 800b91c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b91e:	f7fe fb2d 	bl	8009f7c <__retarget_lock_release_recursive>
 800b922:	e7dd      	b.n	800b8e0 <_fflush_r+0xc>

0800b924 <memmove>:
 800b924:	4288      	cmp	r0, r1
 800b926:	b510      	push	{r4, lr}
 800b928:	eb01 0402 	add.w	r4, r1, r2
 800b92c:	d902      	bls.n	800b934 <memmove+0x10>
 800b92e:	4284      	cmp	r4, r0
 800b930:	4623      	mov	r3, r4
 800b932:	d807      	bhi.n	800b944 <memmove+0x20>
 800b934:	1e43      	subs	r3, r0, #1
 800b936:	42a1      	cmp	r1, r4
 800b938:	d008      	beq.n	800b94c <memmove+0x28>
 800b93a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b93e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b942:	e7f8      	b.n	800b936 <memmove+0x12>
 800b944:	4402      	add	r2, r0
 800b946:	4601      	mov	r1, r0
 800b948:	428a      	cmp	r2, r1
 800b94a:	d100      	bne.n	800b94e <memmove+0x2a>
 800b94c:	bd10      	pop	{r4, pc}
 800b94e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b956:	e7f7      	b.n	800b948 <memmove+0x24>

0800b958 <_sbrk_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	4d06      	ldr	r5, [pc, #24]	@ (800b974 <_sbrk_r+0x1c>)
 800b95c:	2300      	movs	r3, #0
 800b95e:	4604      	mov	r4, r0
 800b960:	4608      	mov	r0, r1
 800b962:	602b      	str	r3, [r5, #0]
 800b964:	f7f6 fd7a 	bl	800245c <_sbrk>
 800b968:	1c43      	adds	r3, r0, #1
 800b96a:	d102      	bne.n	800b972 <_sbrk_r+0x1a>
 800b96c:	682b      	ldr	r3, [r5, #0]
 800b96e:	b103      	cbz	r3, 800b972 <_sbrk_r+0x1a>
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	bd38      	pop	{r3, r4, r5, pc}
 800b974:	200008b4 	.word	0x200008b4

0800b978 <memcpy>:
 800b978:	440a      	add	r2, r1
 800b97a:	4291      	cmp	r1, r2
 800b97c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b980:	d100      	bne.n	800b984 <memcpy+0xc>
 800b982:	4770      	bx	lr
 800b984:	b510      	push	{r4, lr}
 800b986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b98a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b98e:	4291      	cmp	r1, r2
 800b990:	d1f9      	bne.n	800b986 <memcpy+0xe>
 800b992:	bd10      	pop	{r4, pc}

0800b994 <__assert_func>:
 800b994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b996:	4614      	mov	r4, r2
 800b998:	461a      	mov	r2, r3
 800b99a:	4b09      	ldr	r3, [pc, #36]	@ (800b9c0 <__assert_func+0x2c>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4605      	mov	r5, r0
 800b9a0:	68d8      	ldr	r0, [r3, #12]
 800b9a2:	b954      	cbnz	r4, 800b9ba <__assert_func+0x26>
 800b9a4:	4b07      	ldr	r3, [pc, #28]	@ (800b9c4 <__assert_func+0x30>)
 800b9a6:	461c      	mov	r4, r3
 800b9a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9ac:	9100      	str	r1, [sp, #0]
 800b9ae:	462b      	mov	r3, r5
 800b9b0:	4905      	ldr	r1, [pc, #20]	@ (800b9c8 <__assert_func+0x34>)
 800b9b2:	f000 f86f 	bl	800ba94 <fiprintf>
 800b9b6:	f000 f87f 	bl	800bab8 <abort>
 800b9ba:	4b04      	ldr	r3, [pc, #16]	@ (800b9cc <__assert_func+0x38>)
 800b9bc:	e7f4      	b.n	800b9a8 <__assert_func+0x14>
 800b9be:	bf00      	nop
 800b9c0:	20000018 	.word	0x20000018
 800b9c4:	0800c376 	.word	0x0800c376
 800b9c8:	0800c348 	.word	0x0800c348
 800b9cc:	0800c33b 	.word	0x0800c33b

0800b9d0 <_calloc_r>:
 800b9d0:	b570      	push	{r4, r5, r6, lr}
 800b9d2:	fba1 5402 	umull	r5, r4, r1, r2
 800b9d6:	b93c      	cbnz	r4, 800b9e8 <_calloc_r+0x18>
 800b9d8:	4629      	mov	r1, r5
 800b9da:	f7ff f991 	bl	800ad00 <_malloc_r>
 800b9de:	4606      	mov	r6, r0
 800b9e0:	b928      	cbnz	r0, 800b9ee <_calloc_r+0x1e>
 800b9e2:	2600      	movs	r6, #0
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	bd70      	pop	{r4, r5, r6, pc}
 800b9e8:	220c      	movs	r2, #12
 800b9ea:	6002      	str	r2, [r0, #0]
 800b9ec:	e7f9      	b.n	800b9e2 <_calloc_r+0x12>
 800b9ee:	462a      	mov	r2, r5
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	f7fe fa44 	bl	8009e7e <memset>
 800b9f6:	e7f5      	b.n	800b9e4 <_calloc_r+0x14>

0800b9f8 <__ascii_mbtowc>:
 800b9f8:	b082      	sub	sp, #8
 800b9fa:	b901      	cbnz	r1, 800b9fe <__ascii_mbtowc+0x6>
 800b9fc:	a901      	add	r1, sp, #4
 800b9fe:	b142      	cbz	r2, 800ba12 <__ascii_mbtowc+0x1a>
 800ba00:	b14b      	cbz	r3, 800ba16 <__ascii_mbtowc+0x1e>
 800ba02:	7813      	ldrb	r3, [r2, #0]
 800ba04:	600b      	str	r3, [r1, #0]
 800ba06:	7812      	ldrb	r2, [r2, #0]
 800ba08:	1e10      	subs	r0, r2, #0
 800ba0a:	bf18      	it	ne
 800ba0c:	2001      	movne	r0, #1
 800ba0e:	b002      	add	sp, #8
 800ba10:	4770      	bx	lr
 800ba12:	4610      	mov	r0, r2
 800ba14:	e7fb      	b.n	800ba0e <__ascii_mbtowc+0x16>
 800ba16:	f06f 0001 	mvn.w	r0, #1
 800ba1a:	e7f8      	b.n	800ba0e <__ascii_mbtowc+0x16>

0800ba1c <_realloc_r>:
 800ba1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba20:	4680      	mov	r8, r0
 800ba22:	4615      	mov	r5, r2
 800ba24:	460c      	mov	r4, r1
 800ba26:	b921      	cbnz	r1, 800ba32 <_realloc_r+0x16>
 800ba28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	f7ff b967 	b.w	800ad00 <_malloc_r>
 800ba32:	b92a      	cbnz	r2, 800ba40 <_realloc_r+0x24>
 800ba34:	f7ff f8f0 	bl	800ac18 <_free_r>
 800ba38:	2400      	movs	r4, #0
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba40:	f000 f841 	bl	800bac6 <_malloc_usable_size_r>
 800ba44:	4285      	cmp	r5, r0
 800ba46:	4606      	mov	r6, r0
 800ba48:	d802      	bhi.n	800ba50 <_realloc_r+0x34>
 800ba4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ba4e:	d8f4      	bhi.n	800ba3a <_realloc_r+0x1e>
 800ba50:	4629      	mov	r1, r5
 800ba52:	4640      	mov	r0, r8
 800ba54:	f7ff f954 	bl	800ad00 <_malloc_r>
 800ba58:	4607      	mov	r7, r0
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	d0ec      	beq.n	800ba38 <_realloc_r+0x1c>
 800ba5e:	42b5      	cmp	r5, r6
 800ba60:	462a      	mov	r2, r5
 800ba62:	4621      	mov	r1, r4
 800ba64:	bf28      	it	cs
 800ba66:	4632      	movcs	r2, r6
 800ba68:	f7ff ff86 	bl	800b978 <memcpy>
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	4640      	mov	r0, r8
 800ba70:	f7ff f8d2 	bl	800ac18 <_free_r>
 800ba74:	463c      	mov	r4, r7
 800ba76:	e7e0      	b.n	800ba3a <_realloc_r+0x1e>

0800ba78 <__ascii_wctomb>:
 800ba78:	4603      	mov	r3, r0
 800ba7a:	4608      	mov	r0, r1
 800ba7c:	b141      	cbz	r1, 800ba90 <__ascii_wctomb+0x18>
 800ba7e:	2aff      	cmp	r2, #255	@ 0xff
 800ba80:	d904      	bls.n	800ba8c <__ascii_wctomb+0x14>
 800ba82:	228a      	movs	r2, #138	@ 0x8a
 800ba84:	601a      	str	r2, [r3, #0]
 800ba86:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8a:	4770      	bx	lr
 800ba8c:	700a      	strb	r2, [r1, #0]
 800ba8e:	2001      	movs	r0, #1
 800ba90:	4770      	bx	lr
	...

0800ba94 <fiprintf>:
 800ba94:	b40e      	push	{r1, r2, r3}
 800ba96:	b503      	push	{r0, r1, lr}
 800ba98:	4601      	mov	r1, r0
 800ba9a:	ab03      	add	r3, sp, #12
 800ba9c:	4805      	ldr	r0, [pc, #20]	@ (800bab4 <fiprintf+0x20>)
 800ba9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800baa2:	6800      	ldr	r0, [r0, #0]
 800baa4:	9301      	str	r3, [sp, #4]
 800baa6:	f000 f83f 	bl	800bb28 <_vfiprintf_r>
 800baaa:	b002      	add	sp, #8
 800baac:	f85d eb04 	ldr.w	lr, [sp], #4
 800bab0:	b003      	add	sp, #12
 800bab2:	4770      	bx	lr
 800bab4:	20000018 	.word	0x20000018

0800bab8 <abort>:
 800bab8:	b508      	push	{r3, lr}
 800baba:	2006      	movs	r0, #6
 800babc:	f000 fa08 	bl	800bed0 <raise>
 800bac0:	2001      	movs	r0, #1
 800bac2:	f7f6 fc53 	bl	800236c <_exit>

0800bac6 <_malloc_usable_size_r>:
 800bac6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baca:	1f18      	subs	r0, r3, #4
 800bacc:	2b00      	cmp	r3, #0
 800bace:	bfbc      	itt	lt
 800bad0:	580b      	ldrlt	r3, [r1, r0]
 800bad2:	18c0      	addlt	r0, r0, r3
 800bad4:	4770      	bx	lr

0800bad6 <__sfputc_r>:
 800bad6:	6893      	ldr	r3, [r2, #8]
 800bad8:	3b01      	subs	r3, #1
 800bada:	2b00      	cmp	r3, #0
 800badc:	b410      	push	{r4}
 800bade:	6093      	str	r3, [r2, #8]
 800bae0:	da08      	bge.n	800baf4 <__sfputc_r+0x1e>
 800bae2:	6994      	ldr	r4, [r2, #24]
 800bae4:	42a3      	cmp	r3, r4
 800bae6:	db01      	blt.n	800baec <__sfputc_r+0x16>
 800bae8:	290a      	cmp	r1, #10
 800baea:	d103      	bne.n	800baf4 <__sfputc_r+0x1e>
 800baec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baf0:	f000 b932 	b.w	800bd58 <__swbuf_r>
 800baf4:	6813      	ldr	r3, [r2, #0]
 800baf6:	1c58      	adds	r0, r3, #1
 800baf8:	6010      	str	r0, [r2, #0]
 800bafa:	7019      	strb	r1, [r3, #0]
 800bafc:	4608      	mov	r0, r1
 800bafe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <__sfputs_r>:
 800bb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb06:	4606      	mov	r6, r0
 800bb08:	460f      	mov	r7, r1
 800bb0a:	4614      	mov	r4, r2
 800bb0c:	18d5      	adds	r5, r2, r3
 800bb0e:	42ac      	cmp	r4, r5
 800bb10:	d101      	bne.n	800bb16 <__sfputs_r+0x12>
 800bb12:	2000      	movs	r0, #0
 800bb14:	e007      	b.n	800bb26 <__sfputs_r+0x22>
 800bb16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb1a:	463a      	mov	r2, r7
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f7ff ffda 	bl	800bad6 <__sfputc_r>
 800bb22:	1c43      	adds	r3, r0, #1
 800bb24:	d1f3      	bne.n	800bb0e <__sfputs_r+0xa>
 800bb26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb28 <_vfiprintf_r>:
 800bb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2c:	460d      	mov	r5, r1
 800bb2e:	b09d      	sub	sp, #116	@ 0x74
 800bb30:	4614      	mov	r4, r2
 800bb32:	4698      	mov	r8, r3
 800bb34:	4606      	mov	r6, r0
 800bb36:	b118      	cbz	r0, 800bb40 <_vfiprintf_r+0x18>
 800bb38:	6a03      	ldr	r3, [r0, #32]
 800bb3a:	b90b      	cbnz	r3, 800bb40 <_vfiprintf_r+0x18>
 800bb3c:	f7fe f906 	bl	8009d4c <__sinit>
 800bb40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb42:	07d9      	lsls	r1, r3, #31
 800bb44:	d405      	bmi.n	800bb52 <_vfiprintf_r+0x2a>
 800bb46:	89ab      	ldrh	r3, [r5, #12]
 800bb48:	059a      	lsls	r2, r3, #22
 800bb4a:	d402      	bmi.n	800bb52 <_vfiprintf_r+0x2a>
 800bb4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb4e:	f7fe fa14 	bl	8009f7a <__retarget_lock_acquire_recursive>
 800bb52:	89ab      	ldrh	r3, [r5, #12]
 800bb54:	071b      	lsls	r3, r3, #28
 800bb56:	d501      	bpl.n	800bb5c <_vfiprintf_r+0x34>
 800bb58:	692b      	ldr	r3, [r5, #16]
 800bb5a:	b99b      	cbnz	r3, 800bb84 <_vfiprintf_r+0x5c>
 800bb5c:	4629      	mov	r1, r5
 800bb5e:	4630      	mov	r0, r6
 800bb60:	f000 f938 	bl	800bdd4 <__swsetup_r>
 800bb64:	b170      	cbz	r0, 800bb84 <_vfiprintf_r+0x5c>
 800bb66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb68:	07dc      	lsls	r4, r3, #31
 800bb6a:	d504      	bpl.n	800bb76 <_vfiprintf_r+0x4e>
 800bb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb70:	b01d      	add	sp, #116	@ 0x74
 800bb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb76:	89ab      	ldrh	r3, [r5, #12]
 800bb78:	0598      	lsls	r0, r3, #22
 800bb7a:	d4f7      	bmi.n	800bb6c <_vfiprintf_r+0x44>
 800bb7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb7e:	f7fe f9fd 	bl	8009f7c <__retarget_lock_release_recursive>
 800bb82:	e7f3      	b.n	800bb6c <_vfiprintf_r+0x44>
 800bb84:	2300      	movs	r3, #0
 800bb86:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb88:	2320      	movs	r3, #32
 800bb8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb92:	2330      	movs	r3, #48	@ 0x30
 800bb94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd44 <_vfiprintf_r+0x21c>
 800bb98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb9c:	f04f 0901 	mov.w	r9, #1
 800bba0:	4623      	mov	r3, r4
 800bba2:	469a      	mov	sl, r3
 800bba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bba8:	b10a      	cbz	r2, 800bbae <_vfiprintf_r+0x86>
 800bbaa:	2a25      	cmp	r2, #37	@ 0x25
 800bbac:	d1f9      	bne.n	800bba2 <_vfiprintf_r+0x7a>
 800bbae:	ebba 0b04 	subs.w	fp, sl, r4
 800bbb2:	d00b      	beq.n	800bbcc <_vfiprintf_r+0xa4>
 800bbb4:	465b      	mov	r3, fp
 800bbb6:	4622      	mov	r2, r4
 800bbb8:	4629      	mov	r1, r5
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f7ff ffa2 	bl	800bb04 <__sfputs_r>
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	f000 80a7 	beq.w	800bd14 <_vfiprintf_r+0x1ec>
 800bbc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbc8:	445a      	add	r2, fp
 800bbca:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbcc:	f89a 3000 	ldrb.w	r3, [sl]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f000 809f 	beq.w	800bd14 <_vfiprintf_r+0x1ec>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbe0:	f10a 0a01 	add.w	sl, sl, #1
 800bbe4:	9304      	str	r3, [sp, #16]
 800bbe6:	9307      	str	r3, [sp, #28]
 800bbe8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbec:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbee:	4654      	mov	r4, sl
 800bbf0:	2205      	movs	r2, #5
 800bbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf6:	4853      	ldr	r0, [pc, #332]	@ (800bd44 <_vfiprintf_r+0x21c>)
 800bbf8:	f7f4 faf2 	bl	80001e0 <memchr>
 800bbfc:	9a04      	ldr	r2, [sp, #16]
 800bbfe:	b9d8      	cbnz	r0, 800bc38 <_vfiprintf_r+0x110>
 800bc00:	06d1      	lsls	r1, r2, #27
 800bc02:	bf44      	itt	mi
 800bc04:	2320      	movmi	r3, #32
 800bc06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc0a:	0713      	lsls	r3, r2, #28
 800bc0c:	bf44      	itt	mi
 800bc0e:	232b      	movmi	r3, #43	@ 0x2b
 800bc10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc14:	f89a 3000 	ldrb.w	r3, [sl]
 800bc18:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc1a:	d015      	beq.n	800bc48 <_vfiprintf_r+0x120>
 800bc1c:	9a07      	ldr	r2, [sp, #28]
 800bc1e:	4654      	mov	r4, sl
 800bc20:	2000      	movs	r0, #0
 800bc22:	f04f 0c0a 	mov.w	ip, #10
 800bc26:	4621      	mov	r1, r4
 800bc28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc2c:	3b30      	subs	r3, #48	@ 0x30
 800bc2e:	2b09      	cmp	r3, #9
 800bc30:	d94b      	bls.n	800bcca <_vfiprintf_r+0x1a2>
 800bc32:	b1b0      	cbz	r0, 800bc62 <_vfiprintf_r+0x13a>
 800bc34:	9207      	str	r2, [sp, #28]
 800bc36:	e014      	b.n	800bc62 <_vfiprintf_r+0x13a>
 800bc38:	eba0 0308 	sub.w	r3, r0, r8
 800bc3c:	fa09 f303 	lsl.w	r3, r9, r3
 800bc40:	4313      	orrs	r3, r2
 800bc42:	9304      	str	r3, [sp, #16]
 800bc44:	46a2      	mov	sl, r4
 800bc46:	e7d2      	b.n	800bbee <_vfiprintf_r+0xc6>
 800bc48:	9b03      	ldr	r3, [sp, #12]
 800bc4a:	1d19      	adds	r1, r3, #4
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	9103      	str	r1, [sp, #12]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	bfbb      	ittet	lt
 800bc54:	425b      	neglt	r3, r3
 800bc56:	f042 0202 	orrlt.w	r2, r2, #2
 800bc5a:	9307      	strge	r3, [sp, #28]
 800bc5c:	9307      	strlt	r3, [sp, #28]
 800bc5e:	bfb8      	it	lt
 800bc60:	9204      	strlt	r2, [sp, #16]
 800bc62:	7823      	ldrb	r3, [r4, #0]
 800bc64:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc66:	d10a      	bne.n	800bc7e <_vfiprintf_r+0x156>
 800bc68:	7863      	ldrb	r3, [r4, #1]
 800bc6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc6c:	d132      	bne.n	800bcd4 <_vfiprintf_r+0x1ac>
 800bc6e:	9b03      	ldr	r3, [sp, #12]
 800bc70:	1d1a      	adds	r2, r3, #4
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	9203      	str	r2, [sp, #12]
 800bc76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc7a:	3402      	adds	r4, #2
 800bc7c:	9305      	str	r3, [sp, #20]
 800bc7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd54 <_vfiprintf_r+0x22c>
 800bc82:	7821      	ldrb	r1, [r4, #0]
 800bc84:	2203      	movs	r2, #3
 800bc86:	4650      	mov	r0, sl
 800bc88:	f7f4 faaa 	bl	80001e0 <memchr>
 800bc8c:	b138      	cbz	r0, 800bc9e <_vfiprintf_r+0x176>
 800bc8e:	9b04      	ldr	r3, [sp, #16]
 800bc90:	eba0 000a 	sub.w	r0, r0, sl
 800bc94:	2240      	movs	r2, #64	@ 0x40
 800bc96:	4082      	lsls	r2, r0
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	3401      	adds	r4, #1
 800bc9c:	9304      	str	r3, [sp, #16]
 800bc9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bca2:	4829      	ldr	r0, [pc, #164]	@ (800bd48 <_vfiprintf_r+0x220>)
 800bca4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bca8:	2206      	movs	r2, #6
 800bcaa:	f7f4 fa99 	bl	80001e0 <memchr>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d03f      	beq.n	800bd32 <_vfiprintf_r+0x20a>
 800bcb2:	4b26      	ldr	r3, [pc, #152]	@ (800bd4c <_vfiprintf_r+0x224>)
 800bcb4:	bb1b      	cbnz	r3, 800bcfe <_vfiprintf_r+0x1d6>
 800bcb6:	9b03      	ldr	r3, [sp, #12]
 800bcb8:	3307      	adds	r3, #7
 800bcba:	f023 0307 	bic.w	r3, r3, #7
 800bcbe:	3308      	adds	r3, #8
 800bcc0:	9303      	str	r3, [sp, #12]
 800bcc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc4:	443b      	add	r3, r7
 800bcc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcc8:	e76a      	b.n	800bba0 <_vfiprintf_r+0x78>
 800bcca:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcce:	460c      	mov	r4, r1
 800bcd0:	2001      	movs	r0, #1
 800bcd2:	e7a8      	b.n	800bc26 <_vfiprintf_r+0xfe>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	3401      	adds	r4, #1
 800bcd8:	9305      	str	r3, [sp, #20]
 800bcda:	4619      	mov	r1, r3
 800bcdc:	f04f 0c0a 	mov.w	ip, #10
 800bce0:	4620      	mov	r0, r4
 800bce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bce6:	3a30      	subs	r2, #48	@ 0x30
 800bce8:	2a09      	cmp	r2, #9
 800bcea:	d903      	bls.n	800bcf4 <_vfiprintf_r+0x1cc>
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d0c6      	beq.n	800bc7e <_vfiprintf_r+0x156>
 800bcf0:	9105      	str	r1, [sp, #20]
 800bcf2:	e7c4      	b.n	800bc7e <_vfiprintf_r+0x156>
 800bcf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e7f0      	b.n	800bce0 <_vfiprintf_r+0x1b8>
 800bcfe:	ab03      	add	r3, sp, #12
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	462a      	mov	r2, r5
 800bd04:	4b12      	ldr	r3, [pc, #72]	@ (800bd50 <_vfiprintf_r+0x228>)
 800bd06:	a904      	add	r1, sp, #16
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f7fd fbdb 	bl	80094c4 <_printf_float>
 800bd0e:	4607      	mov	r7, r0
 800bd10:	1c78      	adds	r0, r7, #1
 800bd12:	d1d6      	bne.n	800bcc2 <_vfiprintf_r+0x19a>
 800bd14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd16:	07d9      	lsls	r1, r3, #31
 800bd18:	d405      	bmi.n	800bd26 <_vfiprintf_r+0x1fe>
 800bd1a:	89ab      	ldrh	r3, [r5, #12]
 800bd1c:	059a      	lsls	r2, r3, #22
 800bd1e:	d402      	bmi.n	800bd26 <_vfiprintf_r+0x1fe>
 800bd20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd22:	f7fe f92b 	bl	8009f7c <__retarget_lock_release_recursive>
 800bd26:	89ab      	ldrh	r3, [r5, #12]
 800bd28:	065b      	lsls	r3, r3, #25
 800bd2a:	f53f af1f 	bmi.w	800bb6c <_vfiprintf_r+0x44>
 800bd2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd30:	e71e      	b.n	800bb70 <_vfiprintf_r+0x48>
 800bd32:	ab03      	add	r3, sp, #12
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	462a      	mov	r2, r5
 800bd38:	4b05      	ldr	r3, [pc, #20]	@ (800bd50 <_vfiprintf_r+0x228>)
 800bd3a:	a904      	add	r1, sp, #16
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f7fd fe59 	bl	80099f4 <_printf_i>
 800bd42:	e7e4      	b.n	800bd0e <_vfiprintf_r+0x1e6>
 800bd44:	0800c320 	.word	0x0800c320
 800bd48:	0800c32a 	.word	0x0800c32a
 800bd4c:	080094c5 	.word	0x080094c5
 800bd50:	0800bb05 	.word	0x0800bb05
 800bd54:	0800c326 	.word	0x0800c326

0800bd58 <__swbuf_r>:
 800bd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5a:	460e      	mov	r6, r1
 800bd5c:	4614      	mov	r4, r2
 800bd5e:	4605      	mov	r5, r0
 800bd60:	b118      	cbz	r0, 800bd6a <__swbuf_r+0x12>
 800bd62:	6a03      	ldr	r3, [r0, #32]
 800bd64:	b90b      	cbnz	r3, 800bd6a <__swbuf_r+0x12>
 800bd66:	f7fd fff1 	bl	8009d4c <__sinit>
 800bd6a:	69a3      	ldr	r3, [r4, #24]
 800bd6c:	60a3      	str	r3, [r4, #8]
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	071a      	lsls	r2, r3, #28
 800bd72:	d501      	bpl.n	800bd78 <__swbuf_r+0x20>
 800bd74:	6923      	ldr	r3, [r4, #16]
 800bd76:	b943      	cbnz	r3, 800bd8a <__swbuf_r+0x32>
 800bd78:	4621      	mov	r1, r4
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f000 f82a 	bl	800bdd4 <__swsetup_r>
 800bd80:	b118      	cbz	r0, 800bd8a <__swbuf_r+0x32>
 800bd82:	f04f 37ff 	mov.w	r7, #4294967295
 800bd86:	4638      	mov	r0, r7
 800bd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	6922      	ldr	r2, [r4, #16]
 800bd8e:	1a98      	subs	r0, r3, r2
 800bd90:	6963      	ldr	r3, [r4, #20]
 800bd92:	b2f6      	uxtb	r6, r6
 800bd94:	4283      	cmp	r3, r0
 800bd96:	4637      	mov	r7, r6
 800bd98:	dc05      	bgt.n	800bda6 <__swbuf_r+0x4e>
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	f7ff fd99 	bl	800b8d4 <_fflush_r>
 800bda2:	2800      	cmp	r0, #0
 800bda4:	d1ed      	bne.n	800bd82 <__swbuf_r+0x2a>
 800bda6:	68a3      	ldr	r3, [r4, #8]
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	60a3      	str	r3, [r4, #8]
 800bdac:	6823      	ldr	r3, [r4, #0]
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	6022      	str	r2, [r4, #0]
 800bdb2:	701e      	strb	r6, [r3, #0]
 800bdb4:	6962      	ldr	r2, [r4, #20]
 800bdb6:	1c43      	adds	r3, r0, #1
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d004      	beq.n	800bdc6 <__swbuf_r+0x6e>
 800bdbc:	89a3      	ldrh	r3, [r4, #12]
 800bdbe:	07db      	lsls	r3, r3, #31
 800bdc0:	d5e1      	bpl.n	800bd86 <__swbuf_r+0x2e>
 800bdc2:	2e0a      	cmp	r6, #10
 800bdc4:	d1df      	bne.n	800bd86 <__swbuf_r+0x2e>
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	4628      	mov	r0, r5
 800bdca:	f7ff fd83 	bl	800b8d4 <_fflush_r>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d0d9      	beq.n	800bd86 <__swbuf_r+0x2e>
 800bdd2:	e7d6      	b.n	800bd82 <__swbuf_r+0x2a>

0800bdd4 <__swsetup_r>:
 800bdd4:	b538      	push	{r3, r4, r5, lr}
 800bdd6:	4b29      	ldr	r3, [pc, #164]	@ (800be7c <__swsetup_r+0xa8>)
 800bdd8:	4605      	mov	r5, r0
 800bdda:	6818      	ldr	r0, [r3, #0]
 800bddc:	460c      	mov	r4, r1
 800bdde:	b118      	cbz	r0, 800bde8 <__swsetup_r+0x14>
 800bde0:	6a03      	ldr	r3, [r0, #32]
 800bde2:	b90b      	cbnz	r3, 800bde8 <__swsetup_r+0x14>
 800bde4:	f7fd ffb2 	bl	8009d4c <__sinit>
 800bde8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdec:	0719      	lsls	r1, r3, #28
 800bdee:	d422      	bmi.n	800be36 <__swsetup_r+0x62>
 800bdf0:	06da      	lsls	r2, r3, #27
 800bdf2:	d407      	bmi.n	800be04 <__swsetup_r+0x30>
 800bdf4:	2209      	movs	r2, #9
 800bdf6:	602a      	str	r2, [r5, #0]
 800bdf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdfc:	81a3      	strh	r3, [r4, #12]
 800bdfe:	f04f 30ff 	mov.w	r0, #4294967295
 800be02:	e033      	b.n	800be6c <__swsetup_r+0x98>
 800be04:	0758      	lsls	r0, r3, #29
 800be06:	d512      	bpl.n	800be2e <__swsetup_r+0x5a>
 800be08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be0a:	b141      	cbz	r1, 800be1e <__swsetup_r+0x4a>
 800be0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be10:	4299      	cmp	r1, r3
 800be12:	d002      	beq.n	800be1a <__swsetup_r+0x46>
 800be14:	4628      	mov	r0, r5
 800be16:	f7fe feff 	bl	800ac18 <_free_r>
 800be1a:	2300      	movs	r3, #0
 800be1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800be24:	81a3      	strh	r3, [r4, #12]
 800be26:	2300      	movs	r3, #0
 800be28:	6063      	str	r3, [r4, #4]
 800be2a:	6923      	ldr	r3, [r4, #16]
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	89a3      	ldrh	r3, [r4, #12]
 800be30:	f043 0308 	orr.w	r3, r3, #8
 800be34:	81a3      	strh	r3, [r4, #12]
 800be36:	6923      	ldr	r3, [r4, #16]
 800be38:	b94b      	cbnz	r3, 800be4e <__swsetup_r+0x7a>
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be44:	d003      	beq.n	800be4e <__swsetup_r+0x7a>
 800be46:	4621      	mov	r1, r4
 800be48:	4628      	mov	r0, r5
 800be4a:	f000 f883 	bl	800bf54 <__smakebuf_r>
 800be4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be52:	f013 0201 	ands.w	r2, r3, #1
 800be56:	d00a      	beq.n	800be6e <__swsetup_r+0x9a>
 800be58:	2200      	movs	r2, #0
 800be5a:	60a2      	str	r2, [r4, #8]
 800be5c:	6962      	ldr	r2, [r4, #20]
 800be5e:	4252      	negs	r2, r2
 800be60:	61a2      	str	r2, [r4, #24]
 800be62:	6922      	ldr	r2, [r4, #16]
 800be64:	b942      	cbnz	r2, 800be78 <__swsetup_r+0xa4>
 800be66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be6a:	d1c5      	bne.n	800bdf8 <__swsetup_r+0x24>
 800be6c:	bd38      	pop	{r3, r4, r5, pc}
 800be6e:	0799      	lsls	r1, r3, #30
 800be70:	bf58      	it	pl
 800be72:	6962      	ldrpl	r2, [r4, #20]
 800be74:	60a2      	str	r2, [r4, #8]
 800be76:	e7f4      	b.n	800be62 <__swsetup_r+0x8e>
 800be78:	2000      	movs	r0, #0
 800be7a:	e7f7      	b.n	800be6c <__swsetup_r+0x98>
 800be7c:	20000018 	.word	0x20000018

0800be80 <_raise_r>:
 800be80:	291f      	cmp	r1, #31
 800be82:	b538      	push	{r3, r4, r5, lr}
 800be84:	4605      	mov	r5, r0
 800be86:	460c      	mov	r4, r1
 800be88:	d904      	bls.n	800be94 <_raise_r+0x14>
 800be8a:	2316      	movs	r3, #22
 800be8c:	6003      	str	r3, [r0, #0]
 800be8e:	f04f 30ff 	mov.w	r0, #4294967295
 800be92:	bd38      	pop	{r3, r4, r5, pc}
 800be94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be96:	b112      	cbz	r2, 800be9e <_raise_r+0x1e>
 800be98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be9c:	b94b      	cbnz	r3, 800beb2 <_raise_r+0x32>
 800be9e:	4628      	mov	r0, r5
 800bea0:	f000 f830 	bl	800bf04 <_getpid_r>
 800bea4:	4622      	mov	r2, r4
 800bea6:	4601      	mov	r1, r0
 800bea8:	4628      	mov	r0, r5
 800beaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beae:	f000 b817 	b.w	800bee0 <_kill_r>
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d00a      	beq.n	800becc <_raise_r+0x4c>
 800beb6:	1c59      	adds	r1, r3, #1
 800beb8:	d103      	bne.n	800bec2 <_raise_r+0x42>
 800beba:	2316      	movs	r3, #22
 800bebc:	6003      	str	r3, [r0, #0]
 800bebe:	2001      	movs	r0, #1
 800bec0:	e7e7      	b.n	800be92 <_raise_r+0x12>
 800bec2:	2100      	movs	r1, #0
 800bec4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bec8:	4620      	mov	r0, r4
 800beca:	4798      	blx	r3
 800becc:	2000      	movs	r0, #0
 800bece:	e7e0      	b.n	800be92 <_raise_r+0x12>

0800bed0 <raise>:
 800bed0:	4b02      	ldr	r3, [pc, #8]	@ (800bedc <raise+0xc>)
 800bed2:	4601      	mov	r1, r0
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	f7ff bfd3 	b.w	800be80 <_raise_r>
 800beda:	bf00      	nop
 800bedc:	20000018 	.word	0x20000018

0800bee0 <_kill_r>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	4d07      	ldr	r5, [pc, #28]	@ (800bf00 <_kill_r+0x20>)
 800bee4:	2300      	movs	r3, #0
 800bee6:	4604      	mov	r4, r0
 800bee8:	4608      	mov	r0, r1
 800beea:	4611      	mov	r1, r2
 800beec:	602b      	str	r3, [r5, #0]
 800beee:	f7f6 fa2d 	bl	800234c <_kill>
 800bef2:	1c43      	adds	r3, r0, #1
 800bef4:	d102      	bne.n	800befc <_kill_r+0x1c>
 800bef6:	682b      	ldr	r3, [r5, #0]
 800bef8:	b103      	cbz	r3, 800befc <_kill_r+0x1c>
 800befa:	6023      	str	r3, [r4, #0]
 800befc:	bd38      	pop	{r3, r4, r5, pc}
 800befe:	bf00      	nop
 800bf00:	200008b4 	.word	0x200008b4

0800bf04 <_getpid_r>:
 800bf04:	f7f6 ba1a 	b.w	800233c <_getpid>

0800bf08 <__swhatbuf_r>:
 800bf08:	b570      	push	{r4, r5, r6, lr}
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf10:	2900      	cmp	r1, #0
 800bf12:	b096      	sub	sp, #88	@ 0x58
 800bf14:	4615      	mov	r5, r2
 800bf16:	461e      	mov	r6, r3
 800bf18:	da0d      	bge.n	800bf36 <__swhatbuf_r+0x2e>
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf20:	f04f 0100 	mov.w	r1, #0
 800bf24:	bf14      	ite	ne
 800bf26:	2340      	movne	r3, #64	@ 0x40
 800bf28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	6031      	str	r1, [r6, #0]
 800bf30:	602b      	str	r3, [r5, #0]
 800bf32:	b016      	add	sp, #88	@ 0x58
 800bf34:	bd70      	pop	{r4, r5, r6, pc}
 800bf36:	466a      	mov	r2, sp
 800bf38:	f000 f848 	bl	800bfcc <_fstat_r>
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	dbec      	blt.n	800bf1a <__swhatbuf_r+0x12>
 800bf40:	9901      	ldr	r1, [sp, #4]
 800bf42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf4a:	4259      	negs	r1, r3
 800bf4c:	4159      	adcs	r1, r3
 800bf4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf52:	e7eb      	b.n	800bf2c <__swhatbuf_r+0x24>

0800bf54 <__smakebuf_r>:
 800bf54:	898b      	ldrh	r3, [r1, #12]
 800bf56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf58:	079d      	lsls	r5, r3, #30
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	460c      	mov	r4, r1
 800bf5e:	d507      	bpl.n	800bf70 <__smakebuf_r+0x1c>
 800bf60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf64:	6023      	str	r3, [r4, #0]
 800bf66:	6123      	str	r3, [r4, #16]
 800bf68:	2301      	movs	r3, #1
 800bf6a:	6163      	str	r3, [r4, #20]
 800bf6c:	b003      	add	sp, #12
 800bf6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf70:	ab01      	add	r3, sp, #4
 800bf72:	466a      	mov	r2, sp
 800bf74:	f7ff ffc8 	bl	800bf08 <__swhatbuf_r>
 800bf78:	9f00      	ldr	r7, [sp, #0]
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	4639      	mov	r1, r7
 800bf7e:	4630      	mov	r0, r6
 800bf80:	f7fe febe 	bl	800ad00 <_malloc_r>
 800bf84:	b948      	cbnz	r0, 800bf9a <__smakebuf_r+0x46>
 800bf86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf8a:	059a      	lsls	r2, r3, #22
 800bf8c:	d4ee      	bmi.n	800bf6c <__smakebuf_r+0x18>
 800bf8e:	f023 0303 	bic.w	r3, r3, #3
 800bf92:	f043 0302 	orr.w	r3, r3, #2
 800bf96:	81a3      	strh	r3, [r4, #12]
 800bf98:	e7e2      	b.n	800bf60 <__smakebuf_r+0xc>
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	6020      	str	r0, [r4, #0]
 800bf9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfa2:	81a3      	strh	r3, [r4, #12]
 800bfa4:	9b01      	ldr	r3, [sp, #4]
 800bfa6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bfaa:	b15b      	cbz	r3, 800bfc4 <__smakebuf_r+0x70>
 800bfac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	f000 f81d 	bl	800bff0 <_isatty_r>
 800bfb6:	b128      	cbz	r0, 800bfc4 <__smakebuf_r+0x70>
 800bfb8:	89a3      	ldrh	r3, [r4, #12]
 800bfba:	f023 0303 	bic.w	r3, r3, #3
 800bfbe:	f043 0301 	orr.w	r3, r3, #1
 800bfc2:	81a3      	strh	r3, [r4, #12]
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	431d      	orrs	r5, r3
 800bfc8:	81a5      	strh	r5, [r4, #12]
 800bfca:	e7cf      	b.n	800bf6c <__smakebuf_r+0x18>

0800bfcc <_fstat_r>:
 800bfcc:	b538      	push	{r3, r4, r5, lr}
 800bfce:	4d07      	ldr	r5, [pc, #28]	@ (800bfec <_fstat_r+0x20>)
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	4604      	mov	r4, r0
 800bfd4:	4608      	mov	r0, r1
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	602b      	str	r3, [r5, #0]
 800bfda:	f7f6 fa17 	bl	800240c <_fstat>
 800bfde:	1c43      	adds	r3, r0, #1
 800bfe0:	d102      	bne.n	800bfe8 <_fstat_r+0x1c>
 800bfe2:	682b      	ldr	r3, [r5, #0]
 800bfe4:	b103      	cbz	r3, 800bfe8 <_fstat_r+0x1c>
 800bfe6:	6023      	str	r3, [r4, #0]
 800bfe8:	bd38      	pop	{r3, r4, r5, pc}
 800bfea:	bf00      	nop
 800bfec:	200008b4 	.word	0x200008b4

0800bff0 <_isatty_r>:
 800bff0:	b538      	push	{r3, r4, r5, lr}
 800bff2:	4d06      	ldr	r5, [pc, #24]	@ (800c00c <_isatty_r+0x1c>)
 800bff4:	2300      	movs	r3, #0
 800bff6:	4604      	mov	r4, r0
 800bff8:	4608      	mov	r0, r1
 800bffa:	602b      	str	r3, [r5, #0]
 800bffc:	f7f6 fa16 	bl	800242c <_isatty>
 800c000:	1c43      	adds	r3, r0, #1
 800c002:	d102      	bne.n	800c00a <_isatty_r+0x1a>
 800c004:	682b      	ldr	r3, [r5, #0]
 800c006:	b103      	cbz	r3, 800c00a <_isatty_r+0x1a>
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	bd38      	pop	{r3, r4, r5, pc}
 800c00c:	200008b4 	.word	0x200008b4

0800c010 <_init>:
 800c010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c012:	bf00      	nop
 800c014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c016:	bc08      	pop	{r3}
 800c018:	469e      	mov	lr, r3
 800c01a:	4770      	bx	lr

0800c01c <_fini>:
 800c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01e:	bf00      	nop
 800c020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c022:	bc08      	pop	{r3}
 800c024:	469e      	mov	lr, r3
 800c026:	4770      	bx	lr
