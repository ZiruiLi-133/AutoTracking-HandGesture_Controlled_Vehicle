
motor_driver_144.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800f248  0800f248  00010248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6d0  0800f6d0  000111d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6d0  0800f6d0  000106d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6d8  0800f6d8  000111d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6d8  0800f6d8  000106d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f6dc  0800f6dc  000106dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800f6e0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111d4  2**0
                  CONTENTS
 10 .bss          0000099c  200001d4  200001d4  000111d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b70  20000b70  000111d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ce3  00000000  00000000  00011204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cf6  00000000  00000000  00026ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  00029be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e1c  00000000  00000000  0002ae08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023496  00000000  00000000  0002bc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016fe3  00000000  00000000  0004f0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6229  00000000  00000000  0006609d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c2c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060f0  00000000  00000000  0013c30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  001423fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f22c 	.word	0x0800f22c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800f22c 	.word	0x0800f22c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000
 8000d04:	00000000 	.word	0x00000000

08000d08 <compute_ideal_speed>:
#include "drive_model.h"
#include "chassis_param.h"

void compute_ideal_speed(volatile float v, volatile float w,
		volatile float *lb_speed, volatile float *rb_speed,
		volatile float *lf_speed, volatile float *rf_speed) {
 8000d08:	b5b0      	push	{r4, r5, r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000d12:	edc7 0a04 	vstr	s1, [r7, #16]
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	603b      	str	r3, [r7, #0]
	*lb_speed = v - w * CHASSIS_WIDTH / 2.0;
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc19 	bl	8000558 <__aeabi_f2d>
 8000d26:	4604      	mov	r4, r0
 8000d28:	460d      	mov	r5, r1
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fc13 	bl	8000558 <__aeabi_f2d>
 8000d32:	a329      	add	r3, pc, #164	@ (adr r3, 8000dd8 <compute_ideal_speed+0xd0>)
 8000d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d38:	f7ff fc66 	bl	8000608 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4610      	mov	r0, r2
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d4c:	f7ff fd86 	bl	800085c <__aeabi_ddiv>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4620      	mov	r0, r4
 8000d56:	4629      	mov	r1, r5
 8000d58:	f7ff fa9e 	bl	8000298 <__aeabi_dsub>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4610      	mov	r0, r2
 8000d62:	4619      	mov	r1, r3
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2f>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	601a      	str	r2, [r3, #0]
	*rb_speed = v + w * CHASSIS_WIDTH / 2.0;
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fbf1 	bl	8000558 <__aeabi_f2d>
 8000d76:	4604      	mov	r4, r0
 8000d78:	460d      	mov	r5, r1
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fbeb 	bl	8000558 <__aeabi_f2d>
 8000d82:	a315      	add	r3, pc, #84	@ (adr r3, 8000dd8 <compute_ideal_speed+0xd0>)
 8000d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d88:	f7ff fc3e 	bl	8000608 <__aeabi_dmul>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4610      	mov	r0, r2
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d9c:	f7ff fd5e 	bl	800085c <__aeabi_ddiv>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4620      	mov	r0, r4
 8000da6:	4629      	mov	r1, r5
 8000da8:	f7ff fa78 	bl	800029c <__adddf3>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	4610      	mov	r0, r2
 8000db2:	4619      	mov	r1, r3
 8000db4:	f7ff ff20 	bl	8000bf8 <__aeabi_d2f>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	601a      	str	r2, [r3, #0]
	*lf_speed = *lb_speed;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	601a      	str	r2, [r3, #0]
	*rf_speed = *rb_speed;
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	601a      	str	r2, [r3, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	ed916873 	.word	0xed916873
 8000ddc:	3fd53f7c 	.word	0x3fd53f7c

08000de0 <lb_forward>:
 */
#include "h_bridge_control.h"
#include "main.h"

//LB
void lb_forward(void){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <lb_forward+0x20>)
 8000dec:	f002 fc9e 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000df6:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <lb_forward+0x20>)
 8000df8:	f002 fc98 	bl	800372c <HAL_GPIO_WritePin>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	48001400 	.word	0x48001400

08000e04 <lb_backward>:

void lb_backward(void){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <lb_backward+0x20>)
 8000e10:	f002 fc8c 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e1a:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <lb_backward+0x20>)
 8000e1c:	f002 fc86 	bl	800372c <HAL_GPIO_WritePin>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	48001400 	.word	0x48001400

08000e28 <lb_stop>:

void lb_stop(void){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <lb_stop+0x20>)
 8000e34:	f002 fc7a 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e3e:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <lb_stop+0x20>)
 8000e40:	f002 fc74 	bl	800372c <HAL_GPIO_WritePin>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	48001400 	.word	0x48001400

08000e4c <rb_forward>:

//RB
void rb_forward(void){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2110      	movs	r1, #16
 8000e54:	4804      	ldr	r0, [pc, #16]	@ (8000e68 <rb_forward+0x1c>)
 8000e56:	f002 fc69 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2120      	movs	r1, #32
 8000e5e:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <rb_forward+0x1c>)
 8000e60:	f002 fc64 	bl	800372c <HAL_GPIO_WritePin>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	48001000 	.word	0x48001000

08000e6c <rb_backward>:

void rb_backward(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	2110      	movs	r1, #16
 8000e74:	4804      	ldr	r0, [pc, #16]	@ (8000e88 <rb_backward+0x1c>)
 8000e76:	f002 fc59 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <rb_backward+0x1c>)
 8000e80:	f002 fc54 	bl	800372c <HAL_GPIO_WritePin>
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	48001000 	.word	0x48001000

08000e8c <rb_stop>:

void rb_stop(void){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2110      	movs	r1, #16
 8000e94:	4804      	ldr	r0, [pc, #16]	@ (8000ea8 <rb_stop+0x1c>)
 8000e96:	f002 fc49 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <rb_stop+0x1c>)
 8000ea0:	f002 fc44 	bl	800372c <HAL_GPIO_WritePin>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	48001000 	.word	0x48001000

08000eac <lf_forward>:

//LF
void lf_forward(void){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <lf_forward+0x20>)
 8000eb8:	f002 fc38 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ec2:	4802      	ldr	r0, [pc, #8]	@ (8000ecc <lf_forward+0x20>)
 8000ec4:	f002 fc32 	bl	800372c <HAL_GPIO_WritePin>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	48000800 	.word	0x48000800

08000ed0 <lf_backward>:

void lf_backward(void){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eda:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <lf_backward+0x20>)
 8000edc:	f002 fc26 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ee6:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <lf_backward+0x20>)
 8000ee8:	f002 fc20 	bl	800372c <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	48000800 	.word	0x48000800

08000ef4 <lf_stop>:

void lf_stop(void){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000efe:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <lf_stop+0x20>)
 8000f00:	f002 fc14 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f0a:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <lf_stop+0x20>)
 8000f0c:	f002 fc0e 	bl	800372c <HAL_GPIO_WritePin>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	48000800 	.word	0x48000800

08000f18 <rf_forward>:

//RF
void rf_forward(void){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2104      	movs	r1, #4
 8000f20:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <rf_forward+0x1c>)
 8000f22:	f002 fc03 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2108      	movs	r1, #8
 8000f2a:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <rf_forward+0x1c>)
 8000f2c:	f002 fbfe 	bl	800372c <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	48001800 	.word	0x48001800

08000f38 <rf_backward>:

void rf_backward(void){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2104      	movs	r1, #4
 8000f40:	4804      	ldr	r0, [pc, #16]	@ (8000f54 <rf_backward+0x1c>)
 8000f42:	f002 fbf3 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2108      	movs	r1, #8
 8000f4a:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <rf_backward+0x1c>)
 8000f4c:	f002 fbee 	bl	800372c <HAL_GPIO_WritePin>
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	48001800 	.word	0x48001800

08000f58 <rf_stop>:

void rf_stop(void){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2104      	movs	r1, #4
 8000f60:	4804      	ldr	r0, [pc, #16]	@ (8000f74 <rf_stop+0x1c>)
 8000f62:	f002 fbe3 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2108      	movs	r1, #8
 8000f6a:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <rf_stop+0x1c>)
 8000f6c:	f002 fbde 	bl	800372c <HAL_GPIO_WritePin>
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	48001800 	.word	0x48001800

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f002 f857 	bl	8003030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f8a7 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f86:	f000 fc29 	bl	80017dc <MX_GPIO_Init>
  MX_RTC_Init();
 8000f8a:	f000 f91b 	bl	80011c4 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000f8e:	f000 fbcf 	bl	8001730 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000f92:	f000 fbfd 	bl	8001790 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000f96:	f000 f93b 	bl	8001210 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f9a:	f000 f993 	bl	80012c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f9e:	f000 fa0b 	bl	80013b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fa2:	f000 fa5f 	bl	8001464 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000fa6:	f000 fab3 	bl	8001510 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000faa:	f000 fb0b 	bl	80015c4 <MX_TIM16_Init>
  MX_UART4_Init();
 8000fae:	f000 fb2f 	bl	8001610 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000fb2:	f000 fb5d 	bl	8001670 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fb6:	f000 fb8b 	bl	80016d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim16);
 8000fba:	4837      	ldr	r0, [pc, #220]	@ (8001098 <main+0x120>)
 8000fbc:	f005 fca2 	bl	8006904 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000fc0:	213c      	movs	r1, #60	@ 0x3c
 8000fc2:	4836      	ldr	r0, [pc, #216]	@ (800109c <main+0x124>)
 8000fc4:	f005 ff18 	bl	8006df8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000fc8:	213c      	movs	r1, #60	@ 0x3c
 8000fca:	4835      	ldr	r0, [pc, #212]	@ (80010a0 <main+0x128>)
 8000fcc:	f005 ff14 	bl	8006df8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000fd0:	213c      	movs	r1, #60	@ 0x3c
 8000fd2:	4834      	ldr	r0, [pc, #208]	@ (80010a4 <main+0x12c>)
 8000fd4:	f005 ff10 	bl	8006df8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000fd8:	213c      	movs	r1, #60	@ 0x3c
 8000fda:	4833      	ldr	r0, [pc, #204]	@ (80010a8 <main+0x130>)
 8000fdc:	f005 ff0c 	bl	8006df8 <HAL_TIM_Encoder_Start>
	HAL_UART_Receive_IT(&huart4, &rxChar, 1);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4932      	ldr	r1, [pc, #200]	@ (80010ac <main+0x134>)
 8000fe4:	4832      	ldr	r0, [pc, #200]	@ (80010b0 <main+0x138>)
 8000fe6:	f006 ff2a 	bl	8007e3e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1); // szj
 8000fea:	2201      	movs	r2, #1
 8000fec:	4931      	ldr	r1, [pc, #196]	@ (80010b4 <main+0x13c>)
 8000fee:	4832      	ldr	r0, [pc, #200]	@ (80010b8 <main+0x140>)
 8000ff0:	f006 ff25 	bl	8007e3e <HAL_UART_Receive_IT>
	char buffer_cmd[8];  // szj

	//start PWM
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
	set_direction(LB, BREAK);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fed0 	bl	8001da0 <set_direction>
	set_direction(RB, BREAK);
 8001000:	2301      	movs	r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f000 feca 	bl	8001da0 <set_direction>
	set_direction(LF, BREAK);
 800100c:	2302      	movs	r3, #2
 800100e:	2203      	movs	r2, #3
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fec4 	bl	8001da0 <set_direction>
	set_direction(RF, BREAK);
 8001018:	2303      	movs	r3, #3
 800101a:	2203      	movs	r2, #3
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f000 febe 	bl	8001da0 <set_direction>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001024:	4b25      	ldr	r3, [pc, #148]	@ (80010bc <main+0x144>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800102c:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <main+0x144>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2200      	movs	r2, #0
 8001032:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001034:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <main+0x144>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2200      	movs	r2, #0
 800103a:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800103c:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <main+0x144>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2200      	movs	r2, #0
 8001042:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001044:	2100      	movs	r1, #0
 8001046:	481d      	ldr	r0, [pc, #116]	@ (80010bc <main+0x144>)
 8001048:	f005 fd24 	bl	8006a94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800104c:	2104      	movs	r1, #4
 800104e:	481b      	ldr	r0, [pc, #108]	@ (80010bc <main+0x144>)
 8001050:	f005 fd20 	bl	8006a94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001054:	2108      	movs	r1, #8
 8001056:	4819      	ldr	r0, [pc, #100]	@ (80010bc <main+0x144>)
 8001058:	f005 fd1c 	bl	8006a94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800105c:	210c      	movs	r1, #12
 800105e:	4817      	ldr	r0, [pc, #92]	@ (80010bc <main+0x144>)
 8001060:	f005 fd18 	bl	8006a94 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	log_to_uart("Hello\n\r");
 8001064:	4816      	ldr	r0, [pc, #88]	@ (80010c0 <main+0x148>)
 8001066:	f001 fb5d 	bl	8002724 <log_to_uart>
	char str[30];
//	sprintf(str, "%d", HAL_RCC_GetPCLK1Freq());
//	log_to_uart(str);

	lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
 800106a:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <main+0x128>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001070:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <main+0x14c>)
 8001072:	6013      	str	r3, [r2, #0]
	rb_count_last = __HAL_TIM_GET_COUNTER(&htim4);
 8001074:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <main+0x12c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800107a:	4a13      	ldr	r2, [pc, #76]	@ (80010c8 <main+0x150>)
 800107c:	6013      	str	r3, [r2, #0]
	lf_count_last = __HAL_TIM_GET_COUNTER(&htim1);
 800107e:	4b07      	ldr	r3, [pc, #28]	@ (800109c <main+0x124>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001084:	4a11      	ldr	r2, [pc, #68]	@ (80010cc <main+0x154>)
 8001086:	6013      	str	r3, [r2, #0]
	rf_count_last = __HAL_TIM_GET_COUNTER(&htim8);
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <main+0x130>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108e:	4a10      	ldr	r2, [pc, #64]	@ (80010d0 <main+0x158>)
 8001090:	6013      	str	r3, [r2, #0]
//	v_desired = 0;
//	w_desired = 3.0;
//	reset_pid();


	while (1) {
 8001092:	bf00      	nop
 8001094:	e7fd      	b.n	8001092 <main+0x11a>
 8001096:	bf00      	nop
 8001098:	20000390 	.word	0x20000390
 800109c:	20000214 	.word	0x20000214
 80010a0:	200002ac 	.word	0x200002ac
 80010a4:	200002f8 	.word	0x200002f8
 80010a8:	20000344 	.word	0x20000344
 80010ac:	200001f0 	.word	0x200001f0
 80010b0:	200003dc 	.word	0x200003dc
 80010b4:	200008d0 	.word	0x200008d0
 80010b8:	20000464 	.word	0x20000464
 80010bc:	20000260 	.word	0x20000260
 80010c0:	0800f250 	.word	0x0800f250
 80010c4:	200009bc 	.word	0x200009bc
 80010c8:	200009c0 	.word	0x200009c0
 80010cc:	200009c4 	.word	0x200009c4
 80010d0:	200009c8 	.word	0x200009c8

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0a6      	sub	sp, #152	@ 0x98
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010de:	2228      	movs	r2, #40	@ 0x28
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00a fccb 	bl	800ba7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2258      	movs	r2, #88	@ 0x58
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00a fcbd 	bl	800ba7e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001104:	2309      	movs	r3, #9
 8001106:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001108:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800110c:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110e:	2301      	movs	r3, #1
 8001110:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001112:	2301      	movs	r3, #1
 8001114:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001118:	2302      	movs	r3, #2
 800111a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001126:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800112a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001138:	4618      	mov	r0, r3
 800113a:	f003 fdf3 	bl	8004d24 <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001144:	f001 fb04 	bl	8002750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114c:	2302      	movs	r3, #2
 800114e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001154:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001158:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800115e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001162:	2102      	movs	r1, #2
 8001164:	4618      	mov	r0, r3
 8001166:	f004 fe31 	bl	8005dcc <HAL_RCC_ClockConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001170:	f001 faee 	bl	8002750 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <SystemClock_Config+0xec>)
 8001176:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM16
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001188:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800118c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800118e:	2300      	movs	r3, #0
 8001190:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001192:	2300      	movs	r3, #0
 8001194:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001196:	2300      	movs	r3, #0
 8001198:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800119a:	2300      	movs	r3, #0
 800119c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800119e:	2300      	movs	r3, #0
 80011a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4618      	mov	r0, r3
 80011aa:	f005 f82f 	bl	800620c <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80011b4:	f001 facc 	bl	8002750 <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3798      	adds	r7, #152	@ 0x98
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	00b3300f 	.word	0x00b3300f

080011c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <MX_RTC_Init+0x44>)
 80011ca:	4a10      	ldr	r2, [pc, #64]	@ (800120c <MX_RTC_Init+0x48>)
 80011cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <MX_RTC_Init+0x44>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <MX_RTC_Init+0x44>)
 80011d6:	227f      	movs	r2, #127	@ 0x7f
 80011d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011da:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <MX_RTC_Init+0x44>)
 80011dc:	22ff      	movs	r2, #255	@ 0xff
 80011de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011e0:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <MX_RTC_Init+0x44>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011e6:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <MX_RTC_Init+0x44>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <MX_RTC_Init+0x44>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	@ (8001208 <MX_RTC_Init+0x44>)
 80011f4:	f005 fa28 	bl	8006648 <HAL_RTC_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80011fe:	f001 faa7 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001f4 	.word	0x200001f4
 800120c:	40002800 	.word	0x40002800

08001210 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	@ 0x30
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	2224      	movs	r2, #36	@ 0x24
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f00a fc2d 	bl	800ba7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	463b      	mov	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800122e:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <MX_TIM1_Init+0xac>)
 8001230:	4a23      	ldr	r2, [pc, #140]	@ (80012c0 <MX_TIM1_Init+0xb0>)
 8001232:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001234:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <MX_TIM1_Init+0xac>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <MX_TIM1_Init+0xac>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001240:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <MX_TIM1_Init+0xac>)
 8001242:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001246:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001248:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <MX_TIM1_Init+0xac>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800124e:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <MX_TIM1_Init+0xac>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <MX_TIM1_Init+0xac>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800125a:	2303      	movs	r3, #3
 800125c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001262:	2301      	movs	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001272:	2301      	movs	r3, #1
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4619      	mov	r1, r3
 8001284:	480d      	ldr	r0, [pc, #52]	@ (80012bc <MX_TIM1_Init+0xac>)
 8001286:	f005 fd11 	bl	8006cac <HAL_TIM_Encoder_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001290:	f001 fa5e 	bl	8002750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_TIM1_Init+0xac>)
 80012a6:	f006 fc49 	bl	8007b3c <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012b0:	f001 fa4e 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3730      	adds	r7, #48	@ 0x30
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000214 	.word	0x20000214
 80012c0:	40012c00 	.word	0x40012c00

080012c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	@ 0x28
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d6:	463b      	mov	r3, r7
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
 80012e4:	615a      	str	r2, [r3, #20]
 80012e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e8:	4b32      	ldr	r3, [pc, #200]	@ (80013b4 <MX_TIM2_Init+0xf0>)
 80012ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = APB1_FREQ / TIM2_FREQ - 1;
 80012f0:	4b30      	ldr	r3, [pc, #192]	@ (80013b4 <MX_TIM2_Init+0xf0>)
 80012f2:	2202      	movs	r2, #2
 80012f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <MX_TIM2_Init+0xf0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_FREQ / PWM_FREQ - 1;
 80012fc:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <MX_TIM2_Init+0xf0>)
 80012fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b2b      	ldr	r3, [pc, #172]	@ (80013b4 <MX_TIM2_Init+0xf0>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <MX_TIM2_Init+0xf0>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001310:	4828      	ldr	r0, [pc, #160]	@ (80013b4 <MX_TIM2_Init+0xf0>)
 8001312:	f005 fb67 	bl	80069e4 <HAL_TIM_PWM_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800131c:	f001 fa18 	bl	8002750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	4821      	ldr	r0, [pc, #132]	@ (80013b4 <MX_TIM2_Init+0xf0>)
 8001330:	f006 fc04 	bl	8007b3c <HAL_TIMEx_MasterConfigSynchronization>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800133a:	f001 fa09 	bl	8002750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133e:	2360      	movs	r3, #96	@ 0x60
 8001340:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	4619      	mov	r1, r3
 8001354:	4817      	ldr	r0, [pc, #92]	@ (80013b4 <MX_TIM2_Init+0xf0>)
 8001356:	f005 fedf 	bl	8007118 <HAL_TIM_PWM_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001360:	f001 f9f6 	bl	8002750 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	2204      	movs	r2, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4812      	ldr	r0, [pc, #72]	@ (80013b4 <MX_TIM2_Init+0xf0>)
 800136c:	f005 fed4 	bl	8007118 <HAL_TIM_PWM_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001376:	f001 f9eb 	bl	8002750 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800137a:	463b      	mov	r3, r7
 800137c:	2208      	movs	r2, #8
 800137e:	4619      	mov	r1, r3
 8001380:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <MX_TIM2_Init+0xf0>)
 8001382:	f005 fec9 	bl	8007118 <HAL_TIM_PWM_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800138c:	f001 f9e0 	bl	8002750 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	220c      	movs	r2, #12
 8001394:	4619      	mov	r1, r3
 8001396:	4807      	ldr	r0, [pc, #28]	@ (80013b4 <MX_TIM2_Init+0xf0>)
 8001398:	f005 febe 	bl	8007118 <HAL_TIM_PWM_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80013a2:	f001 f9d5 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013a6:	4803      	ldr	r0, [pc, #12]	@ (80013b4 <MX_TIM2_Init+0xf0>)
 80013a8:	f001 fb82 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	@ 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000260 	.word	0x20000260

080013b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	@ 0x30
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2224      	movs	r2, #36	@ 0x24
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00a fb59 	bl	800ba7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013d6:	4b21      	ldr	r3, [pc, #132]	@ (800145c <MX_TIM3_Init+0xa4>)
 80013d8:	4a21      	ldr	r2, [pc, #132]	@ (8001460 <MX_TIM3_Init+0xa8>)
 80013da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013dc:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <MX_TIM3_Init+0xa4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	@ (800145c <MX_TIM3_Init+0xa4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <MX_TIM3_Init+0xa4>)
 80013ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <MX_TIM3_Init+0xa4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <MX_TIM3_Init+0xa4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001404:	2301      	movs	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001414:	2301      	movs	r3, #1
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	480d      	ldr	r0, [pc, #52]	@ (800145c <MX_TIM3_Init+0xa4>)
 8001428:	f005 fc40 	bl	8006cac <HAL_TIM_Encoder_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001432:	f001 f98d 	bl	8002750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	@ (800145c <MX_TIM3_Init+0xa4>)
 8001444:	f006 fb7a 	bl	8007b3c <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800144e:	f001 f97f 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3730      	adds	r7, #48	@ 0x30
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200002ac 	.word	0x200002ac
 8001460:	40000400 	.word	0x40000400

08001464 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	@ 0x30
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2224      	movs	r2, #36	@ 0x24
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f00a fb03 	bl	800ba7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	463b      	mov	r3, r7
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <MX_TIM4_Init+0xa4>)
 8001484:	4a21      	ldr	r2, [pc, #132]	@ (800150c <MX_TIM4_Init+0xa8>)
 8001486:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <MX_TIM4_Init+0xa4>)
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <MX_TIM4_Init+0xa4>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001494:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <MX_TIM4_Init+0xa4>)
 8001496:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800149a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <MX_TIM4_Init+0xa4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <MX_TIM4_Init+0xa4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014a8:	2303      	movs	r3, #3
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014c0:	2301      	movs	r3, #1
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4619      	mov	r1, r3
 80014d2:	480d      	ldr	r0, [pc, #52]	@ (8001508 <MX_TIM4_Init+0xa4>)
 80014d4:	f005 fbea 	bl	8006cac <HAL_TIM_Encoder_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80014de:	f001 f937 	bl	8002750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014ea:	463b      	mov	r3, r7
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	@ (8001508 <MX_TIM4_Init+0xa4>)
 80014f0:	f006 fb24 	bl	8007b3c <HAL_TIMEx_MasterConfigSynchronization>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80014fa:	f001 f929 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3730      	adds	r7, #48	@ 0x30
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200002f8 	.word	0x200002f8
 800150c:	40000800 	.word	0x40000800

08001510 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	@ 0x30
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	2224      	movs	r2, #36	@ 0x24
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f00a faad 	bl	800ba7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	463b      	mov	r3, r7
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800152e:	4b23      	ldr	r3, [pc, #140]	@ (80015bc <MX_TIM8_Init+0xac>)
 8001530:	4a23      	ldr	r2, [pc, #140]	@ (80015c0 <MX_TIM8_Init+0xb0>)
 8001532:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001534:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <MX_TIM8_Init+0xac>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <MX_TIM8_Init+0xac>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001540:	4b1e      	ldr	r3, [pc, #120]	@ (80015bc <MX_TIM8_Init+0xac>)
 8001542:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001546:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001548:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <MX_TIM8_Init+0xac>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800154e:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <MX_TIM8_Init+0xac>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001554:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <MX_TIM8_Init+0xac>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800155a:	2303      	movs	r3, #3
 800155c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001562:	2301      	movs	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001572:	2301      	movs	r3, #1
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	4619      	mov	r1, r3
 8001584:	480d      	ldr	r0, [pc, #52]	@ (80015bc <MX_TIM8_Init+0xac>)
 8001586:	f005 fb91 	bl	8006cac <HAL_TIM_Encoder_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001590:	f001 f8de 	bl	8002750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015a0:	463b      	mov	r3, r7
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_TIM8_Init+0xac>)
 80015a6:	f006 fac9 	bl	8007b3c <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80015b0:	f001 f8ce 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	@ 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000344 	.word	0x20000344
 80015c0:	40013400 	.word	0x40013400

080015c4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_TIM16_Init+0x44>)
 80015ca:	4a10      	ldr	r2, [pc, #64]	@ (800160c <MX_TIM16_Init+0x48>)
 80015cc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = APB2_FREQ / TIM16_FREQ - 1;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <MX_TIM16_Init+0x44>)
 80015d0:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80015d4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <MX_TIM16_Init+0x44>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_FREQ / ENCODER_SAMPLE_FREQ -1;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <MX_TIM16_Init+0x44>)
 80015de:	22c7      	movs	r2, #199	@ 0xc7
 80015e0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <MX_TIM16_Init+0x44>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80015e8:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <MX_TIM16_Init+0x44>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <MX_TIM16_Init+0x44>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <MX_TIM16_Init+0x44>)
 80015f6:	f005 f92d 	bl	8006854 <HAL_TIM_Base_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001600:	f001 f8a6 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000390 	.word	0x20000390
 800160c:	40014400 	.word	0x40014400

08001610 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001614:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <MX_UART4_Init+0x58>)
 8001616:	4a15      	ldr	r2, [pc, #84]	@ (800166c <MX_UART4_Init+0x5c>)
 8001618:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800161a:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <MX_UART4_Init+0x58>)
 800161c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001620:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_UART4_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <MX_UART4_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <MX_UART4_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <MX_UART4_Init+0x58>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <MX_UART4_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_UART4_Init+0x58>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <MX_UART4_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <MX_UART4_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	@ (8001668 <MX_UART4_Init+0x58>)
 8001654:	f006 fb1c 	bl	8007c90 <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800165e:	f001 f877 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200003dc 	.word	0x200003dc
 800166c:	40004c00 	.word	0x40004c00

08001670 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 8001676:	4a15      	ldr	r2, [pc, #84]	@ (80016cc <MX_USART1_UART_Init+0x5c>)
 8001678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 80016b4:	f006 faec 	bl	8007c90 <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016be:	f001 f847 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000464 	.word	0x20000464
 80016cc:	40013800 	.word	0x40013800

080016d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d4:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016d6:	4a15      	ldr	r2, [pc, #84]	@ (800172c <MX_USART2_UART_Init+0x5c>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 8001714:	f006 fabc 	bl	8007c90 <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800171e:	f001 f817 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200004ec 	.word	0x200004ec
 800172c:	40004400 	.word	0x40004400

08001730 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001734:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001736:	4a15      	ldr	r2, [pc, #84]	@ (800178c <MX_USART3_UART_Init+0x5c>)
 8001738:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800173a:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 800173c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001740:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001742:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001748:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800174e:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001756:	220c      	movs	r2, #12
 8001758:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175a:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001760:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001766:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001772:	4805      	ldr	r0, [pc, #20]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001774:	f006 fa8c 	bl	8007c90 <HAL_UART_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800177e:	f000 ffe7 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000574 	.word	0x20000574
 800178c:	40004800 	.word	0x40004800

08001790 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001794:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <MX_USB_PCD_Init+0x44>)
 8001796:	4a10      	ldr	r2, [pc, #64]	@ (80017d8 <MX_USB_PCD_Init+0x48>)
 8001798:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <MX_USB_PCD_Init+0x44>)
 800179c:	2208      	movs	r2, #8
 800179e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <MX_USB_PCD_Init+0x44>)
 80017a2:	2202      	movs	r2, #2
 80017a4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <MX_USB_PCD_Init+0x44>)
 80017a8:	2202      	movs	r2, #2
 80017aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80017ac:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <MX_USB_PCD_Init+0x44>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <MX_USB_PCD_Init+0x44>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <MX_USB_PCD_Init+0x44>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	@ (80017d4 <MX_USB_PCD_Init+0x44>)
 80017c0:	f001 ffe6 	bl	8003790 <HAL_PCD_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80017ca:	f000 ffc1 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200005fc 	.word	0x200005fc
 80017d8:	40005c00 	.word	0x40005c00

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	@ 0x30
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f2:	4b6b      	ldr	r3, [pc, #428]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4a6a      	ldr	r2, [pc, #424]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 80017f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017fc:	6153      	str	r3, [r2, #20]
 80017fe:	4b68      	ldr	r3, [pc, #416]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001806:	61bb      	str	r3, [r7, #24]
 8001808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	4b65      	ldr	r3, [pc, #404]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	4a64      	ldr	r2, [pc, #400]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001810:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001814:	6153      	str	r3, [r2, #20]
 8001816:	4b62      	ldr	r3, [pc, #392]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001822:	4b5f      	ldr	r3, [pc, #380]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4a5e      	ldr	r2, [pc, #376]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001828:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800182c:	6153      	str	r3, [r2, #20]
 800182e:	4b5c      	ldr	r3, [pc, #368]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b59      	ldr	r3, [pc, #356]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	4a58      	ldr	r2, [pc, #352]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001844:	6153      	str	r3, [r2, #20]
 8001846:	4b56      	ldr	r3, [pc, #344]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	4b53      	ldr	r3, [pc, #332]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4a52      	ldr	r2, [pc, #328]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800185c:	6153      	str	r3, [r2, #20]
 800185e:	4b50      	ldr	r3, [pc, #320]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800186a:	4b4d      	ldr	r3, [pc, #308]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	4a4c      	ldr	r2, [pc, #304]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001870:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001874:	6153      	str	r3, [r2, #20]
 8001876:	4b4a      	ldr	r3, [pc, #296]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001882:	4b47      	ldr	r3, [pc, #284]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	4a46      	ldr	r2, [pc, #280]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001888:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800188c:	6153      	str	r3, [r2, #20]
 800188e:	4b44      	ldr	r3, [pc, #272]	@ (80019a0 <MX_GPIO_Init+0x1c4>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2130      	movs	r1, #48	@ 0x30
 800189e:	4841      	ldr	r0, [pc, #260]	@ (80019a4 <MX_GPIO_Init+0x1c8>)
 80018a0:	f001 ff44 	bl	800372c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f244 3101 	movw	r1, #17153	@ 0x4301
 80018aa:	483f      	ldr	r0, [pc, #252]	@ (80019a8 <MX_GPIO_Init+0x1cc>)
 80018ac:	f001 ff3e 	bl	800372c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80018b6:	483d      	ldr	r0, [pc, #244]	@ (80019ac <MX_GPIO_Init+0x1d0>)
 80018b8:	f001 ff38 	bl	800372c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	214e      	movs	r1, #78	@ 0x4e
 80018c0:	483b      	ldr	r0, [pc, #236]	@ (80019b0 <MX_GPIO_Init+0x1d4>)
 80018c2:	f001 ff33 	bl	800372c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80018cc:	4839      	ldr	r0, [pc, #228]	@ (80019b4 <MX_GPIO_Init+0x1d8>)
 80018ce:	f001 ff2d 	bl	800372c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018d2:	2330      	movs	r3, #48	@ 0x30
 80018d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	482e      	ldr	r0, [pc, #184]	@ (80019a4 <MX_GPIO_Init+0x1c8>)
 80018ea:	f001 fd95 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4619      	mov	r1, r3
 8001904:	482b      	ldr	r0, [pc, #172]	@ (80019b4 <MX_GPIO_Init+0x1d8>)
 8001906:	f001 fd87 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_8|GPIO_PIN_9;
 800190a:	f244 3301 	movw	r3, #17153	@ 0x4301
 800190e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	4821      	ldr	r0, [pc, #132]	@ (80019a8 <MX_GPIO_Init+0x1cc>)
 8001924:	f001 fd78 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001928:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800192c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	4619      	mov	r1, r3
 8001940:	481a      	ldr	r0, [pc, #104]	@ (80019ac <MX_GPIO_Init+0x1d0>)
 8001942:	f001 fd69 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG2 PG3 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|USB_PowerSwitchOn_Pin;
 8001946:	234e      	movs	r3, #78	@ 0x4e
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	4619      	mov	r1, r3
 800195c:	4814      	ldr	r0, [pc, #80]	@ (80019b0 <MX_GPIO_Init+0x1d4>)
 800195e:	f001 fd5b 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001962:	2380      	movs	r3, #128	@ 0x80
 8001964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	4619      	mov	r1, r3
 8001974:	480e      	ldr	r0, [pc, #56]	@ (80019b0 <MX_GPIO_Init+0x1d4>)
 8001976:	f001 fd4f 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800197a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800197e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198c:	f107 031c 	add.w	r3, r7, #28
 8001990:	4619      	mov	r1, r3
 8001992:	4808      	ldr	r0, [pc, #32]	@ (80019b4 <MX_GPIO_Init+0x1d8>)
 8001994:	f001 fd40 	bl	8003418 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001998:	bf00      	nop
 800199a:	3730      	adds	r7, #48	@ 0x30
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	48001000 	.word	0x48001000
 80019a8:	48000400 	.word	0x48000400
 80019ac:	48001400 	.word	0x48001400
 80019b0:	48001800 	.word	0x48001800
 80019b4:	48000800 	.word	0x48000800

080019b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//wo de
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	//szj:
    if (huart->Instance == USART1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a63      	ldr	r2, [pc, #396]	@ (8001b54 <HAL_UART_RxCpltCallback+0x19c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	f040 80b6 	bne.w	8001b38 <HAL_UART_RxCpltCallback+0x180>
    {
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80019cc:	2101      	movs	r1, #1
 80019ce:	4862      	ldr	r0, [pc, #392]	@ (8001b58 <HAL_UART_RxCpltCallback+0x1a0>)
 80019d0:	f001 fec4 	bl	800375c <HAL_GPIO_TogglePin>
        // Unpack command
        dir1 = (rx_byte >> 4) & 0x0F;
 80019d4:	4b61      	ldr	r3, [pc, #388]	@ (8001b5c <HAL_UART_RxCpltCallback+0x1a4>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b60      	ldr	r3, [pc, #384]	@ (8001b60 <HAL_UART_RxCpltCallback+0x1a8>)
 80019de:	701a      	strb	r2, [r3, #0]
        v1   = rx_byte & 0x0F;
 80019e0:	4b5e      	ldr	r3, [pc, #376]	@ (8001b5c <HAL_UART_RxCpltCallback+0x1a4>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b5e      	ldr	r3, [pc, #376]	@ (8001b64 <HAL_UART_RxCpltCallback+0x1ac>)
 80019ec:	701a      	strb	r2, [r3, #0]

        if(dir1 == 1){
 80019ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001b60 <HAL_UART_RxCpltCallback+0x1a8>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d11a      	bne.n	8001a2c <HAL_UART_RxCpltCallback+0x74>
            omega = (float)v1 /5;
 80019f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b64 <HAL_UART_RxCpltCallback+0x1ac>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a02:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a0a:	4b57      	ldr	r3, [pc, #348]	@ (8001b68 <HAL_UART_RxCpltCallback+0x1b0>)
 8001a0c:	edc3 7a00 	vstr	s15, [r3]
            v_new = (float)v1 /5;
 8001a10:	4b54      	ldr	r3, [pc, #336]	@ (8001b64 <HAL_UART_RxCpltCallback+0x1ac>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a1c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a24:	4b51      	ldr	r3, [pc, #324]	@ (8001b6c <HAL_UART_RxCpltCallback+0x1b4>)
 8001a26:	edc3 7a00 	vstr	s15, [r3]
 8001a2a:	e04b      	b.n	8001ac4 <HAL_UART_RxCpltCallback+0x10c>
        }
        else if(dir1 == 2){
 8001a2c:	4b4c      	ldr	r3, [pc, #304]	@ (8001b60 <HAL_UART_RxCpltCallback+0x1a8>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d11c      	bne.n	8001a6e <HAL_UART_RxCpltCallback+0xb6>
            omega = -(float)v1 /5;
 8001a34:	4b4b      	ldr	r3, [pc, #300]	@ (8001b64 <HAL_UART_RxCpltCallback+0x1ac>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a40:	eeb1 7a67 	vneg.f32	s14, s15
 8001a44:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001a48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4c:	4b46      	ldr	r3, [pc, #280]	@ (8001b68 <HAL_UART_RxCpltCallback+0x1b0>)
 8001a4e:	edc3 7a00 	vstr	s15, [r3]
            v_new = (float)v1 /5;
 8001a52:	4b44      	ldr	r3, [pc, #272]	@ (8001b64 <HAL_UART_RxCpltCallback+0x1ac>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a5e:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001a62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a66:	4b41      	ldr	r3, [pc, #260]	@ (8001b6c <HAL_UART_RxCpltCallback+0x1b4>)
 8001a68:	edc3 7a00 	vstr	s15, [r3]
 8001a6c:	e02a      	b.n	8001ac4 <HAL_UART_RxCpltCallback+0x10c>
        }
        else if(dir1 == 3){
 8001a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b60 <HAL_UART_RxCpltCallback+0x1a8>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d108      	bne.n	8001a88 <HAL_UART_RxCpltCallback+0xd0>
            omega = 0;
 8001a76:	4b3c      	ldr	r3, [pc, #240]	@ (8001b68 <HAL_UART_RxCpltCallback+0x1b0>)
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
            v_new = 0;
 8001a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b6c <HAL_UART_RxCpltCallback+0x1b4>)
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	e01d      	b.n	8001ac4 <HAL_UART_RxCpltCallback+0x10c>
        }
        else if(dir1 == 0){
 8001a88:	4b35      	ldr	r3, [pc, #212]	@ (8001b60 <HAL_UART_RxCpltCallback+0x1a8>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d111      	bne.n	8001ab4 <HAL_UART_RxCpltCallback+0xfc>
            omega = 0;
 8001a90:	4b35      	ldr	r3, [pc, #212]	@ (8001b68 <HAL_UART_RxCpltCallback+0x1b0>)
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
            v_new = (float)v1 /5;
 8001a98:	4b32      	ldr	r3, [pc, #200]	@ (8001b64 <HAL_UART_RxCpltCallback+0x1ac>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aa4:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aac:	4b2f      	ldr	r3, [pc, #188]	@ (8001b6c <HAL_UART_RxCpltCallback+0x1b4>)
 8001aae:	edc3 7a00 	vstr	s15, [r3]
 8001ab2:	e007      	b.n	8001ac4 <HAL_UART_RxCpltCallback+0x10c>
        }
        else{
            omega = 0;
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b68 <HAL_UART_RxCpltCallback+0x1b0>)
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
            v_new = 0;
 8001abc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b6c <HAL_UART_RxCpltCallback+0x1b4>)
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
        }

        // Print values to UART2
        sprintf(v_buffer, "v=%.2f ", v_new);
 8001ac4:	4b29      	ldr	r3, [pc, #164]	@ (8001b6c <HAL_UART_RxCpltCallback+0x1b4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd45 	bl	8000558 <__aeabi_f2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4927      	ldr	r1, [pc, #156]	@ (8001b70 <HAL_UART_RxCpltCallback+0x1b8>)
 8001ad4:	4827      	ldr	r0, [pc, #156]	@ (8001b74 <HAL_UART_RxCpltCallback+0x1bc>)
 8001ad6:	f009 ff6f 	bl	800b9b8 <siprintf>
        sprintf(omega_buffer, "w=%.2f\r\n", omega);
 8001ada:	4b23      	ldr	r3, [pc, #140]	@ (8001b68 <HAL_UART_RxCpltCallback+0x1b0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fd3a 	bl	8000558 <__aeabi_f2d>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4923      	ldr	r1, [pc, #140]	@ (8001b78 <HAL_UART_RxCpltCallback+0x1c0>)
 8001aea:	4824      	ldr	r0, [pc, #144]	@ (8001b7c <HAL_UART_RxCpltCallback+0x1c4>)
 8001aec:	f009 ff64 	bl	800b9b8 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)v_buffer, strlen(v_buffer), HAL_MAX_DELAY);
 8001af0:	4820      	ldr	r0, [pc, #128]	@ (8001b74 <HAL_UART_RxCpltCallback+0x1bc>)
 8001af2:	f7fe fbc5 	bl	8000280 <strlen>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	491d      	ldr	r1, [pc, #116]	@ (8001b74 <HAL_UART_RxCpltCallback+0x1bc>)
 8001b00:	481f      	ldr	r0, [pc, #124]	@ (8001b80 <HAL_UART_RxCpltCallback+0x1c8>)
 8001b02:	f006 f913 	bl	8007d2c <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)omega_buffer, strlen(omega_buffer), HAL_MAX_DELAY);
 8001b06:	481d      	ldr	r0, [pc, #116]	@ (8001b7c <HAL_UART_RxCpltCallback+0x1c4>)
 8001b08:	f7fe fbba 	bl	8000280 <strlen>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	f04f 33ff 	mov.w	r3, #4294967295
 8001b14:	4919      	ldr	r1, [pc, #100]	@ (8001b7c <HAL_UART_RxCpltCallback+0x1c4>)
 8001b16:	481a      	ldr	r0, [pc, #104]	@ (8001b80 <HAL_UART_RxCpltCallback+0x1c8>)
 8001b18:	f006 f908 	bl	8007d2c <HAL_UART_Transmit>


        v_desired = v_new; ////
 8001b1c:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <HAL_UART_RxCpltCallback+0x1b4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a18      	ldr	r2, [pc, #96]	@ (8001b84 <HAL_UART_RxCpltCallback+0x1cc>)
 8001b22:	6013      	str	r3, [r2, #0]
        w_desired = omega; ////
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <HAL_UART_RxCpltCallback+0x1b0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a17      	ldr	r2, [pc, #92]	@ (8001b88 <HAL_UART_RxCpltCallback+0x1d0>)
 8001b2a:	6013      	str	r3, [r2, #0]

        log_to_uart(v_buffer);
 8001b2c:	4811      	ldr	r0, [pc, #68]	@ (8001b74 <HAL_UART_RxCpltCallback+0x1bc>)
 8001b2e:	f000 fdf9 	bl	8002724 <log_to_uart>
        log_to_uart(omega_buffer);
 8001b32:	4812      	ldr	r0, [pc, #72]	@ (8001b7c <HAL_UART_RxCpltCallback+0x1c4>)
 8001b34:	f000 fdf6 	bl	8002724 <log_to_uart>
				rxIndex = 0;  // overflow, reset
			}
		}
	}

    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4908      	ldr	r1, [pc, #32]	@ (8001b5c <HAL_UART_RxCpltCallback+0x1a4>)
 8001b3c:	4813      	ldr	r0, [pc, #76]	@ (8001b8c <HAL_UART_RxCpltCallback+0x1d4>)
 8001b3e:	f006 f97e 	bl	8007e3e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &rxChar, 1);  // re-arm
 8001b42:	2201      	movs	r2, #1
 8001b44:	4912      	ldr	r1, [pc, #72]	@ (8001b90 <HAL_UART_RxCpltCallback+0x1d8>)
 8001b46:	4813      	ldr	r0, [pc, #76]	@ (8001b94 <HAL_UART_RxCpltCallback+0x1dc>)
 8001b48:	f006 f979 	bl	8007e3e <HAL_UART_Receive_IT>
}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40013800 	.word	0x40013800
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	200008d0 	.word	0x200008d0
 8001b60:	200009a4 	.word	0x200009a4
 8001b64:	200009a5 	.word	0x200009a5
 8001b68:	200008d8 	.word	0x200008d8
 8001b6c:	200008d4 	.word	0x200008d4
 8001b70:	0800f258 	.word	0x0800f258
 8001b74:	200008dc 	.word	0x200008dc
 8001b78:	0800f260 	.word	0x0800f260
 8001b7c:	20000940 	.word	0x20000940
 8001b80:	200004ec 	.word	0x200004ec
 8001b84:	20000a14 	.word	0x20000a14
 8001b88:	20000a18 	.word	0x20000a18
 8001b8c:	20000464 	.word	0x20000464
 8001b90:	200001f0 	.word	0x200001f0
 8001b94:	200003dc 	.word	0x200003dc

08001b98 <HAL_TIM_PeriodElapsedCallback>:


// LZR de
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) {
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c10 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12e      	bne.n	8001c08 <HAL_TIM_PeriodElapsedCallback+0x70>
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		float time_gap = (float) (HAL_GetTick() - last_interrupt_time) / 1000.0;
 8001baa:	f001 fa9b 	bl	80030e4 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	4b18      	ldr	r3, [pc, #96]	@ (8001c14 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	ee07 3a90 	vmov	s15, r3
 8001bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bbe:	ee17 0a90 	vmov	r0, s15
 8001bc2:	f7fe fcc9 	bl	8000558 <__aeabi_f2d>
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001bcc:	f7fe fe46 	bl	800085c <__aeabi_ddiv>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7ff f80e 	bl	8000bf8 <__aeabi_d2f>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60fb      	str	r3, [r7, #12]
		if (time_gap < EPSILON) {
 8001be0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001c1c <HAL_TIM_PeriodElapsedCallback+0x84>
 8001be4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf0:	d501      	bpl.n	8001bf6 <HAL_TIM_PeriodElapsedCallback+0x5e>
			time_gap = EPSILON;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001bf4:	60fb      	str	r3, [r7, #12]
		}

		last_interrupt_time = HAL_GetTick();
 8001bf6:	f001 fa75 	bl	80030e4 <HAL_GetTick>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a05      	ldr	r2, [pc, #20]	@ (8001c14 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001bfe:	6013      	str	r3, [r2, #0]
		compute_control(time_gap);
 8001c00:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c04:	f000 f938 	bl	8001e78 <compute_control>
//		}
//		if (duty_cycle_lb > TIM2_PRD) {
//			duty_cycle_lb = TIM2_PRD;
//		}
	}
}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40014400 	.word	0x40014400
 8001c14:	200009a8 	.word	0x200009a8
 8001c18:	408f4000 	.word	0x408f4000
 8001c1c:	3a83126f 	.word	0x3a83126f
 8001c20:	3a83126f 	.word	0x3a83126f

08001c24 <pwm_mapping>:

int pwm_mapping(int duty_cycle) {
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
//	if(duty_cycle < PWM_MIN) {
//		return PWM_MIN;
//	}
	return (int) ((float) duty_cycle / (float) TIM2_PRD
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c36:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8001c78 <pwm_mapping+0x54>
 8001c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			* (float) (TIM2_PRD - PWM_MIN) + (float) PWM_MIN);
 8001c42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c46:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c58:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8001c7c <pwm_mapping+0x58>
 8001c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
	return (int) ((float) duty_cycle / (float) TIM2_PRD
 8001c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c68:	ee17 3a90 	vmov	r3, s15
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	000003e7 	.word	0x000003e7
 8001c7c:	00000258 	.word	0x00000258

08001c80 <motor_control>:

void motor_control(int motor, int control, float v_desired) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_cycle = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
	if (fabs(v_desired) > V_DEAD_BAND) {
 8001c92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c96:	eef0 7ae7 	vabs.f32	s15, s15
 8001c9a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001d84 <motor_control+0x104>
 8001c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca6:	dd29      	ble.n	8001cfc <motor_control+0x7c>
		if (control > 0) {
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	dd1e      	ble.n	8001cec <motor_control+0x6c>
			duty_cycle = control;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	617b      	str	r3, [r7, #20]
			if (v_desired > 0) {
 8001cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbe:	dd0a      	ble.n	8001cd6 <motor_control+0x56>
				set_direction(motor, FORWARD);
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 f86b 	bl	8001da0 <set_direction>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2101      	movs	r1, #1
 8001cce:	482e      	ldr	r0, [pc, #184]	@ (8001d88 <motor_control+0x108>)
 8001cd0:	f001 fd2c 	bl	800372c <HAL_GPIO_WritePin>
 8001cd4:	e017      	b.n	8001d06 <motor_control+0x86>
			} else {
				set_direction(motor, BACKWARD);
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f860 	bl	8001da0 <set_direction>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	4828      	ldr	r0, [pc, #160]	@ (8001d88 <motor_control+0x108>)
 8001ce6:	f001 fd21 	bl	800372c <HAL_GPIO_WritePin>
 8001cea:	e00c      	b.n	8001d06 <motor_control+0x86>
			}
		} else {
			duty_cycle = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
			set_direction(motor, BREAK);
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f853 	bl	8001da0 <set_direction>
 8001cfa:	e004      	b.n	8001d06 <motor_control+0x86>
		}
	} else {
		set_direction(motor, BREAK);
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	4619      	mov	r1, r3
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 f84d 	bl	8001da0 <set_direction>
	}

	if (duty_cycle > TIM2_PRD) {
 8001d06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	dd02      	ble.n	8001d16 <motor_control+0x96>
		duty_cycle = TIM2_PRD;
 8001d10:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001d14:	617b      	str	r3, [r7, #20]
	}

	duty_cycle = pwm_mapping(duty_cycle);
 8001d16:	6978      	ldr	r0, [r7, #20]
 8001d18:	f7ff ff84 	bl	8001c24 <pwm_mapping>
 8001d1c:	6178      	str	r0, [r7, #20]
	if (motor == LB) {
 8001d1e:	2200      	movs	r2, #0
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d107      	bne.n	8001d36 <motor_control+0xb6>
		duty_cycle_lb = duty_cycle;
 8001d26:	4a19      	ldr	r2, [pc, #100]	@ (8001d8c <motor_control+0x10c>)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 8001d2c:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <motor_control+0x110>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	63da      	str	r2, [r3, #60]	@ 0x3c
	else if (motor == RF) {
		duty_cycle_rf = duty_cycle;
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);

	}
}
 8001d34:	e022      	b.n	8001d7c <motor_control+0xfc>
	else if (motor == RB) {
 8001d36:	2201      	movs	r2, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d107      	bne.n	8001d4e <motor_control+0xce>
		duty_cycle_rb = duty_cycle;
 8001d3e:	4a15      	ldr	r2, [pc, #84]	@ (8001d94 <motor_control+0x114>)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycle);
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <motor_control+0x110>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001d4c:	e016      	b.n	8001d7c <motor_control+0xfc>
	else if (motor == LF) {
 8001d4e:	2202      	movs	r2, #2
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d107      	bne.n	8001d66 <motor_control+0xe6>
		duty_cycle_lf = duty_cycle;
 8001d56:	4a10      	ldr	r2, [pc, #64]	@ (8001d98 <motor_control+0x118>)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <motor_control+0x110>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d64:	e00a      	b.n	8001d7c <motor_control+0xfc>
	else if (motor == RF) {
 8001d66:	2203      	movs	r2, #3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d106      	bne.n	8001d7c <motor_control+0xfc>
		duty_cycle_rf = duty_cycle;
 8001d6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d9c <motor_control+0x11c>)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <motor_control+0x110>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001d7c:	bf00      	nop
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	3d4ccccd 	.word	0x3d4ccccd
 8001d88:	48000400 	.word	0x48000400
 8001d8c:	200009ac 	.word	0x200009ac
 8001d90:	20000260 	.word	0x20000260
 8001d94:	200009b0 	.word	0x200009b0
 8001d98:	200009b4 	.word	0x200009b4
 8001d9c:	200009b8 	.word	0x200009b8

08001da0 <set_direction>:

void set_direction(int motor, int direction) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
	if (motor == LB){
 8001daa:	2200      	movs	r2, #0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d114      	bne.n	8001ddc <set_direction+0x3c>
		if (direction == FORWARD) {
 8001db2:	2201      	movs	r2, #1
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d102      	bne.n	8001dc0 <set_direction+0x20>
			lb_forward();
 8001dba:	f7ff f811 	bl	8000de0 <lb_forward>
		}
		else if (direction == BREAK) {
			rf_stop();
		}
	}
}
 8001dbe:	e057      	b.n	8001e70 <set_direction+0xd0>
		else if (direction == BACKWARD) {
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d102      	bne.n	8001dce <set_direction+0x2e>
			lb_backward();
 8001dc8:	f7ff f81c 	bl	8000e04 <lb_backward>
}
 8001dcc:	e050      	b.n	8001e70 <set_direction+0xd0>
		else if (direction == BREAK) {
 8001dce:	2203      	movs	r2, #3
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d14c      	bne.n	8001e70 <set_direction+0xd0>
			lb_stop();
 8001dd6:	f7ff f827 	bl	8000e28 <lb_stop>
}
 8001dda:	e049      	b.n	8001e70 <set_direction+0xd0>
	else if (motor == RB) {
 8001ddc:	2201      	movs	r2, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d114      	bne.n	8001e0e <set_direction+0x6e>
		if (direction == FORWARD) {
 8001de4:	2201      	movs	r2, #1
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d102      	bne.n	8001df2 <set_direction+0x52>
			rb_forward();
 8001dec:	f7ff f82e 	bl	8000e4c <rb_forward>
}
 8001df0:	e03e      	b.n	8001e70 <set_direction+0xd0>
		else if (direction == BACKWARD) {
 8001df2:	2202      	movs	r2, #2
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d102      	bne.n	8001e00 <set_direction+0x60>
			rb_backward();
 8001dfa:	f7ff f837 	bl	8000e6c <rb_backward>
}
 8001dfe:	e037      	b.n	8001e70 <set_direction+0xd0>
		else if (direction == BREAK) {
 8001e00:	2203      	movs	r2, #3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d133      	bne.n	8001e70 <set_direction+0xd0>
			rb_stop();
 8001e08:	f7ff f840 	bl	8000e8c <rb_stop>
}
 8001e0c:	e030      	b.n	8001e70 <set_direction+0xd0>
	else if (motor == LF) {
 8001e0e:	2202      	movs	r2, #2
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d114      	bne.n	8001e40 <set_direction+0xa0>
		if (direction == FORWARD) {
 8001e16:	2201      	movs	r2, #1
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d102      	bne.n	8001e24 <set_direction+0x84>
			lf_forward();
 8001e1e:	f7ff f845 	bl	8000eac <lf_forward>
}
 8001e22:	e025      	b.n	8001e70 <set_direction+0xd0>
		} else if (direction == BACKWARD) {
 8001e24:	2202      	movs	r2, #2
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d102      	bne.n	8001e32 <set_direction+0x92>
			lf_backward();
 8001e2c:	f7ff f850 	bl	8000ed0 <lf_backward>
}
 8001e30:	e01e      	b.n	8001e70 <set_direction+0xd0>
		} else if (direction == BREAK) {
 8001e32:	2203      	movs	r2, #3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d11a      	bne.n	8001e70 <set_direction+0xd0>
			lf_stop();
 8001e3a:	f7ff f85b 	bl	8000ef4 <lf_stop>
}
 8001e3e:	e017      	b.n	8001e70 <set_direction+0xd0>
	else if (motor == RF) {
 8001e40:	2203      	movs	r2, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d113      	bne.n	8001e70 <set_direction+0xd0>
		if (direction == FORWARD) {
 8001e48:	2201      	movs	r2, #1
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d102      	bne.n	8001e56 <set_direction+0xb6>
			rf_forward();
 8001e50:	f7ff f862 	bl	8000f18 <rf_forward>
}
 8001e54:	e00c      	b.n	8001e70 <set_direction+0xd0>
		else if (direction == BACKWARD) {
 8001e56:	2202      	movs	r2, #2
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d102      	bne.n	8001e64 <set_direction+0xc4>
			rf_backward();
 8001e5e:	f7ff f86b 	bl	8000f38 <rf_backward>
}
 8001e62:	e005      	b.n	8001e70 <set_direction+0xd0>
		else if (direction == BREAK) {
 8001e64:	2203      	movs	r2, #3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d101      	bne.n	8001e70 <set_direction+0xd0>
			rf_stop();
 8001e6c:	f7ff f874 	bl	8000f58 <rf_stop>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <compute_control>:
void reset_pid(void) {
	lb_integral = 0.0;
	lb_previous_err = 0.0;
}

void compute_control(float time_gap) {
 8001e78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e7c:	b0c4      	sub	sp, #272	@ 0x110
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e88:	ed83 0a00 	vstr	s0, [r3]
	int lb_control = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	int rb_control = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	int lf_control = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	int rf_control = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	const float Kp = 1000, Ki = 7500, Kd = 0.0;
 8001ea4:	4be1      	ldr	r3, [pc, #900]	@ (800222c <compute_control+0x3b4>)
 8001ea6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001eaa:	4be1      	ldr	r3, [pc, #900]	@ (8002230 <compute_control+0x3b8>)
 8001eac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	if (fabs(v_desired) > V_MAX) {
 8001eb8:	4bde      	ldr	r3, [pc, #888]	@ (8002234 <compute_control+0x3bc>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	eef0 7ae7 	vabs.f32	s15, s15
 8001ec2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ece:	dd2b      	ble.n	8001f28 <compute_control+0xb0>
 		v_desired = V_MAX * (v_desired / fabs(v_desired));
 8001ed0:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fb3f 	bl	8000558 <__aeabi_f2d>
 8001eda:	4604      	mov	r4, r0
 8001edc:	460d      	mov	r5, r1
 8001ede:	4bd5      	ldr	r3, [pc, #852]	@ (8002234 <compute_control+0x3bc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fb38 	bl	8000558 <__aeabi_f2d>
 8001ee8:	4680      	mov	r8, r0
 8001eea:	4689      	mov	r9, r1
 8001eec:	4bd1      	ldr	r3, [pc, #836]	@ (8002234 <compute_control+0x3bc>)
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	eef0 7ae7 	vabs.f32	s15, s15
 8001ef6:	ee17 0a90 	vmov	r0, s15
 8001efa:	f7fe fb2d 	bl	8000558 <__aeabi_f2d>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4640      	mov	r0, r8
 8001f04:	4649      	mov	r1, r9
 8001f06:	f7fe fca9 	bl	800085c <__aeabi_ddiv>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4620      	mov	r0, r4
 8001f10:	4629      	mov	r1, r5
 8001f12:	f7fe fb79 	bl	8000608 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7fe fe6b 	bl	8000bf8 <__aeabi_d2f>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4ac3      	ldr	r2, [pc, #780]	@ (8002234 <compute_control+0x3bc>)
 8001f26:	6013      	str	r3, [r2, #0]
 	}

	if (w_desired > W_MAX) {
 8001f28:	4bc3      	ldr	r3, [pc, #780]	@ (8002238 <compute_control+0x3c0>)
 8001f2a:	edd3 7a00 	vldr	s15, [r3]
 8001f2e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3a:	dd2a      	ble.n	8001f92 <compute_control+0x11a>
		w_desired = W_MAX * (w_desired / fabs(w_desired));
 8001f3c:	4bbf      	ldr	r3, [pc, #764]	@ (800223c <compute_control+0x3c4>)
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fb0a 	bl	8000558 <__aeabi_f2d>
 8001f44:	4604      	mov	r4, r0
 8001f46:	460d      	mov	r5, r1
 8001f48:	4bbb      	ldr	r3, [pc, #748]	@ (8002238 <compute_control+0x3c0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fb03 	bl	8000558 <__aeabi_f2d>
 8001f52:	4680      	mov	r8, r0
 8001f54:	4689      	mov	r9, r1
 8001f56:	4bb8      	ldr	r3, [pc, #736]	@ (8002238 <compute_control+0x3c0>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	eef0 7ae7 	vabs.f32	s15, s15
 8001f60:	ee17 0a90 	vmov	r0, s15
 8001f64:	f7fe faf8 	bl	8000558 <__aeabi_f2d>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4640      	mov	r0, r8
 8001f6e:	4649      	mov	r1, r9
 8001f70:	f7fe fc74 	bl	800085c <__aeabi_ddiv>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4620      	mov	r0, r4
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	f7fe fb44 	bl	8000608 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe fe36 	bl	8000bf8 <__aeabi_d2f>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4aaa      	ldr	r2, [pc, #680]	@ (8002238 <compute_control+0x3c0>)
 8001f90:	6013      	str	r3, [r2, #0]
	}


	compute_ideal_speed(v_desired, w_desired, &lb_speed_ideal,
 8001f92:	4ba8      	ldr	r3, [pc, #672]	@ (8002234 <compute_control+0x3bc>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	4ba7      	ldr	r3, [pc, #668]	@ (8002238 <compute_control+0x3c0>)
 8001f9a:	ed93 7a00 	vldr	s14, [r3]
 8001f9e:	4ba8      	ldr	r3, [pc, #672]	@ (8002240 <compute_control+0x3c8>)
 8001fa0:	4aa8      	ldr	r2, [pc, #672]	@ (8002244 <compute_control+0x3cc>)
 8001fa2:	49a9      	ldr	r1, [pc, #676]	@ (8002248 <compute_control+0x3d0>)
 8001fa4:	48a9      	ldr	r0, [pc, #676]	@ (800224c <compute_control+0x3d4>)
 8001fa6:	eef0 0a47 	vmov.f32	s1, s14
 8001faa:	eeb0 0a67 	vmov.f32	s0, s15
 8001fae:	f7fe feab 	bl	8000d08 <compute_ideal_speed>
			&rb_speed_ideal, &lf_speed_ideal, &rf_speed_ideal);

	// compute control for left side
	lb_speed_real = compute_real_speed(time_gap, LB);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fb8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	ed93 0a00 	vldr	s0, [r3]
 8001fc2:	f000 fa4d 	bl	8002460 <compute_real_speed>
 8001fc6:	eef0 7a40 	vmov.f32	s15, s0
 8001fca:	4ba1      	ldr	r3, [pc, #644]	@ (8002250 <compute_control+0x3d8>)
 8001fcc:	edc3 7a00 	vstr	s15, [r3]
	float lb_error = fabs(lb_speed_ideal) - fabs(lb_speed_real);
 8001fd0:	4b9e      	ldr	r3, [pc, #632]	@ (800224c <compute_control+0x3d4>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	eef0 7ae7 	vabs.f32	s15, s15
 8001fda:	ee17 0a90 	vmov	r0, s15
 8001fde:	f7fe fabb 	bl	8000558 <__aeabi_f2d>
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	460d      	mov	r5, r1
 8001fe6:	4b9a      	ldr	r3, [pc, #616]	@ (8002250 <compute_control+0x3d8>)
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	eef0 7ae7 	vabs.f32	s15, s15
 8001ff0:	ee17 0a90 	vmov	r0, s15
 8001ff4:	f7fe fab0 	bl	8000558 <__aeabi_f2d>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	4629      	mov	r1, r5
 8002000:	f7fe f94a 	bl	8000298 <__aeabi_dsub>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	f7fe fdf4 	bl	8000bf8 <__aeabi_d2f>
 8002010:	4603      	mov	r3, r0
 8002012:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
	lb_integral += lb_error * time_gap;
 8002016:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800201a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800201e:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	ee27 7a27 	vmul.f32	s14, s14, s15
 800202a:	4b8a      	ldr	r3, [pc, #552]	@ (8002254 <compute_control+0x3dc>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002034:	4b87      	ldr	r3, [pc, #540]	@ (8002254 <compute_control+0x3dc>)
 8002036:	edc3 7a00 	vstr	s15, [r3]
	float lb_derivative = (lb_error - lb_previous_err) / time_gap;
 800203a:	4b87      	ldr	r3, [pc, #540]	@ (8002258 <compute_control+0x3e0>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 8002044:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002048:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800204c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002050:	ed93 7a00 	vldr	s14, [r3]
 8002054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002058:	edc7 7a3b 	vstr	s15, [r7, #236]	@ 0xec
	lb_previous_err = lb_error;
 800205c:	4a7e      	ldr	r2, [pc, #504]	@ (8002258 <compute_control+0x3e0>)
 800205e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002062:	6013      	str	r3, [r2, #0]
	lb_control = (int) (Kp * lb_error + Ki * lb_integral
 8002064:	ed97 7a3f 	vldr	s14, [r7, #252]	@ 0xfc
 8002068:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 800206c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002070:	4b78      	ldr	r3, [pc, #480]	@ (8002254 <compute_control+0x3dc>)
 8002072:	edd3 6a00 	vldr	s13, [r3]
 8002076:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 800207a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800207e:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * lb_derivative);
 8002082:	edd7 6a3d 	vldr	s13, [r7, #244]	@ 0xf4
 8002086:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 800208a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800208e:	ee77 7a27 	vadd.f32	s15, s14, s15
	lb_control = (int) (Kp * lb_error + Ki * lb_integral
 8002092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002096:	ee17 3a90 	vmov	r3, s15
 800209a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	lf_speed_real = compute_real_speed(time_gap, LF);
 800209e:	2202      	movs	r2, #2
 80020a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020a8:	4610      	mov	r0, r2
 80020aa:	ed93 0a00 	vldr	s0, [r3]
 80020ae:	f000 f9d7 	bl	8002460 <compute_real_speed>
 80020b2:	eef0 7a40 	vmov.f32	s15, s0
 80020b6:	4b69      	ldr	r3, [pc, #420]	@ (800225c <compute_control+0x3e4>)
 80020b8:	edc3 7a00 	vstr	s15, [r3]
	float lf_error = fabs(lf_speed_ideal) - fabs(lf_speed_real);
 80020bc:	4b61      	ldr	r3, [pc, #388]	@ (8002244 <compute_control+0x3cc>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	eef0 7ae7 	vabs.f32	s15, s15
 80020c6:	ee17 0a90 	vmov	r0, s15
 80020ca:	f7fe fa45 	bl	8000558 <__aeabi_f2d>
 80020ce:	4604      	mov	r4, r0
 80020d0:	460d      	mov	r5, r1
 80020d2:	4b62      	ldr	r3, [pc, #392]	@ (800225c <compute_control+0x3e4>)
 80020d4:	edd3 7a00 	vldr	s15, [r3]
 80020d8:	eef0 7ae7 	vabs.f32	s15, s15
 80020dc:	ee17 0a90 	vmov	r0, s15
 80020e0:	f7fe fa3a 	bl	8000558 <__aeabi_f2d>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4620      	mov	r0, r4
 80020ea:	4629      	mov	r1, r5
 80020ec:	f7fe f8d4 	bl	8000298 <__aeabi_dsub>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7fe fd7e 	bl	8000bf8 <__aeabi_d2f>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	lf_integral += lf_error * time_gap;
 8002102:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002106:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800210a:	ed97 7a3a 	vldr	s14, [r7, #232]	@ 0xe8
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002116:	4b52      	ldr	r3, [pc, #328]	@ (8002260 <compute_control+0x3e8>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002120:	4b4f      	ldr	r3, [pc, #316]	@ (8002260 <compute_control+0x3e8>)
 8002122:	edc3 7a00 	vstr	s15, [r3]
	float lf_derivative = (lf_error - lf_previous_err) / time_gap;
 8002126:	4b4f      	ldr	r3, [pc, #316]	@ (8002264 <compute_control+0x3ec>)
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	ed97 7a3a 	vldr	s14, [r7, #232]	@ 0xe8
 8002130:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002134:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002138:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800213c:	ed93 7a00 	vldr	s14, [r3]
 8002140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002144:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
	lf_previous_err = lf_error;
 8002148:	4a46      	ldr	r2, [pc, #280]	@ (8002264 <compute_control+0x3ec>)
 800214a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800214e:	6013      	str	r3, [r2, #0]
	lf_control = (int) (Kp * lf_error + Ki * lf_integral
 8002150:	ed97 7a3f 	vldr	s14, [r7, #252]	@ 0xfc
 8002154:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8002158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215c:	4b40      	ldr	r3, [pc, #256]	@ (8002260 <compute_control+0x3e8>)
 800215e:	edd3 6a00 	vldr	s13, [r3]
 8002162:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8002166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800216a:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * lf_derivative);
 800216e:	edd7 6a3d 	vldr	s13, [r7, #244]	@ 0xf4
 8002172:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8002176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800217a:	ee77 7a27 	vadd.f32	s15, s14, s15
	lf_control = (int) (Kp * lf_error + Ki * lf_integral
 800217e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002182:	ee17 3a90 	vmov	r3, s15
 8002186:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	//compute control for right speed
	rb_speed_real = compute_real_speed(time_gap, RB);
 800218a:	2201      	movs	r2, #1
 800218c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002190:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002194:	4610      	mov	r0, r2
 8002196:	ed93 0a00 	vldr	s0, [r3]
 800219a:	f000 f961 	bl	8002460 <compute_real_speed>
 800219e:	eef0 7a40 	vmov.f32	s15, s0
 80021a2:	4b31      	ldr	r3, [pc, #196]	@ (8002268 <compute_control+0x3f0>)
 80021a4:	edc3 7a00 	vstr	s15, [r3]
	float rb_error = fabs(rb_speed_ideal) - fabs(rb_speed_real);
 80021a8:	4b27      	ldr	r3, [pc, #156]	@ (8002248 <compute_control+0x3d0>)
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	eef0 7ae7 	vabs.f32	s15, s15
 80021b2:	ee17 0a90 	vmov	r0, s15
 80021b6:	f7fe f9cf 	bl	8000558 <__aeabi_f2d>
 80021ba:	4604      	mov	r4, r0
 80021bc:	460d      	mov	r5, r1
 80021be:	4b2a      	ldr	r3, [pc, #168]	@ (8002268 <compute_control+0x3f0>)
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	eef0 7ae7 	vabs.f32	s15, s15
 80021c8:	ee17 0a90 	vmov	r0, s15
 80021cc:	f7fe f9c4 	bl	8000558 <__aeabi_f2d>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4620      	mov	r0, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	f7fe f85e 	bl	8000298 <__aeabi_dsub>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fd08 	bl	8000bf8 <__aeabi_d2f>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	rb_integral += rb_error * time_gap;
 80021ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021f6:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 80021fa:	edd3 7a00 	vldr	s15, [r3]
 80021fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002202:	4b1a      	ldr	r3, [pc, #104]	@ (800226c <compute_control+0x3f4>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220c:	4b17      	ldr	r3, [pc, #92]	@ (800226c <compute_control+0x3f4>)
 800220e:	edc3 7a00 	vstr	s15, [r3]
	float rb_derivative = (rb_error - rb_previous_err) / time_gap;
 8002212:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <compute_control+0x3f8>)
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800221c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002220:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002224:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002228:	e024      	b.n	8002274 <compute_control+0x3fc>
 800222a:	bf00      	nop
 800222c:	447a0000 	.word	0x447a0000
 8002230:	45ea6000 	.word	0x45ea6000
 8002234:	20000a14 	.word	0x20000a14
 8002238:	20000a18 	.word	0x20000a18
 800223c:	40400000 	.word	0x40400000
 8002240:	200009f0 	.word	0x200009f0
 8002244:	200009ec 	.word	0x200009ec
 8002248:	200009e8 	.word	0x200009e8
 800224c:	200009e4 	.word	0x200009e4
 8002250:	200009d4 	.word	0x200009d4
 8002254:	200009f4 	.word	0x200009f4
 8002258:	200009f8 	.word	0x200009f8
 800225c:	200009dc 	.word	0x200009dc
 8002260:	20000a04 	.word	0x20000a04
 8002264:	20000a08 	.word	0x20000a08
 8002268:	200009d8 	.word	0x200009d8
 800226c:	200009fc 	.word	0x200009fc
 8002270:	20000a00 	.word	0x20000a00
 8002274:	ed93 7a00 	vldr	s14, [r3]
 8002278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800227c:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
	rb_previous_err = rb_error;
 8002280:	4a69      	ldr	r2, [pc, #420]	@ (8002428 <compute_control+0x5b0>)
 8002282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002286:	6013      	str	r3, [r2, #0]
	rb_control = (int) (Kp * rb_error + Ki * rb_integral
 8002288:	ed97 7a3f 	vldr	s14, [r7, #252]	@ 0xfc
 800228c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8002290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002294:	4b65      	ldr	r3, [pc, #404]	@ (800242c <compute_control+0x5b4>)
 8002296:	edd3 6a00 	vldr	s13, [r3]
 800229a:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 800229e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a2:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * rb_derivative);
 80022a6:	edd7 6a3d 	vldr	s13, [r7, #244]	@ 0xf4
 80022aa:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 80022ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b2:	ee77 7a27 	vadd.f32	s15, s14, s15
	rb_control = (int) (Kp * rb_error + Ki * rb_integral
 80022b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ba:	ee17 3a90 	vmov	r3, s15
 80022be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

	rf_speed_real = compute_real_speed(time_gap, RF);
 80022c2:	2203      	movs	r2, #3
 80022c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022cc:	4610      	mov	r0, r2
 80022ce:	ed93 0a00 	vldr	s0, [r3]
 80022d2:	f000 f8c5 	bl	8002460 <compute_real_speed>
 80022d6:	eef0 7a40 	vmov.f32	s15, s0
 80022da:	4b55      	ldr	r3, [pc, #340]	@ (8002430 <compute_control+0x5b8>)
 80022dc:	edc3 7a00 	vstr	s15, [r3]
	float rf_error = fabs(rf_speed_ideal) - fabs(rf_speed_real);
 80022e0:	4b54      	ldr	r3, [pc, #336]	@ (8002434 <compute_control+0x5bc>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	eef0 7ae7 	vabs.f32	s15, s15
 80022ea:	ee17 0a90 	vmov	r0, s15
 80022ee:	f7fe f933 	bl	8000558 <__aeabi_f2d>
 80022f2:	4604      	mov	r4, r0
 80022f4:	460d      	mov	r5, r1
 80022f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002430 <compute_control+0x5b8>)
 80022f8:	edd3 7a00 	vldr	s15, [r3]
 80022fc:	eef0 7ae7 	vabs.f32	s15, s15
 8002300:	ee17 0a90 	vmov	r0, s15
 8002304:	f7fe f928 	bl	8000558 <__aeabi_f2d>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4620      	mov	r0, r4
 800230e:	4629      	mov	r1, r5
 8002310:	f7fd ffc2 	bl	8000298 <__aeabi_dsub>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	f7fe fc6c 	bl	8000bf8 <__aeabi_d2f>
 8002320:	4603      	mov	r3, r0
 8002322:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	rf_integral += rf_error * time_gap;
 8002326:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800232a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800232e:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ee27 7a27 	vmul.f32	s14, s14, s15
 800233a:	4b3f      	ldr	r3, [pc, #252]	@ (8002438 <compute_control+0x5c0>)
 800233c:	edd3 7a00 	vldr	s15, [r3]
 8002340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002344:	4b3c      	ldr	r3, [pc, #240]	@ (8002438 <compute_control+0x5c0>)
 8002346:	edc3 7a00 	vstr	s15, [r3]
	float rf_derivative = (rf_error - rf_previous_err) / time_gap;
 800234a:	4b3c      	ldr	r3, [pc, #240]	@ (800243c <compute_control+0x5c4>)
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8002354:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002358:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800235c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002360:	ed93 7a00 	vldr	s14, [r3]
 8002364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002368:	edc7 7a35 	vstr	s15, [r7, #212]	@ 0xd4
	rf_previous_err = rf_error;
 800236c:	4a33      	ldr	r2, [pc, #204]	@ (800243c <compute_control+0x5c4>)
 800236e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002372:	6013      	str	r3, [r2, #0]
	rf_control = (int) (Kp * rf_error + Ki * rf_integral
 8002374:	ed97 7a3f 	vldr	s14, [r7, #252]	@ 0xfc
 8002378:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 800237c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002380:	4b2d      	ldr	r3, [pc, #180]	@ (8002438 <compute_control+0x5c0>)
 8002382:	edd3 6a00 	vldr	s13, [r3]
 8002386:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 800238a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238e:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * rf_derivative);
 8002392:	edd7 6a3d 	vldr	s13, [r7, #244]	@ 0xf4
 8002396:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 800239a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239e:	ee77 7a27 	vadd.f32	s15, s14, s15
	rf_control = (int) (Kp * rf_error + Ki * rf_integral
 80023a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a6:	ee17 3a90 	vmov	r3, s15
 80023aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

	motor_control(LB, lb_control, lb_speed_ideal);
 80023ae:	2200      	movs	r2, #0
 80023b0:	4b23      	ldr	r3, [pc, #140]	@ (8002440 <compute_control+0x5c8>)
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ba:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 80023be:	4610      	mov	r0, r2
 80023c0:	f7ff fc5e 	bl	8001c80 <motor_control>
	motor_control(LF, lf_control, lf_speed_ideal);
 80023c4:	2202      	movs	r2, #2
 80023c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002444 <compute_control+0x5cc>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	eeb0 0a67 	vmov.f32	s0, s15
 80023d0:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 80023d4:	4610      	mov	r0, r2
 80023d6:	f7ff fc53 	bl	8001c80 <motor_control>
	motor_control(RB, rb_control, rb_speed_ideal);
 80023da:	2201      	movs	r2, #1
 80023dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002448 <compute_control+0x5d0>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	eeb0 0a67 	vmov.f32	s0, s15
 80023e6:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 80023ea:	4610      	mov	r0, r2
 80023ec:	f7ff fc48 	bl	8001c80 <motor_control>
	motor_control(RF, rf_control, rf_speed_ideal);
 80023f0:	2203      	movs	r2, #3
 80023f2:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <compute_control+0x5bc>)
 80023f4:	edd3 7a00 	vldr	s15, [r3]
 80023f8:	eeb0 0a67 	vmov.f32	s0, s15
 80023fc:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8002400:	4610      	mov	r0, r2
 8002402:	f7ff fc3d 	bl	8001c80 <motor_control>

	char temp_str[200];

	lb_count_current = __HAL_TIM_GET_COUNTER(&htim3);
 8002406:	4b11      	ldr	r3, [pc, #68]	@ (800244c <compute_control+0x5d4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	4a10      	ldr	r2, [pc, #64]	@ (8002450 <compute_control+0x5d8>)
 800240e:	6013      	str	r3, [r2, #0]
	rb_count_current = __HAL_TIM_GET_COUNTER(&htim4);
 8002410:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <compute_control+0x5dc>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	4a10      	ldr	r2, [pc, #64]	@ (8002458 <compute_control+0x5e0>)
 8002418:	6013      	str	r3, [r2, #0]
//				duty_cycle_rf);
//		log_to_uart(temp_str);
//
//		sprintf(temp_str, "\r\n");
//		log_to_uart(temp_str);
	}
 800241a:	bf00      	nop
 800241c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002420:	46bd      	mov	sp, r7
 8002422:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002426:	bf00      	nop
 8002428:	20000a00 	.word	0x20000a00
 800242c:	200009fc 	.word	0x200009fc
 8002430:	200009e0 	.word	0x200009e0
 8002434:	200009f0 	.word	0x200009f0
 8002438:	20000a0c 	.word	0x20000a0c
 800243c:	20000a10 	.word	0x20000a10
 8002440:	200009e4 	.word	0x200009e4
 8002444:	200009ec 	.word	0x200009ec
 8002448:	200009e8 	.word	0x200009e8
 800244c:	200002ac 	.word	0x200002ac
 8002450:	200009cc 	.word	0x200009cc
 8002454:	200002f8 	.word	0x200002f8
 8002458:	200009d0 	.word	0x200009d0
 800245c:	00000000 	.word	0x00000000

08002460 <compute_real_speed>:


float compute_real_speed(float time_gap, int motor) {
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	ed87 0a01 	vstr	s0, [r7, #4]
 800246a:	6038      	str	r0, [r7, #0]
	int16_t count_diff = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	817b      	strh	r3, [r7, #10]
	float speed_real = 0.0;
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
	if (motor == LB) {
 8002476:	2200      	movs	r2, #0
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4293      	cmp	r3, r2
 800247c:	d149      	bne.n	8002512 <compute_real_speed+0xb2>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim3) - lb_count_last);
 800247e:	4ba0      	ldr	r3, [pc, #640]	@ (8002700 <compute_real_speed+0x2a0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	b29a      	uxth	r2, r3
 8002486:	4b9f      	ldr	r3, [pc, #636]	@ (8002704 <compute_real_speed+0x2a4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	b29b      	uxth	r3, r3
 8002490:	817b      	strh	r3, [r7, #10]
		speed_real = -1 * count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 8002492:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002496:	425b      	negs	r3, r3
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe f84b 	bl	8000534 <__aeabi_i2d>
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	4b99      	ldr	r3, [pc, #612]	@ (8002708 <compute_real_speed+0x2a8>)
 80024a4:	f7fe f9da 	bl	800085c <__aeabi_ddiv>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	f7fd fef2 	bl	800029c <__adddf3>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	a38b      	add	r3, pc, #556	@ (adr r3, 80026f0 <compute_real_speed+0x290>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fe f89f 	bl	8000608 <__aeabi_dmul>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	a389      	add	r3, pc, #548	@ (adr r3, 80026f8 <compute_real_speed+0x298>)
 80024d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d8:	f7fe f896 	bl	8000608 <__aeabi_dmul>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4614      	mov	r4, r2
 80024e2:	461d      	mov	r5, r3
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7fe f837 	bl	8000558 <__aeabi_f2d>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4620      	mov	r0, r4
 80024f0:	4629      	mov	r1, r5
 80024f2:	f7fe f9b3 	bl	800085c <__aeabi_ddiv>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	f7fe fb7b 	bl	8000bf8 <__aeabi_d2f>
 8002502:	4603      	mov	r3, r0
 8002504:	60fb      	str	r3, [r7, #12]
		lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
 8002506:	4b7e      	ldr	r3, [pc, #504]	@ (8002700 <compute_real_speed+0x2a0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	4a7d      	ldr	r2, [pc, #500]	@ (8002704 <compute_real_speed+0x2a4>)
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e0e6      	b.n	80026e0 <compute_real_speed+0x280>
	}
	else if (motor == RB) {
 8002512:	2201      	movs	r2, #1
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4293      	cmp	r3, r2
 8002518:	d148      	bne.n	80025ac <compute_real_speed+0x14c>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim4) - rb_count_last);
 800251a:	4b7c      	ldr	r3, [pc, #496]	@ (800270c <compute_real_speed+0x2ac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	b29a      	uxth	r2, r3
 8002522:	4b7b      	ldr	r3, [pc, #492]	@ (8002710 <compute_real_speed+0x2b0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	b29b      	uxth	r3, r3
 800252c:	817b      	strh	r3, [r7, #10]
		speed_real = count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 800252e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd fffe 	bl	8000534 <__aeabi_i2d>
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	4b72      	ldr	r3, [pc, #456]	@ (8002708 <compute_real_speed+0x2a8>)
 800253e:	f7fe f98d 	bl	800085c <__aeabi_ddiv>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	f7fd fea5 	bl	800029c <__adddf3>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	a365      	add	r3, pc, #404	@ (adr r3, 80026f0 <compute_real_speed+0x290>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f7fe f852 	bl	8000608 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	a362      	add	r3, pc, #392	@ (adr r3, 80026f8 <compute_real_speed+0x298>)
 800256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002572:	f7fe f849 	bl	8000608 <__aeabi_dmul>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4614      	mov	r4, r2
 800257c:	461d      	mov	r5, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fd ffea 	bl	8000558 <__aeabi_f2d>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4620      	mov	r0, r4
 800258a:	4629      	mov	r1, r5
 800258c:	f7fe f966 	bl	800085c <__aeabi_ddiv>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	f7fe fb2e 	bl	8000bf8 <__aeabi_d2f>
 800259c:	4603      	mov	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]
		rb_count_last = __HAL_TIM_GET_COUNTER(&htim4);
 80025a0:	4b5a      	ldr	r3, [pc, #360]	@ (800270c <compute_real_speed+0x2ac>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	4a5a      	ldr	r2, [pc, #360]	@ (8002710 <compute_real_speed+0x2b0>)
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e099      	b.n	80026e0 <compute_real_speed+0x280>
	}
	else if (motor == LF) {
 80025ac:	2202      	movs	r2, #2
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d149      	bne.n	8002648 <compute_real_speed+0x1e8>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim1) - lf_count_last);
 80025b4:	4b57      	ldr	r3, [pc, #348]	@ (8002714 <compute_real_speed+0x2b4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	4b56      	ldr	r3, [pc, #344]	@ (8002718 <compute_real_speed+0x2b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	817b      	strh	r3, [r7, #10]
		speed_real = -1 * count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 80025c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025cc:	425b      	negs	r3, r3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ffb0 	bl	8000534 <__aeabi_i2d>
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002708 <compute_real_speed+0x2a8>)
 80025da:	f7fe f93f 	bl	800085c <__aeabi_ddiv>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	f7fd fe57 	bl	800029c <__adddf3>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	a33e      	add	r3, pc, #248	@ (adr r3, 80026f0 <compute_real_speed+0x290>)
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	f7fe f804 	bl	8000608 <__aeabi_dmul>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	a33b      	add	r3, pc, #236	@ (adr r3, 80026f8 <compute_real_speed+0x298>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fd fffb 	bl	8000608 <__aeabi_dmul>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4614      	mov	r4, r2
 8002618:	461d      	mov	r5, r3
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fd ff9c 	bl	8000558 <__aeabi_f2d>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4620      	mov	r0, r4
 8002626:	4629      	mov	r1, r5
 8002628:	f7fe f918 	bl	800085c <__aeabi_ddiv>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	f7fe fae0 	bl	8000bf8 <__aeabi_d2f>
 8002638:	4603      	mov	r3, r0
 800263a:	60fb      	str	r3, [r7, #12]
		lf_count_last = __HAL_TIM_GET_COUNTER(&htim1);
 800263c:	4b35      	ldr	r3, [pc, #212]	@ (8002714 <compute_real_speed+0x2b4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002642:	4a35      	ldr	r2, [pc, #212]	@ (8002718 <compute_real_speed+0x2b8>)
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e04b      	b.n	80026e0 <compute_real_speed+0x280>
	}
	else if (motor == RF) {
 8002648:	2203      	movs	r2, #3
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	4293      	cmp	r3, r2
 800264e:	d147      	bne.n	80026e0 <compute_real_speed+0x280>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim8) - rf_count_last);
 8002650:	4b32      	ldr	r3, [pc, #200]	@ (800271c <compute_real_speed+0x2bc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b31      	ldr	r3, [pc, #196]	@ (8002720 <compute_real_speed+0x2c0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	b29b      	uxth	r3, r3
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	b29b      	uxth	r3, r3
 8002662:	817b      	strh	r3, [r7, #10]
		speed_real = count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 8002664:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd ff63 	bl	8000534 <__aeabi_i2d>
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	4b25      	ldr	r3, [pc, #148]	@ (8002708 <compute_real_speed+0x2a8>)
 8002674:	f7fe f8f2 	bl	800085c <__aeabi_ddiv>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	f7fd fe0a 	bl	800029c <__adddf3>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	a317      	add	r3, pc, #92	@ (adr r3, 80026f0 <compute_real_speed+0x290>)
 8002692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002696:	f7fd ffb7 	bl	8000608 <__aeabi_dmul>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	a315      	add	r3, pc, #84	@ (adr r3, 80026f8 <compute_real_speed+0x298>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	f7fd ffae 	bl	8000608 <__aeabi_dmul>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4614      	mov	r4, r2
 80026b2:	461d      	mov	r5, r3
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7fd ff4f 	bl	8000558 <__aeabi_f2d>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4620      	mov	r0, r4
 80026c0:	4629      	mov	r1, r5
 80026c2:	f7fe f8cb 	bl	800085c <__aeabi_ddiv>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	f7fe fa93 	bl	8000bf8 <__aeabi_d2f>
 80026d2:	4603      	mov	r3, r0
 80026d4:	60fb      	str	r3, [r7, #12]
		rf_count_last = __HAL_TIM_GET_COUNTER(&htim8);
 80026d6:	4b11      	ldr	r3, [pc, #68]	@ (800271c <compute_real_speed+0x2bc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	4a10      	ldr	r2, [pc, #64]	@ (8002720 <compute_real_speed+0x2c0>)
 80026de:	6013      	str	r3, [r2, #0]
	}
	return speed_real;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	ee07 3a90 	vmov	s15, r3
}
 80026e6:	eeb0 0a67 	vmov.f32	s0, s15
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bdb0      	pop	{r4, r5, r7, pc}
 80026f0:	54442d18 	.word	0x54442d18
 80026f4:	400921fb 	.word	0x400921fb
 80026f8:	25460aa6 	.word	0x25460aa6
 80026fc:	3f9a0275 	.word	0x3f9a0275
 8002700:	200002ac 	.word	0x200002ac
 8002704:	200009bc 	.word	0x200009bc
 8002708:	4094a000 	.word	0x4094a000
 800270c:	200002f8 	.word	0x200002f8
 8002710:	200009c0 	.word	0x200009c0
 8002714:	20000214 	.word	0x20000214
 8002718:	200009c4 	.word	0x200009c4
 800271c:	20000344 	.word	0x20000344
 8002720:	200009c8 	.word	0x200009c8

08002724 <log_to_uart>:

void log_to_uart(const char *msg) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7fd fda7 	bl	8000280 <strlen>
 8002732:	4603      	mov	r3, r0
 8002734:	b29a      	uxth	r2, r3
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4803      	ldr	r0, [pc, #12]	@ (800274c <log_to_uart+0x28>)
 800273e:	f005 faf5 	bl	8007d2c <HAL_UART_Transmit>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000574 	.word	0x20000574

08002750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002754:	b672      	cpsid	i
}
 8002756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <Error_Handler+0x8>

0800275c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002762:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <HAL_MspInit+0x44>)
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	4a0e      	ldr	r2, [pc, #56]	@ (80027a0 <HAL_MspInit+0x44>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6193      	str	r3, [r2, #24]
 800276e:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <HAL_MspInit+0x44>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <HAL_MspInit+0x44>)
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	4a08      	ldr	r2, [pc, #32]	@ (80027a0 <HAL_MspInit+0x44>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002784:	61d3      	str	r3, [r2, #28]
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_MspInit+0x44>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000

080027a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0d      	ldr	r2, [pc, #52]	@ (80027e8 <HAL_RTC_MspInit+0x44>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d111      	bne.n	80027da <HAL_RTC_MspInit+0x36>
 80027b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027ba:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027c4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b07      	ldr	r3, [pc, #28]	@ (80027ec <HAL_RTC_MspInit+0x48>)
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	461a      	mov	r2, r3
 80027d6:	2301      	movs	r3, #1
 80027d8:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40002800 	.word	0x40002800
 80027ec:	10908100 	.word	0x10908100

080027f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b092      	sub	sp, #72	@ 0x48
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a7d      	ldr	r2, [pc, #500]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x214>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d14e      	bne.n	80028b0 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002812:	4b7d      	ldr	r3, [pc, #500]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	4a7c      	ldr	r2, [pc, #496]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 8002818:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800281c:	6193      	str	r3, [r2, #24]
 800281e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002826:	633b      	str	r3, [r7, #48]	@ 0x30
 8002828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800282a:	4b77      	ldr	r3, [pc, #476]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4a76      	ldr	r2, [pc, #472]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 8002830:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002834:	6153      	str	r3, [r2, #20]
 8002836:	4b74      	ldr	r3, [pc, #464]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	4b71      	ldr	r3, [pc, #452]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	4a70      	ldr	r2, [pc, #448]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 8002848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800284c:	6153      	str	r3, [r2, #20]
 800284e:	4b6e      	ldr	r3, [pc, #440]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800285a:	2301      	movs	r3, #1
 800285c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2300      	movs	r3, #0
 8002868:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800286a:	2302      	movs	r3, #2
 800286c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002872:	4619      	mov	r1, r3
 8002874:	4865      	ldr	r0, [pc, #404]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x21c>)
 8002876:	f000 fdcf 	bl	8003418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800287a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800287e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800288c:	2306      	movs	r3, #6
 800288e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002894:	4619      	mov	r1, r3
 8002896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800289a:	f000 fdbd 	bl	8003418 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2100      	movs	r1, #0
 80028a2:	2019      	movs	r0, #25
 80028a4:	f000 fd05 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80028a8:	2019      	movs	r0, #25
 80028aa:	f000 fd1e 	bl	80032ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80028ae:	e0a5      	b.n	80029fc <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM3)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a56      	ldr	r2, [pc, #344]	@ (8002a10 <HAL_TIM_Encoder_MspInit+0x220>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d128      	bne.n	800290c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ba:	4b53      	ldr	r3, [pc, #332]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4a52      	ldr	r2, [pc, #328]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	61d3      	str	r3, [r2, #28]
 80028c6:	4b50      	ldr	r3, [pc, #320]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	4a4c      	ldr	r2, [pc, #304]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 80028d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028dc:	6153      	str	r3, [r2, #20]
 80028de:	4b4a      	ldr	r3, [pc, #296]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028e6:	623b      	str	r3, [r7, #32]
 80028e8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028ea:	230c      	movs	r3, #12
 80028ec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f6:	2300      	movs	r3, #0
 80028f8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028fa:	2302      	movs	r3, #2
 80028fc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002902:	4619      	mov	r1, r3
 8002904:	4843      	ldr	r0, [pc, #268]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x224>)
 8002906:	f000 fd87 	bl	8003418 <HAL_GPIO_Init>
}
 800290a:	e077      	b.n	80029fc <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM4)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a41      	ldr	r2, [pc, #260]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x228>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d145      	bne.n	80029a2 <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002916:	4b3c      	ldr	r3, [pc, #240]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	61d3      	str	r3, [r2, #28]
 8002922:	4b39      	ldr	r3, [pc, #228]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800292e:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	4a35      	ldr	r2, [pc, #212]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 8002934:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002938:	6153      	str	r3, [r2, #20]
 800293a:	4b33      	ldr	r3, [pc, #204]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002946:	4b30      	ldr	r3, [pc, #192]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	4a2f      	ldr	r2, [pc, #188]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 800294c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002950:	6153      	str	r3, [r2, #20]
 8002952:	4b2d      	ldr	r3, [pc, #180]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800295e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002962:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2300      	movs	r3, #0
 800296e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002970:	2302      	movs	r3, #2
 8002972:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002974:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002978:	4619      	mov	r1, r3
 800297a:	4828      	ldr	r0, [pc, #160]	@ (8002a1c <HAL_TIM_Encoder_MspInit+0x22c>)
 800297c:	f000 fd4c 	bl	8003418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002980:	2340      	movs	r3, #64	@ 0x40
 8002982:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002990:	2302      	movs	r3, #2
 8002992:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002994:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002998:	4619      	mov	r1, r3
 800299a:	4821      	ldr	r0, [pc, #132]	@ (8002a20 <HAL_TIM_Encoder_MspInit+0x230>)
 800299c:	f000 fd3c 	bl	8003418 <HAL_GPIO_Init>
}
 80029a0:	e02c      	b.n	80029fc <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM8)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a24 <HAL_TIM_Encoder_MspInit+0x234>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d127      	bne.n	80029fc <HAL_TIM_Encoder_MspInit+0x20c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029ac:	4b16      	ldr	r3, [pc, #88]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	4a15      	ldr	r2, [pc, #84]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 80029b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029b6:	6193      	str	r3, [r2, #24]
 80029b8:	4b13      	ldr	r3, [pc, #76]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c4:	4b10      	ldr	r3, [pc, #64]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 80029ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80029ce:	6153      	str	r3, [r2, #20]
 80029d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x218>)
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029dc:	23c0      	movs	r3, #192	@ 0xc0
 80029de:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80029ec:	2304      	movs	r3, #4
 80029ee:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029f4:	4619      	mov	r1, r3
 80029f6:	4805      	ldr	r0, [pc, #20]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x21c>)
 80029f8:	f000 fd0e 	bl	8003418 <HAL_GPIO_Init>
}
 80029fc:	bf00      	nop
 80029fe:	3748      	adds	r7, #72	@ 0x48
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	48000800 	.word	0x48000800
 8002a10:	40000400 	.word	0x40000400
 8002a14:	48001000 	.word	0x48001000
 8002a18:	40000800 	.word	0x40000800
 8002a1c:	48000c00 	.word	0x48000c00
 8002a20:	48000400 	.word	0x48000400
 8002a24:	40013400 	.word	0x40013400

08002a28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a38:	d10b      	bne.n	8002a52 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a3a:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <HAL_TIM_PWM_MspInit+0x38>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	4a08      	ldr	r2, [pc, #32]	@ (8002a60 <HAL_TIM_PWM_MspInit+0x38>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	61d3      	str	r3, [r2, #28]
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_TIM_PWM_MspInit+0x38>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000

08002a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa8 <HAL_TIM_Base_MspInit+0x44>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d113      	bne.n	8002a9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a76:	4b0d      	ldr	r3, [pc, #52]	@ (8002aac <HAL_TIM_Base_MspInit+0x48>)
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002aac <HAL_TIM_Base_MspInit+0x48>)
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a80:	6193      	str	r3, [r2, #24]
 8002a82:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <HAL_TIM_Base_MspInit+0x48>)
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2100      	movs	r1, #0
 8002a92:	2019      	movs	r0, #25
 8002a94:	f000 fc0d 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a98:	2019      	movs	r0, #25
 8002a9a:	f000 fc26 	bl	80032ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40014400 	.word	0x40014400
 8002aac:	40021000 	.word	0x40021000

08002ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	@ 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad0:	d139      	bne.n	8002b46 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b50 <HAL_TIM_MspPostInit+0xa0>)
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b50 <HAL_TIM_MspPostInit+0xa0>)
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002adc:	6153      	str	r3, [r2, #20]
 8002ade:	4b1c      	ldr	r3, [pc, #112]	@ (8002b50 <HAL_TIM_MspPostInit+0xa0>)
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <HAL_TIM_MspPostInit+0xa0>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	4a18      	ldr	r2, [pc, #96]	@ (8002b50 <HAL_TIM_MspPostInit+0xa0>)
 8002af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af4:	6153      	str	r3, [r2, #20]
 8002af6:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <HAL_TIM_MspPostInit+0xa0>)
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b02:	2303      	movs	r3, #3
 8002b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b12:	2301      	movs	r3, #1
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b16:	f107 0314 	add.w	r3, r7, #20
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b20:	f000 fc7a 	bl	8003418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b24:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b36:	2301      	movs	r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4804      	ldr	r0, [pc, #16]	@ (8002b54 <HAL_TIM_MspPostInit+0xa4>)
 8002b42:	f000 fc69 	bl	8003418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002b46:	bf00      	nop
 8002b48:	3728      	adds	r7, #40	@ 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	48000400 	.word	0x48000400

08002b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b090      	sub	sp, #64	@ 0x40
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a65      	ldr	r2, [pc, #404]	@ (8002d0c <HAL_UART_MspInit+0x1b4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d131      	bne.n	8002bde <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b7a:	4b65      	ldr	r3, [pc, #404]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	4a64      	ldr	r2, [pc, #400]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002b80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002b84:	61d3      	str	r3, [r2, #28]
 8002b86:	4b62      	ldr	r3, [pc, #392]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b92:	4b5f      	ldr	r3, [pc, #380]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	4a5e      	ldr	r2, [pc, #376]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002b98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002b9c:	6153      	str	r3, [r2, #20]
 8002b9e:	4b5c      	ldr	r3, [pc, #368]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002baa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002bbc:	2305      	movs	r3, #5
 8002bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4853      	ldr	r0, [pc, #332]	@ (8002d14 <HAL_UART_MspInit+0x1bc>)
 8002bc8:	f000 fc26 	bl	8003418 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2100      	movs	r1, #0
 8002bd0:	2034      	movs	r0, #52	@ 0x34
 8002bd2:	f000 fb6e 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002bd6:	2034      	movs	r0, #52	@ 0x34
 8002bd8:	f000 fb87 	bl	80032ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bdc:	e092      	b.n	8002d04 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a4d      	ldr	r2, [pc, #308]	@ (8002d18 <HAL_UART_MspInit+0x1c0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d130      	bne.n	8002c4a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002be8:	4b49      	ldr	r3, [pc, #292]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	4a48      	ldr	r2, [pc, #288]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002bee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf2:	6193      	str	r3, [r2, #24]
 8002bf4:	4b46      	ldr	r3, [pc, #280]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bfc:	623b      	str	r3, [r7, #32]
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c00:	4b43      	ldr	r3, [pc, #268]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	4a42      	ldr	r2, [pc, #264]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002c06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002c0a:	6153      	str	r3, [r2, #20]
 8002c0c:	4b40      	ldr	r3, [pc, #256]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002c18:	2330      	movs	r3, #48	@ 0x30
 8002c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c24:	2303      	movs	r3, #3
 8002c26:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c28:	2307      	movs	r3, #7
 8002c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c30:	4619      	mov	r1, r3
 8002c32:	4838      	ldr	r0, [pc, #224]	@ (8002d14 <HAL_UART_MspInit+0x1bc>)
 8002c34:	f000 fbf0 	bl	8003418 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	2025      	movs	r0, #37	@ 0x25
 8002c3e:	f000 fb38 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c42:	2025      	movs	r0, #37	@ 0x25
 8002c44:	f000 fb51 	bl	80032ea <HAL_NVIC_EnableIRQ>
}
 8002c48:	e05c      	b.n	8002d04 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a33      	ldr	r2, [pc, #204]	@ (8002d1c <HAL_UART_MspInit+0x1c4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d129      	bne.n	8002ca8 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c54:	4b2e      	ldr	r3, [pc, #184]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	4a2d      	ldr	r2, [pc, #180]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c5e:	61d3      	str	r3, [r2, #28]
 8002c60:	4b2b      	ldr	r3, [pc, #172]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6c:	4b28      	ldr	r3, [pc, #160]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	4a27      	ldr	r2, [pc, #156]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c76:	6153      	str	r3, [r2, #20]
 8002c78:	4b25      	ldr	r3, [pc, #148]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c84:	230c      	movs	r3, #12
 8002c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c90:	2303      	movs	r3, #3
 8002c92:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c94:	2307      	movs	r3, #7
 8002c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ca2:	f000 fbb9 	bl	8003418 <HAL_GPIO_Init>
}
 8002ca6:	e02d      	b.n	8002d04 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1c      	ldr	r2, [pc, #112]	@ (8002d20 <HAL_UART_MspInit+0x1c8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d128      	bne.n	8002d04 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cb2:	4b17      	ldr	r3, [pc, #92]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	4a16      	ldr	r2, [pc, #88]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cbc:	61d3      	str	r3, [r2, #28]
 8002cbe:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cca:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	4a10      	ldr	r2, [pc, #64]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002cd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cd4:	6153      	str	r3, [r2, #20]
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002ce2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cf4:	2307      	movs	r3, #7
 8002cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4809      	ldr	r0, [pc, #36]	@ (8002d24 <HAL_UART_MspInit+0x1cc>)
 8002d00:	f000 fb8a 	bl	8003418 <HAL_GPIO_Init>
}
 8002d04:	bf00      	nop
 8002d06:	3740      	adds	r7, #64	@ 0x40
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40004c00 	.word	0x40004c00
 8002d10:	40021000 	.word	0x40021000
 8002d14:	48000800 	.word	0x48000800
 8002d18:	40013800 	.word	0x40013800
 8002d1c:	40004400 	.word	0x40004400
 8002d20:	40004800 	.word	0x40004800
 8002d24:	48000c00 	.word	0x48000c00

08002d28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0d      	ldr	r2, [pc, #52]	@ (8002d6c <HAL_PCD_MspInit+0x44>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d113      	bne.n	8002d62 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <HAL_PCD_MspInit+0x48>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d70 <HAL_PCD_MspInit+0x48>)
 8002d40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d44:	61d3      	str	r3, [r2, #28]
 8002d46:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <HAL_PCD_MspInit+0x48>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	2100      	movs	r1, #0
 8002d56:	2014      	movs	r0, #20
 8002d58:	f000 faab 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8002d5c:	2014      	movs	r0, #20
 8002d5e:	f000 fac4 	bl	80032ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40005c00 	.word	0x40005c00
 8002d70:	40021000 	.word	0x40021000

08002d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d78:	bf00      	nop
 8002d7a:	e7fd      	b.n	8002d78 <NMI_Handler+0x4>

08002d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d80:	bf00      	nop
 8002d82:	e7fd      	b.n	8002d80 <HardFault_Handler+0x4>

08002d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d88:	bf00      	nop
 8002d8a:	e7fd      	b.n	8002d88 <MemManage_Handler+0x4>

08002d8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <BusFault_Handler+0x4>

08002d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d98:	bf00      	nop
 8002d9a:	e7fd      	b.n	8002d98 <UsageFault_Handler+0x4>

08002d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dca:	f000 f977 	bl	80030bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002dd8:	4802      	ldr	r0, [pc, #8]	@ (8002de4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002dda:	f000 fda0 	bl	800391e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200005fc 	.word	0x200005fc

08002de8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002dec:	4803      	ldr	r0, [pc, #12]	@ (8002dfc <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002dee:	f004 f891 	bl	8006f14 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002df2:	4803      	ldr	r0, [pc, #12]	@ (8002e00 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002df4:	f004 f88e 	bl	8006f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000214 	.word	0x20000214
 8002e00:	20000390 	.word	0x20000390

08002e04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e08:	4802      	ldr	r0, [pc, #8]	@ (8002e14 <USART1_IRQHandler+0x10>)
 8002e0a:	f005 f85d 	bl	8007ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000464 	.word	0x20000464

08002e18 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002e1c:	4802      	ldr	r0, [pc, #8]	@ (8002e28 <UART4_IRQHandler+0x10>)
 8002e1e:	f005 f853 	bl	8007ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	200003dc 	.word	0x200003dc

08002e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return 1;
 8002e30:	2301      	movs	r3, #1
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <_kill>:

int _kill(int pid, int sig)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e46:	f008 fe6d 	bl	800bb24 <__errno>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2216      	movs	r2, #22
 8002e4e:	601a      	str	r2, [r3, #0]
  return -1;
 8002e50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_exit>:

void _exit (int status)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e64:	f04f 31ff 	mov.w	r1, #4294967295
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ffe7 	bl	8002e3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e6e:	bf00      	nop
 8002e70:	e7fd      	b.n	8002e6e <_exit+0x12>

08002e72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e00a      	b.n	8002e9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e84:	f3af 8000 	nop.w
 8002e88:	4601      	mov	r1, r0
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	60ba      	str	r2, [r7, #8]
 8002e90:	b2ca      	uxtb	r2, r1
 8002e92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	3301      	adds	r3, #1
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	dbf0      	blt.n	8002e84 <_read+0x12>
  }

  return len;
 8002ea2:	687b      	ldr	r3, [r7, #4]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	e009      	b.n	8002ed2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	60ba      	str	r2, [r7, #8]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	dbf1      	blt.n	8002ebe <_write+0x12>
  }
  return len;
 8002eda:	687b      	ldr	r3, [r7, #4]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_close>:

int _close(int file)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002eec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f0c:	605a      	str	r2, [r3, #4]
  return 0;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <_isatty>:

int _isatty(int file)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f24:	2301      	movs	r3, #1
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f54:	4a14      	ldr	r2, [pc, #80]	@ (8002fa8 <_sbrk+0x5c>)
 8002f56:	4b15      	ldr	r3, [pc, #84]	@ (8002fac <_sbrk+0x60>)
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f60:	4b13      	ldr	r3, [pc, #76]	@ (8002fb0 <_sbrk+0x64>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <_sbrk+0x64>)
 8002f6a:	4a12      	ldr	r2, [pc, #72]	@ (8002fb4 <_sbrk+0x68>)
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f6e:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <_sbrk+0x64>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d207      	bcs.n	8002f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f7c:	f008 fdd2 	bl	800bb24 <__errno>
 8002f80:	4603      	mov	r3, r0
 8002f82:	220c      	movs	r2, #12
 8002f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8a:	e009      	b.n	8002fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f8c:	4b08      	ldr	r3, [pc, #32]	@ (8002fb0 <_sbrk+0x64>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f92:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	4a05      	ldr	r2, [pc, #20]	@ (8002fb0 <_sbrk+0x64>)
 8002f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20010000 	.word	0x20010000
 8002fac:	00000400 	.word	0x00000400
 8002fb0:	20000a1c 	.word	0x20000a1c
 8002fb4:	20000b70 	.word	0x20000b70

08002fb8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fbc:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <SystemInit+0x20>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc2:	4a05      	ldr	r2, [pc, #20]	@ (8002fd8 <SystemInit+0x20>)
 8002fc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003014 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fe0:	f7ff ffea 	bl	8002fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe4:	480c      	ldr	r0, [pc, #48]	@ (8003018 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fe6:	490d      	ldr	r1, [pc, #52]	@ (800301c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8003020 <LoopForever+0xe>)
  movs r3, #0
 8002fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fec:	e002      	b.n	8002ff4 <LoopCopyDataInit>

08002fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff2:	3304      	adds	r3, #4

08002ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff8:	d3f9      	bcc.n	8002fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8003024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8003028 <LoopForever+0x16>)
  movs r3, #0
 8002ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003000:	e001      	b.n	8003006 <LoopFillZerobss>

08003002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003004:	3204      	adds	r2, #4

08003006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003008:	d3fb      	bcc.n	8003002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800300a:	f008 fd91 	bl	800bb30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800300e:	f7fd ffb3 	bl	8000f78 <main>

08003012 <LoopForever>:

LoopForever:
    b LoopForever
 8003012:	e7fe      	b.n	8003012 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003014:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800301c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003020:	0800f6e0 	.word	0x0800f6e0
  ldr r2, =_sbss
 8003024:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003028:	20000b70 	.word	0x20000b70

0800302c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800302c:	e7fe      	b.n	800302c <ADC1_2_IRQHandler>
	...

08003030 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003034:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <HAL_Init+0x28>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a07      	ldr	r2, [pc, #28]	@ (8003058 <HAL_Init+0x28>)
 800303a:	f043 0310 	orr.w	r3, r3, #16
 800303e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003040:	2003      	movs	r0, #3
 8003042:	f000 f92b 	bl	800329c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003046:	2000      	movs	r0, #0
 8003048:	f000 f808 	bl	800305c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800304c:	f7ff fb86 	bl	800275c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40022000 	.word	0x40022000

0800305c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003064:	4b12      	ldr	r3, [pc, #72]	@ (80030b0 <HAL_InitTick+0x54>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b12      	ldr	r3, [pc, #72]	@ (80030b4 <HAL_InitTick+0x58>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	4619      	mov	r1, r3
 800306e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003072:	fbb3 f3f1 	udiv	r3, r3, r1
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f943 	bl	8003306 <HAL_SYSTICK_Config>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e00e      	b.n	80030a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b0f      	cmp	r3, #15
 800308e:	d80a      	bhi.n	80030a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003090:	2200      	movs	r2, #0
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	f04f 30ff 	mov.w	r0, #4294967295
 8003098:	f000 f90b 	bl	80032b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800309c:	4a06      	ldr	r2, [pc, #24]	@ (80030b8 <HAL_InitTick+0x5c>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000000 	.word	0x20000000
 80030b4:	20000008 	.word	0x20000008
 80030b8:	20000004 	.word	0x20000004

080030bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030c0:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_IncTick+0x20>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <HAL_IncTick+0x24>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	4a04      	ldr	r2, [pc, #16]	@ (80030e0 <HAL_IncTick+0x24>)
 80030ce:	6013      	str	r3, [r2, #0]
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000008 	.word	0x20000008
 80030e0:	20000a20 	.word	0x20000a20

080030e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80030e8:	4b03      	ldr	r3, [pc, #12]	@ (80030f8 <HAL_GetTick+0x14>)
 80030ea:	681b      	ldr	r3, [r3, #0]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000a20 	.word	0x20000a20

080030fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800310c:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003118:	4013      	ands	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003124:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800312c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312e:	4a04      	ldr	r2, [pc, #16]	@ (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	60d3      	str	r3, [r2, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003148:	4b04      	ldr	r3, [pc, #16]	@ (800315c <__NVIC_GetPriorityGrouping+0x18>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 0307 	and.w	r3, r3, #7
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	2b00      	cmp	r3, #0
 8003170:	db0b      	blt.n	800318a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	4907      	ldr	r1, [pc, #28]	@ (8003198 <__NVIC_EnableIRQ+0x38>)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2001      	movs	r0, #1
 8003182:	fa00 f202 	lsl.w	r2, r0, r2
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000e100 	.word	0xe000e100

0800319c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	db0a      	blt.n	80031c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	490c      	ldr	r1, [pc, #48]	@ (80031e8 <__NVIC_SetPriority+0x4c>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	440b      	add	r3, r1
 80031c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c4:	e00a      	b.n	80031dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4908      	ldr	r1, [pc, #32]	@ (80031ec <__NVIC_SetPriority+0x50>)
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	3b04      	subs	r3, #4
 80031d4:	0112      	lsls	r2, r2, #4
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	440b      	add	r3, r1
 80031da:	761a      	strb	r2, [r3, #24]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000e100 	.word	0xe000e100
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	@ 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f1c3 0307 	rsb	r3, r3, #7
 800320a:	2b04      	cmp	r3, #4
 800320c:	bf28      	it	cs
 800320e:	2304      	movcs	r3, #4
 8003210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3304      	adds	r3, #4
 8003216:	2b06      	cmp	r3, #6
 8003218:	d902      	bls.n	8003220 <NVIC_EncodePriority+0x30>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3b03      	subs	r3, #3
 800321e:	e000      	b.n	8003222 <NVIC_EncodePriority+0x32>
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	401a      	ands	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003238:	f04f 31ff 	mov.w	r1, #4294967295
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	43d9      	mvns	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003248:	4313      	orrs	r3, r2
         );
}
 800324a:	4618      	mov	r0, r3
 800324c:	3724      	adds	r7, #36	@ 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003268:	d301      	bcc.n	800326e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800326a:	2301      	movs	r3, #1
 800326c:	e00f      	b.n	800328e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326e:	4a0a      	ldr	r2, [pc, #40]	@ (8003298 <SysTick_Config+0x40>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003276:	210f      	movs	r1, #15
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f7ff ff8e 	bl	800319c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003280:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <SysTick_Config+0x40>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003286:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <SysTick_Config+0x40>)
 8003288:	2207      	movs	r2, #7
 800328a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	e000e010 	.word	0xe000e010

0800329c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff29 	bl	80030fc <__NVIC_SetPriorityGrouping>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c4:	f7ff ff3e 	bl	8003144 <__NVIC_GetPriorityGrouping>
 80032c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ff8e 	bl	80031f0 <NVIC_EncodePriority>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff5d 	bl	800319c <__NVIC_SetPriority>
}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff31 	bl	8003160 <__NVIC_EnableIRQ>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffa2 	bl	8003258 <SysTick_Config>
 8003314:	4603      	mov	r3, r0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e02e      	b.n	800338e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003336:	2b02      	cmp	r3, #2
 8003338:	d008      	beq.n	800334c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2204      	movs	r2, #4
 800333e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e020      	b.n	800338e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 020e 	bic.w	r2, r2, #14
 800335a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003374:	2101      	movs	r1, #1
 8003376:	fa01 f202 	lsl.w	r2, r1, r2
 800337a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d005      	beq.n	80033bc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2204      	movs	r2, #4
 80033b4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
 80033ba:	e027      	b.n	800340c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 020e 	bic.w	r2, r2, #14
 80033ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e4:	2101      	movs	r1, #1
 80033e6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ea:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4798      	blx	r3
    }
  }
  return status;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003426:	e160      	b.n	80036ea <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2101      	movs	r1, #1
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	4013      	ands	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8152 	beq.w	80036e4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d005      	beq.n	8003458 <HAL_GPIO_Init+0x40>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d130      	bne.n	80034ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800348e:	2201      	movs	r2, #1
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 0201 	and.w	r2, r3, #1
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d017      	beq.n	80034f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	2203      	movs	r2, #3
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d123      	bne.n	800354a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	08da      	lsrs	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3208      	adds	r2, #8
 800350a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	08da      	lsrs	r2, r3, #3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3208      	adds	r2, #8
 8003544:	6939      	ldr	r1, [r7, #16]
 8003546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	2203      	movs	r2, #3
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0203 	and.w	r2, r3, #3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80ac 	beq.w	80036e4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358c:	4b5e      	ldr	r3, [pc, #376]	@ (8003708 <HAL_GPIO_Init+0x2f0>)
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	4a5d      	ldr	r2, [pc, #372]	@ (8003708 <HAL_GPIO_Init+0x2f0>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6193      	str	r3, [r2, #24]
 8003598:	4b5b      	ldr	r3, [pc, #364]	@ (8003708 <HAL_GPIO_Init+0x2f0>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035a4:	4a59      	ldr	r2, [pc, #356]	@ (800370c <HAL_GPIO_Init+0x2f4>)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	3302      	adds	r3, #2
 80035ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	220f      	movs	r2, #15
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035ce:	d025      	beq.n	800361c <HAL_GPIO_Init+0x204>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a4f      	ldr	r2, [pc, #316]	@ (8003710 <HAL_GPIO_Init+0x2f8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d01f      	beq.n	8003618 <HAL_GPIO_Init+0x200>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a4e      	ldr	r2, [pc, #312]	@ (8003714 <HAL_GPIO_Init+0x2fc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d019      	beq.n	8003614 <HAL_GPIO_Init+0x1fc>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a4d      	ldr	r2, [pc, #308]	@ (8003718 <HAL_GPIO_Init+0x300>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d013      	beq.n	8003610 <HAL_GPIO_Init+0x1f8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a4c      	ldr	r2, [pc, #304]	@ (800371c <HAL_GPIO_Init+0x304>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00d      	beq.n	800360c <HAL_GPIO_Init+0x1f4>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a4b      	ldr	r2, [pc, #300]	@ (8003720 <HAL_GPIO_Init+0x308>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d007      	beq.n	8003608 <HAL_GPIO_Init+0x1f0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003724 <HAL_GPIO_Init+0x30c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d101      	bne.n	8003604 <HAL_GPIO_Init+0x1ec>
 8003600:	2306      	movs	r3, #6
 8003602:	e00c      	b.n	800361e <HAL_GPIO_Init+0x206>
 8003604:	2307      	movs	r3, #7
 8003606:	e00a      	b.n	800361e <HAL_GPIO_Init+0x206>
 8003608:	2305      	movs	r3, #5
 800360a:	e008      	b.n	800361e <HAL_GPIO_Init+0x206>
 800360c:	2304      	movs	r3, #4
 800360e:	e006      	b.n	800361e <HAL_GPIO_Init+0x206>
 8003610:	2303      	movs	r3, #3
 8003612:	e004      	b.n	800361e <HAL_GPIO_Init+0x206>
 8003614:	2302      	movs	r3, #2
 8003616:	e002      	b.n	800361e <HAL_GPIO_Init+0x206>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_GPIO_Init+0x206>
 800361c:	2300      	movs	r3, #0
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	f002 0203 	and.w	r2, r2, #3
 8003624:	0092      	lsls	r2, r2, #2
 8003626:	4093      	lsls	r3, r2
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800362e:	4937      	ldr	r1, [pc, #220]	@ (800370c <HAL_GPIO_Init+0x2f4>)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	3302      	adds	r3, #2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800363c:	4b3a      	ldr	r3, [pc, #232]	@ (8003728 <HAL_GPIO_Init+0x310>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	43db      	mvns	r3, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4013      	ands	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003660:	4a31      	ldr	r2, [pc, #196]	@ (8003728 <HAL_GPIO_Init+0x310>)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003666:	4b30      	ldr	r3, [pc, #192]	@ (8003728 <HAL_GPIO_Init+0x310>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	43db      	mvns	r3, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800368a:	4a27      	ldr	r2, [pc, #156]	@ (8003728 <HAL_GPIO_Init+0x310>)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003690:	4b25      	ldr	r3, [pc, #148]	@ (8003728 <HAL_GPIO_Init+0x310>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	43db      	mvns	r3, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80036b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003728 <HAL_GPIO_Init+0x310>)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003728 <HAL_GPIO_Init+0x310>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80036de:	4a12      	ldr	r2, [pc, #72]	@ (8003728 <HAL_GPIO_Init+0x310>)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	3301      	adds	r3, #1
 80036e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	fa22 f303 	lsr.w	r3, r2, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f47f ae97 	bne.w	8003428 <HAL_GPIO_Init+0x10>
  }
}
 80036fa:	bf00      	nop
 80036fc:	bf00      	nop
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	40021000 	.word	0x40021000
 800370c:	40010000 	.word	0x40010000
 8003710:	48000400 	.word	0x48000400
 8003714:	48000800 	.word	0x48000800
 8003718:	48000c00 	.word	0x48000c00
 800371c:	48001000 	.word	0x48001000
 8003720:	48001400 	.word	0x48001400
 8003724:	48001800 	.word	0x48001800
 8003728:	40010400 	.word	0x40010400

0800372c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]
 8003738:	4613      	mov	r3, r2
 800373a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800373c:	787b      	ldrb	r3, [r7, #1]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003742:	887a      	ldrh	r2, [r7, #2]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003748:	e002      	b.n	8003750 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800374a:	887a      	ldrh	r2, [r7, #2]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4013      	ands	r3, r2
 8003774:	041a      	lsls	r2, r3, #16
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	43d9      	mvns	r1, r3
 800377a:	887b      	ldrh	r3, [r7, #2]
 800377c:	400b      	ands	r3, r1
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	619a      	str	r2, [r3, #24]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e0b9      	b.n	8003916 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fab6 	bl	8002d28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2203      	movs	r2, #3
 80037c0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f005 fd2b 	bl	8009224 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	73fb      	strb	r3, [r7, #15]
 80037d2:	e03e      	b.n	8003852 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037d4:	7bfa      	ldrb	r2, [r7, #15]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	440b      	add	r3, r1
 80037e2:	3311      	adds	r3, #17
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	440b      	add	r3, r1
 80037f6:	3310      	adds	r3, #16
 80037f8:	7bfa      	ldrb	r2, [r7, #15]
 80037fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037fc:	7bfa      	ldrb	r2, [r7, #15]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	440b      	add	r3, r1
 800380a:	3313      	adds	r3, #19
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	440b      	add	r3, r1
 800381e:	3320      	adds	r3, #32
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003824:	7bfa      	ldrb	r2, [r7, #15]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	440b      	add	r3, r1
 8003832:	3324      	adds	r3, #36	@ 0x24
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	440b      	add	r3, r1
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	3301      	adds	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	791b      	ldrb	r3, [r3, #4]
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	429a      	cmp	r2, r3
 800385a:	d3bb      	bcc.n	80037d4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385c:	2300      	movs	r3, #0
 800385e:	73fb      	strb	r3, [r7, #15]
 8003860:	e044      	b.n	80038ec <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003862:	7bfa      	ldrb	r2, [r7, #15]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	440b      	add	r3, r1
 8003870:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003878:	7bfa      	ldrb	r2, [r7, #15]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	440b      	add	r3, r1
 8003886:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800388a:	7bfa      	ldrb	r2, [r7, #15]
 800388c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800388e:	7bfa      	ldrb	r2, [r7, #15]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	440b      	add	r3, r1
 800389c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	440b      	add	r3, r1
 80038b2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038ba:	7bfa      	ldrb	r2, [r7, #15]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	440b      	add	r3, r1
 80038c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038d0:	7bfa      	ldrb	r2, [r7, #15]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	440b      	add	r3, r1
 80038de:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	3301      	adds	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	791b      	ldrb	r3, [r3, #4]
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d3b5      	bcc.n	8003862 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3304      	adds	r3, #4
 80038fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003902:	f005 fcaa 	bl	800925a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f007 f879 	bl	800aa22 <USB_ReadInterrupts>
 8003930:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f930 	bl	8003ba2 <PCD_EP_ISR_Handler>

    return;
 8003942:	e0bd      	b.n	8003ac0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800394a:	2b00      	cmp	r3, #0
 800394c:	d013      	beq.n	8003976 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003956:	b29a      	uxth	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003960:	b292      	uxth	r2, r2
 8003962:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f8d9 	bl	8003b1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800396c:	2100      	movs	r1, #0
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f8f3 	bl	8003b5a <HAL_PCD_SetAddress>

    return;
 8003974:	e0a4      	b.n	8003ac0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003988:	b29a      	uxth	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003992:	b292      	uxth	r2, r2
 8003994:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003998:	e092      	b.n	8003ac0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00c      	beq.n	80039be <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039b6:	b292      	uxth	r2, r2
 80039b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80039bc:	e080      	b.n	8003ac0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d027      	beq.n	8003a18 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	b292      	uxth	r2, r2
 80039dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0208 	bic.w	r2, r2, #8
 80039f2:	b292      	uxth	r2, r2
 80039f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f8a4 	bl	8003b46 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a10:	b292      	uxth	r2, r2
 8003a12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003a16:	e053      	b.n	8003ac0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d027      	beq.n	8003a72 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0208 	orr.w	r2, r2, #8
 8003a34:	b292      	uxth	r2, r2
 8003a36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a4c:	b292      	uxth	r2, r2
 8003a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0204 	orr.w	r2, r2, #4
 8003a64:	b292      	uxth	r2, r2
 8003a66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f861 	bl	8003b32 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a70:	e026      	b.n	8003ac0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00f      	beq.n	8003a9c <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003a8e:	b292      	uxth	r2, r2
 8003a90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f838 	bl	8003b0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a9a:	e011      	b.n	8003ac0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00c      	beq.n	8003ac0 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ab8:	b292      	uxth	r2, r2
 8003aba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003abe:	bf00      	nop
  }
}
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_PCD_SetAddress+0x1a>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e012      	b.n	8003b9a <HAL_PCD_SetAddress+0x40>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f006 ff35 	bl	800a9fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b096      	sub	sp, #88	@ 0x58
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003baa:	e3ad      	b.n	8004308 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bb4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003bb8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8003bc6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 816f 	bne.w	8003eae <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003bd0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d14c      	bne.n	8003c76 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bec:	81fb      	strh	r3, [r7, #14]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	89fb      	ldrh	r3, [r7, #14]
 8003bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3310      	adds	r3, #16
 8003c04:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	441a      	add	r2, r3
 8003c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c3a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff ff4d 	bl	8003ade <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	7b1b      	ldrb	r3, [r3, #12]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 835c 	beq.w	8004308 <PCD_EP_ISR_Handler+0x766>
 8003c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 8357 	bne.w	8004308 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	7b1b      	ldrb	r3, [r3, #12]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	731a      	strb	r2, [r3, #12]
 8003c74:	e348      	b.n	8004308 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c7c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c88:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d032      	beq.n	8003cfa <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	4413      	add	r3, r2
 8003cae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ccc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f006 fef9 	bl	800aac6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	823b      	strh	r3, [r7, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	8a3a      	ldrh	r2, [r7, #16]
 8003cea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cee:	b292      	uxth	r2, r2
 8003cf0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff feff 	bl	8003af6 <HAL_PCD_SetupStageCallback>
 8003cf8:	e306      	b.n	8004308 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003cfa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f280 8302 	bge.w	8004308 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003d10:	4013      	ands	r3, r2
 8003d12:	83fb      	strh	r3, [r7, #30]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	8bfa      	ldrh	r2, [r7, #30]
 8003d1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d1e:	b292      	uxth	r2, r2
 8003d20:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d48:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d019      	beq.n	8003d86 <PCD_EP_ISR_Handler+0x1e4>
 8003d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d015      	beq.n	8003d86 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d60:	6959      	ldr	r1, [r3, #20]
 8003d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d64:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d68:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f006 feab 	bl	800aac6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	441a      	add	r2, r3
 8003d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d7e:	2100      	movs	r1, #0
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff fea0 	bl	8003ac6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003d90:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f040 82b5 	bne.w	8004308 <PCD_EP_ISR_Handler+0x766>
 8003d9e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003da2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003da6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003daa:	f000 82ad 	beq.w	8004308 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	61bb      	str	r3, [r7, #24]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	801a      	strh	r2, [r3, #0]
 8003dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <PCD_EP_ISR_Handler+0x25a>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	e039      	b.n	8003e70 <PCD_EP_ISR_Handler+0x2ce>
 8003dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e02:	d818      	bhi.n	8003e36 <PCD_EP_ISR_Handler+0x294>
 8003e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <PCD_EP_ISR_Handler+0x27c>
 8003e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	029b      	lsls	r3, r3, #10
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	e01c      	b.n	8003e70 <PCD_EP_ISR_Handler+0x2ce>
 8003e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <PCD_EP_ISR_Handler+0x2ae>
 8003e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	029b      	lsls	r3, r3, #10
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e80:	827b      	strh	r3, [r7, #18]
 8003e82:	8a7b      	ldrh	r3, [r7, #18]
 8003e84:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003e88:	827b      	strh	r3, [r7, #18]
 8003e8a:	8a7b      	ldrh	r3, [r7, #18]
 8003e8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e90:	827b      	strh	r3, [r7, #18]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	8a7b      	ldrh	r3, [r7, #18]
 8003e98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	8013      	strh	r3, [r2, #0]
 8003eac:	e22c      	b.n	8004308 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ec2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f280 80f6 	bge.w	80040b8 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8003efa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003efe:	b292      	uxth	r2, r2
 8003f00:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003f02:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	4413      	add	r3, r2
 8003f16:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f1a:	7b1b      	ldrb	r3, [r3, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d123      	bne.n	8003f68 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f44:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003f48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 808e 	beq.w	800406e <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f58:	6959      	ldr	r1, [r3, #20]
 8003f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f5c:	88da      	ldrh	r2, [r3, #6]
 8003f5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f62:	f006 fdb0 	bl	800aac6 <USB_ReadPMA>
 8003f66:	e082      	b.n	800406e <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f6a:	78db      	ldrb	r3, [r3, #3]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d10a      	bne.n	8003f86 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003f70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003f74:	461a      	mov	r2, r3
 8003f76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f9d3 	bl	8004324 <HAL_PCD_EP_DB_Receive>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003f84:	e073      	b.n	800406e <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	441a      	add	r2, r3
 8003fb2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d022      	beq.n	800402a <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004008:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800400c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004010:	2b00      	cmp	r3, #0
 8004012:	d02c      	beq.n	800406e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401a:	6959      	ldr	r1, [r3, #20]
 800401c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401e:	891a      	ldrh	r2, [r3, #8]
 8004020:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004024:	f006 fd4f 	bl	800aac6 <USB_ReadPMA>
 8004028:	e021      	b.n	800406e <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004032:	b29b      	uxth	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	4413      	add	r3, r2
 8004044:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800404e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004052:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004060:	6959      	ldr	r1, [r3, #20]
 8004062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004064:	895a      	ldrh	r2, [r3, #10]
 8004066:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800406a:	f006 fd2c 	bl	800aac6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800406e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004070:	69da      	ldr	r2, [r3, #28]
 8004072:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004076:	441a      	add	r2, r3
 8004078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800407c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004084:	441a      	add	r2, r3
 8004086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004088:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800408a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <PCD_EP_ISR_Handler+0x4fc>
 8004092:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	429a      	cmp	r2, r3
 800409c:	d206      	bcs.n	80040ac <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800409e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	4619      	mov	r1, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff fd0e 	bl	8003ac6 <HAL_PCD_DataOutStageCallback>
 80040aa:	e005      	b.n	80040b8 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040b2:	4618      	mov	r0, r3
 80040b4:	f005 f8ef 	bl	8009296 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80040b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80040bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8121 	beq.w	8004308 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80040c6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	3310      	adds	r3, #16
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4413      	add	r3, r2
 80040d8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80040f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	441a      	add	r2, r3
 8004106:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800410a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800410e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004112:	b29b      	uxth	r3, r3
 8004114:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004118:	78db      	ldrb	r3, [r3, #3]
 800411a:	2b01      	cmp	r3, #1
 800411c:	f040 80a2 	bne.w	8004264 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8004120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004122:	2200      	movs	r2, #0
 8004124:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004128:	7b1b      	ldrb	r3, [r3, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 8093 	beq.w	8004256 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004130:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d046      	beq.n	80041ca <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800413c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800413e:	785b      	ldrb	r3, [r3, #1]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d126      	bne.n	8004192 <PCD_EP_ISR_Handler+0x5f0>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004152:	b29b      	uxth	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	4413      	add	r3, r2
 800415a:	627b      	str	r3, [r7, #36]	@ 0x24
 800415c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	00da      	lsls	r2, r3, #3
 8004162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004164:	4413      	add	r3, r2
 8004166:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800416a:	623b      	str	r3, [r7, #32]
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004176:	b29a      	uxth	r2, r3
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	801a      	strh	r2, [r3, #0]
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800418a:	b29a      	uxth	r2, r3
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	801a      	strh	r2, [r3, #0]
 8004190:	e061      	b.n	8004256 <PCD_EP_ISR_Handler+0x6b4>
 8004192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004194:	785b      	ldrb	r3, [r3, #1]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d15d      	bne.n	8004256 <PCD_EP_ISR_Handler+0x6b4>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ae:	4413      	add	r3, r2
 80041b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	00da      	lsls	r2, r3, #3
 80041b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ba:	4413      	add	r3, r2
 80041bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80041c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c4:	2200      	movs	r2, #0
 80041c6:	801a      	strh	r2, [r3, #0]
 80041c8:	e045      	b.n	8004256 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d126      	bne.n	8004226 <PCD_EP_ISR_Handler+0x684>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ec:	4413      	add	r3, r2
 80041ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80041f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	00da      	lsls	r2, r3, #3
 80041f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f8:	4413      	add	r3, r2
 80041fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800420a:	b29a      	uxth	r2, r3
 800420c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420e:	801a      	strh	r2, [r3, #0]
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800421a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800421e:	b29a      	uxth	r2, r3
 8004220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004222:	801a      	strh	r2, [r3, #0]
 8004224:	e017      	b.n	8004256 <PCD_EP_ISR_Handler+0x6b4>
 8004226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004228:	785b      	ldrb	r3, [r3, #1]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d113      	bne.n	8004256 <PCD_EP_ISR_Handler+0x6b4>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004236:	b29b      	uxth	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800423c:	4413      	add	r3, r2
 800423e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	00da      	lsls	r2, r3, #3
 8004246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004248:	4413      	add	r3, r2
 800424a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800424e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004252:	2200      	movs	r2, #0
 8004254:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	4619      	mov	r1, r3
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff fc3e 	bl	8003ade <HAL_PCD_DataInStageCallback>
 8004262:	e051      	b.n	8004308 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004264:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d144      	bne.n	80042fa <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004278:	b29b      	uxth	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	4413      	add	r3, r2
 800428a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004294:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800429a:	699a      	ldr	r2, [r3, #24]
 800429c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d907      	bls.n	80042b4 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80042a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a6:	699a      	ldr	r2, [r3, #24]
 80042a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80042ac:	1ad2      	subs	r2, r2, r3
 80042ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b0:	619a      	str	r2, [r3, #24]
 80042b2:	e002      	b.n	80042ba <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80042b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b6:	2200      	movs	r2, #0
 80042b8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80042ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	4619      	mov	r1, r3
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff fc08 	bl	8003ade <HAL_PCD_DataInStageCallback>
 80042ce:	e01b      	b.n	8004308 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80042d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80042d8:	441a      	add	r2, r3
 80042da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042dc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80042de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e0:	69da      	ldr	r2, [r3, #28]
 80042e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80042e6:	441a      	add	r2, r3
 80042e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ea:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042f2:	4618      	mov	r0, r3
 80042f4:	f004 ffcf 	bl	8009296 <USB_EPStartXfer>
 80042f8:	e006      	b.n	8004308 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80042fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80042fe:	461a      	mov	r2, r3
 8004300:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f917 	bl	8004536 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004310:	b29b      	uxth	r3, r3
 8004312:	b21b      	sxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	f6ff ac49 	blt.w	8003bac <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3758      	adds	r7, #88	@ 0x58
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	4613      	mov	r3, r2
 8004330:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d07c      	beq.n	8004436 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004344:	b29b      	uxth	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	4413      	add	r3, r2
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	4413      	add	r3, r2
 8004356:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004360:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	8b7b      	ldrh	r3, [r7, #26]
 8004368:	429a      	cmp	r2, r3
 800436a:	d306      	bcc.n	800437a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	8b7b      	ldrh	r3, [r7, #26]
 8004372:	1ad2      	subs	r2, r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	619a      	str	r2, [r3, #24]
 8004378:	e002      	b.n	8004380 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2200      	movs	r2, #0
 800437e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d123      	bne.n	80043d0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800439e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a2:	833b      	strh	r3, [r7, #24]
 80043a4:	8b3b      	ldrh	r3, [r7, #24]
 80043a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80043aa:	833b      	strh	r3, [r7, #24]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	441a      	add	r2, r3
 80043ba:	8b3b      	ldrh	r3, [r7, #24]
 80043bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d01f      	beq.n	800441a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043f4:	82fb      	strh	r3, [r7, #22]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	441a      	add	r2, r3
 8004404:	8afb      	ldrh	r3, [r7, #22]
 8004406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800440a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800440e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004412:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004416:	b29b      	uxth	r3, r3
 8004418:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800441a:	8b7b      	ldrh	r3, [r7, #26]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8085 	beq.w	800452c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6959      	ldr	r1, [r3, #20]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	891a      	ldrh	r2, [r3, #8]
 800442e:	8b7b      	ldrh	r3, [r7, #26]
 8004430:	f006 fb49 	bl	800aac6 <USB_ReadPMA>
 8004434:	e07a      	b.n	800452c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800443e:	b29b      	uxth	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	4413      	add	r3, r2
 8004450:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800445a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	699a      	ldr	r2, [r3, #24]
 8004460:	8b7b      	ldrh	r3, [r7, #26]
 8004462:	429a      	cmp	r2, r3
 8004464:	d306      	bcc.n	8004474 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	8b7b      	ldrh	r3, [r7, #26]
 800446c:	1ad2      	subs	r2, r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	619a      	str	r2, [r3, #24]
 8004472:	e002      	b.n	800447a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2200      	movs	r2, #0
 8004478:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d123      	bne.n	80044ca <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	b29b      	uxth	r3, r3
 8004494:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800449c:	83fb      	strh	r3, [r7, #30]
 800449e:	8bfb      	ldrh	r3, [r7, #30]
 80044a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044a4:	83fb      	strh	r3, [r7, #30]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	441a      	add	r2, r3
 80044b4:	8bfb      	ldrh	r3, [r7, #30]
 80044b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d11f      	bne.n	8004514 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ee:	83bb      	strh	r3, [r7, #28]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	441a      	add	r2, r3
 80044fe:	8bbb      	ldrh	r3, [r7, #28]
 8004500:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004504:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800450c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004510:	b29b      	uxth	r3, r3
 8004512:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004514:	8b7b      	ldrh	r3, [r7, #26]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6959      	ldr	r1, [r3, #20]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	895a      	ldrh	r2, [r3, #10]
 8004526:	8b7b      	ldrh	r3, [r7, #26]
 8004528:	f006 facd 	bl	800aac6 <USB_ReadPMA>
    }
  }

  return count;
 800452c:	8b7b      	ldrh	r3, [r7, #26]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b0a4      	sub	sp, #144	@ 0x90
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	4613      	mov	r3, r2
 8004542:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004544:	88fb      	ldrh	r3, [r7, #6]
 8004546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 81db 	beq.w	8004906 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004558:	b29b      	uxth	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	4413      	add	r3, r2
 800456a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004574:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004580:	429a      	cmp	r2, r3
 8004582:	d907      	bls.n	8004594 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	699a      	ldr	r2, [r3, #24]
 8004588:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800458c:	1ad2      	subs	r2, r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	619a      	str	r2, [r3, #24]
 8004592:	e002      	b.n	800459a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f040 80b9 	bne.w	8004716 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	785b      	ldrb	r3, [r3, #1]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d126      	bne.n	80045fa <HAL_PCD_EP_DB_Transmit+0xc4>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c0:	4413      	add	r3, r2
 80045c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	00da      	lsls	r2, r3, #3
 80045ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045cc:	4413      	add	r3, r2
 80045ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045de:	b29a      	uxth	r2, r3
 80045e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e2:	801a      	strh	r2, [r3, #0]
 80045e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f6:	801a      	strh	r2, [r3, #0]
 80045f8:	e01a      	b.n	8004630 <HAL_PCD_EP_DB_Transmit+0xfa>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	785b      	ldrb	r3, [r3, #1]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d116      	bne.n	8004630 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	637b      	str	r3, [r7, #52]	@ 0x34
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004610:	b29b      	uxth	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004616:	4413      	add	r3, r2
 8004618:	637b      	str	r3, [r7, #52]	@ 0x34
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	00da      	lsls	r2, r3, #3
 8004620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004622:	4413      	add	r3, r2
 8004624:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004628:	633b      	str	r3, [r7, #48]	@ 0x30
 800462a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462c:	2200      	movs	r2, #0
 800462e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	785b      	ldrb	r3, [r3, #1]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d126      	bne.n	800468c <HAL_PCD_EP_DB_Transmit+0x156>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	61fb      	str	r3, [r7, #28]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800464c:	b29b      	uxth	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	4413      	add	r3, r2
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	00da      	lsls	r2, r3, #3
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	4413      	add	r3, r2
 8004660:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004670:	b29a      	uxth	r2, r3
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	801a      	strh	r2, [r3, #0]
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004684:	b29a      	uxth	r2, r3
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	e017      	b.n	80046bc <HAL_PCD_EP_DB_Transmit+0x186>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	785b      	ldrb	r3, [r3, #1]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d113      	bne.n	80046bc <HAL_PCD_EP_DB_Transmit+0x186>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800469c:	b29b      	uxth	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	4413      	add	r3, r2
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	00da      	lsls	r2, r3, #3
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	4413      	add	r3, r2
 80046b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046b4:	623b      	str	r3, [r7, #32]
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	2200      	movs	r2, #0
 80046ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	4619      	mov	r1, r3
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff fa0b 	bl	8003ade <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 82fa 	beq.w	8004cc8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ee:	82fb      	strh	r3, [r7, #22]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	441a      	add	r2, r3
 80046fe:	8afb      	ldrh	r3, [r7, #22]
 8004700:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004704:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004708:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800470c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004710:	b29b      	uxth	r3, r3
 8004712:	8013      	strh	r3, [r2, #0]
 8004714:	e2d8      	b.n	8004cc8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d021      	beq.n	8004764 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	b29b      	uxth	r3, r3
 8004732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	441a      	add	r2, r3
 800474c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004750:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004754:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004758:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800475c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004760:	b29b      	uxth	r3, r3
 8004762:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800476a:	2b01      	cmp	r3, #1
 800476c:	f040 82ac 	bne.w	8004cc8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	695a      	ldr	r2, [r3, #20]
 8004774:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004778:	441a      	add	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004786:	441a      	add	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	6a1a      	ldr	r2, [r3, #32]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	429a      	cmp	r2, r3
 8004796:	d30b      	bcc.n	80047b0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6a1a      	ldr	r2, [r3, #32]
 80047a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047a8:	1ad2      	subs	r2, r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	621a      	str	r2, [r3, #32]
 80047ae:	e017      	b.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d108      	bne.n	80047ca <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80047b8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80047bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80047c8:	e00a      	b.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2200      	movs	r2, #0
 80047de:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	785b      	ldrb	r3, [r3, #1]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d165      	bne.n	80048b4 <HAL_PCD_EP_DB_Transmit+0x37e>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047fc:	4413      	add	r3, r2
 80047fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	00da      	lsls	r2, r3, #3
 8004806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004808:	4413      	add	r3, r2
 800480a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800480e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800481a:	b29a      	uxth	r2, r3
 800481c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481e:	801a      	strh	r2, [r3, #0]
 8004820:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <HAL_PCD_EP_DB_Transmit+0x308>
 8004828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004836:	b29a      	uxth	r2, r3
 8004838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483a:	801a      	strh	r2, [r3, #0]
 800483c:	e057      	b.n	80048ee <HAL_PCD_EP_DB_Transmit+0x3b8>
 800483e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004842:	2b3e      	cmp	r3, #62	@ 0x3e
 8004844:	d818      	bhi.n	8004878 <HAL_PCD_EP_DB_Transmit+0x342>
 8004846:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800484a:	085b      	lsrs	r3, r3, #1
 800484c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800484e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_PCD_EP_DB_Transmit+0x32a>
 800485a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800485c:	3301      	adds	r3, #1
 800485e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29a      	uxth	r2, r3
 8004866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004868:	b29b      	uxth	r3, r3
 800486a:	029b      	lsls	r3, r3, #10
 800486c:	b29b      	uxth	r3, r3
 800486e:	4313      	orrs	r3, r2
 8004870:	b29a      	uxth	r2, r3
 8004872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004874:	801a      	strh	r2, [r3, #0]
 8004876:	e03a      	b.n	80048ee <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004878:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004880:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <HAL_PCD_EP_DB_Transmit+0x35c>
 800488c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800488e:	3b01      	subs	r3, #1
 8004890:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29a      	uxth	r2, r3
 8004898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800489a:	b29b      	uxth	r3, r3
 800489c:	029b      	lsls	r3, r3, #10
 800489e:	b29b      	uxth	r3, r3
 80048a0:	4313      	orrs	r3, r2
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b0:	801a      	strh	r2, [r3, #0]
 80048b2:	e01c      	b.n	80048ee <HAL_PCD_EP_DB_Transmit+0x3b8>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	785b      	ldrb	r3, [r3, #1]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d118      	bne.n	80048ee <HAL_PCD_EP_DB_Transmit+0x3b8>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048d0:	4413      	add	r3, r2
 80048d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	00da      	lsls	r2, r3, #3
 80048da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048dc:	4413      	add	r3, r2
 80048de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80048e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80048e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048ec:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	6959      	ldr	r1, [r3, #20]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	891a      	ldrh	r2, [r3, #8]
 80048fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f006 f89f 	bl	800aa42 <USB_WritePMA>
 8004904:	e1e0      	b.n	8004cc8 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800490e:	b29b      	uxth	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4413      	add	r3, r2
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	4413      	add	r3, r2
 8004920:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800492a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004936:	429a      	cmp	r2, r3
 8004938:	d307      	bcc.n	800494a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004942:	1ad2      	subs	r2, r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	619a      	str	r2, [r3, #24]
 8004948:	e002      	b.n	8004950 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2200      	movs	r2, #0
 800494e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	f040 80c0 	bne.w	8004ada <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	785b      	ldrb	r3, [r3, #1]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d126      	bne.n	80049b0 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004970:	b29b      	uxth	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004976:	4413      	add	r3, r2
 8004978:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	00da      	lsls	r2, r3, #3
 8004980:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004982:	4413      	add	r3, r2
 8004984:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004988:	67bb      	str	r3, [r7, #120]	@ 0x78
 800498a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004994:	b29a      	uxth	r2, r3
 8004996:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004998:	801a      	strh	r2, [r3, #0]
 800499a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049ac:	801a      	strh	r2, [r3, #0]
 80049ae:	e01a      	b.n	80049e6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	785b      	ldrb	r3, [r3, #1]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d116      	bne.n	80049e6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049cc:	4413      	add	r3, r2
 80049ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	00da      	lsls	r2, r3, #3
 80049d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049d8:	4413      	add	r3, r2
 80049da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049de:	663b      	str	r3, [r7, #96]	@ 0x60
 80049e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049e2:	2200      	movs	r2, #0
 80049e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	785b      	ldrb	r3, [r3, #1]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d12b      	bne.n	8004a4c <HAL_PCD_EP_DB_Transmit+0x516>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a08:	4413      	add	r3, r2
 8004a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	00da      	lsls	r2, r3, #3
 8004a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a14:	4413      	add	r3, r2
 8004a16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a30:	801a      	strh	r2, [r3, #0]
 8004a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a48:	801a      	strh	r2, [r3, #0]
 8004a4a:	e017      	b.n	8004a7c <HAL_PCD_EP_DB_Transmit+0x546>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d113      	bne.n	8004a7c <HAL_PCD_EP_DB_Transmit+0x546>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a62:	4413      	add	r3, r2
 8004a64:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	00da      	lsls	r2, r3, #3
 8004a6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a6e:	4413      	add	r3, r2
 8004a70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a74:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a78:	2200      	movs	r2, #0
 8004a7a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	4619      	mov	r1, r3
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f7ff f82b 	bl	8003ade <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a88:	88fb      	ldrh	r3, [r7, #6]
 8004a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 811a 	bne.w	8004cc8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aae:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	441a      	add	r2, r3
 8004ac0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004ac4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ac8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004acc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8013      	strh	r3, [r2, #0]
 8004ad8:	e0f6      	b.n	8004cc8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d121      	bne.n	8004b28 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	441a      	add	r2, r3
 8004b10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004b14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	f040 80ca 	bne.w	8004cc8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004b3c:	441a      	add	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	69da      	ldr	r2, [r3, #28]
 8004b46:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004b4a:	441a      	add	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6a1a      	ldr	r2, [r3, #32]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d30b      	bcc.n	8004b74 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	6a1a      	ldr	r2, [r3, #32]
 8004b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b6c:	1ad2      	subs	r2, r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	621a      	str	r2, [r3, #32]
 8004b72:	e017      	b.n	8004ba4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d108      	bne.n	8004b8e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004b7c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004b8c:	e00a      	b.n	8004ba4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	785b      	ldrb	r3, [r3, #1]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d165      	bne.n	8004c7e <HAL_PCD_EP_DB_Transmit+0x748>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bc6:	4413      	add	r3, r2
 8004bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	00da      	lsls	r2, r3, #3
 8004bd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004bd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004be8:	801a      	strh	r2, [r3, #0]
 8004bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8004bf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c04:	801a      	strh	r2, [r3, #0]
 8004c06:	e054      	b.n	8004cb2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c0e:	d818      	bhi.n	8004c42 <HAL_PCD_EP_DB_Transmit+0x70c>
 8004c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <HAL_PCD_EP_DB_Transmit+0x6f4>
 8004c24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c26:	3301      	adds	r3, #1
 8004c28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	029b      	lsls	r3, r3, #10
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c3e:	801a      	strh	r2, [r3, #0]
 8004c40:	e037      	b.n	8004cb2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c4e:	f003 031f 	and.w	r3, r3, #31
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d102      	bne.n	8004c5c <HAL_PCD_EP_DB_Transmit+0x726>
 8004c56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	029b      	lsls	r3, r3, #10
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c7a:	801a      	strh	r2, [r3, #0]
 8004c7c:	e019      	b.n	8004cb2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	785b      	ldrb	r3, [r3, #1]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d115      	bne.n	8004cb2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c94:	4413      	add	r3, r2
 8004c96:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	00da      	lsls	r2, r3, #3
 8004c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ca6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cb0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6959      	ldr	r1, [r3, #20]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	895a      	ldrh	r2, [r3, #10]
 8004cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f005 febd 	bl	800aa42 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ce2:	82bb      	strh	r3, [r7, #20]
 8004ce4:	8abb      	ldrh	r3, [r7, #20]
 8004ce6:	f083 0310 	eor.w	r3, r3, #16
 8004cea:	82bb      	strh	r3, [r7, #20]
 8004cec:	8abb      	ldrh	r3, [r7, #20]
 8004cee:	f083 0320 	eor.w	r3, r3, #32
 8004cf2:	82bb      	strh	r3, [r7, #20]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	441a      	add	r2, r3
 8004d02:	8abb      	ldrh	r3, [r7, #20]
 8004d04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3790      	adds	r7, #144	@ 0x90
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d34:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d102      	bne.n	8004d4a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	f001 b83a 	b.w	8005dbe <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 816f 	beq.w	800503e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004d60:	4bb5      	ldr	r3, [pc, #724]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 030c 	and.w	r3, r3, #12
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d00c      	beq.n	8004d86 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d6c:	4bb2      	ldr	r3, [pc, #712]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 030c 	and.w	r3, r3, #12
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d15c      	bne.n	8004e32 <HAL_RCC_OscConfig+0x10e>
 8004d78:	4baf      	ldr	r3, [pc, #700]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d84:	d155      	bne.n	8004e32 <HAL_RCC_OscConfig+0x10e>
 8004d86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d8a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004d92:	fa93 f3a3 	rbit	r3, r3
 8004d96:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 8004d9a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d9e:	fab3 f383 	clz	r3, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d102      	bne.n	8004db8 <HAL_RCC_OscConfig+0x94>
 8004db2:	4ba1      	ldr	r3, [pc, #644]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	e015      	b.n	8004de4 <HAL_RCC_OscConfig+0xc0>
 8004db8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004dbc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8004dc4:	fa93 f3a3 	rbit	r3, r3
 8004dc8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8004dcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004dd0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004dd4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004dd8:	fa93 f3a3 	rbit	r3, r3
 8004ddc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004de0:	4b95      	ldr	r3, [pc, #596]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004de8:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8004dec:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8004df0:	fa92 f2a2 	rbit	r2, r2
 8004df4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8004df8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004dfc:	fab2 f282 	clz	r2, r2
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	f042 0220 	orr.w	r2, r2, #32
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	f002 021f 	and.w	r2, r2, #31
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e12:	4013      	ands	r3, r2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8111 	beq.w	800503c <HAL_RCC_OscConfig+0x318>
 8004e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f040 8108 	bne.w	800503c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f000 bfc6 	b.w	8005dbe <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e36:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e42:	d106      	bne.n	8004e52 <HAL_RCC_OscConfig+0x12e>
 8004e44:	4b7c      	ldr	r3, [pc, #496]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a7b      	ldr	r2, [pc, #492]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	e036      	b.n	8004ec0 <HAL_RCC_OscConfig+0x19c>
 8004e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e56:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x158>
 8004e62:	4b75      	ldr	r3, [pc, #468]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a74      	ldr	r2, [pc, #464]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	4b72      	ldr	r3, [pc, #456]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a71      	ldr	r2, [pc, #452]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004e74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e021      	b.n	8004ec0 <HAL_RCC_OscConfig+0x19c>
 8004e7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x184>
 8004e8e:	4b6a      	ldr	r3, [pc, #424]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a69      	ldr	r2, [pc, #420]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	4b67      	ldr	r3, [pc, #412]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a66      	ldr	r2, [pc, #408]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	e00b      	b.n	8004ec0 <HAL_RCC_OscConfig+0x19c>
 8004ea8:	4b63      	ldr	r3, [pc, #396]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a62      	ldr	r2, [pc, #392]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	4b60      	ldr	r3, [pc, #384]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a5f      	ldr	r2, [pc, #380]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ebe:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ec0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ec4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d059      	beq.n	8004f84 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed0:	f7fe f908 	bl	80030e4 <HAL_GetTick>
 8004ed4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed8:	e00a      	b.n	8004ef0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eda:	f7fe f903 	bl	80030e4 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	@ 0x64
 8004ee8:	d902      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	f000 bf67 	b.w	8005dbe <HAL_RCC_OscConfig+0x109a>
 8004ef0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004ef4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8004efc:	fa93 f3a3 	rbit	r3, r3
 8004f00:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8004f04:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f08:	fab3 f383 	clz	r3, r3
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d102      	bne.n	8004f22 <HAL_RCC_OscConfig+0x1fe>
 8004f1c:	4b46      	ldr	r3, [pc, #280]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	e015      	b.n	8004f4e <HAL_RCC_OscConfig+0x22a>
 8004f22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f26:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8004f2e:	fa93 f3a3 	rbit	r3, r3
 8004f32:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8004f36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f3a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004f3e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8004f42:	fa93 f3a3 	rbit	r3, r3
 8004f46:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004f52:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8004f56:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8004f5a:	fa92 f2a2 	rbit	r2, r2
 8004f5e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8004f62:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004f66:	fab2 f282 	clz	r2, r2
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	f042 0220 	orr.w	r2, r2, #32
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	f002 021f 	and.w	r2, r2, #31
 8004f76:	2101      	movs	r1, #1
 8004f78:	fa01 f202 	lsl.w	r2, r1, r2
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0ab      	beq.n	8004eda <HAL_RCC_OscConfig+0x1b6>
 8004f82:	e05c      	b.n	800503e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f84:	f7fe f8ae 	bl	80030e4 <HAL_GetTick>
 8004f88:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f8e:	f7fe f8a9 	bl	80030e4 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b64      	cmp	r3, #100	@ 0x64
 8004f9c:	d902      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	f000 bf0d 	b.w	8005dbe <HAL_RCC_OscConfig+0x109a>
 8004fa4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004fa8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004fb0:	fa93 f3a3 	rbit	r3, r3
 8004fb4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8004fb8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fbc:	fab3 f383 	clz	r3, r3
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f043 0301 	orr.w	r3, r3, #1
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d102      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x2b2>
 8004fd0:	4b19      	ldr	r3, [pc, #100]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	e015      	b.n	8005002 <HAL_RCC_OscConfig+0x2de>
 8004fd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004fda:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fde:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004fe2:	fa93 f3a3 	rbit	r3, r3
 8004fe6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004fea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004fee:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004ff2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004ff6:	fa93 f3a3 	rbit	r3, r3
 8004ffa:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8005038 <HAL_RCC_OscConfig+0x314>)
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005006:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800500a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800500e:	fa92 f2a2 	rbit	r2, r2
 8005012:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8005016:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800501a:	fab2 f282 	clz	r2, r2
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	f042 0220 	orr.w	r2, r2, #32
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	f002 021f 	and.w	r2, r2, #31
 800502a:	2101      	movs	r1, #1
 800502c:	fa01 f202 	lsl.w	r2, r1, r2
 8005030:	4013      	ands	r3, r2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1ab      	bne.n	8004f8e <HAL_RCC_OscConfig+0x26a>
 8005036:	e002      	b.n	800503e <HAL_RCC_OscConfig+0x31a>
 8005038:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800503e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005042:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 817f 	beq.w	8005352 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005054:	4ba7      	ldr	r3, [pc, #668]	@ (80052f4 <HAL_RCC_OscConfig+0x5d0>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f003 030c 	and.w	r3, r3, #12
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00c      	beq.n	800507a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005060:	4ba4      	ldr	r3, [pc, #656]	@ (80052f4 <HAL_RCC_OscConfig+0x5d0>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f003 030c 	and.w	r3, r3, #12
 8005068:	2b08      	cmp	r3, #8
 800506a:	d173      	bne.n	8005154 <HAL_RCC_OscConfig+0x430>
 800506c:	4ba1      	ldr	r3, [pc, #644]	@ (80052f4 <HAL_RCC_OscConfig+0x5d0>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005074:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005078:	d16c      	bne.n	8005154 <HAL_RCC_OscConfig+0x430>
 800507a:	2302      	movs	r3, #2
 800507c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005080:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8005084:	fa93 f3a3 	rbit	r3, r3
 8005088:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800508c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005090:	fab3 f383 	clz	r3, r3
 8005094:	b2db      	uxtb	r3, r3
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d102      	bne.n	80050aa <HAL_RCC_OscConfig+0x386>
 80050a4:	4b93      	ldr	r3, [pc, #588]	@ (80052f4 <HAL_RCC_OscConfig+0x5d0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	e013      	b.n	80050d2 <HAL_RCC_OscConfig+0x3ae>
 80050aa:	2302      	movs	r3, #2
 80050ac:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80050b4:	fa93 f3a3 	rbit	r3, r3
 80050b8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80050bc:	2302      	movs	r3, #2
 80050be:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80050c2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80050c6:	fa93 f3a3 	rbit	r3, r3
 80050ca:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80050ce:	4b89      	ldr	r3, [pc, #548]	@ (80052f4 <HAL_RCC_OscConfig+0x5d0>)
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	2202      	movs	r2, #2
 80050d4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80050d8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80050dc:	fa92 f2a2 	rbit	r2, r2
 80050e0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80050e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80050e8:	fab2 f282 	clz	r2, r2
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	f042 0220 	orr.w	r2, r2, #32
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	f002 021f 	and.w	r2, r2, #31
 80050f8:	2101      	movs	r1, #1
 80050fa:	fa01 f202 	lsl.w	r2, r1, r2
 80050fe:	4013      	ands	r3, r2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_RCC_OscConfig+0x3f6>
 8005104:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005108:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d002      	beq.n	800511a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	f000 be52 	b.w	8005dbe <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511a:	4b76      	ldr	r3, [pc, #472]	@ (80052f4 <HAL_RCC_OscConfig+0x5d0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005122:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005126:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	21f8      	movs	r1, #248	@ 0xf8
 8005130:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005134:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8005138:	fa91 f1a1 	rbit	r1, r1
 800513c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8005140:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8005144:	fab1 f181 	clz	r1, r1
 8005148:	b2c9      	uxtb	r1, r1
 800514a:	408b      	lsls	r3, r1
 800514c:	4969      	ldr	r1, [pc, #420]	@ (80052f4 <HAL_RCC_OscConfig+0x5d0>)
 800514e:	4313      	orrs	r3, r2
 8005150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005152:	e0fe      	b.n	8005352 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005154:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005158:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8088 	beq.w	8005276 <HAL_RCC_OscConfig+0x552>
 8005166:	2301      	movs	r3, #1
 8005168:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8005170:	fa93 f3a3 	rbit	r3, r3
 8005174:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8005178:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800517c:	fab3 f383 	clz	r3, r3
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005186:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	461a      	mov	r2, r3
 800518e:	2301      	movs	r3, #1
 8005190:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005192:	f7fd ffa7 	bl	80030e4 <HAL_GetTick>
 8005196:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800519a:	e00a      	b.n	80051b2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800519c:	f7fd ffa2 	bl	80030e4 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d902      	bls.n	80051b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	f000 be06 	b.w	8005dbe <HAL_RCC_OscConfig+0x109a>
 80051b2:	2302      	movs	r3, #2
 80051b4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80051bc:	fa93 f3a3 	rbit	r3, r3
 80051c0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80051c4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c8:	fab3 f383 	clz	r3, r3
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d102      	bne.n	80051e2 <HAL_RCC_OscConfig+0x4be>
 80051dc:	4b45      	ldr	r3, [pc, #276]	@ (80052f4 <HAL_RCC_OscConfig+0x5d0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	e013      	b.n	800520a <HAL_RCC_OscConfig+0x4e6>
 80051e2:	2302      	movs	r3, #2
 80051e4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80051ec:	fa93 f3a3 	rbit	r3, r3
 80051f0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80051f4:	2302      	movs	r3, #2
 80051f6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80051fa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80051fe:	fa93 f3a3 	rbit	r3, r3
 8005202:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005206:	4b3b      	ldr	r3, [pc, #236]	@ (80052f4 <HAL_RCC_OscConfig+0x5d0>)
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	2202      	movs	r2, #2
 800520c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8005210:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005214:	fa92 f2a2 	rbit	r2, r2
 8005218:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800521c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8005220:	fab2 f282 	clz	r2, r2
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	f042 0220 	orr.w	r2, r2, #32
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	f002 021f 	and.w	r2, r2, #31
 8005230:	2101      	movs	r1, #1
 8005232:	fa01 f202 	lsl.w	r2, r1, r2
 8005236:	4013      	ands	r3, r2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0af      	beq.n	800519c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523c:	4b2d      	ldr	r3, [pc, #180]	@ (80052f4 <HAL_RCC_OscConfig+0x5d0>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005244:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005248:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	21f8      	movs	r1, #248	@ 0xf8
 8005252:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005256:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800525a:	fa91 f1a1 	rbit	r1, r1
 800525e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8005262:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005266:	fab1 f181 	clz	r1, r1
 800526a:	b2c9      	uxtb	r1, r1
 800526c:	408b      	lsls	r3, r1
 800526e:	4921      	ldr	r1, [pc, #132]	@ (80052f4 <HAL_RCC_OscConfig+0x5d0>)
 8005270:	4313      	orrs	r3, r2
 8005272:	600b      	str	r3, [r1, #0]
 8005274:	e06d      	b.n	8005352 <HAL_RCC_OscConfig+0x62e>
 8005276:	2301      	movs	r3, #1
 8005278:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8005280:	fa93 f3a3 	rbit	r3, r3
 8005284:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8005288:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800528c:	fab3 f383 	clz	r3, r3
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005296:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	461a      	mov	r2, r3
 800529e:	2300      	movs	r3, #0
 80052a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a2:	f7fd ff1f 	bl	80030e4 <HAL_GetTick>
 80052a6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052aa:	e00a      	b.n	80052c2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052ac:	f7fd ff1a 	bl	80030e4 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d902      	bls.n	80052c2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	f000 bd7e 	b.w	8005dbe <HAL_RCC_OscConfig+0x109a>
 80052c2:	2302      	movs	r3, #2
 80052c4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80052cc:	fa93 f3a3 	rbit	r3, r3
 80052d0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80052d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052d8:	fab3 f383 	clz	r3, r3
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d105      	bne.n	80052f8 <HAL_RCC_OscConfig+0x5d4>
 80052ec:	4b01      	ldr	r3, [pc, #4]	@ (80052f4 <HAL_RCC_OscConfig+0x5d0>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	e016      	b.n	8005320 <HAL_RCC_OscConfig+0x5fc>
 80052f2:	bf00      	nop
 80052f4:	40021000 	.word	0x40021000
 80052f8:	2302      	movs	r3, #2
 80052fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005302:	fa93 f3a3 	rbit	r3, r3
 8005306:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800530a:	2302      	movs	r3, #2
 800530c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005310:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005314:	fa93 f3a3 	rbit	r3, r3
 8005318:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800531c:	4bbf      	ldr	r3, [pc, #764]	@ (800561c <HAL_RCC_OscConfig+0x8f8>)
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005320:	2202      	movs	r2, #2
 8005322:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8005326:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800532a:	fa92 f2a2 	rbit	r2, r2
 800532e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8005332:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005336:	fab2 f282 	clz	r2, r2
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	f042 0220 	orr.w	r2, r2, #32
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	f002 021f 	and.w	r2, r2, #31
 8005346:	2101      	movs	r1, #1
 8005348:	fa01 f202 	lsl.w	r2, r1, r2
 800534c:	4013      	ands	r3, r2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1ac      	bne.n	80052ac <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005356:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 8113 	beq.w	800558e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005368:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800536c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d07c      	beq.n	8005472 <HAL_RCC_OscConfig+0x74e>
 8005378:	2301      	movs	r3, #1
 800537a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005382:	fa93 f3a3 	rbit	r3, r3
 8005386:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800538a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800538e:	fab3 f383 	clz	r3, r3
 8005392:	b2db      	uxtb	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	4ba2      	ldr	r3, [pc, #648]	@ (8005620 <HAL_RCC_OscConfig+0x8fc>)
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	461a      	mov	r2, r3
 800539e:	2301      	movs	r3, #1
 80053a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053a2:	f7fd fe9f 	bl	80030e4 <HAL_GetTick>
 80053a6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053aa:	e00a      	b.n	80053c2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ac:	f7fd fe9a 	bl	80030e4 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d902      	bls.n	80053c2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	f000 bcfe 	b.w	8005dbe <HAL_RCC_OscConfig+0x109a>
 80053c2:	2302      	movs	r3, #2
 80053c4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053cc:	fa93 f2a3 	rbit	r2, r3
 80053d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053e2:	2202      	movs	r2, #2
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	fa93 f2a3 	rbit	r2, r3
 80053f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005402:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005406:	2202      	movs	r2, #2
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800540e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	fa93 f2a3 	rbit	r2, r3
 8005418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800541c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005420:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005422:	4b7e      	ldr	r3, [pc, #504]	@ (800561c <HAL_RCC_OscConfig+0x8f8>)
 8005424:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800542a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800542e:	2102      	movs	r1, #2
 8005430:	6019      	str	r1, [r3, #0]
 8005432:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005436:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	fa93 f1a3 	rbit	r1, r3
 8005440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005444:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005448:	6019      	str	r1, [r3, #0]
  return result;
 800544a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800544e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	fab3 f383 	clz	r3, r3
 8005458:	b2db      	uxtb	r3, r3
 800545a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800545e:	b2db      	uxtb	r3, r3
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	2101      	movs	r1, #1
 8005466:	fa01 f303 	lsl.w	r3, r1, r3
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d09d      	beq.n	80053ac <HAL_RCC_OscConfig+0x688>
 8005470:	e08d      	b.n	800558e <HAL_RCC_OscConfig+0x86a>
 8005472:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005476:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800547a:	2201      	movs	r2, #1
 800547c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005482:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	fa93 f2a3 	rbit	r2, r3
 800548c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005490:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005494:	601a      	str	r2, [r3, #0]
  return result;
 8005496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800549a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800549e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a0:	fab3 f383 	clz	r3, r3
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	4b5d      	ldr	r3, [pc, #372]	@ (8005620 <HAL_RCC_OscConfig+0x8fc>)
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	461a      	mov	r2, r3
 80054b0:	2300      	movs	r3, #0
 80054b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b4:	f7fd fe16 	bl	80030e4 <HAL_GetTick>
 80054b8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054bc:	e00a      	b.n	80054d4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054be:	f7fd fe11 	bl	80030e4 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d902      	bls.n	80054d4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	f000 bc75 	b.w	8005dbe <HAL_RCC_OscConfig+0x109a>
 80054d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80054dc:	2202      	movs	r2, #2
 80054de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054e4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	fa93 f2a3 	rbit	r2, r3
 80054ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005500:	2202      	movs	r2, #2
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005508:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	fa93 f2a3 	rbit	r2, r3
 8005512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005516:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005520:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005524:	2202      	movs	r2, #2
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800552c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	fa93 f2a3 	rbit	r2, r3
 8005536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800553a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800553e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005540:	4b36      	ldr	r3, [pc, #216]	@ (800561c <HAL_RCC_OscConfig+0x8f8>)
 8005542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005548:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800554c:	2102      	movs	r1, #2
 800554e:	6019      	str	r1, [r3, #0]
 8005550:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005554:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	fa93 f1a3 	rbit	r1, r3
 800555e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005562:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005566:	6019      	str	r1, [r3, #0]
  return result;
 8005568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800556c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	fab3 f383 	clz	r3, r3
 8005576:	b2db      	uxtb	r3, r3
 8005578:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800557c:	b2db      	uxtb	r3, r3
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	2101      	movs	r1, #1
 8005584:	fa01 f303 	lsl.w	r3, r1, r3
 8005588:	4013      	ands	r3, r2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d197      	bne.n	80054be <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800558e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005592:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 81a5 	beq.w	80058ee <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055a4:	2300      	movs	r3, #0
 80055a6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055aa:	4b1c      	ldr	r3, [pc, #112]	@ (800561c <HAL_RCC_OscConfig+0x8f8>)
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d116      	bne.n	80055e4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b6:	4b19      	ldr	r3, [pc, #100]	@ (800561c <HAL_RCC_OscConfig+0x8f8>)
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	4a18      	ldr	r2, [pc, #96]	@ (800561c <HAL_RCC_OscConfig+0x8f8>)
 80055bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055c0:	61d3      	str	r3, [r2, #28]
 80055c2:	4b16      	ldr	r3, [pc, #88]	@ (800561c <HAL_RCC_OscConfig+0x8f8>)
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80055ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80055dc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80055de:	2301      	movs	r3, #1
 80055e0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005624 <HAL_RCC_OscConfig+0x900>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d121      	bne.n	8005634 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005624 <HAL_RCC_OscConfig+0x900>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a0b      	ldr	r2, [pc, #44]	@ (8005624 <HAL_RCC_OscConfig+0x900>)
 80055f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055fa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055fc:	f7fd fd72 	bl	80030e4 <HAL_GetTick>
 8005600:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005604:	e010      	b.n	8005628 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005606:	f7fd fd6d 	bl	80030e4 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b64      	cmp	r3, #100	@ 0x64
 8005614:	d908      	bls.n	8005628 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e3d1      	b.n	8005dbe <HAL_RCC_OscConfig+0x109a>
 800561a:	bf00      	nop
 800561c:	40021000 	.word	0x40021000
 8005620:	10908120 	.word	0x10908120
 8005624:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005628:	4b8d      	ldr	r3, [pc, #564]	@ (8005860 <HAL_RCC_OscConfig+0xb3c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0e8      	beq.n	8005606 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005634:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005638:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d106      	bne.n	8005652 <HAL_RCC_OscConfig+0x92e>
 8005644:	4b87      	ldr	r3, [pc, #540]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	4a86      	ldr	r2, [pc, #536]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	6213      	str	r3, [r2, #32]
 8005650:	e035      	b.n	80056be <HAL_RCC_OscConfig+0x99a>
 8005652:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005656:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10c      	bne.n	800567c <HAL_RCC_OscConfig+0x958>
 8005662:	4b80      	ldr	r3, [pc, #512]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	4a7f      	ldr	r2, [pc, #508]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	6213      	str	r3, [r2, #32]
 800566e:	4b7d      	ldr	r3, [pc, #500]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	4a7c      	ldr	r2, [pc, #496]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 8005674:	f023 0304 	bic.w	r3, r3, #4
 8005678:	6213      	str	r3, [r2, #32]
 800567a:	e020      	b.n	80056be <HAL_RCC_OscConfig+0x99a>
 800567c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005680:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b05      	cmp	r3, #5
 800568a:	d10c      	bne.n	80056a6 <HAL_RCC_OscConfig+0x982>
 800568c:	4b75      	ldr	r3, [pc, #468]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	4a74      	ldr	r2, [pc, #464]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 8005692:	f043 0304 	orr.w	r3, r3, #4
 8005696:	6213      	str	r3, [r2, #32]
 8005698:	4b72      	ldr	r3, [pc, #456]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	4a71      	ldr	r2, [pc, #452]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	6213      	str	r3, [r2, #32]
 80056a4:	e00b      	b.n	80056be <HAL_RCC_OscConfig+0x99a>
 80056a6:	4b6f      	ldr	r3, [pc, #444]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	4a6e      	ldr	r2, [pc, #440]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	6213      	str	r3, [r2, #32]
 80056b2:	4b6c      	ldr	r3, [pc, #432]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	4a6b      	ldr	r2, [pc, #428]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 80056b8:	f023 0304 	bic.w	r3, r3, #4
 80056bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 8081 	beq.w	80057d2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d0:	f7fd fd08 	bl	80030e4 <HAL_GetTick>
 80056d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d8:	e00b      	b.n	80056f2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056da:	f7fd fd03 	bl	80030e4 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e365      	b.n	8005dbe <HAL_RCC_OscConfig+0x109a>
 80056f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80056fa:	2202      	movs	r2, #2
 80056fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005702:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	fa93 f2a3 	rbit	r2, r3
 800570c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005710:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800571a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800571e:	2202      	movs	r2, #2
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005726:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	fa93 f2a3 	rbit	r2, r3
 8005730:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005734:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005738:	601a      	str	r2, [r3, #0]
  return result;
 800573a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800573e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005742:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005744:	fab3 f383 	clz	r3, r3
 8005748:	b2db      	uxtb	r3, r3
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f043 0302 	orr.w	r3, r3, #2
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d102      	bne.n	800575e <HAL_RCC_OscConfig+0xa3a>
 8005758:	4b42      	ldr	r3, [pc, #264]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	e013      	b.n	8005786 <HAL_RCC_OscConfig+0xa62>
 800575e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005762:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005766:	2202      	movs	r2, #2
 8005768:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800576e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	fa93 f2a3 	rbit	r2, r3
 8005778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800577c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	4b38      	ldr	r3, [pc, #224]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 8005784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005786:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800578a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800578e:	2102      	movs	r1, #2
 8005790:	6011      	str	r1, [r2, #0]
 8005792:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005796:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	fa92 f1a2 	rbit	r1, r2
 80057a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80057a4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80057a8:	6011      	str	r1, [r2, #0]
  return result;
 80057aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80057ae:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	fab2 f282 	clz	r2, r2
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	f002 021f 	and.w	r2, r2, #31
 80057c4:	2101      	movs	r1, #1
 80057c6:	fa01 f202 	lsl.w	r2, r1, r2
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d084      	beq.n	80056da <HAL_RCC_OscConfig+0x9b6>
 80057d0:	e083      	b.n	80058da <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d2:	f7fd fc87 	bl	80030e4 <HAL_GetTick>
 80057d6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057da:	e00b      	b.n	80057f4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057dc:	f7fd fc82 	bl	80030e4 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e2e4      	b.n	8005dbe <HAL_RCC_OscConfig+0x109a>
 80057f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057f8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80057fc:	2202      	movs	r2, #2
 80057fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005804:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	fa93 f2a3 	rbit	r2, r3
 800580e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005812:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800581c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005820:	2202      	movs	r2, #2
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005828:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	fa93 f2a3 	rbit	r2, r3
 8005832:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005836:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800583a:	601a      	str	r2, [r3, #0]
  return result;
 800583c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005840:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005844:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005846:	fab3 f383 	clz	r3, r3
 800584a:	b2db      	uxtb	r3, r3
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	b2db      	uxtb	r3, r3
 8005850:	f043 0302 	orr.w	r3, r3, #2
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d106      	bne.n	8005868 <HAL_RCC_OscConfig+0xb44>
 800585a:	4b02      	ldr	r3, [pc, #8]	@ (8005864 <HAL_RCC_OscConfig+0xb40>)
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	e017      	b.n	8005890 <HAL_RCC_OscConfig+0xb6c>
 8005860:	40007000 	.word	0x40007000
 8005864:	40021000 	.word	0x40021000
 8005868:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800586c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005870:	2202      	movs	r2, #2
 8005872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005874:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005878:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	fa93 f2a3 	rbit	r2, r3
 8005882:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005886:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	4bb3      	ldr	r3, [pc, #716]	@ (8005b5c <HAL_RCC_OscConfig+0xe38>)
 800588e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005890:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005894:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005898:	2102      	movs	r1, #2
 800589a:	6011      	str	r1, [r2, #0]
 800589c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80058a0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	fa92 f1a2 	rbit	r1, r2
 80058aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80058ae:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80058b2:	6011      	str	r1, [r2, #0]
  return result;
 80058b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80058b8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	fab2 f282 	clz	r2, r2
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	f002 021f 	and.w	r2, r2, #31
 80058ce:	2101      	movs	r1, #1
 80058d0:	fa01 f202 	lsl.w	r2, r1, r2
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d180      	bne.n	80057dc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058da:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d105      	bne.n	80058ee <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e2:	4b9e      	ldr	r3, [pc, #632]	@ (8005b5c <HAL_RCC_OscConfig+0xe38>)
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	4a9d      	ldr	r2, [pc, #628]	@ (8005b5c <HAL_RCC_OscConfig+0xe38>)
 80058e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058ec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 825e 	beq.w	8005dbc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005900:	4b96      	ldr	r3, [pc, #600]	@ (8005b5c <HAL_RCC_OscConfig+0xe38>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 030c 	and.w	r3, r3, #12
 8005908:	2b08      	cmp	r3, #8
 800590a:	f000 821f 	beq.w	8005d4c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800590e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005912:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	2b02      	cmp	r3, #2
 800591c:	f040 8170 	bne.w	8005c00 <HAL_RCC_OscConfig+0xedc>
 8005920:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005924:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005928:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800592c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005932:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	fa93 f2a3 	rbit	r2, r3
 800593c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005940:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005944:	601a      	str	r2, [r3, #0]
  return result;
 8005946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800594a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800594e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005950:	fab3 f383 	clz	r3, r3
 8005954:	b2db      	uxtb	r3, r3
 8005956:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800595a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	461a      	mov	r2, r3
 8005962:	2300      	movs	r3, #0
 8005964:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005966:	f7fd fbbd 	bl	80030e4 <HAL_GetTick>
 800596a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800596e:	e009      	b.n	8005984 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005970:	f7fd fbb8 	bl	80030e4 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e21c      	b.n	8005dbe <HAL_RCC_OscConfig+0x109a>
 8005984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005988:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800598c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005996:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	fa93 f2a3 	rbit	r2, r3
 80059a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059a4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80059a8:	601a      	str	r2, [r3, #0]
  return result;
 80059aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059ae:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80059b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059b4:	fab3 f383 	clz	r3, r3
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d102      	bne.n	80059ce <HAL_RCC_OscConfig+0xcaa>
 80059c8:	4b64      	ldr	r3, [pc, #400]	@ (8005b5c <HAL_RCC_OscConfig+0xe38>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	e027      	b.n	8005a1e <HAL_RCC_OscConfig+0xcfa>
 80059ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059d2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80059d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80059da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059e0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	fa93 f2a3 	rbit	r2, r3
 80059ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059ee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80059fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a06:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	fa93 f2a3 	rbit	r2, r3
 8005a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a14:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	4b50      	ldr	r3, [pc, #320]	@ (8005b5c <HAL_RCC_OscConfig+0xe38>)
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005a22:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005a26:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005a2a:	6011      	str	r1, [r2, #0]
 8005a2c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005a30:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	fa92 f1a2 	rbit	r1, r2
 8005a3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005a3e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8005a42:	6011      	str	r1, [r2, #0]
  return result;
 8005a44:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005a48:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	fab2 f282 	clz	r2, r2
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	f042 0220 	orr.w	r2, r2, #32
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	f002 021f 	and.w	r2, r2, #31
 8005a5e:	2101      	movs	r1, #1
 8005a60:	fa01 f202 	lsl.w	r2, r1, r2
 8005a64:	4013      	ands	r3, r2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d182      	bne.n	8005970 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a6a:	4b3c      	ldr	r3, [pc, #240]	@ (8005b5c <HAL_RCC_OscConfig+0xe38>)
 8005a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6e:	f023 020f 	bic.w	r2, r3, #15
 8005a72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7e:	4937      	ldr	r1, [pc, #220]	@ (8005b5c <HAL_RCC_OscConfig+0xe38>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005a84:	4b35      	ldr	r3, [pc, #212]	@ (8005b5c <HAL_RCC_OscConfig+0xe38>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8005a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6a19      	ldr	r1, [r3, #32]
 8005a98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	492d      	ldr	r1, [pc, #180]	@ (8005b5c <HAL_RCC_OscConfig+0xe38>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	604b      	str	r3, [r1, #4]
 8005aac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ab0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005ab4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ab8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005abe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	fa93 f2a3 	rbit	r2, r3
 8005ac8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005acc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005ad0:	601a      	str	r2, [r3, #0]
  return result;
 8005ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ad6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005ada:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005adc:	fab3 f383 	clz	r3, r3
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005ae6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	461a      	mov	r2, r3
 8005aee:	2301      	movs	r3, #1
 8005af0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af2:	f7fd faf7 	bl	80030e4 <HAL_GetTick>
 8005af6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005afa:	e009      	b.n	8005b10 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005afc:	f7fd faf2 	bl	80030e4 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e156      	b.n	8005dbe <HAL_RCC_OscConfig+0x109a>
 8005b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b14:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005b18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b22:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	fa93 f2a3 	rbit	r2, r3
 8005b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b30:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005b34:	601a      	str	r2, [r3, #0]
  return result;
 8005b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b3a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005b3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b40:	fab3 f383 	clz	r3, r3
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d105      	bne.n	8005b60 <HAL_RCC_OscConfig+0xe3c>
 8005b54:	4b01      	ldr	r3, [pc, #4]	@ (8005b5c <HAL_RCC_OscConfig+0xe38>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	e02a      	b.n	8005bb0 <HAL_RCC_OscConfig+0xe8c>
 8005b5a:	bf00      	nop
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b64:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005b68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b72:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	fa93 f2a3 	rbit	r2, r3
 8005b7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b80:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b8a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005b8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b98:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	fa93 f2a3 	rbit	r2, r3
 8005ba2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ba6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	4b86      	ldr	r3, [pc, #536]	@ (8005dc8 <HAL_RCC_OscConfig+0x10a4>)
 8005bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005bb4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005bb8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005bbc:	6011      	str	r1, [r2, #0]
 8005bbe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005bc2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	fa92 f1a2 	rbit	r1, r2
 8005bcc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005bd0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8005bd4:	6011      	str	r1, [r2, #0]
  return result;
 8005bd6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005bda:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8005bde:	6812      	ldr	r2, [r2, #0]
 8005be0:	fab2 f282 	clz	r2, r2
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	f042 0220 	orr.w	r2, r2, #32
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	f002 021f 	and.w	r2, r2, #31
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f43f af7f 	beq.w	8005afc <HAL_RCC_OscConfig+0xdd8>
 8005bfe:	e0dd      	b.n	8005dbc <HAL_RCC_OscConfig+0x1098>
 8005c00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c04:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005c08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c12:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	fa93 f2a3 	rbit	r2, r3
 8005c1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c20:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005c24:	601a      	str	r2, [r3, #0]
  return result;
 8005c26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c2a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005c2e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c30:	fab3 f383 	clz	r3, r3
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005c3a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	461a      	mov	r2, r3
 8005c42:	2300      	movs	r3, #0
 8005c44:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c46:	f7fd fa4d 	bl	80030e4 <HAL_GetTick>
 8005c4a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c4e:	e009      	b.n	8005c64 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c50:	f7fd fa48 	bl	80030e4 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e0ac      	b.n	8005dbe <HAL_RCC_OscConfig+0x109a>
 8005c64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c68:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005c6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c76:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	fa93 f2a3 	rbit	r2, r3
 8005c80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c84:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005c88:	601a      	str	r2, [r3, #0]
  return result;
 8005c8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c8e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005c92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c94:	fab3 f383 	clz	r3, r3
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d102      	bne.n	8005cae <HAL_RCC_OscConfig+0xf8a>
 8005ca8:	4b47      	ldr	r3, [pc, #284]	@ (8005dc8 <HAL_RCC_OscConfig+0x10a4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	e027      	b.n	8005cfe <HAL_RCC_OscConfig+0xfda>
 8005cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cb2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005cb6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cc0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	fa93 f2a3 	rbit	r2, r3
 8005cca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cd8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005cdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ce6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	fa93 f2a3 	rbit	r2, r3
 8005cf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cf4:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	4b33      	ldr	r3, [pc, #204]	@ (8005dc8 <HAL_RCC_OscConfig+0x10a4>)
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005d02:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005d06:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005d0a:	6011      	str	r1, [r2, #0]
 8005d0c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005d10:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	fa92 f1a2 	rbit	r1, r2
 8005d1a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005d1e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8005d22:	6011      	str	r1, [r2, #0]
  return result;
 8005d24:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005d28:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	fab2 f282 	clz	r2, r2
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	f042 0220 	orr.w	r2, r2, #32
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	f002 021f 	and.w	r2, r2, #31
 8005d3e:	2101      	movs	r1, #1
 8005d40:	fa01 f202 	lsl.w	r2, r1, r2
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d182      	bne.n	8005c50 <HAL_RCC_OscConfig+0xf2c>
 8005d4a:	e037      	b.n	8005dbc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005d50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e02e      	b.n	8005dbe <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d60:	4b19      	ldr	r3, [pc, #100]	@ (8005dc8 <HAL_RCC_OscConfig+0x10a4>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005d68:	4b17      	ldr	r3, [pc, #92]	@ (8005dc8 <HAL_RCC_OscConfig+0x10a4>)
 8005d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005d70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005d74:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8005d78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005d7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d117      	bne.n	8005db8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005d88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005d8c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005d90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005d94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d10b      	bne.n	8005db8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005da0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005da4:	f003 020f 	and.w	r2, r3, #15
 8005da8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005dac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d001      	beq.n	8005dbc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40021000 	.word	0x40021000

08005dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b09e      	sub	sp, #120	@ 0x78
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e162      	b.n	80060aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005de4:	4b90      	ldr	r3, [pc, #576]	@ (8006028 <HAL_RCC_ClockConfig+0x25c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d910      	bls.n	8005e14 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005df2:	4b8d      	ldr	r3, [pc, #564]	@ (8006028 <HAL_RCC_ClockConfig+0x25c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f023 0207 	bic.w	r2, r3, #7
 8005dfa:	498b      	ldr	r1, [pc, #556]	@ (8006028 <HAL_RCC_ClockConfig+0x25c>)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e02:	4b89      	ldr	r3, [pc, #548]	@ (8006028 <HAL_RCC_ClockConfig+0x25c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d001      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e14a      	b.n	80060aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d008      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e20:	4b82      	ldr	r3, [pc, #520]	@ (800602c <HAL_RCC_ClockConfig+0x260>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	497f      	ldr	r1, [pc, #508]	@ (800602c <HAL_RCC_ClockConfig+0x260>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 80dc 	beq.w	8005ff8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d13c      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xf6>
 8005e48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e4c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e50:	fa93 f3a3 	rbit	r3, r3
 8005e54:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e58:	fab3 f383 	clz	r3, r3
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	f043 0301 	orr.w	r3, r3, #1
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d102      	bne.n	8005e72 <HAL_RCC_ClockConfig+0xa6>
 8005e6c:	4b6f      	ldr	r3, [pc, #444]	@ (800602c <HAL_RCC_ClockConfig+0x260>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	e00f      	b.n	8005e92 <HAL_RCC_ClockConfig+0xc6>
 8005e72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e76:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e7a:	fa93 f3a3 	rbit	r3, r3
 8005e7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e84:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e88:	fa93 f3a3 	rbit	r3, r3
 8005e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e8e:	4b67      	ldr	r3, [pc, #412]	@ (800602c <HAL_RCC_ClockConfig+0x260>)
 8005e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e92:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005e96:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e9a:	fa92 f2a2 	rbit	r2, r2
 8005e9e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005ea0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ea2:	fab2 f282 	clz	r2, r2
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	f042 0220 	orr.w	r2, r2, #32
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	f002 021f 	and.w	r2, r2, #31
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb8:	4013      	ands	r3, r2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d17b      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e0f3      	b.n	80060aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d13c      	bne.n	8005f44 <HAL_RCC_ClockConfig+0x178>
 8005eca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ece:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ed2:	fa93 f3a3 	rbit	r3, r3
 8005ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005ed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eda:	fab3 f383 	clz	r3, r3
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	095b      	lsrs	r3, r3, #5
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f043 0301 	orr.w	r3, r3, #1
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d102      	bne.n	8005ef4 <HAL_RCC_ClockConfig+0x128>
 8005eee:	4b4f      	ldr	r3, [pc, #316]	@ (800602c <HAL_RCC_ClockConfig+0x260>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	e00f      	b.n	8005f14 <HAL_RCC_ClockConfig+0x148>
 8005ef4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005efc:	fa93 f3a3 	rbit	r3, r3
 8005f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f06:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f0a:	fa93 f3a3 	rbit	r3, r3
 8005f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f10:	4b46      	ldr	r3, [pc, #280]	@ (800602c <HAL_RCC_ClockConfig+0x260>)
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005f18:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005f1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f1c:	fa92 f2a2 	rbit	r2, r2
 8005f20:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005f22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f24:	fab2 f282 	clz	r2, r2
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	f042 0220 	orr.w	r2, r2, #32
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	f002 021f 	and.w	r2, r2, #31
 8005f34:	2101      	movs	r1, #1
 8005f36:	fa01 f202 	lsl.w	r2, r1, r2
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d13a      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e0b2      	b.n	80060aa <HAL_RCC_ClockConfig+0x2de>
 8005f44:	2302      	movs	r3, #2
 8005f46:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	fa93 f3a3 	rbit	r3, r3
 8005f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f52:	fab3 f383 	clz	r3, r3
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d102      	bne.n	8005f6c <HAL_RCC_ClockConfig+0x1a0>
 8005f66:	4b31      	ldr	r3, [pc, #196]	@ (800602c <HAL_RCC_ClockConfig+0x260>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	e00d      	b.n	8005f88 <HAL_RCC_ClockConfig+0x1bc>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f72:	fa93 f3a3 	rbit	r3, r3
 8005f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f78:	2302      	movs	r3, #2
 8005f7a:	623b      	str	r3, [r7, #32]
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	fa93 f3a3 	rbit	r3, r3
 8005f82:	61fb      	str	r3, [r7, #28]
 8005f84:	4b29      	ldr	r3, [pc, #164]	@ (800602c <HAL_RCC_ClockConfig+0x260>)
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	2202      	movs	r2, #2
 8005f8a:	61ba      	str	r2, [r7, #24]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	fa92 f2a2 	rbit	r2, r2
 8005f92:	617a      	str	r2, [r7, #20]
  return result;
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	fab2 f282 	clz	r2, r2
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	f042 0220 	orr.w	r2, r2, #32
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	f002 021f 	and.w	r2, r2, #31
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8005fac:	4013      	ands	r3, r2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e079      	b.n	80060aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800602c <HAL_RCC_ClockConfig+0x260>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f023 0203 	bic.w	r2, r3, #3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	491a      	ldr	r1, [pc, #104]	@ (800602c <HAL_RCC_ClockConfig+0x260>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fc8:	f7fd f88c 	bl	80030e4 <HAL_GetTick>
 8005fcc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fce:	e00a      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd0:	f7fd f888 	bl	80030e4 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e061      	b.n	80060aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe6:	4b11      	ldr	r3, [pc, #68]	@ (800602c <HAL_RCC_ClockConfig+0x260>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f003 020c 	and.w	r2, r3, #12
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d1eb      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8006028 <HAL_RCC_ClockConfig+0x25c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d214      	bcs.n	8006030 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006006:	4b08      	ldr	r3, [pc, #32]	@ (8006028 <HAL_RCC_ClockConfig+0x25c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f023 0207 	bic.w	r2, r3, #7
 800600e:	4906      	ldr	r1, [pc, #24]	@ (8006028 <HAL_RCC_ClockConfig+0x25c>)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	4313      	orrs	r3, r2
 8006014:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006016:	4b04      	ldr	r3, [pc, #16]	@ (8006028 <HAL_RCC_ClockConfig+0x25c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d005      	beq.n	8006030 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e040      	b.n	80060aa <HAL_RCC_ClockConfig+0x2de>
 8006028:	40022000 	.word	0x40022000
 800602c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0304 	and.w	r3, r3, #4
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800603c:	4b1d      	ldr	r3, [pc, #116]	@ (80060b4 <HAL_RCC_ClockConfig+0x2e8>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	491a      	ldr	r1, [pc, #104]	@ (80060b4 <HAL_RCC_ClockConfig+0x2e8>)
 800604a:	4313      	orrs	r3, r2
 800604c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d009      	beq.n	800606e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800605a:	4b16      	ldr	r3, [pc, #88]	@ (80060b4 <HAL_RCC_ClockConfig+0x2e8>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	4912      	ldr	r1, [pc, #72]	@ (80060b4 <HAL_RCC_ClockConfig+0x2e8>)
 800606a:	4313      	orrs	r3, r2
 800606c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800606e:	f000 f829 	bl	80060c4 <HAL_RCC_GetSysClockFreq>
 8006072:	4601      	mov	r1, r0
 8006074:	4b0f      	ldr	r3, [pc, #60]	@ (80060b4 <HAL_RCC_ClockConfig+0x2e8>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800607c:	22f0      	movs	r2, #240	@ 0xf0
 800607e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	fa92 f2a2 	rbit	r2, r2
 8006086:	60fa      	str	r2, [r7, #12]
  return result;
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	fab2 f282 	clz	r2, r2
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	40d3      	lsrs	r3, r2
 8006092:	4a09      	ldr	r2, [pc, #36]	@ (80060b8 <HAL_RCC_ClockConfig+0x2ec>)
 8006094:	5cd3      	ldrb	r3, [r2, r3]
 8006096:	fa21 f303 	lsr.w	r3, r1, r3
 800609a:	4a08      	ldr	r2, [pc, #32]	@ (80060bc <HAL_RCC_ClockConfig+0x2f0>)
 800609c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800609e:	4b08      	ldr	r3, [pc, #32]	@ (80060c0 <HAL_RCC_ClockConfig+0x2f4>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fc ffda 	bl	800305c <HAL_InitTick>
  
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3778      	adds	r7, #120	@ 0x78
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40021000 	.word	0x40021000
 80060b8:	0800f26c 	.word	0x0800f26c
 80060bc:	20000000 	.word	0x20000000
 80060c0:	20000004 	.word	0x20000004

080060c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	2300      	movs	r3, #0
 80060d0:	60bb      	str	r3, [r7, #8]
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	2300      	movs	r3, #0
 80060d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80060de:	4b1f      	ldr	r3, [pc, #124]	@ (800615c <HAL_RCC_GetSysClockFreq+0x98>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 030c 	and.w	r3, r3, #12
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d002      	beq.n	80060f4 <HAL_RCC_GetSysClockFreq+0x30>
 80060ee:	2b08      	cmp	r3, #8
 80060f0:	d003      	beq.n	80060fa <HAL_RCC_GetSysClockFreq+0x36>
 80060f2:	e029      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x9c>)
 80060f6:	613b      	str	r3, [r7, #16]
      break;
 80060f8:	e029      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	0c9b      	lsrs	r3, r3, #18
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	4a18      	ldr	r2, [pc, #96]	@ (8006164 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006104:	5cd3      	ldrb	r3, [r2, r3]
 8006106:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006108:	4b14      	ldr	r3, [pc, #80]	@ (800615c <HAL_RCC_GetSysClockFreq+0x98>)
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	4a15      	ldr	r2, [pc, #84]	@ (8006168 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006112:	5cd3      	ldrb	r3, [r2, r3]
 8006114:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d008      	beq.n	8006132 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006120:	4a0f      	ldr	r2, [pc, #60]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	fbb2 f2f3 	udiv	r2, r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	fb02 f303 	mul.w	r3, r2, r3
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	e007      	b.n	8006142 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006132:	4a0b      	ldr	r2, [pc, #44]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	fbb2 f2f3 	udiv	r2, r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	fb02 f303 	mul.w	r3, r2, r3
 8006140:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	613b      	str	r3, [r7, #16]
      break;
 8006146:	e002      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006148:	4b05      	ldr	r3, [pc, #20]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x9c>)
 800614a:	613b      	str	r3, [r7, #16]
      break;
 800614c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800614e:	693b      	ldr	r3, [r7, #16]
}
 8006150:	4618      	mov	r0, r3
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	40021000 	.word	0x40021000
 8006160:	007a1200 	.word	0x007a1200
 8006164:	0800f284 	.word	0x0800f284
 8006168:	0800f294 	.word	0x0800f294

0800616c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006170:	4b03      	ldr	r3, [pc, #12]	@ (8006180 <HAL_RCC_GetHCLKFreq+0x14>)
 8006172:	681b      	ldr	r3, [r3, #0]
}
 8006174:	4618      	mov	r0, r3
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	20000000 	.word	0x20000000

08006184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800618a:	f7ff ffef 	bl	800616c <HAL_RCC_GetHCLKFreq>
 800618e:	4601      	mov	r1, r0
 8006190:	4b0b      	ldr	r3, [pc, #44]	@ (80061c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006198:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800619c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	fa92 f2a2 	rbit	r2, r2
 80061a4:	603a      	str	r2, [r7, #0]
  return result;
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	fab2 f282 	clz	r2, r2
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	40d3      	lsrs	r3, r2
 80061b0:	4a04      	ldr	r2, [pc, #16]	@ (80061c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80061b2:	5cd3      	ldrb	r3, [r2, r3]
 80061b4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40021000 	.word	0x40021000
 80061c4:	0800f27c 	.word	0x0800f27c

080061c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80061ce:	f7ff ffcd 	bl	800616c <HAL_RCC_GetHCLKFreq>
 80061d2:	4601      	mov	r1, r0
 80061d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006204 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80061dc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80061e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	fa92 f2a2 	rbit	r2, r2
 80061e8:	603a      	str	r2, [r7, #0]
  return result;
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	fab2 f282 	clz	r2, r2
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	40d3      	lsrs	r3, r2
 80061f4:	4a04      	ldr	r2, [pc, #16]	@ (8006208 <HAL_RCC_GetPCLK2Freq+0x40>)
 80061f6:	5cd3      	ldrb	r3, [r2, r3]
 80061f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40021000 	.word	0x40021000
 8006208:	0800f27c 	.word	0x0800f27c

0800620c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b092      	sub	sp, #72	@ 0x48
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800621c:	2300      	movs	r3, #0
 800621e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 80d4 	beq.w	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006230:	4b4e      	ldr	r3, [pc, #312]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10e      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800623c:	4b4b      	ldr	r3, [pc, #300]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	4a4a      	ldr	r2, [pc, #296]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006246:	61d3      	str	r3, [r2, #28]
 8006248:	4b48      	ldr	r3, [pc, #288]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006250:	60bb      	str	r3, [r7, #8]
 8006252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006254:	2301      	movs	r3, #1
 8006256:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625a:	4b45      	ldr	r3, [pc, #276]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006262:	2b00      	cmp	r3, #0
 8006264:	d118      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006266:	4b42      	ldr	r3, [pc, #264]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a41      	ldr	r2, [pc, #260]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800626c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006270:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006272:	f7fc ff37 	bl	80030e4 <HAL_GetTick>
 8006276:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006278:	e008      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800627a:	f7fc ff33 	bl	80030e4 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b64      	cmp	r3, #100	@ 0x64
 8006286:	d901      	bls.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e1d6      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800628c:	4b38      	ldr	r3, [pc, #224]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0f0      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006298:	4b34      	ldr	r3, [pc, #208]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 8084 	beq.w	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d07c      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062b8:	4b2c      	ldr	r3, [pc, #176]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80062c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ca:	fa93 f3a3 	rbit	r3, r3
 80062ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80062d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062d2:	fab3 f383 	clz	r3, r3
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	461a      	mov	r2, r3
 80062da:	4b26      	ldr	r3, [pc, #152]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	461a      	mov	r2, r3
 80062e2:	2301      	movs	r3, #1
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80062ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ee:	fa93 f3a3 	rbit	r3, r3
 80062f2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80062f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062f6:	fab3 f383 	clz	r3, r3
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	461a      	mov	r2, r3
 80062fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	461a      	mov	r2, r3
 8006306:	2300      	movs	r3, #0
 8006308:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800630a:	4a18      	ldr	r2, [pc, #96]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800630c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800630e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d04b      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631a:	f7fc fee3 	bl	80030e4 <HAL_GetTick>
 800631e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006320:	e00a      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006322:	f7fc fedf 	bl	80030e4 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006330:	4293      	cmp	r3, r2
 8006332:	d901      	bls.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e180      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006338:	2302      	movs	r3, #2
 800633a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633e:	fa93 f3a3 	rbit	r3, r3
 8006342:	627b      	str	r3, [r7, #36]	@ 0x24
 8006344:	2302      	movs	r3, #2
 8006346:	623b      	str	r3, [r7, #32]
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	fa93 f3a3 	rbit	r3, r3
 800634e:	61fb      	str	r3, [r7, #28]
  return result;
 8006350:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006352:	fab3 f383 	clz	r3, r3
 8006356:	b2db      	uxtb	r3, r3
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f043 0302 	orr.w	r3, r3, #2
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d108      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006366:	4b01      	ldr	r3, [pc, #4]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	e00d      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800636c:	40021000 	.word	0x40021000
 8006370:	40007000 	.word	0x40007000
 8006374:	10908100 	.word	0x10908100
 8006378:	2302      	movs	r3, #2
 800637a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	fa93 f3a3 	rbit	r3, r3
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	4b9a      	ldr	r3, [pc, #616]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006388:	2202      	movs	r2, #2
 800638a:	613a      	str	r2, [r7, #16]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	fa92 f2a2 	rbit	r2, r2
 8006392:	60fa      	str	r2, [r7, #12]
  return result;
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	fab2 f282 	clz	r2, r2
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	f002 021f 	and.w	r2, r2, #31
 80063a6:	2101      	movs	r1, #1
 80063a8:	fa01 f202 	lsl.w	r2, r1, r2
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0b7      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80063b2:	4b8f      	ldr	r3, [pc, #572]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	498c      	ldr	r1, [pc, #560]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80063c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d105      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063cc:	4b88      	ldr	r3, [pc, #544]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	4a87      	ldr	r2, [pc, #540]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d008      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063e4:	4b82      	ldr	r3, [pc, #520]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e8:	f023 0203 	bic.w	r2, r3, #3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	497f      	ldr	r1, [pc, #508]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d008      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006402:	4b7b      	ldr	r3, [pc, #492]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006406:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	4978      	ldr	r1, [pc, #480]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006410:	4313      	orrs	r3, r2
 8006412:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006420:	4b73      	ldr	r3, [pc, #460]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006424:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	4970      	ldr	r1, [pc, #448]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800642e:	4313      	orrs	r3, r2
 8006430:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d008      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800643e:	4b6c      	ldr	r3, [pc, #432]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006442:	f023 0210 	bic.w	r2, r3, #16
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	4969      	ldr	r1, [pc, #420]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800644c:	4313      	orrs	r3, r2
 800644e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d008      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800645c:	4b64      	ldr	r3, [pc, #400]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006468:	4961      	ldr	r1, [pc, #388]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800646a:	4313      	orrs	r3, r2
 800646c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800647a:	4b5d      	ldr	r3, [pc, #372]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800647c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800647e:	f023 0220 	bic.w	r2, r3, #32
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	495a      	ldr	r1, [pc, #360]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006488:	4313      	orrs	r3, r2
 800648a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d008      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006498:	4b55      	ldr	r3, [pc, #340]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800649a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a4:	4952      	ldr	r1, [pc, #328]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0308 	and.w	r3, r3, #8
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d008      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064b6:	4b4e      	ldr	r3, [pc, #312]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	494b      	ldr	r1, [pc, #300]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064d4:	4b46      	ldr	r3, [pc, #280]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	4943      	ldr	r1, [pc, #268]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d008      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064f2:	4b3f      	ldr	r3, [pc, #252]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fe:	493c      	ldr	r1, [pc, #240]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006500:	4313      	orrs	r3, r2
 8006502:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006510:	4b37      	ldr	r3, [pc, #220]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651c:	4934      	ldr	r1, [pc, #208]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800651e:	4313      	orrs	r3, r2
 8006520:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800652a:	2b00      	cmp	r3, #0
 800652c:	d008      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800652e:	4b30      	ldr	r3, [pc, #192]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006532:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653a:	492d      	ldr	r1, [pc, #180]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800653c:	4313      	orrs	r3, r2
 800653e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d008      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800654c:	4b28      	ldr	r3, [pc, #160]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800654e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006550:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006558:	4925      	ldr	r1, [pc, #148]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800655a:	4313      	orrs	r3, r2
 800655c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d008      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800656a:	4b21      	ldr	r3, [pc, #132]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800656c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006576:	491e      	ldr	r1, [pc, #120]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006578:	4313      	orrs	r3, r2
 800657a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006588:	4b19      	ldr	r3, [pc, #100]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800658a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006594:	4916      	ldr	r1, [pc, #88]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006596:	4313      	orrs	r3, r2
 8006598:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d008      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80065a6:	4b12      	ldr	r3, [pc, #72]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b2:	490f      	ldr	r1, [pc, #60]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d008      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80065c4:	4b0a      	ldr	r3, [pc, #40]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d0:	4907      	ldr	r1, [pc, #28]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00c      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80065e2:	4b03      	ldr	r3, [pc, #12]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	e002      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80065ee:	bf00      	nop
 80065f0:	40021000 	.word	0x40021000
 80065f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065f6:	4913      	ldr	r1, [pc, #76]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006608:	4b0e      	ldr	r3, [pc, #56]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800660a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006614:	490b      	ldr	r1, [pc, #44]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006616:	4313      	orrs	r3, r2
 8006618:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d008      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006626:	4b07      	ldr	r3, [pc, #28]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006632:	4904      	ldr	r1, [pc, #16]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006634:	4313      	orrs	r3, r2
 8006636:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3748      	adds	r7, #72	@ 0x48
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	40021000 	.word	0x40021000

08006648 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e073      	b.n	8006746 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	7f5b      	ldrb	r3, [r3, #29]
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fc f898 	bl	80027a4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f003 0310 	and.w	r3, r3, #16
 8006684:	2b10      	cmp	r3, #16
 8006686:	d055      	beq.n	8006734 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	22ca      	movs	r2, #202	@ 0xca
 800668e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2253      	movs	r2, #83	@ 0x53
 8006696:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f87f 	bl	800679c <RTC_EnterInitMode>
 800669e:	4603      	mov	r3, r0
 80066a0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d12c      	bne.n	8006702 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6812      	ldr	r2, [r2, #0]
 80066b2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80066b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066ba:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6899      	ldr	r1, [r3, #8]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	431a      	orrs	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	68d2      	ldr	r2, [r2, #12]
 80066e2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6919      	ldr	r1, [r3, #16]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	041a      	lsls	r2, r3, #16
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f886 	bl	800680a <RTC_ExitInitMode>
 80066fe:	4603      	mov	r3, r0
 8006700:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d110      	bne.n	800672a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006716:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	22ff      	movs	r2, #255	@ 0xff
 8006730:	625a      	str	r2, [r3, #36]	@ 0x24
 8006732:	e001      	b.n	8006738 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d102      	bne.n	8006744 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006744:	7bfb      	ldrb	r3, [r7, #15]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a0d      	ldr	r2, [pc, #52]	@ (8006798 <HAL_RTC_WaitForSynchro+0x48>)
 8006762:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006764:	f7fc fcbe 	bl	80030e4 <HAL_GetTick>
 8006768:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800676a:	e009      	b.n	8006780 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800676c:	f7fc fcba 	bl	80030e4 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800677a:	d901      	bls.n	8006780 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e007      	b.n	8006790 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0ee      	beq.n	800676c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	0001ff5f 	.word	0x0001ff5f

0800679c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d122      	bne.n	8006800 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80067c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067ca:	f7fc fc8b 	bl	80030e4 <HAL_GetTick>
 80067ce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80067d0:	e00c      	b.n	80067ec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067d2:	f7fc fc87 	bl	80030e4 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067e0:	d904      	bls.n	80067ec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2204      	movs	r2, #4
 80067e6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d102      	bne.n	8006800 <RTC_EnterInitMode+0x64>
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d1e8      	bne.n	80067d2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006800:	7bfb      	ldrb	r3, [r7, #15]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b084      	sub	sp, #16
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006824:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 0320 	and.w	r3, r3, #32
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff ff8b 	bl	8006750 <HAL_RTC_WaitForSynchro>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d004      	beq.n	800684a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2204      	movs	r2, #4
 8006844:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e049      	b.n	80068fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d106      	bne.n	8006880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7fc f8f2 	bl	8002a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3304      	adds	r3, #4
 8006890:	4619      	mov	r1, r3
 8006892:	4610      	mov	r0, r2
 8006894:	f000 fd7c 	bl	8007390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	d001      	beq.n	800691c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e04f      	b.n	80069bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0201 	orr.w	r2, r2, #1
 8006932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a23      	ldr	r2, [pc, #140]	@ (80069c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d01d      	beq.n	800697a <HAL_TIM_Base_Start_IT+0x76>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006946:	d018      	beq.n	800697a <HAL_TIM_Base_Start_IT+0x76>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1f      	ldr	r2, [pc, #124]	@ (80069cc <HAL_TIM_Base_Start_IT+0xc8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d013      	beq.n	800697a <HAL_TIM_Base_Start_IT+0x76>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1e      	ldr	r2, [pc, #120]	@ (80069d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00e      	beq.n	800697a <HAL_TIM_Base_Start_IT+0x76>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1c      	ldr	r2, [pc, #112]	@ (80069d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d009      	beq.n	800697a <HAL_TIM_Base_Start_IT+0x76>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a1b      	ldr	r2, [pc, #108]	@ (80069d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_TIM_Base_Start_IT+0x76>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a19      	ldr	r2, [pc, #100]	@ (80069dc <HAL_TIM_Base_Start_IT+0xd8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d115      	bne.n	80069a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	4b17      	ldr	r3, [pc, #92]	@ (80069e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006982:	4013      	ands	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b06      	cmp	r3, #6
 800698a:	d015      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0xb4>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006992:	d011      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a4:	e008      	b.n	80069b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 0201 	orr.w	r2, r2, #1
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	e000      	b.n	80069ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	40012c00 	.word	0x40012c00
 80069cc:	40000400 	.word	0x40000400
 80069d0:	40000800 	.word	0x40000800
 80069d4:	40013400 	.word	0x40013400
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40015000 	.word	0x40015000
 80069e0:	00010007 	.word	0x00010007

080069e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e049      	b.n	8006a8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fc f80c 	bl	8002a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	4619      	mov	r1, r3
 8006a22:	4610      	mov	r0, r2
 8006a24:	f000 fcb4 	bl	8007390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d109      	bne.n	8006ab8 <HAL_TIM_PWM_Start+0x24>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	bf14      	ite	ne
 8006ab0:	2301      	movne	r3, #1
 8006ab2:	2300      	moveq	r3, #0
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	e03c      	b.n	8006b32 <HAL_TIM_PWM_Start+0x9e>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d109      	bne.n	8006ad2 <HAL_TIM_PWM_Start+0x3e>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	bf14      	ite	ne
 8006aca:	2301      	movne	r3, #1
 8006acc:	2300      	moveq	r3, #0
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	e02f      	b.n	8006b32 <HAL_TIM_PWM_Start+0x9e>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d109      	bne.n	8006aec <HAL_TIM_PWM_Start+0x58>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	bf14      	ite	ne
 8006ae4:	2301      	movne	r3, #1
 8006ae6:	2300      	moveq	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	e022      	b.n	8006b32 <HAL_TIM_PWM_Start+0x9e>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b0c      	cmp	r3, #12
 8006af0:	d109      	bne.n	8006b06 <HAL_TIM_PWM_Start+0x72>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	bf14      	ite	ne
 8006afe:	2301      	movne	r3, #1
 8006b00:	2300      	moveq	r3, #0
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	e015      	b.n	8006b32 <HAL_TIM_PWM_Start+0x9e>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	d109      	bne.n	8006b20 <HAL_TIM_PWM_Start+0x8c>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	bf14      	ite	ne
 8006b18:	2301      	movne	r3, #1
 8006b1a:	2300      	moveq	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	e008      	b.n	8006b32 <HAL_TIM_PWM_Start+0x9e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	bf14      	ite	ne
 8006b2c:	2301      	movne	r3, #1
 8006b2e:	2300      	moveq	r3, #0
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e0a1      	b.n	8006c7e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <HAL_TIM_PWM_Start+0xb6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b48:	e023      	b.n	8006b92 <HAL_TIM_PWM_Start+0xfe>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d104      	bne.n	8006b5a <HAL_TIM_PWM_Start+0xc6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b58:	e01b      	b.n	8006b92 <HAL_TIM_PWM_Start+0xfe>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d104      	bne.n	8006b6a <HAL_TIM_PWM_Start+0xd6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b68:	e013      	b.n	8006b92 <HAL_TIM_PWM_Start+0xfe>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b0c      	cmp	r3, #12
 8006b6e:	d104      	bne.n	8006b7a <HAL_TIM_PWM_Start+0xe6>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b78:	e00b      	b.n	8006b92 <HAL_TIM_PWM_Start+0xfe>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b10      	cmp	r3, #16
 8006b7e:	d104      	bne.n	8006b8a <HAL_TIM_PWM_Start+0xf6>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b88:	e003      	b.n	8006b92 <HAL_TIM_PWM_Start+0xfe>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2201      	movs	r2, #1
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 ffa8 	bl	8007af0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a38      	ldr	r2, [pc, #224]	@ (8006c88 <HAL_TIM_PWM_Start+0x1f4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d018      	beq.n	8006bdc <HAL_TIM_PWM_Start+0x148>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a37      	ldr	r2, [pc, #220]	@ (8006c8c <HAL_TIM_PWM_Start+0x1f8>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d013      	beq.n	8006bdc <HAL_TIM_PWM_Start+0x148>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a35      	ldr	r2, [pc, #212]	@ (8006c90 <HAL_TIM_PWM_Start+0x1fc>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00e      	beq.n	8006bdc <HAL_TIM_PWM_Start+0x148>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a34      	ldr	r2, [pc, #208]	@ (8006c94 <HAL_TIM_PWM_Start+0x200>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d009      	beq.n	8006bdc <HAL_TIM_PWM_Start+0x148>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a32      	ldr	r2, [pc, #200]	@ (8006c98 <HAL_TIM_PWM_Start+0x204>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d004      	beq.n	8006bdc <HAL_TIM_PWM_Start+0x148>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a31      	ldr	r2, [pc, #196]	@ (8006c9c <HAL_TIM_PWM_Start+0x208>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d101      	bne.n	8006be0 <HAL_TIM_PWM_Start+0x14c>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e000      	b.n	8006be2 <HAL_TIM_PWM_Start+0x14e>
 8006be0:	2300      	movs	r3, #0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d007      	beq.n	8006bf6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bf4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a23      	ldr	r2, [pc, #140]	@ (8006c88 <HAL_TIM_PWM_Start+0x1f4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d01d      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x1a8>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c08:	d018      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x1a8>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a24      	ldr	r2, [pc, #144]	@ (8006ca0 <HAL_TIM_PWM_Start+0x20c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x1a8>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a22      	ldr	r2, [pc, #136]	@ (8006ca4 <HAL_TIM_PWM_Start+0x210>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00e      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x1a8>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a1a      	ldr	r2, [pc, #104]	@ (8006c8c <HAL_TIM_PWM_Start+0x1f8>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d009      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x1a8>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a18      	ldr	r2, [pc, #96]	@ (8006c90 <HAL_TIM_PWM_Start+0x1fc>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d004      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x1a8>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a19      	ldr	r2, [pc, #100]	@ (8006c9c <HAL_TIM_PWM_Start+0x208>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d115      	bne.n	8006c68 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	4b19      	ldr	r3, [pc, #100]	@ (8006ca8 <HAL_TIM_PWM_Start+0x214>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b06      	cmp	r3, #6
 8006c4c:	d015      	beq.n	8006c7a <HAL_TIM_PWM_Start+0x1e6>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c54:	d011      	beq.n	8006c7a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f042 0201 	orr.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c66:	e008      	b.n	8006c7a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0201 	orr.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	e000      	b.n	8006c7c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	40012c00 	.word	0x40012c00
 8006c8c:	40013400 	.word	0x40013400
 8006c90:	40014000 	.word	0x40014000
 8006c94:	40014400 	.word	0x40014400
 8006c98:	40014800 	.word	0x40014800
 8006c9c:	40015000 	.word	0x40015000
 8006ca0:	40000400 	.word	0x40000400
 8006ca4:	40000800 	.word	0x40000800
 8006ca8:	00010007 	.word	0x00010007

08006cac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e097      	b.n	8006df0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d106      	bne.n	8006cda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7fb fd8b 	bl	80027f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2202      	movs	r2, #2
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	6812      	ldr	r2, [r2, #0]
 8006cec:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006cf0:	f023 0307 	bic.w	r3, r3, #7
 8006cf4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4610      	mov	r0, r2
 8006d02:	f000 fb45 	bl	8007390 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d2e:	f023 0303 	bic.w	r3, r3, #3
 8006d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006d4c:	f023 030c 	bic.w	r3, r3, #12
 8006d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	011a      	lsls	r2, r3, #4
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	031b      	lsls	r3, r3, #12
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006d8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006d92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	011b      	lsls	r3, r3, #4
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d110      	bne.n	8006e4a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d102      	bne.n	8006e34 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e2e:	7b7b      	ldrb	r3, [r7, #13]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d001      	beq.n	8006e38 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e069      	b.n	8006f0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e48:	e031      	b.n	8006eae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d110      	bne.n	8006e72 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d102      	bne.n	8006e5c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e56:	7b3b      	ldrb	r3, [r7, #12]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d001      	beq.n	8006e60 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e055      	b.n	8006f0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e70:	e01d      	b.n	8006eae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d108      	bne.n	8006e8a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d105      	bne.n	8006e8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e7e:	7b7b      	ldrb	r3, [r7, #13]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d102      	bne.n	8006e8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e84:	7b3b      	ldrb	r3, [r7, #12]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d001      	beq.n	8006e8e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e03e      	b.n	8006f0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2202      	movs	r2, #2
 8006e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2202      	movs	r2, #2
 8006e9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <HAL_TIM_Encoder_Start+0xc4>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d008      	beq.n	8006ecc <HAL_TIM_Encoder_Start+0xd4>
 8006eba:	e00f      	b.n	8006edc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fe13 	bl	8007af0 <TIM_CCxChannelCmd>
      break;
 8006eca:	e016      	b.n	8006efa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	2104      	movs	r1, #4
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fe0b 	bl	8007af0 <TIM_CCxChannelCmd>
      break;
 8006eda:	e00e      	b.n	8006efa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 fe03 	bl	8007af0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	2104      	movs	r1, #4
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 fdfc 	bl	8007af0 <TIM_CCxChannelCmd>
      break;
 8006ef8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f042 0201 	orr.w	r2, r2, #1
 8006f08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d020      	beq.n	8006f78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01b      	beq.n	8006f78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f06f 0202 	mvn.w	r2, #2
 8006f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f9f8 	bl	8007354 <HAL_TIM_IC_CaptureCallback>
 8006f64:	e005      	b.n	8006f72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f9ea 	bl	8007340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f9fb 	bl	8007368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d020      	beq.n	8006fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01b      	beq.n	8006fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f06f 0204 	mvn.w	r2, #4
 8006f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f9d2 	bl	8007354 <HAL_TIM_IC_CaptureCallback>
 8006fb0:	e005      	b.n	8006fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f9c4 	bl	8007340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f9d5 	bl	8007368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f003 0308 	and.w	r3, r3, #8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d020      	beq.n	8007010 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f003 0308 	and.w	r3, r3, #8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01b      	beq.n	8007010 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f06f 0208 	mvn.w	r2, #8
 8006fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2204      	movs	r2, #4
 8006fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f9ac 	bl	8007354 <HAL_TIM_IC_CaptureCallback>
 8006ffc:	e005      	b.n	800700a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f99e 	bl	8007340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f9af 	bl	8007368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f003 0310 	and.w	r3, r3, #16
 8007016:	2b00      	cmp	r3, #0
 8007018:	d020      	beq.n	800705c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f003 0310 	and.w	r3, r3, #16
 8007020:	2b00      	cmp	r3, #0
 8007022:	d01b      	beq.n	800705c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f06f 0210 	mvn.w	r2, #16
 800702c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2208      	movs	r2, #8
 8007032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f986 	bl	8007354 <HAL_TIM_IC_CaptureCallback>
 8007048:	e005      	b.n	8007056 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f978 	bl	8007340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f989 	bl	8007368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00c      	beq.n	8007080 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	2b00      	cmp	r3, #0
 800706e:	d007      	beq.n	8007080 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0201 	mvn.w	r2, #1
 8007078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7fa fd8c 	bl	8001b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00c      	beq.n	80070a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007090:	2b00      	cmp	r3, #0
 8007092:	d007      	beq.n	80070a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800709c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fde2 	bl	8007c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00c      	beq.n	80070c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d007      	beq.n	80070c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80070c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fdda 	bl	8007c7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00c      	beq.n	80070ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d007      	beq.n	80070ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80070e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f948 	bl	800737c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00c      	beq.n	8007110 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d007      	beq.n	8007110 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0220 	mvn.w	r2, #32
 8007108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fda2 	bl	8007c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007110:	bf00      	nop
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800712e:	2b01      	cmp	r3, #1
 8007130:	d101      	bne.n	8007136 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007132:	2302      	movs	r3, #2
 8007134:	e0ff      	b.n	8007336 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b14      	cmp	r3, #20
 8007142:	f200 80f0 	bhi.w	8007326 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007146:	a201      	add	r2, pc, #4	@ (adr r2, 800714c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	080071a1 	.word	0x080071a1
 8007150:	08007327 	.word	0x08007327
 8007154:	08007327 	.word	0x08007327
 8007158:	08007327 	.word	0x08007327
 800715c:	080071e1 	.word	0x080071e1
 8007160:	08007327 	.word	0x08007327
 8007164:	08007327 	.word	0x08007327
 8007168:	08007327 	.word	0x08007327
 800716c:	08007223 	.word	0x08007223
 8007170:	08007327 	.word	0x08007327
 8007174:	08007327 	.word	0x08007327
 8007178:	08007327 	.word	0x08007327
 800717c:	08007263 	.word	0x08007263
 8007180:	08007327 	.word	0x08007327
 8007184:	08007327 	.word	0x08007327
 8007188:	08007327 	.word	0x08007327
 800718c:	080072a5 	.word	0x080072a5
 8007190:	08007327 	.word	0x08007327
 8007194:	08007327 	.word	0x08007327
 8007198:	08007327 	.word	0x08007327
 800719c:	080072e5 	.word	0x080072e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68b9      	ldr	r1, [r7, #8]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 f99c 	bl	80074e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699a      	ldr	r2, [r3, #24]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0208 	orr.w	r2, r2, #8
 80071ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f022 0204 	bic.w	r2, r2, #4
 80071ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6999      	ldr	r1, [r3, #24]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	691a      	ldr	r2, [r3, #16]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	619a      	str	r2, [r3, #24]
      break;
 80071de:	e0a5      	b.n	800732c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68b9      	ldr	r1, [r7, #8]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 fa16 	bl	8007618 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699a      	ldr	r2, [r3, #24]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	699a      	ldr	r2, [r3, #24]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800720a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6999      	ldr	r1, [r3, #24]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	021a      	lsls	r2, r3, #8
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	619a      	str	r2, [r3, #24]
      break;
 8007220:	e084      	b.n	800732c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68b9      	ldr	r1, [r7, #8]
 8007228:	4618      	mov	r0, r3
 800722a:	f000 fa89 	bl	8007740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f042 0208 	orr.w	r2, r2, #8
 800723c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69da      	ldr	r2, [r3, #28]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0204 	bic.w	r2, r2, #4
 800724c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69d9      	ldr	r1, [r3, #28]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	691a      	ldr	r2, [r3, #16]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	61da      	str	r2, [r3, #28]
      break;
 8007260:	e064      	b.n	800732c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68b9      	ldr	r1, [r7, #8]
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fafb 	bl	8007864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69da      	ldr	r2, [r3, #28]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800727c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69da      	ldr	r2, [r3, #28]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800728c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69d9      	ldr	r1, [r3, #28]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	021a      	lsls	r2, r3, #8
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	61da      	str	r2, [r3, #28]
      break;
 80072a2:	e043      	b.n	800732c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68b9      	ldr	r1, [r7, #8]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 fb4a 	bl	8007944 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0208 	orr.w	r2, r2, #8
 80072be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f022 0204 	bic.w	r2, r2, #4
 80072ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	691a      	ldr	r2, [r3, #16]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80072e2:	e023      	b.n	800732c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68b9      	ldr	r1, [r7, #8]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fb94 	bl	8007a18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800730e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	021a      	lsls	r2, r3, #8
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007324:	e002      	b.n	800732c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	75fb      	strb	r3, [r7, #23]
      break;
 800732a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007334:	7dfb      	ldrb	r3, [r7, #23]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop

08007340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a48      	ldr	r2, [pc, #288]	@ (80074c4 <TIM_Base_SetConfig+0x134>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d013      	beq.n	80073d0 <TIM_Base_SetConfig+0x40>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ae:	d00f      	beq.n	80073d0 <TIM_Base_SetConfig+0x40>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a45      	ldr	r2, [pc, #276]	@ (80074c8 <TIM_Base_SetConfig+0x138>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d00b      	beq.n	80073d0 <TIM_Base_SetConfig+0x40>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a44      	ldr	r2, [pc, #272]	@ (80074cc <TIM_Base_SetConfig+0x13c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d007      	beq.n	80073d0 <TIM_Base_SetConfig+0x40>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a43      	ldr	r2, [pc, #268]	@ (80074d0 <TIM_Base_SetConfig+0x140>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d003      	beq.n	80073d0 <TIM_Base_SetConfig+0x40>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a42      	ldr	r2, [pc, #264]	@ (80074d4 <TIM_Base_SetConfig+0x144>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d108      	bne.n	80073e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a37      	ldr	r2, [pc, #220]	@ (80074c4 <TIM_Base_SetConfig+0x134>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d01f      	beq.n	800742a <TIM_Base_SetConfig+0x9a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f0:	d01b      	beq.n	800742a <TIM_Base_SetConfig+0x9a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a34      	ldr	r2, [pc, #208]	@ (80074c8 <TIM_Base_SetConfig+0x138>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d017      	beq.n	800742a <TIM_Base_SetConfig+0x9a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a33      	ldr	r2, [pc, #204]	@ (80074cc <TIM_Base_SetConfig+0x13c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d013      	beq.n	800742a <TIM_Base_SetConfig+0x9a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a32      	ldr	r2, [pc, #200]	@ (80074d0 <TIM_Base_SetConfig+0x140>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00f      	beq.n	800742a <TIM_Base_SetConfig+0x9a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a32      	ldr	r2, [pc, #200]	@ (80074d8 <TIM_Base_SetConfig+0x148>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00b      	beq.n	800742a <TIM_Base_SetConfig+0x9a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a31      	ldr	r2, [pc, #196]	@ (80074dc <TIM_Base_SetConfig+0x14c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d007      	beq.n	800742a <TIM_Base_SetConfig+0x9a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a30      	ldr	r2, [pc, #192]	@ (80074e0 <TIM_Base_SetConfig+0x150>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d003      	beq.n	800742a <TIM_Base_SetConfig+0x9a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a2b      	ldr	r2, [pc, #172]	@ (80074d4 <TIM_Base_SetConfig+0x144>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d108      	bne.n	800743c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a18      	ldr	r2, [pc, #96]	@ (80074c4 <TIM_Base_SetConfig+0x134>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d013      	beq.n	8007490 <TIM_Base_SetConfig+0x100>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a19      	ldr	r2, [pc, #100]	@ (80074d0 <TIM_Base_SetConfig+0x140>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d00f      	beq.n	8007490 <TIM_Base_SetConfig+0x100>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a19      	ldr	r2, [pc, #100]	@ (80074d8 <TIM_Base_SetConfig+0x148>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d00b      	beq.n	8007490 <TIM_Base_SetConfig+0x100>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a18      	ldr	r2, [pc, #96]	@ (80074dc <TIM_Base_SetConfig+0x14c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d007      	beq.n	8007490 <TIM_Base_SetConfig+0x100>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a17      	ldr	r2, [pc, #92]	@ (80074e0 <TIM_Base_SetConfig+0x150>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d003      	beq.n	8007490 <TIM_Base_SetConfig+0x100>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a12      	ldr	r2, [pc, #72]	@ (80074d4 <TIM_Base_SetConfig+0x144>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d103      	bne.n	8007498 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	691a      	ldr	r2, [r3, #16]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d105      	bne.n	80074b6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	f023 0201 	bic.w	r2, r3, #1
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	611a      	str	r2, [r3, #16]
  }
}
 80074b6:	bf00      	nop
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	40012c00 	.word	0x40012c00
 80074c8:	40000400 	.word	0x40000400
 80074cc:	40000800 	.word	0x40000800
 80074d0:	40013400 	.word	0x40013400
 80074d4:	40015000 	.word	0x40015000
 80074d8:	40014000 	.word	0x40014000
 80074dc:	40014400 	.word	0x40014400
 80074e0:	40014800 	.word	0x40014800

080074e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	f023 0201 	bic.w	r2, r3, #1
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0303 	bic.w	r3, r3, #3
 800751e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f023 0302 	bic.w	r3, r3, #2
 8007530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4313      	orrs	r3, r2
 800753a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a30      	ldr	r2, [pc, #192]	@ (8007600 <TIM_OC1_SetConfig+0x11c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d013      	beq.n	800756c <TIM_OC1_SetConfig+0x88>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a2f      	ldr	r2, [pc, #188]	@ (8007604 <TIM_OC1_SetConfig+0x120>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d00f      	beq.n	800756c <TIM_OC1_SetConfig+0x88>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a2e      	ldr	r2, [pc, #184]	@ (8007608 <TIM_OC1_SetConfig+0x124>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d00b      	beq.n	800756c <TIM_OC1_SetConfig+0x88>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a2d      	ldr	r2, [pc, #180]	@ (800760c <TIM_OC1_SetConfig+0x128>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d007      	beq.n	800756c <TIM_OC1_SetConfig+0x88>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a2c      	ldr	r2, [pc, #176]	@ (8007610 <TIM_OC1_SetConfig+0x12c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d003      	beq.n	800756c <TIM_OC1_SetConfig+0x88>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a2b      	ldr	r2, [pc, #172]	@ (8007614 <TIM_OC1_SetConfig+0x130>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d10c      	bne.n	8007586 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f023 0308 	bic.w	r3, r3, #8
 8007572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	4313      	orrs	r3, r2
 800757c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f023 0304 	bic.w	r3, r3, #4
 8007584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a1d      	ldr	r2, [pc, #116]	@ (8007600 <TIM_OC1_SetConfig+0x11c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d013      	beq.n	80075b6 <TIM_OC1_SetConfig+0xd2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a1c      	ldr	r2, [pc, #112]	@ (8007604 <TIM_OC1_SetConfig+0x120>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d00f      	beq.n	80075b6 <TIM_OC1_SetConfig+0xd2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a1b      	ldr	r2, [pc, #108]	@ (8007608 <TIM_OC1_SetConfig+0x124>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00b      	beq.n	80075b6 <TIM_OC1_SetConfig+0xd2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a1a      	ldr	r2, [pc, #104]	@ (800760c <TIM_OC1_SetConfig+0x128>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d007      	beq.n	80075b6 <TIM_OC1_SetConfig+0xd2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a19      	ldr	r2, [pc, #100]	@ (8007610 <TIM_OC1_SetConfig+0x12c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d003      	beq.n	80075b6 <TIM_OC1_SetConfig+0xd2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a18      	ldr	r2, [pc, #96]	@ (8007614 <TIM_OC1_SetConfig+0x130>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d111      	bne.n	80075da <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	621a      	str	r2, [r3, #32]
}
 80075f4:	bf00      	nop
 80075f6:	371c      	adds	r7, #28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	40012c00 	.word	0x40012c00
 8007604:	40013400 	.word	0x40013400
 8007608:	40014000 	.word	0x40014000
 800760c:	40014400 	.word	0x40014400
 8007610:	40014800 	.word	0x40014800
 8007614:	40015000 	.word	0x40015000

08007618 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	f023 0210 	bic.w	r2, r3, #16
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800764a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	021b      	lsls	r3, r3, #8
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f023 0320 	bic.w	r3, r3, #32
 8007666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a2c      	ldr	r2, [pc, #176]	@ (8007728 <TIM_OC2_SetConfig+0x110>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d007      	beq.n	800768c <TIM_OC2_SetConfig+0x74>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a2b      	ldr	r2, [pc, #172]	@ (800772c <TIM_OC2_SetConfig+0x114>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d003      	beq.n	800768c <TIM_OC2_SetConfig+0x74>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a2a      	ldr	r2, [pc, #168]	@ (8007730 <TIM_OC2_SetConfig+0x118>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d10d      	bne.n	80076a8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007728 <TIM_OC2_SetConfig+0x110>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d013      	beq.n	80076d8 <TIM_OC2_SetConfig+0xc0>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a1e      	ldr	r2, [pc, #120]	@ (800772c <TIM_OC2_SetConfig+0x114>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d00f      	beq.n	80076d8 <TIM_OC2_SetConfig+0xc0>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007734 <TIM_OC2_SetConfig+0x11c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d00b      	beq.n	80076d8 <TIM_OC2_SetConfig+0xc0>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a1d      	ldr	r2, [pc, #116]	@ (8007738 <TIM_OC2_SetConfig+0x120>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d007      	beq.n	80076d8 <TIM_OC2_SetConfig+0xc0>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a1c      	ldr	r2, [pc, #112]	@ (800773c <TIM_OC2_SetConfig+0x124>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d003      	beq.n	80076d8 <TIM_OC2_SetConfig+0xc0>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a17      	ldr	r2, [pc, #92]	@ (8007730 <TIM_OC2_SetConfig+0x118>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d113      	bne.n	8007700 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076de:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076e6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	621a      	str	r2, [r3, #32]
}
 800771a:	bf00      	nop
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	40012c00 	.word	0x40012c00
 800772c:	40013400 	.word	0x40013400
 8007730:	40015000 	.word	0x40015000
 8007734:	40014000 	.word	0x40014000
 8007738:	40014400 	.word	0x40014400
 800773c:	40014800 	.word	0x40014800

08007740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800776e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f023 0303 	bic.w	r3, r3, #3
 800777a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	4313      	orrs	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800778c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	021b      	lsls	r3, r3, #8
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a2b      	ldr	r2, [pc, #172]	@ (800784c <TIM_OC3_SetConfig+0x10c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d007      	beq.n	80077b2 <TIM_OC3_SetConfig+0x72>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a2a      	ldr	r2, [pc, #168]	@ (8007850 <TIM_OC3_SetConfig+0x110>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d003      	beq.n	80077b2 <TIM_OC3_SetConfig+0x72>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a29      	ldr	r2, [pc, #164]	@ (8007854 <TIM_OC3_SetConfig+0x114>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d10d      	bne.n	80077ce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	021b      	lsls	r3, r3, #8
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077cc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a1e      	ldr	r2, [pc, #120]	@ (800784c <TIM_OC3_SetConfig+0x10c>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d013      	beq.n	80077fe <TIM_OC3_SetConfig+0xbe>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007850 <TIM_OC3_SetConfig+0x110>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00f      	beq.n	80077fe <TIM_OC3_SetConfig+0xbe>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007858 <TIM_OC3_SetConfig+0x118>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00b      	beq.n	80077fe <TIM_OC3_SetConfig+0xbe>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a1c      	ldr	r2, [pc, #112]	@ (800785c <TIM_OC3_SetConfig+0x11c>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d007      	beq.n	80077fe <TIM_OC3_SetConfig+0xbe>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007860 <TIM_OC3_SetConfig+0x120>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_OC3_SetConfig+0xbe>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a16      	ldr	r2, [pc, #88]	@ (8007854 <TIM_OC3_SetConfig+0x114>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d113      	bne.n	8007826 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800780c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	4313      	orrs	r3, r2
 8007824:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	621a      	str	r2, [r3, #32]
}
 8007840:	bf00      	nop
 8007842:	371c      	adds	r7, #28
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	40012c00 	.word	0x40012c00
 8007850:	40013400 	.word	0x40013400
 8007854:	40015000 	.word	0x40015000
 8007858:	40014000 	.word	0x40014000
 800785c:	40014400 	.word	0x40014400
 8007860:	40014800 	.word	0x40014800

08007864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800789e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	021b      	lsls	r3, r3, #8
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	031b      	lsls	r3, r3, #12
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	4313      	orrs	r3, r2
 80078be:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a1a      	ldr	r2, [pc, #104]	@ (800792c <TIM_OC4_SetConfig+0xc8>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d013      	beq.n	80078f0 <TIM_OC4_SetConfig+0x8c>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a19      	ldr	r2, [pc, #100]	@ (8007930 <TIM_OC4_SetConfig+0xcc>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d00f      	beq.n	80078f0 <TIM_OC4_SetConfig+0x8c>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a18      	ldr	r2, [pc, #96]	@ (8007934 <TIM_OC4_SetConfig+0xd0>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d00b      	beq.n	80078f0 <TIM_OC4_SetConfig+0x8c>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a17      	ldr	r2, [pc, #92]	@ (8007938 <TIM_OC4_SetConfig+0xd4>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d007      	beq.n	80078f0 <TIM_OC4_SetConfig+0x8c>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a16      	ldr	r2, [pc, #88]	@ (800793c <TIM_OC4_SetConfig+0xd8>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d003      	beq.n	80078f0 <TIM_OC4_SetConfig+0x8c>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a15      	ldr	r2, [pc, #84]	@ (8007940 <TIM_OC4_SetConfig+0xdc>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d109      	bne.n	8007904 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	019b      	lsls	r3, r3, #6
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	4313      	orrs	r3, r2
 8007902:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	621a      	str	r2, [r3, #32]
}
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40012c00 	.word	0x40012c00
 8007930:	40013400 	.word	0x40013400
 8007934:	40014000 	.word	0x40014000
 8007938:	40014400 	.word	0x40014400
 800793c:	40014800 	.word	0x40014800
 8007940:	40015000 	.word	0x40015000

08007944 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007944:	b480      	push	{r7}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	4313      	orrs	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007988:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	041b      	lsls	r3, r3, #16
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	4313      	orrs	r3, r2
 8007994:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a19      	ldr	r2, [pc, #100]	@ (8007a00 <TIM_OC5_SetConfig+0xbc>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d013      	beq.n	80079c6 <TIM_OC5_SetConfig+0x82>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a18      	ldr	r2, [pc, #96]	@ (8007a04 <TIM_OC5_SetConfig+0xc0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d00f      	beq.n	80079c6 <TIM_OC5_SetConfig+0x82>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a17      	ldr	r2, [pc, #92]	@ (8007a08 <TIM_OC5_SetConfig+0xc4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d00b      	beq.n	80079c6 <TIM_OC5_SetConfig+0x82>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a16      	ldr	r2, [pc, #88]	@ (8007a0c <TIM_OC5_SetConfig+0xc8>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d007      	beq.n	80079c6 <TIM_OC5_SetConfig+0x82>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a15      	ldr	r2, [pc, #84]	@ (8007a10 <TIM_OC5_SetConfig+0xcc>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d003      	beq.n	80079c6 <TIM_OC5_SetConfig+0x82>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a14      	ldr	r2, [pc, #80]	@ (8007a14 <TIM_OC5_SetConfig+0xd0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d109      	bne.n	80079da <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	621a      	str	r2, [r3, #32]
}
 80079f4:	bf00      	nop
 80079f6:	371c      	adds	r7, #28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	40012c00 	.word	0x40012c00
 8007a04:	40013400 	.word	0x40013400
 8007a08:	40014000 	.word	0x40014000
 8007a0c:	40014400 	.word	0x40014400
 8007a10:	40014800 	.word	0x40014800
 8007a14:	40015000 	.word	0x40015000

08007a18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	021b      	lsls	r3, r3, #8
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	051b      	lsls	r3, r3, #20
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ad8 <TIM_OC6_SetConfig+0xc0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d013      	beq.n	8007a9c <TIM_OC6_SetConfig+0x84>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a19      	ldr	r2, [pc, #100]	@ (8007adc <TIM_OC6_SetConfig+0xc4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00f      	beq.n	8007a9c <TIM_OC6_SetConfig+0x84>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a18      	ldr	r2, [pc, #96]	@ (8007ae0 <TIM_OC6_SetConfig+0xc8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00b      	beq.n	8007a9c <TIM_OC6_SetConfig+0x84>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a17      	ldr	r2, [pc, #92]	@ (8007ae4 <TIM_OC6_SetConfig+0xcc>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d007      	beq.n	8007a9c <TIM_OC6_SetConfig+0x84>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a16      	ldr	r2, [pc, #88]	@ (8007ae8 <TIM_OC6_SetConfig+0xd0>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_OC6_SetConfig+0x84>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a15      	ldr	r2, [pc, #84]	@ (8007aec <TIM_OC6_SetConfig+0xd4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d109      	bne.n	8007ab0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	029b      	lsls	r3, r3, #10
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	621a      	str	r2, [r3, #32]
}
 8007aca:	bf00      	nop
 8007acc:	371c      	adds	r7, #28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	40012c00 	.word	0x40012c00
 8007adc:	40013400 	.word	0x40013400
 8007ae0:	40014000 	.word	0x40014000
 8007ae4:	40014400 	.word	0x40014400
 8007ae8:	40014800 	.word	0x40014800
 8007aec:	40015000 	.word	0x40015000

08007af0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f003 031f 	and.w	r3, r3, #31
 8007b02:	2201      	movs	r2, #1
 8007b04:	fa02 f303 	lsl.w	r3, r2, r3
 8007b08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a1a      	ldr	r2, [r3, #32]
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	43db      	mvns	r3, r3
 8007b12:	401a      	ands	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6a1a      	ldr	r2, [r3, #32]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f003 031f 	and.w	r3, r3, #31
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	fa01 f303 	lsl.w	r3, r1, r3
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	621a      	str	r2, [r3, #32]
}
 8007b2e:	bf00      	nop
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
	...

08007b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d101      	bne.n	8007b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b50:	2302      	movs	r3, #2
 8007b52:	e06d      	b.n	8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a30      	ldr	r2, [pc, #192]	@ (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d009      	beq.n	8007b92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a2f      	ldr	r2, [pc, #188]	@ (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d004      	beq.n	8007b92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d108      	bne.n	8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007b98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d01d      	beq.n	8007c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bd0:	d018      	beq.n	8007c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d013      	beq.n	8007c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a1a      	ldr	r2, [pc, #104]	@ (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d00e      	beq.n	8007c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a15      	ldr	r2, [pc, #84]	@ (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d009      	beq.n	8007c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a16      	ldr	r2, [pc, #88]	@ (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d004      	beq.n	8007c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a11      	ldr	r2, [pc, #68]	@ (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d10c      	bne.n	8007c1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	40012c00 	.word	0x40012c00
 8007c40:	40013400 	.word	0x40013400
 8007c44:	40015000 	.word	0x40015000
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40000800 	.word	0x40000800
 8007c50:	40014000 	.word	0x40014000

08007c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e040      	b.n	8007d24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d106      	bne.n	8007cb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7fa ff50 	bl	8002b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2224      	movs	r2, #36	@ 0x24
 8007cbc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0201 	bic.w	r2, r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fdd0 	bl	800887c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fbf9 	bl	80084d4 <UART_SetConfig>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d101      	bne.n	8007cec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e01b      	b.n	8007d24 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007cfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0201 	orr.w	r2, r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fe4f 	bl	80089c0 <UART_CheckIdleState>
 8007d22:	4603      	mov	r3, r0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	@ 0x28
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d40:	2b20      	cmp	r3, #32
 8007d42:	d177      	bne.n	8007e34 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d002      	beq.n	8007d50 <HAL_UART_Transmit+0x24>
 8007d4a:	88fb      	ldrh	r3, [r7, #6]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e070      	b.n	8007e36 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2221      	movs	r2, #33	@ 0x21
 8007d60:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d62:	f7fb f9bf 	bl	80030e4 <HAL_GetTick>
 8007d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	88fa      	ldrh	r2, [r7, #6]
 8007d6c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	88fa      	ldrh	r2, [r7, #6]
 8007d74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d80:	d108      	bne.n	8007d94 <HAL_UART_Transmit+0x68>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d104      	bne.n	8007d94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	61bb      	str	r3, [r7, #24]
 8007d92:	e003      	b.n	8007d9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d9c:	e02f      	b.n	8007dfe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2200      	movs	r2, #0
 8007da6:	2180      	movs	r1, #128	@ 0x80
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 feb1 	bl	8008b10 <UART_WaitOnFlagUntilTimeout>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d004      	beq.n	8007dbe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2220      	movs	r2, #32
 8007db8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e03b      	b.n	8007e36 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10b      	bne.n	8007ddc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	881a      	ldrh	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dd0:	b292      	uxth	r2, r2
 8007dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	3302      	adds	r3, #2
 8007dd8:	61bb      	str	r3, [r7, #24]
 8007dda:	e007      	b.n	8007dec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	781a      	ldrb	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	3301      	adds	r3, #1
 8007dea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	3b01      	subs	r3, #1
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1c9      	bne.n	8007d9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	2200      	movs	r2, #0
 8007e12:	2140      	movs	r1, #64	@ 0x40
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 fe7b 	bl	8008b10 <UART_WaitOnFlagUntilTimeout>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d004      	beq.n	8007e2a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2220      	movs	r2, #32
 8007e24:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e005      	b.n	8007e36 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	e000      	b.n	8007e36 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007e34:	2302      	movs	r3, #2
  }
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3720      	adds	r7, #32
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b08a      	sub	sp, #40	@ 0x28
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	60b9      	str	r1, [r7, #8]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e52:	2b20      	cmp	r3, #32
 8007e54:	d132      	bne.n	8007ebc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <HAL_UART_Receive_IT+0x24>
 8007e5c:	88fb      	ldrh	r3, [r7, #6]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e02b      	b.n	8007ebe <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d018      	beq.n	8007eac <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	613b      	str	r3, [r7, #16]
   return(result);
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	623b      	str	r3, [r7, #32]
 8007e9a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	69f9      	ldr	r1, [r7, #28]
 8007e9e:	6a3a      	ldr	r2, [r7, #32]
 8007ea0:	e841 2300 	strex	r3, r2, [r1]
 8007ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e6      	bne.n	8007e7a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007eac:	88fb      	ldrh	r3, [r7, #6]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	68b9      	ldr	r1, [r7, #8]
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f000 fe9a 	bl	8008bec <UART_Start_Receive_IT>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	e000      	b.n	8007ebe <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007ebc:	2302      	movs	r3, #2
  }
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3728      	adds	r7, #40	@ 0x28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b0ba      	sub	sp, #232	@ 0xe8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007eee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007ef2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007efc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d115      	bne.n	8007f30 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00f      	beq.n	8007f30 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f14:	f003 0320 	and.w	r3, r3, #32
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d009      	beq.n	8007f30 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 82ab 	beq.w	800847c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
      }
      return;
 8007f2e:	e2a5      	b.n	800847c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 8117 	beq.w	8008168 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007f46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007f4a:	4b85      	ldr	r3, [pc, #532]	@ (8008160 <HAL_UART_IRQHandler+0x298>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 810a 	beq.w	8008168 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d011      	beq.n	8007f84 <HAL_UART_IRQHandler+0xbc>
 8007f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00b      	beq.n	8007f84 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2201      	movs	r2, #1
 8007f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f7a:	f043 0201 	orr.w	r2, r3, #1
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d011      	beq.n	8007fb4 <HAL_UART_IRQHandler+0xec>
 8007f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007faa:	f043 0204 	orr.w	r2, r3, #4
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d011      	beq.n	8007fe4 <HAL_UART_IRQHandler+0x11c>
 8007fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2204      	movs	r2, #4
 8007fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fda:	f043 0202 	orr.w	r2, r3, #2
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fe8:	f003 0308 	and.w	r3, r3, #8
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d017      	beq.n	8008020 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ff4:	f003 0320 	and.w	r3, r3, #32
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d105      	bne.n	8008008 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008000:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00b      	beq.n	8008020 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2208      	movs	r2, #8
 800800e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008016:	f043 0208 	orr.w	r2, r3, #8
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008028:	2b00      	cmp	r3, #0
 800802a:	d012      	beq.n	8008052 <HAL_UART_IRQHandler+0x18a>
 800802c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008030:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00c      	beq.n	8008052 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008040:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008048:	f043 0220 	orr.w	r2, r3, #32
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 8211 	beq.w	8008480 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800805e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008062:	f003 0320 	and.w	r3, r3, #32
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00d      	beq.n	8008086 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800806a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800808c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800809a:	2b40      	cmp	r3, #64	@ 0x40
 800809c:	d005      	beq.n	80080aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800809e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d04f      	beq.n	800814a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fe64 	bl	8008d78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ba:	2b40      	cmp	r3, #64	@ 0x40
 80080bc:	d141      	bne.n	8008142 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3308      	adds	r3, #8
 80080c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080cc:	e853 3f00 	ldrex	r3, [r3]
 80080d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80080d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3308      	adds	r3, #8
 80080e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80080ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80080ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80080f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80080fa:	e841 2300 	strex	r3, r2, [r1]
 80080fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1d9      	bne.n	80080be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800810e:	2b00      	cmp	r3, #0
 8008110:	d013      	beq.n	800813a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008116:	4a13      	ldr	r2, [pc, #76]	@ (8008164 <HAL_UART_IRQHandler+0x29c>)
 8008118:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800811e:	4618      	mov	r0, r3
 8008120:	f7fb f93b 	bl	800339a <HAL_DMA_Abort_IT>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d017      	beq.n	800815a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800812e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008134:	4610      	mov	r0, r2
 8008136:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008138:	e00f      	b.n	800815a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f9b4 	bl	80084a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008140:	e00b      	b.n	800815a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f9b0 	bl	80084a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008148:	e007      	b.n	800815a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f9ac 	bl	80084a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008158:	e192      	b.n	8008480 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800815a:	bf00      	nop
    return;
 800815c:	e190      	b.n	8008480 <HAL_UART_IRQHandler+0x5b8>
 800815e:	bf00      	nop
 8008160:	04000120 	.word	0x04000120
 8008164:	08008e41 	.word	0x08008e41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800816c:	2b01      	cmp	r3, #1
 800816e:	f040 814b 	bne.w	8008408 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008176:	f003 0310 	and.w	r3, r3, #16
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 8144 	beq.w	8008408 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008184:	f003 0310 	and.w	r3, r3, #16
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 813d 	beq.w	8008408 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2210      	movs	r2, #16
 8008194:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a0:	2b40      	cmp	r3, #64	@ 0x40
 80081a2:	f040 80b5 	bne.w	8008310 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f000 8164 	beq.w	8008484 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80081c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081c6:	429a      	cmp	r2, r3
 80081c8:	f080 815c 	bcs.w	8008484 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	2b20      	cmp	r3, #32
 80081de:	f000 8086 	beq.w	80082ee <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081ee:	e853 3f00 	ldrex	r3, [r3]
 80081f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80081f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800820c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008210:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008218:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800821c:	e841 2300 	strex	r3, r2, [r1]
 8008220:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008224:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1da      	bne.n	80081e2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3308      	adds	r3, #8
 8008232:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800823c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800823e:	f023 0301 	bic.w	r3, r3, #1
 8008242:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3308      	adds	r3, #8
 800824c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008250:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008254:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008256:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008258:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800825c:	e841 2300 	strex	r3, r2, [r1]
 8008260:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008262:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1e1      	bne.n	800822c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	3308      	adds	r3, #8
 800826e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008270:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008272:	e853 3f00 	ldrex	r3, [r3]
 8008276:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008278:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800827a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800827e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3308      	adds	r3, #8
 8008288:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800828c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800828e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008290:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008292:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008294:	e841 2300 	strex	r3, r2, [r1]
 8008298:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800829a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e3      	bne.n	8008268 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2220      	movs	r2, #32
 80082a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082b6:	e853 3f00 	ldrex	r3, [r3]
 80082ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082be:	f023 0310 	bic.w	r3, r3, #16
 80082c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082d2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082d8:	e841 2300 	strex	r3, r2, [r1]
 80082dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e4      	bne.n	80082ae <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fb f818 	bl	800331e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2202      	movs	r2, #2
 80082f2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008300:	b29b      	uxth	r3, r3
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	b29b      	uxth	r3, r3
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f8d7 	bl	80084bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800830e:	e0b9      	b.n	8008484 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800831c:	b29b      	uxth	r3, r3
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800832a:	b29b      	uxth	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 80ab 	beq.w	8008488 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8008332:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 80a6 	beq.w	8008488 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800834a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800834c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008350:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	461a      	mov	r2, r3
 800835a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800835e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008360:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008364:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800836c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e4      	bne.n	800833c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3308      	adds	r3, #8
 8008378:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837c:	e853 3f00 	ldrex	r3, [r3]
 8008380:	623b      	str	r3, [r7, #32]
   return(result);
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	f023 0301 	bic.w	r3, r3, #1
 8008388:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3308      	adds	r3, #8
 8008392:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008396:	633a      	str	r2, [r7, #48]	@ 0x30
 8008398:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800839c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e3      	bne.n	8008372 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	e853 3f00 	ldrex	r3, [r3]
 80083ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 0310 	bic.w	r3, r3, #16
 80083d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80083e0:	61fb      	str	r3, [r7, #28]
 80083e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e4:	69b9      	ldr	r1, [r7, #24]
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	e841 2300 	strex	r3, r2, [r1]
 80083ec:	617b      	str	r3, [r7, #20]
   return(result);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e4      	bne.n	80083be <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f85b 	bl	80084bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008406:	e03f      	b.n	8008488 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800840c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00e      	beq.n	8008432 <HAL_UART_IRQHandler+0x56a>
 8008414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008418:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d008      	beq.n	8008432 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008428:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fef0 	bl	8009210 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008430:	e02d      	b.n	800848e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00e      	beq.n	800845c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800843e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008446:	2b00      	cmp	r3, #0
 8008448:	d008      	beq.n	800845c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800844e:	2b00      	cmp	r3, #0
 8008450:	d01c      	beq.n	800848c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	4798      	blx	r3
    }
    return;
 800845a:	e017      	b.n	800848c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800845c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008464:	2b00      	cmp	r3, #0
 8008466:	d012      	beq.n	800848e <HAL_UART_IRQHandler+0x5c6>
 8008468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800846c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00c      	beq.n	800848e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fcf9 	bl	8008e6c <UART_EndTransmit_IT>
    return;
 800847a:	e008      	b.n	800848e <HAL_UART_IRQHandler+0x5c6>
      return;
 800847c:	bf00      	nop
 800847e:	e006      	b.n	800848e <HAL_UART_IRQHandler+0x5c6>
    return;
 8008480:	bf00      	nop
 8008482:	e004      	b.n	800848e <HAL_UART_IRQHandler+0x5c6>
      return;
 8008484:	bf00      	nop
 8008486:	e002      	b.n	800848e <HAL_UART_IRQHandler+0x5c6>
      return;
 8008488:	bf00      	nop
 800848a:	e000      	b.n	800848e <HAL_UART_IRQHandler+0x5c6>
    return;
 800848c:	bf00      	nop
  }

}
 800848e:	37e8      	adds	r7, #232	@ 0xe8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b088      	sub	sp, #32
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	431a      	orrs	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	431a      	orrs	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	4b92      	ldr	r3, [pc, #584]	@ (8008748 <UART_SetConfig+0x274>)
 8008500:	4013      	ands	r3, r2
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	6812      	ldr	r2, [r2, #0]
 8008506:	6979      	ldr	r1, [r7, #20]
 8008508:	430b      	orrs	r3, r1
 800850a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68da      	ldr	r2, [r3, #12]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	430a      	orrs	r2, r1
 8008544:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a80      	ldr	r2, [pc, #512]	@ (800874c <UART_SetConfig+0x278>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d120      	bne.n	8008592 <UART_SetConfig+0xbe>
 8008550:	4b7f      	ldr	r3, [pc, #508]	@ (8008750 <UART_SetConfig+0x27c>)
 8008552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008554:	f003 0303 	and.w	r3, r3, #3
 8008558:	2b03      	cmp	r3, #3
 800855a:	d817      	bhi.n	800858c <UART_SetConfig+0xb8>
 800855c:	a201      	add	r2, pc, #4	@ (adr r2, 8008564 <UART_SetConfig+0x90>)
 800855e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008562:	bf00      	nop
 8008564:	08008575 	.word	0x08008575
 8008568:	08008581 	.word	0x08008581
 800856c:	08008587 	.word	0x08008587
 8008570:	0800857b 	.word	0x0800857b
 8008574:	2301      	movs	r3, #1
 8008576:	77fb      	strb	r3, [r7, #31]
 8008578:	e0b5      	b.n	80086e6 <UART_SetConfig+0x212>
 800857a:	2302      	movs	r3, #2
 800857c:	77fb      	strb	r3, [r7, #31]
 800857e:	e0b2      	b.n	80086e6 <UART_SetConfig+0x212>
 8008580:	2304      	movs	r3, #4
 8008582:	77fb      	strb	r3, [r7, #31]
 8008584:	e0af      	b.n	80086e6 <UART_SetConfig+0x212>
 8008586:	2308      	movs	r3, #8
 8008588:	77fb      	strb	r3, [r7, #31]
 800858a:	e0ac      	b.n	80086e6 <UART_SetConfig+0x212>
 800858c:	2310      	movs	r3, #16
 800858e:	77fb      	strb	r3, [r7, #31]
 8008590:	e0a9      	b.n	80086e6 <UART_SetConfig+0x212>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a6f      	ldr	r2, [pc, #444]	@ (8008754 <UART_SetConfig+0x280>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d124      	bne.n	80085e6 <UART_SetConfig+0x112>
 800859c:	4b6c      	ldr	r3, [pc, #432]	@ (8008750 <UART_SetConfig+0x27c>)
 800859e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80085a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085a8:	d011      	beq.n	80085ce <UART_SetConfig+0xfa>
 80085aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085ae:	d817      	bhi.n	80085e0 <UART_SetConfig+0x10c>
 80085b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085b4:	d011      	beq.n	80085da <UART_SetConfig+0x106>
 80085b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085ba:	d811      	bhi.n	80085e0 <UART_SetConfig+0x10c>
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <UART_SetConfig+0xf4>
 80085c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085c4:	d006      	beq.n	80085d4 <UART_SetConfig+0x100>
 80085c6:	e00b      	b.n	80085e0 <UART_SetConfig+0x10c>
 80085c8:	2300      	movs	r3, #0
 80085ca:	77fb      	strb	r3, [r7, #31]
 80085cc:	e08b      	b.n	80086e6 <UART_SetConfig+0x212>
 80085ce:	2302      	movs	r3, #2
 80085d0:	77fb      	strb	r3, [r7, #31]
 80085d2:	e088      	b.n	80086e6 <UART_SetConfig+0x212>
 80085d4:	2304      	movs	r3, #4
 80085d6:	77fb      	strb	r3, [r7, #31]
 80085d8:	e085      	b.n	80086e6 <UART_SetConfig+0x212>
 80085da:	2308      	movs	r3, #8
 80085dc:	77fb      	strb	r3, [r7, #31]
 80085de:	e082      	b.n	80086e6 <UART_SetConfig+0x212>
 80085e0:	2310      	movs	r3, #16
 80085e2:	77fb      	strb	r3, [r7, #31]
 80085e4:	e07f      	b.n	80086e6 <UART_SetConfig+0x212>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a5b      	ldr	r2, [pc, #364]	@ (8008758 <UART_SetConfig+0x284>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d124      	bne.n	800863a <UART_SetConfig+0x166>
 80085f0:	4b57      	ldr	r3, [pc, #348]	@ (8008750 <UART_SetConfig+0x27c>)
 80085f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80085f8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80085fc:	d011      	beq.n	8008622 <UART_SetConfig+0x14e>
 80085fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008602:	d817      	bhi.n	8008634 <UART_SetConfig+0x160>
 8008604:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008608:	d011      	beq.n	800862e <UART_SetConfig+0x15a>
 800860a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800860e:	d811      	bhi.n	8008634 <UART_SetConfig+0x160>
 8008610:	2b00      	cmp	r3, #0
 8008612:	d003      	beq.n	800861c <UART_SetConfig+0x148>
 8008614:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008618:	d006      	beq.n	8008628 <UART_SetConfig+0x154>
 800861a:	e00b      	b.n	8008634 <UART_SetConfig+0x160>
 800861c:	2300      	movs	r3, #0
 800861e:	77fb      	strb	r3, [r7, #31]
 8008620:	e061      	b.n	80086e6 <UART_SetConfig+0x212>
 8008622:	2302      	movs	r3, #2
 8008624:	77fb      	strb	r3, [r7, #31]
 8008626:	e05e      	b.n	80086e6 <UART_SetConfig+0x212>
 8008628:	2304      	movs	r3, #4
 800862a:	77fb      	strb	r3, [r7, #31]
 800862c:	e05b      	b.n	80086e6 <UART_SetConfig+0x212>
 800862e:	2308      	movs	r3, #8
 8008630:	77fb      	strb	r3, [r7, #31]
 8008632:	e058      	b.n	80086e6 <UART_SetConfig+0x212>
 8008634:	2310      	movs	r3, #16
 8008636:	77fb      	strb	r3, [r7, #31]
 8008638:	e055      	b.n	80086e6 <UART_SetConfig+0x212>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a47      	ldr	r2, [pc, #284]	@ (800875c <UART_SetConfig+0x288>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d124      	bne.n	800868e <UART_SetConfig+0x1ba>
 8008644:	4b42      	ldr	r3, [pc, #264]	@ (8008750 <UART_SetConfig+0x27c>)
 8008646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008648:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800864c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008650:	d011      	beq.n	8008676 <UART_SetConfig+0x1a2>
 8008652:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008656:	d817      	bhi.n	8008688 <UART_SetConfig+0x1b4>
 8008658:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800865c:	d011      	beq.n	8008682 <UART_SetConfig+0x1ae>
 800865e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008662:	d811      	bhi.n	8008688 <UART_SetConfig+0x1b4>
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <UART_SetConfig+0x19c>
 8008668:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800866c:	d006      	beq.n	800867c <UART_SetConfig+0x1a8>
 800866e:	e00b      	b.n	8008688 <UART_SetConfig+0x1b4>
 8008670:	2300      	movs	r3, #0
 8008672:	77fb      	strb	r3, [r7, #31]
 8008674:	e037      	b.n	80086e6 <UART_SetConfig+0x212>
 8008676:	2302      	movs	r3, #2
 8008678:	77fb      	strb	r3, [r7, #31]
 800867a:	e034      	b.n	80086e6 <UART_SetConfig+0x212>
 800867c:	2304      	movs	r3, #4
 800867e:	77fb      	strb	r3, [r7, #31]
 8008680:	e031      	b.n	80086e6 <UART_SetConfig+0x212>
 8008682:	2308      	movs	r3, #8
 8008684:	77fb      	strb	r3, [r7, #31]
 8008686:	e02e      	b.n	80086e6 <UART_SetConfig+0x212>
 8008688:	2310      	movs	r3, #16
 800868a:	77fb      	strb	r3, [r7, #31]
 800868c:	e02b      	b.n	80086e6 <UART_SetConfig+0x212>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a33      	ldr	r2, [pc, #204]	@ (8008760 <UART_SetConfig+0x28c>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d124      	bne.n	80086e2 <UART_SetConfig+0x20e>
 8008698:	4b2d      	ldr	r3, [pc, #180]	@ (8008750 <UART_SetConfig+0x27c>)
 800869a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80086a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80086a4:	d011      	beq.n	80086ca <UART_SetConfig+0x1f6>
 80086a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80086aa:	d817      	bhi.n	80086dc <UART_SetConfig+0x208>
 80086ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80086b0:	d011      	beq.n	80086d6 <UART_SetConfig+0x202>
 80086b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80086b6:	d811      	bhi.n	80086dc <UART_SetConfig+0x208>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <UART_SetConfig+0x1f0>
 80086bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086c0:	d006      	beq.n	80086d0 <UART_SetConfig+0x1fc>
 80086c2:	e00b      	b.n	80086dc <UART_SetConfig+0x208>
 80086c4:	2300      	movs	r3, #0
 80086c6:	77fb      	strb	r3, [r7, #31]
 80086c8:	e00d      	b.n	80086e6 <UART_SetConfig+0x212>
 80086ca:	2302      	movs	r3, #2
 80086cc:	77fb      	strb	r3, [r7, #31]
 80086ce:	e00a      	b.n	80086e6 <UART_SetConfig+0x212>
 80086d0:	2304      	movs	r3, #4
 80086d2:	77fb      	strb	r3, [r7, #31]
 80086d4:	e007      	b.n	80086e6 <UART_SetConfig+0x212>
 80086d6:	2308      	movs	r3, #8
 80086d8:	77fb      	strb	r3, [r7, #31]
 80086da:	e004      	b.n	80086e6 <UART_SetConfig+0x212>
 80086dc:	2310      	movs	r3, #16
 80086de:	77fb      	strb	r3, [r7, #31]
 80086e0:	e001      	b.n	80086e6 <UART_SetConfig+0x212>
 80086e2:	2310      	movs	r3, #16
 80086e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086ee:	d16b      	bne.n	80087c8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80086f0:	7ffb      	ldrb	r3, [r7, #31]
 80086f2:	2b08      	cmp	r3, #8
 80086f4:	d838      	bhi.n	8008768 <UART_SetConfig+0x294>
 80086f6:	a201      	add	r2, pc, #4	@ (adr r2, 80086fc <UART_SetConfig+0x228>)
 80086f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fc:	08008721 	.word	0x08008721
 8008700:	08008729 	.word	0x08008729
 8008704:	08008731 	.word	0x08008731
 8008708:	08008769 	.word	0x08008769
 800870c:	08008737 	.word	0x08008737
 8008710:	08008769 	.word	0x08008769
 8008714:	08008769 	.word	0x08008769
 8008718:	08008769 	.word	0x08008769
 800871c:	0800873f 	.word	0x0800873f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008720:	f7fd fd30 	bl	8006184 <HAL_RCC_GetPCLK1Freq>
 8008724:	61b8      	str	r0, [r7, #24]
        break;
 8008726:	e024      	b.n	8008772 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008728:	f7fd fd4e 	bl	80061c8 <HAL_RCC_GetPCLK2Freq>
 800872c:	61b8      	str	r0, [r7, #24]
        break;
 800872e:	e020      	b.n	8008772 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008730:	4b0c      	ldr	r3, [pc, #48]	@ (8008764 <UART_SetConfig+0x290>)
 8008732:	61bb      	str	r3, [r7, #24]
        break;
 8008734:	e01d      	b.n	8008772 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008736:	f7fd fcc5 	bl	80060c4 <HAL_RCC_GetSysClockFreq>
 800873a:	61b8      	str	r0, [r7, #24]
        break;
 800873c:	e019      	b.n	8008772 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800873e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008742:	61bb      	str	r3, [r7, #24]
        break;
 8008744:	e015      	b.n	8008772 <UART_SetConfig+0x29e>
 8008746:	bf00      	nop
 8008748:	efff69f3 	.word	0xefff69f3
 800874c:	40013800 	.word	0x40013800
 8008750:	40021000 	.word	0x40021000
 8008754:	40004400 	.word	0x40004400
 8008758:	40004800 	.word	0x40004800
 800875c:	40004c00 	.word	0x40004c00
 8008760:	40005000 	.word	0x40005000
 8008764:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	77bb      	strb	r3, [r7, #30]
        break;
 8008770:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d073      	beq.n	8008860 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	005a      	lsls	r2, r3, #1
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	441a      	add	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	fbb2 f3f3 	udiv	r3, r2, r3
 800878c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	2b0f      	cmp	r3, #15
 8008792:	d916      	bls.n	80087c2 <UART_SetConfig+0x2ee>
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800879a:	d212      	bcs.n	80087c2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	f023 030f 	bic.w	r3, r3, #15
 80087a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	085b      	lsrs	r3, r3, #1
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	f003 0307 	and.w	r3, r3, #7
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	89fb      	ldrh	r3, [r7, #14]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	89fa      	ldrh	r2, [r7, #14]
 80087be:	60da      	str	r2, [r3, #12]
 80087c0:	e04e      	b.n	8008860 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	77bb      	strb	r3, [r7, #30]
 80087c6:	e04b      	b.n	8008860 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087c8:	7ffb      	ldrb	r3, [r7, #31]
 80087ca:	2b08      	cmp	r3, #8
 80087cc:	d827      	bhi.n	800881e <UART_SetConfig+0x34a>
 80087ce:	a201      	add	r2, pc, #4	@ (adr r2, 80087d4 <UART_SetConfig+0x300>)
 80087d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d4:	080087f9 	.word	0x080087f9
 80087d8:	08008801 	.word	0x08008801
 80087dc:	08008809 	.word	0x08008809
 80087e0:	0800881f 	.word	0x0800881f
 80087e4:	0800880f 	.word	0x0800880f
 80087e8:	0800881f 	.word	0x0800881f
 80087ec:	0800881f 	.word	0x0800881f
 80087f0:	0800881f 	.word	0x0800881f
 80087f4:	08008817 	.word	0x08008817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087f8:	f7fd fcc4 	bl	8006184 <HAL_RCC_GetPCLK1Freq>
 80087fc:	61b8      	str	r0, [r7, #24]
        break;
 80087fe:	e013      	b.n	8008828 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008800:	f7fd fce2 	bl	80061c8 <HAL_RCC_GetPCLK2Freq>
 8008804:	61b8      	str	r0, [r7, #24]
        break;
 8008806:	e00f      	b.n	8008828 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008808:	4b1b      	ldr	r3, [pc, #108]	@ (8008878 <UART_SetConfig+0x3a4>)
 800880a:	61bb      	str	r3, [r7, #24]
        break;
 800880c:	e00c      	b.n	8008828 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800880e:	f7fd fc59 	bl	80060c4 <HAL_RCC_GetSysClockFreq>
 8008812:	61b8      	str	r0, [r7, #24]
        break;
 8008814:	e008      	b.n	8008828 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800881a:	61bb      	str	r3, [r7, #24]
        break;
 800881c:	e004      	b.n	8008828 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	77bb      	strb	r3, [r7, #30]
        break;
 8008826:	bf00      	nop
    }

    if (pclk != 0U)
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d018      	beq.n	8008860 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	085a      	lsrs	r2, r3, #1
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	441a      	add	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008840:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	2b0f      	cmp	r3, #15
 8008846:	d909      	bls.n	800885c <UART_SetConfig+0x388>
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800884e:	d205      	bcs.n	800885c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	b29a      	uxth	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	60da      	str	r2, [r3, #12]
 800885a:	e001      	b.n	8008860 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800886c:	7fbb      	ldrb	r3, [r7, #30]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3720      	adds	r7, #32
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	007a1200 	.word	0x007a1200

0800887c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008888:	f003 0308 	and.w	r3, r3, #8
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00a      	beq.n	80088a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00a      	beq.n	80088c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	430a      	orrs	r2, r1
 80088c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00a      	beq.n	80088ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00a      	beq.n	800890c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	430a      	orrs	r2, r1
 800890a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008910:	f003 0310 	and.w	r3, r3, #16
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00a      	beq.n	800892e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01a      	beq.n	8008992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800897a:	d10a      	bne.n	8008992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	430a      	orrs	r2, r1
 80089b2:	605a      	str	r2, [r3, #4]
  }
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b098      	sub	sp, #96	@ 0x60
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089d0:	f7fa fb88 	bl	80030e4 <HAL_GetTick>
 80089d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0308 	and.w	r3, r3, #8
 80089e0:	2b08      	cmp	r3, #8
 80089e2:	d12e      	bne.n	8008a42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089ec:	2200      	movs	r2, #0
 80089ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f88c 	bl	8008b10 <UART_WaitOnFlagUntilTimeout>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d021      	beq.n	8008a42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e6      	bne.n	80089fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2220      	movs	r2, #32
 8008a34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e062      	b.n	8008b08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d149      	bne.n	8008ae4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f856 	bl	8008b10 <UART_WaitOnFlagUntilTimeout>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d03c      	beq.n	8008ae4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a72:	e853 3f00 	ldrex	r3, [r3]
 8008a76:	623b      	str	r3, [r7, #32]
   return(result);
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	461a      	mov	r2, r3
 8008a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a90:	e841 2300 	strex	r3, r2, [r1]
 8008a94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1e6      	bne.n	8008a6a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	e853 3f00 	ldrex	r3, [r3]
 8008aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 0301 	bic.w	r3, r3, #1
 8008ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3308      	adds	r3, #8
 8008aba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008abc:	61fa      	str	r2, [r7, #28]
 8008abe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac0:	69b9      	ldr	r1, [r7, #24]
 8008ac2:	69fa      	ldr	r2, [r7, #28]
 8008ac4:	e841 2300 	strex	r3, r2, [r1]
 8008ac8:	617b      	str	r3, [r7, #20]
   return(result);
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1e5      	bne.n	8008a9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e011      	b.n	8008b08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3758      	adds	r7, #88	@ 0x58
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	603b      	str	r3, [r7, #0]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b20:	e04f      	b.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b28:	d04b      	beq.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b2a:	f7fa fadb 	bl	80030e4 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d302      	bcc.n	8008b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e04e      	b.n	8008be2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0304 	and.w	r3, r3, #4
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d037      	beq.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2b80      	cmp	r3, #128	@ 0x80
 8008b56:	d034      	beq.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b40      	cmp	r3, #64	@ 0x40
 8008b5c:	d031      	beq.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	f003 0308 	and.w	r3, r3, #8
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	d110      	bne.n	8008b8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2208      	movs	r2, #8
 8008b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 f8ff 	bl	8008d78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2208      	movs	r2, #8
 8008b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e029      	b.n	8008be2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b9c:	d111      	bne.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 f8e5 	bl	8008d78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e00f      	b.n	8008be2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69da      	ldr	r2, [r3, #28]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	4013      	ands	r3, r2
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	bf0c      	ite	eq
 8008bd2:	2301      	moveq	r3, #1
 8008bd4:	2300      	movne	r3, #0
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	461a      	mov	r2, r3
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d0a0      	beq.n	8008b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
	...

08008bec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b097      	sub	sp, #92	@ 0x5c
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	88fa      	ldrh	r2, [r7, #6]
 8008c04:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	88fa      	ldrh	r2, [r7, #6]
 8008c0c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c1e:	d10e      	bne.n	8008c3e <UART_Start_Receive_IT+0x52>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d105      	bne.n	8008c34 <UART_Start_Receive_IT+0x48>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008c2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008c32:	e02d      	b.n	8008c90 <UART_Start_Receive_IT+0xa4>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	22ff      	movs	r2, #255	@ 0xff
 8008c38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008c3c:	e028      	b.n	8008c90 <UART_Start_Receive_IT+0xa4>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d10d      	bne.n	8008c62 <UART_Start_Receive_IT+0x76>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d104      	bne.n	8008c58 <UART_Start_Receive_IT+0x6c>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	22ff      	movs	r2, #255	@ 0xff
 8008c52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008c56:	e01b      	b.n	8008c90 <UART_Start_Receive_IT+0xa4>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	227f      	movs	r2, #127	@ 0x7f
 8008c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008c60:	e016      	b.n	8008c90 <UART_Start_Receive_IT+0xa4>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c6a:	d10d      	bne.n	8008c88 <UART_Start_Receive_IT+0x9c>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d104      	bne.n	8008c7e <UART_Start_Receive_IT+0x92>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	227f      	movs	r2, #127	@ 0x7f
 8008c78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008c7c:	e008      	b.n	8008c90 <UART_Start_Receive_IT+0xa4>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	223f      	movs	r2, #63	@ 0x3f
 8008c82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008c86:	e003      	b.n	8008c90 <UART_Start_Receive_IT+0xa4>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2222      	movs	r2, #34	@ 0x22
 8008c9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008caa:	e853 3f00 	ldrex	r3, [r3]
 8008cae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb2:	f043 0301 	orr.w	r3, r3, #1
 8008cb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3308      	adds	r3, #8
 8008cbe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008cc0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008cc2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008cc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cc8:	e841 2300 	strex	r3, r2, [r1]
 8008ccc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1e5      	bne.n	8008ca0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cdc:	d107      	bne.n	8008cee <UART_Start_Receive_IT+0x102>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d103      	bne.n	8008cee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4a21      	ldr	r2, [pc, #132]	@ (8008d70 <UART_Start_Receive_IT+0x184>)
 8008cea:	669a      	str	r2, [r3, #104]	@ 0x68
 8008cec:	e002      	b.n	8008cf4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4a20      	ldr	r2, [pc, #128]	@ (8008d74 <UART_Start_Receive_IT+0x188>)
 8008cf2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d019      	beq.n	8008d30 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d1c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d22:	e841 2300 	strex	r3, r2, [r1]
 8008d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1e6      	bne.n	8008cfc <UART_Start_Receive_IT+0x110>
 8008d2e:	e018      	b.n	8008d62 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f043 0320 	orr.w	r3, r3, #32
 8008d44:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d4e:	623b      	str	r3, [r7, #32]
 8008d50:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	69f9      	ldr	r1, [r7, #28]
 8008d54:	6a3a      	ldr	r2, [r7, #32]
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e6      	bne.n	8008d30 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	375c      	adds	r7, #92	@ 0x5c
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	08009069 	.word	0x08009069
 8008d74:	08008ec1 	.word	0x08008ec1

08008d78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b095      	sub	sp, #84	@ 0x54
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008da0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008da4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e6      	bne.n	8008d80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3308      	adds	r3, #8
 8008db8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	e853 3f00 	ldrex	r3, [r3]
 8008dc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	f023 0301 	bic.w	r3, r3, #1
 8008dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3308      	adds	r3, #8
 8008dd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dda:	e841 2300 	strex	r3, r2, [r1]
 8008dde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1e5      	bne.n	8008db2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d118      	bne.n	8008e20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	e853 3f00 	ldrex	r3, [r3]
 8008dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f023 0310 	bic.w	r3, r3, #16
 8008e02:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e0c:	61bb      	str	r3, [r7, #24]
 8008e0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e10:	6979      	ldr	r1, [r7, #20]
 8008e12:	69ba      	ldr	r2, [r7, #24]
 8008e14:	e841 2300 	strex	r3, r2, [r1]
 8008e18:	613b      	str	r3, [r7, #16]
   return(result);
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1e6      	bne.n	8008dee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2220      	movs	r2, #32
 8008e24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008e34:	bf00      	nop
 8008e36:	3754      	adds	r7, #84	@ 0x54
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f7ff fb22 	bl	80084a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e64:	bf00      	nop
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e88:	61fb      	str	r3, [r7, #28]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	61bb      	str	r3, [r7, #24]
 8008e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6979      	ldr	r1, [r7, #20]
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e6      	bne.n	8008e74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2220      	movs	r2, #32
 8008eaa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff faee 	bl	8008494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eb8:	bf00      	nop
 8008eba:	3720      	adds	r7, #32
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b09c      	sub	sp, #112	@ 0x70
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ece:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ed8:	2b22      	cmp	r3, #34	@ 0x22
 8008eda:	f040 80b9 	bne.w	8009050 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008ee4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ee8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008eec:	b2d9      	uxtb	r1, r3
 8008eee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ef8:	400a      	ands	r2, r1
 8008efa:	b2d2      	uxtb	r2, r2
 8008efc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f02:	1c5a      	adds	r2, r3, #1
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	3b01      	subs	r3, #1
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f040 809c 	bne.w	8009060 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f30:	e853 3f00 	ldrex	r3, [r3]
 8008f34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e6      	bne.n	8008f28 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3308      	adds	r3, #8
 8008f60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f64:	e853 3f00 	ldrex	r3, [r3]
 8008f68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6c:	f023 0301 	bic.w	r3, r3, #1
 8008f70:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3308      	adds	r3, #8
 8008f78:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008f7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f82:	e841 2300 	strex	r3, r2, [r1]
 8008f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e5      	bne.n	8008f5a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d018      	beq.n	8008fe2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fce:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1e6      	bne.n	8008fb0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d12e      	bne.n	8009048 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f023 0310 	bic.w	r3, r3, #16
 8009004:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800900e:	61fb      	str	r3, [r7, #28]
 8009010:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	69b9      	ldr	r1, [r7, #24]
 8009014:	69fa      	ldr	r2, [r7, #28]
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	617b      	str	r3, [r7, #20]
   return(result);
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e6      	bne.n	8008ff0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	f003 0310 	and.w	r3, r3, #16
 800902c:	2b10      	cmp	r3, #16
 800902e:	d103      	bne.n	8009038 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2210      	movs	r2, #16
 8009036:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff fa3b 	bl	80084bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009046:	e00b      	b.n	8009060 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7f8 fcb5 	bl	80019b8 <HAL_UART_RxCpltCallback>
}
 800904e:	e007      	b.n	8009060 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	699a      	ldr	r2, [r3, #24]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0208 	orr.w	r2, r2, #8
 800905e:	619a      	str	r2, [r3, #24]
}
 8009060:	bf00      	nop
 8009062:	3770      	adds	r7, #112	@ 0x70
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b09c      	sub	sp, #112	@ 0x70
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009076:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009080:	2b22      	cmp	r3, #34	@ 0x22
 8009082:	f040 80b9 	bne.w	80091f8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800908c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009094:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009096:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800909a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800909e:	4013      	ands	r3, r2
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090aa:	1c9a      	adds	r2, r3, #2
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	3b01      	subs	r3, #1
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f040 809c 	bne.w	8009208 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80090de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80090f0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80090f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80090fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e6      	bne.n	80090d0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3308      	adds	r3, #8
 8009108:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	f023 0301 	bic.w	r3, r3, #1
 8009118:	663b      	str	r3, [r7, #96]	@ 0x60
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3308      	adds	r3, #8
 8009120:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009122:	643a      	str	r2, [r7, #64]	@ 0x40
 8009124:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009126:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009128:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800912a:	e841 2300 	strex	r3, r2, [r1]
 800912e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1e5      	bne.n	8009102 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2220      	movs	r2, #32
 800913a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d018      	beq.n	800918a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	61fb      	str	r3, [r7, #28]
   return(result);
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800916c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009178:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800917c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e6      	bne.n	8009158 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800918e:	2b01      	cmp	r3, #1
 8009190:	d12e      	bne.n	80091f0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	e853 3f00 	ldrex	r3, [r3]
 80091a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	f023 0310 	bic.w	r3, r3, #16
 80091ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	461a      	mov	r2, r3
 80091b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80091b6:	61bb      	str	r3, [r7, #24]
 80091b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ba:	6979      	ldr	r1, [r7, #20]
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	e841 2300 	strex	r3, r2, [r1]
 80091c2:	613b      	str	r3, [r7, #16]
   return(result);
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1e6      	bne.n	8009198 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	f003 0310 	and.w	r3, r3, #16
 80091d4:	2b10      	cmp	r3, #16
 80091d6:	d103      	bne.n	80091e0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2210      	movs	r2, #16
 80091de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80091e6:	4619      	mov	r1, r3
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f7ff f967 	bl	80084bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091ee:	e00b      	b.n	8009208 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7f8 fbe1 	bl	80019b8 <HAL_UART_RxCpltCallback>
}
 80091f6:	e007      	b.n	8009208 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	699a      	ldr	r2, [r3, #24]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f042 0208 	orr.w	r2, r2, #8
 8009206:	619a      	str	r2, [r3, #24]
}
 8009208:	bf00      	nop
 800920a:	3770      	adds	r7, #112	@ 0x70
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800922c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8009230:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009238:	b29a      	uxth	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	b29b      	uxth	r3, r3
 800923e:	43db      	mvns	r3, r3
 8009240:	b29b      	uxth	r3, r3
 8009242:	4013      	ands	r3, r2
 8009244:	b29a      	uxth	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800925a:	b480      	push	{r7}
 800925c:	b085      	sub	sp, #20
 800925e:	af00      	add	r7, sp, #0
 8009260:	60f8      	str	r0, [r7, #12]
 8009262:	1d3b      	adds	r3, r7, #4
 8009264:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b0c2      	sub	sp, #264	@ 0x108
 800929a:	af00      	add	r7, sp, #0
 800929c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092a4:	6018      	str	r0, [r3, #0]
 80092a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	785b      	ldrb	r3, [r3, #1]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	f040 86b7 	bne.w	800a030 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80092c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	699a      	ldr	r2, [r3, #24]
 80092ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d908      	bls.n	80092f0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80092de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80092ee:	e007      	b.n	8009300 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80092f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	7b1b      	ldrb	r3, [r3, #12]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d13a      	bne.n	8009386 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6959      	ldr	r1, [r3, #20]
 800931c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	88da      	ldrh	r2, [r3, #6]
 8009328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800932c:	b29b      	uxth	r3, r3
 800932e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009332:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009336:	6800      	ldr	r0, [r0, #0]
 8009338:	f001 fb83 	bl	800aa42 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800933c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009340:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	613b      	str	r3, [r7, #16]
 8009348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800934c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009356:	b29b      	uxth	r3, r3
 8009358:	461a      	mov	r2, r3
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	4413      	add	r3, r2
 800935e:	613b      	str	r3, [r7, #16]
 8009360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	00da      	lsls	r2, r3, #3
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	4413      	add	r3, r2
 8009372:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800937c:	b29a      	uxth	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	801a      	strh	r2, [r3, #0]
 8009382:	f000 be1f 	b.w	8009fc4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800938a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	78db      	ldrb	r3, [r3, #3]
 8009392:	2b02      	cmp	r3, #2
 8009394:	f040 8462 	bne.w	8009c5c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800939c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	6a1a      	ldr	r2, [r3, #32]
 80093a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	f240 83df 	bls.w	8009b74 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80093b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093dc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80093e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	441a      	add	r2, r3
 80093fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80093fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009406:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800940a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800940e:	b29b      	uxth	r3, r3
 8009410:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6a1a      	ldr	r2, [r3, #32]
 800941e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009422:	1ad2      	subs	r2, r2, r3
 8009424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009434:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800943e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	881b      	ldrh	r3, [r3, #0]
 800944c:	b29b      	uxth	r3, r3
 800944e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 81c7 	beq.w	80097e6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800945c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	633b      	str	r3, [r7, #48]	@ 0x30
 8009464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	785b      	ldrb	r3, [r3, #1]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d177      	bne.n	8009564 <USB_EPStartXfer+0x2ce>
 8009474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009484:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800948e:	b29b      	uxth	r3, r3
 8009490:	461a      	mov	r2, r3
 8009492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009494:	4413      	add	r3, r2
 8009496:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800949c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	00da      	lsls	r2, r3, #3
 80094a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a8:	4413      	add	r3, r2
 80094aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80094b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094be:	801a      	strh	r2, [r3, #0]
 80094c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10a      	bne.n	80094de <USB_EPStartXfer+0x248>
 80094c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094da:	801a      	strh	r2, [r3, #0]
 80094dc:	e067      	b.n	80095ae <USB_EPStartXfer+0x318>
 80094de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80094e4:	d81c      	bhi.n	8009520 <USB_EPStartXfer+0x28a>
 80094e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ea:	085b      	lsrs	r3, r3, #1
 80094ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80094f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d004      	beq.n	8009506 <USB_EPStartXfer+0x270>
 80094fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009500:	3301      	adds	r3, #1
 8009502:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	b29a      	uxth	r2, r3
 800950c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009510:	b29b      	uxth	r3, r3
 8009512:	029b      	lsls	r3, r3, #10
 8009514:	b29b      	uxth	r3, r3
 8009516:	4313      	orrs	r3, r2
 8009518:	b29a      	uxth	r2, r3
 800951a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951c:	801a      	strh	r2, [r3, #0]
 800951e:	e046      	b.n	80095ae <USB_EPStartXfer+0x318>
 8009520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009524:	095b      	lsrs	r3, r3, #5
 8009526:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800952a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800952e:	f003 031f 	and.w	r3, r3, #31
 8009532:	2b00      	cmp	r3, #0
 8009534:	d104      	bne.n	8009540 <USB_EPStartXfer+0x2aa>
 8009536:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800953a:	3b01      	subs	r3, #1
 800953c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	b29a      	uxth	r2, r3
 8009546:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800954a:	b29b      	uxth	r3, r3
 800954c:	029b      	lsls	r3, r3, #10
 800954e:	b29b      	uxth	r3, r3
 8009550:	4313      	orrs	r3, r2
 8009552:	b29b      	uxth	r3, r3
 8009554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800955c:	b29a      	uxth	r2, r3
 800955e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009560:	801a      	strh	r2, [r3, #0]
 8009562:	e024      	b.n	80095ae <USB_EPStartXfer+0x318>
 8009564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	785b      	ldrb	r3, [r3, #1]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d11c      	bne.n	80095ae <USB_EPStartXfer+0x318>
 8009574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009582:	b29b      	uxth	r3, r3
 8009584:	461a      	mov	r2, r3
 8009586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009588:	4413      	add	r3, r2
 800958a:	633b      	str	r3, [r7, #48]	@ 0x30
 800958c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	00da      	lsls	r2, r3, #3
 800959a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959c:	4413      	add	r3, r2
 800959e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80095a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80095ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	895b      	ldrh	r3, [r3, #10]
 80095ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6959      	ldr	r1, [r3, #20]
 80095ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80095d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80095d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80095dc:	6800      	ldr	r0, [r0, #0]
 80095de:	f001 fa30 	bl	800aa42 <USB_WritePMA>
            ep->xfer_buff += len;
 80095e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	695a      	ldr	r2, [r3, #20]
 80095ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095f2:	441a      	add	r2, r3
 80095f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	6a1a      	ldr	r2, [r3, #32]
 800960c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	429a      	cmp	r2, r3
 800961a:	d90f      	bls.n	800963c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800961c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6a1a      	ldr	r2, [r3, #32]
 8009628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800962c:	1ad2      	subs	r2, r2, r3
 800962e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	621a      	str	r2, [r3, #32]
 800963a:	e00e      	b.n	800965a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800963c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800964c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2200      	movs	r2, #0
 8009658:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800965a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800965e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	785b      	ldrb	r3, [r3, #1]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d177      	bne.n	800975a <USB_EPStartXfer+0x4c4>
 800966a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800966e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	61bb      	str	r3, [r7, #24]
 8009676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800967a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009684:	b29b      	uxth	r3, r3
 8009686:	461a      	mov	r2, r3
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	4413      	add	r3, r2
 800968c:	61bb      	str	r3, [r7, #24]
 800968e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	00da      	lsls	r2, r3, #3
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	4413      	add	r3, r2
 80096a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80096a4:	617b      	str	r3, [r7, #20]
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	881b      	ldrh	r3, [r3, #0]
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	801a      	strh	r2, [r3, #0]
 80096b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10a      	bne.n	80096d4 <USB_EPStartXfer+0x43e>
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	801a      	strh	r2, [r3, #0]
 80096d2:	e06d      	b.n	80097b0 <USB_EPStartXfer+0x51a>
 80096d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80096da:	d81c      	bhi.n	8009716 <USB_EPStartXfer+0x480>
 80096dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e0:	085b      	lsrs	r3, r3, #1
 80096e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80096e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d004      	beq.n	80096fc <USB_EPStartXfer+0x466>
 80096f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096f6:	3301      	adds	r3, #1
 80096f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	881b      	ldrh	r3, [r3, #0]
 8009700:	b29a      	uxth	r2, r3
 8009702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009706:	b29b      	uxth	r3, r3
 8009708:	029b      	lsls	r3, r3, #10
 800970a:	b29b      	uxth	r3, r3
 800970c:	4313      	orrs	r3, r2
 800970e:	b29a      	uxth	r2, r3
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	801a      	strh	r2, [r3, #0]
 8009714:	e04c      	b.n	80097b0 <USB_EPStartXfer+0x51a>
 8009716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800971a:	095b      	lsrs	r3, r3, #5
 800971c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009724:	f003 031f 	and.w	r3, r3, #31
 8009728:	2b00      	cmp	r3, #0
 800972a:	d104      	bne.n	8009736 <USB_EPStartXfer+0x4a0>
 800972c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009730:	3b01      	subs	r3, #1
 8009732:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	b29a      	uxth	r2, r3
 800973c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009740:	b29b      	uxth	r3, r3
 8009742:	029b      	lsls	r3, r3, #10
 8009744:	b29b      	uxth	r3, r3
 8009746:	4313      	orrs	r3, r2
 8009748:	b29b      	uxth	r3, r3
 800974a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800974e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009752:	b29a      	uxth	r2, r3
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	801a      	strh	r2, [r3, #0]
 8009758:	e02a      	b.n	80097b0 <USB_EPStartXfer+0x51a>
 800975a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800975e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	785b      	ldrb	r3, [r3, #1]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d122      	bne.n	80097b0 <USB_EPStartXfer+0x51a>
 800976a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800976e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	623b      	str	r3, [r7, #32]
 8009776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800977a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009784:	b29b      	uxth	r3, r3
 8009786:	461a      	mov	r2, r3
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	4413      	add	r3, r2
 800978c:	623b      	str	r3, [r7, #32]
 800978e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	00da      	lsls	r2, r3, #3
 800979c:	6a3b      	ldr	r3, [r7, #32]
 800979e:	4413      	add	r3, r2
 80097a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80097a4:	61fb      	str	r3, [r7, #28]
 80097a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80097b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	891b      	ldrh	r3, [r3, #8]
 80097bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6959      	ldr	r1, [r3, #20]
 80097cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80097d6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80097da:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80097de:	6800      	ldr	r0, [r0, #0]
 80097e0:	f001 f92f 	bl	800aa42 <USB_WritePMA>
 80097e4:	e3ee      	b.n	8009fc4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	785b      	ldrb	r3, [r3, #1]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d177      	bne.n	80098e6 <USB_EPStartXfer+0x650>
 80097f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009806:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009810:	b29b      	uxth	r3, r3
 8009812:	461a      	mov	r2, r3
 8009814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009816:	4413      	add	r3, r2
 8009818:	64bb      	str	r3, [r7, #72]	@ 0x48
 800981a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800981e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	00da      	lsls	r2, r3, #3
 8009828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800982a:	4413      	add	r3, r2
 800982c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009830:	647b      	str	r3, [r7, #68]	@ 0x44
 8009832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009834:	881b      	ldrh	r3, [r3, #0]
 8009836:	b29b      	uxth	r3, r3
 8009838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800983c:	b29a      	uxth	r2, r3
 800983e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009840:	801a      	strh	r2, [r3, #0]
 8009842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10a      	bne.n	8009860 <USB_EPStartXfer+0x5ca>
 800984a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	b29b      	uxth	r3, r3
 8009850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009858:	b29a      	uxth	r2, r3
 800985a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800985c:	801a      	strh	r2, [r3, #0]
 800985e:	e06d      	b.n	800993c <USB_EPStartXfer+0x6a6>
 8009860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009864:	2b3e      	cmp	r3, #62	@ 0x3e
 8009866:	d81c      	bhi.n	80098a2 <USB_EPStartXfer+0x60c>
 8009868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800986c:	085b      	lsrs	r3, r3, #1
 800986e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	2b00      	cmp	r3, #0
 800987c:	d004      	beq.n	8009888 <USB_EPStartXfer+0x5f2>
 800987e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009882:	3301      	adds	r3, #1
 8009884:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	b29a      	uxth	r2, r3
 800988e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009892:	b29b      	uxth	r3, r3
 8009894:	029b      	lsls	r3, r3, #10
 8009896:	b29b      	uxth	r3, r3
 8009898:	4313      	orrs	r3, r2
 800989a:	b29a      	uxth	r2, r3
 800989c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800989e:	801a      	strh	r2, [r3, #0]
 80098a0:	e04c      	b.n	800993c <USB_EPStartXfer+0x6a6>
 80098a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a6:	095b      	lsrs	r3, r3, #5
 80098a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80098ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b0:	f003 031f 	and.w	r3, r3, #31
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d104      	bne.n	80098c2 <USB_EPStartXfer+0x62c>
 80098b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80098bc:	3b01      	subs	r3, #1
 80098be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80098c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	029b      	lsls	r3, r3, #10
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	4313      	orrs	r3, r2
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098de:	b29a      	uxth	r2, r3
 80098e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098e2:	801a      	strh	r2, [r3, #0]
 80098e4:	e02a      	b.n	800993c <USB_EPStartXfer+0x6a6>
 80098e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	785b      	ldrb	r3, [r3, #1]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d122      	bne.n	800993c <USB_EPStartXfer+0x6a6>
 80098f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	653b      	str	r3, [r7, #80]	@ 0x50
 8009902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009906:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009910:	b29b      	uxth	r3, r3
 8009912:	461a      	mov	r2, r3
 8009914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009916:	4413      	add	r3, r2
 8009918:	653b      	str	r3, [r7, #80]	@ 0x50
 800991a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800991e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	00da      	lsls	r2, r3, #3
 8009928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800992a:	4413      	add	r3, r2
 800992c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009930:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009936:	b29a      	uxth	r2, r3
 8009938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800993a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800993c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	891b      	ldrh	r3, [r3, #8]
 8009948:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800994c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6959      	ldr	r1, [r3, #20]
 8009958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800995c:	b29b      	uxth	r3, r3
 800995e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009962:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009966:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800996a:	6800      	ldr	r0, [r0, #0]
 800996c:	f001 f869 	bl	800aa42 <USB_WritePMA>
            ep->xfer_buff += len;
 8009970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	695a      	ldr	r2, [r3, #20]
 800997c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009980:	441a      	add	r2, r3
 8009982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800998e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6a1a      	ldr	r2, [r3, #32]
 800999a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800999e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d90f      	bls.n	80099ca <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80099aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6a1a      	ldr	r2, [r3, #32]
 80099b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ba:	1ad2      	subs	r2, r2, r3
 80099bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	621a      	str	r2, [r3, #32]
 80099c8:	e00e      	b.n	80099e8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80099ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80099da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2200      	movs	r2, #0
 80099e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80099e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80099f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	785b      	ldrb	r3, [r3, #1]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d177      	bne.n	8009af4 <USB_EPStartXfer+0x85e>
 8009a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	461a      	mov	r2, r3
 8009a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a24:	4413      	add	r3, r2
 8009a26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	00da      	lsls	r2, r3, #3
 8009a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a38:	4413      	add	r3, r2
 8009a3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a4e:	801a      	strh	r2, [r3, #0]
 8009a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10a      	bne.n	8009a6e <USB_EPStartXfer+0x7d8>
 8009a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a6a:	801a      	strh	r2, [r3, #0]
 8009a6c:	e067      	b.n	8009b3e <USB_EPStartXfer+0x8a8>
 8009a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a72:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a74:	d81c      	bhi.n	8009ab0 <USB_EPStartXfer+0x81a>
 8009a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a7a:	085b      	lsrs	r3, r3, #1
 8009a7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a84:	f003 0301 	and.w	r3, r3, #1
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d004      	beq.n	8009a96 <USB_EPStartXfer+0x800>
 8009a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a90:	3301      	adds	r3, #1
 8009a92:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	029b      	lsls	r3, r3, #10
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aac:	801a      	strh	r2, [r3, #0]
 8009aae:	e046      	b.n	8009b3e <USB_EPStartXfer+0x8a8>
 8009ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab4:	095b      	lsrs	r3, r3, #5
 8009ab6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009abe:	f003 031f 	and.w	r3, r3, #31
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d104      	bne.n	8009ad0 <USB_EPStartXfer+0x83a>
 8009ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aca:	3b01      	subs	r3, #1
 8009acc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	029b      	lsls	r3, r3, #10
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009af0:	801a      	strh	r2, [r3, #0]
 8009af2:	e024      	b.n	8009b3e <USB_EPStartXfer+0x8a8>
 8009af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d11c      	bne.n	8009b3e <USB_EPStartXfer+0x8a8>
 8009b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	461a      	mov	r2, r3
 8009b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b18:	4413      	add	r3, r2
 8009b1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	00da      	lsls	r2, r3, #3
 8009b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	895b      	ldrh	r3, [r3, #10]
 8009b4a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6959      	ldr	r1, [r3, #20]
 8009b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009b64:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009b68:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009b6c:	6800      	ldr	r0, [r0, #0]
 8009b6e:	f000 ff68 	bl	800aa42 <USB_WritePMA>
 8009b72:	e227      	b.n	8009fc4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6a1b      	ldr	r3, [r3, #32]
 8009b80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009baa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	441a      	add	r2, r3
 8009bc8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009be4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c00:	4413      	add	r3, r2
 8009c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	00da      	lsls	r2, r3, #3
 8009c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c14:	4413      	add	r3, r2
 8009c16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	891b      	ldrh	r3, [r3, #8]
 8009c32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6959      	ldr	r1, [r3, #20]
 8009c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009c50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009c54:	6800      	ldr	r0, [r0, #0]
 8009c56:	f000 fef4 	bl	800aa42 <USB_WritePMA>
 8009c5a:	e1b3      	b.n	8009fc4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6a1a      	ldr	r2, [r3, #32]
 8009c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c6c:	1ad2      	subs	r2, r2, r3
 8009c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	881b      	ldrh	r3, [r3, #0]
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f000 80c6 	beq.w	8009e2e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	673b      	str	r3, [r7, #112]	@ 0x70
 8009cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	785b      	ldrb	r3, [r3, #1]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d177      	bne.n	8009dae <USB_EPStartXfer+0xb18>
 8009cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	461a      	mov	r2, r3
 8009cdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cde:	4413      	add	r3, r2
 8009ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	00da      	lsls	r2, r3, #3
 8009cf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009cf8:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d08:	801a      	strh	r2, [r3, #0]
 8009d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10a      	bne.n	8009d28 <USB_EPStartXfer+0xa92>
 8009d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d24:	801a      	strh	r2, [r3, #0]
 8009d26:	e067      	b.n	8009df8 <USB_EPStartXfer+0xb62>
 8009d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d2e:	d81c      	bhi.n	8009d6a <USB_EPStartXfer+0xad4>
 8009d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d34:	085b      	lsrs	r3, r3, #1
 8009d36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d3e:	f003 0301 	and.w	r3, r3, #1
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d004      	beq.n	8009d50 <USB_EPStartXfer+0xaba>
 8009d46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009d50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d52:	881b      	ldrh	r3, [r3, #0]
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	029b      	lsls	r3, r3, #10
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	4313      	orrs	r3, r2
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d66:	801a      	strh	r2, [r3, #0]
 8009d68:	e046      	b.n	8009df8 <USB_EPStartXfer+0xb62>
 8009d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d6e:	095b      	lsrs	r3, r3, #5
 8009d70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d78:	f003 031f 	and.w	r3, r3, #31
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d104      	bne.n	8009d8a <USB_EPStartXfer+0xaf4>
 8009d80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009d84:	3b01      	subs	r3, #1
 8009d86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009d8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d8c:	881b      	ldrh	r3, [r3, #0]
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	029b      	lsls	r3, r3, #10
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009daa:	801a      	strh	r2, [r3, #0]
 8009dac:	e024      	b.n	8009df8 <USB_EPStartXfer+0xb62>
 8009dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	785b      	ldrb	r3, [r3, #1]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d11c      	bne.n	8009df8 <USB_EPStartXfer+0xb62>
 8009dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	461a      	mov	r2, r3
 8009dd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dd2:	4413      	add	r3, r2
 8009dd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8009dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	00da      	lsls	r2, r3, #3
 8009de4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009de6:	4413      	add	r3, r2
 8009de8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009dec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009df6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	895b      	ldrh	r3, [r3, #10]
 8009e04:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6959      	ldr	r1, [r3, #20]
 8009e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009e1e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009e22:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009e26:	6800      	ldr	r0, [r0, #0]
 8009e28:	f000 fe0b 	bl	800aa42 <USB_WritePMA>
 8009e2c:	e0ca      	b.n	8009fc4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	785b      	ldrb	r3, [r3, #1]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d177      	bne.n	8009f2e <USB_EPStartXfer+0xc98>
 8009e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e5e:	4413      	add	r3, r2
 8009e60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	00da      	lsls	r2, r3, #3
 8009e70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e72:	4413      	add	r3, r2
 8009e74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e88:	801a      	strh	r2, [r3, #0]
 8009e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10a      	bne.n	8009ea8 <USB_EPStartXfer+0xc12>
 8009e92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e94:	881b      	ldrh	r3, [r3, #0]
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ea0:	b29a      	uxth	r2, r3
 8009ea2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ea4:	801a      	strh	r2, [r3, #0]
 8009ea6:	e073      	b.n	8009f90 <USB_EPStartXfer+0xcfa>
 8009ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eac:	2b3e      	cmp	r3, #62	@ 0x3e
 8009eae:	d81c      	bhi.n	8009eea <USB_EPStartXfer+0xc54>
 8009eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb4:	085b      	lsrs	r3, r3, #1
 8009eb6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d004      	beq.n	8009ed0 <USB_EPStartXfer+0xc3a>
 8009ec6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009eca:	3301      	adds	r3, #1
 8009ecc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009ed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ed2:	881b      	ldrh	r3, [r3, #0]
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	029b      	lsls	r3, r3, #10
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ee6:	801a      	strh	r2, [r3, #0]
 8009ee8:	e052      	b.n	8009f90 <USB_EPStartXfer+0xcfa>
 8009eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eee:	095b      	lsrs	r3, r3, #5
 8009ef0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef8:	f003 031f 	and.w	r3, r3, #31
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d104      	bne.n	8009f0a <USB_EPStartXfer+0xc74>
 8009f00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009f04:	3b01      	subs	r3, #1
 8009f06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f0c:	881b      	ldrh	r3, [r3, #0]
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	029b      	lsls	r3, r3, #10
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f2a:	801a      	strh	r2, [r3, #0]
 8009f2c:	e030      	b.n	8009f90 <USB_EPStartXfer+0xcfa>
 8009f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	785b      	ldrb	r3, [r3, #1]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d128      	bne.n	8009f90 <USB_EPStartXfer+0xcfa>
 8009f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f62:	4413      	add	r3, r2
 8009f64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	00da      	lsls	r2, r3, #3
 8009f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009f8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	891b      	ldrh	r3, [r3, #8]
 8009f9c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6959      	ldr	r1, [r3, #20]
 8009fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009fb6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009fba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009fbe:	6800      	ldr	r0, [r0, #0]
 8009fc0:	f000 fd3f 	bl	800aa42 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	881b      	ldrh	r3, [r3, #0]
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fea:	817b      	strh	r3, [r7, #10]
 8009fec:	897b      	ldrh	r3, [r7, #10]
 8009fee:	f083 0310 	eor.w	r3, r3, #16
 8009ff2:	817b      	strh	r3, [r7, #10]
 8009ff4:	897b      	ldrh	r3, [r7, #10]
 8009ff6:	f083 0320 	eor.w	r3, r3, #32
 8009ffa:	817b      	strh	r3, [r7, #10]
 8009ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a00a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	441a      	add	r2, r3
 800a016:	897b      	ldrh	r3, [r7, #10]
 800a018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a01c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a028:	b29b      	uxth	r3, r3
 800a02a:	8013      	strh	r3, [r2, #0]
 800a02c:	f000 bcdf 	b.w	800a9ee <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	7b1b      	ldrb	r3, [r3, #12]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f040 80bc 	bne.w	800a1ba <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	699a      	ldr	r2, [r3, #24]
 800a04e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d917      	bls.n	800a08e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a05e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a06e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	699a      	ldr	r2, [r3, #24]
 800a07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a07e:	1ad2      	subs	r2, r2, r3
 800a080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	619a      	str	r2, [r3, #24]
 800a08c:	e00e      	b.n	800a0ac <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a08e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a09e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a0ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a0d0:	4413      	add	r3, r2
 800a0d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	00da      	lsls	r2, r3, #3
 800a0e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a0ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a0f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0f6:	881b      	ldrh	r3, [r3, #0]
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a104:	801a      	strh	r2, [r3, #0]
 800a106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10d      	bne.n	800a12a <USB_EPStartXfer+0xe94>
 800a10e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	b29b      	uxth	r3, r3
 800a116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a11a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a11e:	b29a      	uxth	r2, r3
 800a120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a124:	801a      	strh	r2, [r3, #0]
 800a126:	f000 bc28 	b.w	800a97a <USB_EPStartXfer+0x16e4>
 800a12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a12e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a130:	d81f      	bhi.n	800a172 <USB_EPStartXfer+0xedc>
 800a132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a136:	085b      	lsrs	r3, r3, #1
 800a138:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b00      	cmp	r3, #0
 800a146:	d004      	beq.n	800a152 <USB_EPStartXfer+0xebc>
 800a148:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a14c:	3301      	adds	r3, #1
 800a14e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a152:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a156:	881b      	ldrh	r3, [r3, #0]
 800a158:	b29a      	uxth	r2, r3
 800a15a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a15e:	b29b      	uxth	r3, r3
 800a160:	029b      	lsls	r3, r3, #10
 800a162:	b29b      	uxth	r3, r3
 800a164:	4313      	orrs	r3, r2
 800a166:	b29a      	uxth	r2, r3
 800a168:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a16c:	801a      	strh	r2, [r3, #0]
 800a16e:	f000 bc04 	b.w	800a97a <USB_EPStartXfer+0x16e4>
 800a172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a176:	095b      	lsrs	r3, r3, #5
 800a178:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a180:	f003 031f 	and.w	r3, r3, #31
 800a184:	2b00      	cmp	r3, #0
 800a186:	d104      	bne.n	800a192 <USB_EPStartXfer+0xefc>
 800a188:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a18c:	3b01      	subs	r3, #1
 800a18e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	b29a      	uxth	r2, r3
 800a19a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	029b      	lsls	r3, r3, #10
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1b6:	801a      	strh	r2, [r3, #0]
 800a1b8:	e3df      	b.n	800a97a <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a1ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	78db      	ldrb	r3, [r3, #3]
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	f040 8218 	bne.w	800a5fc <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a1cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	785b      	ldrb	r3, [r3, #1]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f040 809d 	bne.w	800a318 <USB_EPStartXfer+0x1082>
 800a1de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a1ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a202:	4413      	add	r3, r2
 800a204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a20c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	00da      	lsls	r2, r3, #3
 800a216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a21a:	4413      	add	r3, r2
 800a21c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a220:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a230:	b29a      	uxth	r2, r3
 800a232:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a236:	801a      	strh	r2, [r3, #0]
 800a238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a23c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10c      	bne.n	800a262 <USB_EPStartXfer+0xfcc>
 800a248:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a258:	b29a      	uxth	r2, r3
 800a25a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a25e:	801a      	strh	r2, [r3, #0]
 800a260:	e08f      	b.n	800a382 <USB_EPStartXfer+0x10ec>
 800a262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a270:	d826      	bhi.n	800a2c0 <USB_EPStartXfer+0x102a>
 800a272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	085b      	lsrs	r3, r3, #1
 800a280:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	f003 0301 	and.w	r3, r3, #1
 800a294:	2b00      	cmp	r3, #0
 800a296:	d004      	beq.n	800a2a2 <USB_EPStartXfer+0x100c>
 800a298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a29c:	3301      	adds	r3, #1
 800a29e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2a6:	881b      	ldrh	r3, [r3, #0]
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	029b      	lsls	r3, r3, #10
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2bc:	801a      	strh	r2, [r3, #0]
 800a2be:	e060      	b.n	800a382 <USB_EPStartXfer+0x10ec>
 800a2c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	095b      	lsrs	r3, r3, #5
 800a2ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	f003 031f 	and.w	r3, r3, #31
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d104      	bne.n	800a2f0 <USB_EPStartXfer+0x105a>
 800a2e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	029b      	lsls	r3, r3, #10
 800a300:	b29b      	uxth	r3, r3
 800a302:	4313      	orrs	r3, r2
 800a304:	b29b      	uxth	r3, r3
 800a306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a30a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a30e:	b29a      	uxth	r2, r3
 800a310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a314:	801a      	strh	r2, [r3, #0]
 800a316:	e034      	b.n	800a382 <USB_EPStartXfer+0x10ec>
 800a318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a31c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	785b      	ldrb	r3, [r3, #1]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d12c      	bne.n	800a382 <USB_EPStartXfer+0x10ec>
 800a328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a32c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a33a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a344:	b29b      	uxth	r3, r3
 800a346:	461a      	mov	r2, r3
 800a348:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a34c:	4413      	add	r3, r2
 800a34e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	00da      	lsls	r2, r3, #3
 800a360:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a364:	4413      	add	r3, r2
 800a366:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a36a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a36e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a380:	801a      	strh	r2, [r3, #0]
 800a382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	785b      	ldrb	r3, [r3, #1]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f040 809d 	bne.w	800a4dc <USB_EPStartXfer+0x1246>
 800a3a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	00da      	lsls	r2, r3, #3
 800a3da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3de:	4413      	add	r3, r2
 800a3e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a3e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a3e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a3ec:	881b      	ldrh	r3, [r3, #0]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a3fa:	801a      	strh	r2, [r3, #0]
 800a3fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10c      	bne.n	800a426 <USB_EPStartXfer+0x1190>
 800a40c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	b29b      	uxth	r3, r3
 800a414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a422:	801a      	strh	r2, [r3, #0]
 800a424:	e088      	b.n	800a538 <USB_EPStartXfer+0x12a2>
 800a426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a42a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	2b3e      	cmp	r3, #62	@ 0x3e
 800a434:	d826      	bhi.n	800a484 <USB_EPStartXfer+0x11ee>
 800a436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a43a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	085b      	lsrs	r3, r3, #1
 800a444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a44c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	f003 0301 	and.w	r3, r3, #1
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d004      	beq.n	800a466 <USB_EPStartXfer+0x11d0>
 800a45c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a460:	3301      	adds	r3, #1
 800a462:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a466:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a46a:	881b      	ldrh	r3, [r3, #0]
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a472:	b29b      	uxth	r3, r3
 800a474:	029b      	lsls	r3, r3, #10
 800a476:	b29b      	uxth	r3, r3
 800a478:	4313      	orrs	r3, r2
 800a47a:	b29a      	uxth	r2, r3
 800a47c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a480:	801a      	strh	r2, [r3, #0]
 800a482:	e059      	b.n	800a538 <USB_EPStartXfer+0x12a2>
 800a484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	095b      	lsrs	r3, r3, #5
 800a492:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	f003 031f 	and.w	r3, r3, #31
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d104      	bne.n	800a4b4 <USB_EPStartXfer+0x121e>
 800a4aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a4b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	029b      	lsls	r3, r3, #10
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4d8:	801a      	strh	r2, [r3, #0]
 800a4da:	e02d      	b.n	800a538 <USB_EPStartXfer+0x12a2>
 800a4dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	785b      	ldrb	r3, [r3, #1]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d125      	bne.n	800a538 <USB_EPStartXfer+0x12a2>
 800a4ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a502:	4413      	add	r3, r2
 800a504:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a50c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	00da      	lsls	r2, r3, #3
 800a516:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a51a:	4413      	add	r3, r2
 800a51c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a520:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	b29a      	uxth	r2, r3
 800a532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a536:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a53c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	69db      	ldr	r3, [r3, #28]
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 8218 	beq.w	800a97a <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a54a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a54e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4413      	add	r3, r2
 800a564:	881b      	ldrh	r3, [r3, #0]
 800a566:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a56a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a56e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d005      	beq.n	800a582 <USB_EPStartXfer+0x12ec>
 800a576:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a57a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10d      	bne.n	800a59e <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a582:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f040 81f5 	bne.w	800a97a <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a590:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f040 81ee 	bne.w	800a97a <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a59e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	881b      	ldrh	r3, [r3, #0]
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5c4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a5c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	441a      	add	r2, r3
 800a5e2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a5e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	8013      	strh	r3, [r2, #0]
 800a5fa:	e1be      	b.n	800a97a <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a5fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	78db      	ldrb	r3, [r3, #3]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	f040 81b4 	bne.w	800a976 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a60e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	699a      	ldr	r2, [r3, #24]
 800a61a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a61e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	429a      	cmp	r2, r3
 800a628:	d917      	bls.n	800a65a <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800a62a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a62e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a63a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a63e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	699a      	ldr	r2, [r3, #24]
 800a646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a64a:	1ad2      	subs	r2, r2, r3
 800a64c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	619a      	str	r2, [r3, #24]
 800a658:	e00e      	b.n	800a678 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800a65a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a65e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a66a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a66e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2200      	movs	r2, #0
 800a676:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a67c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	785b      	ldrb	r3, [r3, #1]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f040 8085 	bne.w	800a794 <USB_EPStartXfer+0x14fe>
 800a68a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a68e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a69c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a6b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	00da      	lsls	r2, r3, #3
 800a6c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a6c6:	4413      	add	r3, r2
 800a6c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a6d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6e2:	801a      	strh	r2, [r3, #0]
 800a6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10c      	bne.n	800a706 <USB_EPStartXfer+0x1470>
 800a6ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6f0:	881b      	ldrh	r3, [r3, #0]
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a702:	801a      	strh	r2, [r3, #0]
 800a704:	e077      	b.n	800a7f6 <USB_EPStartXfer+0x1560>
 800a706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a70a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a70c:	d81e      	bhi.n	800a74c <USB_EPStartXfer+0x14b6>
 800a70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a712:	085b      	lsrs	r3, r3, #1
 800a714:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a71c:	f003 0301 	and.w	r3, r3, #1
 800a720:	2b00      	cmp	r3, #0
 800a722:	d004      	beq.n	800a72e <USB_EPStartXfer+0x1498>
 800a724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a728:	3301      	adds	r3, #1
 800a72a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a72e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a732:	881b      	ldrh	r3, [r3, #0]
 800a734:	b29a      	uxth	r2, r3
 800a736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	029b      	lsls	r3, r3, #10
 800a73e:	b29b      	uxth	r3, r3
 800a740:	4313      	orrs	r3, r2
 800a742:	b29a      	uxth	r2, r3
 800a744:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a748:	801a      	strh	r2, [r3, #0]
 800a74a:	e054      	b.n	800a7f6 <USB_EPStartXfer+0x1560>
 800a74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a750:	095b      	lsrs	r3, r3, #5
 800a752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a75a:	f003 031f 	and.w	r3, r3, #31
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d104      	bne.n	800a76c <USB_EPStartXfer+0x14d6>
 800a762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a766:	3b01      	subs	r3, #1
 800a768:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a76c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	b29a      	uxth	r2, r3
 800a774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a778:	b29b      	uxth	r3, r3
 800a77a:	029b      	lsls	r3, r3, #10
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	4313      	orrs	r3, r2
 800a780:	b29b      	uxth	r3, r3
 800a782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a790:	801a      	strh	r2, [r3, #0]
 800a792:	e030      	b.n	800a7f6 <USB_EPStartXfer+0x1560>
 800a794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	785b      	ldrb	r3, [r3, #1]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d128      	bne.n	800a7f6 <USB_EPStartXfer+0x1560>
 800a7a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a7b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a7ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	00da      	lsls	r2, r3, #3
 800a7dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a7ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a7f4:	801a      	strh	r2, [r3, #0]
 800a7f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	785b      	ldrb	r3, [r3, #1]
 800a810:	2b00      	cmp	r3, #0
 800a812:	f040 8085 	bne.w	800a920 <USB_EPStartXfer+0x168a>
 800a816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a81a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a828:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a832:	b29b      	uxth	r3, r3
 800a834:	461a      	mov	r2, r3
 800a836:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a83a:	4413      	add	r3, r2
 800a83c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	00da      	lsls	r2, r3, #3
 800a84e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a852:	4413      	add	r3, r2
 800a854:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a858:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a85c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	b29b      	uxth	r3, r3
 800a864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a868:	b29a      	uxth	r2, r3
 800a86a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a86e:	801a      	strh	r2, [r3, #0]
 800a870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10c      	bne.n	800a892 <USB_EPStartXfer+0x15fc>
 800a878:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a87c:	881b      	ldrh	r3, [r3, #0]
 800a87e:	b29b      	uxth	r3, r3
 800a880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a888:	b29a      	uxth	r2, r3
 800a88a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a88e:	801a      	strh	r2, [r3, #0]
 800a890:	e073      	b.n	800a97a <USB_EPStartXfer+0x16e4>
 800a892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a896:	2b3e      	cmp	r3, #62	@ 0x3e
 800a898:	d81e      	bhi.n	800a8d8 <USB_EPStartXfer+0x1642>
 800a89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a89e:	085b      	lsrs	r3, r3, #1
 800a8a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d004      	beq.n	800a8ba <USB_EPStartXfer+0x1624>
 800a8b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	b29a      	uxth	r2, r3
 800a8c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	029b      	lsls	r3, r3, #10
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8d4:	801a      	strh	r2, [r3, #0]
 800a8d6:	e050      	b.n	800a97a <USB_EPStartXfer+0x16e4>
 800a8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8dc:	095b      	lsrs	r3, r3, #5
 800a8de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e6:	f003 031f 	and.w	r3, r3, #31
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d104      	bne.n	800a8f8 <USB_EPStartXfer+0x1662>
 800a8ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a904:	b29b      	uxth	r3, r3
 800a906:	029b      	lsls	r3, r3, #10
 800a908:	b29b      	uxth	r3, r3
 800a90a:	4313      	orrs	r3, r2
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a916:	b29a      	uxth	r2, r3
 800a918:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a91c:	801a      	strh	r2, [r3, #0]
 800a91e:	e02c      	b.n	800a97a <USB_EPStartXfer+0x16e4>
 800a920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	785b      	ldrb	r3, [r3, #1]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d124      	bne.n	800a97a <USB_EPStartXfer+0x16e4>
 800a930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a934:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a93e:	b29b      	uxth	r3, r3
 800a940:	461a      	mov	r2, r3
 800a942:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a946:	4413      	add	r3, r2
 800a948:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a94c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	00da      	lsls	r2, r3, #3
 800a95a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a95e:	4413      	add	r3, r2
 800a960:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a964:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a972:	801a      	strh	r2, [r3, #0]
 800a974:	e001      	b.n	800a97a <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e03a      	b.n	800a9f0 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a97a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a97e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	4413      	add	r3, r2
 800a994:	881b      	ldrh	r3, [r3, #0]
 800a996:	b29b      	uxth	r3, r3
 800a998:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a99c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9a0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a9a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a9a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a9ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a9b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a9b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a9b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a9bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	441a      	add	r2, r3
 800a9d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a9da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b083      	sub	sp, #12
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
 800aa02:	460b      	mov	r3, r1
 800aa04:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800aa06:	78fb      	ldrb	r3, [r7, #3]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d103      	bne.n	800aa14 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2280      	movs	r2, #128	@ 0x80
 800aa10:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800aa22:	b480      	push	{r7}
 800aa24:	b085      	sub	sp, #20
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800aa34:	68fb      	ldr	r3, [r7, #12]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b08b      	sub	sp, #44	@ 0x2c
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	60f8      	str	r0, [r7, #12]
 800aa4a:	60b9      	str	r1, [r7, #8]
 800aa4c:	4611      	mov	r1, r2
 800aa4e:	461a      	mov	r2, r3
 800aa50:	460b      	mov	r3, r1
 800aa52:	80fb      	strh	r3, [r7, #6]
 800aa54:	4613      	mov	r3, r2
 800aa56:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800aa58:	88bb      	ldrh	r3, [r7, #4]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	085b      	lsrs	r3, r3, #1
 800aa5e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aa68:	88fa      	ldrh	r2, [r7, #6]
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aa72:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa78:	e01b      	b.n	800aab2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	3301      	adds	r3, #1
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	021b      	lsls	r3, r3, #8
 800aa88:	b21a      	sxth	r2, r3
 800aa8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	b21b      	sxth	r3, r3
 800aa92:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800aa94:	6a3b      	ldr	r3, [r7, #32]
 800aa96:	8a7a      	ldrh	r2, [r7, #18]
 800aa98:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	3302      	adds	r3, #2
 800aa9e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800aaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaae:	3b01      	subs	r3, #1
 800aab0:	627b      	str	r3, [r7, #36]	@ 0x24
 800aab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1e0      	bne.n	800aa7a <USB_WritePMA+0x38>
  }
}
 800aab8:	bf00      	nop
 800aaba:	bf00      	nop
 800aabc:	372c      	adds	r7, #44	@ 0x2c
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr

0800aac6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aac6:	b480      	push	{r7}
 800aac8:	b08b      	sub	sp, #44	@ 0x2c
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	60f8      	str	r0, [r7, #12]
 800aace:	60b9      	str	r1, [r7, #8]
 800aad0:	4611      	mov	r1, r2
 800aad2:	461a      	mov	r2, r3
 800aad4:	460b      	mov	r3, r1
 800aad6:	80fb      	strh	r3, [r7, #6]
 800aad8:	4613      	mov	r3, r2
 800aada:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800aadc:	88bb      	ldrh	r3, [r7, #4]
 800aade:	085b      	lsrs	r3, r3, #1
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aaec:	88fa      	ldrh	r2, [r7, #6]
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aaf6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	627b      	str	r3, [r7, #36]	@ 0x24
 800aafc:	e018      	b.n	800ab30 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	881b      	ldrh	r3, [r3, #0]
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ab06:	6a3b      	ldr	r3, [r7, #32]
 800ab08:	3302      	adds	r3, #2
 800ab0a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	3301      	adds	r3, #1
 800ab18:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	0a1b      	lsrs	r3, r3, #8
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	3301      	adds	r3, #1
 800ab28:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1e3      	bne.n	800aafe <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ab36:	88bb      	ldrh	r3, [r7, #4]
 800ab38:	f003 0301 	and.w	r3, r3, #1
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d007      	beq.n	800ab52 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ab42:	6a3b      	ldr	r3, [r7, #32]
 800ab44:	881b      	ldrh	r3, [r3, #0]
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	701a      	strb	r2, [r3, #0]
  }
}
 800ab52:	bf00      	nop
 800ab54:	372c      	adds	r7, #44	@ 0x2c
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <__cvt>:
 800ab5e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab62:	ec57 6b10 	vmov	r6, r7, d0
 800ab66:	2f00      	cmp	r7, #0
 800ab68:	460c      	mov	r4, r1
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	463b      	mov	r3, r7
 800ab6e:	bfbb      	ittet	lt
 800ab70:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ab74:	461f      	movlt	r7, r3
 800ab76:	2300      	movge	r3, #0
 800ab78:	232d      	movlt	r3, #45	@ 0x2d
 800ab7a:	700b      	strb	r3, [r1, #0]
 800ab7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab7e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ab82:	4691      	mov	r9, r2
 800ab84:	f023 0820 	bic.w	r8, r3, #32
 800ab88:	bfbc      	itt	lt
 800ab8a:	4632      	movlt	r2, r6
 800ab8c:	4616      	movlt	r6, r2
 800ab8e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab92:	d005      	beq.n	800aba0 <__cvt+0x42>
 800ab94:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ab98:	d100      	bne.n	800ab9c <__cvt+0x3e>
 800ab9a:	3401      	adds	r4, #1
 800ab9c:	2102      	movs	r1, #2
 800ab9e:	e000      	b.n	800aba2 <__cvt+0x44>
 800aba0:	2103      	movs	r1, #3
 800aba2:	ab03      	add	r3, sp, #12
 800aba4:	9301      	str	r3, [sp, #4]
 800aba6:	ab02      	add	r3, sp, #8
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	ec47 6b10 	vmov	d0, r6, r7
 800abae:	4653      	mov	r3, sl
 800abb0:	4622      	mov	r2, r4
 800abb2:	f001 f875 	bl	800bca0 <_dtoa_r>
 800abb6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800abba:	4605      	mov	r5, r0
 800abbc:	d119      	bne.n	800abf2 <__cvt+0x94>
 800abbe:	f019 0f01 	tst.w	r9, #1
 800abc2:	d00e      	beq.n	800abe2 <__cvt+0x84>
 800abc4:	eb00 0904 	add.w	r9, r0, r4
 800abc8:	2200      	movs	r2, #0
 800abca:	2300      	movs	r3, #0
 800abcc:	4630      	mov	r0, r6
 800abce:	4639      	mov	r1, r7
 800abd0:	f7f5 ff82 	bl	8000ad8 <__aeabi_dcmpeq>
 800abd4:	b108      	cbz	r0, 800abda <__cvt+0x7c>
 800abd6:	f8cd 900c 	str.w	r9, [sp, #12]
 800abda:	2230      	movs	r2, #48	@ 0x30
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	454b      	cmp	r3, r9
 800abe0:	d31e      	bcc.n	800ac20 <__cvt+0xc2>
 800abe2:	9b03      	ldr	r3, [sp, #12]
 800abe4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abe6:	1b5b      	subs	r3, r3, r5
 800abe8:	4628      	mov	r0, r5
 800abea:	6013      	str	r3, [r2, #0]
 800abec:	b004      	add	sp, #16
 800abee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800abf6:	eb00 0904 	add.w	r9, r0, r4
 800abfa:	d1e5      	bne.n	800abc8 <__cvt+0x6a>
 800abfc:	7803      	ldrb	r3, [r0, #0]
 800abfe:	2b30      	cmp	r3, #48	@ 0x30
 800ac00:	d10a      	bne.n	800ac18 <__cvt+0xba>
 800ac02:	2200      	movs	r2, #0
 800ac04:	2300      	movs	r3, #0
 800ac06:	4630      	mov	r0, r6
 800ac08:	4639      	mov	r1, r7
 800ac0a:	f7f5 ff65 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac0e:	b918      	cbnz	r0, 800ac18 <__cvt+0xba>
 800ac10:	f1c4 0401 	rsb	r4, r4, #1
 800ac14:	f8ca 4000 	str.w	r4, [sl]
 800ac18:	f8da 3000 	ldr.w	r3, [sl]
 800ac1c:	4499      	add	r9, r3
 800ac1e:	e7d3      	b.n	800abc8 <__cvt+0x6a>
 800ac20:	1c59      	adds	r1, r3, #1
 800ac22:	9103      	str	r1, [sp, #12]
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	e7d9      	b.n	800abdc <__cvt+0x7e>

0800ac28 <__exponent>:
 800ac28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac2a:	2900      	cmp	r1, #0
 800ac2c:	bfba      	itte	lt
 800ac2e:	4249      	neglt	r1, r1
 800ac30:	232d      	movlt	r3, #45	@ 0x2d
 800ac32:	232b      	movge	r3, #43	@ 0x2b
 800ac34:	2909      	cmp	r1, #9
 800ac36:	7002      	strb	r2, [r0, #0]
 800ac38:	7043      	strb	r3, [r0, #1]
 800ac3a:	dd29      	ble.n	800ac90 <__exponent+0x68>
 800ac3c:	f10d 0307 	add.w	r3, sp, #7
 800ac40:	461d      	mov	r5, r3
 800ac42:	270a      	movs	r7, #10
 800ac44:	461a      	mov	r2, r3
 800ac46:	fbb1 f6f7 	udiv	r6, r1, r7
 800ac4a:	fb07 1416 	mls	r4, r7, r6, r1
 800ac4e:	3430      	adds	r4, #48	@ 0x30
 800ac50:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ac54:	460c      	mov	r4, r1
 800ac56:	2c63      	cmp	r4, #99	@ 0x63
 800ac58:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac5c:	4631      	mov	r1, r6
 800ac5e:	dcf1      	bgt.n	800ac44 <__exponent+0x1c>
 800ac60:	3130      	adds	r1, #48	@ 0x30
 800ac62:	1e94      	subs	r4, r2, #2
 800ac64:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ac68:	1c41      	adds	r1, r0, #1
 800ac6a:	4623      	mov	r3, r4
 800ac6c:	42ab      	cmp	r3, r5
 800ac6e:	d30a      	bcc.n	800ac86 <__exponent+0x5e>
 800ac70:	f10d 0309 	add.w	r3, sp, #9
 800ac74:	1a9b      	subs	r3, r3, r2
 800ac76:	42ac      	cmp	r4, r5
 800ac78:	bf88      	it	hi
 800ac7a:	2300      	movhi	r3, #0
 800ac7c:	3302      	adds	r3, #2
 800ac7e:	4403      	add	r3, r0
 800ac80:	1a18      	subs	r0, r3, r0
 800ac82:	b003      	add	sp, #12
 800ac84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac86:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ac8a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ac8e:	e7ed      	b.n	800ac6c <__exponent+0x44>
 800ac90:	2330      	movs	r3, #48	@ 0x30
 800ac92:	3130      	adds	r1, #48	@ 0x30
 800ac94:	7083      	strb	r3, [r0, #2]
 800ac96:	70c1      	strb	r1, [r0, #3]
 800ac98:	1d03      	adds	r3, r0, #4
 800ac9a:	e7f1      	b.n	800ac80 <__exponent+0x58>

0800ac9c <_printf_float>:
 800ac9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	b08d      	sub	sp, #52	@ 0x34
 800aca2:	460c      	mov	r4, r1
 800aca4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aca8:	4616      	mov	r6, r2
 800acaa:	461f      	mov	r7, r3
 800acac:	4605      	mov	r5, r0
 800acae:	f000 feef 	bl	800ba90 <_localeconv_r>
 800acb2:	6803      	ldr	r3, [r0, #0]
 800acb4:	9304      	str	r3, [sp, #16]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7f5 fae2 	bl	8000280 <strlen>
 800acbc:	2300      	movs	r3, #0
 800acbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800acc0:	f8d8 3000 	ldr.w	r3, [r8]
 800acc4:	9005      	str	r0, [sp, #20]
 800acc6:	3307      	adds	r3, #7
 800acc8:	f023 0307 	bic.w	r3, r3, #7
 800accc:	f103 0208 	add.w	r2, r3, #8
 800acd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800acd4:	f8d4 b000 	ldr.w	fp, [r4]
 800acd8:	f8c8 2000 	str.w	r2, [r8]
 800acdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ace0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ace4:	9307      	str	r3, [sp, #28]
 800ace6:	f8cd 8018 	str.w	r8, [sp, #24]
 800acea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800acee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acf2:	4b9c      	ldr	r3, [pc, #624]	@ (800af64 <_printf_float+0x2c8>)
 800acf4:	f04f 32ff 	mov.w	r2, #4294967295
 800acf8:	f7f5 ff20 	bl	8000b3c <__aeabi_dcmpun>
 800acfc:	bb70      	cbnz	r0, 800ad5c <_printf_float+0xc0>
 800acfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad02:	4b98      	ldr	r3, [pc, #608]	@ (800af64 <_printf_float+0x2c8>)
 800ad04:	f04f 32ff 	mov.w	r2, #4294967295
 800ad08:	f7f5 fefa 	bl	8000b00 <__aeabi_dcmple>
 800ad0c:	bb30      	cbnz	r0, 800ad5c <_printf_float+0xc0>
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2300      	movs	r3, #0
 800ad12:	4640      	mov	r0, r8
 800ad14:	4649      	mov	r1, r9
 800ad16:	f7f5 fee9 	bl	8000aec <__aeabi_dcmplt>
 800ad1a:	b110      	cbz	r0, 800ad22 <_printf_float+0x86>
 800ad1c:	232d      	movs	r3, #45	@ 0x2d
 800ad1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad22:	4a91      	ldr	r2, [pc, #580]	@ (800af68 <_printf_float+0x2cc>)
 800ad24:	4b91      	ldr	r3, [pc, #580]	@ (800af6c <_printf_float+0x2d0>)
 800ad26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ad2a:	bf94      	ite	ls
 800ad2c:	4690      	movls	r8, r2
 800ad2e:	4698      	movhi	r8, r3
 800ad30:	2303      	movs	r3, #3
 800ad32:	6123      	str	r3, [r4, #16]
 800ad34:	f02b 0304 	bic.w	r3, fp, #4
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	f04f 0900 	mov.w	r9, #0
 800ad3e:	9700      	str	r7, [sp, #0]
 800ad40:	4633      	mov	r3, r6
 800ad42:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ad44:	4621      	mov	r1, r4
 800ad46:	4628      	mov	r0, r5
 800ad48:	f000 f9d2 	bl	800b0f0 <_printf_common>
 800ad4c:	3001      	adds	r0, #1
 800ad4e:	f040 808d 	bne.w	800ae6c <_printf_float+0x1d0>
 800ad52:	f04f 30ff 	mov.w	r0, #4294967295
 800ad56:	b00d      	add	sp, #52	@ 0x34
 800ad58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5c:	4642      	mov	r2, r8
 800ad5e:	464b      	mov	r3, r9
 800ad60:	4640      	mov	r0, r8
 800ad62:	4649      	mov	r1, r9
 800ad64:	f7f5 feea 	bl	8000b3c <__aeabi_dcmpun>
 800ad68:	b140      	cbz	r0, 800ad7c <_printf_float+0xe0>
 800ad6a:	464b      	mov	r3, r9
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	bfbc      	itt	lt
 800ad70:	232d      	movlt	r3, #45	@ 0x2d
 800ad72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ad76:	4a7e      	ldr	r2, [pc, #504]	@ (800af70 <_printf_float+0x2d4>)
 800ad78:	4b7e      	ldr	r3, [pc, #504]	@ (800af74 <_printf_float+0x2d8>)
 800ad7a:	e7d4      	b.n	800ad26 <_printf_float+0x8a>
 800ad7c:	6863      	ldr	r3, [r4, #4]
 800ad7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ad82:	9206      	str	r2, [sp, #24]
 800ad84:	1c5a      	adds	r2, r3, #1
 800ad86:	d13b      	bne.n	800ae00 <_printf_float+0x164>
 800ad88:	2306      	movs	r3, #6
 800ad8a:	6063      	str	r3, [r4, #4]
 800ad8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ad90:	2300      	movs	r3, #0
 800ad92:	6022      	str	r2, [r4, #0]
 800ad94:	9303      	str	r3, [sp, #12]
 800ad96:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad98:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ad9c:	ab09      	add	r3, sp, #36	@ 0x24
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	6861      	ldr	r1, [r4, #4]
 800ada2:	ec49 8b10 	vmov	d0, r8, r9
 800ada6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800adaa:	4628      	mov	r0, r5
 800adac:	f7ff fed7 	bl	800ab5e <__cvt>
 800adb0:	9b06      	ldr	r3, [sp, #24]
 800adb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adb4:	2b47      	cmp	r3, #71	@ 0x47
 800adb6:	4680      	mov	r8, r0
 800adb8:	d129      	bne.n	800ae0e <_printf_float+0x172>
 800adba:	1cc8      	adds	r0, r1, #3
 800adbc:	db02      	blt.n	800adc4 <_printf_float+0x128>
 800adbe:	6863      	ldr	r3, [r4, #4]
 800adc0:	4299      	cmp	r1, r3
 800adc2:	dd41      	ble.n	800ae48 <_printf_float+0x1ac>
 800adc4:	f1aa 0a02 	sub.w	sl, sl, #2
 800adc8:	fa5f fa8a 	uxtb.w	sl, sl
 800adcc:	3901      	subs	r1, #1
 800adce:	4652      	mov	r2, sl
 800add0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800add4:	9109      	str	r1, [sp, #36]	@ 0x24
 800add6:	f7ff ff27 	bl	800ac28 <__exponent>
 800adda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800addc:	1813      	adds	r3, r2, r0
 800adde:	2a01      	cmp	r2, #1
 800ade0:	4681      	mov	r9, r0
 800ade2:	6123      	str	r3, [r4, #16]
 800ade4:	dc02      	bgt.n	800adec <_printf_float+0x150>
 800ade6:	6822      	ldr	r2, [r4, #0]
 800ade8:	07d2      	lsls	r2, r2, #31
 800adea:	d501      	bpl.n	800adf0 <_printf_float+0x154>
 800adec:	3301      	adds	r3, #1
 800adee:	6123      	str	r3, [r4, #16]
 800adf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d0a2      	beq.n	800ad3e <_printf_float+0xa2>
 800adf8:	232d      	movs	r3, #45	@ 0x2d
 800adfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adfe:	e79e      	b.n	800ad3e <_printf_float+0xa2>
 800ae00:	9a06      	ldr	r2, [sp, #24]
 800ae02:	2a47      	cmp	r2, #71	@ 0x47
 800ae04:	d1c2      	bne.n	800ad8c <_printf_float+0xf0>
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1c0      	bne.n	800ad8c <_printf_float+0xf0>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e7bd      	b.n	800ad8a <_printf_float+0xee>
 800ae0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae12:	d9db      	bls.n	800adcc <_printf_float+0x130>
 800ae14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ae18:	d118      	bne.n	800ae4c <_printf_float+0x1b0>
 800ae1a:	2900      	cmp	r1, #0
 800ae1c:	6863      	ldr	r3, [r4, #4]
 800ae1e:	dd0b      	ble.n	800ae38 <_printf_float+0x19c>
 800ae20:	6121      	str	r1, [r4, #16]
 800ae22:	b913      	cbnz	r3, 800ae2a <_printf_float+0x18e>
 800ae24:	6822      	ldr	r2, [r4, #0]
 800ae26:	07d0      	lsls	r0, r2, #31
 800ae28:	d502      	bpl.n	800ae30 <_printf_float+0x194>
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	440b      	add	r3, r1
 800ae2e:	6123      	str	r3, [r4, #16]
 800ae30:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ae32:	f04f 0900 	mov.w	r9, #0
 800ae36:	e7db      	b.n	800adf0 <_printf_float+0x154>
 800ae38:	b913      	cbnz	r3, 800ae40 <_printf_float+0x1a4>
 800ae3a:	6822      	ldr	r2, [r4, #0]
 800ae3c:	07d2      	lsls	r2, r2, #31
 800ae3e:	d501      	bpl.n	800ae44 <_printf_float+0x1a8>
 800ae40:	3302      	adds	r3, #2
 800ae42:	e7f4      	b.n	800ae2e <_printf_float+0x192>
 800ae44:	2301      	movs	r3, #1
 800ae46:	e7f2      	b.n	800ae2e <_printf_float+0x192>
 800ae48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ae4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae4e:	4299      	cmp	r1, r3
 800ae50:	db05      	blt.n	800ae5e <_printf_float+0x1c2>
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	6121      	str	r1, [r4, #16]
 800ae56:	07d8      	lsls	r0, r3, #31
 800ae58:	d5ea      	bpl.n	800ae30 <_printf_float+0x194>
 800ae5a:	1c4b      	adds	r3, r1, #1
 800ae5c:	e7e7      	b.n	800ae2e <_printf_float+0x192>
 800ae5e:	2900      	cmp	r1, #0
 800ae60:	bfd4      	ite	le
 800ae62:	f1c1 0202 	rsble	r2, r1, #2
 800ae66:	2201      	movgt	r2, #1
 800ae68:	4413      	add	r3, r2
 800ae6a:	e7e0      	b.n	800ae2e <_printf_float+0x192>
 800ae6c:	6823      	ldr	r3, [r4, #0]
 800ae6e:	055a      	lsls	r2, r3, #21
 800ae70:	d407      	bmi.n	800ae82 <_printf_float+0x1e6>
 800ae72:	6923      	ldr	r3, [r4, #16]
 800ae74:	4642      	mov	r2, r8
 800ae76:	4631      	mov	r1, r6
 800ae78:	4628      	mov	r0, r5
 800ae7a:	47b8      	blx	r7
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	d12b      	bne.n	800aed8 <_printf_float+0x23c>
 800ae80:	e767      	b.n	800ad52 <_printf_float+0xb6>
 800ae82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae86:	f240 80dd 	bls.w	800b044 <_printf_float+0x3a8>
 800ae8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae8e:	2200      	movs	r2, #0
 800ae90:	2300      	movs	r3, #0
 800ae92:	f7f5 fe21 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d033      	beq.n	800af02 <_printf_float+0x266>
 800ae9a:	4a37      	ldr	r2, [pc, #220]	@ (800af78 <_printf_float+0x2dc>)
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	4631      	mov	r1, r6
 800aea0:	4628      	mov	r0, r5
 800aea2:	47b8      	blx	r7
 800aea4:	3001      	adds	r0, #1
 800aea6:	f43f af54 	beq.w	800ad52 <_printf_float+0xb6>
 800aeaa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aeae:	4543      	cmp	r3, r8
 800aeb0:	db02      	blt.n	800aeb8 <_printf_float+0x21c>
 800aeb2:	6823      	ldr	r3, [r4, #0]
 800aeb4:	07d8      	lsls	r0, r3, #31
 800aeb6:	d50f      	bpl.n	800aed8 <_printf_float+0x23c>
 800aeb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aebc:	4631      	mov	r1, r6
 800aebe:	4628      	mov	r0, r5
 800aec0:	47b8      	blx	r7
 800aec2:	3001      	adds	r0, #1
 800aec4:	f43f af45 	beq.w	800ad52 <_printf_float+0xb6>
 800aec8:	f04f 0900 	mov.w	r9, #0
 800aecc:	f108 38ff 	add.w	r8, r8, #4294967295
 800aed0:	f104 0a1a 	add.w	sl, r4, #26
 800aed4:	45c8      	cmp	r8, r9
 800aed6:	dc09      	bgt.n	800aeec <_printf_float+0x250>
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	079b      	lsls	r3, r3, #30
 800aedc:	f100 8103 	bmi.w	800b0e6 <_printf_float+0x44a>
 800aee0:	68e0      	ldr	r0, [r4, #12]
 800aee2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aee4:	4298      	cmp	r0, r3
 800aee6:	bfb8      	it	lt
 800aee8:	4618      	movlt	r0, r3
 800aeea:	e734      	b.n	800ad56 <_printf_float+0xba>
 800aeec:	2301      	movs	r3, #1
 800aeee:	4652      	mov	r2, sl
 800aef0:	4631      	mov	r1, r6
 800aef2:	4628      	mov	r0, r5
 800aef4:	47b8      	blx	r7
 800aef6:	3001      	adds	r0, #1
 800aef8:	f43f af2b 	beq.w	800ad52 <_printf_float+0xb6>
 800aefc:	f109 0901 	add.w	r9, r9, #1
 800af00:	e7e8      	b.n	800aed4 <_printf_float+0x238>
 800af02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af04:	2b00      	cmp	r3, #0
 800af06:	dc39      	bgt.n	800af7c <_printf_float+0x2e0>
 800af08:	4a1b      	ldr	r2, [pc, #108]	@ (800af78 <_printf_float+0x2dc>)
 800af0a:	2301      	movs	r3, #1
 800af0c:	4631      	mov	r1, r6
 800af0e:	4628      	mov	r0, r5
 800af10:	47b8      	blx	r7
 800af12:	3001      	adds	r0, #1
 800af14:	f43f af1d 	beq.w	800ad52 <_printf_float+0xb6>
 800af18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800af1c:	ea59 0303 	orrs.w	r3, r9, r3
 800af20:	d102      	bne.n	800af28 <_printf_float+0x28c>
 800af22:	6823      	ldr	r3, [r4, #0]
 800af24:	07d9      	lsls	r1, r3, #31
 800af26:	d5d7      	bpl.n	800aed8 <_printf_float+0x23c>
 800af28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af2c:	4631      	mov	r1, r6
 800af2e:	4628      	mov	r0, r5
 800af30:	47b8      	blx	r7
 800af32:	3001      	adds	r0, #1
 800af34:	f43f af0d 	beq.w	800ad52 <_printf_float+0xb6>
 800af38:	f04f 0a00 	mov.w	sl, #0
 800af3c:	f104 0b1a 	add.w	fp, r4, #26
 800af40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af42:	425b      	negs	r3, r3
 800af44:	4553      	cmp	r3, sl
 800af46:	dc01      	bgt.n	800af4c <_printf_float+0x2b0>
 800af48:	464b      	mov	r3, r9
 800af4a:	e793      	b.n	800ae74 <_printf_float+0x1d8>
 800af4c:	2301      	movs	r3, #1
 800af4e:	465a      	mov	r2, fp
 800af50:	4631      	mov	r1, r6
 800af52:	4628      	mov	r0, r5
 800af54:	47b8      	blx	r7
 800af56:	3001      	adds	r0, #1
 800af58:	f43f aefb 	beq.w	800ad52 <_printf_float+0xb6>
 800af5c:	f10a 0a01 	add.w	sl, sl, #1
 800af60:	e7ee      	b.n	800af40 <_printf_float+0x2a4>
 800af62:	bf00      	nop
 800af64:	7fefffff 	.word	0x7fefffff
 800af68:	0800f2a4 	.word	0x0800f2a4
 800af6c:	0800f2a8 	.word	0x0800f2a8
 800af70:	0800f2ac 	.word	0x0800f2ac
 800af74:	0800f2b0 	.word	0x0800f2b0
 800af78:	0800f2b4 	.word	0x0800f2b4
 800af7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af82:	4553      	cmp	r3, sl
 800af84:	bfa8      	it	ge
 800af86:	4653      	movge	r3, sl
 800af88:	2b00      	cmp	r3, #0
 800af8a:	4699      	mov	r9, r3
 800af8c:	dc36      	bgt.n	800affc <_printf_float+0x360>
 800af8e:	f04f 0b00 	mov.w	fp, #0
 800af92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af96:	f104 021a 	add.w	r2, r4, #26
 800af9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af9c:	9306      	str	r3, [sp, #24]
 800af9e:	eba3 0309 	sub.w	r3, r3, r9
 800afa2:	455b      	cmp	r3, fp
 800afa4:	dc31      	bgt.n	800b00a <_printf_float+0x36e>
 800afa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afa8:	459a      	cmp	sl, r3
 800afaa:	dc3a      	bgt.n	800b022 <_printf_float+0x386>
 800afac:	6823      	ldr	r3, [r4, #0]
 800afae:	07da      	lsls	r2, r3, #31
 800afb0:	d437      	bmi.n	800b022 <_printf_float+0x386>
 800afb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb4:	ebaa 0903 	sub.w	r9, sl, r3
 800afb8:	9b06      	ldr	r3, [sp, #24]
 800afba:	ebaa 0303 	sub.w	r3, sl, r3
 800afbe:	4599      	cmp	r9, r3
 800afc0:	bfa8      	it	ge
 800afc2:	4699      	movge	r9, r3
 800afc4:	f1b9 0f00 	cmp.w	r9, #0
 800afc8:	dc33      	bgt.n	800b032 <_printf_float+0x396>
 800afca:	f04f 0800 	mov.w	r8, #0
 800afce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afd2:	f104 0b1a 	add.w	fp, r4, #26
 800afd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd8:	ebaa 0303 	sub.w	r3, sl, r3
 800afdc:	eba3 0309 	sub.w	r3, r3, r9
 800afe0:	4543      	cmp	r3, r8
 800afe2:	f77f af79 	ble.w	800aed8 <_printf_float+0x23c>
 800afe6:	2301      	movs	r3, #1
 800afe8:	465a      	mov	r2, fp
 800afea:	4631      	mov	r1, r6
 800afec:	4628      	mov	r0, r5
 800afee:	47b8      	blx	r7
 800aff0:	3001      	adds	r0, #1
 800aff2:	f43f aeae 	beq.w	800ad52 <_printf_float+0xb6>
 800aff6:	f108 0801 	add.w	r8, r8, #1
 800affa:	e7ec      	b.n	800afd6 <_printf_float+0x33a>
 800affc:	4642      	mov	r2, r8
 800affe:	4631      	mov	r1, r6
 800b000:	4628      	mov	r0, r5
 800b002:	47b8      	blx	r7
 800b004:	3001      	adds	r0, #1
 800b006:	d1c2      	bne.n	800af8e <_printf_float+0x2f2>
 800b008:	e6a3      	b.n	800ad52 <_printf_float+0xb6>
 800b00a:	2301      	movs	r3, #1
 800b00c:	4631      	mov	r1, r6
 800b00e:	4628      	mov	r0, r5
 800b010:	9206      	str	r2, [sp, #24]
 800b012:	47b8      	blx	r7
 800b014:	3001      	adds	r0, #1
 800b016:	f43f ae9c 	beq.w	800ad52 <_printf_float+0xb6>
 800b01a:	9a06      	ldr	r2, [sp, #24]
 800b01c:	f10b 0b01 	add.w	fp, fp, #1
 800b020:	e7bb      	b.n	800af9a <_printf_float+0x2fe>
 800b022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b026:	4631      	mov	r1, r6
 800b028:	4628      	mov	r0, r5
 800b02a:	47b8      	blx	r7
 800b02c:	3001      	adds	r0, #1
 800b02e:	d1c0      	bne.n	800afb2 <_printf_float+0x316>
 800b030:	e68f      	b.n	800ad52 <_printf_float+0xb6>
 800b032:	9a06      	ldr	r2, [sp, #24]
 800b034:	464b      	mov	r3, r9
 800b036:	4442      	add	r2, r8
 800b038:	4631      	mov	r1, r6
 800b03a:	4628      	mov	r0, r5
 800b03c:	47b8      	blx	r7
 800b03e:	3001      	adds	r0, #1
 800b040:	d1c3      	bne.n	800afca <_printf_float+0x32e>
 800b042:	e686      	b.n	800ad52 <_printf_float+0xb6>
 800b044:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b048:	f1ba 0f01 	cmp.w	sl, #1
 800b04c:	dc01      	bgt.n	800b052 <_printf_float+0x3b6>
 800b04e:	07db      	lsls	r3, r3, #31
 800b050:	d536      	bpl.n	800b0c0 <_printf_float+0x424>
 800b052:	2301      	movs	r3, #1
 800b054:	4642      	mov	r2, r8
 800b056:	4631      	mov	r1, r6
 800b058:	4628      	mov	r0, r5
 800b05a:	47b8      	blx	r7
 800b05c:	3001      	adds	r0, #1
 800b05e:	f43f ae78 	beq.w	800ad52 <_printf_float+0xb6>
 800b062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b066:	4631      	mov	r1, r6
 800b068:	4628      	mov	r0, r5
 800b06a:	47b8      	blx	r7
 800b06c:	3001      	adds	r0, #1
 800b06e:	f43f ae70 	beq.w	800ad52 <_printf_float+0xb6>
 800b072:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b076:	2200      	movs	r2, #0
 800b078:	2300      	movs	r3, #0
 800b07a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b07e:	f7f5 fd2b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b082:	b9c0      	cbnz	r0, 800b0b6 <_printf_float+0x41a>
 800b084:	4653      	mov	r3, sl
 800b086:	f108 0201 	add.w	r2, r8, #1
 800b08a:	4631      	mov	r1, r6
 800b08c:	4628      	mov	r0, r5
 800b08e:	47b8      	blx	r7
 800b090:	3001      	adds	r0, #1
 800b092:	d10c      	bne.n	800b0ae <_printf_float+0x412>
 800b094:	e65d      	b.n	800ad52 <_printf_float+0xb6>
 800b096:	2301      	movs	r3, #1
 800b098:	465a      	mov	r2, fp
 800b09a:	4631      	mov	r1, r6
 800b09c:	4628      	mov	r0, r5
 800b09e:	47b8      	blx	r7
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	f43f ae56 	beq.w	800ad52 <_printf_float+0xb6>
 800b0a6:	f108 0801 	add.w	r8, r8, #1
 800b0aa:	45d0      	cmp	r8, sl
 800b0ac:	dbf3      	blt.n	800b096 <_printf_float+0x3fa>
 800b0ae:	464b      	mov	r3, r9
 800b0b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b0b4:	e6df      	b.n	800ae76 <_printf_float+0x1da>
 800b0b6:	f04f 0800 	mov.w	r8, #0
 800b0ba:	f104 0b1a 	add.w	fp, r4, #26
 800b0be:	e7f4      	b.n	800b0aa <_printf_float+0x40e>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	4642      	mov	r2, r8
 800b0c4:	e7e1      	b.n	800b08a <_printf_float+0x3ee>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	464a      	mov	r2, r9
 800b0ca:	4631      	mov	r1, r6
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	47b8      	blx	r7
 800b0d0:	3001      	adds	r0, #1
 800b0d2:	f43f ae3e 	beq.w	800ad52 <_printf_float+0xb6>
 800b0d6:	f108 0801 	add.w	r8, r8, #1
 800b0da:	68e3      	ldr	r3, [r4, #12]
 800b0dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b0de:	1a5b      	subs	r3, r3, r1
 800b0e0:	4543      	cmp	r3, r8
 800b0e2:	dcf0      	bgt.n	800b0c6 <_printf_float+0x42a>
 800b0e4:	e6fc      	b.n	800aee0 <_printf_float+0x244>
 800b0e6:	f04f 0800 	mov.w	r8, #0
 800b0ea:	f104 0919 	add.w	r9, r4, #25
 800b0ee:	e7f4      	b.n	800b0da <_printf_float+0x43e>

0800b0f0 <_printf_common>:
 800b0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f4:	4616      	mov	r6, r2
 800b0f6:	4698      	mov	r8, r3
 800b0f8:	688a      	ldr	r2, [r1, #8]
 800b0fa:	690b      	ldr	r3, [r1, #16]
 800b0fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b100:	4293      	cmp	r3, r2
 800b102:	bfb8      	it	lt
 800b104:	4613      	movlt	r3, r2
 800b106:	6033      	str	r3, [r6, #0]
 800b108:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b10c:	4607      	mov	r7, r0
 800b10e:	460c      	mov	r4, r1
 800b110:	b10a      	cbz	r2, 800b116 <_printf_common+0x26>
 800b112:	3301      	adds	r3, #1
 800b114:	6033      	str	r3, [r6, #0]
 800b116:	6823      	ldr	r3, [r4, #0]
 800b118:	0699      	lsls	r1, r3, #26
 800b11a:	bf42      	ittt	mi
 800b11c:	6833      	ldrmi	r3, [r6, #0]
 800b11e:	3302      	addmi	r3, #2
 800b120:	6033      	strmi	r3, [r6, #0]
 800b122:	6825      	ldr	r5, [r4, #0]
 800b124:	f015 0506 	ands.w	r5, r5, #6
 800b128:	d106      	bne.n	800b138 <_printf_common+0x48>
 800b12a:	f104 0a19 	add.w	sl, r4, #25
 800b12e:	68e3      	ldr	r3, [r4, #12]
 800b130:	6832      	ldr	r2, [r6, #0]
 800b132:	1a9b      	subs	r3, r3, r2
 800b134:	42ab      	cmp	r3, r5
 800b136:	dc26      	bgt.n	800b186 <_printf_common+0x96>
 800b138:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b13c:	6822      	ldr	r2, [r4, #0]
 800b13e:	3b00      	subs	r3, #0
 800b140:	bf18      	it	ne
 800b142:	2301      	movne	r3, #1
 800b144:	0692      	lsls	r2, r2, #26
 800b146:	d42b      	bmi.n	800b1a0 <_printf_common+0xb0>
 800b148:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b14c:	4641      	mov	r1, r8
 800b14e:	4638      	mov	r0, r7
 800b150:	47c8      	blx	r9
 800b152:	3001      	adds	r0, #1
 800b154:	d01e      	beq.n	800b194 <_printf_common+0xa4>
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	6922      	ldr	r2, [r4, #16]
 800b15a:	f003 0306 	and.w	r3, r3, #6
 800b15e:	2b04      	cmp	r3, #4
 800b160:	bf02      	ittt	eq
 800b162:	68e5      	ldreq	r5, [r4, #12]
 800b164:	6833      	ldreq	r3, [r6, #0]
 800b166:	1aed      	subeq	r5, r5, r3
 800b168:	68a3      	ldr	r3, [r4, #8]
 800b16a:	bf0c      	ite	eq
 800b16c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b170:	2500      	movne	r5, #0
 800b172:	4293      	cmp	r3, r2
 800b174:	bfc4      	itt	gt
 800b176:	1a9b      	subgt	r3, r3, r2
 800b178:	18ed      	addgt	r5, r5, r3
 800b17a:	2600      	movs	r6, #0
 800b17c:	341a      	adds	r4, #26
 800b17e:	42b5      	cmp	r5, r6
 800b180:	d11a      	bne.n	800b1b8 <_printf_common+0xc8>
 800b182:	2000      	movs	r0, #0
 800b184:	e008      	b.n	800b198 <_printf_common+0xa8>
 800b186:	2301      	movs	r3, #1
 800b188:	4652      	mov	r2, sl
 800b18a:	4641      	mov	r1, r8
 800b18c:	4638      	mov	r0, r7
 800b18e:	47c8      	blx	r9
 800b190:	3001      	adds	r0, #1
 800b192:	d103      	bne.n	800b19c <_printf_common+0xac>
 800b194:	f04f 30ff 	mov.w	r0, #4294967295
 800b198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b19c:	3501      	adds	r5, #1
 800b19e:	e7c6      	b.n	800b12e <_printf_common+0x3e>
 800b1a0:	18e1      	adds	r1, r4, r3
 800b1a2:	1c5a      	adds	r2, r3, #1
 800b1a4:	2030      	movs	r0, #48	@ 0x30
 800b1a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1aa:	4422      	add	r2, r4
 800b1ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b1b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1b4:	3302      	adds	r3, #2
 800b1b6:	e7c7      	b.n	800b148 <_printf_common+0x58>
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	4622      	mov	r2, r4
 800b1bc:	4641      	mov	r1, r8
 800b1be:	4638      	mov	r0, r7
 800b1c0:	47c8      	blx	r9
 800b1c2:	3001      	adds	r0, #1
 800b1c4:	d0e6      	beq.n	800b194 <_printf_common+0xa4>
 800b1c6:	3601      	adds	r6, #1
 800b1c8:	e7d9      	b.n	800b17e <_printf_common+0x8e>
	...

0800b1cc <_printf_i>:
 800b1cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d0:	7e0f      	ldrb	r7, [r1, #24]
 800b1d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1d4:	2f78      	cmp	r7, #120	@ 0x78
 800b1d6:	4691      	mov	r9, r2
 800b1d8:	4680      	mov	r8, r0
 800b1da:	460c      	mov	r4, r1
 800b1dc:	469a      	mov	sl, r3
 800b1de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b1e2:	d807      	bhi.n	800b1f4 <_printf_i+0x28>
 800b1e4:	2f62      	cmp	r7, #98	@ 0x62
 800b1e6:	d80a      	bhi.n	800b1fe <_printf_i+0x32>
 800b1e8:	2f00      	cmp	r7, #0
 800b1ea:	f000 80d2 	beq.w	800b392 <_printf_i+0x1c6>
 800b1ee:	2f58      	cmp	r7, #88	@ 0x58
 800b1f0:	f000 80b9 	beq.w	800b366 <_printf_i+0x19a>
 800b1f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b1fc:	e03a      	b.n	800b274 <_printf_i+0xa8>
 800b1fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b202:	2b15      	cmp	r3, #21
 800b204:	d8f6      	bhi.n	800b1f4 <_printf_i+0x28>
 800b206:	a101      	add	r1, pc, #4	@ (adr r1, 800b20c <_printf_i+0x40>)
 800b208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b20c:	0800b265 	.word	0x0800b265
 800b210:	0800b279 	.word	0x0800b279
 800b214:	0800b1f5 	.word	0x0800b1f5
 800b218:	0800b1f5 	.word	0x0800b1f5
 800b21c:	0800b1f5 	.word	0x0800b1f5
 800b220:	0800b1f5 	.word	0x0800b1f5
 800b224:	0800b279 	.word	0x0800b279
 800b228:	0800b1f5 	.word	0x0800b1f5
 800b22c:	0800b1f5 	.word	0x0800b1f5
 800b230:	0800b1f5 	.word	0x0800b1f5
 800b234:	0800b1f5 	.word	0x0800b1f5
 800b238:	0800b379 	.word	0x0800b379
 800b23c:	0800b2a3 	.word	0x0800b2a3
 800b240:	0800b333 	.word	0x0800b333
 800b244:	0800b1f5 	.word	0x0800b1f5
 800b248:	0800b1f5 	.word	0x0800b1f5
 800b24c:	0800b39b 	.word	0x0800b39b
 800b250:	0800b1f5 	.word	0x0800b1f5
 800b254:	0800b2a3 	.word	0x0800b2a3
 800b258:	0800b1f5 	.word	0x0800b1f5
 800b25c:	0800b1f5 	.word	0x0800b1f5
 800b260:	0800b33b 	.word	0x0800b33b
 800b264:	6833      	ldr	r3, [r6, #0]
 800b266:	1d1a      	adds	r2, r3, #4
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	6032      	str	r2, [r6, #0]
 800b26c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b270:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b274:	2301      	movs	r3, #1
 800b276:	e09d      	b.n	800b3b4 <_printf_i+0x1e8>
 800b278:	6833      	ldr	r3, [r6, #0]
 800b27a:	6820      	ldr	r0, [r4, #0]
 800b27c:	1d19      	adds	r1, r3, #4
 800b27e:	6031      	str	r1, [r6, #0]
 800b280:	0606      	lsls	r6, r0, #24
 800b282:	d501      	bpl.n	800b288 <_printf_i+0xbc>
 800b284:	681d      	ldr	r5, [r3, #0]
 800b286:	e003      	b.n	800b290 <_printf_i+0xc4>
 800b288:	0645      	lsls	r5, r0, #25
 800b28a:	d5fb      	bpl.n	800b284 <_printf_i+0xb8>
 800b28c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b290:	2d00      	cmp	r5, #0
 800b292:	da03      	bge.n	800b29c <_printf_i+0xd0>
 800b294:	232d      	movs	r3, #45	@ 0x2d
 800b296:	426d      	negs	r5, r5
 800b298:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b29c:	4859      	ldr	r0, [pc, #356]	@ (800b404 <_printf_i+0x238>)
 800b29e:	230a      	movs	r3, #10
 800b2a0:	e011      	b.n	800b2c6 <_printf_i+0xfa>
 800b2a2:	6821      	ldr	r1, [r4, #0]
 800b2a4:	6833      	ldr	r3, [r6, #0]
 800b2a6:	0608      	lsls	r0, r1, #24
 800b2a8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2ac:	d402      	bmi.n	800b2b4 <_printf_i+0xe8>
 800b2ae:	0649      	lsls	r1, r1, #25
 800b2b0:	bf48      	it	mi
 800b2b2:	b2ad      	uxthmi	r5, r5
 800b2b4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2b6:	4853      	ldr	r0, [pc, #332]	@ (800b404 <_printf_i+0x238>)
 800b2b8:	6033      	str	r3, [r6, #0]
 800b2ba:	bf14      	ite	ne
 800b2bc:	230a      	movne	r3, #10
 800b2be:	2308      	moveq	r3, #8
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b2c6:	6866      	ldr	r6, [r4, #4]
 800b2c8:	60a6      	str	r6, [r4, #8]
 800b2ca:	2e00      	cmp	r6, #0
 800b2cc:	bfa2      	ittt	ge
 800b2ce:	6821      	ldrge	r1, [r4, #0]
 800b2d0:	f021 0104 	bicge.w	r1, r1, #4
 800b2d4:	6021      	strge	r1, [r4, #0]
 800b2d6:	b90d      	cbnz	r5, 800b2dc <_printf_i+0x110>
 800b2d8:	2e00      	cmp	r6, #0
 800b2da:	d04b      	beq.n	800b374 <_printf_i+0x1a8>
 800b2dc:	4616      	mov	r6, r2
 800b2de:	fbb5 f1f3 	udiv	r1, r5, r3
 800b2e2:	fb03 5711 	mls	r7, r3, r1, r5
 800b2e6:	5dc7      	ldrb	r7, [r0, r7]
 800b2e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b2ec:	462f      	mov	r7, r5
 800b2ee:	42bb      	cmp	r3, r7
 800b2f0:	460d      	mov	r5, r1
 800b2f2:	d9f4      	bls.n	800b2de <_printf_i+0x112>
 800b2f4:	2b08      	cmp	r3, #8
 800b2f6:	d10b      	bne.n	800b310 <_printf_i+0x144>
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	07df      	lsls	r7, r3, #31
 800b2fc:	d508      	bpl.n	800b310 <_printf_i+0x144>
 800b2fe:	6923      	ldr	r3, [r4, #16]
 800b300:	6861      	ldr	r1, [r4, #4]
 800b302:	4299      	cmp	r1, r3
 800b304:	bfde      	ittt	le
 800b306:	2330      	movle	r3, #48	@ 0x30
 800b308:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b30c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b310:	1b92      	subs	r2, r2, r6
 800b312:	6122      	str	r2, [r4, #16]
 800b314:	f8cd a000 	str.w	sl, [sp]
 800b318:	464b      	mov	r3, r9
 800b31a:	aa03      	add	r2, sp, #12
 800b31c:	4621      	mov	r1, r4
 800b31e:	4640      	mov	r0, r8
 800b320:	f7ff fee6 	bl	800b0f0 <_printf_common>
 800b324:	3001      	adds	r0, #1
 800b326:	d14a      	bne.n	800b3be <_printf_i+0x1f2>
 800b328:	f04f 30ff 	mov.w	r0, #4294967295
 800b32c:	b004      	add	sp, #16
 800b32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	f043 0320 	orr.w	r3, r3, #32
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	4833      	ldr	r0, [pc, #204]	@ (800b408 <_printf_i+0x23c>)
 800b33c:	2778      	movs	r7, #120	@ 0x78
 800b33e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	6831      	ldr	r1, [r6, #0]
 800b346:	061f      	lsls	r7, r3, #24
 800b348:	f851 5b04 	ldr.w	r5, [r1], #4
 800b34c:	d402      	bmi.n	800b354 <_printf_i+0x188>
 800b34e:	065f      	lsls	r7, r3, #25
 800b350:	bf48      	it	mi
 800b352:	b2ad      	uxthmi	r5, r5
 800b354:	6031      	str	r1, [r6, #0]
 800b356:	07d9      	lsls	r1, r3, #31
 800b358:	bf44      	itt	mi
 800b35a:	f043 0320 	orrmi.w	r3, r3, #32
 800b35e:	6023      	strmi	r3, [r4, #0]
 800b360:	b11d      	cbz	r5, 800b36a <_printf_i+0x19e>
 800b362:	2310      	movs	r3, #16
 800b364:	e7ac      	b.n	800b2c0 <_printf_i+0xf4>
 800b366:	4827      	ldr	r0, [pc, #156]	@ (800b404 <_printf_i+0x238>)
 800b368:	e7e9      	b.n	800b33e <_printf_i+0x172>
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	f023 0320 	bic.w	r3, r3, #32
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	e7f6      	b.n	800b362 <_printf_i+0x196>
 800b374:	4616      	mov	r6, r2
 800b376:	e7bd      	b.n	800b2f4 <_printf_i+0x128>
 800b378:	6833      	ldr	r3, [r6, #0]
 800b37a:	6825      	ldr	r5, [r4, #0]
 800b37c:	6961      	ldr	r1, [r4, #20]
 800b37e:	1d18      	adds	r0, r3, #4
 800b380:	6030      	str	r0, [r6, #0]
 800b382:	062e      	lsls	r6, r5, #24
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	d501      	bpl.n	800b38c <_printf_i+0x1c0>
 800b388:	6019      	str	r1, [r3, #0]
 800b38a:	e002      	b.n	800b392 <_printf_i+0x1c6>
 800b38c:	0668      	lsls	r0, r5, #25
 800b38e:	d5fb      	bpl.n	800b388 <_printf_i+0x1bc>
 800b390:	8019      	strh	r1, [r3, #0]
 800b392:	2300      	movs	r3, #0
 800b394:	6123      	str	r3, [r4, #16]
 800b396:	4616      	mov	r6, r2
 800b398:	e7bc      	b.n	800b314 <_printf_i+0x148>
 800b39a:	6833      	ldr	r3, [r6, #0]
 800b39c:	1d1a      	adds	r2, r3, #4
 800b39e:	6032      	str	r2, [r6, #0]
 800b3a0:	681e      	ldr	r6, [r3, #0]
 800b3a2:	6862      	ldr	r2, [r4, #4]
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	f7f4 ff1a 	bl	80001e0 <memchr>
 800b3ac:	b108      	cbz	r0, 800b3b2 <_printf_i+0x1e6>
 800b3ae:	1b80      	subs	r0, r0, r6
 800b3b0:	6060      	str	r0, [r4, #4]
 800b3b2:	6863      	ldr	r3, [r4, #4]
 800b3b4:	6123      	str	r3, [r4, #16]
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3bc:	e7aa      	b.n	800b314 <_printf_i+0x148>
 800b3be:	6923      	ldr	r3, [r4, #16]
 800b3c0:	4632      	mov	r2, r6
 800b3c2:	4649      	mov	r1, r9
 800b3c4:	4640      	mov	r0, r8
 800b3c6:	47d0      	blx	sl
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	d0ad      	beq.n	800b328 <_printf_i+0x15c>
 800b3cc:	6823      	ldr	r3, [r4, #0]
 800b3ce:	079b      	lsls	r3, r3, #30
 800b3d0:	d413      	bmi.n	800b3fa <_printf_i+0x22e>
 800b3d2:	68e0      	ldr	r0, [r4, #12]
 800b3d4:	9b03      	ldr	r3, [sp, #12]
 800b3d6:	4298      	cmp	r0, r3
 800b3d8:	bfb8      	it	lt
 800b3da:	4618      	movlt	r0, r3
 800b3dc:	e7a6      	b.n	800b32c <_printf_i+0x160>
 800b3de:	2301      	movs	r3, #1
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	4649      	mov	r1, r9
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	47d0      	blx	sl
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	d09d      	beq.n	800b328 <_printf_i+0x15c>
 800b3ec:	3501      	adds	r5, #1
 800b3ee:	68e3      	ldr	r3, [r4, #12]
 800b3f0:	9903      	ldr	r1, [sp, #12]
 800b3f2:	1a5b      	subs	r3, r3, r1
 800b3f4:	42ab      	cmp	r3, r5
 800b3f6:	dcf2      	bgt.n	800b3de <_printf_i+0x212>
 800b3f8:	e7eb      	b.n	800b3d2 <_printf_i+0x206>
 800b3fa:	2500      	movs	r5, #0
 800b3fc:	f104 0619 	add.w	r6, r4, #25
 800b400:	e7f5      	b.n	800b3ee <_printf_i+0x222>
 800b402:	bf00      	nop
 800b404:	0800f2b6 	.word	0x0800f2b6
 800b408:	0800f2c7 	.word	0x0800f2c7

0800b40c <_scanf_float>:
 800b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	b087      	sub	sp, #28
 800b412:	4617      	mov	r7, r2
 800b414:	9303      	str	r3, [sp, #12]
 800b416:	688b      	ldr	r3, [r1, #8]
 800b418:	1e5a      	subs	r2, r3, #1
 800b41a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b41e:	bf81      	itttt	hi
 800b420:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b424:	eb03 0b05 	addhi.w	fp, r3, r5
 800b428:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b42c:	608b      	strhi	r3, [r1, #8]
 800b42e:	680b      	ldr	r3, [r1, #0]
 800b430:	460a      	mov	r2, r1
 800b432:	f04f 0500 	mov.w	r5, #0
 800b436:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b43a:	f842 3b1c 	str.w	r3, [r2], #28
 800b43e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b442:	4680      	mov	r8, r0
 800b444:	460c      	mov	r4, r1
 800b446:	bf98      	it	ls
 800b448:	f04f 0b00 	movls.w	fp, #0
 800b44c:	9201      	str	r2, [sp, #4]
 800b44e:	4616      	mov	r6, r2
 800b450:	46aa      	mov	sl, r5
 800b452:	46a9      	mov	r9, r5
 800b454:	9502      	str	r5, [sp, #8]
 800b456:	68a2      	ldr	r2, [r4, #8]
 800b458:	b152      	cbz	r2, 800b470 <_scanf_float+0x64>
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	2b4e      	cmp	r3, #78	@ 0x4e
 800b460:	d864      	bhi.n	800b52c <_scanf_float+0x120>
 800b462:	2b40      	cmp	r3, #64	@ 0x40
 800b464:	d83c      	bhi.n	800b4e0 <_scanf_float+0xd4>
 800b466:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b46a:	b2c8      	uxtb	r0, r1
 800b46c:	280e      	cmp	r0, #14
 800b46e:	d93a      	bls.n	800b4e6 <_scanf_float+0xda>
 800b470:	f1b9 0f00 	cmp.w	r9, #0
 800b474:	d003      	beq.n	800b47e <_scanf_float+0x72>
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b47c:	6023      	str	r3, [r4, #0]
 800b47e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b482:	f1ba 0f01 	cmp.w	sl, #1
 800b486:	f200 8117 	bhi.w	800b6b8 <_scanf_float+0x2ac>
 800b48a:	9b01      	ldr	r3, [sp, #4]
 800b48c:	429e      	cmp	r6, r3
 800b48e:	f200 8108 	bhi.w	800b6a2 <_scanf_float+0x296>
 800b492:	2001      	movs	r0, #1
 800b494:	b007      	add	sp, #28
 800b496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b49a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b49e:	2a0d      	cmp	r2, #13
 800b4a0:	d8e6      	bhi.n	800b470 <_scanf_float+0x64>
 800b4a2:	a101      	add	r1, pc, #4	@ (adr r1, 800b4a8 <_scanf_float+0x9c>)
 800b4a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b4a8:	0800b5ef 	.word	0x0800b5ef
 800b4ac:	0800b471 	.word	0x0800b471
 800b4b0:	0800b471 	.word	0x0800b471
 800b4b4:	0800b471 	.word	0x0800b471
 800b4b8:	0800b64f 	.word	0x0800b64f
 800b4bc:	0800b627 	.word	0x0800b627
 800b4c0:	0800b471 	.word	0x0800b471
 800b4c4:	0800b471 	.word	0x0800b471
 800b4c8:	0800b5fd 	.word	0x0800b5fd
 800b4cc:	0800b471 	.word	0x0800b471
 800b4d0:	0800b471 	.word	0x0800b471
 800b4d4:	0800b471 	.word	0x0800b471
 800b4d8:	0800b471 	.word	0x0800b471
 800b4dc:	0800b5b5 	.word	0x0800b5b5
 800b4e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b4e4:	e7db      	b.n	800b49e <_scanf_float+0x92>
 800b4e6:	290e      	cmp	r1, #14
 800b4e8:	d8c2      	bhi.n	800b470 <_scanf_float+0x64>
 800b4ea:	a001      	add	r0, pc, #4	@ (adr r0, 800b4f0 <_scanf_float+0xe4>)
 800b4ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b4f0:	0800b5a5 	.word	0x0800b5a5
 800b4f4:	0800b471 	.word	0x0800b471
 800b4f8:	0800b5a5 	.word	0x0800b5a5
 800b4fc:	0800b63b 	.word	0x0800b63b
 800b500:	0800b471 	.word	0x0800b471
 800b504:	0800b54d 	.word	0x0800b54d
 800b508:	0800b58b 	.word	0x0800b58b
 800b50c:	0800b58b 	.word	0x0800b58b
 800b510:	0800b58b 	.word	0x0800b58b
 800b514:	0800b58b 	.word	0x0800b58b
 800b518:	0800b58b 	.word	0x0800b58b
 800b51c:	0800b58b 	.word	0x0800b58b
 800b520:	0800b58b 	.word	0x0800b58b
 800b524:	0800b58b 	.word	0x0800b58b
 800b528:	0800b58b 	.word	0x0800b58b
 800b52c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b52e:	d809      	bhi.n	800b544 <_scanf_float+0x138>
 800b530:	2b60      	cmp	r3, #96	@ 0x60
 800b532:	d8b2      	bhi.n	800b49a <_scanf_float+0x8e>
 800b534:	2b54      	cmp	r3, #84	@ 0x54
 800b536:	d07b      	beq.n	800b630 <_scanf_float+0x224>
 800b538:	2b59      	cmp	r3, #89	@ 0x59
 800b53a:	d199      	bne.n	800b470 <_scanf_float+0x64>
 800b53c:	2d07      	cmp	r5, #7
 800b53e:	d197      	bne.n	800b470 <_scanf_float+0x64>
 800b540:	2508      	movs	r5, #8
 800b542:	e02c      	b.n	800b59e <_scanf_float+0x192>
 800b544:	2b74      	cmp	r3, #116	@ 0x74
 800b546:	d073      	beq.n	800b630 <_scanf_float+0x224>
 800b548:	2b79      	cmp	r3, #121	@ 0x79
 800b54a:	e7f6      	b.n	800b53a <_scanf_float+0x12e>
 800b54c:	6821      	ldr	r1, [r4, #0]
 800b54e:	05c8      	lsls	r0, r1, #23
 800b550:	d51b      	bpl.n	800b58a <_scanf_float+0x17e>
 800b552:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b556:	6021      	str	r1, [r4, #0]
 800b558:	f109 0901 	add.w	r9, r9, #1
 800b55c:	f1bb 0f00 	cmp.w	fp, #0
 800b560:	d003      	beq.n	800b56a <_scanf_float+0x15e>
 800b562:	3201      	adds	r2, #1
 800b564:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b568:	60a2      	str	r2, [r4, #8]
 800b56a:	68a3      	ldr	r3, [r4, #8]
 800b56c:	3b01      	subs	r3, #1
 800b56e:	60a3      	str	r3, [r4, #8]
 800b570:	6923      	ldr	r3, [r4, #16]
 800b572:	3301      	adds	r3, #1
 800b574:	6123      	str	r3, [r4, #16]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3b01      	subs	r3, #1
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	607b      	str	r3, [r7, #4]
 800b57e:	f340 8087 	ble.w	800b690 <_scanf_float+0x284>
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	3301      	adds	r3, #1
 800b586:	603b      	str	r3, [r7, #0]
 800b588:	e765      	b.n	800b456 <_scanf_float+0x4a>
 800b58a:	eb1a 0105 	adds.w	r1, sl, r5
 800b58e:	f47f af6f 	bne.w	800b470 <_scanf_float+0x64>
 800b592:	6822      	ldr	r2, [r4, #0]
 800b594:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b598:	6022      	str	r2, [r4, #0]
 800b59a:	460d      	mov	r5, r1
 800b59c:	468a      	mov	sl, r1
 800b59e:	f806 3b01 	strb.w	r3, [r6], #1
 800b5a2:	e7e2      	b.n	800b56a <_scanf_float+0x15e>
 800b5a4:	6822      	ldr	r2, [r4, #0]
 800b5a6:	0610      	lsls	r0, r2, #24
 800b5a8:	f57f af62 	bpl.w	800b470 <_scanf_float+0x64>
 800b5ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b5b0:	6022      	str	r2, [r4, #0]
 800b5b2:	e7f4      	b.n	800b59e <_scanf_float+0x192>
 800b5b4:	f1ba 0f00 	cmp.w	sl, #0
 800b5b8:	d10e      	bne.n	800b5d8 <_scanf_float+0x1cc>
 800b5ba:	f1b9 0f00 	cmp.w	r9, #0
 800b5be:	d10e      	bne.n	800b5de <_scanf_float+0x1d2>
 800b5c0:	6822      	ldr	r2, [r4, #0]
 800b5c2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b5c6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b5ca:	d108      	bne.n	800b5de <_scanf_float+0x1d2>
 800b5cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b5d0:	6022      	str	r2, [r4, #0]
 800b5d2:	f04f 0a01 	mov.w	sl, #1
 800b5d6:	e7e2      	b.n	800b59e <_scanf_float+0x192>
 800b5d8:	f1ba 0f02 	cmp.w	sl, #2
 800b5dc:	d055      	beq.n	800b68a <_scanf_float+0x27e>
 800b5de:	2d01      	cmp	r5, #1
 800b5e0:	d002      	beq.n	800b5e8 <_scanf_float+0x1dc>
 800b5e2:	2d04      	cmp	r5, #4
 800b5e4:	f47f af44 	bne.w	800b470 <_scanf_float+0x64>
 800b5e8:	3501      	adds	r5, #1
 800b5ea:	b2ed      	uxtb	r5, r5
 800b5ec:	e7d7      	b.n	800b59e <_scanf_float+0x192>
 800b5ee:	f1ba 0f01 	cmp.w	sl, #1
 800b5f2:	f47f af3d 	bne.w	800b470 <_scanf_float+0x64>
 800b5f6:	f04f 0a02 	mov.w	sl, #2
 800b5fa:	e7d0      	b.n	800b59e <_scanf_float+0x192>
 800b5fc:	b97d      	cbnz	r5, 800b61e <_scanf_float+0x212>
 800b5fe:	f1b9 0f00 	cmp.w	r9, #0
 800b602:	f47f af38 	bne.w	800b476 <_scanf_float+0x6a>
 800b606:	6822      	ldr	r2, [r4, #0]
 800b608:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b60c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b610:	f040 8108 	bne.w	800b824 <_scanf_float+0x418>
 800b614:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b618:	6022      	str	r2, [r4, #0]
 800b61a:	2501      	movs	r5, #1
 800b61c:	e7bf      	b.n	800b59e <_scanf_float+0x192>
 800b61e:	2d03      	cmp	r5, #3
 800b620:	d0e2      	beq.n	800b5e8 <_scanf_float+0x1dc>
 800b622:	2d05      	cmp	r5, #5
 800b624:	e7de      	b.n	800b5e4 <_scanf_float+0x1d8>
 800b626:	2d02      	cmp	r5, #2
 800b628:	f47f af22 	bne.w	800b470 <_scanf_float+0x64>
 800b62c:	2503      	movs	r5, #3
 800b62e:	e7b6      	b.n	800b59e <_scanf_float+0x192>
 800b630:	2d06      	cmp	r5, #6
 800b632:	f47f af1d 	bne.w	800b470 <_scanf_float+0x64>
 800b636:	2507      	movs	r5, #7
 800b638:	e7b1      	b.n	800b59e <_scanf_float+0x192>
 800b63a:	6822      	ldr	r2, [r4, #0]
 800b63c:	0591      	lsls	r1, r2, #22
 800b63e:	f57f af17 	bpl.w	800b470 <_scanf_float+0x64>
 800b642:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b646:	6022      	str	r2, [r4, #0]
 800b648:	f8cd 9008 	str.w	r9, [sp, #8]
 800b64c:	e7a7      	b.n	800b59e <_scanf_float+0x192>
 800b64e:	6822      	ldr	r2, [r4, #0]
 800b650:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b654:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b658:	d006      	beq.n	800b668 <_scanf_float+0x25c>
 800b65a:	0550      	lsls	r0, r2, #21
 800b65c:	f57f af08 	bpl.w	800b470 <_scanf_float+0x64>
 800b660:	f1b9 0f00 	cmp.w	r9, #0
 800b664:	f000 80de 	beq.w	800b824 <_scanf_float+0x418>
 800b668:	0591      	lsls	r1, r2, #22
 800b66a:	bf58      	it	pl
 800b66c:	9902      	ldrpl	r1, [sp, #8]
 800b66e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b672:	bf58      	it	pl
 800b674:	eba9 0101 	subpl.w	r1, r9, r1
 800b678:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b67c:	bf58      	it	pl
 800b67e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b682:	6022      	str	r2, [r4, #0]
 800b684:	f04f 0900 	mov.w	r9, #0
 800b688:	e789      	b.n	800b59e <_scanf_float+0x192>
 800b68a:	f04f 0a03 	mov.w	sl, #3
 800b68e:	e786      	b.n	800b59e <_scanf_float+0x192>
 800b690:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b694:	4639      	mov	r1, r7
 800b696:	4640      	mov	r0, r8
 800b698:	4798      	blx	r3
 800b69a:	2800      	cmp	r0, #0
 800b69c:	f43f aedb 	beq.w	800b456 <_scanf_float+0x4a>
 800b6a0:	e6e6      	b.n	800b470 <_scanf_float+0x64>
 800b6a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6aa:	463a      	mov	r2, r7
 800b6ac:	4640      	mov	r0, r8
 800b6ae:	4798      	blx	r3
 800b6b0:	6923      	ldr	r3, [r4, #16]
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	6123      	str	r3, [r4, #16]
 800b6b6:	e6e8      	b.n	800b48a <_scanf_float+0x7e>
 800b6b8:	1e6b      	subs	r3, r5, #1
 800b6ba:	2b06      	cmp	r3, #6
 800b6bc:	d824      	bhi.n	800b708 <_scanf_float+0x2fc>
 800b6be:	2d02      	cmp	r5, #2
 800b6c0:	d836      	bhi.n	800b730 <_scanf_float+0x324>
 800b6c2:	9b01      	ldr	r3, [sp, #4]
 800b6c4:	429e      	cmp	r6, r3
 800b6c6:	f67f aee4 	bls.w	800b492 <_scanf_float+0x86>
 800b6ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6d2:	463a      	mov	r2, r7
 800b6d4:	4640      	mov	r0, r8
 800b6d6:	4798      	blx	r3
 800b6d8:	6923      	ldr	r3, [r4, #16]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	6123      	str	r3, [r4, #16]
 800b6de:	e7f0      	b.n	800b6c2 <_scanf_float+0x2b6>
 800b6e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b6e8:	463a      	mov	r2, r7
 800b6ea:	4640      	mov	r0, r8
 800b6ec:	4798      	blx	r3
 800b6ee:	6923      	ldr	r3, [r4, #16]
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	6123      	str	r3, [r4, #16]
 800b6f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6f8:	fa5f fa8a 	uxtb.w	sl, sl
 800b6fc:	f1ba 0f02 	cmp.w	sl, #2
 800b700:	d1ee      	bne.n	800b6e0 <_scanf_float+0x2d4>
 800b702:	3d03      	subs	r5, #3
 800b704:	b2ed      	uxtb	r5, r5
 800b706:	1b76      	subs	r6, r6, r5
 800b708:	6823      	ldr	r3, [r4, #0]
 800b70a:	05da      	lsls	r2, r3, #23
 800b70c:	d530      	bpl.n	800b770 <_scanf_float+0x364>
 800b70e:	055b      	lsls	r3, r3, #21
 800b710:	d511      	bpl.n	800b736 <_scanf_float+0x32a>
 800b712:	9b01      	ldr	r3, [sp, #4]
 800b714:	429e      	cmp	r6, r3
 800b716:	f67f aebc 	bls.w	800b492 <_scanf_float+0x86>
 800b71a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b71e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b722:	463a      	mov	r2, r7
 800b724:	4640      	mov	r0, r8
 800b726:	4798      	blx	r3
 800b728:	6923      	ldr	r3, [r4, #16]
 800b72a:	3b01      	subs	r3, #1
 800b72c:	6123      	str	r3, [r4, #16]
 800b72e:	e7f0      	b.n	800b712 <_scanf_float+0x306>
 800b730:	46aa      	mov	sl, r5
 800b732:	46b3      	mov	fp, r6
 800b734:	e7de      	b.n	800b6f4 <_scanf_float+0x2e8>
 800b736:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b73a:	6923      	ldr	r3, [r4, #16]
 800b73c:	2965      	cmp	r1, #101	@ 0x65
 800b73e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b742:	f106 35ff 	add.w	r5, r6, #4294967295
 800b746:	6123      	str	r3, [r4, #16]
 800b748:	d00c      	beq.n	800b764 <_scanf_float+0x358>
 800b74a:	2945      	cmp	r1, #69	@ 0x45
 800b74c:	d00a      	beq.n	800b764 <_scanf_float+0x358>
 800b74e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b752:	463a      	mov	r2, r7
 800b754:	4640      	mov	r0, r8
 800b756:	4798      	blx	r3
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b75e:	3b01      	subs	r3, #1
 800b760:	1eb5      	subs	r5, r6, #2
 800b762:	6123      	str	r3, [r4, #16]
 800b764:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b768:	463a      	mov	r2, r7
 800b76a:	4640      	mov	r0, r8
 800b76c:	4798      	blx	r3
 800b76e:	462e      	mov	r6, r5
 800b770:	6822      	ldr	r2, [r4, #0]
 800b772:	f012 0210 	ands.w	r2, r2, #16
 800b776:	d001      	beq.n	800b77c <_scanf_float+0x370>
 800b778:	2000      	movs	r0, #0
 800b77a:	e68b      	b.n	800b494 <_scanf_float+0x88>
 800b77c:	7032      	strb	r2, [r6, #0]
 800b77e:	6823      	ldr	r3, [r4, #0]
 800b780:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b788:	d11c      	bne.n	800b7c4 <_scanf_float+0x3b8>
 800b78a:	9b02      	ldr	r3, [sp, #8]
 800b78c:	454b      	cmp	r3, r9
 800b78e:	eba3 0209 	sub.w	r2, r3, r9
 800b792:	d123      	bne.n	800b7dc <_scanf_float+0x3d0>
 800b794:	9901      	ldr	r1, [sp, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	4640      	mov	r0, r8
 800b79a:	f002 fbf9 	bl	800df90 <_strtod_r>
 800b79e:	9b03      	ldr	r3, [sp, #12]
 800b7a0:	6821      	ldr	r1, [r4, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f011 0f02 	tst.w	r1, #2
 800b7a8:	ec57 6b10 	vmov	r6, r7, d0
 800b7ac:	f103 0204 	add.w	r2, r3, #4
 800b7b0:	d01f      	beq.n	800b7f2 <_scanf_float+0x3e6>
 800b7b2:	9903      	ldr	r1, [sp, #12]
 800b7b4:	600a      	str	r2, [r1, #0]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	e9c3 6700 	strd	r6, r7, [r3]
 800b7bc:	68e3      	ldr	r3, [r4, #12]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	60e3      	str	r3, [r4, #12]
 800b7c2:	e7d9      	b.n	800b778 <_scanf_float+0x36c>
 800b7c4:	9b04      	ldr	r3, [sp, #16]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d0e4      	beq.n	800b794 <_scanf_float+0x388>
 800b7ca:	9905      	ldr	r1, [sp, #20]
 800b7cc:	230a      	movs	r3, #10
 800b7ce:	3101      	adds	r1, #1
 800b7d0:	4640      	mov	r0, r8
 800b7d2:	f002 fc5d 	bl	800e090 <_strtol_r>
 800b7d6:	9b04      	ldr	r3, [sp, #16]
 800b7d8:	9e05      	ldr	r6, [sp, #20]
 800b7da:	1ac2      	subs	r2, r0, r3
 800b7dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b7e0:	429e      	cmp	r6, r3
 800b7e2:	bf28      	it	cs
 800b7e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b7e8:	4910      	ldr	r1, [pc, #64]	@ (800b82c <_scanf_float+0x420>)
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f000 f8e4 	bl	800b9b8 <siprintf>
 800b7f0:	e7d0      	b.n	800b794 <_scanf_float+0x388>
 800b7f2:	f011 0f04 	tst.w	r1, #4
 800b7f6:	9903      	ldr	r1, [sp, #12]
 800b7f8:	600a      	str	r2, [r1, #0]
 800b7fa:	d1dc      	bne.n	800b7b6 <_scanf_float+0x3aa>
 800b7fc:	681d      	ldr	r5, [r3, #0]
 800b7fe:	4632      	mov	r2, r6
 800b800:	463b      	mov	r3, r7
 800b802:	4630      	mov	r0, r6
 800b804:	4639      	mov	r1, r7
 800b806:	f7f5 f999 	bl	8000b3c <__aeabi_dcmpun>
 800b80a:	b128      	cbz	r0, 800b818 <_scanf_float+0x40c>
 800b80c:	4808      	ldr	r0, [pc, #32]	@ (800b830 <_scanf_float+0x424>)
 800b80e:	f000 f9b7 	bl	800bb80 <nanf>
 800b812:	ed85 0a00 	vstr	s0, [r5]
 800b816:	e7d1      	b.n	800b7bc <_scanf_float+0x3b0>
 800b818:	4630      	mov	r0, r6
 800b81a:	4639      	mov	r1, r7
 800b81c:	f7f5 f9ec 	bl	8000bf8 <__aeabi_d2f>
 800b820:	6028      	str	r0, [r5, #0]
 800b822:	e7cb      	b.n	800b7bc <_scanf_float+0x3b0>
 800b824:	f04f 0900 	mov.w	r9, #0
 800b828:	e629      	b.n	800b47e <_scanf_float+0x72>
 800b82a:	bf00      	nop
 800b82c:	0800f2d8 	.word	0x0800f2d8
 800b830:	0800f66d 	.word	0x0800f66d

0800b834 <std>:
 800b834:	2300      	movs	r3, #0
 800b836:	b510      	push	{r4, lr}
 800b838:	4604      	mov	r4, r0
 800b83a:	e9c0 3300 	strd	r3, r3, [r0]
 800b83e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b842:	6083      	str	r3, [r0, #8]
 800b844:	8181      	strh	r1, [r0, #12]
 800b846:	6643      	str	r3, [r0, #100]	@ 0x64
 800b848:	81c2      	strh	r2, [r0, #14]
 800b84a:	6183      	str	r3, [r0, #24]
 800b84c:	4619      	mov	r1, r3
 800b84e:	2208      	movs	r2, #8
 800b850:	305c      	adds	r0, #92	@ 0x5c
 800b852:	f000 f914 	bl	800ba7e <memset>
 800b856:	4b0d      	ldr	r3, [pc, #52]	@ (800b88c <std+0x58>)
 800b858:	6263      	str	r3, [r4, #36]	@ 0x24
 800b85a:	4b0d      	ldr	r3, [pc, #52]	@ (800b890 <std+0x5c>)
 800b85c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b85e:	4b0d      	ldr	r3, [pc, #52]	@ (800b894 <std+0x60>)
 800b860:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b862:	4b0d      	ldr	r3, [pc, #52]	@ (800b898 <std+0x64>)
 800b864:	6323      	str	r3, [r4, #48]	@ 0x30
 800b866:	4b0d      	ldr	r3, [pc, #52]	@ (800b89c <std+0x68>)
 800b868:	6224      	str	r4, [r4, #32]
 800b86a:	429c      	cmp	r4, r3
 800b86c:	d006      	beq.n	800b87c <std+0x48>
 800b86e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b872:	4294      	cmp	r4, r2
 800b874:	d002      	beq.n	800b87c <std+0x48>
 800b876:	33d0      	adds	r3, #208	@ 0xd0
 800b878:	429c      	cmp	r4, r3
 800b87a:	d105      	bne.n	800b888 <std+0x54>
 800b87c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b884:	f000 b978 	b.w	800bb78 <__retarget_lock_init_recursive>
 800b888:	bd10      	pop	{r4, pc}
 800b88a:	bf00      	nop
 800b88c:	0800b9f9 	.word	0x0800b9f9
 800b890:	0800ba1b 	.word	0x0800ba1b
 800b894:	0800ba53 	.word	0x0800ba53
 800b898:	0800ba77 	.word	0x0800ba77
 800b89c:	20000a24 	.word	0x20000a24

0800b8a0 <stdio_exit_handler>:
 800b8a0:	4a02      	ldr	r2, [pc, #8]	@ (800b8ac <stdio_exit_handler+0xc>)
 800b8a2:	4903      	ldr	r1, [pc, #12]	@ (800b8b0 <stdio_exit_handler+0x10>)
 800b8a4:	4803      	ldr	r0, [pc, #12]	@ (800b8b4 <stdio_exit_handler+0x14>)
 800b8a6:	f000 b869 	b.w	800b97c <_fwalk_sglue>
 800b8aa:	bf00      	nop
 800b8ac:	2000000c 	.word	0x2000000c
 800b8b0:	0800e44d 	.word	0x0800e44d
 800b8b4:	2000001c 	.word	0x2000001c

0800b8b8 <cleanup_stdio>:
 800b8b8:	6841      	ldr	r1, [r0, #4]
 800b8ba:	4b0c      	ldr	r3, [pc, #48]	@ (800b8ec <cleanup_stdio+0x34>)
 800b8bc:	4299      	cmp	r1, r3
 800b8be:	b510      	push	{r4, lr}
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	d001      	beq.n	800b8c8 <cleanup_stdio+0x10>
 800b8c4:	f002 fdc2 	bl	800e44c <_fflush_r>
 800b8c8:	68a1      	ldr	r1, [r4, #8]
 800b8ca:	4b09      	ldr	r3, [pc, #36]	@ (800b8f0 <cleanup_stdio+0x38>)
 800b8cc:	4299      	cmp	r1, r3
 800b8ce:	d002      	beq.n	800b8d6 <cleanup_stdio+0x1e>
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f002 fdbb 	bl	800e44c <_fflush_r>
 800b8d6:	68e1      	ldr	r1, [r4, #12]
 800b8d8:	4b06      	ldr	r3, [pc, #24]	@ (800b8f4 <cleanup_stdio+0x3c>)
 800b8da:	4299      	cmp	r1, r3
 800b8dc:	d004      	beq.n	800b8e8 <cleanup_stdio+0x30>
 800b8de:	4620      	mov	r0, r4
 800b8e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8e4:	f002 bdb2 	b.w	800e44c <_fflush_r>
 800b8e8:	bd10      	pop	{r4, pc}
 800b8ea:	bf00      	nop
 800b8ec:	20000a24 	.word	0x20000a24
 800b8f0:	20000a8c 	.word	0x20000a8c
 800b8f4:	20000af4 	.word	0x20000af4

0800b8f8 <global_stdio_init.part.0>:
 800b8f8:	b510      	push	{r4, lr}
 800b8fa:	4b0b      	ldr	r3, [pc, #44]	@ (800b928 <global_stdio_init.part.0+0x30>)
 800b8fc:	4c0b      	ldr	r4, [pc, #44]	@ (800b92c <global_stdio_init.part.0+0x34>)
 800b8fe:	4a0c      	ldr	r2, [pc, #48]	@ (800b930 <global_stdio_init.part.0+0x38>)
 800b900:	601a      	str	r2, [r3, #0]
 800b902:	4620      	mov	r0, r4
 800b904:	2200      	movs	r2, #0
 800b906:	2104      	movs	r1, #4
 800b908:	f7ff ff94 	bl	800b834 <std>
 800b90c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b910:	2201      	movs	r2, #1
 800b912:	2109      	movs	r1, #9
 800b914:	f7ff ff8e 	bl	800b834 <std>
 800b918:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b91c:	2202      	movs	r2, #2
 800b91e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b922:	2112      	movs	r1, #18
 800b924:	f7ff bf86 	b.w	800b834 <std>
 800b928:	20000b5c 	.word	0x20000b5c
 800b92c:	20000a24 	.word	0x20000a24
 800b930:	0800b8a1 	.word	0x0800b8a1

0800b934 <__sfp_lock_acquire>:
 800b934:	4801      	ldr	r0, [pc, #4]	@ (800b93c <__sfp_lock_acquire+0x8>)
 800b936:	f000 b920 	b.w	800bb7a <__retarget_lock_acquire_recursive>
 800b93a:	bf00      	nop
 800b93c:	20000b65 	.word	0x20000b65

0800b940 <__sfp_lock_release>:
 800b940:	4801      	ldr	r0, [pc, #4]	@ (800b948 <__sfp_lock_release+0x8>)
 800b942:	f000 b91b 	b.w	800bb7c <__retarget_lock_release_recursive>
 800b946:	bf00      	nop
 800b948:	20000b65 	.word	0x20000b65

0800b94c <__sinit>:
 800b94c:	b510      	push	{r4, lr}
 800b94e:	4604      	mov	r4, r0
 800b950:	f7ff fff0 	bl	800b934 <__sfp_lock_acquire>
 800b954:	6a23      	ldr	r3, [r4, #32]
 800b956:	b11b      	cbz	r3, 800b960 <__sinit+0x14>
 800b958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b95c:	f7ff bff0 	b.w	800b940 <__sfp_lock_release>
 800b960:	4b04      	ldr	r3, [pc, #16]	@ (800b974 <__sinit+0x28>)
 800b962:	6223      	str	r3, [r4, #32]
 800b964:	4b04      	ldr	r3, [pc, #16]	@ (800b978 <__sinit+0x2c>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1f5      	bne.n	800b958 <__sinit+0xc>
 800b96c:	f7ff ffc4 	bl	800b8f8 <global_stdio_init.part.0>
 800b970:	e7f2      	b.n	800b958 <__sinit+0xc>
 800b972:	bf00      	nop
 800b974:	0800b8b9 	.word	0x0800b8b9
 800b978:	20000b5c 	.word	0x20000b5c

0800b97c <_fwalk_sglue>:
 800b97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b980:	4607      	mov	r7, r0
 800b982:	4688      	mov	r8, r1
 800b984:	4614      	mov	r4, r2
 800b986:	2600      	movs	r6, #0
 800b988:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b98c:	f1b9 0901 	subs.w	r9, r9, #1
 800b990:	d505      	bpl.n	800b99e <_fwalk_sglue+0x22>
 800b992:	6824      	ldr	r4, [r4, #0]
 800b994:	2c00      	cmp	r4, #0
 800b996:	d1f7      	bne.n	800b988 <_fwalk_sglue+0xc>
 800b998:	4630      	mov	r0, r6
 800b99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b99e:	89ab      	ldrh	r3, [r5, #12]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d907      	bls.n	800b9b4 <_fwalk_sglue+0x38>
 800b9a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	d003      	beq.n	800b9b4 <_fwalk_sglue+0x38>
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	4638      	mov	r0, r7
 800b9b0:	47c0      	blx	r8
 800b9b2:	4306      	orrs	r6, r0
 800b9b4:	3568      	adds	r5, #104	@ 0x68
 800b9b6:	e7e9      	b.n	800b98c <_fwalk_sglue+0x10>

0800b9b8 <siprintf>:
 800b9b8:	b40e      	push	{r1, r2, r3}
 800b9ba:	b500      	push	{lr}
 800b9bc:	b09c      	sub	sp, #112	@ 0x70
 800b9be:	ab1d      	add	r3, sp, #116	@ 0x74
 800b9c0:	9002      	str	r0, [sp, #8]
 800b9c2:	9006      	str	r0, [sp, #24]
 800b9c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b9c8:	4809      	ldr	r0, [pc, #36]	@ (800b9f0 <siprintf+0x38>)
 800b9ca:	9107      	str	r1, [sp, #28]
 800b9cc:	9104      	str	r1, [sp, #16]
 800b9ce:	4909      	ldr	r1, [pc, #36]	@ (800b9f4 <siprintf+0x3c>)
 800b9d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9d4:	9105      	str	r1, [sp, #20]
 800b9d6:	6800      	ldr	r0, [r0, #0]
 800b9d8:	9301      	str	r3, [sp, #4]
 800b9da:	a902      	add	r1, sp, #8
 800b9dc:	f002 fbb6 	bl	800e14c <_svfiprintf_r>
 800b9e0:	9b02      	ldr	r3, [sp, #8]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	701a      	strb	r2, [r3, #0]
 800b9e6:	b01c      	add	sp, #112	@ 0x70
 800b9e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9ec:	b003      	add	sp, #12
 800b9ee:	4770      	bx	lr
 800b9f0:	20000018 	.word	0x20000018
 800b9f4:	ffff0208 	.word	0xffff0208

0800b9f8 <__sread>:
 800b9f8:	b510      	push	{r4, lr}
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba00:	f000 f86c 	bl	800badc <_read_r>
 800ba04:	2800      	cmp	r0, #0
 800ba06:	bfab      	itete	ge
 800ba08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba0a:	89a3      	ldrhlt	r3, [r4, #12]
 800ba0c:	181b      	addge	r3, r3, r0
 800ba0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba12:	bfac      	ite	ge
 800ba14:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba16:	81a3      	strhlt	r3, [r4, #12]
 800ba18:	bd10      	pop	{r4, pc}

0800ba1a <__swrite>:
 800ba1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1e:	461f      	mov	r7, r3
 800ba20:	898b      	ldrh	r3, [r1, #12]
 800ba22:	05db      	lsls	r3, r3, #23
 800ba24:	4605      	mov	r5, r0
 800ba26:	460c      	mov	r4, r1
 800ba28:	4616      	mov	r6, r2
 800ba2a:	d505      	bpl.n	800ba38 <__swrite+0x1e>
 800ba2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba30:	2302      	movs	r3, #2
 800ba32:	2200      	movs	r2, #0
 800ba34:	f000 f840 	bl	800bab8 <_lseek_r>
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba42:	81a3      	strh	r3, [r4, #12]
 800ba44:	4632      	mov	r2, r6
 800ba46:	463b      	mov	r3, r7
 800ba48:	4628      	mov	r0, r5
 800ba4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4e:	f000 b857 	b.w	800bb00 <_write_r>

0800ba52 <__sseek>:
 800ba52:	b510      	push	{r4, lr}
 800ba54:	460c      	mov	r4, r1
 800ba56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba5a:	f000 f82d 	bl	800bab8 <_lseek_r>
 800ba5e:	1c43      	adds	r3, r0, #1
 800ba60:	89a3      	ldrh	r3, [r4, #12]
 800ba62:	bf15      	itete	ne
 800ba64:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba6e:	81a3      	strheq	r3, [r4, #12]
 800ba70:	bf18      	it	ne
 800ba72:	81a3      	strhne	r3, [r4, #12]
 800ba74:	bd10      	pop	{r4, pc}

0800ba76 <__sclose>:
 800ba76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba7a:	f000 b80d 	b.w	800ba98 <_close_r>

0800ba7e <memset>:
 800ba7e:	4402      	add	r2, r0
 800ba80:	4603      	mov	r3, r0
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d100      	bne.n	800ba88 <memset+0xa>
 800ba86:	4770      	bx	lr
 800ba88:	f803 1b01 	strb.w	r1, [r3], #1
 800ba8c:	e7f9      	b.n	800ba82 <memset+0x4>
	...

0800ba90 <_localeconv_r>:
 800ba90:	4800      	ldr	r0, [pc, #0]	@ (800ba94 <_localeconv_r+0x4>)
 800ba92:	4770      	bx	lr
 800ba94:	20000158 	.word	0x20000158

0800ba98 <_close_r>:
 800ba98:	b538      	push	{r3, r4, r5, lr}
 800ba9a:	4d06      	ldr	r5, [pc, #24]	@ (800bab4 <_close_r+0x1c>)
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	4604      	mov	r4, r0
 800baa0:	4608      	mov	r0, r1
 800baa2:	602b      	str	r3, [r5, #0]
 800baa4:	f7f7 fa1e 	bl	8002ee4 <_close>
 800baa8:	1c43      	adds	r3, r0, #1
 800baaa:	d102      	bne.n	800bab2 <_close_r+0x1a>
 800baac:	682b      	ldr	r3, [r5, #0]
 800baae:	b103      	cbz	r3, 800bab2 <_close_r+0x1a>
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	bd38      	pop	{r3, r4, r5, pc}
 800bab4:	20000b60 	.word	0x20000b60

0800bab8 <_lseek_r>:
 800bab8:	b538      	push	{r3, r4, r5, lr}
 800baba:	4d07      	ldr	r5, [pc, #28]	@ (800bad8 <_lseek_r+0x20>)
 800babc:	4604      	mov	r4, r0
 800babe:	4608      	mov	r0, r1
 800bac0:	4611      	mov	r1, r2
 800bac2:	2200      	movs	r2, #0
 800bac4:	602a      	str	r2, [r5, #0]
 800bac6:	461a      	mov	r2, r3
 800bac8:	f7f7 fa33 	bl	8002f32 <_lseek>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d102      	bne.n	800bad6 <_lseek_r+0x1e>
 800bad0:	682b      	ldr	r3, [r5, #0]
 800bad2:	b103      	cbz	r3, 800bad6 <_lseek_r+0x1e>
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	bd38      	pop	{r3, r4, r5, pc}
 800bad8:	20000b60 	.word	0x20000b60

0800badc <_read_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	4d07      	ldr	r5, [pc, #28]	@ (800bafc <_read_r+0x20>)
 800bae0:	4604      	mov	r4, r0
 800bae2:	4608      	mov	r0, r1
 800bae4:	4611      	mov	r1, r2
 800bae6:	2200      	movs	r2, #0
 800bae8:	602a      	str	r2, [r5, #0]
 800baea:	461a      	mov	r2, r3
 800baec:	f7f7 f9c1 	bl	8002e72 <_read>
 800baf0:	1c43      	adds	r3, r0, #1
 800baf2:	d102      	bne.n	800bafa <_read_r+0x1e>
 800baf4:	682b      	ldr	r3, [r5, #0]
 800baf6:	b103      	cbz	r3, 800bafa <_read_r+0x1e>
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	bd38      	pop	{r3, r4, r5, pc}
 800bafc:	20000b60 	.word	0x20000b60

0800bb00 <_write_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4d07      	ldr	r5, [pc, #28]	@ (800bb20 <_write_r+0x20>)
 800bb04:	4604      	mov	r4, r0
 800bb06:	4608      	mov	r0, r1
 800bb08:	4611      	mov	r1, r2
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	602a      	str	r2, [r5, #0]
 800bb0e:	461a      	mov	r2, r3
 800bb10:	f7f7 f9cc 	bl	8002eac <_write>
 800bb14:	1c43      	adds	r3, r0, #1
 800bb16:	d102      	bne.n	800bb1e <_write_r+0x1e>
 800bb18:	682b      	ldr	r3, [r5, #0]
 800bb1a:	b103      	cbz	r3, 800bb1e <_write_r+0x1e>
 800bb1c:	6023      	str	r3, [r4, #0]
 800bb1e:	bd38      	pop	{r3, r4, r5, pc}
 800bb20:	20000b60 	.word	0x20000b60

0800bb24 <__errno>:
 800bb24:	4b01      	ldr	r3, [pc, #4]	@ (800bb2c <__errno+0x8>)
 800bb26:	6818      	ldr	r0, [r3, #0]
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	20000018 	.word	0x20000018

0800bb30 <__libc_init_array>:
 800bb30:	b570      	push	{r4, r5, r6, lr}
 800bb32:	4d0d      	ldr	r5, [pc, #52]	@ (800bb68 <__libc_init_array+0x38>)
 800bb34:	4c0d      	ldr	r4, [pc, #52]	@ (800bb6c <__libc_init_array+0x3c>)
 800bb36:	1b64      	subs	r4, r4, r5
 800bb38:	10a4      	asrs	r4, r4, #2
 800bb3a:	2600      	movs	r6, #0
 800bb3c:	42a6      	cmp	r6, r4
 800bb3e:	d109      	bne.n	800bb54 <__libc_init_array+0x24>
 800bb40:	4d0b      	ldr	r5, [pc, #44]	@ (800bb70 <__libc_init_array+0x40>)
 800bb42:	4c0c      	ldr	r4, [pc, #48]	@ (800bb74 <__libc_init_array+0x44>)
 800bb44:	f003 fb72 	bl	800f22c <_init>
 800bb48:	1b64      	subs	r4, r4, r5
 800bb4a:	10a4      	asrs	r4, r4, #2
 800bb4c:	2600      	movs	r6, #0
 800bb4e:	42a6      	cmp	r6, r4
 800bb50:	d105      	bne.n	800bb5e <__libc_init_array+0x2e>
 800bb52:	bd70      	pop	{r4, r5, r6, pc}
 800bb54:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb58:	4798      	blx	r3
 800bb5a:	3601      	adds	r6, #1
 800bb5c:	e7ee      	b.n	800bb3c <__libc_init_array+0xc>
 800bb5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb62:	4798      	blx	r3
 800bb64:	3601      	adds	r6, #1
 800bb66:	e7f2      	b.n	800bb4e <__libc_init_array+0x1e>
 800bb68:	0800f6d8 	.word	0x0800f6d8
 800bb6c:	0800f6d8 	.word	0x0800f6d8
 800bb70:	0800f6d8 	.word	0x0800f6d8
 800bb74:	0800f6dc 	.word	0x0800f6dc

0800bb78 <__retarget_lock_init_recursive>:
 800bb78:	4770      	bx	lr

0800bb7a <__retarget_lock_acquire_recursive>:
 800bb7a:	4770      	bx	lr

0800bb7c <__retarget_lock_release_recursive>:
 800bb7c:	4770      	bx	lr
	...

0800bb80 <nanf>:
 800bb80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bb88 <nanf+0x8>
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	7fc00000 	.word	0x7fc00000

0800bb8c <quorem>:
 800bb8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb90:	6903      	ldr	r3, [r0, #16]
 800bb92:	690c      	ldr	r4, [r1, #16]
 800bb94:	42a3      	cmp	r3, r4
 800bb96:	4607      	mov	r7, r0
 800bb98:	db7e      	blt.n	800bc98 <quorem+0x10c>
 800bb9a:	3c01      	subs	r4, #1
 800bb9c:	f101 0814 	add.w	r8, r1, #20
 800bba0:	00a3      	lsls	r3, r4, #2
 800bba2:	f100 0514 	add.w	r5, r0, #20
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbac:	9301      	str	r3, [sp, #4]
 800bbae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bbb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbbe:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbc2:	d32e      	bcc.n	800bc22 <quorem+0x96>
 800bbc4:	f04f 0a00 	mov.w	sl, #0
 800bbc8:	46c4      	mov	ip, r8
 800bbca:	46ae      	mov	lr, r5
 800bbcc:	46d3      	mov	fp, sl
 800bbce:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bbd2:	b298      	uxth	r0, r3
 800bbd4:	fb06 a000 	mla	r0, r6, r0, sl
 800bbd8:	0c02      	lsrs	r2, r0, #16
 800bbda:	0c1b      	lsrs	r3, r3, #16
 800bbdc:	fb06 2303 	mla	r3, r6, r3, r2
 800bbe0:	f8de 2000 	ldr.w	r2, [lr]
 800bbe4:	b280      	uxth	r0, r0
 800bbe6:	b292      	uxth	r2, r2
 800bbe8:	1a12      	subs	r2, r2, r0
 800bbea:	445a      	add	r2, fp
 800bbec:	f8de 0000 	ldr.w	r0, [lr]
 800bbf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bbfa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bbfe:	b292      	uxth	r2, r2
 800bc00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc04:	45e1      	cmp	r9, ip
 800bc06:	f84e 2b04 	str.w	r2, [lr], #4
 800bc0a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc0e:	d2de      	bcs.n	800bbce <quorem+0x42>
 800bc10:	9b00      	ldr	r3, [sp, #0]
 800bc12:	58eb      	ldr	r3, [r5, r3]
 800bc14:	b92b      	cbnz	r3, 800bc22 <quorem+0x96>
 800bc16:	9b01      	ldr	r3, [sp, #4]
 800bc18:	3b04      	subs	r3, #4
 800bc1a:	429d      	cmp	r5, r3
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	d32f      	bcc.n	800bc80 <quorem+0xf4>
 800bc20:	613c      	str	r4, [r7, #16]
 800bc22:	4638      	mov	r0, r7
 800bc24:	f001 f9c4 	bl	800cfb0 <__mcmp>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	db25      	blt.n	800bc78 <quorem+0xec>
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	2000      	movs	r0, #0
 800bc30:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc34:	f8d1 c000 	ldr.w	ip, [r1]
 800bc38:	fa1f fe82 	uxth.w	lr, r2
 800bc3c:	fa1f f38c 	uxth.w	r3, ip
 800bc40:	eba3 030e 	sub.w	r3, r3, lr
 800bc44:	4403      	add	r3, r0
 800bc46:	0c12      	lsrs	r2, r2, #16
 800bc48:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bc4c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc56:	45c1      	cmp	r9, r8
 800bc58:	f841 3b04 	str.w	r3, [r1], #4
 800bc5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc60:	d2e6      	bcs.n	800bc30 <quorem+0xa4>
 800bc62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc6a:	b922      	cbnz	r2, 800bc76 <quorem+0xea>
 800bc6c:	3b04      	subs	r3, #4
 800bc6e:	429d      	cmp	r5, r3
 800bc70:	461a      	mov	r2, r3
 800bc72:	d30b      	bcc.n	800bc8c <quorem+0x100>
 800bc74:	613c      	str	r4, [r7, #16]
 800bc76:	3601      	adds	r6, #1
 800bc78:	4630      	mov	r0, r6
 800bc7a:	b003      	add	sp, #12
 800bc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc80:	6812      	ldr	r2, [r2, #0]
 800bc82:	3b04      	subs	r3, #4
 800bc84:	2a00      	cmp	r2, #0
 800bc86:	d1cb      	bne.n	800bc20 <quorem+0x94>
 800bc88:	3c01      	subs	r4, #1
 800bc8a:	e7c6      	b.n	800bc1a <quorem+0x8e>
 800bc8c:	6812      	ldr	r2, [r2, #0]
 800bc8e:	3b04      	subs	r3, #4
 800bc90:	2a00      	cmp	r2, #0
 800bc92:	d1ef      	bne.n	800bc74 <quorem+0xe8>
 800bc94:	3c01      	subs	r4, #1
 800bc96:	e7ea      	b.n	800bc6e <quorem+0xe2>
 800bc98:	2000      	movs	r0, #0
 800bc9a:	e7ee      	b.n	800bc7a <quorem+0xee>
 800bc9c:	0000      	movs	r0, r0
	...

0800bca0 <_dtoa_r>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	69c7      	ldr	r7, [r0, #28]
 800bca6:	b099      	sub	sp, #100	@ 0x64
 800bca8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bcac:	ec55 4b10 	vmov	r4, r5, d0
 800bcb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bcb2:	9109      	str	r1, [sp, #36]	@ 0x24
 800bcb4:	4683      	mov	fp, r0
 800bcb6:	920e      	str	r2, [sp, #56]	@ 0x38
 800bcb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bcba:	b97f      	cbnz	r7, 800bcdc <_dtoa_r+0x3c>
 800bcbc:	2010      	movs	r0, #16
 800bcbe:	f000 fdfd 	bl	800c8bc <malloc>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	f8cb 001c 	str.w	r0, [fp, #28]
 800bcc8:	b920      	cbnz	r0, 800bcd4 <_dtoa_r+0x34>
 800bcca:	4ba7      	ldr	r3, [pc, #668]	@ (800bf68 <_dtoa_r+0x2c8>)
 800bccc:	21ef      	movs	r1, #239	@ 0xef
 800bcce:	48a7      	ldr	r0, [pc, #668]	@ (800bf6c <_dtoa_r+0x2cc>)
 800bcd0:	f002 fc36 	bl	800e540 <__assert_func>
 800bcd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bcd8:	6007      	str	r7, [r0, #0]
 800bcda:	60c7      	str	r7, [r0, #12]
 800bcdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bce0:	6819      	ldr	r1, [r3, #0]
 800bce2:	b159      	cbz	r1, 800bcfc <_dtoa_r+0x5c>
 800bce4:	685a      	ldr	r2, [r3, #4]
 800bce6:	604a      	str	r2, [r1, #4]
 800bce8:	2301      	movs	r3, #1
 800bcea:	4093      	lsls	r3, r2
 800bcec:	608b      	str	r3, [r1, #8]
 800bcee:	4658      	mov	r0, fp
 800bcf0:	f000 feda 	bl	800caa8 <_Bfree>
 800bcf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	601a      	str	r2, [r3, #0]
 800bcfc:	1e2b      	subs	r3, r5, #0
 800bcfe:	bfb9      	ittee	lt
 800bd00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bd04:	9303      	strlt	r3, [sp, #12]
 800bd06:	2300      	movge	r3, #0
 800bd08:	6033      	strge	r3, [r6, #0]
 800bd0a:	9f03      	ldr	r7, [sp, #12]
 800bd0c:	4b98      	ldr	r3, [pc, #608]	@ (800bf70 <_dtoa_r+0x2d0>)
 800bd0e:	bfbc      	itt	lt
 800bd10:	2201      	movlt	r2, #1
 800bd12:	6032      	strlt	r2, [r6, #0]
 800bd14:	43bb      	bics	r3, r7
 800bd16:	d112      	bne.n	800bd3e <_dtoa_r+0x9e>
 800bd18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bd1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bd1e:	6013      	str	r3, [r2, #0]
 800bd20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd24:	4323      	orrs	r3, r4
 800bd26:	f000 854d 	beq.w	800c7c4 <_dtoa_r+0xb24>
 800bd2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bf84 <_dtoa_r+0x2e4>
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f000 854f 	beq.w	800c7d4 <_dtoa_r+0xb34>
 800bd36:	f10a 0303 	add.w	r3, sl, #3
 800bd3a:	f000 bd49 	b.w	800c7d0 <_dtoa_r+0xb30>
 800bd3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd42:	2200      	movs	r2, #0
 800bd44:	ec51 0b17 	vmov	r0, r1, d7
 800bd48:	2300      	movs	r3, #0
 800bd4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bd4e:	f7f4 fec3 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd52:	4680      	mov	r8, r0
 800bd54:	b158      	cbz	r0, 800bd6e <_dtoa_r+0xce>
 800bd56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bd58:	2301      	movs	r3, #1
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd5e:	b113      	cbz	r3, 800bd66 <_dtoa_r+0xc6>
 800bd60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bd62:	4b84      	ldr	r3, [pc, #528]	@ (800bf74 <_dtoa_r+0x2d4>)
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bf88 <_dtoa_r+0x2e8>
 800bd6a:	f000 bd33 	b.w	800c7d4 <_dtoa_r+0xb34>
 800bd6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bd72:	aa16      	add	r2, sp, #88	@ 0x58
 800bd74:	a917      	add	r1, sp, #92	@ 0x5c
 800bd76:	4658      	mov	r0, fp
 800bd78:	f001 fa3a 	bl	800d1f0 <__d2b>
 800bd7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bd80:	4681      	mov	r9, r0
 800bd82:	2e00      	cmp	r6, #0
 800bd84:	d077      	beq.n	800be76 <_dtoa_r+0x1d6>
 800bd86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bd8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bd98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bd9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bda0:	4619      	mov	r1, r3
 800bda2:	2200      	movs	r2, #0
 800bda4:	4b74      	ldr	r3, [pc, #464]	@ (800bf78 <_dtoa_r+0x2d8>)
 800bda6:	f7f4 fa77 	bl	8000298 <__aeabi_dsub>
 800bdaa:	a369      	add	r3, pc, #420	@ (adr r3, 800bf50 <_dtoa_r+0x2b0>)
 800bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb0:	f7f4 fc2a 	bl	8000608 <__aeabi_dmul>
 800bdb4:	a368      	add	r3, pc, #416	@ (adr r3, 800bf58 <_dtoa_r+0x2b8>)
 800bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdba:	f7f4 fa6f 	bl	800029c <__adddf3>
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	f7f4 fbb6 	bl	8000534 <__aeabi_i2d>
 800bdc8:	a365      	add	r3, pc, #404	@ (adr r3, 800bf60 <_dtoa_r+0x2c0>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f7f4 fc1b 	bl	8000608 <__aeabi_dmul>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	4629      	mov	r1, r5
 800bdda:	f7f4 fa5f 	bl	800029c <__adddf3>
 800bdde:	4604      	mov	r4, r0
 800bde0:	460d      	mov	r5, r1
 800bde2:	f7f4 fec1 	bl	8000b68 <__aeabi_d2iz>
 800bde6:	2200      	movs	r2, #0
 800bde8:	4607      	mov	r7, r0
 800bdea:	2300      	movs	r3, #0
 800bdec:	4620      	mov	r0, r4
 800bdee:	4629      	mov	r1, r5
 800bdf0:	f7f4 fe7c 	bl	8000aec <__aeabi_dcmplt>
 800bdf4:	b140      	cbz	r0, 800be08 <_dtoa_r+0x168>
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	f7f4 fb9c 	bl	8000534 <__aeabi_i2d>
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	462b      	mov	r3, r5
 800be00:	f7f4 fe6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800be04:	b900      	cbnz	r0, 800be08 <_dtoa_r+0x168>
 800be06:	3f01      	subs	r7, #1
 800be08:	2f16      	cmp	r7, #22
 800be0a:	d851      	bhi.n	800beb0 <_dtoa_r+0x210>
 800be0c:	4b5b      	ldr	r3, [pc, #364]	@ (800bf7c <_dtoa_r+0x2dc>)
 800be0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be1a:	f7f4 fe67 	bl	8000aec <__aeabi_dcmplt>
 800be1e:	2800      	cmp	r0, #0
 800be20:	d048      	beq.n	800beb4 <_dtoa_r+0x214>
 800be22:	3f01      	subs	r7, #1
 800be24:	2300      	movs	r3, #0
 800be26:	9312      	str	r3, [sp, #72]	@ 0x48
 800be28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800be2a:	1b9b      	subs	r3, r3, r6
 800be2c:	1e5a      	subs	r2, r3, #1
 800be2e:	bf44      	itt	mi
 800be30:	f1c3 0801 	rsbmi	r8, r3, #1
 800be34:	2300      	movmi	r3, #0
 800be36:	9208      	str	r2, [sp, #32]
 800be38:	bf54      	ite	pl
 800be3a:	f04f 0800 	movpl.w	r8, #0
 800be3e:	9308      	strmi	r3, [sp, #32]
 800be40:	2f00      	cmp	r7, #0
 800be42:	db39      	blt.n	800beb8 <_dtoa_r+0x218>
 800be44:	9b08      	ldr	r3, [sp, #32]
 800be46:	970f      	str	r7, [sp, #60]	@ 0x3c
 800be48:	443b      	add	r3, r7
 800be4a:	9308      	str	r3, [sp, #32]
 800be4c:	2300      	movs	r3, #0
 800be4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800be50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be52:	2b09      	cmp	r3, #9
 800be54:	d864      	bhi.n	800bf20 <_dtoa_r+0x280>
 800be56:	2b05      	cmp	r3, #5
 800be58:	bfc4      	itt	gt
 800be5a:	3b04      	subgt	r3, #4
 800be5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800be5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be60:	f1a3 0302 	sub.w	r3, r3, #2
 800be64:	bfcc      	ite	gt
 800be66:	2400      	movgt	r4, #0
 800be68:	2401      	movle	r4, #1
 800be6a:	2b03      	cmp	r3, #3
 800be6c:	d863      	bhi.n	800bf36 <_dtoa_r+0x296>
 800be6e:	e8df f003 	tbb	[pc, r3]
 800be72:	372a      	.short	0x372a
 800be74:	5535      	.short	0x5535
 800be76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800be7a:	441e      	add	r6, r3
 800be7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800be80:	2b20      	cmp	r3, #32
 800be82:	bfc1      	itttt	gt
 800be84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800be88:	409f      	lslgt	r7, r3
 800be8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800be8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800be92:	bfd6      	itet	le
 800be94:	f1c3 0320 	rsble	r3, r3, #32
 800be98:	ea47 0003 	orrgt.w	r0, r7, r3
 800be9c:	fa04 f003 	lslle.w	r0, r4, r3
 800bea0:	f7f4 fb38 	bl	8000514 <__aeabi_ui2d>
 800bea4:	2201      	movs	r2, #1
 800bea6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800beaa:	3e01      	subs	r6, #1
 800beac:	9214      	str	r2, [sp, #80]	@ 0x50
 800beae:	e777      	b.n	800bda0 <_dtoa_r+0x100>
 800beb0:	2301      	movs	r3, #1
 800beb2:	e7b8      	b.n	800be26 <_dtoa_r+0x186>
 800beb4:	9012      	str	r0, [sp, #72]	@ 0x48
 800beb6:	e7b7      	b.n	800be28 <_dtoa_r+0x188>
 800beb8:	427b      	negs	r3, r7
 800beba:	930a      	str	r3, [sp, #40]	@ 0x28
 800bebc:	2300      	movs	r3, #0
 800bebe:	eba8 0807 	sub.w	r8, r8, r7
 800bec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bec4:	e7c4      	b.n	800be50 <_dtoa_r+0x1b0>
 800bec6:	2300      	movs	r3, #0
 800bec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800beca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800becc:	2b00      	cmp	r3, #0
 800bece:	dc35      	bgt.n	800bf3c <_dtoa_r+0x29c>
 800bed0:	2301      	movs	r3, #1
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	9307      	str	r3, [sp, #28]
 800bed6:	461a      	mov	r2, r3
 800bed8:	920e      	str	r2, [sp, #56]	@ 0x38
 800beda:	e00b      	b.n	800bef4 <_dtoa_r+0x254>
 800bedc:	2301      	movs	r3, #1
 800bede:	e7f3      	b.n	800bec8 <_dtoa_r+0x228>
 800bee0:	2300      	movs	r3, #0
 800bee2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bee6:	18fb      	adds	r3, r7, r3
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	3301      	adds	r3, #1
 800beec:	2b01      	cmp	r3, #1
 800beee:	9307      	str	r3, [sp, #28]
 800bef0:	bfb8      	it	lt
 800bef2:	2301      	movlt	r3, #1
 800bef4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bef8:	2100      	movs	r1, #0
 800befa:	2204      	movs	r2, #4
 800befc:	f102 0514 	add.w	r5, r2, #20
 800bf00:	429d      	cmp	r5, r3
 800bf02:	d91f      	bls.n	800bf44 <_dtoa_r+0x2a4>
 800bf04:	6041      	str	r1, [r0, #4]
 800bf06:	4658      	mov	r0, fp
 800bf08:	f000 fd8e 	bl	800ca28 <_Balloc>
 800bf0c:	4682      	mov	sl, r0
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d13c      	bne.n	800bf8c <_dtoa_r+0x2ec>
 800bf12:	4b1b      	ldr	r3, [pc, #108]	@ (800bf80 <_dtoa_r+0x2e0>)
 800bf14:	4602      	mov	r2, r0
 800bf16:	f240 11af 	movw	r1, #431	@ 0x1af
 800bf1a:	e6d8      	b.n	800bcce <_dtoa_r+0x2e>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e7e0      	b.n	800bee2 <_dtoa_r+0x242>
 800bf20:	2401      	movs	r4, #1
 800bf22:	2300      	movs	r3, #0
 800bf24:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf26:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bf28:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	9307      	str	r3, [sp, #28]
 800bf30:	2200      	movs	r2, #0
 800bf32:	2312      	movs	r3, #18
 800bf34:	e7d0      	b.n	800bed8 <_dtoa_r+0x238>
 800bf36:	2301      	movs	r3, #1
 800bf38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf3a:	e7f5      	b.n	800bf28 <_dtoa_r+0x288>
 800bf3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	9307      	str	r3, [sp, #28]
 800bf42:	e7d7      	b.n	800bef4 <_dtoa_r+0x254>
 800bf44:	3101      	adds	r1, #1
 800bf46:	0052      	lsls	r2, r2, #1
 800bf48:	e7d8      	b.n	800befc <_dtoa_r+0x25c>
 800bf4a:	bf00      	nop
 800bf4c:	f3af 8000 	nop.w
 800bf50:	636f4361 	.word	0x636f4361
 800bf54:	3fd287a7 	.word	0x3fd287a7
 800bf58:	8b60c8b3 	.word	0x8b60c8b3
 800bf5c:	3fc68a28 	.word	0x3fc68a28
 800bf60:	509f79fb 	.word	0x509f79fb
 800bf64:	3fd34413 	.word	0x3fd34413
 800bf68:	0800f2ea 	.word	0x0800f2ea
 800bf6c:	0800f301 	.word	0x0800f301
 800bf70:	7ff00000 	.word	0x7ff00000
 800bf74:	0800f2b5 	.word	0x0800f2b5
 800bf78:	3ff80000 	.word	0x3ff80000
 800bf7c:	0800f3f8 	.word	0x0800f3f8
 800bf80:	0800f359 	.word	0x0800f359
 800bf84:	0800f2e6 	.word	0x0800f2e6
 800bf88:	0800f2b4 	.word	0x0800f2b4
 800bf8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bf90:	6018      	str	r0, [r3, #0]
 800bf92:	9b07      	ldr	r3, [sp, #28]
 800bf94:	2b0e      	cmp	r3, #14
 800bf96:	f200 80a4 	bhi.w	800c0e2 <_dtoa_r+0x442>
 800bf9a:	2c00      	cmp	r4, #0
 800bf9c:	f000 80a1 	beq.w	800c0e2 <_dtoa_r+0x442>
 800bfa0:	2f00      	cmp	r7, #0
 800bfa2:	dd33      	ble.n	800c00c <_dtoa_r+0x36c>
 800bfa4:	4bad      	ldr	r3, [pc, #692]	@ (800c25c <_dtoa_r+0x5bc>)
 800bfa6:	f007 020f 	and.w	r2, r7, #15
 800bfaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfae:	ed93 7b00 	vldr	d7, [r3]
 800bfb2:	05f8      	lsls	r0, r7, #23
 800bfb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bfb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bfbc:	d516      	bpl.n	800bfec <_dtoa_r+0x34c>
 800bfbe:	4ba8      	ldr	r3, [pc, #672]	@ (800c260 <_dtoa_r+0x5c0>)
 800bfc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfc8:	f7f4 fc48 	bl	800085c <__aeabi_ddiv>
 800bfcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfd0:	f004 040f 	and.w	r4, r4, #15
 800bfd4:	2603      	movs	r6, #3
 800bfd6:	4da2      	ldr	r5, [pc, #648]	@ (800c260 <_dtoa_r+0x5c0>)
 800bfd8:	b954      	cbnz	r4, 800bff0 <_dtoa_r+0x350>
 800bfda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfe2:	f7f4 fc3b 	bl	800085c <__aeabi_ddiv>
 800bfe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfea:	e028      	b.n	800c03e <_dtoa_r+0x39e>
 800bfec:	2602      	movs	r6, #2
 800bfee:	e7f2      	b.n	800bfd6 <_dtoa_r+0x336>
 800bff0:	07e1      	lsls	r1, r4, #31
 800bff2:	d508      	bpl.n	800c006 <_dtoa_r+0x366>
 800bff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bff8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bffc:	f7f4 fb04 	bl	8000608 <__aeabi_dmul>
 800c000:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c004:	3601      	adds	r6, #1
 800c006:	1064      	asrs	r4, r4, #1
 800c008:	3508      	adds	r5, #8
 800c00a:	e7e5      	b.n	800bfd8 <_dtoa_r+0x338>
 800c00c:	f000 80d2 	beq.w	800c1b4 <_dtoa_r+0x514>
 800c010:	427c      	negs	r4, r7
 800c012:	4b92      	ldr	r3, [pc, #584]	@ (800c25c <_dtoa_r+0x5bc>)
 800c014:	4d92      	ldr	r5, [pc, #584]	@ (800c260 <_dtoa_r+0x5c0>)
 800c016:	f004 020f 	and.w	r2, r4, #15
 800c01a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c022:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c026:	f7f4 faef 	bl	8000608 <__aeabi_dmul>
 800c02a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c02e:	1124      	asrs	r4, r4, #4
 800c030:	2300      	movs	r3, #0
 800c032:	2602      	movs	r6, #2
 800c034:	2c00      	cmp	r4, #0
 800c036:	f040 80b2 	bne.w	800c19e <_dtoa_r+0x4fe>
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1d3      	bne.n	800bfe6 <_dtoa_r+0x346>
 800c03e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c040:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	f000 80b7 	beq.w	800c1b8 <_dtoa_r+0x518>
 800c04a:	4b86      	ldr	r3, [pc, #536]	@ (800c264 <_dtoa_r+0x5c4>)
 800c04c:	2200      	movs	r2, #0
 800c04e:	4620      	mov	r0, r4
 800c050:	4629      	mov	r1, r5
 800c052:	f7f4 fd4b 	bl	8000aec <__aeabi_dcmplt>
 800c056:	2800      	cmp	r0, #0
 800c058:	f000 80ae 	beq.w	800c1b8 <_dtoa_r+0x518>
 800c05c:	9b07      	ldr	r3, [sp, #28]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f000 80aa 	beq.w	800c1b8 <_dtoa_r+0x518>
 800c064:	9b00      	ldr	r3, [sp, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	dd37      	ble.n	800c0da <_dtoa_r+0x43a>
 800c06a:	1e7b      	subs	r3, r7, #1
 800c06c:	9304      	str	r3, [sp, #16]
 800c06e:	4620      	mov	r0, r4
 800c070:	4b7d      	ldr	r3, [pc, #500]	@ (800c268 <_dtoa_r+0x5c8>)
 800c072:	2200      	movs	r2, #0
 800c074:	4629      	mov	r1, r5
 800c076:	f7f4 fac7 	bl	8000608 <__aeabi_dmul>
 800c07a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c07e:	9c00      	ldr	r4, [sp, #0]
 800c080:	3601      	adds	r6, #1
 800c082:	4630      	mov	r0, r6
 800c084:	f7f4 fa56 	bl	8000534 <__aeabi_i2d>
 800c088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c08c:	f7f4 fabc 	bl	8000608 <__aeabi_dmul>
 800c090:	4b76      	ldr	r3, [pc, #472]	@ (800c26c <_dtoa_r+0x5cc>)
 800c092:	2200      	movs	r2, #0
 800c094:	f7f4 f902 	bl	800029c <__adddf3>
 800c098:	4605      	mov	r5, r0
 800c09a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c09e:	2c00      	cmp	r4, #0
 800c0a0:	f040 808d 	bne.w	800c1be <_dtoa_r+0x51e>
 800c0a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0a8:	4b71      	ldr	r3, [pc, #452]	@ (800c270 <_dtoa_r+0x5d0>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f7f4 f8f4 	bl	8000298 <__aeabi_dsub>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0b8:	462a      	mov	r2, r5
 800c0ba:	4633      	mov	r3, r6
 800c0bc:	f7f4 fd34 	bl	8000b28 <__aeabi_dcmpgt>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	f040 828b 	bne.w	800c5dc <_dtoa_r+0x93c>
 800c0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ca:	462a      	mov	r2, r5
 800c0cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c0d0:	f7f4 fd0c 	bl	8000aec <__aeabi_dcmplt>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	f040 8128 	bne.w	800c32a <_dtoa_r+0x68a>
 800c0da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c0de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c0e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f2c0 815a 	blt.w	800c39e <_dtoa_r+0x6fe>
 800c0ea:	2f0e      	cmp	r7, #14
 800c0ec:	f300 8157 	bgt.w	800c39e <_dtoa_r+0x6fe>
 800c0f0:	4b5a      	ldr	r3, [pc, #360]	@ (800c25c <_dtoa_r+0x5bc>)
 800c0f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c0f6:	ed93 7b00 	vldr	d7, [r3]
 800c0fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	ed8d 7b00 	vstr	d7, [sp]
 800c102:	da03      	bge.n	800c10c <_dtoa_r+0x46c>
 800c104:	9b07      	ldr	r3, [sp, #28]
 800c106:	2b00      	cmp	r3, #0
 800c108:	f340 8101 	ble.w	800c30e <_dtoa_r+0x66e>
 800c10c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c110:	4656      	mov	r6, sl
 800c112:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c116:	4620      	mov	r0, r4
 800c118:	4629      	mov	r1, r5
 800c11a:	f7f4 fb9f 	bl	800085c <__aeabi_ddiv>
 800c11e:	f7f4 fd23 	bl	8000b68 <__aeabi_d2iz>
 800c122:	4680      	mov	r8, r0
 800c124:	f7f4 fa06 	bl	8000534 <__aeabi_i2d>
 800c128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c12c:	f7f4 fa6c 	bl	8000608 <__aeabi_dmul>
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	4620      	mov	r0, r4
 800c136:	4629      	mov	r1, r5
 800c138:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c13c:	f7f4 f8ac 	bl	8000298 <__aeabi_dsub>
 800c140:	f806 4b01 	strb.w	r4, [r6], #1
 800c144:	9d07      	ldr	r5, [sp, #28]
 800c146:	eba6 040a 	sub.w	r4, r6, sl
 800c14a:	42a5      	cmp	r5, r4
 800c14c:	4602      	mov	r2, r0
 800c14e:	460b      	mov	r3, r1
 800c150:	f040 8117 	bne.w	800c382 <_dtoa_r+0x6e2>
 800c154:	f7f4 f8a2 	bl	800029c <__adddf3>
 800c158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c15c:	4604      	mov	r4, r0
 800c15e:	460d      	mov	r5, r1
 800c160:	f7f4 fce2 	bl	8000b28 <__aeabi_dcmpgt>
 800c164:	2800      	cmp	r0, #0
 800c166:	f040 80f9 	bne.w	800c35c <_dtoa_r+0x6bc>
 800c16a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c16e:	4620      	mov	r0, r4
 800c170:	4629      	mov	r1, r5
 800c172:	f7f4 fcb1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c176:	b118      	cbz	r0, 800c180 <_dtoa_r+0x4e0>
 800c178:	f018 0f01 	tst.w	r8, #1
 800c17c:	f040 80ee 	bne.w	800c35c <_dtoa_r+0x6bc>
 800c180:	4649      	mov	r1, r9
 800c182:	4658      	mov	r0, fp
 800c184:	f000 fc90 	bl	800caa8 <_Bfree>
 800c188:	2300      	movs	r3, #0
 800c18a:	7033      	strb	r3, [r6, #0]
 800c18c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c18e:	3701      	adds	r7, #1
 800c190:	601f      	str	r7, [r3, #0]
 800c192:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c194:	2b00      	cmp	r3, #0
 800c196:	f000 831d 	beq.w	800c7d4 <_dtoa_r+0xb34>
 800c19a:	601e      	str	r6, [r3, #0]
 800c19c:	e31a      	b.n	800c7d4 <_dtoa_r+0xb34>
 800c19e:	07e2      	lsls	r2, r4, #31
 800c1a0:	d505      	bpl.n	800c1ae <_dtoa_r+0x50e>
 800c1a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1a6:	f7f4 fa2f 	bl	8000608 <__aeabi_dmul>
 800c1aa:	3601      	adds	r6, #1
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	1064      	asrs	r4, r4, #1
 800c1b0:	3508      	adds	r5, #8
 800c1b2:	e73f      	b.n	800c034 <_dtoa_r+0x394>
 800c1b4:	2602      	movs	r6, #2
 800c1b6:	e742      	b.n	800c03e <_dtoa_r+0x39e>
 800c1b8:	9c07      	ldr	r4, [sp, #28]
 800c1ba:	9704      	str	r7, [sp, #16]
 800c1bc:	e761      	b.n	800c082 <_dtoa_r+0x3e2>
 800c1be:	4b27      	ldr	r3, [pc, #156]	@ (800c25c <_dtoa_r+0x5bc>)
 800c1c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c1c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1ca:	4454      	add	r4, sl
 800c1cc:	2900      	cmp	r1, #0
 800c1ce:	d053      	beq.n	800c278 <_dtoa_r+0x5d8>
 800c1d0:	4928      	ldr	r1, [pc, #160]	@ (800c274 <_dtoa_r+0x5d4>)
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	f7f4 fb42 	bl	800085c <__aeabi_ddiv>
 800c1d8:	4633      	mov	r3, r6
 800c1da:	462a      	mov	r2, r5
 800c1dc:	f7f4 f85c 	bl	8000298 <__aeabi_dsub>
 800c1e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1e4:	4656      	mov	r6, sl
 800c1e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1ea:	f7f4 fcbd 	bl	8000b68 <__aeabi_d2iz>
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	f7f4 f9a0 	bl	8000534 <__aeabi_i2d>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1fc:	f7f4 f84c 	bl	8000298 <__aeabi_dsub>
 800c200:	3530      	adds	r5, #48	@ 0x30
 800c202:	4602      	mov	r2, r0
 800c204:	460b      	mov	r3, r1
 800c206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c20a:	f806 5b01 	strb.w	r5, [r6], #1
 800c20e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c212:	f7f4 fc6b 	bl	8000aec <__aeabi_dcmplt>
 800c216:	2800      	cmp	r0, #0
 800c218:	d171      	bne.n	800c2fe <_dtoa_r+0x65e>
 800c21a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c21e:	4911      	ldr	r1, [pc, #68]	@ (800c264 <_dtoa_r+0x5c4>)
 800c220:	2000      	movs	r0, #0
 800c222:	f7f4 f839 	bl	8000298 <__aeabi_dsub>
 800c226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c22a:	f7f4 fc5f 	bl	8000aec <__aeabi_dcmplt>
 800c22e:	2800      	cmp	r0, #0
 800c230:	f040 8095 	bne.w	800c35e <_dtoa_r+0x6be>
 800c234:	42a6      	cmp	r6, r4
 800c236:	f43f af50 	beq.w	800c0da <_dtoa_r+0x43a>
 800c23a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c23e:	4b0a      	ldr	r3, [pc, #40]	@ (800c268 <_dtoa_r+0x5c8>)
 800c240:	2200      	movs	r2, #0
 800c242:	f7f4 f9e1 	bl	8000608 <__aeabi_dmul>
 800c246:	4b08      	ldr	r3, [pc, #32]	@ (800c268 <_dtoa_r+0x5c8>)
 800c248:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c24c:	2200      	movs	r2, #0
 800c24e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c252:	f7f4 f9d9 	bl	8000608 <__aeabi_dmul>
 800c256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c25a:	e7c4      	b.n	800c1e6 <_dtoa_r+0x546>
 800c25c:	0800f3f8 	.word	0x0800f3f8
 800c260:	0800f3d0 	.word	0x0800f3d0
 800c264:	3ff00000 	.word	0x3ff00000
 800c268:	40240000 	.word	0x40240000
 800c26c:	401c0000 	.word	0x401c0000
 800c270:	40140000 	.word	0x40140000
 800c274:	3fe00000 	.word	0x3fe00000
 800c278:	4631      	mov	r1, r6
 800c27a:	4628      	mov	r0, r5
 800c27c:	f7f4 f9c4 	bl	8000608 <__aeabi_dmul>
 800c280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c284:	9415      	str	r4, [sp, #84]	@ 0x54
 800c286:	4656      	mov	r6, sl
 800c288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c28c:	f7f4 fc6c 	bl	8000b68 <__aeabi_d2iz>
 800c290:	4605      	mov	r5, r0
 800c292:	f7f4 f94f 	bl	8000534 <__aeabi_i2d>
 800c296:	4602      	mov	r2, r0
 800c298:	460b      	mov	r3, r1
 800c29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c29e:	f7f3 fffb 	bl	8000298 <__aeabi_dsub>
 800c2a2:	3530      	adds	r5, #48	@ 0x30
 800c2a4:	f806 5b01 	strb.w	r5, [r6], #1
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	42a6      	cmp	r6, r4
 800c2ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c2b2:	f04f 0200 	mov.w	r2, #0
 800c2b6:	d124      	bne.n	800c302 <_dtoa_r+0x662>
 800c2b8:	4bac      	ldr	r3, [pc, #688]	@ (800c56c <_dtoa_r+0x8cc>)
 800c2ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c2be:	f7f3 ffed 	bl	800029c <__adddf3>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2ca:	f7f4 fc2d 	bl	8000b28 <__aeabi_dcmpgt>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d145      	bne.n	800c35e <_dtoa_r+0x6be>
 800c2d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2d6:	49a5      	ldr	r1, [pc, #660]	@ (800c56c <_dtoa_r+0x8cc>)
 800c2d8:	2000      	movs	r0, #0
 800c2da:	f7f3 ffdd 	bl	8000298 <__aeabi_dsub>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2e6:	f7f4 fc01 	bl	8000aec <__aeabi_dcmplt>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	f43f aef5 	beq.w	800c0da <_dtoa_r+0x43a>
 800c2f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c2f2:	1e73      	subs	r3, r6, #1
 800c2f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c2f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c2fa:	2b30      	cmp	r3, #48	@ 0x30
 800c2fc:	d0f8      	beq.n	800c2f0 <_dtoa_r+0x650>
 800c2fe:	9f04      	ldr	r7, [sp, #16]
 800c300:	e73e      	b.n	800c180 <_dtoa_r+0x4e0>
 800c302:	4b9b      	ldr	r3, [pc, #620]	@ (800c570 <_dtoa_r+0x8d0>)
 800c304:	f7f4 f980 	bl	8000608 <__aeabi_dmul>
 800c308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c30c:	e7bc      	b.n	800c288 <_dtoa_r+0x5e8>
 800c30e:	d10c      	bne.n	800c32a <_dtoa_r+0x68a>
 800c310:	4b98      	ldr	r3, [pc, #608]	@ (800c574 <_dtoa_r+0x8d4>)
 800c312:	2200      	movs	r2, #0
 800c314:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c318:	f7f4 f976 	bl	8000608 <__aeabi_dmul>
 800c31c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c320:	f7f4 fbf8 	bl	8000b14 <__aeabi_dcmpge>
 800c324:	2800      	cmp	r0, #0
 800c326:	f000 8157 	beq.w	800c5d8 <_dtoa_r+0x938>
 800c32a:	2400      	movs	r4, #0
 800c32c:	4625      	mov	r5, r4
 800c32e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c330:	43db      	mvns	r3, r3
 800c332:	9304      	str	r3, [sp, #16]
 800c334:	4656      	mov	r6, sl
 800c336:	2700      	movs	r7, #0
 800c338:	4621      	mov	r1, r4
 800c33a:	4658      	mov	r0, fp
 800c33c:	f000 fbb4 	bl	800caa8 <_Bfree>
 800c340:	2d00      	cmp	r5, #0
 800c342:	d0dc      	beq.n	800c2fe <_dtoa_r+0x65e>
 800c344:	b12f      	cbz	r7, 800c352 <_dtoa_r+0x6b2>
 800c346:	42af      	cmp	r7, r5
 800c348:	d003      	beq.n	800c352 <_dtoa_r+0x6b2>
 800c34a:	4639      	mov	r1, r7
 800c34c:	4658      	mov	r0, fp
 800c34e:	f000 fbab 	bl	800caa8 <_Bfree>
 800c352:	4629      	mov	r1, r5
 800c354:	4658      	mov	r0, fp
 800c356:	f000 fba7 	bl	800caa8 <_Bfree>
 800c35a:	e7d0      	b.n	800c2fe <_dtoa_r+0x65e>
 800c35c:	9704      	str	r7, [sp, #16]
 800c35e:	4633      	mov	r3, r6
 800c360:	461e      	mov	r6, r3
 800c362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c366:	2a39      	cmp	r2, #57	@ 0x39
 800c368:	d107      	bne.n	800c37a <_dtoa_r+0x6da>
 800c36a:	459a      	cmp	sl, r3
 800c36c:	d1f8      	bne.n	800c360 <_dtoa_r+0x6c0>
 800c36e:	9a04      	ldr	r2, [sp, #16]
 800c370:	3201      	adds	r2, #1
 800c372:	9204      	str	r2, [sp, #16]
 800c374:	2230      	movs	r2, #48	@ 0x30
 800c376:	f88a 2000 	strb.w	r2, [sl]
 800c37a:	781a      	ldrb	r2, [r3, #0]
 800c37c:	3201      	adds	r2, #1
 800c37e:	701a      	strb	r2, [r3, #0]
 800c380:	e7bd      	b.n	800c2fe <_dtoa_r+0x65e>
 800c382:	4b7b      	ldr	r3, [pc, #492]	@ (800c570 <_dtoa_r+0x8d0>)
 800c384:	2200      	movs	r2, #0
 800c386:	f7f4 f93f 	bl	8000608 <__aeabi_dmul>
 800c38a:	2200      	movs	r2, #0
 800c38c:	2300      	movs	r3, #0
 800c38e:	4604      	mov	r4, r0
 800c390:	460d      	mov	r5, r1
 800c392:	f7f4 fba1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c396:	2800      	cmp	r0, #0
 800c398:	f43f aebb 	beq.w	800c112 <_dtoa_r+0x472>
 800c39c:	e6f0      	b.n	800c180 <_dtoa_r+0x4e0>
 800c39e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c3a0:	2a00      	cmp	r2, #0
 800c3a2:	f000 80db 	beq.w	800c55c <_dtoa_r+0x8bc>
 800c3a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3a8:	2a01      	cmp	r2, #1
 800c3aa:	f300 80bf 	bgt.w	800c52c <_dtoa_r+0x88c>
 800c3ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c3b0:	2a00      	cmp	r2, #0
 800c3b2:	f000 80b7 	beq.w	800c524 <_dtoa_r+0x884>
 800c3b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c3ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c3bc:	4646      	mov	r6, r8
 800c3be:	9a08      	ldr	r2, [sp, #32]
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	441a      	add	r2, r3
 800c3c4:	4658      	mov	r0, fp
 800c3c6:	4498      	add	r8, r3
 800c3c8:	9208      	str	r2, [sp, #32]
 800c3ca:	f000 fc6b 	bl	800cca4 <__i2b>
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	b15e      	cbz	r6, 800c3ea <_dtoa_r+0x74a>
 800c3d2:	9b08      	ldr	r3, [sp, #32]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	dd08      	ble.n	800c3ea <_dtoa_r+0x74a>
 800c3d8:	42b3      	cmp	r3, r6
 800c3da:	9a08      	ldr	r2, [sp, #32]
 800c3dc:	bfa8      	it	ge
 800c3de:	4633      	movge	r3, r6
 800c3e0:	eba8 0803 	sub.w	r8, r8, r3
 800c3e4:	1af6      	subs	r6, r6, r3
 800c3e6:	1ad3      	subs	r3, r2, r3
 800c3e8:	9308      	str	r3, [sp, #32]
 800c3ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3ec:	b1f3      	cbz	r3, 800c42c <_dtoa_r+0x78c>
 800c3ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f000 80b7 	beq.w	800c564 <_dtoa_r+0x8c4>
 800c3f6:	b18c      	cbz	r4, 800c41c <_dtoa_r+0x77c>
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	4622      	mov	r2, r4
 800c3fc:	4658      	mov	r0, fp
 800c3fe:	f000 fd11 	bl	800ce24 <__pow5mult>
 800c402:	464a      	mov	r2, r9
 800c404:	4601      	mov	r1, r0
 800c406:	4605      	mov	r5, r0
 800c408:	4658      	mov	r0, fp
 800c40a:	f000 fc61 	bl	800ccd0 <__multiply>
 800c40e:	4649      	mov	r1, r9
 800c410:	9004      	str	r0, [sp, #16]
 800c412:	4658      	mov	r0, fp
 800c414:	f000 fb48 	bl	800caa8 <_Bfree>
 800c418:	9b04      	ldr	r3, [sp, #16]
 800c41a:	4699      	mov	r9, r3
 800c41c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c41e:	1b1a      	subs	r2, r3, r4
 800c420:	d004      	beq.n	800c42c <_dtoa_r+0x78c>
 800c422:	4649      	mov	r1, r9
 800c424:	4658      	mov	r0, fp
 800c426:	f000 fcfd 	bl	800ce24 <__pow5mult>
 800c42a:	4681      	mov	r9, r0
 800c42c:	2101      	movs	r1, #1
 800c42e:	4658      	mov	r0, fp
 800c430:	f000 fc38 	bl	800cca4 <__i2b>
 800c434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c436:	4604      	mov	r4, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f000 81cf 	beq.w	800c7dc <_dtoa_r+0xb3c>
 800c43e:	461a      	mov	r2, r3
 800c440:	4601      	mov	r1, r0
 800c442:	4658      	mov	r0, fp
 800c444:	f000 fcee 	bl	800ce24 <__pow5mult>
 800c448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	4604      	mov	r4, r0
 800c44e:	f300 8095 	bgt.w	800c57c <_dtoa_r+0x8dc>
 800c452:	9b02      	ldr	r3, [sp, #8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	f040 8087 	bne.w	800c568 <_dtoa_r+0x8c8>
 800c45a:	9b03      	ldr	r3, [sp, #12]
 800c45c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c460:	2b00      	cmp	r3, #0
 800c462:	f040 8089 	bne.w	800c578 <_dtoa_r+0x8d8>
 800c466:	9b03      	ldr	r3, [sp, #12]
 800c468:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c46c:	0d1b      	lsrs	r3, r3, #20
 800c46e:	051b      	lsls	r3, r3, #20
 800c470:	b12b      	cbz	r3, 800c47e <_dtoa_r+0x7de>
 800c472:	9b08      	ldr	r3, [sp, #32]
 800c474:	3301      	adds	r3, #1
 800c476:	9308      	str	r3, [sp, #32]
 800c478:	f108 0801 	add.w	r8, r8, #1
 800c47c:	2301      	movs	r3, #1
 800c47e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c482:	2b00      	cmp	r3, #0
 800c484:	f000 81b0 	beq.w	800c7e8 <_dtoa_r+0xb48>
 800c488:	6923      	ldr	r3, [r4, #16]
 800c48a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c48e:	6918      	ldr	r0, [r3, #16]
 800c490:	f000 fbbc 	bl	800cc0c <__hi0bits>
 800c494:	f1c0 0020 	rsb	r0, r0, #32
 800c498:	9b08      	ldr	r3, [sp, #32]
 800c49a:	4418      	add	r0, r3
 800c49c:	f010 001f 	ands.w	r0, r0, #31
 800c4a0:	d077      	beq.n	800c592 <_dtoa_r+0x8f2>
 800c4a2:	f1c0 0320 	rsb	r3, r0, #32
 800c4a6:	2b04      	cmp	r3, #4
 800c4a8:	dd6b      	ble.n	800c582 <_dtoa_r+0x8e2>
 800c4aa:	9b08      	ldr	r3, [sp, #32]
 800c4ac:	f1c0 001c 	rsb	r0, r0, #28
 800c4b0:	4403      	add	r3, r0
 800c4b2:	4480      	add	r8, r0
 800c4b4:	4406      	add	r6, r0
 800c4b6:	9308      	str	r3, [sp, #32]
 800c4b8:	f1b8 0f00 	cmp.w	r8, #0
 800c4bc:	dd05      	ble.n	800c4ca <_dtoa_r+0x82a>
 800c4be:	4649      	mov	r1, r9
 800c4c0:	4642      	mov	r2, r8
 800c4c2:	4658      	mov	r0, fp
 800c4c4:	f000 fd08 	bl	800ced8 <__lshift>
 800c4c8:	4681      	mov	r9, r0
 800c4ca:	9b08      	ldr	r3, [sp, #32]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	dd05      	ble.n	800c4dc <_dtoa_r+0x83c>
 800c4d0:	4621      	mov	r1, r4
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	4658      	mov	r0, fp
 800c4d6:	f000 fcff 	bl	800ced8 <__lshift>
 800c4da:	4604      	mov	r4, r0
 800c4dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d059      	beq.n	800c596 <_dtoa_r+0x8f6>
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	4648      	mov	r0, r9
 800c4e6:	f000 fd63 	bl	800cfb0 <__mcmp>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	da53      	bge.n	800c596 <_dtoa_r+0x8f6>
 800c4ee:	1e7b      	subs	r3, r7, #1
 800c4f0:	9304      	str	r3, [sp, #16]
 800c4f2:	4649      	mov	r1, r9
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	220a      	movs	r2, #10
 800c4f8:	4658      	mov	r0, fp
 800c4fa:	f000 faf7 	bl	800caec <__multadd>
 800c4fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c500:	4681      	mov	r9, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	f000 8172 	beq.w	800c7ec <_dtoa_r+0xb4c>
 800c508:	2300      	movs	r3, #0
 800c50a:	4629      	mov	r1, r5
 800c50c:	220a      	movs	r2, #10
 800c50e:	4658      	mov	r0, fp
 800c510:	f000 faec 	bl	800caec <__multadd>
 800c514:	9b00      	ldr	r3, [sp, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	4605      	mov	r5, r0
 800c51a:	dc67      	bgt.n	800c5ec <_dtoa_r+0x94c>
 800c51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c51e:	2b02      	cmp	r3, #2
 800c520:	dc41      	bgt.n	800c5a6 <_dtoa_r+0x906>
 800c522:	e063      	b.n	800c5ec <_dtoa_r+0x94c>
 800c524:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c526:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c52a:	e746      	b.n	800c3ba <_dtoa_r+0x71a>
 800c52c:	9b07      	ldr	r3, [sp, #28]
 800c52e:	1e5c      	subs	r4, r3, #1
 800c530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c532:	42a3      	cmp	r3, r4
 800c534:	bfbf      	itttt	lt
 800c536:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c538:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c53a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c53c:	1ae3      	sublt	r3, r4, r3
 800c53e:	bfb4      	ite	lt
 800c540:	18d2      	addlt	r2, r2, r3
 800c542:	1b1c      	subge	r4, r3, r4
 800c544:	9b07      	ldr	r3, [sp, #28]
 800c546:	bfbc      	itt	lt
 800c548:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c54a:	2400      	movlt	r4, #0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	bfb5      	itete	lt
 800c550:	eba8 0603 	sublt.w	r6, r8, r3
 800c554:	9b07      	ldrge	r3, [sp, #28]
 800c556:	2300      	movlt	r3, #0
 800c558:	4646      	movge	r6, r8
 800c55a:	e730      	b.n	800c3be <_dtoa_r+0x71e>
 800c55c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c55e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c560:	4646      	mov	r6, r8
 800c562:	e735      	b.n	800c3d0 <_dtoa_r+0x730>
 800c564:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c566:	e75c      	b.n	800c422 <_dtoa_r+0x782>
 800c568:	2300      	movs	r3, #0
 800c56a:	e788      	b.n	800c47e <_dtoa_r+0x7de>
 800c56c:	3fe00000 	.word	0x3fe00000
 800c570:	40240000 	.word	0x40240000
 800c574:	40140000 	.word	0x40140000
 800c578:	9b02      	ldr	r3, [sp, #8]
 800c57a:	e780      	b.n	800c47e <_dtoa_r+0x7de>
 800c57c:	2300      	movs	r3, #0
 800c57e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c580:	e782      	b.n	800c488 <_dtoa_r+0x7e8>
 800c582:	d099      	beq.n	800c4b8 <_dtoa_r+0x818>
 800c584:	9a08      	ldr	r2, [sp, #32]
 800c586:	331c      	adds	r3, #28
 800c588:	441a      	add	r2, r3
 800c58a:	4498      	add	r8, r3
 800c58c:	441e      	add	r6, r3
 800c58e:	9208      	str	r2, [sp, #32]
 800c590:	e792      	b.n	800c4b8 <_dtoa_r+0x818>
 800c592:	4603      	mov	r3, r0
 800c594:	e7f6      	b.n	800c584 <_dtoa_r+0x8e4>
 800c596:	9b07      	ldr	r3, [sp, #28]
 800c598:	9704      	str	r7, [sp, #16]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	dc20      	bgt.n	800c5e0 <_dtoa_r+0x940>
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	dd1e      	ble.n	800c5e4 <_dtoa_r+0x944>
 800c5a6:	9b00      	ldr	r3, [sp, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f47f aec0 	bne.w	800c32e <_dtoa_r+0x68e>
 800c5ae:	4621      	mov	r1, r4
 800c5b0:	2205      	movs	r2, #5
 800c5b2:	4658      	mov	r0, fp
 800c5b4:	f000 fa9a 	bl	800caec <__multadd>
 800c5b8:	4601      	mov	r1, r0
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	4648      	mov	r0, r9
 800c5be:	f000 fcf7 	bl	800cfb0 <__mcmp>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	f77f aeb3 	ble.w	800c32e <_dtoa_r+0x68e>
 800c5c8:	4656      	mov	r6, sl
 800c5ca:	2331      	movs	r3, #49	@ 0x31
 800c5cc:	f806 3b01 	strb.w	r3, [r6], #1
 800c5d0:	9b04      	ldr	r3, [sp, #16]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	9304      	str	r3, [sp, #16]
 800c5d6:	e6ae      	b.n	800c336 <_dtoa_r+0x696>
 800c5d8:	9c07      	ldr	r4, [sp, #28]
 800c5da:	9704      	str	r7, [sp, #16]
 800c5dc:	4625      	mov	r5, r4
 800c5de:	e7f3      	b.n	800c5c8 <_dtoa_r+0x928>
 800c5e0:	9b07      	ldr	r3, [sp, #28]
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f000 8104 	beq.w	800c7f4 <_dtoa_r+0xb54>
 800c5ec:	2e00      	cmp	r6, #0
 800c5ee:	dd05      	ble.n	800c5fc <_dtoa_r+0x95c>
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	4632      	mov	r2, r6
 800c5f4:	4658      	mov	r0, fp
 800c5f6:	f000 fc6f 	bl	800ced8 <__lshift>
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d05a      	beq.n	800c6b8 <_dtoa_r+0xa18>
 800c602:	6869      	ldr	r1, [r5, #4]
 800c604:	4658      	mov	r0, fp
 800c606:	f000 fa0f 	bl	800ca28 <_Balloc>
 800c60a:	4606      	mov	r6, r0
 800c60c:	b928      	cbnz	r0, 800c61a <_dtoa_r+0x97a>
 800c60e:	4b84      	ldr	r3, [pc, #528]	@ (800c820 <_dtoa_r+0xb80>)
 800c610:	4602      	mov	r2, r0
 800c612:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c616:	f7ff bb5a 	b.w	800bcce <_dtoa_r+0x2e>
 800c61a:	692a      	ldr	r2, [r5, #16]
 800c61c:	3202      	adds	r2, #2
 800c61e:	0092      	lsls	r2, r2, #2
 800c620:	f105 010c 	add.w	r1, r5, #12
 800c624:	300c      	adds	r0, #12
 800c626:	f001 ff75 	bl	800e514 <memcpy>
 800c62a:	2201      	movs	r2, #1
 800c62c:	4631      	mov	r1, r6
 800c62e:	4658      	mov	r0, fp
 800c630:	f000 fc52 	bl	800ced8 <__lshift>
 800c634:	f10a 0301 	add.w	r3, sl, #1
 800c638:	9307      	str	r3, [sp, #28]
 800c63a:	9b00      	ldr	r3, [sp, #0]
 800c63c:	4453      	add	r3, sl
 800c63e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c640:	9b02      	ldr	r3, [sp, #8]
 800c642:	f003 0301 	and.w	r3, r3, #1
 800c646:	462f      	mov	r7, r5
 800c648:	930a      	str	r3, [sp, #40]	@ 0x28
 800c64a:	4605      	mov	r5, r0
 800c64c:	9b07      	ldr	r3, [sp, #28]
 800c64e:	4621      	mov	r1, r4
 800c650:	3b01      	subs	r3, #1
 800c652:	4648      	mov	r0, r9
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	f7ff fa99 	bl	800bb8c <quorem>
 800c65a:	4639      	mov	r1, r7
 800c65c:	9002      	str	r0, [sp, #8]
 800c65e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c662:	4648      	mov	r0, r9
 800c664:	f000 fca4 	bl	800cfb0 <__mcmp>
 800c668:	462a      	mov	r2, r5
 800c66a:	9008      	str	r0, [sp, #32]
 800c66c:	4621      	mov	r1, r4
 800c66e:	4658      	mov	r0, fp
 800c670:	f000 fcba 	bl	800cfe8 <__mdiff>
 800c674:	68c2      	ldr	r2, [r0, #12]
 800c676:	4606      	mov	r6, r0
 800c678:	bb02      	cbnz	r2, 800c6bc <_dtoa_r+0xa1c>
 800c67a:	4601      	mov	r1, r0
 800c67c:	4648      	mov	r0, r9
 800c67e:	f000 fc97 	bl	800cfb0 <__mcmp>
 800c682:	4602      	mov	r2, r0
 800c684:	4631      	mov	r1, r6
 800c686:	4658      	mov	r0, fp
 800c688:	920e      	str	r2, [sp, #56]	@ 0x38
 800c68a:	f000 fa0d 	bl	800caa8 <_Bfree>
 800c68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c690:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c692:	9e07      	ldr	r6, [sp, #28]
 800c694:	ea43 0102 	orr.w	r1, r3, r2
 800c698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c69a:	4319      	orrs	r1, r3
 800c69c:	d110      	bne.n	800c6c0 <_dtoa_r+0xa20>
 800c69e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c6a2:	d029      	beq.n	800c6f8 <_dtoa_r+0xa58>
 800c6a4:	9b08      	ldr	r3, [sp, #32]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	dd02      	ble.n	800c6b0 <_dtoa_r+0xa10>
 800c6aa:	9b02      	ldr	r3, [sp, #8]
 800c6ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c6b0:	9b00      	ldr	r3, [sp, #0]
 800c6b2:	f883 8000 	strb.w	r8, [r3]
 800c6b6:	e63f      	b.n	800c338 <_dtoa_r+0x698>
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	e7bb      	b.n	800c634 <_dtoa_r+0x994>
 800c6bc:	2201      	movs	r2, #1
 800c6be:	e7e1      	b.n	800c684 <_dtoa_r+0x9e4>
 800c6c0:	9b08      	ldr	r3, [sp, #32]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	db04      	blt.n	800c6d0 <_dtoa_r+0xa30>
 800c6c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c6c8:	430b      	orrs	r3, r1
 800c6ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c6cc:	430b      	orrs	r3, r1
 800c6ce:	d120      	bne.n	800c712 <_dtoa_r+0xa72>
 800c6d0:	2a00      	cmp	r2, #0
 800c6d2:	dded      	ble.n	800c6b0 <_dtoa_r+0xa10>
 800c6d4:	4649      	mov	r1, r9
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	4658      	mov	r0, fp
 800c6da:	f000 fbfd 	bl	800ced8 <__lshift>
 800c6de:	4621      	mov	r1, r4
 800c6e0:	4681      	mov	r9, r0
 800c6e2:	f000 fc65 	bl	800cfb0 <__mcmp>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	dc03      	bgt.n	800c6f2 <_dtoa_r+0xa52>
 800c6ea:	d1e1      	bne.n	800c6b0 <_dtoa_r+0xa10>
 800c6ec:	f018 0f01 	tst.w	r8, #1
 800c6f0:	d0de      	beq.n	800c6b0 <_dtoa_r+0xa10>
 800c6f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c6f6:	d1d8      	bne.n	800c6aa <_dtoa_r+0xa0a>
 800c6f8:	9a00      	ldr	r2, [sp, #0]
 800c6fa:	2339      	movs	r3, #57	@ 0x39
 800c6fc:	7013      	strb	r3, [r2, #0]
 800c6fe:	4633      	mov	r3, r6
 800c700:	461e      	mov	r6, r3
 800c702:	3b01      	subs	r3, #1
 800c704:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c708:	2a39      	cmp	r2, #57	@ 0x39
 800c70a:	d052      	beq.n	800c7b2 <_dtoa_r+0xb12>
 800c70c:	3201      	adds	r2, #1
 800c70e:	701a      	strb	r2, [r3, #0]
 800c710:	e612      	b.n	800c338 <_dtoa_r+0x698>
 800c712:	2a00      	cmp	r2, #0
 800c714:	dd07      	ble.n	800c726 <_dtoa_r+0xa86>
 800c716:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c71a:	d0ed      	beq.n	800c6f8 <_dtoa_r+0xa58>
 800c71c:	9a00      	ldr	r2, [sp, #0]
 800c71e:	f108 0301 	add.w	r3, r8, #1
 800c722:	7013      	strb	r3, [r2, #0]
 800c724:	e608      	b.n	800c338 <_dtoa_r+0x698>
 800c726:	9b07      	ldr	r3, [sp, #28]
 800c728:	9a07      	ldr	r2, [sp, #28]
 800c72a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c72e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c730:	4293      	cmp	r3, r2
 800c732:	d028      	beq.n	800c786 <_dtoa_r+0xae6>
 800c734:	4649      	mov	r1, r9
 800c736:	2300      	movs	r3, #0
 800c738:	220a      	movs	r2, #10
 800c73a:	4658      	mov	r0, fp
 800c73c:	f000 f9d6 	bl	800caec <__multadd>
 800c740:	42af      	cmp	r7, r5
 800c742:	4681      	mov	r9, r0
 800c744:	f04f 0300 	mov.w	r3, #0
 800c748:	f04f 020a 	mov.w	r2, #10
 800c74c:	4639      	mov	r1, r7
 800c74e:	4658      	mov	r0, fp
 800c750:	d107      	bne.n	800c762 <_dtoa_r+0xac2>
 800c752:	f000 f9cb 	bl	800caec <__multadd>
 800c756:	4607      	mov	r7, r0
 800c758:	4605      	mov	r5, r0
 800c75a:	9b07      	ldr	r3, [sp, #28]
 800c75c:	3301      	adds	r3, #1
 800c75e:	9307      	str	r3, [sp, #28]
 800c760:	e774      	b.n	800c64c <_dtoa_r+0x9ac>
 800c762:	f000 f9c3 	bl	800caec <__multadd>
 800c766:	4629      	mov	r1, r5
 800c768:	4607      	mov	r7, r0
 800c76a:	2300      	movs	r3, #0
 800c76c:	220a      	movs	r2, #10
 800c76e:	4658      	mov	r0, fp
 800c770:	f000 f9bc 	bl	800caec <__multadd>
 800c774:	4605      	mov	r5, r0
 800c776:	e7f0      	b.n	800c75a <_dtoa_r+0xaba>
 800c778:	9b00      	ldr	r3, [sp, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	bfcc      	ite	gt
 800c77e:	461e      	movgt	r6, r3
 800c780:	2601      	movle	r6, #1
 800c782:	4456      	add	r6, sl
 800c784:	2700      	movs	r7, #0
 800c786:	4649      	mov	r1, r9
 800c788:	2201      	movs	r2, #1
 800c78a:	4658      	mov	r0, fp
 800c78c:	f000 fba4 	bl	800ced8 <__lshift>
 800c790:	4621      	mov	r1, r4
 800c792:	4681      	mov	r9, r0
 800c794:	f000 fc0c 	bl	800cfb0 <__mcmp>
 800c798:	2800      	cmp	r0, #0
 800c79a:	dcb0      	bgt.n	800c6fe <_dtoa_r+0xa5e>
 800c79c:	d102      	bne.n	800c7a4 <_dtoa_r+0xb04>
 800c79e:	f018 0f01 	tst.w	r8, #1
 800c7a2:	d1ac      	bne.n	800c6fe <_dtoa_r+0xa5e>
 800c7a4:	4633      	mov	r3, r6
 800c7a6:	461e      	mov	r6, r3
 800c7a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7ac:	2a30      	cmp	r2, #48	@ 0x30
 800c7ae:	d0fa      	beq.n	800c7a6 <_dtoa_r+0xb06>
 800c7b0:	e5c2      	b.n	800c338 <_dtoa_r+0x698>
 800c7b2:	459a      	cmp	sl, r3
 800c7b4:	d1a4      	bne.n	800c700 <_dtoa_r+0xa60>
 800c7b6:	9b04      	ldr	r3, [sp, #16]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	9304      	str	r3, [sp, #16]
 800c7bc:	2331      	movs	r3, #49	@ 0x31
 800c7be:	f88a 3000 	strb.w	r3, [sl]
 800c7c2:	e5b9      	b.n	800c338 <_dtoa_r+0x698>
 800c7c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c7c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c824 <_dtoa_r+0xb84>
 800c7ca:	b11b      	cbz	r3, 800c7d4 <_dtoa_r+0xb34>
 800c7cc:	f10a 0308 	add.w	r3, sl, #8
 800c7d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c7d2:	6013      	str	r3, [r2, #0]
 800c7d4:	4650      	mov	r0, sl
 800c7d6:	b019      	add	sp, #100	@ 0x64
 800c7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	f77f ae37 	ble.w	800c452 <_dtoa_r+0x7b2>
 800c7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7e8:	2001      	movs	r0, #1
 800c7ea:	e655      	b.n	800c498 <_dtoa_r+0x7f8>
 800c7ec:	9b00      	ldr	r3, [sp, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f77f aed6 	ble.w	800c5a0 <_dtoa_r+0x900>
 800c7f4:	4656      	mov	r6, sl
 800c7f6:	4621      	mov	r1, r4
 800c7f8:	4648      	mov	r0, r9
 800c7fa:	f7ff f9c7 	bl	800bb8c <quorem>
 800c7fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c802:	f806 8b01 	strb.w	r8, [r6], #1
 800c806:	9b00      	ldr	r3, [sp, #0]
 800c808:	eba6 020a 	sub.w	r2, r6, sl
 800c80c:	4293      	cmp	r3, r2
 800c80e:	ddb3      	ble.n	800c778 <_dtoa_r+0xad8>
 800c810:	4649      	mov	r1, r9
 800c812:	2300      	movs	r3, #0
 800c814:	220a      	movs	r2, #10
 800c816:	4658      	mov	r0, fp
 800c818:	f000 f968 	bl	800caec <__multadd>
 800c81c:	4681      	mov	r9, r0
 800c81e:	e7ea      	b.n	800c7f6 <_dtoa_r+0xb56>
 800c820:	0800f359 	.word	0x0800f359
 800c824:	0800f2dd 	.word	0x0800f2dd

0800c828 <_free_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	4605      	mov	r5, r0
 800c82c:	2900      	cmp	r1, #0
 800c82e:	d041      	beq.n	800c8b4 <_free_r+0x8c>
 800c830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c834:	1f0c      	subs	r4, r1, #4
 800c836:	2b00      	cmp	r3, #0
 800c838:	bfb8      	it	lt
 800c83a:	18e4      	addlt	r4, r4, r3
 800c83c:	f000 f8e8 	bl	800ca10 <__malloc_lock>
 800c840:	4a1d      	ldr	r2, [pc, #116]	@ (800c8b8 <_free_r+0x90>)
 800c842:	6813      	ldr	r3, [r2, #0]
 800c844:	b933      	cbnz	r3, 800c854 <_free_r+0x2c>
 800c846:	6063      	str	r3, [r4, #4]
 800c848:	6014      	str	r4, [r2, #0]
 800c84a:	4628      	mov	r0, r5
 800c84c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c850:	f000 b8e4 	b.w	800ca1c <__malloc_unlock>
 800c854:	42a3      	cmp	r3, r4
 800c856:	d908      	bls.n	800c86a <_free_r+0x42>
 800c858:	6820      	ldr	r0, [r4, #0]
 800c85a:	1821      	adds	r1, r4, r0
 800c85c:	428b      	cmp	r3, r1
 800c85e:	bf01      	itttt	eq
 800c860:	6819      	ldreq	r1, [r3, #0]
 800c862:	685b      	ldreq	r3, [r3, #4]
 800c864:	1809      	addeq	r1, r1, r0
 800c866:	6021      	streq	r1, [r4, #0]
 800c868:	e7ed      	b.n	800c846 <_free_r+0x1e>
 800c86a:	461a      	mov	r2, r3
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	b10b      	cbz	r3, 800c874 <_free_r+0x4c>
 800c870:	42a3      	cmp	r3, r4
 800c872:	d9fa      	bls.n	800c86a <_free_r+0x42>
 800c874:	6811      	ldr	r1, [r2, #0]
 800c876:	1850      	adds	r0, r2, r1
 800c878:	42a0      	cmp	r0, r4
 800c87a:	d10b      	bne.n	800c894 <_free_r+0x6c>
 800c87c:	6820      	ldr	r0, [r4, #0]
 800c87e:	4401      	add	r1, r0
 800c880:	1850      	adds	r0, r2, r1
 800c882:	4283      	cmp	r3, r0
 800c884:	6011      	str	r1, [r2, #0]
 800c886:	d1e0      	bne.n	800c84a <_free_r+0x22>
 800c888:	6818      	ldr	r0, [r3, #0]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	6053      	str	r3, [r2, #4]
 800c88e:	4408      	add	r0, r1
 800c890:	6010      	str	r0, [r2, #0]
 800c892:	e7da      	b.n	800c84a <_free_r+0x22>
 800c894:	d902      	bls.n	800c89c <_free_r+0x74>
 800c896:	230c      	movs	r3, #12
 800c898:	602b      	str	r3, [r5, #0]
 800c89a:	e7d6      	b.n	800c84a <_free_r+0x22>
 800c89c:	6820      	ldr	r0, [r4, #0]
 800c89e:	1821      	adds	r1, r4, r0
 800c8a0:	428b      	cmp	r3, r1
 800c8a2:	bf04      	itt	eq
 800c8a4:	6819      	ldreq	r1, [r3, #0]
 800c8a6:	685b      	ldreq	r3, [r3, #4]
 800c8a8:	6063      	str	r3, [r4, #4]
 800c8aa:	bf04      	itt	eq
 800c8ac:	1809      	addeq	r1, r1, r0
 800c8ae:	6021      	streq	r1, [r4, #0]
 800c8b0:	6054      	str	r4, [r2, #4]
 800c8b2:	e7ca      	b.n	800c84a <_free_r+0x22>
 800c8b4:	bd38      	pop	{r3, r4, r5, pc}
 800c8b6:	bf00      	nop
 800c8b8:	20000b6c 	.word	0x20000b6c

0800c8bc <malloc>:
 800c8bc:	4b02      	ldr	r3, [pc, #8]	@ (800c8c8 <malloc+0xc>)
 800c8be:	4601      	mov	r1, r0
 800c8c0:	6818      	ldr	r0, [r3, #0]
 800c8c2:	f000 b825 	b.w	800c910 <_malloc_r>
 800c8c6:	bf00      	nop
 800c8c8:	20000018 	.word	0x20000018

0800c8cc <sbrk_aligned>:
 800c8cc:	b570      	push	{r4, r5, r6, lr}
 800c8ce:	4e0f      	ldr	r6, [pc, #60]	@ (800c90c <sbrk_aligned+0x40>)
 800c8d0:	460c      	mov	r4, r1
 800c8d2:	6831      	ldr	r1, [r6, #0]
 800c8d4:	4605      	mov	r5, r0
 800c8d6:	b911      	cbnz	r1, 800c8de <sbrk_aligned+0x12>
 800c8d8:	f001 fe0c 	bl	800e4f4 <_sbrk_r>
 800c8dc:	6030      	str	r0, [r6, #0]
 800c8de:	4621      	mov	r1, r4
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	f001 fe07 	bl	800e4f4 <_sbrk_r>
 800c8e6:	1c43      	adds	r3, r0, #1
 800c8e8:	d103      	bne.n	800c8f2 <sbrk_aligned+0x26>
 800c8ea:	f04f 34ff 	mov.w	r4, #4294967295
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	bd70      	pop	{r4, r5, r6, pc}
 800c8f2:	1cc4      	adds	r4, r0, #3
 800c8f4:	f024 0403 	bic.w	r4, r4, #3
 800c8f8:	42a0      	cmp	r0, r4
 800c8fa:	d0f8      	beq.n	800c8ee <sbrk_aligned+0x22>
 800c8fc:	1a21      	subs	r1, r4, r0
 800c8fe:	4628      	mov	r0, r5
 800c900:	f001 fdf8 	bl	800e4f4 <_sbrk_r>
 800c904:	3001      	adds	r0, #1
 800c906:	d1f2      	bne.n	800c8ee <sbrk_aligned+0x22>
 800c908:	e7ef      	b.n	800c8ea <sbrk_aligned+0x1e>
 800c90a:	bf00      	nop
 800c90c:	20000b68 	.word	0x20000b68

0800c910 <_malloc_r>:
 800c910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c914:	1ccd      	adds	r5, r1, #3
 800c916:	f025 0503 	bic.w	r5, r5, #3
 800c91a:	3508      	adds	r5, #8
 800c91c:	2d0c      	cmp	r5, #12
 800c91e:	bf38      	it	cc
 800c920:	250c      	movcc	r5, #12
 800c922:	2d00      	cmp	r5, #0
 800c924:	4606      	mov	r6, r0
 800c926:	db01      	blt.n	800c92c <_malloc_r+0x1c>
 800c928:	42a9      	cmp	r1, r5
 800c92a:	d904      	bls.n	800c936 <_malloc_r+0x26>
 800c92c:	230c      	movs	r3, #12
 800c92e:	6033      	str	r3, [r6, #0]
 800c930:	2000      	movs	r0, #0
 800c932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca0c <_malloc_r+0xfc>
 800c93a:	f000 f869 	bl	800ca10 <__malloc_lock>
 800c93e:	f8d8 3000 	ldr.w	r3, [r8]
 800c942:	461c      	mov	r4, r3
 800c944:	bb44      	cbnz	r4, 800c998 <_malloc_r+0x88>
 800c946:	4629      	mov	r1, r5
 800c948:	4630      	mov	r0, r6
 800c94a:	f7ff ffbf 	bl	800c8cc <sbrk_aligned>
 800c94e:	1c43      	adds	r3, r0, #1
 800c950:	4604      	mov	r4, r0
 800c952:	d158      	bne.n	800ca06 <_malloc_r+0xf6>
 800c954:	f8d8 4000 	ldr.w	r4, [r8]
 800c958:	4627      	mov	r7, r4
 800c95a:	2f00      	cmp	r7, #0
 800c95c:	d143      	bne.n	800c9e6 <_malloc_r+0xd6>
 800c95e:	2c00      	cmp	r4, #0
 800c960:	d04b      	beq.n	800c9fa <_malloc_r+0xea>
 800c962:	6823      	ldr	r3, [r4, #0]
 800c964:	4639      	mov	r1, r7
 800c966:	4630      	mov	r0, r6
 800c968:	eb04 0903 	add.w	r9, r4, r3
 800c96c:	f001 fdc2 	bl	800e4f4 <_sbrk_r>
 800c970:	4581      	cmp	r9, r0
 800c972:	d142      	bne.n	800c9fa <_malloc_r+0xea>
 800c974:	6821      	ldr	r1, [r4, #0]
 800c976:	1a6d      	subs	r5, r5, r1
 800c978:	4629      	mov	r1, r5
 800c97a:	4630      	mov	r0, r6
 800c97c:	f7ff ffa6 	bl	800c8cc <sbrk_aligned>
 800c980:	3001      	adds	r0, #1
 800c982:	d03a      	beq.n	800c9fa <_malloc_r+0xea>
 800c984:	6823      	ldr	r3, [r4, #0]
 800c986:	442b      	add	r3, r5
 800c988:	6023      	str	r3, [r4, #0]
 800c98a:	f8d8 3000 	ldr.w	r3, [r8]
 800c98e:	685a      	ldr	r2, [r3, #4]
 800c990:	bb62      	cbnz	r2, 800c9ec <_malloc_r+0xdc>
 800c992:	f8c8 7000 	str.w	r7, [r8]
 800c996:	e00f      	b.n	800c9b8 <_malloc_r+0xa8>
 800c998:	6822      	ldr	r2, [r4, #0]
 800c99a:	1b52      	subs	r2, r2, r5
 800c99c:	d420      	bmi.n	800c9e0 <_malloc_r+0xd0>
 800c99e:	2a0b      	cmp	r2, #11
 800c9a0:	d917      	bls.n	800c9d2 <_malloc_r+0xc2>
 800c9a2:	1961      	adds	r1, r4, r5
 800c9a4:	42a3      	cmp	r3, r4
 800c9a6:	6025      	str	r5, [r4, #0]
 800c9a8:	bf18      	it	ne
 800c9aa:	6059      	strne	r1, [r3, #4]
 800c9ac:	6863      	ldr	r3, [r4, #4]
 800c9ae:	bf08      	it	eq
 800c9b0:	f8c8 1000 	streq.w	r1, [r8]
 800c9b4:	5162      	str	r2, [r4, r5]
 800c9b6:	604b      	str	r3, [r1, #4]
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	f000 f82f 	bl	800ca1c <__malloc_unlock>
 800c9be:	f104 000b 	add.w	r0, r4, #11
 800c9c2:	1d23      	adds	r3, r4, #4
 800c9c4:	f020 0007 	bic.w	r0, r0, #7
 800c9c8:	1ac2      	subs	r2, r0, r3
 800c9ca:	bf1c      	itt	ne
 800c9cc:	1a1b      	subne	r3, r3, r0
 800c9ce:	50a3      	strne	r3, [r4, r2]
 800c9d0:	e7af      	b.n	800c932 <_malloc_r+0x22>
 800c9d2:	6862      	ldr	r2, [r4, #4]
 800c9d4:	42a3      	cmp	r3, r4
 800c9d6:	bf0c      	ite	eq
 800c9d8:	f8c8 2000 	streq.w	r2, [r8]
 800c9dc:	605a      	strne	r2, [r3, #4]
 800c9de:	e7eb      	b.n	800c9b8 <_malloc_r+0xa8>
 800c9e0:	4623      	mov	r3, r4
 800c9e2:	6864      	ldr	r4, [r4, #4]
 800c9e4:	e7ae      	b.n	800c944 <_malloc_r+0x34>
 800c9e6:	463c      	mov	r4, r7
 800c9e8:	687f      	ldr	r7, [r7, #4]
 800c9ea:	e7b6      	b.n	800c95a <_malloc_r+0x4a>
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	42a3      	cmp	r3, r4
 800c9f2:	d1fb      	bne.n	800c9ec <_malloc_r+0xdc>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	6053      	str	r3, [r2, #4]
 800c9f8:	e7de      	b.n	800c9b8 <_malloc_r+0xa8>
 800c9fa:	230c      	movs	r3, #12
 800c9fc:	6033      	str	r3, [r6, #0]
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f000 f80c 	bl	800ca1c <__malloc_unlock>
 800ca04:	e794      	b.n	800c930 <_malloc_r+0x20>
 800ca06:	6005      	str	r5, [r0, #0]
 800ca08:	e7d6      	b.n	800c9b8 <_malloc_r+0xa8>
 800ca0a:	bf00      	nop
 800ca0c:	20000b6c 	.word	0x20000b6c

0800ca10 <__malloc_lock>:
 800ca10:	4801      	ldr	r0, [pc, #4]	@ (800ca18 <__malloc_lock+0x8>)
 800ca12:	f7ff b8b2 	b.w	800bb7a <__retarget_lock_acquire_recursive>
 800ca16:	bf00      	nop
 800ca18:	20000b64 	.word	0x20000b64

0800ca1c <__malloc_unlock>:
 800ca1c:	4801      	ldr	r0, [pc, #4]	@ (800ca24 <__malloc_unlock+0x8>)
 800ca1e:	f7ff b8ad 	b.w	800bb7c <__retarget_lock_release_recursive>
 800ca22:	bf00      	nop
 800ca24:	20000b64 	.word	0x20000b64

0800ca28 <_Balloc>:
 800ca28:	b570      	push	{r4, r5, r6, lr}
 800ca2a:	69c6      	ldr	r6, [r0, #28]
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	460d      	mov	r5, r1
 800ca30:	b976      	cbnz	r6, 800ca50 <_Balloc+0x28>
 800ca32:	2010      	movs	r0, #16
 800ca34:	f7ff ff42 	bl	800c8bc <malloc>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	61e0      	str	r0, [r4, #28]
 800ca3c:	b920      	cbnz	r0, 800ca48 <_Balloc+0x20>
 800ca3e:	4b18      	ldr	r3, [pc, #96]	@ (800caa0 <_Balloc+0x78>)
 800ca40:	4818      	ldr	r0, [pc, #96]	@ (800caa4 <_Balloc+0x7c>)
 800ca42:	216b      	movs	r1, #107	@ 0x6b
 800ca44:	f001 fd7c 	bl	800e540 <__assert_func>
 800ca48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca4c:	6006      	str	r6, [r0, #0]
 800ca4e:	60c6      	str	r6, [r0, #12]
 800ca50:	69e6      	ldr	r6, [r4, #28]
 800ca52:	68f3      	ldr	r3, [r6, #12]
 800ca54:	b183      	cbz	r3, 800ca78 <_Balloc+0x50>
 800ca56:	69e3      	ldr	r3, [r4, #28]
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca5e:	b9b8      	cbnz	r0, 800ca90 <_Balloc+0x68>
 800ca60:	2101      	movs	r1, #1
 800ca62:	fa01 f605 	lsl.w	r6, r1, r5
 800ca66:	1d72      	adds	r2, r6, #5
 800ca68:	0092      	lsls	r2, r2, #2
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f001 fd86 	bl	800e57c <_calloc_r>
 800ca70:	b160      	cbz	r0, 800ca8c <_Balloc+0x64>
 800ca72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca76:	e00e      	b.n	800ca96 <_Balloc+0x6e>
 800ca78:	2221      	movs	r2, #33	@ 0x21
 800ca7a:	2104      	movs	r1, #4
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f001 fd7d 	bl	800e57c <_calloc_r>
 800ca82:	69e3      	ldr	r3, [r4, #28]
 800ca84:	60f0      	str	r0, [r6, #12]
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1e4      	bne.n	800ca56 <_Balloc+0x2e>
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	bd70      	pop	{r4, r5, r6, pc}
 800ca90:	6802      	ldr	r2, [r0, #0]
 800ca92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca96:	2300      	movs	r3, #0
 800ca98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca9c:	e7f7      	b.n	800ca8e <_Balloc+0x66>
 800ca9e:	bf00      	nop
 800caa0:	0800f2ea 	.word	0x0800f2ea
 800caa4:	0800f36a 	.word	0x0800f36a

0800caa8 <_Bfree>:
 800caa8:	b570      	push	{r4, r5, r6, lr}
 800caaa:	69c6      	ldr	r6, [r0, #28]
 800caac:	4605      	mov	r5, r0
 800caae:	460c      	mov	r4, r1
 800cab0:	b976      	cbnz	r6, 800cad0 <_Bfree+0x28>
 800cab2:	2010      	movs	r0, #16
 800cab4:	f7ff ff02 	bl	800c8bc <malloc>
 800cab8:	4602      	mov	r2, r0
 800caba:	61e8      	str	r0, [r5, #28]
 800cabc:	b920      	cbnz	r0, 800cac8 <_Bfree+0x20>
 800cabe:	4b09      	ldr	r3, [pc, #36]	@ (800cae4 <_Bfree+0x3c>)
 800cac0:	4809      	ldr	r0, [pc, #36]	@ (800cae8 <_Bfree+0x40>)
 800cac2:	218f      	movs	r1, #143	@ 0x8f
 800cac4:	f001 fd3c 	bl	800e540 <__assert_func>
 800cac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cacc:	6006      	str	r6, [r0, #0]
 800cace:	60c6      	str	r6, [r0, #12]
 800cad0:	b13c      	cbz	r4, 800cae2 <_Bfree+0x3a>
 800cad2:	69eb      	ldr	r3, [r5, #28]
 800cad4:	6862      	ldr	r2, [r4, #4]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cadc:	6021      	str	r1, [r4, #0]
 800cade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cae2:	bd70      	pop	{r4, r5, r6, pc}
 800cae4:	0800f2ea 	.word	0x0800f2ea
 800cae8:	0800f36a 	.word	0x0800f36a

0800caec <__multadd>:
 800caec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caf0:	690d      	ldr	r5, [r1, #16]
 800caf2:	4607      	mov	r7, r0
 800caf4:	460c      	mov	r4, r1
 800caf6:	461e      	mov	r6, r3
 800caf8:	f101 0c14 	add.w	ip, r1, #20
 800cafc:	2000      	movs	r0, #0
 800cafe:	f8dc 3000 	ldr.w	r3, [ip]
 800cb02:	b299      	uxth	r1, r3
 800cb04:	fb02 6101 	mla	r1, r2, r1, r6
 800cb08:	0c1e      	lsrs	r6, r3, #16
 800cb0a:	0c0b      	lsrs	r3, r1, #16
 800cb0c:	fb02 3306 	mla	r3, r2, r6, r3
 800cb10:	b289      	uxth	r1, r1
 800cb12:	3001      	adds	r0, #1
 800cb14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb18:	4285      	cmp	r5, r0
 800cb1a:	f84c 1b04 	str.w	r1, [ip], #4
 800cb1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb22:	dcec      	bgt.n	800cafe <__multadd+0x12>
 800cb24:	b30e      	cbz	r6, 800cb6a <__multadd+0x7e>
 800cb26:	68a3      	ldr	r3, [r4, #8]
 800cb28:	42ab      	cmp	r3, r5
 800cb2a:	dc19      	bgt.n	800cb60 <__multadd+0x74>
 800cb2c:	6861      	ldr	r1, [r4, #4]
 800cb2e:	4638      	mov	r0, r7
 800cb30:	3101      	adds	r1, #1
 800cb32:	f7ff ff79 	bl	800ca28 <_Balloc>
 800cb36:	4680      	mov	r8, r0
 800cb38:	b928      	cbnz	r0, 800cb46 <__multadd+0x5a>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	4b0c      	ldr	r3, [pc, #48]	@ (800cb70 <__multadd+0x84>)
 800cb3e:	480d      	ldr	r0, [pc, #52]	@ (800cb74 <__multadd+0x88>)
 800cb40:	21ba      	movs	r1, #186	@ 0xba
 800cb42:	f001 fcfd 	bl	800e540 <__assert_func>
 800cb46:	6922      	ldr	r2, [r4, #16]
 800cb48:	3202      	adds	r2, #2
 800cb4a:	f104 010c 	add.w	r1, r4, #12
 800cb4e:	0092      	lsls	r2, r2, #2
 800cb50:	300c      	adds	r0, #12
 800cb52:	f001 fcdf 	bl	800e514 <memcpy>
 800cb56:	4621      	mov	r1, r4
 800cb58:	4638      	mov	r0, r7
 800cb5a:	f7ff ffa5 	bl	800caa8 <_Bfree>
 800cb5e:	4644      	mov	r4, r8
 800cb60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb64:	3501      	adds	r5, #1
 800cb66:	615e      	str	r6, [r3, #20]
 800cb68:	6125      	str	r5, [r4, #16]
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb70:	0800f359 	.word	0x0800f359
 800cb74:	0800f36a 	.word	0x0800f36a

0800cb78 <__s2b>:
 800cb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb7c:	460c      	mov	r4, r1
 800cb7e:	4615      	mov	r5, r2
 800cb80:	461f      	mov	r7, r3
 800cb82:	2209      	movs	r2, #9
 800cb84:	3308      	adds	r3, #8
 800cb86:	4606      	mov	r6, r0
 800cb88:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	2201      	movs	r2, #1
 800cb90:	429a      	cmp	r2, r3
 800cb92:	db09      	blt.n	800cba8 <__s2b+0x30>
 800cb94:	4630      	mov	r0, r6
 800cb96:	f7ff ff47 	bl	800ca28 <_Balloc>
 800cb9a:	b940      	cbnz	r0, 800cbae <__s2b+0x36>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	4b19      	ldr	r3, [pc, #100]	@ (800cc04 <__s2b+0x8c>)
 800cba0:	4819      	ldr	r0, [pc, #100]	@ (800cc08 <__s2b+0x90>)
 800cba2:	21d3      	movs	r1, #211	@ 0xd3
 800cba4:	f001 fccc 	bl	800e540 <__assert_func>
 800cba8:	0052      	lsls	r2, r2, #1
 800cbaa:	3101      	adds	r1, #1
 800cbac:	e7f0      	b.n	800cb90 <__s2b+0x18>
 800cbae:	9b08      	ldr	r3, [sp, #32]
 800cbb0:	6143      	str	r3, [r0, #20]
 800cbb2:	2d09      	cmp	r5, #9
 800cbb4:	f04f 0301 	mov.w	r3, #1
 800cbb8:	6103      	str	r3, [r0, #16]
 800cbba:	dd16      	ble.n	800cbea <__s2b+0x72>
 800cbbc:	f104 0909 	add.w	r9, r4, #9
 800cbc0:	46c8      	mov	r8, r9
 800cbc2:	442c      	add	r4, r5
 800cbc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cbc8:	4601      	mov	r1, r0
 800cbca:	3b30      	subs	r3, #48	@ 0x30
 800cbcc:	220a      	movs	r2, #10
 800cbce:	4630      	mov	r0, r6
 800cbd0:	f7ff ff8c 	bl	800caec <__multadd>
 800cbd4:	45a0      	cmp	r8, r4
 800cbd6:	d1f5      	bne.n	800cbc4 <__s2b+0x4c>
 800cbd8:	f1a5 0408 	sub.w	r4, r5, #8
 800cbdc:	444c      	add	r4, r9
 800cbde:	1b2d      	subs	r5, r5, r4
 800cbe0:	1963      	adds	r3, r4, r5
 800cbe2:	42bb      	cmp	r3, r7
 800cbe4:	db04      	blt.n	800cbf0 <__s2b+0x78>
 800cbe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbea:	340a      	adds	r4, #10
 800cbec:	2509      	movs	r5, #9
 800cbee:	e7f6      	b.n	800cbde <__s2b+0x66>
 800cbf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cbf4:	4601      	mov	r1, r0
 800cbf6:	3b30      	subs	r3, #48	@ 0x30
 800cbf8:	220a      	movs	r2, #10
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	f7ff ff76 	bl	800caec <__multadd>
 800cc00:	e7ee      	b.n	800cbe0 <__s2b+0x68>
 800cc02:	bf00      	nop
 800cc04:	0800f359 	.word	0x0800f359
 800cc08:	0800f36a 	.word	0x0800f36a

0800cc0c <__hi0bits>:
 800cc0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc10:	4603      	mov	r3, r0
 800cc12:	bf36      	itet	cc
 800cc14:	0403      	lslcc	r3, r0, #16
 800cc16:	2000      	movcs	r0, #0
 800cc18:	2010      	movcc	r0, #16
 800cc1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc1e:	bf3c      	itt	cc
 800cc20:	021b      	lslcc	r3, r3, #8
 800cc22:	3008      	addcc	r0, #8
 800cc24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc28:	bf3c      	itt	cc
 800cc2a:	011b      	lslcc	r3, r3, #4
 800cc2c:	3004      	addcc	r0, #4
 800cc2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc32:	bf3c      	itt	cc
 800cc34:	009b      	lslcc	r3, r3, #2
 800cc36:	3002      	addcc	r0, #2
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	db05      	blt.n	800cc48 <__hi0bits+0x3c>
 800cc3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc40:	f100 0001 	add.w	r0, r0, #1
 800cc44:	bf08      	it	eq
 800cc46:	2020      	moveq	r0, #32
 800cc48:	4770      	bx	lr

0800cc4a <__lo0bits>:
 800cc4a:	6803      	ldr	r3, [r0, #0]
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	f013 0007 	ands.w	r0, r3, #7
 800cc52:	d00b      	beq.n	800cc6c <__lo0bits+0x22>
 800cc54:	07d9      	lsls	r1, r3, #31
 800cc56:	d421      	bmi.n	800cc9c <__lo0bits+0x52>
 800cc58:	0798      	lsls	r0, r3, #30
 800cc5a:	bf49      	itett	mi
 800cc5c:	085b      	lsrmi	r3, r3, #1
 800cc5e:	089b      	lsrpl	r3, r3, #2
 800cc60:	2001      	movmi	r0, #1
 800cc62:	6013      	strmi	r3, [r2, #0]
 800cc64:	bf5c      	itt	pl
 800cc66:	6013      	strpl	r3, [r2, #0]
 800cc68:	2002      	movpl	r0, #2
 800cc6a:	4770      	bx	lr
 800cc6c:	b299      	uxth	r1, r3
 800cc6e:	b909      	cbnz	r1, 800cc74 <__lo0bits+0x2a>
 800cc70:	0c1b      	lsrs	r3, r3, #16
 800cc72:	2010      	movs	r0, #16
 800cc74:	b2d9      	uxtb	r1, r3
 800cc76:	b909      	cbnz	r1, 800cc7c <__lo0bits+0x32>
 800cc78:	3008      	adds	r0, #8
 800cc7a:	0a1b      	lsrs	r3, r3, #8
 800cc7c:	0719      	lsls	r1, r3, #28
 800cc7e:	bf04      	itt	eq
 800cc80:	091b      	lsreq	r3, r3, #4
 800cc82:	3004      	addeq	r0, #4
 800cc84:	0799      	lsls	r1, r3, #30
 800cc86:	bf04      	itt	eq
 800cc88:	089b      	lsreq	r3, r3, #2
 800cc8a:	3002      	addeq	r0, #2
 800cc8c:	07d9      	lsls	r1, r3, #31
 800cc8e:	d403      	bmi.n	800cc98 <__lo0bits+0x4e>
 800cc90:	085b      	lsrs	r3, r3, #1
 800cc92:	f100 0001 	add.w	r0, r0, #1
 800cc96:	d003      	beq.n	800cca0 <__lo0bits+0x56>
 800cc98:	6013      	str	r3, [r2, #0]
 800cc9a:	4770      	bx	lr
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	4770      	bx	lr
 800cca0:	2020      	movs	r0, #32
 800cca2:	4770      	bx	lr

0800cca4 <__i2b>:
 800cca4:	b510      	push	{r4, lr}
 800cca6:	460c      	mov	r4, r1
 800cca8:	2101      	movs	r1, #1
 800ccaa:	f7ff febd 	bl	800ca28 <_Balloc>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	b928      	cbnz	r0, 800ccbe <__i2b+0x1a>
 800ccb2:	4b05      	ldr	r3, [pc, #20]	@ (800ccc8 <__i2b+0x24>)
 800ccb4:	4805      	ldr	r0, [pc, #20]	@ (800cccc <__i2b+0x28>)
 800ccb6:	f240 1145 	movw	r1, #325	@ 0x145
 800ccba:	f001 fc41 	bl	800e540 <__assert_func>
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	6144      	str	r4, [r0, #20]
 800ccc2:	6103      	str	r3, [r0, #16]
 800ccc4:	bd10      	pop	{r4, pc}
 800ccc6:	bf00      	nop
 800ccc8:	0800f359 	.word	0x0800f359
 800cccc:	0800f36a 	.word	0x0800f36a

0800ccd0 <__multiply>:
 800ccd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd4:	4614      	mov	r4, r2
 800ccd6:	690a      	ldr	r2, [r1, #16]
 800ccd8:	6923      	ldr	r3, [r4, #16]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	bfa8      	it	ge
 800ccde:	4623      	movge	r3, r4
 800cce0:	460f      	mov	r7, r1
 800cce2:	bfa4      	itt	ge
 800cce4:	460c      	movge	r4, r1
 800cce6:	461f      	movge	r7, r3
 800cce8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ccec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ccf0:	68a3      	ldr	r3, [r4, #8]
 800ccf2:	6861      	ldr	r1, [r4, #4]
 800ccf4:	eb0a 0609 	add.w	r6, sl, r9
 800ccf8:	42b3      	cmp	r3, r6
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	bfb8      	it	lt
 800ccfe:	3101      	addlt	r1, #1
 800cd00:	f7ff fe92 	bl	800ca28 <_Balloc>
 800cd04:	b930      	cbnz	r0, 800cd14 <__multiply+0x44>
 800cd06:	4602      	mov	r2, r0
 800cd08:	4b44      	ldr	r3, [pc, #272]	@ (800ce1c <__multiply+0x14c>)
 800cd0a:	4845      	ldr	r0, [pc, #276]	@ (800ce20 <__multiply+0x150>)
 800cd0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd10:	f001 fc16 	bl	800e540 <__assert_func>
 800cd14:	f100 0514 	add.w	r5, r0, #20
 800cd18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd1c:	462b      	mov	r3, r5
 800cd1e:	2200      	movs	r2, #0
 800cd20:	4543      	cmp	r3, r8
 800cd22:	d321      	bcc.n	800cd68 <__multiply+0x98>
 800cd24:	f107 0114 	add.w	r1, r7, #20
 800cd28:	f104 0214 	add.w	r2, r4, #20
 800cd2c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cd30:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cd34:	9302      	str	r3, [sp, #8]
 800cd36:	1b13      	subs	r3, r2, r4
 800cd38:	3b15      	subs	r3, #21
 800cd3a:	f023 0303 	bic.w	r3, r3, #3
 800cd3e:	3304      	adds	r3, #4
 800cd40:	f104 0715 	add.w	r7, r4, #21
 800cd44:	42ba      	cmp	r2, r7
 800cd46:	bf38      	it	cc
 800cd48:	2304      	movcc	r3, #4
 800cd4a:	9301      	str	r3, [sp, #4]
 800cd4c:	9b02      	ldr	r3, [sp, #8]
 800cd4e:	9103      	str	r1, [sp, #12]
 800cd50:	428b      	cmp	r3, r1
 800cd52:	d80c      	bhi.n	800cd6e <__multiply+0x9e>
 800cd54:	2e00      	cmp	r6, #0
 800cd56:	dd03      	ble.n	800cd60 <__multiply+0x90>
 800cd58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d05b      	beq.n	800ce18 <__multiply+0x148>
 800cd60:	6106      	str	r6, [r0, #16]
 800cd62:	b005      	add	sp, #20
 800cd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd68:	f843 2b04 	str.w	r2, [r3], #4
 800cd6c:	e7d8      	b.n	800cd20 <__multiply+0x50>
 800cd6e:	f8b1 a000 	ldrh.w	sl, [r1]
 800cd72:	f1ba 0f00 	cmp.w	sl, #0
 800cd76:	d024      	beq.n	800cdc2 <__multiply+0xf2>
 800cd78:	f104 0e14 	add.w	lr, r4, #20
 800cd7c:	46a9      	mov	r9, r5
 800cd7e:	f04f 0c00 	mov.w	ip, #0
 800cd82:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd86:	f8d9 3000 	ldr.w	r3, [r9]
 800cd8a:	fa1f fb87 	uxth.w	fp, r7
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd94:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cd98:	f8d9 7000 	ldr.w	r7, [r9]
 800cd9c:	4463      	add	r3, ip
 800cd9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cda2:	fb0a c70b 	mla	r7, sl, fp, ip
 800cda6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cdb0:	4572      	cmp	r2, lr
 800cdb2:	f849 3b04 	str.w	r3, [r9], #4
 800cdb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cdba:	d8e2      	bhi.n	800cd82 <__multiply+0xb2>
 800cdbc:	9b01      	ldr	r3, [sp, #4]
 800cdbe:	f845 c003 	str.w	ip, [r5, r3]
 800cdc2:	9b03      	ldr	r3, [sp, #12]
 800cdc4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cdc8:	3104      	adds	r1, #4
 800cdca:	f1b9 0f00 	cmp.w	r9, #0
 800cdce:	d021      	beq.n	800ce14 <__multiply+0x144>
 800cdd0:	682b      	ldr	r3, [r5, #0]
 800cdd2:	f104 0c14 	add.w	ip, r4, #20
 800cdd6:	46ae      	mov	lr, r5
 800cdd8:	f04f 0a00 	mov.w	sl, #0
 800cddc:	f8bc b000 	ldrh.w	fp, [ip]
 800cde0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cde4:	fb09 770b 	mla	r7, r9, fp, r7
 800cde8:	4457      	add	r7, sl
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cdf0:	f84e 3b04 	str.w	r3, [lr], #4
 800cdf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cdf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdfc:	f8be 3000 	ldrh.w	r3, [lr]
 800ce00:	fb09 330a 	mla	r3, r9, sl, r3
 800ce04:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ce08:	4562      	cmp	r2, ip
 800ce0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce0e:	d8e5      	bhi.n	800cddc <__multiply+0x10c>
 800ce10:	9f01      	ldr	r7, [sp, #4]
 800ce12:	51eb      	str	r3, [r5, r7]
 800ce14:	3504      	adds	r5, #4
 800ce16:	e799      	b.n	800cd4c <__multiply+0x7c>
 800ce18:	3e01      	subs	r6, #1
 800ce1a:	e79b      	b.n	800cd54 <__multiply+0x84>
 800ce1c:	0800f359 	.word	0x0800f359
 800ce20:	0800f36a 	.word	0x0800f36a

0800ce24 <__pow5mult>:
 800ce24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce28:	4615      	mov	r5, r2
 800ce2a:	f012 0203 	ands.w	r2, r2, #3
 800ce2e:	4607      	mov	r7, r0
 800ce30:	460e      	mov	r6, r1
 800ce32:	d007      	beq.n	800ce44 <__pow5mult+0x20>
 800ce34:	4c25      	ldr	r4, [pc, #148]	@ (800cecc <__pow5mult+0xa8>)
 800ce36:	3a01      	subs	r2, #1
 800ce38:	2300      	movs	r3, #0
 800ce3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce3e:	f7ff fe55 	bl	800caec <__multadd>
 800ce42:	4606      	mov	r6, r0
 800ce44:	10ad      	asrs	r5, r5, #2
 800ce46:	d03d      	beq.n	800cec4 <__pow5mult+0xa0>
 800ce48:	69fc      	ldr	r4, [r7, #28]
 800ce4a:	b97c      	cbnz	r4, 800ce6c <__pow5mult+0x48>
 800ce4c:	2010      	movs	r0, #16
 800ce4e:	f7ff fd35 	bl	800c8bc <malloc>
 800ce52:	4602      	mov	r2, r0
 800ce54:	61f8      	str	r0, [r7, #28]
 800ce56:	b928      	cbnz	r0, 800ce64 <__pow5mult+0x40>
 800ce58:	4b1d      	ldr	r3, [pc, #116]	@ (800ced0 <__pow5mult+0xac>)
 800ce5a:	481e      	ldr	r0, [pc, #120]	@ (800ced4 <__pow5mult+0xb0>)
 800ce5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ce60:	f001 fb6e 	bl	800e540 <__assert_func>
 800ce64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce68:	6004      	str	r4, [r0, #0]
 800ce6a:	60c4      	str	r4, [r0, #12]
 800ce6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ce70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce74:	b94c      	cbnz	r4, 800ce8a <__pow5mult+0x66>
 800ce76:	f240 2171 	movw	r1, #625	@ 0x271
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	f7ff ff12 	bl	800cca4 <__i2b>
 800ce80:	2300      	movs	r3, #0
 800ce82:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce86:	4604      	mov	r4, r0
 800ce88:	6003      	str	r3, [r0, #0]
 800ce8a:	f04f 0900 	mov.w	r9, #0
 800ce8e:	07eb      	lsls	r3, r5, #31
 800ce90:	d50a      	bpl.n	800cea8 <__pow5mult+0x84>
 800ce92:	4631      	mov	r1, r6
 800ce94:	4622      	mov	r2, r4
 800ce96:	4638      	mov	r0, r7
 800ce98:	f7ff ff1a 	bl	800ccd0 <__multiply>
 800ce9c:	4631      	mov	r1, r6
 800ce9e:	4680      	mov	r8, r0
 800cea0:	4638      	mov	r0, r7
 800cea2:	f7ff fe01 	bl	800caa8 <_Bfree>
 800cea6:	4646      	mov	r6, r8
 800cea8:	106d      	asrs	r5, r5, #1
 800ceaa:	d00b      	beq.n	800cec4 <__pow5mult+0xa0>
 800ceac:	6820      	ldr	r0, [r4, #0]
 800ceae:	b938      	cbnz	r0, 800cec0 <__pow5mult+0x9c>
 800ceb0:	4622      	mov	r2, r4
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	4638      	mov	r0, r7
 800ceb6:	f7ff ff0b 	bl	800ccd0 <__multiply>
 800ceba:	6020      	str	r0, [r4, #0]
 800cebc:	f8c0 9000 	str.w	r9, [r0]
 800cec0:	4604      	mov	r4, r0
 800cec2:	e7e4      	b.n	800ce8e <__pow5mult+0x6a>
 800cec4:	4630      	mov	r0, r6
 800cec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceca:	bf00      	nop
 800cecc:	0800f3c4 	.word	0x0800f3c4
 800ced0:	0800f2ea 	.word	0x0800f2ea
 800ced4:	0800f36a 	.word	0x0800f36a

0800ced8 <__lshift>:
 800ced8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cedc:	460c      	mov	r4, r1
 800cede:	6849      	ldr	r1, [r1, #4]
 800cee0:	6923      	ldr	r3, [r4, #16]
 800cee2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cee6:	68a3      	ldr	r3, [r4, #8]
 800cee8:	4607      	mov	r7, r0
 800ceea:	4691      	mov	r9, r2
 800ceec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cef0:	f108 0601 	add.w	r6, r8, #1
 800cef4:	42b3      	cmp	r3, r6
 800cef6:	db0b      	blt.n	800cf10 <__lshift+0x38>
 800cef8:	4638      	mov	r0, r7
 800cefa:	f7ff fd95 	bl	800ca28 <_Balloc>
 800cefe:	4605      	mov	r5, r0
 800cf00:	b948      	cbnz	r0, 800cf16 <__lshift+0x3e>
 800cf02:	4602      	mov	r2, r0
 800cf04:	4b28      	ldr	r3, [pc, #160]	@ (800cfa8 <__lshift+0xd0>)
 800cf06:	4829      	ldr	r0, [pc, #164]	@ (800cfac <__lshift+0xd4>)
 800cf08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf0c:	f001 fb18 	bl	800e540 <__assert_func>
 800cf10:	3101      	adds	r1, #1
 800cf12:	005b      	lsls	r3, r3, #1
 800cf14:	e7ee      	b.n	800cef4 <__lshift+0x1c>
 800cf16:	2300      	movs	r3, #0
 800cf18:	f100 0114 	add.w	r1, r0, #20
 800cf1c:	f100 0210 	add.w	r2, r0, #16
 800cf20:	4618      	mov	r0, r3
 800cf22:	4553      	cmp	r3, sl
 800cf24:	db33      	blt.n	800cf8e <__lshift+0xb6>
 800cf26:	6920      	ldr	r0, [r4, #16]
 800cf28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf2c:	f104 0314 	add.w	r3, r4, #20
 800cf30:	f019 091f 	ands.w	r9, r9, #31
 800cf34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf3c:	d02b      	beq.n	800cf96 <__lshift+0xbe>
 800cf3e:	f1c9 0e20 	rsb	lr, r9, #32
 800cf42:	468a      	mov	sl, r1
 800cf44:	2200      	movs	r2, #0
 800cf46:	6818      	ldr	r0, [r3, #0]
 800cf48:	fa00 f009 	lsl.w	r0, r0, r9
 800cf4c:	4310      	orrs	r0, r2
 800cf4e:	f84a 0b04 	str.w	r0, [sl], #4
 800cf52:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf56:	459c      	cmp	ip, r3
 800cf58:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf5c:	d8f3      	bhi.n	800cf46 <__lshift+0x6e>
 800cf5e:	ebac 0304 	sub.w	r3, ip, r4
 800cf62:	3b15      	subs	r3, #21
 800cf64:	f023 0303 	bic.w	r3, r3, #3
 800cf68:	3304      	adds	r3, #4
 800cf6a:	f104 0015 	add.w	r0, r4, #21
 800cf6e:	4584      	cmp	ip, r0
 800cf70:	bf38      	it	cc
 800cf72:	2304      	movcc	r3, #4
 800cf74:	50ca      	str	r2, [r1, r3]
 800cf76:	b10a      	cbz	r2, 800cf7c <__lshift+0xa4>
 800cf78:	f108 0602 	add.w	r6, r8, #2
 800cf7c:	3e01      	subs	r6, #1
 800cf7e:	4638      	mov	r0, r7
 800cf80:	612e      	str	r6, [r5, #16]
 800cf82:	4621      	mov	r1, r4
 800cf84:	f7ff fd90 	bl	800caa8 <_Bfree>
 800cf88:	4628      	mov	r0, r5
 800cf8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf8e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf92:	3301      	adds	r3, #1
 800cf94:	e7c5      	b.n	800cf22 <__lshift+0x4a>
 800cf96:	3904      	subs	r1, #4
 800cf98:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf9c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfa0:	459c      	cmp	ip, r3
 800cfa2:	d8f9      	bhi.n	800cf98 <__lshift+0xc0>
 800cfa4:	e7ea      	b.n	800cf7c <__lshift+0xa4>
 800cfa6:	bf00      	nop
 800cfa8:	0800f359 	.word	0x0800f359
 800cfac:	0800f36a 	.word	0x0800f36a

0800cfb0 <__mcmp>:
 800cfb0:	690a      	ldr	r2, [r1, #16]
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	6900      	ldr	r0, [r0, #16]
 800cfb6:	1a80      	subs	r0, r0, r2
 800cfb8:	b530      	push	{r4, r5, lr}
 800cfba:	d10e      	bne.n	800cfda <__mcmp+0x2a>
 800cfbc:	3314      	adds	r3, #20
 800cfbe:	3114      	adds	r1, #20
 800cfc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cfc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cfc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cfcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cfd0:	4295      	cmp	r5, r2
 800cfd2:	d003      	beq.n	800cfdc <__mcmp+0x2c>
 800cfd4:	d205      	bcs.n	800cfe2 <__mcmp+0x32>
 800cfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfda:	bd30      	pop	{r4, r5, pc}
 800cfdc:	42a3      	cmp	r3, r4
 800cfde:	d3f3      	bcc.n	800cfc8 <__mcmp+0x18>
 800cfe0:	e7fb      	b.n	800cfda <__mcmp+0x2a>
 800cfe2:	2001      	movs	r0, #1
 800cfe4:	e7f9      	b.n	800cfda <__mcmp+0x2a>
	...

0800cfe8 <__mdiff>:
 800cfe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfec:	4689      	mov	r9, r1
 800cfee:	4606      	mov	r6, r0
 800cff0:	4611      	mov	r1, r2
 800cff2:	4648      	mov	r0, r9
 800cff4:	4614      	mov	r4, r2
 800cff6:	f7ff ffdb 	bl	800cfb0 <__mcmp>
 800cffa:	1e05      	subs	r5, r0, #0
 800cffc:	d112      	bne.n	800d024 <__mdiff+0x3c>
 800cffe:	4629      	mov	r1, r5
 800d000:	4630      	mov	r0, r6
 800d002:	f7ff fd11 	bl	800ca28 <_Balloc>
 800d006:	4602      	mov	r2, r0
 800d008:	b928      	cbnz	r0, 800d016 <__mdiff+0x2e>
 800d00a:	4b3f      	ldr	r3, [pc, #252]	@ (800d108 <__mdiff+0x120>)
 800d00c:	f240 2137 	movw	r1, #567	@ 0x237
 800d010:	483e      	ldr	r0, [pc, #248]	@ (800d10c <__mdiff+0x124>)
 800d012:	f001 fa95 	bl	800e540 <__assert_func>
 800d016:	2301      	movs	r3, #1
 800d018:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d01c:	4610      	mov	r0, r2
 800d01e:	b003      	add	sp, #12
 800d020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d024:	bfbc      	itt	lt
 800d026:	464b      	movlt	r3, r9
 800d028:	46a1      	movlt	r9, r4
 800d02a:	4630      	mov	r0, r6
 800d02c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d030:	bfba      	itte	lt
 800d032:	461c      	movlt	r4, r3
 800d034:	2501      	movlt	r5, #1
 800d036:	2500      	movge	r5, #0
 800d038:	f7ff fcf6 	bl	800ca28 <_Balloc>
 800d03c:	4602      	mov	r2, r0
 800d03e:	b918      	cbnz	r0, 800d048 <__mdiff+0x60>
 800d040:	4b31      	ldr	r3, [pc, #196]	@ (800d108 <__mdiff+0x120>)
 800d042:	f240 2145 	movw	r1, #581	@ 0x245
 800d046:	e7e3      	b.n	800d010 <__mdiff+0x28>
 800d048:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d04c:	6926      	ldr	r6, [r4, #16]
 800d04e:	60c5      	str	r5, [r0, #12]
 800d050:	f109 0310 	add.w	r3, r9, #16
 800d054:	f109 0514 	add.w	r5, r9, #20
 800d058:	f104 0e14 	add.w	lr, r4, #20
 800d05c:	f100 0b14 	add.w	fp, r0, #20
 800d060:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d064:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	46d9      	mov	r9, fp
 800d06c:	f04f 0c00 	mov.w	ip, #0
 800d070:	9b01      	ldr	r3, [sp, #4]
 800d072:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d076:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d07a:	9301      	str	r3, [sp, #4]
 800d07c:	fa1f f38a 	uxth.w	r3, sl
 800d080:	4619      	mov	r1, r3
 800d082:	b283      	uxth	r3, r0
 800d084:	1acb      	subs	r3, r1, r3
 800d086:	0c00      	lsrs	r0, r0, #16
 800d088:	4463      	add	r3, ip
 800d08a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d08e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d092:	b29b      	uxth	r3, r3
 800d094:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d098:	4576      	cmp	r6, lr
 800d09a:	f849 3b04 	str.w	r3, [r9], #4
 800d09e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0a2:	d8e5      	bhi.n	800d070 <__mdiff+0x88>
 800d0a4:	1b33      	subs	r3, r6, r4
 800d0a6:	3b15      	subs	r3, #21
 800d0a8:	f023 0303 	bic.w	r3, r3, #3
 800d0ac:	3415      	adds	r4, #21
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	42a6      	cmp	r6, r4
 800d0b2:	bf38      	it	cc
 800d0b4:	2304      	movcc	r3, #4
 800d0b6:	441d      	add	r5, r3
 800d0b8:	445b      	add	r3, fp
 800d0ba:	461e      	mov	r6, r3
 800d0bc:	462c      	mov	r4, r5
 800d0be:	4544      	cmp	r4, r8
 800d0c0:	d30e      	bcc.n	800d0e0 <__mdiff+0xf8>
 800d0c2:	f108 0103 	add.w	r1, r8, #3
 800d0c6:	1b49      	subs	r1, r1, r5
 800d0c8:	f021 0103 	bic.w	r1, r1, #3
 800d0cc:	3d03      	subs	r5, #3
 800d0ce:	45a8      	cmp	r8, r5
 800d0d0:	bf38      	it	cc
 800d0d2:	2100      	movcc	r1, #0
 800d0d4:	440b      	add	r3, r1
 800d0d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d0da:	b191      	cbz	r1, 800d102 <__mdiff+0x11a>
 800d0dc:	6117      	str	r7, [r2, #16]
 800d0de:	e79d      	b.n	800d01c <__mdiff+0x34>
 800d0e0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d0e4:	46e6      	mov	lr, ip
 800d0e6:	0c08      	lsrs	r0, r1, #16
 800d0e8:	fa1c fc81 	uxtah	ip, ip, r1
 800d0ec:	4471      	add	r1, lr
 800d0ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d0f2:	b289      	uxth	r1, r1
 800d0f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d0f8:	f846 1b04 	str.w	r1, [r6], #4
 800d0fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d100:	e7dd      	b.n	800d0be <__mdiff+0xd6>
 800d102:	3f01      	subs	r7, #1
 800d104:	e7e7      	b.n	800d0d6 <__mdiff+0xee>
 800d106:	bf00      	nop
 800d108:	0800f359 	.word	0x0800f359
 800d10c:	0800f36a 	.word	0x0800f36a

0800d110 <__ulp>:
 800d110:	b082      	sub	sp, #8
 800d112:	ed8d 0b00 	vstr	d0, [sp]
 800d116:	9a01      	ldr	r2, [sp, #4]
 800d118:	4b0f      	ldr	r3, [pc, #60]	@ (800d158 <__ulp+0x48>)
 800d11a:	4013      	ands	r3, r2
 800d11c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d120:	2b00      	cmp	r3, #0
 800d122:	dc08      	bgt.n	800d136 <__ulp+0x26>
 800d124:	425b      	negs	r3, r3
 800d126:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d12a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d12e:	da04      	bge.n	800d13a <__ulp+0x2a>
 800d130:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d134:	4113      	asrs	r3, r2
 800d136:	2200      	movs	r2, #0
 800d138:	e008      	b.n	800d14c <__ulp+0x3c>
 800d13a:	f1a2 0314 	sub.w	r3, r2, #20
 800d13e:	2b1e      	cmp	r3, #30
 800d140:	bfda      	itte	le
 800d142:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d146:	40da      	lsrle	r2, r3
 800d148:	2201      	movgt	r2, #1
 800d14a:	2300      	movs	r3, #0
 800d14c:	4619      	mov	r1, r3
 800d14e:	4610      	mov	r0, r2
 800d150:	ec41 0b10 	vmov	d0, r0, r1
 800d154:	b002      	add	sp, #8
 800d156:	4770      	bx	lr
 800d158:	7ff00000 	.word	0x7ff00000

0800d15c <__b2d>:
 800d15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d160:	6906      	ldr	r6, [r0, #16]
 800d162:	f100 0814 	add.w	r8, r0, #20
 800d166:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d16a:	1f37      	subs	r7, r6, #4
 800d16c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d170:	4610      	mov	r0, r2
 800d172:	f7ff fd4b 	bl	800cc0c <__hi0bits>
 800d176:	f1c0 0320 	rsb	r3, r0, #32
 800d17a:	280a      	cmp	r0, #10
 800d17c:	600b      	str	r3, [r1, #0]
 800d17e:	491b      	ldr	r1, [pc, #108]	@ (800d1ec <__b2d+0x90>)
 800d180:	dc15      	bgt.n	800d1ae <__b2d+0x52>
 800d182:	f1c0 0c0b 	rsb	ip, r0, #11
 800d186:	fa22 f30c 	lsr.w	r3, r2, ip
 800d18a:	45b8      	cmp	r8, r7
 800d18c:	ea43 0501 	orr.w	r5, r3, r1
 800d190:	bf34      	ite	cc
 800d192:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d196:	2300      	movcs	r3, #0
 800d198:	3015      	adds	r0, #21
 800d19a:	fa02 f000 	lsl.w	r0, r2, r0
 800d19e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d1a2:	4303      	orrs	r3, r0
 800d1a4:	461c      	mov	r4, r3
 800d1a6:	ec45 4b10 	vmov	d0, r4, r5
 800d1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ae:	45b8      	cmp	r8, r7
 800d1b0:	bf3a      	itte	cc
 800d1b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d1b6:	f1a6 0708 	subcc.w	r7, r6, #8
 800d1ba:	2300      	movcs	r3, #0
 800d1bc:	380b      	subs	r0, #11
 800d1be:	d012      	beq.n	800d1e6 <__b2d+0x8a>
 800d1c0:	f1c0 0120 	rsb	r1, r0, #32
 800d1c4:	fa23 f401 	lsr.w	r4, r3, r1
 800d1c8:	4082      	lsls	r2, r0
 800d1ca:	4322      	orrs	r2, r4
 800d1cc:	4547      	cmp	r7, r8
 800d1ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d1d2:	bf8c      	ite	hi
 800d1d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d1d8:	2200      	movls	r2, #0
 800d1da:	4083      	lsls	r3, r0
 800d1dc:	40ca      	lsrs	r2, r1
 800d1de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	e7de      	b.n	800d1a4 <__b2d+0x48>
 800d1e6:	ea42 0501 	orr.w	r5, r2, r1
 800d1ea:	e7db      	b.n	800d1a4 <__b2d+0x48>
 800d1ec:	3ff00000 	.word	0x3ff00000

0800d1f0 <__d2b>:
 800d1f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1f4:	460f      	mov	r7, r1
 800d1f6:	2101      	movs	r1, #1
 800d1f8:	ec59 8b10 	vmov	r8, r9, d0
 800d1fc:	4616      	mov	r6, r2
 800d1fe:	f7ff fc13 	bl	800ca28 <_Balloc>
 800d202:	4604      	mov	r4, r0
 800d204:	b930      	cbnz	r0, 800d214 <__d2b+0x24>
 800d206:	4602      	mov	r2, r0
 800d208:	4b23      	ldr	r3, [pc, #140]	@ (800d298 <__d2b+0xa8>)
 800d20a:	4824      	ldr	r0, [pc, #144]	@ (800d29c <__d2b+0xac>)
 800d20c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d210:	f001 f996 	bl	800e540 <__assert_func>
 800d214:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d218:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d21c:	b10d      	cbz	r5, 800d222 <__d2b+0x32>
 800d21e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d222:	9301      	str	r3, [sp, #4]
 800d224:	f1b8 0300 	subs.w	r3, r8, #0
 800d228:	d023      	beq.n	800d272 <__d2b+0x82>
 800d22a:	4668      	mov	r0, sp
 800d22c:	9300      	str	r3, [sp, #0]
 800d22e:	f7ff fd0c 	bl	800cc4a <__lo0bits>
 800d232:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d236:	b1d0      	cbz	r0, 800d26e <__d2b+0x7e>
 800d238:	f1c0 0320 	rsb	r3, r0, #32
 800d23c:	fa02 f303 	lsl.w	r3, r2, r3
 800d240:	430b      	orrs	r3, r1
 800d242:	40c2      	lsrs	r2, r0
 800d244:	6163      	str	r3, [r4, #20]
 800d246:	9201      	str	r2, [sp, #4]
 800d248:	9b01      	ldr	r3, [sp, #4]
 800d24a:	61a3      	str	r3, [r4, #24]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	bf0c      	ite	eq
 800d250:	2201      	moveq	r2, #1
 800d252:	2202      	movne	r2, #2
 800d254:	6122      	str	r2, [r4, #16]
 800d256:	b1a5      	cbz	r5, 800d282 <__d2b+0x92>
 800d258:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d25c:	4405      	add	r5, r0
 800d25e:	603d      	str	r5, [r7, #0]
 800d260:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d264:	6030      	str	r0, [r6, #0]
 800d266:	4620      	mov	r0, r4
 800d268:	b003      	add	sp, #12
 800d26a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d26e:	6161      	str	r1, [r4, #20]
 800d270:	e7ea      	b.n	800d248 <__d2b+0x58>
 800d272:	a801      	add	r0, sp, #4
 800d274:	f7ff fce9 	bl	800cc4a <__lo0bits>
 800d278:	9b01      	ldr	r3, [sp, #4]
 800d27a:	6163      	str	r3, [r4, #20]
 800d27c:	3020      	adds	r0, #32
 800d27e:	2201      	movs	r2, #1
 800d280:	e7e8      	b.n	800d254 <__d2b+0x64>
 800d282:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d286:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d28a:	6038      	str	r0, [r7, #0]
 800d28c:	6918      	ldr	r0, [r3, #16]
 800d28e:	f7ff fcbd 	bl	800cc0c <__hi0bits>
 800d292:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d296:	e7e5      	b.n	800d264 <__d2b+0x74>
 800d298:	0800f359 	.word	0x0800f359
 800d29c:	0800f36a 	.word	0x0800f36a

0800d2a0 <__ratio>:
 800d2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a4:	b085      	sub	sp, #20
 800d2a6:	e9cd 1000 	strd	r1, r0, [sp]
 800d2aa:	a902      	add	r1, sp, #8
 800d2ac:	f7ff ff56 	bl	800d15c <__b2d>
 800d2b0:	9800      	ldr	r0, [sp, #0]
 800d2b2:	a903      	add	r1, sp, #12
 800d2b4:	ec55 4b10 	vmov	r4, r5, d0
 800d2b8:	f7ff ff50 	bl	800d15c <__b2d>
 800d2bc:	9b01      	ldr	r3, [sp, #4]
 800d2be:	6919      	ldr	r1, [r3, #16]
 800d2c0:	9b00      	ldr	r3, [sp, #0]
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	1ac9      	subs	r1, r1, r3
 800d2c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d2ca:	1a9b      	subs	r3, r3, r2
 800d2cc:	ec5b ab10 	vmov	sl, fp, d0
 800d2d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	bfce      	itee	gt
 800d2d8:	462a      	movgt	r2, r5
 800d2da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d2de:	465a      	movle	r2, fp
 800d2e0:	462f      	mov	r7, r5
 800d2e2:	46d9      	mov	r9, fp
 800d2e4:	bfcc      	ite	gt
 800d2e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d2ea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d2ee:	464b      	mov	r3, r9
 800d2f0:	4652      	mov	r2, sl
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	f7f3 fab1 	bl	800085c <__aeabi_ddiv>
 800d2fa:	ec41 0b10 	vmov	d0, r0, r1
 800d2fe:	b005      	add	sp, #20
 800d300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d304 <__copybits>:
 800d304:	3901      	subs	r1, #1
 800d306:	b570      	push	{r4, r5, r6, lr}
 800d308:	1149      	asrs	r1, r1, #5
 800d30a:	6914      	ldr	r4, [r2, #16]
 800d30c:	3101      	adds	r1, #1
 800d30e:	f102 0314 	add.w	r3, r2, #20
 800d312:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d316:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d31a:	1f05      	subs	r5, r0, #4
 800d31c:	42a3      	cmp	r3, r4
 800d31e:	d30c      	bcc.n	800d33a <__copybits+0x36>
 800d320:	1aa3      	subs	r3, r4, r2
 800d322:	3b11      	subs	r3, #17
 800d324:	f023 0303 	bic.w	r3, r3, #3
 800d328:	3211      	adds	r2, #17
 800d32a:	42a2      	cmp	r2, r4
 800d32c:	bf88      	it	hi
 800d32e:	2300      	movhi	r3, #0
 800d330:	4418      	add	r0, r3
 800d332:	2300      	movs	r3, #0
 800d334:	4288      	cmp	r0, r1
 800d336:	d305      	bcc.n	800d344 <__copybits+0x40>
 800d338:	bd70      	pop	{r4, r5, r6, pc}
 800d33a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d33e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d342:	e7eb      	b.n	800d31c <__copybits+0x18>
 800d344:	f840 3b04 	str.w	r3, [r0], #4
 800d348:	e7f4      	b.n	800d334 <__copybits+0x30>

0800d34a <__any_on>:
 800d34a:	f100 0214 	add.w	r2, r0, #20
 800d34e:	6900      	ldr	r0, [r0, #16]
 800d350:	114b      	asrs	r3, r1, #5
 800d352:	4298      	cmp	r0, r3
 800d354:	b510      	push	{r4, lr}
 800d356:	db11      	blt.n	800d37c <__any_on+0x32>
 800d358:	dd0a      	ble.n	800d370 <__any_on+0x26>
 800d35a:	f011 011f 	ands.w	r1, r1, #31
 800d35e:	d007      	beq.n	800d370 <__any_on+0x26>
 800d360:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d364:	fa24 f001 	lsr.w	r0, r4, r1
 800d368:	fa00 f101 	lsl.w	r1, r0, r1
 800d36c:	428c      	cmp	r4, r1
 800d36e:	d10b      	bne.n	800d388 <__any_on+0x3e>
 800d370:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d374:	4293      	cmp	r3, r2
 800d376:	d803      	bhi.n	800d380 <__any_on+0x36>
 800d378:	2000      	movs	r0, #0
 800d37a:	bd10      	pop	{r4, pc}
 800d37c:	4603      	mov	r3, r0
 800d37e:	e7f7      	b.n	800d370 <__any_on+0x26>
 800d380:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d384:	2900      	cmp	r1, #0
 800d386:	d0f5      	beq.n	800d374 <__any_on+0x2a>
 800d388:	2001      	movs	r0, #1
 800d38a:	e7f6      	b.n	800d37a <__any_on+0x30>

0800d38c <sulp>:
 800d38c:	b570      	push	{r4, r5, r6, lr}
 800d38e:	4604      	mov	r4, r0
 800d390:	460d      	mov	r5, r1
 800d392:	ec45 4b10 	vmov	d0, r4, r5
 800d396:	4616      	mov	r6, r2
 800d398:	f7ff feba 	bl	800d110 <__ulp>
 800d39c:	ec51 0b10 	vmov	r0, r1, d0
 800d3a0:	b17e      	cbz	r6, 800d3c2 <sulp+0x36>
 800d3a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d3a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	dd09      	ble.n	800d3c2 <sulp+0x36>
 800d3ae:	051b      	lsls	r3, r3, #20
 800d3b0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d3b4:	2400      	movs	r4, #0
 800d3b6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d3ba:	4622      	mov	r2, r4
 800d3bc:	462b      	mov	r3, r5
 800d3be:	f7f3 f923 	bl	8000608 <__aeabi_dmul>
 800d3c2:	ec41 0b10 	vmov	d0, r0, r1
 800d3c6:	bd70      	pop	{r4, r5, r6, pc}

0800d3c8 <_strtod_l>:
 800d3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3cc:	b09f      	sub	sp, #124	@ 0x7c
 800d3ce:	460c      	mov	r4, r1
 800d3d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	921a      	str	r2, [sp, #104]	@ 0x68
 800d3d6:	9005      	str	r0, [sp, #20]
 800d3d8:	f04f 0a00 	mov.w	sl, #0
 800d3dc:	f04f 0b00 	mov.w	fp, #0
 800d3e0:	460a      	mov	r2, r1
 800d3e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d3e4:	7811      	ldrb	r1, [r2, #0]
 800d3e6:	292b      	cmp	r1, #43	@ 0x2b
 800d3e8:	d04a      	beq.n	800d480 <_strtod_l+0xb8>
 800d3ea:	d838      	bhi.n	800d45e <_strtod_l+0x96>
 800d3ec:	290d      	cmp	r1, #13
 800d3ee:	d832      	bhi.n	800d456 <_strtod_l+0x8e>
 800d3f0:	2908      	cmp	r1, #8
 800d3f2:	d832      	bhi.n	800d45a <_strtod_l+0x92>
 800d3f4:	2900      	cmp	r1, #0
 800d3f6:	d03b      	beq.n	800d470 <_strtod_l+0xa8>
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d3fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d3fe:	782a      	ldrb	r2, [r5, #0]
 800d400:	2a30      	cmp	r2, #48	@ 0x30
 800d402:	f040 80b3 	bne.w	800d56c <_strtod_l+0x1a4>
 800d406:	786a      	ldrb	r2, [r5, #1]
 800d408:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d40c:	2a58      	cmp	r2, #88	@ 0x58
 800d40e:	d16e      	bne.n	800d4ee <_strtod_l+0x126>
 800d410:	9302      	str	r3, [sp, #8]
 800d412:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d414:	9301      	str	r3, [sp, #4]
 800d416:	ab1a      	add	r3, sp, #104	@ 0x68
 800d418:	9300      	str	r3, [sp, #0]
 800d41a:	4a8e      	ldr	r2, [pc, #568]	@ (800d654 <_strtod_l+0x28c>)
 800d41c:	9805      	ldr	r0, [sp, #20]
 800d41e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d420:	a919      	add	r1, sp, #100	@ 0x64
 800d422:	f001 f927 	bl	800e674 <__gethex>
 800d426:	f010 060f 	ands.w	r6, r0, #15
 800d42a:	4604      	mov	r4, r0
 800d42c:	d005      	beq.n	800d43a <_strtod_l+0x72>
 800d42e:	2e06      	cmp	r6, #6
 800d430:	d128      	bne.n	800d484 <_strtod_l+0xbc>
 800d432:	3501      	adds	r5, #1
 800d434:	2300      	movs	r3, #0
 800d436:	9519      	str	r5, [sp, #100]	@ 0x64
 800d438:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d43a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f040 858e 	bne.w	800df5e <_strtod_l+0xb96>
 800d442:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d444:	b1cb      	cbz	r3, 800d47a <_strtod_l+0xb2>
 800d446:	4652      	mov	r2, sl
 800d448:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d44c:	ec43 2b10 	vmov	d0, r2, r3
 800d450:	b01f      	add	sp, #124	@ 0x7c
 800d452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d456:	2920      	cmp	r1, #32
 800d458:	d1ce      	bne.n	800d3f8 <_strtod_l+0x30>
 800d45a:	3201      	adds	r2, #1
 800d45c:	e7c1      	b.n	800d3e2 <_strtod_l+0x1a>
 800d45e:	292d      	cmp	r1, #45	@ 0x2d
 800d460:	d1ca      	bne.n	800d3f8 <_strtod_l+0x30>
 800d462:	2101      	movs	r1, #1
 800d464:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d466:	1c51      	adds	r1, r2, #1
 800d468:	9119      	str	r1, [sp, #100]	@ 0x64
 800d46a:	7852      	ldrb	r2, [r2, #1]
 800d46c:	2a00      	cmp	r2, #0
 800d46e:	d1c5      	bne.n	800d3fc <_strtod_l+0x34>
 800d470:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d472:	9419      	str	r4, [sp, #100]	@ 0x64
 800d474:	2b00      	cmp	r3, #0
 800d476:	f040 8570 	bne.w	800df5a <_strtod_l+0xb92>
 800d47a:	4652      	mov	r2, sl
 800d47c:	465b      	mov	r3, fp
 800d47e:	e7e5      	b.n	800d44c <_strtod_l+0x84>
 800d480:	2100      	movs	r1, #0
 800d482:	e7ef      	b.n	800d464 <_strtod_l+0x9c>
 800d484:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d486:	b13a      	cbz	r2, 800d498 <_strtod_l+0xd0>
 800d488:	2135      	movs	r1, #53	@ 0x35
 800d48a:	a81c      	add	r0, sp, #112	@ 0x70
 800d48c:	f7ff ff3a 	bl	800d304 <__copybits>
 800d490:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d492:	9805      	ldr	r0, [sp, #20]
 800d494:	f7ff fb08 	bl	800caa8 <_Bfree>
 800d498:	3e01      	subs	r6, #1
 800d49a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d49c:	2e04      	cmp	r6, #4
 800d49e:	d806      	bhi.n	800d4ae <_strtod_l+0xe6>
 800d4a0:	e8df f006 	tbb	[pc, r6]
 800d4a4:	201d0314 	.word	0x201d0314
 800d4a8:	14          	.byte	0x14
 800d4a9:	00          	.byte	0x00
 800d4aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d4ae:	05e1      	lsls	r1, r4, #23
 800d4b0:	bf48      	it	mi
 800d4b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d4b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d4ba:	0d1b      	lsrs	r3, r3, #20
 800d4bc:	051b      	lsls	r3, r3, #20
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1bb      	bne.n	800d43a <_strtod_l+0x72>
 800d4c2:	f7fe fb2f 	bl	800bb24 <__errno>
 800d4c6:	2322      	movs	r3, #34	@ 0x22
 800d4c8:	6003      	str	r3, [r0, #0]
 800d4ca:	e7b6      	b.n	800d43a <_strtod_l+0x72>
 800d4cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d4d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d4d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d4d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d4dc:	e7e7      	b.n	800d4ae <_strtod_l+0xe6>
 800d4de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d65c <_strtod_l+0x294>
 800d4e2:	e7e4      	b.n	800d4ae <_strtod_l+0xe6>
 800d4e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d4e8:	f04f 3aff 	mov.w	sl, #4294967295
 800d4ec:	e7df      	b.n	800d4ae <_strtod_l+0xe6>
 800d4ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d4f0:	1c5a      	adds	r2, r3, #1
 800d4f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d4f4:	785b      	ldrb	r3, [r3, #1]
 800d4f6:	2b30      	cmp	r3, #48	@ 0x30
 800d4f8:	d0f9      	beq.n	800d4ee <_strtod_l+0x126>
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d09d      	beq.n	800d43a <_strtod_l+0x72>
 800d4fe:	2301      	movs	r3, #1
 800d500:	9309      	str	r3, [sp, #36]	@ 0x24
 800d502:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d504:	930c      	str	r3, [sp, #48]	@ 0x30
 800d506:	2300      	movs	r3, #0
 800d508:	9308      	str	r3, [sp, #32]
 800d50a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d50c:	461f      	mov	r7, r3
 800d50e:	220a      	movs	r2, #10
 800d510:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d512:	7805      	ldrb	r5, [r0, #0]
 800d514:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d518:	b2d9      	uxtb	r1, r3
 800d51a:	2909      	cmp	r1, #9
 800d51c:	d928      	bls.n	800d570 <_strtod_l+0x1a8>
 800d51e:	494e      	ldr	r1, [pc, #312]	@ (800d658 <_strtod_l+0x290>)
 800d520:	2201      	movs	r2, #1
 800d522:	f000 ffd5 	bl	800e4d0 <strncmp>
 800d526:	2800      	cmp	r0, #0
 800d528:	d032      	beq.n	800d590 <_strtod_l+0x1c8>
 800d52a:	2000      	movs	r0, #0
 800d52c:	462a      	mov	r2, r5
 800d52e:	4681      	mov	r9, r0
 800d530:	463d      	mov	r5, r7
 800d532:	4603      	mov	r3, r0
 800d534:	2a65      	cmp	r2, #101	@ 0x65
 800d536:	d001      	beq.n	800d53c <_strtod_l+0x174>
 800d538:	2a45      	cmp	r2, #69	@ 0x45
 800d53a:	d114      	bne.n	800d566 <_strtod_l+0x19e>
 800d53c:	b91d      	cbnz	r5, 800d546 <_strtod_l+0x17e>
 800d53e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d540:	4302      	orrs	r2, r0
 800d542:	d095      	beq.n	800d470 <_strtod_l+0xa8>
 800d544:	2500      	movs	r5, #0
 800d546:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d548:	1c62      	adds	r2, r4, #1
 800d54a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d54c:	7862      	ldrb	r2, [r4, #1]
 800d54e:	2a2b      	cmp	r2, #43	@ 0x2b
 800d550:	d077      	beq.n	800d642 <_strtod_l+0x27a>
 800d552:	2a2d      	cmp	r2, #45	@ 0x2d
 800d554:	d07b      	beq.n	800d64e <_strtod_l+0x286>
 800d556:	f04f 0c00 	mov.w	ip, #0
 800d55a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d55e:	2909      	cmp	r1, #9
 800d560:	f240 8082 	bls.w	800d668 <_strtod_l+0x2a0>
 800d564:	9419      	str	r4, [sp, #100]	@ 0x64
 800d566:	f04f 0800 	mov.w	r8, #0
 800d56a:	e0a2      	b.n	800d6b2 <_strtod_l+0x2ea>
 800d56c:	2300      	movs	r3, #0
 800d56e:	e7c7      	b.n	800d500 <_strtod_l+0x138>
 800d570:	2f08      	cmp	r7, #8
 800d572:	bfd5      	itete	le
 800d574:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d576:	9908      	ldrgt	r1, [sp, #32]
 800d578:	fb02 3301 	mlale	r3, r2, r1, r3
 800d57c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d580:	f100 0001 	add.w	r0, r0, #1
 800d584:	bfd4      	ite	le
 800d586:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d588:	9308      	strgt	r3, [sp, #32]
 800d58a:	3701      	adds	r7, #1
 800d58c:	9019      	str	r0, [sp, #100]	@ 0x64
 800d58e:	e7bf      	b.n	800d510 <_strtod_l+0x148>
 800d590:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d592:	1c5a      	adds	r2, r3, #1
 800d594:	9219      	str	r2, [sp, #100]	@ 0x64
 800d596:	785a      	ldrb	r2, [r3, #1]
 800d598:	b37f      	cbz	r7, 800d5fa <_strtod_l+0x232>
 800d59a:	4681      	mov	r9, r0
 800d59c:	463d      	mov	r5, r7
 800d59e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d5a2:	2b09      	cmp	r3, #9
 800d5a4:	d912      	bls.n	800d5cc <_strtod_l+0x204>
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	e7c4      	b.n	800d534 <_strtod_l+0x16c>
 800d5aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5ac:	1c5a      	adds	r2, r3, #1
 800d5ae:	9219      	str	r2, [sp, #100]	@ 0x64
 800d5b0:	785a      	ldrb	r2, [r3, #1]
 800d5b2:	3001      	adds	r0, #1
 800d5b4:	2a30      	cmp	r2, #48	@ 0x30
 800d5b6:	d0f8      	beq.n	800d5aa <_strtod_l+0x1e2>
 800d5b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d5bc:	2b08      	cmp	r3, #8
 800d5be:	f200 84d3 	bhi.w	800df68 <_strtod_l+0xba0>
 800d5c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d5c6:	4681      	mov	r9, r0
 800d5c8:	2000      	movs	r0, #0
 800d5ca:	4605      	mov	r5, r0
 800d5cc:	3a30      	subs	r2, #48	@ 0x30
 800d5ce:	f100 0301 	add.w	r3, r0, #1
 800d5d2:	d02a      	beq.n	800d62a <_strtod_l+0x262>
 800d5d4:	4499      	add	r9, r3
 800d5d6:	eb00 0c05 	add.w	ip, r0, r5
 800d5da:	462b      	mov	r3, r5
 800d5dc:	210a      	movs	r1, #10
 800d5de:	4563      	cmp	r3, ip
 800d5e0:	d10d      	bne.n	800d5fe <_strtod_l+0x236>
 800d5e2:	1c69      	adds	r1, r5, #1
 800d5e4:	4401      	add	r1, r0
 800d5e6:	4428      	add	r0, r5
 800d5e8:	2808      	cmp	r0, #8
 800d5ea:	dc16      	bgt.n	800d61a <_strtod_l+0x252>
 800d5ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d5ee:	230a      	movs	r3, #10
 800d5f0:	fb03 2300 	mla	r3, r3, r0, r2
 800d5f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	e018      	b.n	800d62c <_strtod_l+0x264>
 800d5fa:	4638      	mov	r0, r7
 800d5fc:	e7da      	b.n	800d5b4 <_strtod_l+0x1ec>
 800d5fe:	2b08      	cmp	r3, #8
 800d600:	f103 0301 	add.w	r3, r3, #1
 800d604:	dc03      	bgt.n	800d60e <_strtod_l+0x246>
 800d606:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d608:	434e      	muls	r6, r1
 800d60a:	960a      	str	r6, [sp, #40]	@ 0x28
 800d60c:	e7e7      	b.n	800d5de <_strtod_l+0x216>
 800d60e:	2b10      	cmp	r3, #16
 800d610:	bfde      	ittt	le
 800d612:	9e08      	ldrle	r6, [sp, #32]
 800d614:	434e      	mulle	r6, r1
 800d616:	9608      	strle	r6, [sp, #32]
 800d618:	e7e1      	b.n	800d5de <_strtod_l+0x216>
 800d61a:	280f      	cmp	r0, #15
 800d61c:	dceb      	bgt.n	800d5f6 <_strtod_l+0x22e>
 800d61e:	9808      	ldr	r0, [sp, #32]
 800d620:	230a      	movs	r3, #10
 800d622:	fb03 2300 	mla	r3, r3, r0, r2
 800d626:	9308      	str	r3, [sp, #32]
 800d628:	e7e5      	b.n	800d5f6 <_strtod_l+0x22e>
 800d62a:	4629      	mov	r1, r5
 800d62c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d62e:	1c50      	adds	r0, r2, #1
 800d630:	9019      	str	r0, [sp, #100]	@ 0x64
 800d632:	7852      	ldrb	r2, [r2, #1]
 800d634:	4618      	mov	r0, r3
 800d636:	460d      	mov	r5, r1
 800d638:	e7b1      	b.n	800d59e <_strtod_l+0x1d6>
 800d63a:	f04f 0900 	mov.w	r9, #0
 800d63e:	2301      	movs	r3, #1
 800d640:	e77d      	b.n	800d53e <_strtod_l+0x176>
 800d642:	f04f 0c00 	mov.w	ip, #0
 800d646:	1ca2      	adds	r2, r4, #2
 800d648:	9219      	str	r2, [sp, #100]	@ 0x64
 800d64a:	78a2      	ldrb	r2, [r4, #2]
 800d64c:	e785      	b.n	800d55a <_strtod_l+0x192>
 800d64e:	f04f 0c01 	mov.w	ip, #1
 800d652:	e7f8      	b.n	800d646 <_strtod_l+0x27e>
 800d654:	0800f4d8 	.word	0x0800f4d8
 800d658:	0800f4c0 	.word	0x0800f4c0
 800d65c:	7ff00000 	.word	0x7ff00000
 800d660:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d662:	1c51      	adds	r1, r2, #1
 800d664:	9119      	str	r1, [sp, #100]	@ 0x64
 800d666:	7852      	ldrb	r2, [r2, #1]
 800d668:	2a30      	cmp	r2, #48	@ 0x30
 800d66a:	d0f9      	beq.n	800d660 <_strtod_l+0x298>
 800d66c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d670:	2908      	cmp	r1, #8
 800d672:	f63f af78 	bhi.w	800d566 <_strtod_l+0x19e>
 800d676:	3a30      	subs	r2, #48	@ 0x30
 800d678:	920e      	str	r2, [sp, #56]	@ 0x38
 800d67a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d67c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d67e:	f04f 080a 	mov.w	r8, #10
 800d682:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d684:	1c56      	adds	r6, r2, #1
 800d686:	9619      	str	r6, [sp, #100]	@ 0x64
 800d688:	7852      	ldrb	r2, [r2, #1]
 800d68a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d68e:	f1be 0f09 	cmp.w	lr, #9
 800d692:	d939      	bls.n	800d708 <_strtod_l+0x340>
 800d694:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d696:	1a76      	subs	r6, r6, r1
 800d698:	2e08      	cmp	r6, #8
 800d69a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d69e:	dc03      	bgt.n	800d6a8 <_strtod_l+0x2e0>
 800d6a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d6a2:	4588      	cmp	r8, r1
 800d6a4:	bfa8      	it	ge
 800d6a6:	4688      	movge	r8, r1
 800d6a8:	f1bc 0f00 	cmp.w	ip, #0
 800d6ac:	d001      	beq.n	800d6b2 <_strtod_l+0x2ea>
 800d6ae:	f1c8 0800 	rsb	r8, r8, #0
 800d6b2:	2d00      	cmp	r5, #0
 800d6b4:	d14e      	bne.n	800d754 <_strtod_l+0x38c>
 800d6b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d6b8:	4308      	orrs	r0, r1
 800d6ba:	f47f aebe 	bne.w	800d43a <_strtod_l+0x72>
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f47f aed6 	bne.w	800d470 <_strtod_l+0xa8>
 800d6c4:	2a69      	cmp	r2, #105	@ 0x69
 800d6c6:	d028      	beq.n	800d71a <_strtod_l+0x352>
 800d6c8:	dc25      	bgt.n	800d716 <_strtod_l+0x34e>
 800d6ca:	2a49      	cmp	r2, #73	@ 0x49
 800d6cc:	d025      	beq.n	800d71a <_strtod_l+0x352>
 800d6ce:	2a4e      	cmp	r2, #78	@ 0x4e
 800d6d0:	f47f aece 	bne.w	800d470 <_strtod_l+0xa8>
 800d6d4:	499b      	ldr	r1, [pc, #620]	@ (800d944 <_strtod_l+0x57c>)
 800d6d6:	a819      	add	r0, sp, #100	@ 0x64
 800d6d8:	f001 f9ee 	bl	800eab8 <__match>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	f43f aec7 	beq.w	800d470 <_strtod_l+0xa8>
 800d6e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	2b28      	cmp	r3, #40	@ 0x28
 800d6e8:	d12e      	bne.n	800d748 <_strtod_l+0x380>
 800d6ea:	4997      	ldr	r1, [pc, #604]	@ (800d948 <_strtod_l+0x580>)
 800d6ec:	aa1c      	add	r2, sp, #112	@ 0x70
 800d6ee:	a819      	add	r0, sp, #100	@ 0x64
 800d6f0:	f001 f9f6 	bl	800eae0 <__hexnan>
 800d6f4:	2805      	cmp	r0, #5
 800d6f6:	d127      	bne.n	800d748 <_strtod_l+0x380>
 800d6f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d6fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d6fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d702:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d706:	e698      	b.n	800d43a <_strtod_l+0x72>
 800d708:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d70a:	fb08 2101 	mla	r1, r8, r1, r2
 800d70e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d712:	920e      	str	r2, [sp, #56]	@ 0x38
 800d714:	e7b5      	b.n	800d682 <_strtod_l+0x2ba>
 800d716:	2a6e      	cmp	r2, #110	@ 0x6e
 800d718:	e7da      	b.n	800d6d0 <_strtod_l+0x308>
 800d71a:	498c      	ldr	r1, [pc, #560]	@ (800d94c <_strtod_l+0x584>)
 800d71c:	a819      	add	r0, sp, #100	@ 0x64
 800d71e:	f001 f9cb 	bl	800eab8 <__match>
 800d722:	2800      	cmp	r0, #0
 800d724:	f43f aea4 	beq.w	800d470 <_strtod_l+0xa8>
 800d728:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d72a:	4989      	ldr	r1, [pc, #548]	@ (800d950 <_strtod_l+0x588>)
 800d72c:	3b01      	subs	r3, #1
 800d72e:	a819      	add	r0, sp, #100	@ 0x64
 800d730:	9319      	str	r3, [sp, #100]	@ 0x64
 800d732:	f001 f9c1 	bl	800eab8 <__match>
 800d736:	b910      	cbnz	r0, 800d73e <_strtod_l+0x376>
 800d738:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d73a:	3301      	adds	r3, #1
 800d73c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d73e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d960 <_strtod_l+0x598>
 800d742:	f04f 0a00 	mov.w	sl, #0
 800d746:	e678      	b.n	800d43a <_strtod_l+0x72>
 800d748:	4882      	ldr	r0, [pc, #520]	@ (800d954 <_strtod_l+0x58c>)
 800d74a:	f000 fef1 	bl	800e530 <nan>
 800d74e:	ec5b ab10 	vmov	sl, fp, d0
 800d752:	e672      	b.n	800d43a <_strtod_l+0x72>
 800d754:	eba8 0309 	sub.w	r3, r8, r9
 800d758:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d75a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d75c:	2f00      	cmp	r7, #0
 800d75e:	bf08      	it	eq
 800d760:	462f      	moveq	r7, r5
 800d762:	2d10      	cmp	r5, #16
 800d764:	462c      	mov	r4, r5
 800d766:	bfa8      	it	ge
 800d768:	2410      	movge	r4, #16
 800d76a:	f7f2 fed3 	bl	8000514 <__aeabi_ui2d>
 800d76e:	2d09      	cmp	r5, #9
 800d770:	4682      	mov	sl, r0
 800d772:	468b      	mov	fp, r1
 800d774:	dc13      	bgt.n	800d79e <_strtod_l+0x3d6>
 800d776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f43f ae5e 	beq.w	800d43a <_strtod_l+0x72>
 800d77e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d780:	dd78      	ble.n	800d874 <_strtod_l+0x4ac>
 800d782:	2b16      	cmp	r3, #22
 800d784:	dc5f      	bgt.n	800d846 <_strtod_l+0x47e>
 800d786:	4974      	ldr	r1, [pc, #464]	@ (800d958 <_strtod_l+0x590>)
 800d788:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d78c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d790:	4652      	mov	r2, sl
 800d792:	465b      	mov	r3, fp
 800d794:	f7f2 ff38 	bl	8000608 <__aeabi_dmul>
 800d798:	4682      	mov	sl, r0
 800d79a:	468b      	mov	fp, r1
 800d79c:	e64d      	b.n	800d43a <_strtod_l+0x72>
 800d79e:	4b6e      	ldr	r3, [pc, #440]	@ (800d958 <_strtod_l+0x590>)
 800d7a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d7a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d7a8:	f7f2 ff2e 	bl	8000608 <__aeabi_dmul>
 800d7ac:	4682      	mov	sl, r0
 800d7ae:	9808      	ldr	r0, [sp, #32]
 800d7b0:	468b      	mov	fp, r1
 800d7b2:	f7f2 feaf 	bl	8000514 <__aeabi_ui2d>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	4650      	mov	r0, sl
 800d7bc:	4659      	mov	r1, fp
 800d7be:	f7f2 fd6d 	bl	800029c <__adddf3>
 800d7c2:	2d0f      	cmp	r5, #15
 800d7c4:	4682      	mov	sl, r0
 800d7c6:	468b      	mov	fp, r1
 800d7c8:	ddd5      	ble.n	800d776 <_strtod_l+0x3ae>
 800d7ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7cc:	1b2c      	subs	r4, r5, r4
 800d7ce:	441c      	add	r4, r3
 800d7d0:	2c00      	cmp	r4, #0
 800d7d2:	f340 8096 	ble.w	800d902 <_strtod_l+0x53a>
 800d7d6:	f014 030f 	ands.w	r3, r4, #15
 800d7da:	d00a      	beq.n	800d7f2 <_strtod_l+0x42a>
 800d7dc:	495e      	ldr	r1, [pc, #376]	@ (800d958 <_strtod_l+0x590>)
 800d7de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d7e2:	4652      	mov	r2, sl
 800d7e4:	465b      	mov	r3, fp
 800d7e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7ea:	f7f2 ff0d 	bl	8000608 <__aeabi_dmul>
 800d7ee:	4682      	mov	sl, r0
 800d7f0:	468b      	mov	fp, r1
 800d7f2:	f034 040f 	bics.w	r4, r4, #15
 800d7f6:	d073      	beq.n	800d8e0 <_strtod_l+0x518>
 800d7f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d7fc:	dd48      	ble.n	800d890 <_strtod_l+0x4c8>
 800d7fe:	2400      	movs	r4, #0
 800d800:	46a0      	mov	r8, r4
 800d802:	940a      	str	r4, [sp, #40]	@ 0x28
 800d804:	46a1      	mov	r9, r4
 800d806:	9a05      	ldr	r2, [sp, #20]
 800d808:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d960 <_strtod_l+0x598>
 800d80c:	2322      	movs	r3, #34	@ 0x22
 800d80e:	6013      	str	r3, [r2, #0]
 800d810:	f04f 0a00 	mov.w	sl, #0
 800d814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d816:	2b00      	cmp	r3, #0
 800d818:	f43f ae0f 	beq.w	800d43a <_strtod_l+0x72>
 800d81c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d81e:	9805      	ldr	r0, [sp, #20]
 800d820:	f7ff f942 	bl	800caa8 <_Bfree>
 800d824:	9805      	ldr	r0, [sp, #20]
 800d826:	4649      	mov	r1, r9
 800d828:	f7ff f93e 	bl	800caa8 <_Bfree>
 800d82c:	9805      	ldr	r0, [sp, #20]
 800d82e:	4641      	mov	r1, r8
 800d830:	f7ff f93a 	bl	800caa8 <_Bfree>
 800d834:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d836:	9805      	ldr	r0, [sp, #20]
 800d838:	f7ff f936 	bl	800caa8 <_Bfree>
 800d83c:	9805      	ldr	r0, [sp, #20]
 800d83e:	4621      	mov	r1, r4
 800d840:	f7ff f932 	bl	800caa8 <_Bfree>
 800d844:	e5f9      	b.n	800d43a <_strtod_l+0x72>
 800d846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d848:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d84c:	4293      	cmp	r3, r2
 800d84e:	dbbc      	blt.n	800d7ca <_strtod_l+0x402>
 800d850:	4c41      	ldr	r4, [pc, #260]	@ (800d958 <_strtod_l+0x590>)
 800d852:	f1c5 050f 	rsb	r5, r5, #15
 800d856:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d85a:	4652      	mov	r2, sl
 800d85c:	465b      	mov	r3, fp
 800d85e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d862:	f7f2 fed1 	bl	8000608 <__aeabi_dmul>
 800d866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d868:	1b5d      	subs	r5, r3, r5
 800d86a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d86e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d872:	e78f      	b.n	800d794 <_strtod_l+0x3cc>
 800d874:	3316      	adds	r3, #22
 800d876:	dba8      	blt.n	800d7ca <_strtod_l+0x402>
 800d878:	4b37      	ldr	r3, [pc, #220]	@ (800d958 <_strtod_l+0x590>)
 800d87a:	eba9 0808 	sub.w	r8, r9, r8
 800d87e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d882:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d886:	4650      	mov	r0, sl
 800d888:	4659      	mov	r1, fp
 800d88a:	f7f2 ffe7 	bl	800085c <__aeabi_ddiv>
 800d88e:	e783      	b.n	800d798 <_strtod_l+0x3d0>
 800d890:	4b32      	ldr	r3, [pc, #200]	@ (800d95c <_strtod_l+0x594>)
 800d892:	9308      	str	r3, [sp, #32]
 800d894:	2300      	movs	r3, #0
 800d896:	1124      	asrs	r4, r4, #4
 800d898:	4650      	mov	r0, sl
 800d89a:	4659      	mov	r1, fp
 800d89c:	461e      	mov	r6, r3
 800d89e:	2c01      	cmp	r4, #1
 800d8a0:	dc21      	bgt.n	800d8e6 <_strtod_l+0x51e>
 800d8a2:	b10b      	cbz	r3, 800d8a8 <_strtod_l+0x4e0>
 800d8a4:	4682      	mov	sl, r0
 800d8a6:	468b      	mov	fp, r1
 800d8a8:	492c      	ldr	r1, [pc, #176]	@ (800d95c <_strtod_l+0x594>)
 800d8aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d8ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d8b2:	4652      	mov	r2, sl
 800d8b4:	465b      	mov	r3, fp
 800d8b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8ba:	f7f2 fea5 	bl	8000608 <__aeabi_dmul>
 800d8be:	4b28      	ldr	r3, [pc, #160]	@ (800d960 <_strtod_l+0x598>)
 800d8c0:	460a      	mov	r2, r1
 800d8c2:	400b      	ands	r3, r1
 800d8c4:	4927      	ldr	r1, [pc, #156]	@ (800d964 <_strtod_l+0x59c>)
 800d8c6:	428b      	cmp	r3, r1
 800d8c8:	4682      	mov	sl, r0
 800d8ca:	d898      	bhi.n	800d7fe <_strtod_l+0x436>
 800d8cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d8d0:	428b      	cmp	r3, r1
 800d8d2:	bf86      	itte	hi
 800d8d4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d968 <_strtod_l+0x5a0>
 800d8d8:	f04f 3aff 	movhi.w	sl, #4294967295
 800d8dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	9308      	str	r3, [sp, #32]
 800d8e4:	e07a      	b.n	800d9dc <_strtod_l+0x614>
 800d8e6:	07e2      	lsls	r2, r4, #31
 800d8e8:	d505      	bpl.n	800d8f6 <_strtod_l+0x52e>
 800d8ea:	9b08      	ldr	r3, [sp, #32]
 800d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f0:	f7f2 fe8a 	bl	8000608 <__aeabi_dmul>
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	9a08      	ldr	r2, [sp, #32]
 800d8f8:	3208      	adds	r2, #8
 800d8fa:	3601      	adds	r6, #1
 800d8fc:	1064      	asrs	r4, r4, #1
 800d8fe:	9208      	str	r2, [sp, #32]
 800d900:	e7cd      	b.n	800d89e <_strtod_l+0x4d6>
 800d902:	d0ed      	beq.n	800d8e0 <_strtod_l+0x518>
 800d904:	4264      	negs	r4, r4
 800d906:	f014 020f 	ands.w	r2, r4, #15
 800d90a:	d00a      	beq.n	800d922 <_strtod_l+0x55a>
 800d90c:	4b12      	ldr	r3, [pc, #72]	@ (800d958 <_strtod_l+0x590>)
 800d90e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d912:	4650      	mov	r0, sl
 800d914:	4659      	mov	r1, fp
 800d916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91a:	f7f2 ff9f 	bl	800085c <__aeabi_ddiv>
 800d91e:	4682      	mov	sl, r0
 800d920:	468b      	mov	fp, r1
 800d922:	1124      	asrs	r4, r4, #4
 800d924:	d0dc      	beq.n	800d8e0 <_strtod_l+0x518>
 800d926:	2c1f      	cmp	r4, #31
 800d928:	dd20      	ble.n	800d96c <_strtod_l+0x5a4>
 800d92a:	2400      	movs	r4, #0
 800d92c:	46a0      	mov	r8, r4
 800d92e:	940a      	str	r4, [sp, #40]	@ 0x28
 800d930:	46a1      	mov	r9, r4
 800d932:	9a05      	ldr	r2, [sp, #20]
 800d934:	2322      	movs	r3, #34	@ 0x22
 800d936:	f04f 0a00 	mov.w	sl, #0
 800d93a:	f04f 0b00 	mov.w	fp, #0
 800d93e:	6013      	str	r3, [r2, #0]
 800d940:	e768      	b.n	800d814 <_strtod_l+0x44c>
 800d942:	bf00      	nop
 800d944:	0800f2b1 	.word	0x0800f2b1
 800d948:	0800f4c4 	.word	0x0800f4c4
 800d94c:	0800f2a9 	.word	0x0800f2a9
 800d950:	0800f2e0 	.word	0x0800f2e0
 800d954:	0800f66d 	.word	0x0800f66d
 800d958:	0800f3f8 	.word	0x0800f3f8
 800d95c:	0800f3d0 	.word	0x0800f3d0
 800d960:	7ff00000 	.word	0x7ff00000
 800d964:	7ca00000 	.word	0x7ca00000
 800d968:	7fefffff 	.word	0x7fefffff
 800d96c:	f014 0310 	ands.w	r3, r4, #16
 800d970:	bf18      	it	ne
 800d972:	236a      	movne	r3, #106	@ 0x6a
 800d974:	4ea9      	ldr	r6, [pc, #676]	@ (800dc1c <_strtod_l+0x854>)
 800d976:	9308      	str	r3, [sp, #32]
 800d978:	4650      	mov	r0, sl
 800d97a:	4659      	mov	r1, fp
 800d97c:	2300      	movs	r3, #0
 800d97e:	07e2      	lsls	r2, r4, #31
 800d980:	d504      	bpl.n	800d98c <_strtod_l+0x5c4>
 800d982:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d986:	f7f2 fe3f 	bl	8000608 <__aeabi_dmul>
 800d98a:	2301      	movs	r3, #1
 800d98c:	1064      	asrs	r4, r4, #1
 800d98e:	f106 0608 	add.w	r6, r6, #8
 800d992:	d1f4      	bne.n	800d97e <_strtod_l+0x5b6>
 800d994:	b10b      	cbz	r3, 800d99a <_strtod_l+0x5d2>
 800d996:	4682      	mov	sl, r0
 800d998:	468b      	mov	fp, r1
 800d99a:	9b08      	ldr	r3, [sp, #32]
 800d99c:	b1b3      	cbz	r3, 800d9cc <_strtod_l+0x604>
 800d99e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d9a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	4659      	mov	r1, fp
 800d9aa:	dd0f      	ble.n	800d9cc <_strtod_l+0x604>
 800d9ac:	2b1f      	cmp	r3, #31
 800d9ae:	dd55      	ble.n	800da5c <_strtod_l+0x694>
 800d9b0:	2b34      	cmp	r3, #52	@ 0x34
 800d9b2:	bfde      	ittt	le
 800d9b4:	f04f 33ff 	movle.w	r3, #4294967295
 800d9b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d9bc:	4093      	lslle	r3, r2
 800d9be:	f04f 0a00 	mov.w	sl, #0
 800d9c2:	bfcc      	ite	gt
 800d9c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d9c8:	ea03 0b01 	andle.w	fp, r3, r1
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	4650      	mov	r0, sl
 800d9d2:	4659      	mov	r1, fp
 800d9d4:	f7f3 f880 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	d1a6      	bne.n	800d92a <_strtod_l+0x562>
 800d9dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9de:	9300      	str	r3, [sp, #0]
 800d9e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d9e2:	9805      	ldr	r0, [sp, #20]
 800d9e4:	462b      	mov	r3, r5
 800d9e6:	463a      	mov	r2, r7
 800d9e8:	f7ff f8c6 	bl	800cb78 <__s2b>
 800d9ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	f43f af05 	beq.w	800d7fe <_strtod_l+0x436>
 800d9f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9f6:	2a00      	cmp	r2, #0
 800d9f8:	eba9 0308 	sub.w	r3, r9, r8
 800d9fc:	bfa8      	it	ge
 800d9fe:	2300      	movge	r3, #0
 800da00:	9312      	str	r3, [sp, #72]	@ 0x48
 800da02:	2400      	movs	r4, #0
 800da04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800da08:	9316      	str	r3, [sp, #88]	@ 0x58
 800da0a:	46a0      	mov	r8, r4
 800da0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da0e:	9805      	ldr	r0, [sp, #20]
 800da10:	6859      	ldr	r1, [r3, #4]
 800da12:	f7ff f809 	bl	800ca28 <_Balloc>
 800da16:	4681      	mov	r9, r0
 800da18:	2800      	cmp	r0, #0
 800da1a:	f43f aef4 	beq.w	800d806 <_strtod_l+0x43e>
 800da1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da20:	691a      	ldr	r2, [r3, #16]
 800da22:	3202      	adds	r2, #2
 800da24:	f103 010c 	add.w	r1, r3, #12
 800da28:	0092      	lsls	r2, r2, #2
 800da2a:	300c      	adds	r0, #12
 800da2c:	f000 fd72 	bl	800e514 <memcpy>
 800da30:	ec4b ab10 	vmov	d0, sl, fp
 800da34:	9805      	ldr	r0, [sp, #20]
 800da36:	aa1c      	add	r2, sp, #112	@ 0x70
 800da38:	a91b      	add	r1, sp, #108	@ 0x6c
 800da3a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800da3e:	f7ff fbd7 	bl	800d1f0 <__d2b>
 800da42:	901a      	str	r0, [sp, #104]	@ 0x68
 800da44:	2800      	cmp	r0, #0
 800da46:	f43f aede 	beq.w	800d806 <_strtod_l+0x43e>
 800da4a:	9805      	ldr	r0, [sp, #20]
 800da4c:	2101      	movs	r1, #1
 800da4e:	f7ff f929 	bl	800cca4 <__i2b>
 800da52:	4680      	mov	r8, r0
 800da54:	b948      	cbnz	r0, 800da6a <_strtod_l+0x6a2>
 800da56:	f04f 0800 	mov.w	r8, #0
 800da5a:	e6d4      	b.n	800d806 <_strtod_l+0x43e>
 800da5c:	f04f 32ff 	mov.w	r2, #4294967295
 800da60:	fa02 f303 	lsl.w	r3, r2, r3
 800da64:	ea03 0a0a 	and.w	sl, r3, sl
 800da68:	e7b0      	b.n	800d9cc <_strtod_l+0x604>
 800da6a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800da6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800da6e:	2d00      	cmp	r5, #0
 800da70:	bfab      	itete	ge
 800da72:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800da74:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800da76:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800da78:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800da7a:	bfac      	ite	ge
 800da7c:	18ef      	addge	r7, r5, r3
 800da7e:	1b5e      	sublt	r6, r3, r5
 800da80:	9b08      	ldr	r3, [sp, #32]
 800da82:	1aed      	subs	r5, r5, r3
 800da84:	4415      	add	r5, r2
 800da86:	4b66      	ldr	r3, [pc, #408]	@ (800dc20 <_strtod_l+0x858>)
 800da88:	3d01      	subs	r5, #1
 800da8a:	429d      	cmp	r5, r3
 800da8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800da90:	da50      	bge.n	800db34 <_strtod_l+0x76c>
 800da92:	1b5b      	subs	r3, r3, r5
 800da94:	2b1f      	cmp	r3, #31
 800da96:	eba2 0203 	sub.w	r2, r2, r3
 800da9a:	f04f 0101 	mov.w	r1, #1
 800da9e:	dc3d      	bgt.n	800db1c <_strtod_l+0x754>
 800daa0:	fa01 f303 	lsl.w	r3, r1, r3
 800daa4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800daa6:	2300      	movs	r3, #0
 800daa8:	9310      	str	r3, [sp, #64]	@ 0x40
 800daaa:	18bd      	adds	r5, r7, r2
 800daac:	9b08      	ldr	r3, [sp, #32]
 800daae:	42af      	cmp	r7, r5
 800dab0:	4416      	add	r6, r2
 800dab2:	441e      	add	r6, r3
 800dab4:	463b      	mov	r3, r7
 800dab6:	bfa8      	it	ge
 800dab8:	462b      	movge	r3, r5
 800daba:	42b3      	cmp	r3, r6
 800dabc:	bfa8      	it	ge
 800dabe:	4633      	movge	r3, r6
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	bfc2      	ittt	gt
 800dac4:	1aed      	subgt	r5, r5, r3
 800dac6:	1af6      	subgt	r6, r6, r3
 800dac8:	1aff      	subgt	r7, r7, r3
 800daca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dacc:	2b00      	cmp	r3, #0
 800dace:	dd16      	ble.n	800dafe <_strtod_l+0x736>
 800dad0:	4641      	mov	r1, r8
 800dad2:	9805      	ldr	r0, [sp, #20]
 800dad4:	461a      	mov	r2, r3
 800dad6:	f7ff f9a5 	bl	800ce24 <__pow5mult>
 800dada:	4680      	mov	r8, r0
 800dadc:	2800      	cmp	r0, #0
 800dade:	d0ba      	beq.n	800da56 <_strtod_l+0x68e>
 800dae0:	4601      	mov	r1, r0
 800dae2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dae4:	9805      	ldr	r0, [sp, #20]
 800dae6:	f7ff f8f3 	bl	800ccd0 <__multiply>
 800daea:	900e      	str	r0, [sp, #56]	@ 0x38
 800daec:	2800      	cmp	r0, #0
 800daee:	f43f ae8a 	beq.w	800d806 <_strtod_l+0x43e>
 800daf2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800daf4:	9805      	ldr	r0, [sp, #20]
 800daf6:	f7fe ffd7 	bl	800caa8 <_Bfree>
 800dafa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dafc:	931a      	str	r3, [sp, #104]	@ 0x68
 800dafe:	2d00      	cmp	r5, #0
 800db00:	dc1d      	bgt.n	800db3e <_strtod_l+0x776>
 800db02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db04:	2b00      	cmp	r3, #0
 800db06:	dd23      	ble.n	800db50 <_strtod_l+0x788>
 800db08:	4649      	mov	r1, r9
 800db0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800db0c:	9805      	ldr	r0, [sp, #20]
 800db0e:	f7ff f989 	bl	800ce24 <__pow5mult>
 800db12:	4681      	mov	r9, r0
 800db14:	b9e0      	cbnz	r0, 800db50 <_strtod_l+0x788>
 800db16:	f04f 0900 	mov.w	r9, #0
 800db1a:	e674      	b.n	800d806 <_strtod_l+0x43e>
 800db1c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800db20:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800db24:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800db28:	35e2      	adds	r5, #226	@ 0xe2
 800db2a:	fa01 f305 	lsl.w	r3, r1, r5
 800db2e:	9310      	str	r3, [sp, #64]	@ 0x40
 800db30:	9113      	str	r1, [sp, #76]	@ 0x4c
 800db32:	e7ba      	b.n	800daaa <_strtod_l+0x6e2>
 800db34:	2300      	movs	r3, #0
 800db36:	9310      	str	r3, [sp, #64]	@ 0x40
 800db38:	2301      	movs	r3, #1
 800db3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db3c:	e7b5      	b.n	800daaa <_strtod_l+0x6e2>
 800db3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db40:	9805      	ldr	r0, [sp, #20]
 800db42:	462a      	mov	r2, r5
 800db44:	f7ff f9c8 	bl	800ced8 <__lshift>
 800db48:	901a      	str	r0, [sp, #104]	@ 0x68
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d1d9      	bne.n	800db02 <_strtod_l+0x73a>
 800db4e:	e65a      	b.n	800d806 <_strtod_l+0x43e>
 800db50:	2e00      	cmp	r6, #0
 800db52:	dd07      	ble.n	800db64 <_strtod_l+0x79c>
 800db54:	4649      	mov	r1, r9
 800db56:	9805      	ldr	r0, [sp, #20]
 800db58:	4632      	mov	r2, r6
 800db5a:	f7ff f9bd 	bl	800ced8 <__lshift>
 800db5e:	4681      	mov	r9, r0
 800db60:	2800      	cmp	r0, #0
 800db62:	d0d8      	beq.n	800db16 <_strtod_l+0x74e>
 800db64:	2f00      	cmp	r7, #0
 800db66:	dd08      	ble.n	800db7a <_strtod_l+0x7b2>
 800db68:	4641      	mov	r1, r8
 800db6a:	9805      	ldr	r0, [sp, #20]
 800db6c:	463a      	mov	r2, r7
 800db6e:	f7ff f9b3 	bl	800ced8 <__lshift>
 800db72:	4680      	mov	r8, r0
 800db74:	2800      	cmp	r0, #0
 800db76:	f43f ae46 	beq.w	800d806 <_strtod_l+0x43e>
 800db7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db7c:	9805      	ldr	r0, [sp, #20]
 800db7e:	464a      	mov	r2, r9
 800db80:	f7ff fa32 	bl	800cfe8 <__mdiff>
 800db84:	4604      	mov	r4, r0
 800db86:	2800      	cmp	r0, #0
 800db88:	f43f ae3d 	beq.w	800d806 <_strtod_l+0x43e>
 800db8c:	68c3      	ldr	r3, [r0, #12]
 800db8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800db90:	2300      	movs	r3, #0
 800db92:	60c3      	str	r3, [r0, #12]
 800db94:	4641      	mov	r1, r8
 800db96:	f7ff fa0b 	bl	800cfb0 <__mcmp>
 800db9a:	2800      	cmp	r0, #0
 800db9c:	da46      	bge.n	800dc2c <_strtod_l+0x864>
 800db9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dba0:	ea53 030a 	orrs.w	r3, r3, sl
 800dba4:	d16c      	bne.n	800dc80 <_strtod_l+0x8b8>
 800dba6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d168      	bne.n	800dc80 <_strtod_l+0x8b8>
 800dbae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dbb2:	0d1b      	lsrs	r3, r3, #20
 800dbb4:	051b      	lsls	r3, r3, #20
 800dbb6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dbba:	d961      	bls.n	800dc80 <_strtod_l+0x8b8>
 800dbbc:	6963      	ldr	r3, [r4, #20]
 800dbbe:	b913      	cbnz	r3, 800dbc6 <_strtod_l+0x7fe>
 800dbc0:	6923      	ldr	r3, [r4, #16]
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	dd5c      	ble.n	800dc80 <_strtod_l+0x8b8>
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	2201      	movs	r2, #1
 800dbca:	9805      	ldr	r0, [sp, #20]
 800dbcc:	f7ff f984 	bl	800ced8 <__lshift>
 800dbd0:	4641      	mov	r1, r8
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	f7ff f9ec 	bl	800cfb0 <__mcmp>
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	dd51      	ble.n	800dc80 <_strtod_l+0x8b8>
 800dbdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dbe0:	9a08      	ldr	r2, [sp, #32]
 800dbe2:	0d1b      	lsrs	r3, r3, #20
 800dbe4:	051b      	lsls	r3, r3, #20
 800dbe6:	2a00      	cmp	r2, #0
 800dbe8:	d06b      	beq.n	800dcc2 <_strtod_l+0x8fa>
 800dbea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dbee:	d868      	bhi.n	800dcc2 <_strtod_l+0x8fa>
 800dbf0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dbf4:	f67f ae9d 	bls.w	800d932 <_strtod_l+0x56a>
 800dbf8:	4b0a      	ldr	r3, [pc, #40]	@ (800dc24 <_strtod_l+0x85c>)
 800dbfa:	4650      	mov	r0, sl
 800dbfc:	4659      	mov	r1, fp
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f7f2 fd02 	bl	8000608 <__aeabi_dmul>
 800dc04:	4b08      	ldr	r3, [pc, #32]	@ (800dc28 <_strtod_l+0x860>)
 800dc06:	400b      	ands	r3, r1
 800dc08:	4682      	mov	sl, r0
 800dc0a:	468b      	mov	fp, r1
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f47f ae05 	bne.w	800d81c <_strtod_l+0x454>
 800dc12:	9a05      	ldr	r2, [sp, #20]
 800dc14:	2322      	movs	r3, #34	@ 0x22
 800dc16:	6013      	str	r3, [r2, #0]
 800dc18:	e600      	b.n	800d81c <_strtod_l+0x454>
 800dc1a:	bf00      	nop
 800dc1c:	0800f4f0 	.word	0x0800f4f0
 800dc20:	fffffc02 	.word	0xfffffc02
 800dc24:	39500000 	.word	0x39500000
 800dc28:	7ff00000 	.word	0x7ff00000
 800dc2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dc30:	d165      	bne.n	800dcfe <_strtod_l+0x936>
 800dc32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dc34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc38:	b35a      	cbz	r2, 800dc92 <_strtod_l+0x8ca>
 800dc3a:	4a9f      	ldr	r2, [pc, #636]	@ (800deb8 <_strtod_l+0xaf0>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d12b      	bne.n	800dc98 <_strtod_l+0x8d0>
 800dc40:	9b08      	ldr	r3, [sp, #32]
 800dc42:	4651      	mov	r1, sl
 800dc44:	b303      	cbz	r3, 800dc88 <_strtod_l+0x8c0>
 800dc46:	4b9d      	ldr	r3, [pc, #628]	@ (800debc <_strtod_l+0xaf4>)
 800dc48:	465a      	mov	r2, fp
 800dc4a:	4013      	ands	r3, r2
 800dc4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dc50:	f04f 32ff 	mov.w	r2, #4294967295
 800dc54:	d81b      	bhi.n	800dc8e <_strtod_l+0x8c6>
 800dc56:	0d1b      	lsrs	r3, r3, #20
 800dc58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dc5c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc60:	4299      	cmp	r1, r3
 800dc62:	d119      	bne.n	800dc98 <_strtod_l+0x8d0>
 800dc64:	4b96      	ldr	r3, [pc, #600]	@ (800dec0 <_strtod_l+0xaf8>)
 800dc66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d102      	bne.n	800dc72 <_strtod_l+0x8aa>
 800dc6c:	3101      	adds	r1, #1
 800dc6e:	f43f adca 	beq.w	800d806 <_strtod_l+0x43e>
 800dc72:	4b92      	ldr	r3, [pc, #584]	@ (800debc <_strtod_l+0xaf4>)
 800dc74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc76:	401a      	ands	r2, r3
 800dc78:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800dc7c:	f04f 0a00 	mov.w	sl, #0
 800dc80:	9b08      	ldr	r3, [sp, #32]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1b8      	bne.n	800dbf8 <_strtod_l+0x830>
 800dc86:	e5c9      	b.n	800d81c <_strtod_l+0x454>
 800dc88:	f04f 33ff 	mov.w	r3, #4294967295
 800dc8c:	e7e8      	b.n	800dc60 <_strtod_l+0x898>
 800dc8e:	4613      	mov	r3, r2
 800dc90:	e7e6      	b.n	800dc60 <_strtod_l+0x898>
 800dc92:	ea53 030a 	orrs.w	r3, r3, sl
 800dc96:	d0a1      	beq.n	800dbdc <_strtod_l+0x814>
 800dc98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dc9a:	b1db      	cbz	r3, 800dcd4 <_strtod_l+0x90c>
 800dc9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc9e:	4213      	tst	r3, r2
 800dca0:	d0ee      	beq.n	800dc80 <_strtod_l+0x8b8>
 800dca2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dca4:	9a08      	ldr	r2, [sp, #32]
 800dca6:	4650      	mov	r0, sl
 800dca8:	4659      	mov	r1, fp
 800dcaa:	b1bb      	cbz	r3, 800dcdc <_strtod_l+0x914>
 800dcac:	f7ff fb6e 	bl	800d38c <sulp>
 800dcb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dcb4:	ec53 2b10 	vmov	r2, r3, d0
 800dcb8:	f7f2 faf0 	bl	800029c <__adddf3>
 800dcbc:	4682      	mov	sl, r0
 800dcbe:	468b      	mov	fp, r1
 800dcc0:	e7de      	b.n	800dc80 <_strtod_l+0x8b8>
 800dcc2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dcc6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dcca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dcce:	f04f 3aff 	mov.w	sl, #4294967295
 800dcd2:	e7d5      	b.n	800dc80 <_strtod_l+0x8b8>
 800dcd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dcd6:	ea13 0f0a 	tst.w	r3, sl
 800dcda:	e7e1      	b.n	800dca0 <_strtod_l+0x8d8>
 800dcdc:	f7ff fb56 	bl	800d38c <sulp>
 800dce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dce4:	ec53 2b10 	vmov	r2, r3, d0
 800dce8:	f7f2 fad6 	bl	8000298 <__aeabi_dsub>
 800dcec:	2200      	movs	r2, #0
 800dcee:	2300      	movs	r3, #0
 800dcf0:	4682      	mov	sl, r0
 800dcf2:	468b      	mov	fp, r1
 800dcf4:	f7f2 fef0 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	d0c1      	beq.n	800dc80 <_strtod_l+0x8b8>
 800dcfc:	e619      	b.n	800d932 <_strtod_l+0x56a>
 800dcfe:	4641      	mov	r1, r8
 800dd00:	4620      	mov	r0, r4
 800dd02:	f7ff facd 	bl	800d2a0 <__ratio>
 800dd06:	ec57 6b10 	vmov	r6, r7, d0
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dd10:	4630      	mov	r0, r6
 800dd12:	4639      	mov	r1, r7
 800dd14:	f7f2 fef4 	bl	8000b00 <__aeabi_dcmple>
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	d06f      	beq.n	800ddfc <_strtod_l+0xa34>
 800dd1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d17a      	bne.n	800de18 <_strtod_l+0xa50>
 800dd22:	f1ba 0f00 	cmp.w	sl, #0
 800dd26:	d158      	bne.n	800ddda <_strtod_l+0xa12>
 800dd28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d15a      	bne.n	800dde8 <_strtod_l+0xa20>
 800dd32:	4b64      	ldr	r3, [pc, #400]	@ (800dec4 <_strtod_l+0xafc>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	4630      	mov	r0, r6
 800dd38:	4639      	mov	r1, r7
 800dd3a:	f7f2 fed7 	bl	8000aec <__aeabi_dcmplt>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	d159      	bne.n	800ddf6 <_strtod_l+0xa2e>
 800dd42:	4630      	mov	r0, r6
 800dd44:	4639      	mov	r1, r7
 800dd46:	4b60      	ldr	r3, [pc, #384]	@ (800dec8 <_strtod_l+0xb00>)
 800dd48:	2200      	movs	r2, #0
 800dd4a:	f7f2 fc5d 	bl	8000608 <__aeabi_dmul>
 800dd4e:	4606      	mov	r6, r0
 800dd50:	460f      	mov	r7, r1
 800dd52:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800dd56:	9606      	str	r6, [sp, #24]
 800dd58:	9307      	str	r3, [sp, #28]
 800dd5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd5e:	4d57      	ldr	r5, [pc, #348]	@ (800debc <_strtod_l+0xaf4>)
 800dd60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dd64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd66:	401d      	ands	r5, r3
 800dd68:	4b58      	ldr	r3, [pc, #352]	@ (800decc <_strtod_l+0xb04>)
 800dd6a:	429d      	cmp	r5, r3
 800dd6c:	f040 80b2 	bne.w	800ded4 <_strtod_l+0xb0c>
 800dd70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd72:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800dd76:	ec4b ab10 	vmov	d0, sl, fp
 800dd7a:	f7ff f9c9 	bl	800d110 <__ulp>
 800dd7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd82:	ec51 0b10 	vmov	r0, r1, d0
 800dd86:	f7f2 fc3f 	bl	8000608 <__aeabi_dmul>
 800dd8a:	4652      	mov	r2, sl
 800dd8c:	465b      	mov	r3, fp
 800dd8e:	f7f2 fa85 	bl	800029c <__adddf3>
 800dd92:	460b      	mov	r3, r1
 800dd94:	4949      	ldr	r1, [pc, #292]	@ (800debc <_strtod_l+0xaf4>)
 800dd96:	4a4e      	ldr	r2, [pc, #312]	@ (800ded0 <_strtod_l+0xb08>)
 800dd98:	4019      	ands	r1, r3
 800dd9a:	4291      	cmp	r1, r2
 800dd9c:	4682      	mov	sl, r0
 800dd9e:	d942      	bls.n	800de26 <_strtod_l+0xa5e>
 800dda0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dda2:	4b47      	ldr	r3, [pc, #284]	@ (800dec0 <_strtod_l+0xaf8>)
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d103      	bne.n	800ddb0 <_strtod_l+0x9e8>
 800dda8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ddaa:	3301      	adds	r3, #1
 800ddac:	f43f ad2b 	beq.w	800d806 <_strtod_l+0x43e>
 800ddb0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800dec0 <_strtod_l+0xaf8>
 800ddb4:	f04f 3aff 	mov.w	sl, #4294967295
 800ddb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ddba:	9805      	ldr	r0, [sp, #20]
 800ddbc:	f7fe fe74 	bl	800caa8 <_Bfree>
 800ddc0:	9805      	ldr	r0, [sp, #20]
 800ddc2:	4649      	mov	r1, r9
 800ddc4:	f7fe fe70 	bl	800caa8 <_Bfree>
 800ddc8:	9805      	ldr	r0, [sp, #20]
 800ddca:	4641      	mov	r1, r8
 800ddcc:	f7fe fe6c 	bl	800caa8 <_Bfree>
 800ddd0:	9805      	ldr	r0, [sp, #20]
 800ddd2:	4621      	mov	r1, r4
 800ddd4:	f7fe fe68 	bl	800caa8 <_Bfree>
 800ddd8:	e618      	b.n	800da0c <_strtod_l+0x644>
 800ddda:	f1ba 0f01 	cmp.w	sl, #1
 800ddde:	d103      	bne.n	800dde8 <_strtod_l+0xa20>
 800dde0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	f43f ada5 	beq.w	800d932 <_strtod_l+0x56a>
 800dde8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800de98 <_strtod_l+0xad0>
 800ddec:	4f35      	ldr	r7, [pc, #212]	@ (800dec4 <_strtod_l+0xafc>)
 800ddee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ddf2:	2600      	movs	r6, #0
 800ddf4:	e7b1      	b.n	800dd5a <_strtod_l+0x992>
 800ddf6:	4f34      	ldr	r7, [pc, #208]	@ (800dec8 <_strtod_l+0xb00>)
 800ddf8:	2600      	movs	r6, #0
 800ddfa:	e7aa      	b.n	800dd52 <_strtod_l+0x98a>
 800ddfc:	4b32      	ldr	r3, [pc, #200]	@ (800dec8 <_strtod_l+0xb00>)
 800ddfe:	4630      	mov	r0, r6
 800de00:	4639      	mov	r1, r7
 800de02:	2200      	movs	r2, #0
 800de04:	f7f2 fc00 	bl	8000608 <__aeabi_dmul>
 800de08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de0a:	4606      	mov	r6, r0
 800de0c:	460f      	mov	r7, r1
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d09f      	beq.n	800dd52 <_strtod_l+0x98a>
 800de12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800de16:	e7a0      	b.n	800dd5a <_strtod_l+0x992>
 800de18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800dea0 <_strtod_l+0xad8>
 800de1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de20:	ec57 6b17 	vmov	r6, r7, d7
 800de24:	e799      	b.n	800dd5a <_strtod_l+0x992>
 800de26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800de2a:	9b08      	ldr	r3, [sp, #32]
 800de2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800de30:	2b00      	cmp	r3, #0
 800de32:	d1c1      	bne.n	800ddb8 <_strtod_l+0x9f0>
 800de34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de38:	0d1b      	lsrs	r3, r3, #20
 800de3a:	051b      	lsls	r3, r3, #20
 800de3c:	429d      	cmp	r5, r3
 800de3e:	d1bb      	bne.n	800ddb8 <_strtod_l+0x9f0>
 800de40:	4630      	mov	r0, r6
 800de42:	4639      	mov	r1, r7
 800de44:	f7f2 ff28 	bl	8000c98 <__aeabi_d2lz>
 800de48:	f7f2 fbb0 	bl	80005ac <__aeabi_l2d>
 800de4c:	4602      	mov	r2, r0
 800de4e:	460b      	mov	r3, r1
 800de50:	4630      	mov	r0, r6
 800de52:	4639      	mov	r1, r7
 800de54:	f7f2 fa20 	bl	8000298 <__aeabi_dsub>
 800de58:	460b      	mov	r3, r1
 800de5a:	4602      	mov	r2, r0
 800de5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800de60:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800de64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de66:	ea46 060a 	orr.w	r6, r6, sl
 800de6a:	431e      	orrs	r6, r3
 800de6c:	d06f      	beq.n	800df4e <_strtod_l+0xb86>
 800de6e:	a30e      	add	r3, pc, #56	@ (adr r3, 800dea8 <_strtod_l+0xae0>)
 800de70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de74:	f7f2 fe3a 	bl	8000aec <__aeabi_dcmplt>
 800de78:	2800      	cmp	r0, #0
 800de7a:	f47f accf 	bne.w	800d81c <_strtod_l+0x454>
 800de7e:	a30c      	add	r3, pc, #48	@ (adr r3, 800deb0 <_strtod_l+0xae8>)
 800de80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de88:	f7f2 fe4e 	bl	8000b28 <__aeabi_dcmpgt>
 800de8c:	2800      	cmp	r0, #0
 800de8e:	d093      	beq.n	800ddb8 <_strtod_l+0x9f0>
 800de90:	e4c4      	b.n	800d81c <_strtod_l+0x454>
 800de92:	bf00      	nop
 800de94:	f3af 8000 	nop.w
 800de98:	00000000 	.word	0x00000000
 800de9c:	bff00000 	.word	0xbff00000
 800dea0:	00000000 	.word	0x00000000
 800dea4:	3ff00000 	.word	0x3ff00000
 800dea8:	94a03595 	.word	0x94a03595
 800deac:	3fdfffff 	.word	0x3fdfffff
 800deb0:	35afe535 	.word	0x35afe535
 800deb4:	3fe00000 	.word	0x3fe00000
 800deb8:	000fffff 	.word	0x000fffff
 800debc:	7ff00000 	.word	0x7ff00000
 800dec0:	7fefffff 	.word	0x7fefffff
 800dec4:	3ff00000 	.word	0x3ff00000
 800dec8:	3fe00000 	.word	0x3fe00000
 800decc:	7fe00000 	.word	0x7fe00000
 800ded0:	7c9fffff 	.word	0x7c9fffff
 800ded4:	9b08      	ldr	r3, [sp, #32]
 800ded6:	b323      	cbz	r3, 800df22 <_strtod_l+0xb5a>
 800ded8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800dedc:	d821      	bhi.n	800df22 <_strtod_l+0xb5a>
 800dede:	a328      	add	r3, pc, #160	@ (adr r3, 800df80 <_strtod_l+0xbb8>)
 800dee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee4:	4630      	mov	r0, r6
 800dee6:	4639      	mov	r1, r7
 800dee8:	f7f2 fe0a 	bl	8000b00 <__aeabi_dcmple>
 800deec:	b1a0      	cbz	r0, 800df18 <_strtod_l+0xb50>
 800deee:	4639      	mov	r1, r7
 800def0:	4630      	mov	r0, r6
 800def2:	f7f2 fe61 	bl	8000bb8 <__aeabi_d2uiz>
 800def6:	2801      	cmp	r0, #1
 800def8:	bf38      	it	cc
 800defa:	2001      	movcc	r0, #1
 800defc:	f7f2 fb0a 	bl	8000514 <__aeabi_ui2d>
 800df00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df02:	4606      	mov	r6, r0
 800df04:	460f      	mov	r7, r1
 800df06:	b9fb      	cbnz	r3, 800df48 <_strtod_l+0xb80>
 800df08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800df0c:	9014      	str	r0, [sp, #80]	@ 0x50
 800df0e:	9315      	str	r3, [sp, #84]	@ 0x54
 800df10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800df14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800df18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800df1e:	1b5b      	subs	r3, r3, r5
 800df20:	9311      	str	r3, [sp, #68]	@ 0x44
 800df22:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800df26:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800df2a:	f7ff f8f1 	bl	800d110 <__ulp>
 800df2e:	4650      	mov	r0, sl
 800df30:	ec53 2b10 	vmov	r2, r3, d0
 800df34:	4659      	mov	r1, fp
 800df36:	f7f2 fb67 	bl	8000608 <__aeabi_dmul>
 800df3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800df3e:	f7f2 f9ad 	bl	800029c <__adddf3>
 800df42:	4682      	mov	sl, r0
 800df44:	468b      	mov	fp, r1
 800df46:	e770      	b.n	800de2a <_strtod_l+0xa62>
 800df48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800df4c:	e7e0      	b.n	800df10 <_strtod_l+0xb48>
 800df4e:	a30e      	add	r3, pc, #56	@ (adr r3, 800df88 <_strtod_l+0xbc0>)
 800df50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df54:	f7f2 fdca 	bl	8000aec <__aeabi_dcmplt>
 800df58:	e798      	b.n	800de8c <_strtod_l+0xac4>
 800df5a:	2300      	movs	r3, #0
 800df5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800df60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df62:	6013      	str	r3, [r2, #0]
 800df64:	f7ff ba6d 	b.w	800d442 <_strtod_l+0x7a>
 800df68:	2a65      	cmp	r2, #101	@ 0x65
 800df6a:	f43f ab66 	beq.w	800d63a <_strtod_l+0x272>
 800df6e:	2a45      	cmp	r2, #69	@ 0x45
 800df70:	f43f ab63 	beq.w	800d63a <_strtod_l+0x272>
 800df74:	2301      	movs	r3, #1
 800df76:	f7ff bb9e 	b.w	800d6b6 <_strtod_l+0x2ee>
 800df7a:	bf00      	nop
 800df7c:	f3af 8000 	nop.w
 800df80:	ffc00000 	.word	0xffc00000
 800df84:	41dfffff 	.word	0x41dfffff
 800df88:	94a03595 	.word	0x94a03595
 800df8c:	3fcfffff 	.word	0x3fcfffff

0800df90 <_strtod_r>:
 800df90:	4b01      	ldr	r3, [pc, #4]	@ (800df98 <_strtod_r+0x8>)
 800df92:	f7ff ba19 	b.w	800d3c8 <_strtod_l>
 800df96:	bf00      	nop
 800df98:	20000068 	.word	0x20000068

0800df9c <_strtol_l.constprop.0>:
 800df9c:	2b24      	cmp	r3, #36	@ 0x24
 800df9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfa2:	4686      	mov	lr, r0
 800dfa4:	4690      	mov	r8, r2
 800dfa6:	d801      	bhi.n	800dfac <_strtol_l.constprop.0+0x10>
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d106      	bne.n	800dfba <_strtol_l.constprop.0+0x1e>
 800dfac:	f7fd fdba 	bl	800bb24 <__errno>
 800dfb0:	2316      	movs	r3, #22
 800dfb2:	6003      	str	r3, [r0, #0]
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfba:	4834      	ldr	r0, [pc, #208]	@ (800e08c <_strtol_l.constprop.0+0xf0>)
 800dfbc:	460d      	mov	r5, r1
 800dfbe:	462a      	mov	r2, r5
 800dfc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfc4:	5d06      	ldrb	r6, [r0, r4]
 800dfc6:	f016 0608 	ands.w	r6, r6, #8
 800dfca:	d1f8      	bne.n	800dfbe <_strtol_l.constprop.0+0x22>
 800dfcc:	2c2d      	cmp	r4, #45	@ 0x2d
 800dfce:	d12d      	bne.n	800e02c <_strtol_l.constprop.0+0x90>
 800dfd0:	782c      	ldrb	r4, [r5, #0]
 800dfd2:	2601      	movs	r6, #1
 800dfd4:	1c95      	adds	r5, r2, #2
 800dfd6:	f033 0210 	bics.w	r2, r3, #16
 800dfda:	d109      	bne.n	800dff0 <_strtol_l.constprop.0+0x54>
 800dfdc:	2c30      	cmp	r4, #48	@ 0x30
 800dfde:	d12a      	bne.n	800e036 <_strtol_l.constprop.0+0x9a>
 800dfe0:	782a      	ldrb	r2, [r5, #0]
 800dfe2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dfe6:	2a58      	cmp	r2, #88	@ 0x58
 800dfe8:	d125      	bne.n	800e036 <_strtol_l.constprop.0+0x9a>
 800dfea:	786c      	ldrb	r4, [r5, #1]
 800dfec:	2310      	movs	r3, #16
 800dfee:	3502      	adds	r5, #2
 800dff0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dff4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dff8:	2200      	movs	r2, #0
 800dffa:	fbbc f9f3 	udiv	r9, ip, r3
 800dffe:	4610      	mov	r0, r2
 800e000:	fb03 ca19 	mls	sl, r3, r9, ip
 800e004:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e008:	2f09      	cmp	r7, #9
 800e00a:	d81b      	bhi.n	800e044 <_strtol_l.constprop.0+0xa8>
 800e00c:	463c      	mov	r4, r7
 800e00e:	42a3      	cmp	r3, r4
 800e010:	dd27      	ble.n	800e062 <_strtol_l.constprop.0+0xc6>
 800e012:	1c57      	adds	r7, r2, #1
 800e014:	d007      	beq.n	800e026 <_strtol_l.constprop.0+0x8a>
 800e016:	4581      	cmp	r9, r0
 800e018:	d320      	bcc.n	800e05c <_strtol_l.constprop.0+0xc0>
 800e01a:	d101      	bne.n	800e020 <_strtol_l.constprop.0+0x84>
 800e01c:	45a2      	cmp	sl, r4
 800e01e:	db1d      	blt.n	800e05c <_strtol_l.constprop.0+0xc0>
 800e020:	fb00 4003 	mla	r0, r0, r3, r4
 800e024:	2201      	movs	r2, #1
 800e026:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e02a:	e7eb      	b.n	800e004 <_strtol_l.constprop.0+0x68>
 800e02c:	2c2b      	cmp	r4, #43	@ 0x2b
 800e02e:	bf04      	itt	eq
 800e030:	782c      	ldrbeq	r4, [r5, #0]
 800e032:	1c95      	addeq	r5, r2, #2
 800e034:	e7cf      	b.n	800dfd6 <_strtol_l.constprop.0+0x3a>
 800e036:	2b00      	cmp	r3, #0
 800e038:	d1da      	bne.n	800dff0 <_strtol_l.constprop.0+0x54>
 800e03a:	2c30      	cmp	r4, #48	@ 0x30
 800e03c:	bf0c      	ite	eq
 800e03e:	2308      	moveq	r3, #8
 800e040:	230a      	movne	r3, #10
 800e042:	e7d5      	b.n	800dff0 <_strtol_l.constprop.0+0x54>
 800e044:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e048:	2f19      	cmp	r7, #25
 800e04a:	d801      	bhi.n	800e050 <_strtol_l.constprop.0+0xb4>
 800e04c:	3c37      	subs	r4, #55	@ 0x37
 800e04e:	e7de      	b.n	800e00e <_strtol_l.constprop.0+0x72>
 800e050:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e054:	2f19      	cmp	r7, #25
 800e056:	d804      	bhi.n	800e062 <_strtol_l.constprop.0+0xc6>
 800e058:	3c57      	subs	r4, #87	@ 0x57
 800e05a:	e7d8      	b.n	800e00e <_strtol_l.constprop.0+0x72>
 800e05c:	f04f 32ff 	mov.w	r2, #4294967295
 800e060:	e7e1      	b.n	800e026 <_strtol_l.constprop.0+0x8a>
 800e062:	1c53      	adds	r3, r2, #1
 800e064:	d108      	bne.n	800e078 <_strtol_l.constprop.0+0xdc>
 800e066:	2322      	movs	r3, #34	@ 0x22
 800e068:	f8ce 3000 	str.w	r3, [lr]
 800e06c:	4660      	mov	r0, ip
 800e06e:	f1b8 0f00 	cmp.w	r8, #0
 800e072:	d0a0      	beq.n	800dfb6 <_strtol_l.constprop.0+0x1a>
 800e074:	1e69      	subs	r1, r5, #1
 800e076:	e006      	b.n	800e086 <_strtol_l.constprop.0+0xea>
 800e078:	b106      	cbz	r6, 800e07c <_strtol_l.constprop.0+0xe0>
 800e07a:	4240      	negs	r0, r0
 800e07c:	f1b8 0f00 	cmp.w	r8, #0
 800e080:	d099      	beq.n	800dfb6 <_strtol_l.constprop.0+0x1a>
 800e082:	2a00      	cmp	r2, #0
 800e084:	d1f6      	bne.n	800e074 <_strtol_l.constprop.0+0xd8>
 800e086:	f8c8 1000 	str.w	r1, [r8]
 800e08a:	e794      	b.n	800dfb6 <_strtol_l.constprop.0+0x1a>
 800e08c:	0800f519 	.word	0x0800f519

0800e090 <_strtol_r>:
 800e090:	f7ff bf84 	b.w	800df9c <_strtol_l.constprop.0>

0800e094 <__ssputs_r>:
 800e094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e098:	688e      	ldr	r6, [r1, #8]
 800e09a:	461f      	mov	r7, r3
 800e09c:	42be      	cmp	r6, r7
 800e09e:	680b      	ldr	r3, [r1, #0]
 800e0a0:	4682      	mov	sl, r0
 800e0a2:	460c      	mov	r4, r1
 800e0a4:	4690      	mov	r8, r2
 800e0a6:	d82d      	bhi.n	800e104 <__ssputs_r+0x70>
 800e0a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e0b0:	d026      	beq.n	800e100 <__ssputs_r+0x6c>
 800e0b2:	6965      	ldr	r5, [r4, #20]
 800e0b4:	6909      	ldr	r1, [r1, #16]
 800e0b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0ba:	eba3 0901 	sub.w	r9, r3, r1
 800e0be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0c2:	1c7b      	adds	r3, r7, #1
 800e0c4:	444b      	add	r3, r9
 800e0c6:	106d      	asrs	r5, r5, #1
 800e0c8:	429d      	cmp	r5, r3
 800e0ca:	bf38      	it	cc
 800e0cc:	461d      	movcc	r5, r3
 800e0ce:	0553      	lsls	r3, r2, #21
 800e0d0:	d527      	bpl.n	800e122 <__ssputs_r+0x8e>
 800e0d2:	4629      	mov	r1, r5
 800e0d4:	f7fe fc1c 	bl	800c910 <_malloc_r>
 800e0d8:	4606      	mov	r6, r0
 800e0da:	b360      	cbz	r0, 800e136 <__ssputs_r+0xa2>
 800e0dc:	6921      	ldr	r1, [r4, #16]
 800e0de:	464a      	mov	r2, r9
 800e0e0:	f000 fa18 	bl	800e514 <memcpy>
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e0ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0ee:	81a3      	strh	r3, [r4, #12]
 800e0f0:	6126      	str	r6, [r4, #16]
 800e0f2:	6165      	str	r5, [r4, #20]
 800e0f4:	444e      	add	r6, r9
 800e0f6:	eba5 0509 	sub.w	r5, r5, r9
 800e0fa:	6026      	str	r6, [r4, #0]
 800e0fc:	60a5      	str	r5, [r4, #8]
 800e0fe:	463e      	mov	r6, r7
 800e100:	42be      	cmp	r6, r7
 800e102:	d900      	bls.n	800e106 <__ssputs_r+0x72>
 800e104:	463e      	mov	r6, r7
 800e106:	6820      	ldr	r0, [r4, #0]
 800e108:	4632      	mov	r2, r6
 800e10a:	4641      	mov	r1, r8
 800e10c:	f000 f9c6 	bl	800e49c <memmove>
 800e110:	68a3      	ldr	r3, [r4, #8]
 800e112:	1b9b      	subs	r3, r3, r6
 800e114:	60a3      	str	r3, [r4, #8]
 800e116:	6823      	ldr	r3, [r4, #0]
 800e118:	4433      	add	r3, r6
 800e11a:	6023      	str	r3, [r4, #0]
 800e11c:	2000      	movs	r0, #0
 800e11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e122:	462a      	mov	r2, r5
 800e124:	f000 fd89 	bl	800ec3a <_realloc_r>
 800e128:	4606      	mov	r6, r0
 800e12a:	2800      	cmp	r0, #0
 800e12c:	d1e0      	bne.n	800e0f0 <__ssputs_r+0x5c>
 800e12e:	6921      	ldr	r1, [r4, #16]
 800e130:	4650      	mov	r0, sl
 800e132:	f7fe fb79 	bl	800c828 <_free_r>
 800e136:	230c      	movs	r3, #12
 800e138:	f8ca 3000 	str.w	r3, [sl]
 800e13c:	89a3      	ldrh	r3, [r4, #12]
 800e13e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e142:	81a3      	strh	r3, [r4, #12]
 800e144:	f04f 30ff 	mov.w	r0, #4294967295
 800e148:	e7e9      	b.n	800e11e <__ssputs_r+0x8a>
	...

0800e14c <_svfiprintf_r>:
 800e14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e150:	4698      	mov	r8, r3
 800e152:	898b      	ldrh	r3, [r1, #12]
 800e154:	061b      	lsls	r3, r3, #24
 800e156:	b09d      	sub	sp, #116	@ 0x74
 800e158:	4607      	mov	r7, r0
 800e15a:	460d      	mov	r5, r1
 800e15c:	4614      	mov	r4, r2
 800e15e:	d510      	bpl.n	800e182 <_svfiprintf_r+0x36>
 800e160:	690b      	ldr	r3, [r1, #16]
 800e162:	b973      	cbnz	r3, 800e182 <_svfiprintf_r+0x36>
 800e164:	2140      	movs	r1, #64	@ 0x40
 800e166:	f7fe fbd3 	bl	800c910 <_malloc_r>
 800e16a:	6028      	str	r0, [r5, #0]
 800e16c:	6128      	str	r0, [r5, #16]
 800e16e:	b930      	cbnz	r0, 800e17e <_svfiprintf_r+0x32>
 800e170:	230c      	movs	r3, #12
 800e172:	603b      	str	r3, [r7, #0]
 800e174:	f04f 30ff 	mov.w	r0, #4294967295
 800e178:	b01d      	add	sp, #116	@ 0x74
 800e17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e17e:	2340      	movs	r3, #64	@ 0x40
 800e180:	616b      	str	r3, [r5, #20]
 800e182:	2300      	movs	r3, #0
 800e184:	9309      	str	r3, [sp, #36]	@ 0x24
 800e186:	2320      	movs	r3, #32
 800e188:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e18c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e190:	2330      	movs	r3, #48	@ 0x30
 800e192:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e330 <_svfiprintf_r+0x1e4>
 800e196:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e19a:	f04f 0901 	mov.w	r9, #1
 800e19e:	4623      	mov	r3, r4
 800e1a0:	469a      	mov	sl, r3
 800e1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1a6:	b10a      	cbz	r2, 800e1ac <_svfiprintf_r+0x60>
 800e1a8:	2a25      	cmp	r2, #37	@ 0x25
 800e1aa:	d1f9      	bne.n	800e1a0 <_svfiprintf_r+0x54>
 800e1ac:	ebba 0b04 	subs.w	fp, sl, r4
 800e1b0:	d00b      	beq.n	800e1ca <_svfiprintf_r+0x7e>
 800e1b2:	465b      	mov	r3, fp
 800e1b4:	4622      	mov	r2, r4
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	4638      	mov	r0, r7
 800e1ba:	f7ff ff6b 	bl	800e094 <__ssputs_r>
 800e1be:	3001      	adds	r0, #1
 800e1c0:	f000 80a7 	beq.w	800e312 <_svfiprintf_r+0x1c6>
 800e1c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1c6:	445a      	add	r2, fp
 800e1c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	f000 809f 	beq.w	800e312 <_svfiprintf_r+0x1c6>
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1de:	f10a 0a01 	add.w	sl, sl, #1
 800e1e2:	9304      	str	r3, [sp, #16]
 800e1e4:	9307      	str	r3, [sp, #28]
 800e1e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1ec:	4654      	mov	r4, sl
 800e1ee:	2205      	movs	r2, #5
 800e1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1f4:	484e      	ldr	r0, [pc, #312]	@ (800e330 <_svfiprintf_r+0x1e4>)
 800e1f6:	f7f1 fff3 	bl	80001e0 <memchr>
 800e1fa:	9a04      	ldr	r2, [sp, #16]
 800e1fc:	b9d8      	cbnz	r0, 800e236 <_svfiprintf_r+0xea>
 800e1fe:	06d0      	lsls	r0, r2, #27
 800e200:	bf44      	itt	mi
 800e202:	2320      	movmi	r3, #32
 800e204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e208:	0711      	lsls	r1, r2, #28
 800e20a:	bf44      	itt	mi
 800e20c:	232b      	movmi	r3, #43	@ 0x2b
 800e20e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e212:	f89a 3000 	ldrb.w	r3, [sl]
 800e216:	2b2a      	cmp	r3, #42	@ 0x2a
 800e218:	d015      	beq.n	800e246 <_svfiprintf_r+0xfa>
 800e21a:	9a07      	ldr	r2, [sp, #28]
 800e21c:	4654      	mov	r4, sl
 800e21e:	2000      	movs	r0, #0
 800e220:	f04f 0c0a 	mov.w	ip, #10
 800e224:	4621      	mov	r1, r4
 800e226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e22a:	3b30      	subs	r3, #48	@ 0x30
 800e22c:	2b09      	cmp	r3, #9
 800e22e:	d94b      	bls.n	800e2c8 <_svfiprintf_r+0x17c>
 800e230:	b1b0      	cbz	r0, 800e260 <_svfiprintf_r+0x114>
 800e232:	9207      	str	r2, [sp, #28]
 800e234:	e014      	b.n	800e260 <_svfiprintf_r+0x114>
 800e236:	eba0 0308 	sub.w	r3, r0, r8
 800e23a:	fa09 f303 	lsl.w	r3, r9, r3
 800e23e:	4313      	orrs	r3, r2
 800e240:	9304      	str	r3, [sp, #16]
 800e242:	46a2      	mov	sl, r4
 800e244:	e7d2      	b.n	800e1ec <_svfiprintf_r+0xa0>
 800e246:	9b03      	ldr	r3, [sp, #12]
 800e248:	1d19      	adds	r1, r3, #4
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	9103      	str	r1, [sp, #12]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	bfbb      	ittet	lt
 800e252:	425b      	neglt	r3, r3
 800e254:	f042 0202 	orrlt.w	r2, r2, #2
 800e258:	9307      	strge	r3, [sp, #28]
 800e25a:	9307      	strlt	r3, [sp, #28]
 800e25c:	bfb8      	it	lt
 800e25e:	9204      	strlt	r2, [sp, #16]
 800e260:	7823      	ldrb	r3, [r4, #0]
 800e262:	2b2e      	cmp	r3, #46	@ 0x2e
 800e264:	d10a      	bne.n	800e27c <_svfiprintf_r+0x130>
 800e266:	7863      	ldrb	r3, [r4, #1]
 800e268:	2b2a      	cmp	r3, #42	@ 0x2a
 800e26a:	d132      	bne.n	800e2d2 <_svfiprintf_r+0x186>
 800e26c:	9b03      	ldr	r3, [sp, #12]
 800e26e:	1d1a      	adds	r2, r3, #4
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	9203      	str	r2, [sp, #12]
 800e274:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e278:	3402      	adds	r4, #2
 800e27a:	9305      	str	r3, [sp, #20]
 800e27c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e340 <_svfiprintf_r+0x1f4>
 800e280:	7821      	ldrb	r1, [r4, #0]
 800e282:	2203      	movs	r2, #3
 800e284:	4650      	mov	r0, sl
 800e286:	f7f1 ffab 	bl	80001e0 <memchr>
 800e28a:	b138      	cbz	r0, 800e29c <_svfiprintf_r+0x150>
 800e28c:	9b04      	ldr	r3, [sp, #16]
 800e28e:	eba0 000a 	sub.w	r0, r0, sl
 800e292:	2240      	movs	r2, #64	@ 0x40
 800e294:	4082      	lsls	r2, r0
 800e296:	4313      	orrs	r3, r2
 800e298:	3401      	adds	r4, #1
 800e29a:	9304      	str	r3, [sp, #16]
 800e29c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2a0:	4824      	ldr	r0, [pc, #144]	@ (800e334 <_svfiprintf_r+0x1e8>)
 800e2a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2a6:	2206      	movs	r2, #6
 800e2a8:	f7f1 ff9a 	bl	80001e0 <memchr>
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	d036      	beq.n	800e31e <_svfiprintf_r+0x1d2>
 800e2b0:	4b21      	ldr	r3, [pc, #132]	@ (800e338 <_svfiprintf_r+0x1ec>)
 800e2b2:	bb1b      	cbnz	r3, 800e2fc <_svfiprintf_r+0x1b0>
 800e2b4:	9b03      	ldr	r3, [sp, #12]
 800e2b6:	3307      	adds	r3, #7
 800e2b8:	f023 0307 	bic.w	r3, r3, #7
 800e2bc:	3308      	adds	r3, #8
 800e2be:	9303      	str	r3, [sp, #12]
 800e2c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2c2:	4433      	add	r3, r6
 800e2c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2c6:	e76a      	b.n	800e19e <_svfiprintf_r+0x52>
 800e2c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2cc:	460c      	mov	r4, r1
 800e2ce:	2001      	movs	r0, #1
 800e2d0:	e7a8      	b.n	800e224 <_svfiprintf_r+0xd8>
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	3401      	adds	r4, #1
 800e2d6:	9305      	str	r3, [sp, #20]
 800e2d8:	4619      	mov	r1, r3
 800e2da:	f04f 0c0a 	mov.w	ip, #10
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2e4:	3a30      	subs	r2, #48	@ 0x30
 800e2e6:	2a09      	cmp	r2, #9
 800e2e8:	d903      	bls.n	800e2f2 <_svfiprintf_r+0x1a6>
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d0c6      	beq.n	800e27c <_svfiprintf_r+0x130>
 800e2ee:	9105      	str	r1, [sp, #20]
 800e2f0:	e7c4      	b.n	800e27c <_svfiprintf_r+0x130>
 800e2f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2f6:	4604      	mov	r4, r0
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e7f0      	b.n	800e2de <_svfiprintf_r+0x192>
 800e2fc:	ab03      	add	r3, sp, #12
 800e2fe:	9300      	str	r3, [sp, #0]
 800e300:	462a      	mov	r2, r5
 800e302:	4b0e      	ldr	r3, [pc, #56]	@ (800e33c <_svfiprintf_r+0x1f0>)
 800e304:	a904      	add	r1, sp, #16
 800e306:	4638      	mov	r0, r7
 800e308:	f7fc fcc8 	bl	800ac9c <_printf_float>
 800e30c:	1c42      	adds	r2, r0, #1
 800e30e:	4606      	mov	r6, r0
 800e310:	d1d6      	bne.n	800e2c0 <_svfiprintf_r+0x174>
 800e312:	89ab      	ldrh	r3, [r5, #12]
 800e314:	065b      	lsls	r3, r3, #25
 800e316:	f53f af2d 	bmi.w	800e174 <_svfiprintf_r+0x28>
 800e31a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e31c:	e72c      	b.n	800e178 <_svfiprintf_r+0x2c>
 800e31e:	ab03      	add	r3, sp, #12
 800e320:	9300      	str	r3, [sp, #0]
 800e322:	462a      	mov	r2, r5
 800e324:	4b05      	ldr	r3, [pc, #20]	@ (800e33c <_svfiprintf_r+0x1f0>)
 800e326:	a904      	add	r1, sp, #16
 800e328:	4638      	mov	r0, r7
 800e32a:	f7fc ff4f 	bl	800b1cc <_printf_i>
 800e32e:	e7ed      	b.n	800e30c <_svfiprintf_r+0x1c0>
 800e330:	0800f619 	.word	0x0800f619
 800e334:	0800f623 	.word	0x0800f623
 800e338:	0800ac9d 	.word	0x0800ac9d
 800e33c:	0800e095 	.word	0x0800e095
 800e340:	0800f61f 	.word	0x0800f61f

0800e344 <__sflush_r>:
 800e344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e34c:	0716      	lsls	r6, r2, #28
 800e34e:	4605      	mov	r5, r0
 800e350:	460c      	mov	r4, r1
 800e352:	d454      	bmi.n	800e3fe <__sflush_r+0xba>
 800e354:	684b      	ldr	r3, [r1, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	dc02      	bgt.n	800e360 <__sflush_r+0x1c>
 800e35a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	dd48      	ble.n	800e3f2 <__sflush_r+0xae>
 800e360:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e362:	2e00      	cmp	r6, #0
 800e364:	d045      	beq.n	800e3f2 <__sflush_r+0xae>
 800e366:	2300      	movs	r3, #0
 800e368:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e36c:	682f      	ldr	r7, [r5, #0]
 800e36e:	6a21      	ldr	r1, [r4, #32]
 800e370:	602b      	str	r3, [r5, #0]
 800e372:	d030      	beq.n	800e3d6 <__sflush_r+0x92>
 800e374:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e376:	89a3      	ldrh	r3, [r4, #12]
 800e378:	0759      	lsls	r1, r3, #29
 800e37a:	d505      	bpl.n	800e388 <__sflush_r+0x44>
 800e37c:	6863      	ldr	r3, [r4, #4]
 800e37e:	1ad2      	subs	r2, r2, r3
 800e380:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e382:	b10b      	cbz	r3, 800e388 <__sflush_r+0x44>
 800e384:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e386:	1ad2      	subs	r2, r2, r3
 800e388:	2300      	movs	r3, #0
 800e38a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e38c:	6a21      	ldr	r1, [r4, #32]
 800e38e:	4628      	mov	r0, r5
 800e390:	47b0      	blx	r6
 800e392:	1c43      	adds	r3, r0, #1
 800e394:	89a3      	ldrh	r3, [r4, #12]
 800e396:	d106      	bne.n	800e3a6 <__sflush_r+0x62>
 800e398:	6829      	ldr	r1, [r5, #0]
 800e39a:	291d      	cmp	r1, #29
 800e39c:	d82b      	bhi.n	800e3f6 <__sflush_r+0xb2>
 800e39e:	4a2a      	ldr	r2, [pc, #168]	@ (800e448 <__sflush_r+0x104>)
 800e3a0:	410a      	asrs	r2, r1
 800e3a2:	07d6      	lsls	r6, r2, #31
 800e3a4:	d427      	bmi.n	800e3f6 <__sflush_r+0xb2>
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	6062      	str	r2, [r4, #4]
 800e3aa:	04d9      	lsls	r1, r3, #19
 800e3ac:	6922      	ldr	r2, [r4, #16]
 800e3ae:	6022      	str	r2, [r4, #0]
 800e3b0:	d504      	bpl.n	800e3bc <__sflush_r+0x78>
 800e3b2:	1c42      	adds	r2, r0, #1
 800e3b4:	d101      	bne.n	800e3ba <__sflush_r+0x76>
 800e3b6:	682b      	ldr	r3, [r5, #0]
 800e3b8:	b903      	cbnz	r3, 800e3bc <__sflush_r+0x78>
 800e3ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800e3bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3be:	602f      	str	r7, [r5, #0]
 800e3c0:	b1b9      	cbz	r1, 800e3f2 <__sflush_r+0xae>
 800e3c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3c6:	4299      	cmp	r1, r3
 800e3c8:	d002      	beq.n	800e3d0 <__sflush_r+0x8c>
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	f7fe fa2c 	bl	800c828 <_free_r>
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3d4:	e00d      	b.n	800e3f2 <__sflush_r+0xae>
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	4628      	mov	r0, r5
 800e3da:	47b0      	blx	r6
 800e3dc:	4602      	mov	r2, r0
 800e3de:	1c50      	adds	r0, r2, #1
 800e3e0:	d1c9      	bne.n	800e376 <__sflush_r+0x32>
 800e3e2:	682b      	ldr	r3, [r5, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d0c6      	beq.n	800e376 <__sflush_r+0x32>
 800e3e8:	2b1d      	cmp	r3, #29
 800e3ea:	d001      	beq.n	800e3f0 <__sflush_r+0xac>
 800e3ec:	2b16      	cmp	r3, #22
 800e3ee:	d11e      	bne.n	800e42e <__sflush_r+0xea>
 800e3f0:	602f      	str	r7, [r5, #0]
 800e3f2:	2000      	movs	r0, #0
 800e3f4:	e022      	b.n	800e43c <__sflush_r+0xf8>
 800e3f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3fa:	b21b      	sxth	r3, r3
 800e3fc:	e01b      	b.n	800e436 <__sflush_r+0xf2>
 800e3fe:	690f      	ldr	r7, [r1, #16]
 800e400:	2f00      	cmp	r7, #0
 800e402:	d0f6      	beq.n	800e3f2 <__sflush_r+0xae>
 800e404:	0793      	lsls	r3, r2, #30
 800e406:	680e      	ldr	r6, [r1, #0]
 800e408:	bf08      	it	eq
 800e40a:	694b      	ldreq	r3, [r1, #20]
 800e40c:	600f      	str	r7, [r1, #0]
 800e40e:	bf18      	it	ne
 800e410:	2300      	movne	r3, #0
 800e412:	eba6 0807 	sub.w	r8, r6, r7
 800e416:	608b      	str	r3, [r1, #8]
 800e418:	f1b8 0f00 	cmp.w	r8, #0
 800e41c:	dde9      	ble.n	800e3f2 <__sflush_r+0xae>
 800e41e:	6a21      	ldr	r1, [r4, #32]
 800e420:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e422:	4643      	mov	r3, r8
 800e424:	463a      	mov	r2, r7
 800e426:	4628      	mov	r0, r5
 800e428:	47b0      	blx	r6
 800e42a:	2800      	cmp	r0, #0
 800e42c:	dc08      	bgt.n	800e440 <__sflush_r+0xfc>
 800e42e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e436:	81a3      	strh	r3, [r4, #12]
 800e438:	f04f 30ff 	mov.w	r0, #4294967295
 800e43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e440:	4407      	add	r7, r0
 800e442:	eba8 0800 	sub.w	r8, r8, r0
 800e446:	e7e7      	b.n	800e418 <__sflush_r+0xd4>
 800e448:	dfbffffe 	.word	0xdfbffffe

0800e44c <_fflush_r>:
 800e44c:	b538      	push	{r3, r4, r5, lr}
 800e44e:	690b      	ldr	r3, [r1, #16]
 800e450:	4605      	mov	r5, r0
 800e452:	460c      	mov	r4, r1
 800e454:	b913      	cbnz	r3, 800e45c <_fflush_r+0x10>
 800e456:	2500      	movs	r5, #0
 800e458:	4628      	mov	r0, r5
 800e45a:	bd38      	pop	{r3, r4, r5, pc}
 800e45c:	b118      	cbz	r0, 800e466 <_fflush_r+0x1a>
 800e45e:	6a03      	ldr	r3, [r0, #32]
 800e460:	b90b      	cbnz	r3, 800e466 <_fflush_r+0x1a>
 800e462:	f7fd fa73 	bl	800b94c <__sinit>
 800e466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d0f3      	beq.n	800e456 <_fflush_r+0xa>
 800e46e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e470:	07d0      	lsls	r0, r2, #31
 800e472:	d404      	bmi.n	800e47e <_fflush_r+0x32>
 800e474:	0599      	lsls	r1, r3, #22
 800e476:	d402      	bmi.n	800e47e <_fflush_r+0x32>
 800e478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e47a:	f7fd fb7e 	bl	800bb7a <__retarget_lock_acquire_recursive>
 800e47e:	4628      	mov	r0, r5
 800e480:	4621      	mov	r1, r4
 800e482:	f7ff ff5f 	bl	800e344 <__sflush_r>
 800e486:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e488:	07da      	lsls	r2, r3, #31
 800e48a:	4605      	mov	r5, r0
 800e48c:	d4e4      	bmi.n	800e458 <_fflush_r+0xc>
 800e48e:	89a3      	ldrh	r3, [r4, #12]
 800e490:	059b      	lsls	r3, r3, #22
 800e492:	d4e1      	bmi.n	800e458 <_fflush_r+0xc>
 800e494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e496:	f7fd fb71 	bl	800bb7c <__retarget_lock_release_recursive>
 800e49a:	e7dd      	b.n	800e458 <_fflush_r+0xc>

0800e49c <memmove>:
 800e49c:	4288      	cmp	r0, r1
 800e49e:	b510      	push	{r4, lr}
 800e4a0:	eb01 0402 	add.w	r4, r1, r2
 800e4a4:	d902      	bls.n	800e4ac <memmove+0x10>
 800e4a6:	4284      	cmp	r4, r0
 800e4a8:	4623      	mov	r3, r4
 800e4aa:	d807      	bhi.n	800e4bc <memmove+0x20>
 800e4ac:	1e43      	subs	r3, r0, #1
 800e4ae:	42a1      	cmp	r1, r4
 800e4b0:	d008      	beq.n	800e4c4 <memmove+0x28>
 800e4b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4ba:	e7f8      	b.n	800e4ae <memmove+0x12>
 800e4bc:	4402      	add	r2, r0
 800e4be:	4601      	mov	r1, r0
 800e4c0:	428a      	cmp	r2, r1
 800e4c2:	d100      	bne.n	800e4c6 <memmove+0x2a>
 800e4c4:	bd10      	pop	{r4, pc}
 800e4c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4ce:	e7f7      	b.n	800e4c0 <memmove+0x24>

0800e4d0 <strncmp>:
 800e4d0:	b510      	push	{r4, lr}
 800e4d2:	b16a      	cbz	r2, 800e4f0 <strncmp+0x20>
 800e4d4:	3901      	subs	r1, #1
 800e4d6:	1884      	adds	r4, r0, r2
 800e4d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d103      	bne.n	800e4ec <strncmp+0x1c>
 800e4e4:	42a0      	cmp	r0, r4
 800e4e6:	d001      	beq.n	800e4ec <strncmp+0x1c>
 800e4e8:	2a00      	cmp	r2, #0
 800e4ea:	d1f5      	bne.n	800e4d8 <strncmp+0x8>
 800e4ec:	1ad0      	subs	r0, r2, r3
 800e4ee:	bd10      	pop	{r4, pc}
 800e4f0:	4610      	mov	r0, r2
 800e4f2:	e7fc      	b.n	800e4ee <strncmp+0x1e>

0800e4f4 <_sbrk_r>:
 800e4f4:	b538      	push	{r3, r4, r5, lr}
 800e4f6:	4d06      	ldr	r5, [pc, #24]	@ (800e510 <_sbrk_r+0x1c>)
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	4608      	mov	r0, r1
 800e4fe:	602b      	str	r3, [r5, #0]
 800e500:	f7f4 fd24 	bl	8002f4c <_sbrk>
 800e504:	1c43      	adds	r3, r0, #1
 800e506:	d102      	bne.n	800e50e <_sbrk_r+0x1a>
 800e508:	682b      	ldr	r3, [r5, #0]
 800e50a:	b103      	cbz	r3, 800e50e <_sbrk_r+0x1a>
 800e50c:	6023      	str	r3, [r4, #0]
 800e50e:	bd38      	pop	{r3, r4, r5, pc}
 800e510:	20000b60 	.word	0x20000b60

0800e514 <memcpy>:
 800e514:	440a      	add	r2, r1
 800e516:	4291      	cmp	r1, r2
 800e518:	f100 33ff 	add.w	r3, r0, #4294967295
 800e51c:	d100      	bne.n	800e520 <memcpy+0xc>
 800e51e:	4770      	bx	lr
 800e520:	b510      	push	{r4, lr}
 800e522:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e52a:	4291      	cmp	r1, r2
 800e52c:	d1f9      	bne.n	800e522 <memcpy+0xe>
 800e52e:	bd10      	pop	{r4, pc}

0800e530 <nan>:
 800e530:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e538 <nan+0x8>
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	00000000 	.word	0x00000000
 800e53c:	7ff80000 	.word	0x7ff80000

0800e540 <__assert_func>:
 800e540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e542:	4614      	mov	r4, r2
 800e544:	461a      	mov	r2, r3
 800e546:	4b09      	ldr	r3, [pc, #36]	@ (800e56c <__assert_func+0x2c>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	4605      	mov	r5, r0
 800e54c:	68d8      	ldr	r0, [r3, #12]
 800e54e:	b954      	cbnz	r4, 800e566 <__assert_func+0x26>
 800e550:	4b07      	ldr	r3, [pc, #28]	@ (800e570 <__assert_func+0x30>)
 800e552:	461c      	mov	r4, r3
 800e554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e558:	9100      	str	r1, [sp, #0]
 800e55a:	462b      	mov	r3, r5
 800e55c:	4905      	ldr	r1, [pc, #20]	@ (800e574 <__assert_func+0x34>)
 800e55e:	f000 fba7 	bl	800ecb0 <fiprintf>
 800e562:	f000 fbb7 	bl	800ecd4 <abort>
 800e566:	4b04      	ldr	r3, [pc, #16]	@ (800e578 <__assert_func+0x38>)
 800e568:	e7f4      	b.n	800e554 <__assert_func+0x14>
 800e56a:	bf00      	nop
 800e56c:	20000018 	.word	0x20000018
 800e570:	0800f66d 	.word	0x0800f66d
 800e574:	0800f63f 	.word	0x0800f63f
 800e578:	0800f632 	.word	0x0800f632

0800e57c <_calloc_r>:
 800e57c:	b570      	push	{r4, r5, r6, lr}
 800e57e:	fba1 5402 	umull	r5, r4, r1, r2
 800e582:	b93c      	cbnz	r4, 800e594 <_calloc_r+0x18>
 800e584:	4629      	mov	r1, r5
 800e586:	f7fe f9c3 	bl	800c910 <_malloc_r>
 800e58a:	4606      	mov	r6, r0
 800e58c:	b928      	cbnz	r0, 800e59a <_calloc_r+0x1e>
 800e58e:	2600      	movs	r6, #0
 800e590:	4630      	mov	r0, r6
 800e592:	bd70      	pop	{r4, r5, r6, pc}
 800e594:	220c      	movs	r2, #12
 800e596:	6002      	str	r2, [r0, #0]
 800e598:	e7f9      	b.n	800e58e <_calloc_r+0x12>
 800e59a:	462a      	mov	r2, r5
 800e59c:	4621      	mov	r1, r4
 800e59e:	f7fd fa6e 	bl	800ba7e <memset>
 800e5a2:	e7f5      	b.n	800e590 <_calloc_r+0x14>

0800e5a4 <rshift>:
 800e5a4:	6903      	ldr	r3, [r0, #16]
 800e5a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e5aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e5b2:	f100 0414 	add.w	r4, r0, #20
 800e5b6:	dd45      	ble.n	800e644 <rshift+0xa0>
 800e5b8:	f011 011f 	ands.w	r1, r1, #31
 800e5bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e5c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e5c4:	d10c      	bne.n	800e5e0 <rshift+0x3c>
 800e5c6:	f100 0710 	add.w	r7, r0, #16
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	42b1      	cmp	r1, r6
 800e5ce:	d334      	bcc.n	800e63a <rshift+0x96>
 800e5d0:	1a9b      	subs	r3, r3, r2
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	1eea      	subs	r2, r5, #3
 800e5d6:	4296      	cmp	r6, r2
 800e5d8:	bf38      	it	cc
 800e5da:	2300      	movcc	r3, #0
 800e5dc:	4423      	add	r3, r4
 800e5de:	e015      	b.n	800e60c <rshift+0x68>
 800e5e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e5e4:	f1c1 0820 	rsb	r8, r1, #32
 800e5e8:	40cf      	lsrs	r7, r1
 800e5ea:	f105 0e04 	add.w	lr, r5, #4
 800e5ee:	46a1      	mov	r9, r4
 800e5f0:	4576      	cmp	r6, lr
 800e5f2:	46f4      	mov	ip, lr
 800e5f4:	d815      	bhi.n	800e622 <rshift+0x7e>
 800e5f6:	1a9a      	subs	r2, r3, r2
 800e5f8:	0092      	lsls	r2, r2, #2
 800e5fa:	3a04      	subs	r2, #4
 800e5fc:	3501      	adds	r5, #1
 800e5fe:	42ae      	cmp	r6, r5
 800e600:	bf38      	it	cc
 800e602:	2200      	movcc	r2, #0
 800e604:	18a3      	adds	r3, r4, r2
 800e606:	50a7      	str	r7, [r4, r2]
 800e608:	b107      	cbz	r7, 800e60c <rshift+0x68>
 800e60a:	3304      	adds	r3, #4
 800e60c:	1b1a      	subs	r2, r3, r4
 800e60e:	42a3      	cmp	r3, r4
 800e610:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e614:	bf08      	it	eq
 800e616:	2300      	moveq	r3, #0
 800e618:	6102      	str	r2, [r0, #16]
 800e61a:	bf08      	it	eq
 800e61c:	6143      	streq	r3, [r0, #20]
 800e61e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e622:	f8dc c000 	ldr.w	ip, [ip]
 800e626:	fa0c fc08 	lsl.w	ip, ip, r8
 800e62a:	ea4c 0707 	orr.w	r7, ip, r7
 800e62e:	f849 7b04 	str.w	r7, [r9], #4
 800e632:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e636:	40cf      	lsrs	r7, r1
 800e638:	e7da      	b.n	800e5f0 <rshift+0x4c>
 800e63a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e63e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e642:	e7c3      	b.n	800e5cc <rshift+0x28>
 800e644:	4623      	mov	r3, r4
 800e646:	e7e1      	b.n	800e60c <rshift+0x68>

0800e648 <__hexdig_fun>:
 800e648:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e64c:	2b09      	cmp	r3, #9
 800e64e:	d802      	bhi.n	800e656 <__hexdig_fun+0xe>
 800e650:	3820      	subs	r0, #32
 800e652:	b2c0      	uxtb	r0, r0
 800e654:	4770      	bx	lr
 800e656:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e65a:	2b05      	cmp	r3, #5
 800e65c:	d801      	bhi.n	800e662 <__hexdig_fun+0x1a>
 800e65e:	3847      	subs	r0, #71	@ 0x47
 800e660:	e7f7      	b.n	800e652 <__hexdig_fun+0xa>
 800e662:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e666:	2b05      	cmp	r3, #5
 800e668:	d801      	bhi.n	800e66e <__hexdig_fun+0x26>
 800e66a:	3827      	subs	r0, #39	@ 0x27
 800e66c:	e7f1      	b.n	800e652 <__hexdig_fun+0xa>
 800e66e:	2000      	movs	r0, #0
 800e670:	4770      	bx	lr
	...

0800e674 <__gethex>:
 800e674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e678:	b085      	sub	sp, #20
 800e67a:	468a      	mov	sl, r1
 800e67c:	9302      	str	r3, [sp, #8]
 800e67e:	680b      	ldr	r3, [r1, #0]
 800e680:	9001      	str	r0, [sp, #4]
 800e682:	4690      	mov	r8, r2
 800e684:	1c9c      	adds	r4, r3, #2
 800e686:	46a1      	mov	r9, r4
 800e688:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e68c:	2830      	cmp	r0, #48	@ 0x30
 800e68e:	d0fa      	beq.n	800e686 <__gethex+0x12>
 800e690:	eba9 0303 	sub.w	r3, r9, r3
 800e694:	f1a3 0b02 	sub.w	fp, r3, #2
 800e698:	f7ff ffd6 	bl	800e648 <__hexdig_fun>
 800e69c:	4605      	mov	r5, r0
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	d168      	bne.n	800e774 <__gethex+0x100>
 800e6a2:	49a0      	ldr	r1, [pc, #640]	@ (800e924 <__gethex+0x2b0>)
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	4648      	mov	r0, r9
 800e6a8:	f7ff ff12 	bl	800e4d0 <strncmp>
 800e6ac:	4607      	mov	r7, r0
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	d167      	bne.n	800e782 <__gethex+0x10e>
 800e6b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e6b6:	4626      	mov	r6, r4
 800e6b8:	f7ff ffc6 	bl	800e648 <__hexdig_fun>
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	d062      	beq.n	800e786 <__gethex+0x112>
 800e6c0:	4623      	mov	r3, r4
 800e6c2:	7818      	ldrb	r0, [r3, #0]
 800e6c4:	2830      	cmp	r0, #48	@ 0x30
 800e6c6:	4699      	mov	r9, r3
 800e6c8:	f103 0301 	add.w	r3, r3, #1
 800e6cc:	d0f9      	beq.n	800e6c2 <__gethex+0x4e>
 800e6ce:	f7ff ffbb 	bl	800e648 <__hexdig_fun>
 800e6d2:	fab0 f580 	clz	r5, r0
 800e6d6:	096d      	lsrs	r5, r5, #5
 800e6d8:	f04f 0b01 	mov.w	fp, #1
 800e6dc:	464a      	mov	r2, r9
 800e6de:	4616      	mov	r6, r2
 800e6e0:	3201      	adds	r2, #1
 800e6e2:	7830      	ldrb	r0, [r6, #0]
 800e6e4:	f7ff ffb0 	bl	800e648 <__hexdig_fun>
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	d1f8      	bne.n	800e6de <__gethex+0x6a>
 800e6ec:	498d      	ldr	r1, [pc, #564]	@ (800e924 <__gethex+0x2b0>)
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f7ff feed 	bl	800e4d0 <strncmp>
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	d13f      	bne.n	800e77a <__gethex+0x106>
 800e6fa:	b944      	cbnz	r4, 800e70e <__gethex+0x9a>
 800e6fc:	1c74      	adds	r4, r6, #1
 800e6fe:	4622      	mov	r2, r4
 800e700:	4616      	mov	r6, r2
 800e702:	3201      	adds	r2, #1
 800e704:	7830      	ldrb	r0, [r6, #0]
 800e706:	f7ff ff9f 	bl	800e648 <__hexdig_fun>
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d1f8      	bne.n	800e700 <__gethex+0x8c>
 800e70e:	1ba4      	subs	r4, r4, r6
 800e710:	00a7      	lsls	r7, r4, #2
 800e712:	7833      	ldrb	r3, [r6, #0]
 800e714:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e718:	2b50      	cmp	r3, #80	@ 0x50
 800e71a:	d13e      	bne.n	800e79a <__gethex+0x126>
 800e71c:	7873      	ldrb	r3, [r6, #1]
 800e71e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e720:	d033      	beq.n	800e78a <__gethex+0x116>
 800e722:	2b2d      	cmp	r3, #45	@ 0x2d
 800e724:	d034      	beq.n	800e790 <__gethex+0x11c>
 800e726:	1c71      	adds	r1, r6, #1
 800e728:	2400      	movs	r4, #0
 800e72a:	7808      	ldrb	r0, [r1, #0]
 800e72c:	f7ff ff8c 	bl	800e648 <__hexdig_fun>
 800e730:	1e43      	subs	r3, r0, #1
 800e732:	b2db      	uxtb	r3, r3
 800e734:	2b18      	cmp	r3, #24
 800e736:	d830      	bhi.n	800e79a <__gethex+0x126>
 800e738:	f1a0 0210 	sub.w	r2, r0, #16
 800e73c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e740:	f7ff ff82 	bl	800e648 <__hexdig_fun>
 800e744:	f100 3cff 	add.w	ip, r0, #4294967295
 800e748:	fa5f fc8c 	uxtb.w	ip, ip
 800e74c:	f1bc 0f18 	cmp.w	ip, #24
 800e750:	f04f 030a 	mov.w	r3, #10
 800e754:	d91e      	bls.n	800e794 <__gethex+0x120>
 800e756:	b104      	cbz	r4, 800e75a <__gethex+0xe6>
 800e758:	4252      	negs	r2, r2
 800e75a:	4417      	add	r7, r2
 800e75c:	f8ca 1000 	str.w	r1, [sl]
 800e760:	b1ed      	cbz	r5, 800e79e <__gethex+0x12a>
 800e762:	f1bb 0f00 	cmp.w	fp, #0
 800e766:	bf0c      	ite	eq
 800e768:	2506      	moveq	r5, #6
 800e76a:	2500      	movne	r5, #0
 800e76c:	4628      	mov	r0, r5
 800e76e:	b005      	add	sp, #20
 800e770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e774:	2500      	movs	r5, #0
 800e776:	462c      	mov	r4, r5
 800e778:	e7b0      	b.n	800e6dc <__gethex+0x68>
 800e77a:	2c00      	cmp	r4, #0
 800e77c:	d1c7      	bne.n	800e70e <__gethex+0x9a>
 800e77e:	4627      	mov	r7, r4
 800e780:	e7c7      	b.n	800e712 <__gethex+0x9e>
 800e782:	464e      	mov	r6, r9
 800e784:	462f      	mov	r7, r5
 800e786:	2501      	movs	r5, #1
 800e788:	e7c3      	b.n	800e712 <__gethex+0x9e>
 800e78a:	2400      	movs	r4, #0
 800e78c:	1cb1      	adds	r1, r6, #2
 800e78e:	e7cc      	b.n	800e72a <__gethex+0xb6>
 800e790:	2401      	movs	r4, #1
 800e792:	e7fb      	b.n	800e78c <__gethex+0x118>
 800e794:	fb03 0002 	mla	r0, r3, r2, r0
 800e798:	e7ce      	b.n	800e738 <__gethex+0xc4>
 800e79a:	4631      	mov	r1, r6
 800e79c:	e7de      	b.n	800e75c <__gethex+0xe8>
 800e79e:	eba6 0309 	sub.w	r3, r6, r9
 800e7a2:	3b01      	subs	r3, #1
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	2b07      	cmp	r3, #7
 800e7a8:	dc0a      	bgt.n	800e7c0 <__gethex+0x14c>
 800e7aa:	9801      	ldr	r0, [sp, #4]
 800e7ac:	f7fe f93c 	bl	800ca28 <_Balloc>
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	b940      	cbnz	r0, 800e7c6 <__gethex+0x152>
 800e7b4:	4b5c      	ldr	r3, [pc, #368]	@ (800e928 <__gethex+0x2b4>)
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	21e4      	movs	r1, #228	@ 0xe4
 800e7ba:	485c      	ldr	r0, [pc, #368]	@ (800e92c <__gethex+0x2b8>)
 800e7bc:	f7ff fec0 	bl	800e540 <__assert_func>
 800e7c0:	3101      	adds	r1, #1
 800e7c2:	105b      	asrs	r3, r3, #1
 800e7c4:	e7ef      	b.n	800e7a6 <__gethex+0x132>
 800e7c6:	f100 0a14 	add.w	sl, r0, #20
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	4655      	mov	r5, sl
 800e7ce:	469b      	mov	fp, r3
 800e7d0:	45b1      	cmp	r9, r6
 800e7d2:	d337      	bcc.n	800e844 <__gethex+0x1d0>
 800e7d4:	f845 bb04 	str.w	fp, [r5], #4
 800e7d8:	eba5 050a 	sub.w	r5, r5, sl
 800e7dc:	10ad      	asrs	r5, r5, #2
 800e7de:	6125      	str	r5, [r4, #16]
 800e7e0:	4658      	mov	r0, fp
 800e7e2:	f7fe fa13 	bl	800cc0c <__hi0bits>
 800e7e6:	016d      	lsls	r5, r5, #5
 800e7e8:	f8d8 6000 	ldr.w	r6, [r8]
 800e7ec:	1a2d      	subs	r5, r5, r0
 800e7ee:	42b5      	cmp	r5, r6
 800e7f0:	dd54      	ble.n	800e89c <__gethex+0x228>
 800e7f2:	1bad      	subs	r5, r5, r6
 800e7f4:	4629      	mov	r1, r5
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	f7fe fda7 	bl	800d34a <__any_on>
 800e7fc:	4681      	mov	r9, r0
 800e7fe:	b178      	cbz	r0, 800e820 <__gethex+0x1ac>
 800e800:	1e6b      	subs	r3, r5, #1
 800e802:	1159      	asrs	r1, r3, #5
 800e804:	f003 021f 	and.w	r2, r3, #31
 800e808:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e80c:	f04f 0901 	mov.w	r9, #1
 800e810:	fa09 f202 	lsl.w	r2, r9, r2
 800e814:	420a      	tst	r2, r1
 800e816:	d003      	beq.n	800e820 <__gethex+0x1ac>
 800e818:	454b      	cmp	r3, r9
 800e81a:	dc36      	bgt.n	800e88a <__gethex+0x216>
 800e81c:	f04f 0902 	mov.w	r9, #2
 800e820:	4629      	mov	r1, r5
 800e822:	4620      	mov	r0, r4
 800e824:	f7ff febe 	bl	800e5a4 <rshift>
 800e828:	442f      	add	r7, r5
 800e82a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e82e:	42bb      	cmp	r3, r7
 800e830:	da42      	bge.n	800e8b8 <__gethex+0x244>
 800e832:	9801      	ldr	r0, [sp, #4]
 800e834:	4621      	mov	r1, r4
 800e836:	f7fe f937 	bl	800caa8 <_Bfree>
 800e83a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e83c:	2300      	movs	r3, #0
 800e83e:	6013      	str	r3, [r2, #0]
 800e840:	25a3      	movs	r5, #163	@ 0xa3
 800e842:	e793      	b.n	800e76c <__gethex+0xf8>
 800e844:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e848:	2a2e      	cmp	r2, #46	@ 0x2e
 800e84a:	d012      	beq.n	800e872 <__gethex+0x1fe>
 800e84c:	2b20      	cmp	r3, #32
 800e84e:	d104      	bne.n	800e85a <__gethex+0x1e6>
 800e850:	f845 bb04 	str.w	fp, [r5], #4
 800e854:	f04f 0b00 	mov.w	fp, #0
 800e858:	465b      	mov	r3, fp
 800e85a:	7830      	ldrb	r0, [r6, #0]
 800e85c:	9303      	str	r3, [sp, #12]
 800e85e:	f7ff fef3 	bl	800e648 <__hexdig_fun>
 800e862:	9b03      	ldr	r3, [sp, #12]
 800e864:	f000 000f 	and.w	r0, r0, #15
 800e868:	4098      	lsls	r0, r3
 800e86a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e86e:	3304      	adds	r3, #4
 800e870:	e7ae      	b.n	800e7d0 <__gethex+0x15c>
 800e872:	45b1      	cmp	r9, r6
 800e874:	d8ea      	bhi.n	800e84c <__gethex+0x1d8>
 800e876:	492b      	ldr	r1, [pc, #172]	@ (800e924 <__gethex+0x2b0>)
 800e878:	9303      	str	r3, [sp, #12]
 800e87a:	2201      	movs	r2, #1
 800e87c:	4630      	mov	r0, r6
 800e87e:	f7ff fe27 	bl	800e4d0 <strncmp>
 800e882:	9b03      	ldr	r3, [sp, #12]
 800e884:	2800      	cmp	r0, #0
 800e886:	d1e1      	bne.n	800e84c <__gethex+0x1d8>
 800e888:	e7a2      	b.n	800e7d0 <__gethex+0x15c>
 800e88a:	1ea9      	subs	r1, r5, #2
 800e88c:	4620      	mov	r0, r4
 800e88e:	f7fe fd5c 	bl	800d34a <__any_on>
 800e892:	2800      	cmp	r0, #0
 800e894:	d0c2      	beq.n	800e81c <__gethex+0x1a8>
 800e896:	f04f 0903 	mov.w	r9, #3
 800e89a:	e7c1      	b.n	800e820 <__gethex+0x1ac>
 800e89c:	da09      	bge.n	800e8b2 <__gethex+0x23e>
 800e89e:	1b75      	subs	r5, r6, r5
 800e8a0:	4621      	mov	r1, r4
 800e8a2:	9801      	ldr	r0, [sp, #4]
 800e8a4:	462a      	mov	r2, r5
 800e8a6:	f7fe fb17 	bl	800ced8 <__lshift>
 800e8aa:	1b7f      	subs	r7, r7, r5
 800e8ac:	4604      	mov	r4, r0
 800e8ae:	f100 0a14 	add.w	sl, r0, #20
 800e8b2:	f04f 0900 	mov.w	r9, #0
 800e8b6:	e7b8      	b.n	800e82a <__gethex+0x1b6>
 800e8b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e8bc:	42bd      	cmp	r5, r7
 800e8be:	dd6f      	ble.n	800e9a0 <__gethex+0x32c>
 800e8c0:	1bed      	subs	r5, r5, r7
 800e8c2:	42ae      	cmp	r6, r5
 800e8c4:	dc34      	bgt.n	800e930 <__gethex+0x2bc>
 800e8c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	d022      	beq.n	800e914 <__gethex+0x2a0>
 800e8ce:	2b03      	cmp	r3, #3
 800e8d0:	d024      	beq.n	800e91c <__gethex+0x2a8>
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d115      	bne.n	800e902 <__gethex+0x28e>
 800e8d6:	42ae      	cmp	r6, r5
 800e8d8:	d113      	bne.n	800e902 <__gethex+0x28e>
 800e8da:	2e01      	cmp	r6, #1
 800e8dc:	d10b      	bne.n	800e8f6 <__gethex+0x282>
 800e8de:	9a02      	ldr	r2, [sp, #8]
 800e8e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e8e4:	6013      	str	r3, [r2, #0]
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	6123      	str	r3, [r4, #16]
 800e8ea:	f8ca 3000 	str.w	r3, [sl]
 800e8ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8f0:	2562      	movs	r5, #98	@ 0x62
 800e8f2:	601c      	str	r4, [r3, #0]
 800e8f4:	e73a      	b.n	800e76c <__gethex+0xf8>
 800e8f6:	1e71      	subs	r1, r6, #1
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	f7fe fd26 	bl	800d34a <__any_on>
 800e8fe:	2800      	cmp	r0, #0
 800e900:	d1ed      	bne.n	800e8de <__gethex+0x26a>
 800e902:	9801      	ldr	r0, [sp, #4]
 800e904:	4621      	mov	r1, r4
 800e906:	f7fe f8cf 	bl	800caa8 <_Bfree>
 800e90a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e90c:	2300      	movs	r3, #0
 800e90e:	6013      	str	r3, [r2, #0]
 800e910:	2550      	movs	r5, #80	@ 0x50
 800e912:	e72b      	b.n	800e76c <__gethex+0xf8>
 800e914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1f3      	bne.n	800e902 <__gethex+0x28e>
 800e91a:	e7e0      	b.n	800e8de <__gethex+0x26a>
 800e91c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d1dd      	bne.n	800e8de <__gethex+0x26a>
 800e922:	e7ee      	b.n	800e902 <__gethex+0x28e>
 800e924:	0800f4c0 	.word	0x0800f4c0
 800e928:	0800f359 	.word	0x0800f359
 800e92c:	0800f66e 	.word	0x0800f66e
 800e930:	1e6f      	subs	r7, r5, #1
 800e932:	f1b9 0f00 	cmp.w	r9, #0
 800e936:	d130      	bne.n	800e99a <__gethex+0x326>
 800e938:	b127      	cbz	r7, 800e944 <__gethex+0x2d0>
 800e93a:	4639      	mov	r1, r7
 800e93c:	4620      	mov	r0, r4
 800e93e:	f7fe fd04 	bl	800d34a <__any_on>
 800e942:	4681      	mov	r9, r0
 800e944:	117a      	asrs	r2, r7, #5
 800e946:	2301      	movs	r3, #1
 800e948:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e94c:	f007 071f 	and.w	r7, r7, #31
 800e950:	40bb      	lsls	r3, r7
 800e952:	4213      	tst	r3, r2
 800e954:	4629      	mov	r1, r5
 800e956:	4620      	mov	r0, r4
 800e958:	bf18      	it	ne
 800e95a:	f049 0902 	orrne.w	r9, r9, #2
 800e95e:	f7ff fe21 	bl	800e5a4 <rshift>
 800e962:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e966:	1b76      	subs	r6, r6, r5
 800e968:	2502      	movs	r5, #2
 800e96a:	f1b9 0f00 	cmp.w	r9, #0
 800e96e:	d047      	beq.n	800ea00 <__gethex+0x38c>
 800e970:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e974:	2b02      	cmp	r3, #2
 800e976:	d015      	beq.n	800e9a4 <__gethex+0x330>
 800e978:	2b03      	cmp	r3, #3
 800e97a:	d017      	beq.n	800e9ac <__gethex+0x338>
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d109      	bne.n	800e994 <__gethex+0x320>
 800e980:	f019 0f02 	tst.w	r9, #2
 800e984:	d006      	beq.n	800e994 <__gethex+0x320>
 800e986:	f8da 3000 	ldr.w	r3, [sl]
 800e98a:	ea49 0903 	orr.w	r9, r9, r3
 800e98e:	f019 0f01 	tst.w	r9, #1
 800e992:	d10e      	bne.n	800e9b2 <__gethex+0x33e>
 800e994:	f045 0510 	orr.w	r5, r5, #16
 800e998:	e032      	b.n	800ea00 <__gethex+0x38c>
 800e99a:	f04f 0901 	mov.w	r9, #1
 800e99e:	e7d1      	b.n	800e944 <__gethex+0x2d0>
 800e9a0:	2501      	movs	r5, #1
 800e9a2:	e7e2      	b.n	800e96a <__gethex+0x2f6>
 800e9a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9a6:	f1c3 0301 	rsb	r3, r3, #1
 800e9aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e9ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d0f0      	beq.n	800e994 <__gethex+0x320>
 800e9b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e9b6:	f104 0314 	add.w	r3, r4, #20
 800e9ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e9be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e9c2:	f04f 0c00 	mov.w	ip, #0
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e9d0:	d01b      	beq.n	800ea0a <__gethex+0x396>
 800e9d2:	3201      	adds	r2, #1
 800e9d4:	6002      	str	r2, [r0, #0]
 800e9d6:	2d02      	cmp	r5, #2
 800e9d8:	f104 0314 	add.w	r3, r4, #20
 800e9dc:	d13c      	bne.n	800ea58 <__gethex+0x3e4>
 800e9de:	f8d8 2000 	ldr.w	r2, [r8]
 800e9e2:	3a01      	subs	r2, #1
 800e9e4:	42b2      	cmp	r2, r6
 800e9e6:	d109      	bne.n	800e9fc <__gethex+0x388>
 800e9e8:	1171      	asrs	r1, r6, #5
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9f0:	f006 061f 	and.w	r6, r6, #31
 800e9f4:	fa02 f606 	lsl.w	r6, r2, r6
 800e9f8:	421e      	tst	r6, r3
 800e9fa:	d13a      	bne.n	800ea72 <__gethex+0x3fe>
 800e9fc:	f045 0520 	orr.w	r5, r5, #32
 800ea00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea02:	601c      	str	r4, [r3, #0]
 800ea04:	9b02      	ldr	r3, [sp, #8]
 800ea06:	601f      	str	r7, [r3, #0]
 800ea08:	e6b0      	b.n	800e76c <__gethex+0xf8>
 800ea0a:	4299      	cmp	r1, r3
 800ea0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ea10:	d8d9      	bhi.n	800e9c6 <__gethex+0x352>
 800ea12:	68a3      	ldr	r3, [r4, #8]
 800ea14:	459b      	cmp	fp, r3
 800ea16:	db17      	blt.n	800ea48 <__gethex+0x3d4>
 800ea18:	6861      	ldr	r1, [r4, #4]
 800ea1a:	9801      	ldr	r0, [sp, #4]
 800ea1c:	3101      	adds	r1, #1
 800ea1e:	f7fe f803 	bl	800ca28 <_Balloc>
 800ea22:	4681      	mov	r9, r0
 800ea24:	b918      	cbnz	r0, 800ea2e <__gethex+0x3ba>
 800ea26:	4b1a      	ldr	r3, [pc, #104]	@ (800ea90 <__gethex+0x41c>)
 800ea28:	4602      	mov	r2, r0
 800ea2a:	2184      	movs	r1, #132	@ 0x84
 800ea2c:	e6c5      	b.n	800e7ba <__gethex+0x146>
 800ea2e:	6922      	ldr	r2, [r4, #16]
 800ea30:	3202      	adds	r2, #2
 800ea32:	f104 010c 	add.w	r1, r4, #12
 800ea36:	0092      	lsls	r2, r2, #2
 800ea38:	300c      	adds	r0, #12
 800ea3a:	f7ff fd6b 	bl	800e514 <memcpy>
 800ea3e:	4621      	mov	r1, r4
 800ea40:	9801      	ldr	r0, [sp, #4]
 800ea42:	f7fe f831 	bl	800caa8 <_Bfree>
 800ea46:	464c      	mov	r4, r9
 800ea48:	6923      	ldr	r3, [r4, #16]
 800ea4a:	1c5a      	adds	r2, r3, #1
 800ea4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea50:	6122      	str	r2, [r4, #16]
 800ea52:	2201      	movs	r2, #1
 800ea54:	615a      	str	r2, [r3, #20]
 800ea56:	e7be      	b.n	800e9d6 <__gethex+0x362>
 800ea58:	6922      	ldr	r2, [r4, #16]
 800ea5a:	455a      	cmp	r2, fp
 800ea5c:	dd0b      	ble.n	800ea76 <__gethex+0x402>
 800ea5e:	2101      	movs	r1, #1
 800ea60:	4620      	mov	r0, r4
 800ea62:	f7ff fd9f 	bl	800e5a4 <rshift>
 800ea66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea6a:	3701      	adds	r7, #1
 800ea6c:	42bb      	cmp	r3, r7
 800ea6e:	f6ff aee0 	blt.w	800e832 <__gethex+0x1be>
 800ea72:	2501      	movs	r5, #1
 800ea74:	e7c2      	b.n	800e9fc <__gethex+0x388>
 800ea76:	f016 061f 	ands.w	r6, r6, #31
 800ea7a:	d0fa      	beq.n	800ea72 <__gethex+0x3fe>
 800ea7c:	4453      	add	r3, sl
 800ea7e:	f1c6 0620 	rsb	r6, r6, #32
 800ea82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ea86:	f7fe f8c1 	bl	800cc0c <__hi0bits>
 800ea8a:	42b0      	cmp	r0, r6
 800ea8c:	dbe7      	blt.n	800ea5e <__gethex+0x3ea>
 800ea8e:	e7f0      	b.n	800ea72 <__gethex+0x3fe>
 800ea90:	0800f359 	.word	0x0800f359

0800ea94 <L_shift>:
 800ea94:	f1c2 0208 	rsb	r2, r2, #8
 800ea98:	0092      	lsls	r2, r2, #2
 800ea9a:	b570      	push	{r4, r5, r6, lr}
 800ea9c:	f1c2 0620 	rsb	r6, r2, #32
 800eaa0:	6843      	ldr	r3, [r0, #4]
 800eaa2:	6804      	ldr	r4, [r0, #0]
 800eaa4:	fa03 f506 	lsl.w	r5, r3, r6
 800eaa8:	432c      	orrs	r4, r5
 800eaaa:	40d3      	lsrs	r3, r2
 800eaac:	6004      	str	r4, [r0, #0]
 800eaae:	f840 3f04 	str.w	r3, [r0, #4]!
 800eab2:	4288      	cmp	r0, r1
 800eab4:	d3f4      	bcc.n	800eaa0 <L_shift+0xc>
 800eab6:	bd70      	pop	{r4, r5, r6, pc}

0800eab8 <__match>:
 800eab8:	b530      	push	{r4, r5, lr}
 800eaba:	6803      	ldr	r3, [r0, #0]
 800eabc:	3301      	adds	r3, #1
 800eabe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eac2:	b914      	cbnz	r4, 800eaca <__match+0x12>
 800eac4:	6003      	str	r3, [r0, #0]
 800eac6:	2001      	movs	r0, #1
 800eac8:	bd30      	pop	{r4, r5, pc}
 800eaca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eace:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ead2:	2d19      	cmp	r5, #25
 800ead4:	bf98      	it	ls
 800ead6:	3220      	addls	r2, #32
 800ead8:	42a2      	cmp	r2, r4
 800eada:	d0f0      	beq.n	800eabe <__match+0x6>
 800eadc:	2000      	movs	r0, #0
 800eade:	e7f3      	b.n	800eac8 <__match+0x10>

0800eae0 <__hexnan>:
 800eae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae4:	680b      	ldr	r3, [r1, #0]
 800eae6:	6801      	ldr	r1, [r0, #0]
 800eae8:	115e      	asrs	r6, r3, #5
 800eaea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eaee:	f013 031f 	ands.w	r3, r3, #31
 800eaf2:	b087      	sub	sp, #28
 800eaf4:	bf18      	it	ne
 800eaf6:	3604      	addne	r6, #4
 800eaf8:	2500      	movs	r5, #0
 800eafa:	1f37      	subs	r7, r6, #4
 800eafc:	4682      	mov	sl, r0
 800eafe:	4690      	mov	r8, r2
 800eb00:	9301      	str	r3, [sp, #4]
 800eb02:	f846 5c04 	str.w	r5, [r6, #-4]
 800eb06:	46b9      	mov	r9, r7
 800eb08:	463c      	mov	r4, r7
 800eb0a:	9502      	str	r5, [sp, #8]
 800eb0c:	46ab      	mov	fp, r5
 800eb0e:	784a      	ldrb	r2, [r1, #1]
 800eb10:	1c4b      	adds	r3, r1, #1
 800eb12:	9303      	str	r3, [sp, #12]
 800eb14:	b342      	cbz	r2, 800eb68 <__hexnan+0x88>
 800eb16:	4610      	mov	r0, r2
 800eb18:	9105      	str	r1, [sp, #20]
 800eb1a:	9204      	str	r2, [sp, #16]
 800eb1c:	f7ff fd94 	bl	800e648 <__hexdig_fun>
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d151      	bne.n	800ebc8 <__hexnan+0xe8>
 800eb24:	9a04      	ldr	r2, [sp, #16]
 800eb26:	9905      	ldr	r1, [sp, #20]
 800eb28:	2a20      	cmp	r2, #32
 800eb2a:	d818      	bhi.n	800eb5e <__hexnan+0x7e>
 800eb2c:	9b02      	ldr	r3, [sp, #8]
 800eb2e:	459b      	cmp	fp, r3
 800eb30:	dd13      	ble.n	800eb5a <__hexnan+0x7a>
 800eb32:	454c      	cmp	r4, r9
 800eb34:	d206      	bcs.n	800eb44 <__hexnan+0x64>
 800eb36:	2d07      	cmp	r5, #7
 800eb38:	dc04      	bgt.n	800eb44 <__hexnan+0x64>
 800eb3a:	462a      	mov	r2, r5
 800eb3c:	4649      	mov	r1, r9
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f7ff ffa8 	bl	800ea94 <L_shift>
 800eb44:	4544      	cmp	r4, r8
 800eb46:	d952      	bls.n	800ebee <__hexnan+0x10e>
 800eb48:	2300      	movs	r3, #0
 800eb4a:	f1a4 0904 	sub.w	r9, r4, #4
 800eb4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb52:	f8cd b008 	str.w	fp, [sp, #8]
 800eb56:	464c      	mov	r4, r9
 800eb58:	461d      	mov	r5, r3
 800eb5a:	9903      	ldr	r1, [sp, #12]
 800eb5c:	e7d7      	b.n	800eb0e <__hexnan+0x2e>
 800eb5e:	2a29      	cmp	r2, #41	@ 0x29
 800eb60:	d157      	bne.n	800ec12 <__hexnan+0x132>
 800eb62:	3102      	adds	r1, #2
 800eb64:	f8ca 1000 	str.w	r1, [sl]
 800eb68:	f1bb 0f00 	cmp.w	fp, #0
 800eb6c:	d051      	beq.n	800ec12 <__hexnan+0x132>
 800eb6e:	454c      	cmp	r4, r9
 800eb70:	d206      	bcs.n	800eb80 <__hexnan+0xa0>
 800eb72:	2d07      	cmp	r5, #7
 800eb74:	dc04      	bgt.n	800eb80 <__hexnan+0xa0>
 800eb76:	462a      	mov	r2, r5
 800eb78:	4649      	mov	r1, r9
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	f7ff ff8a 	bl	800ea94 <L_shift>
 800eb80:	4544      	cmp	r4, r8
 800eb82:	d936      	bls.n	800ebf2 <__hexnan+0x112>
 800eb84:	f1a8 0204 	sub.w	r2, r8, #4
 800eb88:	4623      	mov	r3, r4
 800eb8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800eb8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800eb92:	429f      	cmp	r7, r3
 800eb94:	d2f9      	bcs.n	800eb8a <__hexnan+0xaa>
 800eb96:	1b3b      	subs	r3, r7, r4
 800eb98:	f023 0303 	bic.w	r3, r3, #3
 800eb9c:	3304      	adds	r3, #4
 800eb9e:	3401      	adds	r4, #1
 800eba0:	3e03      	subs	r6, #3
 800eba2:	42b4      	cmp	r4, r6
 800eba4:	bf88      	it	hi
 800eba6:	2304      	movhi	r3, #4
 800eba8:	4443      	add	r3, r8
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f843 2b04 	str.w	r2, [r3], #4
 800ebb0:	429f      	cmp	r7, r3
 800ebb2:	d2fb      	bcs.n	800ebac <__hexnan+0xcc>
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	b91b      	cbnz	r3, 800ebc0 <__hexnan+0xe0>
 800ebb8:	4547      	cmp	r7, r8
 800ebba:	d128      	bne.n	800ec0e <__hexnan+0x12e>
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	603b      	str	r3, [r7, #0]
 800ebc0:	2005      	movs	r0, #5
 800ebc2:	b007      	add	sp, #28
 800ebc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc8:	3501      	adds	r5, #1
 800ebca:	2d08      	cmp	r5, #8
 800ebcc:	f10b 0b01 	add.w	fp, fp, #1
 800ebd0:	dd06      	ble.n	800ebe0 <__hexnan+0x100>
 800ebd2:	4544      	cmp	r4, r8
 800ebd4:	d9c1      	bls.n	800eb5a <__hexnan+0x7a>
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebdc:	2501      	movs	r5, #1
 800ebde:	3c04      	subs	r4, #4
 800ebe0:	6822      	ldr	r2, [r4, #0]
 800ebe2:	f000 000f 	and.w	r0, r0, #15
 800ebe6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ebea:	6020      	str	r0, [r4, #0]
 800ebec:	e7b5      	b.n	800eb5a <__hexnan+0x7a>
 800ebee:	2508      	movs	r5, #8
 800ebf0:	e7b3      	b.n	800eb5a <__hexnan+0x7a>
 800ebf2:	9b01      	ldr	r3, [sp, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d0dd      	beq.n	800ebb4 <__hexnan+0xd4>
 800ebf8:	f1c3 0320 	rsb	r3, r3, #32
 800ebfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ec00:	40da      	lsrs	r2, r3
 800ec02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ec06:	4013      	ands	r3, r2
 800ec08:	f846 3c04 	str.w	r3, [r6, #-4]
 800ec0c:	e7d2      	b.n	800ebb4 <__hexnan+0xd4>
 800ec0e:	3f04      	subs	r7, #4
 800ec10:	e7d0      	b.n	800ebb4 <__hexnan+0xd4>
 800ec12:	2004      	movs	r0, #4
 800ec14:	e7d5      	b.n	800ebc2 <__hexnan+0xe2>

0800ec16 <__ascii_mbtowc>:
 800ec16:	b082      	sub	sp, #8
 800ec18:	b901      	cbnz	r1, 800ec1c <__ascii_mbtowc+0x6>
 800ec1a:	a901      	add	r1, sp, #4
 800ec1c:	b142      	cbz	r2, 800ec30 <__ascii_mbtowc+0x1a>
 800ec1e:	b14b      	cbz	r3, 800ec34 <__ascii_mbtowc+0x1e>
 800ec20:	7813      	ldrb	r3, [r2, #0]
 800ec22:	600b      	str	r3, [r1, #0]
 800ec24:	7812      	ldrb	r2, [r2, #0]
 800ec26:	1e10      	subs	r0, r2, #0
 800ec28:	bf18      	it	ne
 800ec2a:	2001      	movne	r0, #1
 800ec2c:	b002      	add	sp, #8
 800ec2e:	4770      	bx	lr
 800ec30:	4610      	mov	r0, r2
 800ec32:	e7fb      	b.n	800ec2c <__ascii_mbtowc+0x16>
 800ec34:	f06f 0001 	mvn.w	r0, #1
 800ec38:	e7f8      	b.n	800ec2c <__ascii_mbtowc+0x16>

0800ec3a <_realloc_r>:
 800ec3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec3e:	4680      	mov	r8, r0
 800ec40:	4615      	mov	r5, r2
 800ec42:	460c      	mov	r4, r1
 800ec44:	b921      	cbnz	r1, 800ec50 <_realloc_r+0x16>
 800ec46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec4a:	4611      	mov	r1, r2
 800ec4c:	f7fd be60 	b.w	800c910 <_malloc_r>
 800ec50:	b92a      	cbnz	r2, 800ec5e <_realloc_r+0x24>
 800ec52:	f7fd fde9 	bl	800c828 <_free_r>
 800ec56:	2400      	movs	r4, #0
 800ec58:	4620      	mov	r0, r4
 800ec5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec5e:	f000 f840 	bl	800ece2 <_malloc_usable_size_r>
 800ec62:	4285      	cmp	r5, r0
 800ec64:	4606      	mov	r6, r0
 800ec66:	d802      	bhi.n	800ec6e <_realloc_r+0x34>
 800ec68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ec6c:	d8f4      	bhi.n	800ec58 <_realloc_r+0x1e>
 800ec6e:	4629      	mov	r1, r5
 800ec70:	4640      	mov	r0, r8
 800ec72:	f7fd fe4d 	bl	800c910 <_malloc_r>
 800ec76:	4607      	mov	r7, r0
 800ec78:	2800      	cmp	r0, #0
 800ec7a:	d0ec      	beq.n	800ec56 <_realloc_r+0x1c>
 800ec7c:	42b5      	cmp	r5, r6
 800ec7e:	462a      	mov	r2, r5
 800ec80:	4621      	mov	r1, r4
 800ec82:	bf28      	it	cs
 800ec84:	4632      	movcs	r2, r6
 800ec86:	f7ff fc45 	bl	800e514 <memcpy>
 800ec8a:	4621      	mov	r1, r4
 800ec8c:	4640      	mov	r0, r8
 800ec8e:	f7fd fdcb 	bl	800c828 <_free_r>
 800ec92:	463c      	mov	r4, r7
 800ec94:	e7e0      	b.n	800ec58 <_realloc_r+0x1e>

0800ec96 <__ascii_wctomb>:
 800ec96:	4603      	mov	r3, r0
 800ec98:	4608      	mov	r0, r1
 800ec9a:	b141      	cbz	r1, 800ecae <__ascii_wctomb+0x18>
 800ec9c:	2aff      	cmp	r2, #255	@ 0xff
 800ec9e:	d904      	bls.n	800ecaa <__ascii_wctomb+0x14>
 800eca0:	228a      	movs	r2, #138	@ 0x8a
 800eca2:	601a      	str	r2, [r3, #0]
 800eca4:	f04f 30ff 	mov.w	r0, #4294967295
 800eca8:	4770      	bx	lr
 800ecaa:	700a      	strb	r2, [r1, #0]
 800ecac:	2001      	movs	r0, #1
 800ecae:	4770      	bx	lr

0800ecb0 <fiprintf>:
 800ecb0:	b40e      	push	{r1, r2, r3}
 800ecb2:	b503      	push	{r0, r1, lr}
 800ecb4:	4601      	mov	r1, r0
 800ecb6:	ab03      	add	r3, sp, #12
 800ecb8:	4805      	ldr	r0, [pc, #20]	@ (800ecd0 <fiprintf+0x20>)
 800ecba:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecbe:	6800      	ldr	r0, [r0, #0]
 800ecc0:	9301      	str	r3, [sp, #4]
 800ecc2:	f000 f83f 	bl	800ed44 <_vfiprintf_r>
 800ecc6:	b002      	add	sp, #8
 800ecc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eccc:	b003      	add	sp, #12
 800ecce:	4770      	bx	lr
 800ecd0:	20000018 	.word	0x20000018

0800ecd4 <abort>:
 800ecd4:	b508      	push	{r3, lr}
 800ecd6:	2006      	movs	r0, #6
 800ecd8:	f000 fa08 	bl	800f0ec <raise>
 800ecdc:	2001      	movs	r0, #1
 800ecde:	f7f4 f8bd 	bl	8002e5c <_exit>

0800ece2 <_malloc_usable_size_r>:
 800ece2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ece6:	1f18      	subs	r0, r3, #4
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	bfbc      	itt	lt
 800ecec:	580b      	ldrlt	r3, [r1, r0]
 800ecee:	18c0      	addlt	r0, r0, r3
 800ecf0:	4770      	bx	lr

0800ecf2 <__sfputc_r>:
 800ecf2:	6893      	ldr	r3, [r2, #8]
 800ecf4:	3b01      	subs	r3, #1
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	b410      	push	{r4}
 800ecfa:	6093      	str	r3, [r2, #8]
 800ecfc:	da08      	bge.n	800ed10 <__sfputc_r+0x1e>
 800ecfe:	6994      	ldr	r4, [r2, #24]
 800ed00:	42a3      	cmp	r3, r4
 800ed02:	db01      	blt.n	800ed08 <__sfputc_r+0x16>
 800ed04:	290a      	cmp	r1, #10
 800ed06:	d103      	bne.n	800ed10 <__sfputc_r+0x1e>
 800ed08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed0c:	f000 b932 	b.w	800ef74 <__swbuf_r>
 800ed10:	6813      	ldr	r3, [r2, #0]
 800ed12:	1c58      	adds	r0, r3, #1
 800ed14:	6010      	str	r0, [r2, #0]
 800ed16:	7019      	strb	r1, [r3, #0]
 800ed18:	4608      	mov	r0, r1
 800ed1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <__sfputs_r>:
 800ed20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed22:	4606      	mov	r6, r0
 800ed24:	460f      	mov	r7, r1
 800ed26:	4614      	mov	r4, r2
 800ed28:	18d5      	adds	r5, r2, r3
 800ed2a:	42ac      	cmp	r4, r5
 800ed2c:	d101      	bne.n	800ed32 <__sfputs_r+0x12>
 800ed2e:	2000      	movs	r0, #0
 800ed30:	e007      	b.n	800ed42 <__sfputs_r+0x22>
 800ed32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed36:	463a      	mov	r2, r7
 800ed38:	4630      	mov	r0, r6
 800ed3a:	f7ff ffda 	bl	800ecf2 <__sfputc_r>
 800ed3e:	1c43      	adds	r3, r0, #1
 800ed40:	d1f3      	bne.n	800ed2a <__sfputs_r+0xa>
 800ed42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed44 <_vfiprintf_r>:
 800ed44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed48:	460d      	mov	r5, r1
 800ed4a:	b09d      	sub	sp, #116	@ 0x74
 800ed4c:	4614      	mov	r4, r2
 800ed4e:	4698      	mov	r8, r3
 800ed50:	4606      	mov	r6, r0
 800ed52:	b118      	cbz	r0, 800ed5c <_vfiprintf_r+0x18>
 800ed54:	6a03      	ldr	r3, [r0, #32]
 800ed56:	b90b      	cbnz	r3, 800ed5c <_vfiprintf_r+0x18>
 800ed58:	f7fc fdf8 	bl	800b94c <__sinit>
 800ed5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed5e:	07d9      	lsls	r1, r3, #31
 800ed60:	d405      	bmi.n	800ed6e <_vfiprintf_r+0x2a>
 800ed62:	89ab      	ldrh	r3, [r5, #12]
 800ed64:	059a      	lsls	r2, r3, #22
 800ed66:	d402      	bmi.n	800ed6e <_vfiprintf_r+0x2a>
 800ed68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed6a:	f7fc ff06 	bl	800bb7a <__retarget_lock_acquire_recursive>
 800ed6e:	89ab      	ldrh	r3, [r5, #12]
 800ed70:	071b      	lsls	r3, r3, #28
 800ed72:	d501      	bpl.n	800ed78 <_vfiprintf_r+0x34>
 800ed74:	692b      	ldr	r3, [r5, #16]
 800ed76:	b99b      	cbnz	r3, 800eda0 <_vfiprintf_r+0x5c>
 800ed78:	4629      	mov	r1, r5
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	f000 f938 	bl	800eff0 <__swsetup_r>
 800ed80:	b170      	cbz	r0, 800eda0 <_vfiprintf_r+0x5c>
 800ed82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed84:	07dc      	lsls	r4, r3, #31
 800ed86:	d504      	bpl.n	800ed92 <_vfiprintf_r+0x4e>
 800ed88:	f04f 30ff 	mov.w	r0, #4294967295
 800ed8c:	b01d      	add	sp, #116	@ 0x74
 800ed8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed92:	89ab      	ldrh	r3, [r5, #12]
 800ed94:	0598      	lsls	r0, r3, #22
 800ed96:	d4f7      	bmi.n	800ed88 <_vfiprintf_r+0x44>
 800ed98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed9a:	f7fc feef 	bl	800bb7c <__retarget_lock_release_recursive>
 800ed9e:	e7f3      	b.n	800ed88 <_vfiprintf_r+0x44>
 800eda0:	2300      	movs	r3, #0
 800eda2:	9309      	str	r3, [sp, #36]	@ 0x24
 800eda4:	2320      	movs	r3, #32
 800eda6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800edaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800edae:	2330      	movs	r3, #48	@ 0x30
 800edb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ef60 <_vfiprintf_r+0x21c>
 800edb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800edb8:	f04f 0901 	mov.w	r9, #1
 800edbc:	4623      	mov	r3, r4
 800edbe:	469a      	mov	sl, r3
 800edc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edc4:	b10a      	cbz	r2, 800edca <_vfiprintf_r+0x86>
 800edc6:	2a25      	cmp	r2, #37	@ 0x25
 800edc8:	d1f9      	bne.n	800edbe <_vfiprintf_r+0x7a>
 800edca:	ebba 0b04 	subs.w	fp, sl, r4
 800edce:	d00b      	beq.n	800ede8 <_vfiprintf_r+0xa4>
 800edd0:	465b      	mov	r3, fp
 800edd2:	4622      	mov	r2, r4
 800edd4:	4629      	mov	r1, r5
 800edd6:	4630      	mov	r0, r6
 800edd8:	f7ff ffa2 	bl	800ed20 <__sfputs_r>
 800eddc:	3001      	adds	r0, #1
 800edde:	f000 80a7 	beq.w	800ef30 <_vfiprintf_r+0x1ec>
 800ede2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ede4:	445a      	add	r2, fp
 800ede6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ede8:	f89a 3000 	ldrb.w	r3, [sl]
 800edec:	2b00      	cmp	r3, #0
 800edee:	f000 809f 	beq.w	800ef30 <_vfiprintf_r+0x1ec>
 800edf2:	2300      	movs	r3, #0
 800edf4:	f04f 32ff 	mov.w	r2, #4294967295
 800edf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edfc:	f10a 0a01 	add.w	sl, sl, #1
 800ee00:	9304      	str	r3, [sp, #16]
 800ee02:	9307      	str	r3, [sp, #28]
 800ee04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee08:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee0a:	4654      	mov	r4, sl
 800ee0c:	2205      	movs	r2, #5
 800ee0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee12:	4853      	ldr	r0, [pc, #332]	@ (800ef60 <_vfiprintf_r+0x21c>)
 800ee14:	f7f1 f9e4 	bl	80001e0 <memchr>
 800ee18:	9a04      	ldr	r2, [sp, #16]
 800ee1a:	b9d8      	cbnz	r0, 800ee54 <_vfiprintf_r+0x110>
 800ee1c:	06d1      	lsls	r1, r2, #27
 800ee1e:	bf44      	itt	mi
 800ee20:	2320      	movmi	r3, #32
 800ee22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee26:	0713      	lsls	r3, r2, #28
 800ee28:	bf44      	itt	mi
 800ee2a:	232b      	movmi	r3, #43	@ 0x2b
 800ee2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee30:	f89a 3000 	ldrb.w	r3, [sl]
 800ee34:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee36:	d015      	beq.n	800ee64 <_vfiprintf_r+0x120>
 800ee38:	9a07      	ldr	r2, [sp, #28]
 800ee3a:	4654      	mov	r4, sl
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	f04f 0c0a 	mov.w	ip, #10
 800ee42:	4621      	mov	r1, r4
 800ee44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee48:	3b30      	subs	r3, #48	@ 0x30
 800ee4a:	2b09      	cmp	r3, #9
 800ee4c:	d94b      	bls.n	800eee6 <_vfiprintf_r+0x1a2>
 800ee4e:	b1b0      	cbz	r0, 800ee7e <_vfiprintf_r+0x13a>
 800ee50:	9207      	str	r2, [sp, #28]
 800ee52:	e014      	b.n	800ee7e <_vfiprintf_r+0x13a>
 800ee54:	eba0 0308 	sub.w	r3, r0, r8
 800ee58:	fa09 f303 	lsl.w	r3, r9, r3
 800ee5c:	4313      	orrs	r3, r2
 800ee5e:	9304      	str	r3, [sp, #16]
 800ee60:	46a2      	mov	sl, r4
 800ee62:	e7d2      	b.n	800ee0a <_vfiprintf_r+0xc6>
 800ee64:	9b03      	ldr	r3, [sp, #12]
 800ee66:	1d19      	adds	r1, r3, #4
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	9103      	str	r1, [sp, #12]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	bfbb      	ittet	lt
 800ee70:	425b      	neglt	r3, r3
 800ee72:	f042 0202 	orrlt.w	r2, r2, #2
 800ee76:	9307      	strge	r3, [sp, #28]
 800ee78:	9307      	strlt	r3, [sp, #28]
 800ee7a:	bfb8      	it	lt
 800ee7c:	9204      	strlt	r2, [sp, #16]
 800ee7e:	7823      	ldrb	r3, [r4, #0]
 800ee80:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee82:	d10a      	bne.n	800ee9a <_vfiprintf_r+0x156>
 800ee84:	7863      	ldrb	r3, [r4, #1]
 800ee86:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee88:	d132      	bne.n	800eef0 <_vfiprintf_r+0x1ac>
 800ee8a:	9b03      	ldr	r3, [sp, #12]
 800ee8c:	1d1a      	adds	r2, r3, #4
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	9203      	str	r2, [sp, #12]
 800ee92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee96:	3402      	adds	r4, #2
 800ee98:	9305      	str	r3, [sp, #20]
 800ee9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ef70 <_vfiprintf_r+0x22c>
 800ee9e:	7821      	ldrb	r1, [r4, #0]
 800eea0:	2203      	movs	r2, #3
 800eea2:	4650      	mov	r0, sl
 800eea4:	f7f1 f99c 	bl	80001e0 <memchr>
 800eea8:	b138      	cbz	r0, 800eeba <_vfiprintf_r+0x176>
 800eeaa:	9b04      	ldr	r3, [sp, #16]
 800eeac:	eba0 000a 	sub.w	r0, r0, sl
 800eeb0:	2240      	movs	r2, #64	@ 0x40
 800eeb2:	4082      	lsls	r2, r0
 800eeb4:	4313      	orrs	r3, r2
 800eeb6:	3401      	adds	r4, #1
 800eeb8:	9304      	str	r3, [sp, #16]
 800eeba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eebe:	4829      	ldr	r0, [pc, #164]	@ (800ef64 <_vfiprintf_r+0x220>)
 800eec0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eec4:	2206      	movs	r2, #6
 800eec6:	f7f1 f98b 	bl	80001e0 <memchr>
 800eeca:	2800      	cmp	r0, #0
 800eecc:	d03f      	beq.n	800ef4e <_vfiprintf_r+0x20a>
 800eece:	4b26      	ldr	r3, [pc, #152]	@ (800ef68 <_vfiprintf_r+0x224>)
 800eed0:	bb1b      	cbnz	r3, 800ef1a <_vfiprintf_r+0x1d6>
 800eed2:	9b03      	ldr	r3, [sp, #12]
 800eed4:	3307      	adds	r3, #7
 800eed6:	f023 0307 	bic.w	r3, r3, #7
 800eeda:	3308      	adds	r3, #8
 800eedc:	9303      	str	r3, [sp, #12]
 800eede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eee0:	443b      	add	r3, r7
 800eee2:	9309      	str	r3, [sp, #36]	@ 0x24
 800eee4:	e76a      	b.n	800edbc <_vfiprintf_r+0x78>
 800eee6:	fb0c 3202 	mla	r2, ip, r2, r3
 800eeea:	460c      	mov	r4, r1
 800eeec:	2001      	movs	r0, #1
 800eeee:	e7a8      	b.n	800ee42 <_vfiprintf_r+0xfe>
 800eef0:	2300      	movs	r3, #0
 800eef2:	3401      	adds	r4, #1
 800eef4:	9305      	str	r3, [sp, #20]
 800eef6:	4619      	mov	r1, r3
 800eef8:	f04f 0c0a 	mov.w	ip, #10
 800eefc:	4620      	mov	r0, r4
 800eefe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef02:	3a30      	subs	r2, #48	@ 0x30
 800ef04:	2a09      	cmp	r2, #9
 800ef06:	d903      	bls.n	800ef10 <_vfiprintf_r+0x1cc>
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d0c6      	beq.n	800ee9a <_vfiprintf_r+0x156>
 800ef0c:	9105      	str	r1, [sp, #20]
 800ef0e:	e7c4      	b.n	800ee9a <_vfiprintf_r+0x156>
 800ef10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef14:	4604      	mov	r4, r0
 800ef16:	2301      	movs	r3, #1
 800ef18:	e7f0      	b.n	800eefc <_vfiprintf_r+0x1b8>
 800ef1a:	ab03      	add	r3, sp, #12
 800ef1c:	9300      	str	r3, [sp, #0]
 800ef1e:	462a      	mov	r2, r5
 800ef20:	4b12      	ldr	r3, [pc, #72]	@ (800ef6c <_vfiprintf_r+0x228>)
 800ef22:	a904      	add	r1, sp, #16
 800ef24:	4630      	mov	r0, r6
 800ef26:	f7fb feb9 	bl	800ac9c <_printf_float>
 800ef2a:	4607      	mov	r7, r0
 800ef2c:	1c78      	adds	r0, r7, #1
 800ef2e:	d1d6      	bne.n	800eede <_vfiprintf_r+0x19a>
 800ef30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef32:	07d9      	lsls	r1, r3, #31
 800ef34:	d405      	bmi.n	800ef42 <_vfiprintf_r+0x1fe>
 800ef36:	89ab      	ldrh	r3, [r5, #12]
 800ef38:	059a      	lsls	r2, r3, #22
 800ef3a:	d402      	bmi.n	800ef42 <_vfiprintf_r+0x1fe>
 800ef3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef3e:	f7fc fe1d 	bl	800bb7c <__retarget_lock_release_recursive>
 800ef42:	89ab      	ldrh	r3, [r5, #12]
 800ef44:	065b      	lsls	r3, r3, #25
 800ef46:	f53f af1f 	bmi.w	800ed88 <_vfiprintf_r+0x44>
 800ef4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef4c:	e71e      	b.n	800ed8c <_vfiprintf_r+0x48>
 800ef4e:	ab03      	add	r3, sp, #12
 800ef50:	9300      	str	r3, [sp, #0]
 800ef52:	462a      	mov	r2, r5
 800ef54:	4b05      	ldr	r3, [pc, #20]	@ (800ef6c <_vfiprintf_r+0x228>)
 800ef56:	a904      	add	r1, sp, #16
 800ef58:	4630      	mov	r0, r6
 800ef5a:	f7fc f937 	bl	800b1cc <_printf_i>
 800ef5e:	e7e4      	b.n	800ef2a <_vfiprintf_r+0x1e6>
 800ef60:	0800f619 	.word	0x0800f619
 800ef64:	0800f623 	.word	0x0800f623
 800ef68:	0800ac9d 	.word	0x0800ac9d
 800ef6c:	0800ed21 	.word	0x0800ed21
 800ef70:	0800f61f 	.word	0x0800f61f

0800ef74 <__swbuf_r>:
 800ef74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef76:	460e      	mov	r6, r1
 800ef78:	4614      	mov	r4, r2
 800ef7a:	4605      	mov	r5, r0
 800ef7c:	b118      	cbz	r0, 800ef86 <__swbuf_r+0x12>
 800ef7e:	6a03      	ldr	r3, [r0, #32]
 800ef80:	b90b      	cbnz	r3, 800ef86 <__swbuf_r+0x12>
 800ef82:	f7fc fce3 	bl	800b94c <__sinit>
 800ef86:	69a3      	ldr	r3, [r4, #24]
 800ef88:	60a3      	str	r3, [r4, #8]
 800ef8a:	89a3      	ldrh	r3, [r4, #12]
 800ef8c:	071a      	lsls	r2, r3, #28
 800ef8e:	d501      	bpl.n	800ef94 <__swbuf_r+0x20>
 800ef90:	6923      	ldr	r3, [r4, #16]
 800ef92:	b943      	cbnz	r3, 800efa6 <__swbuf_r+0x32>
 800ef94:	4621      	mov	r1, r4
 800ef96:	4628      	mov	r0, r5
 800ef98:	f000 f82a 	bl	800eff0 <__swsetup_r>
 800ef9c:	b118      	cbz	r0, 800efa6 <__swbuf_r+0x32>
 800ef9e:	f04f 37ff 	mov.w	r7, #4294967295
 800efa2:	4638      	mov	r0, r7
 800efa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efa6:	6823      	ldr	r3, [r4, #0]
 800efa8:	6922      	ldr	r2, [r4, #16]
 800efaa:	1a98      	subs	r0, r3, r2
 800efac:	6963      	ldr	r3, [r4, #20]
 800efae:	b2f6      	uxtb	r6, r6
 800efb0:	4283      	cmp	r3, r0
 800efb2:	4637      	mov	r7, r6
 800efb4:	dc05      	bgt.n	800efc2 <__swbuf_r+0x4e>
 800efb6:	4621      	mov	r1, r4
 800efb8:	4628      	mov	r0, r5
 800efba:	f7ff fa47 	bl	800e44c <_fflush_r>
 800efbe:	2800      	cmp	r0, #0
 800efc0:	d1ed      	bne.n	800ef9e <__swbuf_r+0x2a>
 800efc2:	68a3      	ldr	r3, [r4, #8]
 800efc4:	3b01      	subs	r3, #1
 800efc6:	60a3      	str	r3, [r4, #8]
 800efc8:	6823      	ldr	r3, [r4, #0]
 800efca:	1c5a      	adds	r2, r3, #1
 800efcc:	6022      	str	r2, [r4, #0]
 800efce:	701e      	strb	r6, [r3, #0]
 800efd0:	6962      	ldr	r2, [r4, #20]
 800efd2:	1c43      	adds	r3, r0, #1
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d004      	beq.n	800efe2 <__swbuf_r+0x6e>
 800efd8:	89a3      	ldrh	r3, [r4, #12]
 800efda:	07db      	lsls	r3, r3, #31
 800efdc:	d5e1      	bpl.n	800efa2 <__swbuf_r+0x2e>
 800efde:	2e0a      	cmp	r6, #10
 800efe0:	d1df      	bne.n	800efa2 <__swbuf_r+0x2e>
 800efe2:	4621      	mov	r1, r4
 800efe4:	4628      	mov	r0, r5
 800efe6:	f7ff fa31 	bl	800e44c <_fflush_r>
 800efea:	2800      	cmp	r0, #0
 800efec:	d0d9      	beq.n	800efa2 <__swbuf_r+0x2e>
 800efee:	e7d6      	b.n	800ef9e <__swbuf_r+0x2a>

0800eff0 <__swsetup_r>:
 800eff0:	b538      	push	{r3, r4, r5, lr}
 800eff2:	4b29      	ldr	r3, [pc, #164]	@ (800f098 <__swsetup_r+0xa8>)
 800eff4:	4605      	mov	r5, r0
 800eff6:	6818      	ldr	r0, [r3, #0]
 800eff8:	460c      	mov	r4, r1
 800effa:	b118      	cbz	r0, 800f004 <__swsetup_r+0x14>
 800effc:	6a03      	ldr	r3, [r0, #32]
 800effe:	b90b      	cbnz	r3, 800f004 <__swsetup_r+0x14>
 800f000:	f7fc fca4 	bl	800b94c <__sinit>
 800f004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f008:	0719      	lsls	r1, r3, #28
 800f00a:	d422      	bmi.n	800f052 <__swsetup_r+0x62>
 800f00c:	06da      	lsls	r2, r3, #27
 800f00e:	d407      	bmi.n	800f020 <__swsetup_r+0x30>
 800f010:	2209      	movs	r2, #9
 800f012:	602a      	str	r2, [r5, #0]
 800f014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f018:	81a3      	strh	r3, [r4, #12]
 800f01a:	f04f 30ff 	mov.w	r0, #4294967295
 800f01e:	e033      	b.n	800f088 <__swsetup_r+0x98>
 800f020:	0758      	lsls	r0, r3, #29
 800f022:	d512      	bpl.n	800f04a <__swsetup_r+0x5a>
 800f024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f026:	b141      	cbz	r1, 800f03a <__swsetup_r+0x4a>
 800f028:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f02c:	4299      	cmp	r1, r3
 800f02e:	d002      	beq.n	800f036 <__swsetup_r+0x46>
 800f030:	4628      	mov	r0, r5
 800f032:	f7fd fbf9 	bl	800c828 <_free_r>
 800f036:	2300      	movs	r3, #0
 800f038:	6363      	str	r3, [r4, #52]	@ 0x34
 800f03a:	89a3      	ldrh	r3, [r4, #12]
 800f03c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f040:	81a3      	strh	r3, [r4, #12]
 800f042:	2300      	movs	r3, #0
 800f044:	6063      	str	r3, [r4, #4]
 800f046:	6923      	ldr	r3, [r4, #16]
 800f048:	6023      	str	r3, [r4, #0]
 800f04a:	89a3      	ldrh	r3, [r4, #12]
 800f04c:	f043 0308 	orr.w	r3, r3, #8
 800f050:	81a3      	strh	r3, [r4, #12]
 800f052:	6923      	ldr	r3, [r4, #16]
 800f054:	b94b      	cbnz	r3, 800f06a <__swsetup_r+0x7a>
 800f056:	89a3      	ldrh	r3, [r4, #12]
 800f058:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f05c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f060:	d003      	beq.n	800f06a <__swsetup_r+0x7a>
 800f062:	4621      	mov	r1, r4
 800f064:	4628      	mov	r0, r5
 800f066:	f000 f883 	bl	800f170 <__smakebuf_r>
 800f06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f06e:	f013 0201 	ands.w	r2, r3, #1
 800f072:	d00a      	beq.n	800f08a <__swsetup_r+0x9a>
 800f074:	2200      	movs	r2, #0
 800f076:	60a2      	str	r2, [r4, #8]
 800f078:	6962      	ldr	r2, [r4, #20]
 800f07a:	4252      	negs	r2, r2
 800f07c:	61a2      	str	r2, [r4, #24]
 800f07e:	6922      	ldr	r2, [r4, #16]
 800f080:	b942      	cbnz	r2, 800f094 <__swsetup_r+0xa4>
 800f082:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f086:	d1c5      	bne.n	800f014 <__swsetup_r+0x24>
 800f088:	bd38      	pop	{r3, r4, r5, pc}
 800f08a:	0799      	lsls	r1, r3, #30
 800f08c:	bf58      	it	pl
 800f08e:	6962      	ldrpl	r2, [r4, #20]
 800f090:	60a2      	str	r2, [r4, #8]
 800f092:	e7f4      	b.n	800f07e <__swsetup_r+0x8e>
 800f094:	2000      	movs	r0, #0
 800f096:	e7f7      	b.n	800f088 <__swsetup_r+0x98>
 800f098:	20000018 	.word	0x20000018

0800f09c <_raise_r>:
 800f09c:	291f      	cmp	r1, #31
 800f09e:	b538      	push	{r3, r4, r5, lr}
 800f0a0:	4605      	mov	r5, r0
 800f0a2:	460c      	mov	r4, r1
 800f0a4:	d904      	bls.n	800f0b0 <_raise_r+0x14>
 800f0a6:	2316      	movs	r3, #22
 800f0a8:	6003      	str	r3, [r0, #0]
 800f0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ae:	bd38      	pop	{r3, r4, r5, pc}
 800f0b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f0b2:	b112      	cbz	r2, 800f0ba <_raise_r+0x1e>
 800f0b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f0b8:	b94b      	cbnz	r3, 800f0ce <_raise_r+0x32>
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	f000 f830 	bl	800f120 <_getpid_r>
 800f0c0:	4622      	mov	r2, r4
 800f0c2:	4601      	mov	r1, r0
 800f0c4:	4628      	mov	r0, r5
 800f0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0ca:	f000 b817 	b.w	800f0fc <_kill_r>
 800f0ce:	2b01      	cmp	r3, #1
 800f0d0:	d00a      	beq.n	800f0e8 <_raise_r+0x4c>
 800f0d2:	1c59      	adds	r1, r3, #1
 800f0d4:	d103      	bne.n	800f0de <_raise_r+0x42>
 800f0d6:	2316      	movs	r3, #22
 800f0d8:	6003      	str	r3, [r0, #0]
 800f0da:	2001      	movs	r0, #1
 800f0dc:	e7e7      	b.n	800f0ae <_raise_r+0x12>
 800f0de:	2100      	movs	r1, #0
 800f0e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	4798      	blx	r3
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	e7e0      	b.n	800f0ae <_raise_r+0x12>

0800f0ec <raise>:
 800f0ec:	4b02      	ldr	r3, [pc, #8]	@ (800f0f8 <raise+0xc>)
 800f0ee:	4601      	mov	r1, r0
 800f0f0:	6818      	ldr	r0, [r3, #0]
 800f0f2:	f7ff bfd3 	b.w	800f09c <_raise_r>
 800f0f6:	bf00      	nop
 800f0f8:	20000018 	.word	0x20000018

0800f0fc <_kill_r>:
 800f0fc:	b538      	push	{r3, r4, r5, lr}
 800f0fe:	4d07      	ldr	r5, [pc, #28]	@ (800f11c <_kill_r+0x20>)
 800f100:	2300      	movs	r3, #0
 800f102:	4604      	mov	r4, r0
 800f104:	4608      	mov	r0, r1
 800f106:	4611      	mov	r1, r2
 800f108:	602b      	str	r3, [r5, #0]
 800f10a:	f7f3 fe97 	bl	8002e3c <_kill>
 800f10e:	1c43      	adds	r3, r0, #1
 800f110:	d102      	bne.n	800f118 <_kill_r+0x1c>
 800f112:	682b      	ldr	r3, [r5, #0]
 800f114:	b103      	cbz	r3, 800f118 <_kill_r+0x1c>
 800f116:	6023      	str	r3, [r4, #0]
 800f118:	bd38      	pop	{r3, r4, r5, pc}
 800f11a:	bf00      	nop
 800f11c:	20000b60 	.word	0x20000b60

0800f120 <_getpid_r>:
 800f120:	f7f3 be84 	b.w	8002e2c <_getpid>

0800f124 <__swhatbuf_r>:
 800f124:	b570      	push	{r4, r5, r6, lr}
 800f126:	460c      	mov	r4, r1
 800f128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f12c:	2900      	cmp	r1, #0
 800f12e:	b096      	sub	sp, #88	@ 0x58
 800f130:	4615      	mov	r5, r2
 800f132:	461e      	mov	r6, r3
 800f134:	da0d      	bge.n	800f152 <__swhatbuf_r+0x2e>
 800f136:	89a3      	ldrh	r3, [r4, #12]
 800f138:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f13c:	f04f 0100 	mov.w	r1, #0
 800f140:	bf14      	ite	ne
 800f142:	2340      	movne	r3, #64	@ 0x40
 800f144:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f148:	2000      	movs	r0, #0
 800f14a:	6031      	str	r1, [r6, #0]
 800f14c:	602b      	str	r3, [r5, #0]
 800f14e:	b016      	add	sp, #88	@ 0x58
 800f150:	bd70      	pop	{r4, r5, r6, pc}
 800f152:	466a      	mov	r2, sp
 800f154:	f000 f848 	bl	800f1e8 <_fstat_r>
 800f158:	2800      	cmp	r0, #0
 800f15a:	dbec      	blt.n	800f136 <__swhatbuf_r+0x12>
 800f15c:	9901      	ldr	r1, [sp, #4]
 800f15e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f162:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f166:	4259      	negs	r1, r3
 800f168:	4159      	adcs	r1, r3
 800f16a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f16e:	e7eb      	b.n	800f148 <__swhatbuf_r+0x24>

0800f170 <__smakebuf_r>:
 800f170:	898b      	ldrh	r3, [r1, #12]
 800f172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f174:	079d      	lsls	r5, r3, #30
 800f176:	4606      	mov	r6, r0
 800f178:	460c      	mov	r4, r1
 800f17a:	d507      	bpl.n	800f18c <__smakebuf_r+0x1c>
 800f17c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	6123      	str	r3, [r4, #16]
 800f184:	2301      	movs	r3, #1
 800f186:	6163      	str	r3, [r4, #20]
 800f188:	b003      	add	sp, #12
 800f18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f18c:	ab01      	add	r3, sp, #4
 800f18e:	466a      	mov	r2, sp
 800f190:	f7ff ffc8 	bl	800f124 <__swhatbuf_r>
 800f194:	9f00      	ldr	r7, [sp, #0]
 800f196:	4605      	mov	r5, r0
 800f198:	4639      	mov	r1, r7
 800f19a:	4630      	mov	r0, r6
 800f19c:	f7fd fbb8 	bl	800c910 <_malloc_r>
 800f1a0:	b948      	cbnz	r0, 800f1b6 <__smakebuf_r+0x46>
 800f1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1a6:	059a      	lsls	r2, r3, #22
 800f1a8:	d4ee      	bmi.n	800f188 <__smakebuf_r+0x18>
 800f1aa:	f023 0303 	bic.w	r3, r3, #3
 800f1ae:	f043 0302 	orr.w	r3, r3, #2
 800f1b2:	81a3      	strh	r3, [r4, #12]
 800f1b4:	e7e2      	b.n	800f17c <__smakebuf_r+0xc>
 800f1b6:	89a3      	ldrh	r3, [r4, #12]
 800f1b8:	6020      	str	r0, [r4, #0]
 800f1ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1be:	81a3      	strh	r3, [r4, #12]
 800f1c0:	9b01      	ldr	r3, [sp, #4]
 800f1c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f1c6:	b15b      	cbz	r3, 800f1e0 <__smakebuf_r+0x70>
 800f1c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1cc:	4630      	mov	r0, r6
 800f1ce:	f000 f81d 	bl	800f20c <_isatty_r>
 800f1d2:	b128      	cbz	r0, 800f1e0 <__smakebuf_r+0x70>
 800f1d4:	89a3      	ldrh	r3, [r4, #12]
 800f1d6:	f023 0303 	bic.w	r3, r3, #3
 800f1da:	f043 0301 	orr.w	r3, r3, #1
 800f1de:	81a3      	strh	r3, [r4, #12]
 800f1e0:	89a3      	ldrh	r3, [r4, #12]
 800f1e2:	431d      	orrs	r5, r3
 800f1e4:	81a5      	strh	r5, [r4, #12]
 800f1e6:	e7cf      	b.n	800f188 <__smakebuf_r+0x18>

0800f1e8 <_fstat_r>:
 800f1e8:	b538      	push	{r3, r4, r5, lr}
 800f1ea:	4d07      	ldr	r5, [pc, #28]	@ (800f208 <_fstat_r+0x20>)
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	4604      	mov	r4, r0
 800f1f0:	4608      	mov	r0, r1
 800f1f2:	4611      	mov	r1, r2
 800f1f4:	602b      	str	r3, [r5, #0]
 800f1f6:	f7f3 fe81 	bl	8002efc <_fstat>
 800f1fa:	1c43      	adds	r3, r0, #1
 800f1fc:	d102      	bne.n	800f204 <_fstat_r+0x1c>
 800f1fe:	682b      	ldr	r3, [r5, #0]
 800f200:	b103      	cbz	r3, 800f204 <_fstat_r+0x1c>
 800f202:	6023      	str	r3, [r4, #0]
 800f204:	bd38      	pop	{r3, r4, r5, pc}
 800f206:	bf00      	nop
 800f208:	20000b60 	.word	0x20000b60

0800f20c <_isatty_r>:
 800f20c:	b538      	push	{r3, r4, r5, lr}
 800f20e:	4d06      	ldr	r5, [pc, #24]	@ (800f228 <_isatty_r+0x1c>)
 800f210:	2300      	movs	r3, #0
 800f212:	4604      	mov	r4, r0
 800f214:	4608      	mov	r0, r1
 800f216:	602b      	str	r3, [r5, #0]
 800f218:	f7f3 fe80 	bl	8002f1c <_isatty>
 800f21c:	1c43      	adds	r3, r0, #1
 800f21e:	d102      	bne.n	800f226 <_isatty_r+0x1a>
 800f220:	682b      	ldr	r3, [r5, #0]
 800f222:	b103      	cbz	r3, 800f226 <_isatty_r+0x1a>
 800f224:	6023      	str	r3, [r4, #0]
 800f226:	bd38      	pop	{r3, r4, r5, pc}
 800f228:	20000b60 	.word	0x20000b60

0800f22c <_init>:
 800f22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22e:	bf00      	nop
 800f230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f232:	bc08      	pop	{r3}
 800f234:	469e      	mov	lr, r3
 800f236:	4770      	bx	lr

0800f238 <_fini>:
 800f238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f23a:	bf00      	nop
 800f23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f23e:	bc08      	pop	{r3}
 800f240:	469e      	mov	lr, r3
 800f242:	4770      	bx	lr
