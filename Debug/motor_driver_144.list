
motor_driver_144.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f77c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800f920  0800f920  00010920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffa0  0800ffa0  000111d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ffa0  0800ffa0  00010fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ffa8  0800ffa8  000111d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffa8  0800ffa8  00010fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ffac  0800ffac  00010fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ffb0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111d4  2**0
                  CONTENTS
 10 .bss          000009d8  200001d4  200001d4  000111d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bac  20000bac  000111d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e6c  00000000  00000000  00011204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cf8  00000000  00000000  00027070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  00029d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e28  00000000  00000000  0002afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023496  00000000  00000000  0002bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001721e  00000000  00000000  0004f25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d625d  00000000  00000000  0006647c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c6d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000615c  00000000  00000000  0013c71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00142878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f904 	.word	0x0800f904

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800f904 	.word	0x0800f904

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000
 8000d24:	00000000 	.word	0x00000000

08000d28 <compute_ideal_speed>:
#include "drive_model.h"
#include "chassis_param.h"

void compute_ideal_speed(volatile float v, volatile float w,
		volatile float *lb_speed, volatile float *rb_speed,
		volatile float *lf_speed, volatile float *rf_speed) {
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000d32:	edc7 0a04 	vstr	s1, [r7, #16]
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	603b      	str	r3, [r7, #0]
	*lb_speed = v - w * CHASSIS_WIDTH / 2.0;
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fc19 	bl	8000578 <__aeabi_f2d>
 8000d46:	4604      	mov	r4, r0
 8000d48:	460d      	mov	r5, r1
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fc13 	bl	8000578 <__aeabi_f2d>
 8000d52:	a329      	add	r3, pc, #164	@ (adr r3, 8000df8 <compute_ideal_speed+0xd0>)
 8000d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d58:	f7ff fc66 	bl	8000628 <__aeabi_dmul>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4610      	mov	r0, r2
 8000d62:	4619      	mov	r1, r3
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d6c:	f7ff fd86 	bl	800087c <__aeabi_ddiv>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4620      	mov	r0, r4
 8000d76:	4629      	mov	r1, r5
 8000d78:	f7ff fa9e 	bl	80002b8 <__aeabi_dsub>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4610      	mov	r0, r2
 8000d82:	4619      	mov	r1, r3
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2f>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	601a      	str	r2, [r3, #0]
	*rb_speed = v + w * CHASSIS_WIDTH / 2.0;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fbf1 	bl	8000578 <__aeabi_f2d>
 8000d96:	4604      	mov	r4, r0
 8000d98:	460d      	mov	r5, r1
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fbeb 	bl	8000578 <__aeabi_f2d>
 8000da2:	a315      	add	r3, pc, #84	@ (adr r3, 8000df8 <compute_ideal_speed+0xd0>)
 8000da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da8:	f7ff fc3e 	bl	8000628 <__aeabi_dmul>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	4610      	mov	r0, r2
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dbc:	f7ff fd5e 	bl	800087c <__aeabi_ddiv>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	4629      	mov	r1, r5
 8000dc8:	f7ff fa78 	bl	80002bc <__adddf3>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f7ff ff20 	bl	8000c18 <__aeabi_d2f>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	601a      	str	r2, [r3, #0]
	*lf_speed = *lb_speed;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	601a      	str	r2, [r3, #0]
	*rf_speed = *rb_speed;
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	601a      	str	r2, [r3, #0]
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bdb0      	pop	{r4, r5, r7, pc}
 8000df6:	bf00      	nop
 8000df8:	ed916873 	.word	0xed916873
 8000dfc:	3fd53f7c 	.word	0x3fd53f7c

08000e00 <lb_forward>:
 */
#include "h_bridge_control.h"
#include "main.h"

//LB
void lb_forward(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0a:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <lb_forward+0x20>)
 8000e0c:	f002 fffa 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e16:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <lb_forward+0x20>)
 8000e18:	f002 fff4 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	48001400 	.word	0x48001400

08000e24 <lb_backward>:

void lb_backward(void){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e2e:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <lb_backward+0x20>)
 8000e30:	f002 ffe8 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e3a:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <lb_backward+0x20>)
 8000e3c:	f002 ffe2 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	48001400 	.word	0x48001400

08000e48 <lb_stop>:

void lb_stop(void){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LB_F0_GPIOx, LB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e52:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <lb_stop+0x20>)
 8000e54:	f002 ffd6 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_F1_GPIOx, LB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e5e:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <lb_stop+0x20>)
 8000e60:	f002 ffd0 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	48001400 	.word	0x48001400

08000e6c <rb_forward>:

//RB
void rb_forward(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2110      	movs	r1, #16
 8000e74:	4804      	ldr	r0, [pc, #16]	@ (8000e88 <rb_forward+0x1c>)
 8000e76:	f002 ffc5 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <rb_forward+0x1c>)
 8000e80:	f002 ffc0 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	48001000 	.word	0x48001000

08000e8c <rb_backward>:

void rb_backward(void){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2110      	movs	r1, #16
 8000e94:	4804      	ldr	r0, [pc, #16]	@ (8000ea8 <rb_backward+0x1c>)
 8000e96:	f002 ffb5 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <rb_backward+0x1c>)
 8000ea0:	f002 ffb0 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	48001000 	.word	0x48001000

08000eac <rb_stop>:

void rb_stop(void){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RB_F0_GPIOx, RB_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <rb_stop+0x1c>)
 8000eb6:	f002 ffa5 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RB_F1_GPIOx, RB_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <rb_stop+0x1c>)
 8000ec0:	f002 ffa0 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	48001000 	.word	0x48001000

08000ecc <lf_forward>:

//LF
void lf_forward(void){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ed6:	4805      	ldr	r0, [pc, #20]	@ (8000eec <lf_forward+0x20>)
 8000ed8:	f002 ff94 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ee2:	4802      	ldr	r0, [pc, #8]	@ (8000eec <lf_forward+0x20>)
 8000ee4:	f002 ff8e 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	48000800 	.word	0x48000800

08000ef0 <lf_backward>:

void lf_backward(void){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000efa:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <lf_backward+0x20>)
 8000efc:	f002 ff82 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f06:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <lf_backward+0x20>)
 8000f08:	f002 ff7c 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	48000800 	.word	0x48000800

08000f14 <lf_stop>:

void lf_stop(void){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LF_F0_GPIOx, LF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f1e:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <lf_stop+0x20>)
 8000f20:	f002 ff70 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_F1_GPIOx, LF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f2a:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <lf_stop+0x20>)
 8000f2c:	f002 ff6a 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	48000800 	.word	0x48000800

08000f38 <rf_forward>:

//RF
void rf_forward(void){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2104      	movs	r1, #4
 8000f40:	4804      	ldr	r0, [pc, #16]	@ (8000f54 <rf_forward+0x1c>)
 8000f42:	f002 ff5f 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	2108      	movs	r1, #8
 8000f4a:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <rf_forward+0x1c>)
 8000f4c:	f002 ff5a 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	48001800 	.word	0x48001800

08000f58 <rf_backward>:

void rf_backward(void){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2104      	movs	r1, #4
 8000f60:	4804      	ldr	r0, [pc, #16]	@ (8000f74 <rf_backward+0x1c>)
 8000f62:	f002 ff4f 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2108      	movs	r1, #8
 8000f6a:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <rf_backward+0x1c>)
 8000f6c:	f002 ff4a 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	48001800 	.word	0x48001800

08000f78 <rf_stop>:

void rf_stop(void){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_F0_GPIOx, RF_F0_GPIO_PIN, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2104      	movs	r1, #4
 8000f80:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <rf_stop+0x1c>)
 8000f82:	f002 ff3f 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_F1_GPIOx, RF_F1_GPIO_PIN, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2108      	movs	r1, #8
 8000f8a:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <rf_stop+0x1c>)
 8000f8c:	f002 ff3a 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	48001800 	.word	0x48001800

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9e:	f002 fbb3 	bl	8003708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 f8a7 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa6:	f000 fc5b 	bl	8001860 <MX_GPIO_Init>
  MX_RTC_Init();
 8000faa:	f000 f91d 	bl	80011e8 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000fae:	f000 fc01 	bl	80017b4 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000fb2:	f000 fc2f 	bl	8001814 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000fb6:	f000 f93d 	bl	8001234 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fba:	f000 f995 	bl	80012e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fbe:	f000 fa0d 	bl	80013dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fc2:	f000 fa61 	bl	8001488 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000fc6:	f000 fab5 	bl	8001534 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000fca:	f000 fb0d 	bl	80015e8 <MX_TIM16_Init>
  MX_UART4_Init();
 8000fce:	f000 fb31 	bl	8001634 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000fd2:	f000 fb8f 	bl	80016f4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fd6:	f000 fbbd 	bl	8001754 <MX_USART2_UART_Init>
  MX_UART5_Init();
 8000fda:	f000 fb5b 	bl	8001694 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim16);
 8000fde:	4837      	ldr	r0, [pc, #220]	@ (80010bc <main+0x124>)
 8000fe0:	f005 fffc 	bl	8006fdc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000fe4:	213c      	movs	r1, #60	@ 0x3c
 8000fe6:	4836      	ldr	r0, [pc, #216]	@ (80010c0 <main+0x128>)
 8000fe8:	f006 fa72 	bl	80074d0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000fec:	213c      	movs	r1, #60	@ 0x3c
 8000fee:	4835      	ldr	r0, [pc, #212]	@ (80010c4 <main+0x12c>)
 8000ff0:	f006 fa6e 	bl	80074d0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000ff4:	213c      	movs	r1, #60	@ 0x3c
 8000ff6:	4834      	ldr	r0, [pc, #208]	@ (80010c8 <main+0x130>)
 8000ff8:	f006 fa6a 	bl	80074d0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000ffc:	213c      	movs	r1, #60	@ 0x3c
 8000ffe:	4833      	ldr	r0, [pc, #204]	@ (80010cc <main+0x134>)
 8001000:	f006 fa66 	bl	80074d0 <HAL_TIM_Encoder_Start>

	HAL_UART_Receive_IT(&huart4, rx_data_11, 11);  // Give this back /////////////// UART 4
 8001004:	220b      	movs	r2, #11
 8001006:	4932      	ldr	r1, [pc, #200]	@ (80010d0 <main+0x138>)
 8001008:	4832      	ldr	r0, [pc, #200]	@ (80010d4 <main+0x13c>)
 800100a:	f007 fa84 	bl	8008516 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, rx_data_11, 11);  // Use this UART 5
 800100e:	220b      	movs	r2, #11
 8001010:	492f      	ldr	r1, [pc, #188]	@ (80010d0 <main+0x138>)
 8001012:	4831      	ldr	r0, [pc, #196]	@ (80010d8 <main+0x140>)
 8001014:	f007 fa7f 	bl	8008516 <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart1, rx_data_11, 11);

	//start PWM
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
	set_direction(LB, BREAK);
 8001018:	2300      	movs	r3, #0
 800101a:	2203      	movs	r2, #3
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f001 f8fc 	bl	800221c <set_direction>
	set_direction(RB, BREAK);
 8001024:	2301      	movs	r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f001 f8f6 	bl	800221c <set_direction>
	set_direction(LF, BREAK);
 8001030:	2302      	movs	r3, #2
 8001032:	2203      	movs	r2, #3
 8001034:	4611      	mov	r1, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f001 f8f0 	bl	800221c <set_direction>
	set_direction(RF, BREAK);
 800103c:	2303      	movs	r3, #3
 800103e:	2203      	movs	r2, #3
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f001 f8ea 	bl	800221c <set_direction>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001048:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <main+0x144>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <main+0x144>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2200      	movs	r2, #0
 8001056:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001058:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <main+0x144>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2200      	movs	r2, #0
 800105e:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001060:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <main+0x144>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2200      	movs	r2, #0
 8001066:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001068:	2100      	movs	r1, #0
 800106a:	481c      	ldr	r0, [pc, #112]	@ (80010dc <main+0x144>)
 800106c:	f006 f87e 	bl	800716c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001070:	2104      	movs	r1, #4
 8001072:	481a      	ldr	r0, [pc, #104]	@ (80010dc <main+0x144>)
 8001074:	f006 f87a 	bl	800716c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001078:	2108      	movs	r1, #8
 800107a:	4818      	ldr	r0, [pc, #96]	@ (80010dc <main+0x144>)
 800107c:	f006 f876 	bl	800716c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001080:	210c      	movs	r1, #12
 8001082:	4816      	ldr	r0, [pc, #88]	@ (80010dc <main+0x144>)
 8001084:	f006 f872 	bl	800716c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	log_to_uart("Hello\n\r");
 8001088:	4815      	ldr	r0, [pc, #84]	@ (80010e0 <main+0x148>)
 800108a:	f001 fe57 	bl	8002d3c <log_to_uart>
	char str[30];
//	sprintf(str, "%d", HAL_RCC_GetPCLK1Freq());
//	log_to_uart(str);

	lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <main+0x12c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001094:	4a13      	ldr	r2, [pc, #76]	@ (80010e4 <main+0x14c>)
 8001096:	6013      	str	r3, [r2, #0]
	rb_count_last = __HAL_TIM_GET_COUNTER(&htim4);
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <main+0x130>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109e:	4a12      	ldr	r2, [pc, #72]	@ (80010e8 <main+0x150>)
 80010a0:	6013      	str	r3, [r2, #0]
	lf_count_last = __HAL_TIM_GET_COUNTER(&htim1);
 80010a2:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <main+0x128>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a8:	4a10      	ldr	r2, [pc, #64]	@ (80010ec <main+0x154>)
 80010aa:	6013      	str	r3, [r2, #0]
	rf_count_last = __HAL_TIM_GET_COUNTER(&htim8);
 80010ac:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <main+0x134>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b2:	4a0f      	ldr	r2, [pc, #60]	@ (80010f0 <main+0x158>)
 80010b4:	6013      	str	r3, [r2, #0]
//	v_desired = 0.22;
//	w_desired = 0;
//	reset_pid();


	while (1) {
 80010b6:	bf00      	nop
 80010b8:	e7fd      	b.n	80010b6 <main+0x11e>
 80010ba:	bf00      	nop
 80010bc:	2000038c 	.word	0x2000038c
 80010c0:	20000210 	.word	0x20000210
 80010c4:	200002a8 	.word	0x200002a8
 80010c8:	200002f4 	.word	0x200002f4
 80010cc:	20000340 	.word	0x20000340
 80010d0:	20000954 	.word	0x20000954
 80010d4:	200003d8 	.word	0x200003d8
 80010d8:	20000460 	.word	0x20000460
 80010dc:	2000025c 	.word	0x2000025c
 80010e0:	0800f928 	.word	0x0800f928
 80010e4:	200009f8 	.word	0x200009f8
 80010e8:	200009fc 	.word	0x200009fc
 80010ec:	20000a00 	.word	0x20000a00
 80010f0:	20000a04 	.word	0x20000a04

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0a6      	sub	sp, #152	@ 0x98
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010fe:	2228      	movs	r2, #40	@ 0x28
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f00b f827 	bl	800c156 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2258      	movs	r2, #88	@ 0x58
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f00b f819 	bl	800c156 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001124:	2309      	movs	r3, #9
 8001126:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001128:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800112c:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112e:	2301      	movs	r3, #1
 8001130:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001132:	2301      	movs	r3, #1
 8001134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001138:	2302      	movs	r3, #2
 800113a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001142:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001146:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800114a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001154:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001158:	4618      	mov	r0, r3
 800115a:	f004 f94f 	bl	80053fc <HAL_RCC_OscConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001164:	f001 fe00 	bl	8002d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001168:	230f      	movs	r3, #15
 800116a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116c:	2302      	movs	r3, #2
 800116e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001174:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001178:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001182:	2102      	movs	r1, #2
 8001184:	4618      	mov	r0, r3
 8001186:	f005 f98d 	bl	80064a4 <HAL_RCC_ClockConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001190:	f001 fdea 	bl	8002d68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8001194:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <SystemClock_Config+0xf0>)
 8001196:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80011b2:	2300      	movs	r3, #0
 80011b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80011be:	2300      	movs	r3, #0
 80011c0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4618      	mov	r0, r3
 80011ce:	f005 fb89 	bl	80068e4 <HAL_RCCEx_PeriphCLKConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80011d8:	f001 fdc6 	bl	8002d68 <Error_Handler>
  }
}
 80011dc:	bf00      	nop
 80011de:	3798      	adds	r7, #152	@ 0x98
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	00b3301f 	.word	0x00b3301f

080011e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <MX_RTC_Init+0x44>)
 80011ee:	4a10      	ldr	r2, [pc, #64]	@ (8001230 <MX_RTC_Init+0x48>)
 80011f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <MX_RTC_Init+0x44>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <MX_RTC_Init+0x44>)
 80011fa:	227f      	movs	r2, #127	@ 0x7f
 80011fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <MX_RTC_Init+0x44>)
 8001200:	22ff      	movs	r2, #255	@ 0xff
 8001202:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001204:	4b09      	ldr	r3, [pc, #36]	@ (800122c <MX_RTC_Init+0x44>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MX_RTC_Init+0x44>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <MX_RTC_Init+0x44>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	@ (800122c <MX_RTC_Init+0x44>)
 8001218:	f005 fd82 	bl	8006d20 <HAL_RTC_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001222:	f001 fda1 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200001f0 	.word	0x200001f0
 8001230:	40002800 	.word	0x40002800

08001234 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08c      	sub	sp, #48	@ 0x30
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	2224      	movs	r2, #36	@ 0x24
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f00a ff87 	bl	800c156 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	463b      	mov	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001252:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <MX_TIM1_Init+0xac>)
 8001254:	4a23      	ldr	r2, [pc, #140]	@ (80012e4 <MX_TIM1_Init+0xb0>)
 8001256:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001258:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <MX_TIM1_Init+0xac>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <MX_TIM1_Init+0xac>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001264:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <MX_TIM1_Init+0xac>)
 8001266:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800126a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <MX_TIM1_Init+0xac>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <MX_TIM1_Init+0xac>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <MX_TIM1_Init+0xac>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800127e:	2303      	movs	r3, #3
 8001280:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001286:	2301      	movs	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001296:	2301      	movs	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	4619      	mov	r1, r3
 80012a8:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <MX_TIM1_Init+0xac>)
 80012aa:	f006 f86b 	bl	8007384 <HAL_TIM_Encoder_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80012b4:	f001 fd58 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <MX_TIM1_Init+0xac>)
 80012ca:	f006 ffa3 	bl	8008214 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012d4:	f001 fd48 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	3730      	adds	r7, #48	@ 0x30
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000210 	.word	0x20000210
 80012e4:	40012c00 	.word	0x40012c00

080012e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	@ 0x28
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fa:	463b      	mov	r3, r7
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
 8001308:	615a      	str	r2, [r3, #20]
 800130a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130c:	4b32      	ldr	r3, [pc, #200]	@ (80013d8 <MX_TIM2_Init+0xf0>)
 800130e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001312:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = APB1_FREQ / TIM2_FREQ - 1;
 8001314:	4b30      	ldr	r3, [pc, #192]	@ (80013d8 <MX_TIM2_Init+0xf0>)
 8001316:	2202      	movs	r2, #2
 8001318:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b2f      	ldr	r3, [pc, #188]	@ (80013d8 <MX_TIM2_Init+0xf0>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_FREQ / PWM_FREQ - 1;
 8001320:	4b2d      	ldr	r3, [pc, #180]	@ (80013d8 <MX_TIM2_Init+0xf0>)
 8001322:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001326:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001328:	4b2b      	ldr	r3, [pc, #172]	@ (80013d8 <MX_TIM2_Init+0xf0>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132e:	4b2a      	ldr	r3, [pc, #168]	@ (80013d8 <MX_TIM2_Init+0xf0>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001334:	4828      	ldr	r0, [pc, #160]	@ (80013d8 <MX_TIM2_Init+0xf0>)
 8001336:	f005 fec1 	bl	80070bc <HAL_TIM_PWM_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001340:	f001 fd12 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4821      	ldr	r0, [pc, #132]	@ (80013d8 <MX_TIM2_Init+0xf0>)
 8001354:	f006 ff5e 	bl	8008214 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800135e:	f001 fd03 	bl	8002d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001362:	2360      	movs	r3, #96	@ 0x60
 8001364:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	4619      	mov	r1, r3
 8001378:	4817      	ldr	r0, [pc, #92]	@ (80013d8 <MX_TIM2_Init+0xf0>)
 800137a:	f006 fa39 	bl	80077f0 <HAL_TIM_PWM_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001384:	f001 fcf0 	bl	8002d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	2204      	movs	r2, #4
 800138c:	4619      	mov	r1, r3
 800138e:	4812      	ldr	r0, [pc, #72]	@ (80013d8 <MX_TIM2_Init+0xf0>)
 8001390:	f006 fa2e 	bl	80077f0 <HAL_TIM_PWM_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800139a:	f001 fce5 	bl	8002d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800139e:	463b      	mov	r3, r7
 80013a0:	2208      	movs	r2, #8
 80013a2:	4619      	mov	r1, r3
 80013a4:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <MX_TIM2_Init+0xf0>)
 80013a6:	f006 fa23 	bl	80077f0 <HAL_TIM_PWM_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80013b0:	f001 fcda 	bl	8002d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	220c      	movs	r2, #12
 80013b8:	4619      	mov	r1, r3
 80013ba:	4807      	ldr	r0, [pc, #28]	@ (80013d8 <MX_TIM2_Init+0xf0>)
 80013bc:	f006 fa18 	bl	80077f0 <HAL_TIM_PWM_ConfigChannel>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80013c6:	f001 fccf 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013ca:	4803      	ldr	r0, [pc, #12]	@ (80013d8 <MX_TIM2_Init+0xf0>)
 80013cc:	f001 fe7c 	bl	80030c8 <HAL_TIM_MspPostInit>

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	@ 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000025c 	.word	0x2000025c

080013dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	@ 0x30
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	2224      	movs	r2, #36	@ 0x24
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00a feb3 	bl	800c156 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013fa:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <MX_TIM3_Init+0xa4>)
 80013fc:	4a21      	ldr	r2, [pc, #132]	@ (8001484 <MX_TIM3_Init+0xa8>)
 80013fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001400:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <MX_TIM3_Init+0xa4>)
 8001402:	2200      	movs	r2, #0
 8001404:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001406:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <MX_TIM3_Init+0xa4>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800140c:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <MX_TIM3_Init+0xa4>)
 800140e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001412:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001414:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <MX_TIM3_Init+0xa4>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141a:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <MX_TIM3_Init+0xa4>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001420:	2303      	movs	r3, #3
 8001422:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001428:	2301      	movs	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001438:	2301      	movs	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	4619      	mov	r1, r3
 800144a:	480d      	ldr	r0, [pc, #52]	@ (8001480 <MX_TIM3_Init+0xa4>)
 800144c:	f005 ff9a 	bl	8007384 <HAL_TIM_Encoder_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001456:	f001 fc87 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001462:	463b      	mov	r3, r7
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	@ (8001480 <MX_TIM3_Init+0xa4>)
 8001468:	f006 fed4 	bl	8008214 <HAL_TIMEx_MasterConfigSynchronization>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001472:	f001 fc79 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3730      	adds	r7, #48	@ 0x30
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200002a8 	.word	0x200002a8
 8001484:	40000400 	.word	0x40000400

08001488 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	@ 0x30
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	2224      	movs	r2, #36	@ 0x24
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f00a fe5d 	bl	800c156 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014a6:	4b21      	ldr	r3, [pc, #132]	@ (800152c <MX_TIM4_Init+0xa4>)
 80014a8:	4a21      	ldr	r2, [pc, #132]	@ (8001530 <MX_TIM4_Init+0xa8>)
 80014aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <MX_TIM4_Init+0xa4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <MX_TIM4_Init+0xa4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014b8:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <MX_TIM4_Init+0xa4>)
 80014ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_TIM4_Init+0xa4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <MX_TIM4_Init+0xa4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014cc:	2303      	movs	r3, #3
 80014ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014d4:	2301      	movs	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014e4:	2301      	movs	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	4619      	mov	r1, r3
 80014f6:	480d      	ldr	r0, [pc, #52]	@ (800152c <MX_TIM4_Init+0xa4>)
 80014f8:	f005 ff44 	bl	8007384 <HAL_TIM_Encoder_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001502:	f001 fc31 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800150e:	463b      	mov	r3, r7
 8001510:	4619      	mov	r1, r3
 8001512:	4806      	ldr	r0, [pc, #24]	@ (800152c <MX_TIM4_Init+0xa4>)
 8001514:	f006 fe7e 	bl	8008214 <HAL_TIMEx_MasterConfigSynchronization>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800151e:	f001 fc23 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	3730      	adds	r7, #48	@ 0x30
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200002f4 	.word	0x200002f4
 8001530:	40000800 	.word	0x40000800

08001534 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	@ 0x30
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2224      	movs	r2, #36	@ 0x24
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f00a fe07 	bl	800c156 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001552:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <MX_TIM8_Init+0xac>)
 8001554:	4a23      	ldr	r2, [pc, #140]	@ (80015e4 <MX_TIM8_Init+0xb0>)
 8001556:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001558:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <MX_TIM8_Init+0xac>)
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <MX_TIM8_Init+0xac>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001564:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <MX_TIM8_Init+0xac>)
 8001566:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800156a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <MX_TIM8_Init+0xac>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001572:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <MX_TIM8_Init+0xac>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <MX_TIM8_Init+0xac>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800157e:	2303      	movs	r3, #3
 8001580:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001586:	2301      	movs	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001596:	2301      	movs	r3, #1
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	4619      	mov	r1, r3
 80015a8:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <MX_TIM8_Init+0xac>)
 80015aa:	f005 feeb 	bl	8007384 <HAL_TIM_Encoder_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80015b4:	f001 fbd8 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_TIM8_Init+0xac>)
 80015ca:	f006 fe23 	bl	8008214 <HAL_TIMEx_MasterConfigSynchronization>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80015d4:	f001 fbc8 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3730      	adds	r7, #48	@ 0x30
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000340 	.word	0x20000340
 80015e4:	40013400 	.word	0x40013400

080015e8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <MX_TIM16_Init+0x44>)
 80015ee:	4a10      	ldr	r2, [pc, #64]	@ (8001630 <MX_TIM16_Init+0x48>)
 80015f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = APB2_FREQ / TIM16_FREQ - 1;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <MX_TIM16_Init+0x44>)
 80015f4:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80015f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_TIM16_Init+0x44>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM16_FREQ / ENCODER_SAMPLE_FREQ -1;
 8001600:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <MX_TIM16_Init+0x44>)
 8001602:	22c7      	movs	r2, #199	@ 0xc7
 8001604:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_TIM16_Init+0x44>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800160c:	4b07      	ldr	r3, [pc, #28]	@ (800162c <MX_TIM16_Init+0x44>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_TIM16_Init+0x44>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	@ (800162c <MX_TIM16_Init+0x44>)
 800161a:	f005 fc87 	bl	8006f2c <HAL_TIM_Base_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001624:	f001 fba0 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000038c 	.word	0x2000038c
 8001630:	40014400 	.word	0x40014400

08001634 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <MX_UART4_Init+0x58>)
 800163a:	4a15      	ldr	r2, [pc, #84]	@ (8001690 <MX_UART4_Init+0x5c>)
 800163c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800163e:	4b13      	ldr	r3, [pc, #76]	@ (800168c <MX_UART4_Init+0x58>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <MX_UART4_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <MX_UART4_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <MX_UART4_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <MX_UART4_Init+0x58>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <MX_UART4_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b09      	ldr	r3, [pc, #36]	@ (800168c <MX_UART4_Init+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166a:	4b08      	ldr	r3, [pc, #32]	@ (800168c <MX_UART4_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <MX_UART4_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_UART4_Init+0x58>)
 8001678:	f006 fe76 	bl	8008368 <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001682:	f001 fb71 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200003d8 	.word	0x200003d8
 8001690:	40004c00 	.word	0x40004c00

08001694 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001698:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_UART5_Init+0x58>)
 800169a:	4a15      	ldr	r2, [pc, #84]	@ (80016f0 <MX_UART5_Init+0x5c>)
 800169c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800169e:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <MX_UART5_Init+0x58>)
 80016a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <MX_UART5_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <MX_UART5_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_UART5_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <MX_UART5_Init+0x58>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <MX_UART5_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_UART5_Init+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <MX_UART5_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_UART5_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <MX_UART5_Init+0x58>)
 80016d8:	f006 fe46 	bl	8008368 <HAL_UART_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80016e2:	f001 fb41 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000460 	.word	0x20000460
 80016f0:	40005000 	.word	0x40005000

080016f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <MX_USART1_UART_Init+0x58>)
 80016fa:	4a15      	ldr	r2, [pc, #84]	@ (8001750 <MX_USART1_UART_Init+0x5c>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016fe:	4b13      	ldr	r3, [pc, #76]	@ (800174c <MX_USART1_UART_Init+0x58>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <MX_USART1_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <MX_USART1_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <MX_USART1_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <MX_USART1_UART_Init+0x58>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <MX_USART1_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <MX_USART1_UART_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b08      	ldr	r3, [pc, #32]	@ (800174c <MX_USART1_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_USART1_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	@ (800174c <MX_USART1_UART_Init+0x58>)
 8001738:	f006 fe16 	bl	8008368 <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001742:	f001 fb11 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200004e8 	.word	0x200004e8
 8001750:	40013800 	.word	0x40013800

08001754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001758:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <MX_USART2_UART_Init+0x58>)
 800175a:	4a15      	ldr	r2, [pc, #84]	@ (80017b0 <MX_USART2_UART_Init+0x5c>)
 800175c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <MX_USART2_UART_Init+0x58>)
 8001760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <MX_USART2_UART_Init+0x58>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <MX_USART2_UART_Init+0x58>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001772:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <MX_USART2_UART_Init+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <MX_USART2_UART_Init+0x58>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <MX_USART2_UART_Init+0x58>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <MX_USART2_UART_Init+0x58>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <MX_USART2_UART_Init+0x58>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <MX_USART2_UART_Init+0x58>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_USART2_UART_Init+0x58>)
 8001798:	f006 fde6 	bl	8008368 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017a2:	f001 fae1 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000570 	.word	0x20000570
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017b8:	4b14      	ldr	r3, [pc, #80]	@ (800180c <MX_USART3_UART_Init+0x58>)
 80017ba:	4a15      	ldr	r2, [pc, #84]	@ (8001810 <MX_USART3_UART_Init+0x5c>)
 80017bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80017be:	4b13      	ldr	r3, [pc, #76]	@ (800180c <MX_USART3_UART_Init+0x58>)
 80017c0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80017c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <MX_USART3_UART_Init+0x58>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <MX_USART3_UART_Init+0x58>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <MX_USART3_UART_Init+0x58>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <MX_USART3_UART_Init+0x58>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <MX_USART3_UART_Init+0x58>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b09      	ldr	r3, [pc, #36]	@ (800180c <MX_USART3_UART_Init+0x58>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	@ (800180c <MX_USART3_UART_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <MX_USART3_UART_Init+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	@ (800180c <MX_USART3_UART_Init+0x58>)
 80017f8:	f006 fdb6 	bl	8008368 <HAL_UART_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001802:	f001 fab1 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200005f8 	.word	0x200005f8
 8001810:	40004800 	.word	0x40004800

08001814 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001818:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <MX_USB_PCD_Init+0x44>)
 800181a:	4a10      	ldr	r2, [pc, #64]	@ (800185c <MX_USB_PCD_Init+0x48>)
 800181c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <MX_USB_PCD_Init+0x44>)
 8001820:	2208      	movs	r2, #8
 8001822:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <MX_USB_PCD_Init+0x44>)
 8001826:	2202      	movs	r2, #2
 8001828:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <MX_USB_PCD_Init+0x44>)
 800182c:	2202      	movs	r2, #2
 800182e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001830:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <MX_USB_PCD_Init+0x44>)
 8001832:	2200      	movs	r2, #0
 8001834:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001836:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <MX_USB_PCD_Init+0x44>)
 8001838:	2200      	movs	r2, #0
 800183a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <MX_USB_PCD_Init+0x44>)
 800183e:	2200      	movs	r2, #0
 8001840:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_USB_PCD_Init+0x44>)
 8001844:	f002 fb10 	bl	8003e68 <HAL_PCD_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800184e:	f001 fa8b 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000680 	.word	0x20000680
 800185c:	40005c00 	.word	0x40005c00

08001860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	@ 0x30
 8001864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001876:	4b6b      	ldr	r3, [pc, #428]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	4a6a      	ldr	r2, [pc, #424]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 800187c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001880:	6153      	str	r3, [r2, #20]
 8001882:	4b68      	ldr	r3, [pc, #416]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	4b65      	ldr	r3, [pc, #404]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	4a64      	ldr	r2, [pc, #400]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 8001894:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001898:	6153      	str	r3, [r2, #20]
 800189a:	4b62      	ldr	r3, [pc, #392]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 80018ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018b0:	6153      	str	r3, [r2, #20]
 80018b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b59      	ldr	r3, [pc, #356]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a58      	ldr	r2, [pc, #352]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c8:	6153      	str	r3, [r2, #20]
 80018ca:	4b56      	ldr	r3, [pc, #344]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b53      	ldr	r3, [pc, #332]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4a52      	ldr	r2, [pc, #328]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018e0:	6153      	str	r3, [r2, #20]
 80018e2:	4b50      	ldr	r3, [pc, #320]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 80018f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018f8:	6153      	str	r3, [r2, #20]
 80018fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	4b47      	ldr	r3, [pc, #284]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a46      	ldr	r2, [pc, #280]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 800190c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b44      	ldr	r3, [pc, #272]	@ (8001a24 <MX_GPIO_Init+0x1c4>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2130      	movs	r1, #48	@ 0x30
 8001922:	4841      	ldr	r0, [pc, #260]	@ (8001a28 <MX_GPIO_Init+0x1c8>)
 8001924:	f002 fa6e 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f244 3101 	movw	r1, #17153	@ 0x4301
 800192e:	483f      	ldr	r0, [pc, #252]	@ (8001a2c <MX_GPIO_Init+0x1cc>)
 8001930:	f002 fa68 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800193a:	483d      	ldr	r0, [pc, #244]	@ (8001a30 <MX_GPIO_Init+0x1d0>)
 800193c:	f002 fa62 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	214e      	movs	r1, #78	@ 0x4e
 8001944:	483b      	ldr	r0, [pc, #236]	@ (8001a34 <MX_GPIO_Init+0x1d4>)
 8001946:	f002 fa5d 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001950:	4839      	ldr	r0, [pc, #228]	@ (8001a38 <MX_GPIO_Init+0x1d8>)
 8001952:	f002 fa57 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001956:	2330      	movs	r3, #48	@ 0x30
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	2301      	movs	r3, #1
 800195c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	4619      	mov	r1, r3
 800196c:	482e      	ldr	r0, [pc, #184]	@ (8001a28 <MX_GPIO_Init+0x1c8>)
 800196e:	f002 f8bf 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001972:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001978:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800197c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	4619      	mov	r1, r3
 8001988:	482b      	ldr	r0, [pc, #172]	@ (8001a38 <MX_GPIO_Init+0x1d8>)
 800198a:	f002 f8b1 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_8|GPIO_PIN_9;
 800198e:	f244 3301 	movw	r3, #17153	@ 0x4301
 8001992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	2301      	movs	r3, #1
 8001996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	4821      	ldr	r0, [pc, #132]	@ (8001a2c <MX_GPIO_Init+0x1cc>)
 80019a8:	f002 f8a2 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80019ac:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	481a      	ldr	r0, [pc, #104]	@ (8001a30 <MX_GPIO_Init+0x1d0>)
 80019c6:	f002 f893 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG2 PG3 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|USB_PowerSwitchOn_Pin;
 80019ca:	234e      	movs	r3, #78	@ 0x4e
 80019cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	4619      	mov	r1, r3
 80019e0:	4814      	ldr	r0, [pc, #80]	@ (8001a34 <MX_GPIO_Init+0x1d4>)
 80019e2:	f002 f885 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019e6:	2380      	movs	r3, #128	@ 0x80
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	480e      	ldr	r0, [pc, #56]	@ (8001a34 <MX_GPIO_Init+0x1d4>)
 80019fa:	f002 f879 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	4619      	mov	r1, r3
 8001a16:	4808      	ldr	r0, [pc, #32]	@ (8001a38 <MX_GPIO_Init+0x1d8>)
 8001a18:	f002 f86a 	bl	8003af0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a1c:	bf00      	nop
 8001a1e:	3730      	adds	r7, #48	@ 0x30
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	48001000 	.word	0x48001000
 8001a2c:	48000400 	.word	0x48000400
 8001a30:	48001400 	.word	0x48001400
 8001a34:	48001800 	.word	0x48001800
 8001a38:	48000800 	.word	0x48000800

08001a3c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//wo de
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a3c:	b5b0      	push	{r4, r5, r7, lr}
 8001a3e:	b08a      	sub	sp, #40	@ 0x28
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	6078      	str	r0, [r7, #4]
	//wo de:
    if (huart->Instance == UART5)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a9b      	ldr	r2, [pc, #620]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x27c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	f040 8100 	bne.w	8001c50 <HAL_UART_RxCpltCallback+0x214>
    {
//		reset_pid();

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001a50:	2101      	movs	r1, #1
 8001a52:	489a      	ldr	r0, [pc, #616]	@ (8001cbc <HAL_UART_RxCpltCallback+0x280>)
 8001a54:	f002 f9ee 	bl	8003e34 <HAL_GPIO_TogglePin>



		/* Process receive buffer */
		// Map buffer in size 11 to size 8 to process
		for (int i = 0; i < 8; i++) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
 8001a5c:	e00b      	b.n	8001a76 <HAL_UART_RxCpltCallback+0x3a>
			rx_data[i] = rx_data_11[i];
 8001a5e:	4a98      	ldr	r2, [pc, #608]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x284>)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	4413      	add	r3, r2
 8001a64:	7819      	ldrb	r1, [r3, #0]
 8001a66:	4a97      	ldr	r2, [pc, #604]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x288>)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	460a      	mov	r2, r1
 8001a6e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	3301      	adds	r3, #1
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	2b07      	cmp	r3, #7
 8001a7a:	ddf0      	ble.n	8001a5e <HAL_UART_RxCpltCallback+0x22>
		}

		// Copy upper 4 bits (index 0 to 3) to dir1
		for (int i = 0; i < 4; i++) {
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	e00b      	b.n	8001a9a <HAL_UART_RxCpltCallback+0x5e>
			dir1[i] = rx_data[i]; // '0' or '1'
 8001a82:	4a90      	ldr	r2, [pc, #576]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x288>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	4413      	add	r3, r2
 8001a88:	7819      	ldrb	r1, [r3, #0]
 8001a8a:	4a8f      	ldr	r2, [pc, #572]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x28c>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	4413      	add	r3, r2
 8001a90:	460a      	mov	r2, r1
 8001a92:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++) {
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	ddf0      	ble.n	8001a82 <HAL_UART_RxCpltCallback+0x46>
		}
		dir1[4] = '\0'; // Null terminator
 8001aa0:	4b89      	ldr	r3, [pc, #548]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x28c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	711a      	strb	r2, [r3, #4]

		// Copy lower 4 bits (index 4 to 7) to v1
		for (int i = 0; i < 4; i++) {
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_UART_RxCpltCallback+0x88>
			v1[i] = rx_data[i + 4]; // '0' or '1'
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	4a84      	ldr	r2, [pc, #528]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x288>)
 8001ab2:	5cd1      	ldrb	r1, [r2, r3]
 8001ab4:	4a85      	ldr	r2, [pc, #532]	@ (8001ccc <HAL_UART_RxCpltCallback+0x290>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	4413      	add	r3, r2
 8001aba:	460a      	mov	r2, r1
 8001abc:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++) {
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	ddf0      	ble.n	8001aac <HAL_UART_RxCpltCallback+0x70>
		}
		v1[4] = '\0'; // Null terminator
 8001aca:	4b80      	ldr	r3, [pc, #512]	@ (8001ccc <HAL_UART_RxCpltCallback+0x290>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	711a      	strb	r2, [r3, #4]

		HAL_UART_Transmit(&huart3, (uint8_t*) "Buffer:", 7, 10);
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	2207      	movs	r2, #7
 8001ad4:	497e      	ldr	r1, [pc, #504]	@ (8001cd0 <HAL_UART_RxCpltCallback+0x294>)
 8001ad6:	487f      	ldr	r0, [pc, #508]	@ (8001cd4 <HAL_UART_RxCpltCallback+0x298>)
 8001ad8:	f006 fc94 	bl	8008404 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, rx_data, 8, 10); ////
 8001adc:	230a      	movs	r3, #10
 8001ade:	2208      	movs	r2, #8
 8001ae0:	4978      	ldr	r1, [pc, #480]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x288>)
 8001ae2:	487c      	ldr	r0, [pc, #496]	@ (8001cd4 <HAL_UART_RxCpltCallback+0x298>)
 8001ae4:	f006 fc8e 	bl	8008404 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 3, 10);
 8001ae8:	230a      	movs	r3, #10
 8001aea:	2203      	movs	r2, #3
 8001aec:	497a      	ldr	r1, [pc, #488]	@ (8001cd8 <HAL_UART_RxCpltCallback+0x29c>)
 8001aee:	4879      	ldr	r0, [pc, #484]	@ (8001cd4 <HAL_UART_RxCpltCallback+0x298>)
 8001af0:	f006 fc88 	bl	8008404 <HAL_UART_Transmit>
//		HAL_UART_Transmit(&huart3, (uint8_t*) "v1:", 3, 10);
//		HAL_UART_Transmit(&huart3,  v1, strlen(v1), 10);
//		HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);

		// float v without sign
		if (strcmp(v1, "0000") == 0) {
 8001af4:	4979      	ldr	r1, [pc, #484]	@ (8001cdc <HAL_UART_RxCpltCallback+0x2a0>)
 8001af6:	4875      	ldr	r0, [pc, #468]	@ (8001ccc <HAL_UART_RxCpltCallback+0x290>)
 8001af8:	f7fe fb72 	bl	80001e0 <strcmp>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d104      	bne.n	8001b0c <HAL_UART_RxCpltCallback+0xd0>
			v_new = 0.0;
 8001b02:	4b77      	ldr	r3, [pc, #476]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e02a      	b.n	8001b62 <HAL_UART_RxCpltCallback+0x126>

//			HAL_UART_Transmit(&huart3, (uint8_t*) "v1=0000:", 8, 10);
//			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
		} else if (strcmp(v1, "0001") == 0) {
 8001b0c:	4975      	ldr	r1, [pc, #468]	@ (8001ce4 <HAL_UART_RxCpltCallback+0x2a8>)
 8001b0e:	486f      	ldr	r0, [pc, #444]	@ (8001ccc <HAL_UART_RxCpltCallback+0x290>)
 8001b10:	f7fe fb66 	bl	80001e0 <strcmp>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d103      	bne.n	8001b22 <HAL_UART_RxCpltCallback+0xe6>
			v_new = 0.1;
 8001b1a:	4b71      	ldr	r3, [pc, #452]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b1c:	4a72      	ldr	r2, [pc, #456]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x2ac>)
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	e01f      	b.n	8001b62 <HAL_UART_RxCpltCallback+0x126>
//
//			HAL_UART_Transmit(&huart3, (uint8_t*) "v1=0001:", 8, 10);
//			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
		} else if (strcmp(v1, "0010") == 0) {
 8001b22:	4972      	ldr	r1, [pc, #456]	@ (8001cec <HAL_UART_RxCpltCallback+0x2b0>)
 8001b24:	4869      	ldr	r0, [pc, #420]	@ (8001ccc <HAL_UART_RxCpltCallback+0x290>)
 8001b26:	f7fe fb5b 	bl	80001e0 <strcmp>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d103      	bne.n	8001b38 <HAL_UART_RxCpltCallback+0xfc>
			v_new = 0.2;
 8001b30:	4b6b      	ldr	r3, [pc, #428]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b32:	4a6f      	ldr	r2, [pc, #444]	@ (8001cf0 <HAL_UART_RxCpltCallback+0x2b4>)
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e014      	b.n	8001b62 <HAL_UART_RxCpltCallback+0x126>

//			HAL_UART_Transmit(&huart3, (uint8_t*) "v1=0010:", 8, 10);
//			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
		} else if (strcmp(v1, "0011") == 0) {
 8001b38:	496e      	ldr	r1, [pc, #440]	@ (8001cf4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001b3a:	4864      	ldr	r0, [pc, #400]	@ (8001ccc <HAL_UART_RxCpltCallback+0x290>)
 8001b3c:	f7fe fb50 	bl	80001e0 <strcmp>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d103      	bne.n	8001b4e <HAL_UART_RxCpltCallback+0x112>
			v_new = 0.3;
 8001b46:	4b66      	ldr	r3, [pc, #408]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b48:	4a6b      	ldr	r2, [pc, #428]	@ (8001cf8 <HAL_UART_RxCpltCallback+0x2bc>)
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e009      	b.n	8001b62 <HAL_UART_RxCpltCallback+0x126>

//			HAL_UART_Transmit(&huart3, (uint8_t*) "v1=0011:", 8, 10);
//			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
		} else if (strcmp(v1, "0100") == 0) {
 8001b4e:	496b      	ldr	r1, [pc, #428]	@ (8001cfc <HAL_UART_RxCpltCallback+0x2c0>)
 8001b50:	485e      	ldr	r0, [pc, #376]	@ (8001ccc <HAL_UART_RxCpltCallback+0x290>)
 8001b52:	f7fe fb45 	bl	80001e0 <strcmp>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <HAL_UART_RxCpltCallback+0x126>
			v_new = 0.4;
 8001b5c:	4b60      	ldr	r3, [pc, #384]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b5e:	4a68      	ldr	r2, [pc, #416]	@ (8001d00 <HAL_UART_RxCpltCallback+0x2c4>)
 8001b60:	601a      	str	r2, [r3, #0]
//			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
		}

		// Adding sign to float v
		// float w
		if (strcmp(dir1, "0001") == 0) {
 8001b62:	4960      	ldr	r1, [pc, #384]	@ (8001ce4 <HAL_UART_RxCpltCallback+0x2a8>)
 8001b64:	4858      	ldr	r0, [pc, #352]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x28c>)
 8001b66:	f7fe fb3b 	bl	80001e0 <strcmp>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10e      	bne.n	8001b8e <HAL_UART_RxCpltCallback+0x152>
			omega = 1 * v_new * 3;
 8001b70:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7e:	4b61      	ldr	r3, [pc, #388]	@ (8001d04 <HAL_UART_RxCpltCallback+0x2c8>)
 8001b80:	edc3 7a00 	vstr	s15, [r3]
			v_new = 1 * v_new;
 8001b84:	4b56      	ldr	r3, [pc, #344]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a55      	ldr	r2, [pc, #340]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e03a      	b.n	8001c04 <HAL_UART_RxCpltCallback+0x1c8>

//			HAL_UART_Transmit(&huart3, (uint8_t*) "dir1=0001:", 10, 10);
//			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
		} else if (strcmp(dir1, "0010") == 0) {
 8001b8e:	4957      	ldr	r1, [pc, #348]	@ (8001cec <HAL_UART_RxCpltCallback+0x2b0>)
 8001b90:	484d      	ldr	r0, [pc, #308]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x28c>)
 8001b92:	f7fe fb25 	bl	80001e0 <strcmp>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d110      	bne.n	8001bbe <HAL_UART_RxCpltCallback+0x182>
			omega = (-1) * v_new * 3;
 8001b9c:	4b50      	ldr	r3, [pc, #320]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b9e:	edd3 7a00 	vldr	s15, [r3]
 8001ba2:	eef1 7a67 	vneg.f32	s15, s15
 8001ba6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bae:	4b55      	ldr	r3, [pc, #340]	@ (8001d04 <HAL_UART_RxCpltCallback+0x2c8>)
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
			v_new = 1 * v_new;
 8001bb4:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a49      	ldr	r2, [pc, #292]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	e022      	b.n	8001c04 <HAL_UART_RxCpltCallback+0x1c8>
//
//			HAL_UART_Transmit(&huart3, (uint8_t*) "dir1=0010:", 10, 10);
//			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
		} else if (strcmp(dir1, "0011") == 0) {
 8001bbe:	494d      	ldr	r1, [pc, #308]	@ (8001cf4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001bc0:	4841      	ldr	r0, [pc, #260]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x28c>)
 8001bc2:	f7fe fb0d 	bl	80001e0 <strcmp>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10c      	bne.n	8001be6 <HAL_UART_RxCpltCallback+0x1aa>
			omega = 0;
 8001bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8001d04 <HAL_UART_RxCpltCallback+0x2c8>)
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
			v_new = (-1) * v_new;
 8001bd4:	4b42      	ldr	r3, [pc, #264]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	eef1 7a67 	vneg.f32	s15, s15
 8001bde:	4b40      	ldr	r3, [pc, #256]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001be0:	edc3 7a00 	vstr	s15, [r3]
 8001be4:	e00e      	b.n	8001c04 <HAL_UART_RxCpltCallback+0x1c8>

//			HAL_UART_Transmit(&huart3, (uint8_t*) "dir1=0011:", 10, 10);
//			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
		} else if (strcmp(dir1, "0000") == 0) {
 8001be6:	493d      	ldr	r1, [pc, #244]	@ (8001cdc <HAL_UART_RxCpltCallback+0x2a0>)
 8001be8:	4837      	ldr	r0, [pc, #220]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x28c>)
 8001bea:	f7fe faf9 	bl	80001e0 <strcmp>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <HAL_UART_RxCpltCallback+0x1c8>
			omega = 0;
 8001bf4:	4b43      	ldr	r3, [pc, #268]	@ (8001d04 <HAL_UART_RxCpltCallback+0x2c8>)
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
			v_new = 1 * v_new;
 8001bfc:	4b38      	ldr	r3, [pc, #224]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a37      	ldr	r2, [pc, #220]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001c02:	6013      	str	r3, [r2, #0]
		} else {
//			HAL_UART_Transmit(&huart3, (uint8_t*) "Error", 5, 10);
//			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
		}

		v_desired = v_new;
 8001c04:	4b36      	ldr	r3, [pc, #216]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a3f      	ldr	r2, [pc, #252]	@ (8001d08 <HAL_UART_RxCpltCallback+0x2cc>)
 8001c0a:	6013      	str	r3, [r2, #0]
		w_desired = omega;
 8001c0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d04 <HAL_UART_RxCpltCallback+0x2c8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a3e      	ldr	r2, [pc, #248]	@ (8001d0c <HAL_UART_RxCpltCallback+0x2d0>)
 8001c12:	6013      	str	r3, [r2, #0]
		sprintf(temp_str, "v: %+6.2f | w: %+6.2fd\r\n", v_desired, w_desired);
 8001c14:	4b3c      	ldr	r3, [pc, #240]	@ (8001d08 <HAL_UART_RxCpltCallback+0x2cc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fcad 	bl	8000578 <__aeabi_f2d>
 8001c1e:	4604      	mov	r4, r0
 8001c20:	460d      	mov	r5, r1
 8001c22:	4b3a      	ldr	r3, [pc, #232]	@ (8001d0c <HAL_UART_RxCpltCallback+0x2d0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fca6 	bl	8000578 <__aeabi_f2d>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	e9cd 2300 	strd	r2, r3, [sp]
 8001c34:	4622      	mov	r2, r4
 8001c36:	462b      	mov	r3, r5
 8001c38:	4935      	ldr	r1, [pc, #212]	@ (8001d10 <HAL_UART_RxCpltCallback+0x2d4>)
 8001c3a:	4836      	ldr	r0, [pc, #216]	@ (8001d14 <HAL_UART_RxCpltCallback+0x2d8>)
 8001c3c:	f00a fa28 	bl	800c090 <siprintf>
		log_to_uart(temp_str);
 8001c40:	4834      	ldr	r0, [pc, #208]	@ (8001d14 <HAL_UART_RxCpltCallback+0x2d8>)
 8001c42:	f001 f87b 	bl	8002d3c <log_to_uart>
//		HAL_UART_Transmit(&huart3, (uint8_t*) "\n\n", 2, 10);



		// Flag
		HAL_UART_Receive_IT(&huart5, rx_data_11, 11);
 8001c46:	220b      	movs	r2, #11
 8001c48:	491d      	ldr	r1, [pc, #116]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x284>)
 8001c4a:	4833      	ldr	r0, [pc, #204]	@ (8001d18 <HAL_UART_RxCpltCallback+0x2dc>)
 8001c4c:	f006 fc63 	bl	8008516 <HAL_UART_Receive_IT>
//			}
//		}
//	}


	if (huart->Instance == UART4) {
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a31      	ldr	r2, [pc, #196]	@ (8001d1c <HAL_UART_RxCpltCallback+0x2e0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	f040 819a 	bne.w	8001f90 <HAL_UART_RxCpltCallback+0x554>

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4817      	ldr	r0, [pc, #92]	@ (8001cbc <HAL_UART_RxCpltCallback+0x280>)
 8001c60:	f002 f8e8 	bl	8003e34 <HAL_GPIO_TogglePin>



		/* Process receive buffer */
		// Map buffer in size 11 to size 8 to process
		for (int i = 0; i < 8; i++) {
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	e00b      	b.n	8001c82 <HAL_UART_RxCpltCallback+0x246>
			rx_data[i] = rx_data_11[i];
 8001c6a:	4a15      	ldr	r2, [pc, #84]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x284>)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	7819      	ldrb	r1, [r3, #0]
 8001c72:	4a14      	ldr	r2, [pc, #80]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x288>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4413      	add	r3, r2
 8001c78:	460a      	mov	r2, r1
 8001c7a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b07      	cmp	r3, #7
 8001c86:	ddf0      	ble.n	8001c6a <HAL_UART_RxCpltCallback+0x22e>
		}

		// Copy upper 4 bits (index 0 to 3) to dir1
		for (int i = 0; i < 4; i++) {
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	e00b      	b.n	8001ca6 <HAL_UART_RxCpltCallback+0x26a>
			dir1[i] = rx_data[i]; // '0' or '1'
 8001c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x288>)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	7819      	ldrb	r1, [r3, #0]
 8001c96:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x28c>)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	460a      	mov	r2, r1
 8001c9e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++) {
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	ddf0      	ble.n	8001c8e <HAL_UART_RxCpltCallback+0x252>
		}
		dir1[4] = '\0'; // Null terminator
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x28c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	711a      	strb	r2, [r3, #4]

		// Copy lower 4 bits (index 4 to 7) to v1
		for (int i = 0; i < 4; i++) {
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	e03f      	b.n	8001d38 <HAL_UART_RxCpltCallback+0x2fc>
 8001cb8:	40005000 	.word	0x40005000
 8001cbc:	48000400 	.word	0x48000400
 8001cc0:	20000954 	.word	0x20000954
 8001cc4:	20000960 	.word	0x20000960
 8001cc8:	20000968 	.word	0x20000968
 8001ccc:	20000970 	.word	0x20000970
 8001cd0:	0800f930 	.word	0x0800f930
 8001cd4:	200005f8 	.word	0x200005f8
 8001cd8:	0800f938 	.word	0x0800f938
 8001cdc:	0800f93c 	.word	0x0800f93c
 8001ce0:	200009dc 	.word	0x200009dc
 8001ce4:	0800f944 	.word	0x0800f944
 8001ce8:	3dcccccd 	.word	0x3dcccccd
 8001cec:	0800f94c 	.word	0x0800f94c
 8001cf0:	3e4ccccd 	.word	0x3e4ccccd
 8001cf4:	0800f954 	.word	0x0800f954
 8001cf8:	3e99999a 	.word	0x3e99999a
 8001cfc:	0800f95c 	.word	0x0800f95c
 8001d00:	3ecccccd 	.word	0x3ecccccd
 8001d04:	200009e0 	.word	0x200009e0
 8001d08:	20000a50 	.word	0x20000a50
 8001d0c:	20000a54 	.word	0x20000a54
 8001d10:	0800f964 	.word	0x0800f964
 8001d14:	20000978 	.word	0x20000978
 8001d18:	20000460 	.word	0x20000460
 8001d1c:	40004c00 	.word	0x40004c00
			v1[i] = rx_data[i + 4]; // '0' or '1'
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	3304      	adds	r3, #4
 8001d24:	4a9c      	ldr	r2, [pc, #624]	@ (8001f98 <HAL_UART_RxCpltCallback+0x55c>)
 8001d26:	5cd1      	ldrb	r1, [r2, r3]
 8001d28:	4a9c      	ldr	r2, [pc, #624]	@ (8001f9c <HAL_UART_RxCpltCallback+0x560>)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	460a      	mov	r2, r1
 8001d30:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++) {
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3301      	adds	r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	ddf0      	ble.n	8001d20 <HAL_UART_RxCpltCallback+0x2e4>
		}
		v1[4] = '\0'; // Null terminator
 8001d3e:	4b97      	ldr	r3, [pc, #604]	@ (8001f9c <HAL_UART_RxCpltCallback+0x560>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	711a      	strb	r2, [r3, #4]

		HAL_UART_Transmit(&huart3, (uint8_t*) "Buffer:", 7, 10);
 8001d44:	230a      	movs	r3, #10
 8001d46:	2207      	movs	r2, #7
 8001d48:	4995      	ldr	r1, [pc, #596]	@ (8001fa0 <HAL_UART_RxCpltCallback+0x564>)
 8001d4a:	4896      	ldr	r0, [pc, #600]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001d4c:	f006 fb5a 	bl	8008404 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, rx_data, 8, 10); ////
 8001d50:	230a      	movs	r3, #10
 8001d52:	2208      	movs	r2, #8
 8001d54:	4990      	ldr	r1, [pc, #576]	@ (8001f98 <HAL_UART_RxCpltCallback+0x55c>)
 8001d56:	4893      	ldr	r0, [pc, #588]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001d58:	f006 fb54 	bl	8008404 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 3, 10);
 8001d5c:	230a      	movs	r3, #10
 8001d5e:	2203      	movs	r2, #3
 8001d60:	4991      	ldr	r1, [pc, #580]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x56c>)
 8001d62:	4890      	ldr	r0, [pc, #576]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001d64:	f006 fb4e 	bl	8008404 <HAL_UART_Transmit>
//		HAL_UART_Transmit(&huart3, (uint8_t*) "v1:", 3, 10);
//		HAL_UART_Transmit(&huart3,  v1, strlen(v1), 10);
//		HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);

		// float v without sign
		if (strcmp(v1, "0000") == 0) {
 8001d68:	4990      	ldr	r1, [pc, #576]	@ (8001fac <HAL_UART_RxCpltCallback+0x570>)
 8001d6a:	488c      	ldr	r0, [pc, #560]	@ (8001f9c <HAL_UART_RxCpltCallback+0x560>)
 8001d6c:	f7fe fa38 	bl	80001e0 <strcmp>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d110      	bne.n	8001d98 <HAL_UART_RxCpltCallback+0x35c>
			v_new = 0.0;
 8001d76:	4b8e      	ldr	r3, [pc, #568]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart3, (uint8_t*) "v1=0000:", 8, 10);
 8001d7e:	230a      	movs	r3, #10
 8001d80:	2208      	movs	r2, #8
 8001d82:	498c      	ldr	r1, [pc, #560]	@ (8001fb4 <HAL_UART_RxCpltCallback+0x578>)
 8001d84:	4887      	ldr	r0, [pc, #540]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001d86:	f006 fb3d 	bl	8008404 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
 8001d8a:	230a      	movs	r3, #10
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4986      	ldr	r1, [pc, #536]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x56c>)
 8001d90:	4884      	ldr	r0, [pc, #528]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001d92:	f006 fb37 	bl	8008404 <HAL_UART_Transmit>
 8001d96:	e068      	b.n	8001e6a <HAL_UART_RxCpltCallback+0x42e>
		} else if (strcmp(v1, "0001") == 0) {
 8001d98:	4987      	ldr	r1, [pc, #540]	@ (8001fb8 <HAL_UART_RxCpltCallback+0x57c>)
 8001d9a:	4880      	ldr	r0, [pc, #512]	@ (8001f9c <HAL_UART_RxCpltCallback+0x560>)
 8001d9c:	f7fe fa20 	bl	80001e0 <strcmp>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10f      	bne.n	8001dc6 <HAL_UART_RxCpltCallback+0x38a>
			v_new = 0.3;
 8001da6:	4b82      	ldr	r3, [pc, #520]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001da8:	4a84      	ldr	r2, [pc, #528]	@ (8001fbc <HAL_UART_RxCpltCallback+0x580>)
 8001daa:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart3, (uint8_t*) "v1=0001:", 8, 10);
 8001dac:	230a      	movs	r3, #10
 8001dae:	2208      	movs	r2, #8
 8001db0:	4983      	ldr	r1, [pc, #524]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x584>)
 8001db2:	487c      	ldr	r0, [pc, #496]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001db4:	f006 fb26 	bl	8008404 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
 8001db8:	230a      	movs	r3, #10
 8001dba:	2202      	movs	r2, #2
 8001dbc:	497a      	ldr	r1, [pc, #488]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x56c>)
 8001dbe:	4879      	ldr	r0, [pc, #484]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001dc0:	f006 fb20 	bl	8008404 <HAL_UART_Transmit>
 8001dc4:	e051      	b.n	8001e6a <HAL_UART_RxCpltCallback+0x42e>
		} else if (strcmp(v1, "0010") == 0) {
 8001dc6:	497f      	ldr	r1, [pc, #508]	@ (8001fc4 <HAL_UART_RxCpltCallback+0x588>)
 8001dc8:	4874      	ldr	r0, [pc, #464]	@ (8001f9c <HAL_UART_RxCpltCallback+0x560>)
 8001dca:	f7fe fa09 	bl	80001e0 <strcmp>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10f      	bne.n	8001df4 <HAL_UART_RxCpltCallback+0x3b8>
			v_new = 0.6;
 8001dd4:	4b76      	ldr	r3, [pc, #472]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001dd6:	4a7c      	ldr	r2, [pc, #496]	@ (8001fc8 <HAL_UART_RxCpltCallback+0x58c>)
 8001dd8:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart3, (uint8_t*) "v1=0010:", 8, 10);
 8001dda:	230a      	movs	r3, #10
 8001ddc:	2208      	movs	r2, #8
 8001dde:	497b      	ldr	r1, [pc, #492]	@ (8001fcc <HAL_UART_RxCpltCallback+0x590>)
 8001de0:	4870      	ldr	r0, [pc, #448]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001de2:	f006 fb0f 	bl	8008404 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
 8001de6:	230a      	movs	r3, #10
 8001de8:	2202      	movs	r2, #2
 8001dea:	496f      	ldr	r1, [pc, #444]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x56c>)
 8001dec:	486d      	ldr	r0, [pc, #436]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001dee:	f006 fb09 	bl	8008404 <HAL_UART_Transmit>
 8001df2:	e03a      	b.n	8001e6a <HAL_UART_RxCpltCallback+0x42e>
		} else if (strcmp(v1, "0011") == 0) {
 8001df4:	4976      	ldr	r1, [pc, #472]	@ (8001fd0 <HAL_UART_RxCpltCallback+0x594>)
 8001df6:	4869      	ldr	r0, [pc, #420]	@ (8001f9c <HAL_UART_RxCpltCallback+0x560>)
 8001df8:	f7fe f9f2 	bl	80001e0 <strcmp>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10f      	bne.n	8001e22 <HAL_UART_RxCpltCallback+0x3e6>
			v_new = 0.9;
 8001e02:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001e04:	4a73      	ldr	r2, [pc, #460]	@ (8001fd4 <HAL_UART_RxCpltCallback+0x598>)
 8001e06:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart3, (uint8_t*) "v1=0011:", 8, 10);
 8001e08:	230a      	movs	r3, #10
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	4972      	ldr	r1, [pc, #456]	@ (8001fd8 <HAL_UART_RxCpltCallback+0x59c>)
 8001e0e:	4865      	ldr	r0, [pc, #404]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001e10:	f006 faf8 	bl	8008404 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
 8001e14:	230a      	movs	r3, #10
 8001e16:	2202      	movs	r2, #2
 8001e18:	4963      	ldr	r1, [pc, #396]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x56c>)
 8001e1a:	4862      	ldr	r0, [pc, #392]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001e1c:	f006 faf2 	bl	8008404 <HAL_UART_Transmit>
 8001e20:	e023      	b.n	8001e6a <HAL_UART_RxCpltCallback+0x42e>
		} else if (strcmp(v1, "0100") == 0) {
 8001e22:	496e      	ldr	r1, [pc, #440]	@ (8001fdc <HAL_UART_RxCpltCallback+0x5a0>)
 8001e24:	485d      	ldr	r0, [pc, #372]	@ (8001f9c <HAL_UART_RxCpltCallback+0x560>)
 8001e26:	f7fe f9db 	bl	80001e0 <strcmp>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d110      	bne.n	8001e52 <HAL_UART_RxCpltCallback+0x416>
			v_new = 1.0;
 8001e30:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001e32:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001e36:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart3, (uint8_t*) "v1=0100:", 8, 10);
 8001e38:	230a      	movs	r3, #10
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	4968      	ldr	r1, [pc, #416]	@ (8001fe0 <HAL_UART_RxCpltCallback+0x5a4>)
 8001e3e:	4859      	ldr	r0, [pc, #356]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001e40:	f006 fae0 	bl	8008404 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
 8001e44:	230a      	movs	r3, #10
 8001e46:	2202      	movs	r2, #2
 8001e48:	4957      	ldr	r1, [pc, #348]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x56c>)
 8001e4a:	4856      	ldr	r0, [pc, #344]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001e4c:	f006 fada 	bl	8008404 <HAL_UART_Transmit>
 8001e50:	e00b      	b.n	8001e6a <HAL_UART_RxCpltCallback+0x42e>
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*) "Error", 5, 10);
 8001e52:	230a      	movs	r3, #10
 8001e54:	2205      	movs	r2, #5
 8001e56:	4963      	ldr	r1, [pc, #396]	@ (8001fe4 <HAL_UART_RxCpltCallback+0x5a8>)
 8001e58:	4852      	ldr	r0, [pc, #328]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001e5a:	f006 fad3 	bl	8008404 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
 8001e5e:	230a      	movs	r3, #10
 8001e60:	2202      	movs	r2, #2
 8001e62:	4951      	ldr	r1, [pc, #324]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x56c>)
 8001e64:	484f      	ldr	r0, [pc, #316]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001e66:	f006 facd 	bl	8008404 <HAL_UART_Transmit>
		}

		// Adding sign to float v
		// float w
		if (strcmp(dir1, "0001") == 0) {
 8001e6a:	4953      	ldr	r1, [pc, #332]	@ (8001fb8 <HAL_UART_RxCpltCallback+0x57c>)
 8001e6c:	485e      	ldr	r0, [pc, #376]	@ (8001fe8 <HAL_UART_RxCpltCallback+0x5ac>)
 8001e6e:	f7fe f9b7 	bl	80001e0 <strcmp>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d114      	bne.n	8001ea2 <HAL_UART_RxCpltCallback+0x466>
			omega = 1 * v_new;
 8001e78:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a5b      	ldr	r2, [pc, #364]	@ (8001fec <HAL_UART_RxCpltCallback+0x5b0>)
 8001e7e:	6013      	str	r3, [r2, #0]
			v_new = 1 * v_new;
 8001e80:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a4a      	ldr	r2, [pc, #296]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001e86:	6013      	str	r3, [r2, #0]

			HAL_UART_Transmit(&huart3, (uint8_t*) "dir1=0001:", 10, 10);
 8001e88:	230a      	movs	r3, #10
 8001e8a:	220a      	movs	r2, #10
 8001e8c:	4958      	ldr	r1, [pc, #352]	@ (8001ff0 <HAL_UART_RxCpltCallback+0x5b4>)
 8001e8e:	4845      	ldr	r0, [pc, #276]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001e90:	f006 fab8 	bl	8008404 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
 8001e94:	230a      	movs	r3, #10
 8001e96:	2202      	movs	r2, #2
 8001e98:	4943      	ldr	r1, [pc, #268]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x56c>)
 8001e9a:	4842      	ldr	r0, [pc, #264]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001e9c:	f006 fab2 	bl	8008404 <HAL_UART_Transmit>
 8001ea0:	e063      	b.n	8001f6a <HAL_UART_RxCpltCallback+0x52e>
		} else if (strcmp(dir1, "0010") == 0) {
 8001ea2:	4948      	ldr	r1, [pc, #288]	@ (8001fc4 <HAL_UART_RxCpltCallback+0x588>)
 8001ea4:	4850      	ldr	r0, [pc, #320]	@ (8001fe8 <HAL_UART_RxCpltCallback+0x5ac>)
 8001ea6:	f7fe f99b 	bl	80001e0 <strcmp>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d118      	bne.n	8001ee2 <HAL_UART_RxCpltCallback+0x4a6>
			omega = (-1) * v_new;
 8001eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	eef1 7a67 	vneg.f32	s15, s15
 8001eba:	4b4c      	ldr	r3, [pc, #304]	@ (8001fec <HAL_UART_RxCpltCallback+0x5b0>)
 8001ebc:	edc3 7a00 	vstr	s15, [r3]
			v_new = 1 * v_new;
 8001ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a3a      	ldr	r2, [pc, #232]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001ec6:	6013      	str	r3, [r2, #0]

			HAL_UART_Transmit(&huart3, (uint8_t*) "dir1=0010:", 10, 10);
 8001ec8:	230a      	movs	r3, #10
 8001eca:	220a      	movs	r2, #10
 8001ecc:	4949      	ldr	r1, [pc, #292]	@ (8001ff4 <HAL_UART_RxCpltCallback+0x5b8>)
 8001ece:	4835      	ldr	r0, [pc, #212]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001ed0:	f006 fa98 	bl	8008404 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
 8001ed4:	230a      	movs	r3, #10
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	4933      	ldr	r1, [pc, #204]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x56c>)
 8001eda:	4832      	ldr	r0, [pc, #200]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001edc:	f006 fa92 	bl	8008404 <HAL_UART_Transmit>
 8001ee0:	e043      	b.n	8001f6a <HAL_UART_RxCpltCallback+0x52e>
		} else if (strcmp(dir1, "0011") == 0) {
 8001ee2:	493b      	ldr	r1, [pc, #236]	@ (8001fd0 <HAL_UART_RxCpltCallback+0x594>)
 8001ee4:	4840      	ldr	r0, [pc, #256]	@ (8001fe8 <HAL_UART_RxCpltCallback+0x5ac>)
 8001ee6:	f7fe f97b 	bl	80001e0 <strcmp>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d114      	bne.n	8001f1a <HAL_UART_RxCpltCallback+0x4de>
			omega = 0;
 8001ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fec <HAL_UART_RxCpltCallback+0x5b0>)
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
			v_new = 0;
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart3, (uint8_t*) "dir1=0011:", 10, 10);
 8001f00:	230a      	movs	r3, #10
 8001f02:	220a      	movs	r2, #10
 8001f04:	493c      	ldr	r1, [pc, #240]	@ (8001ff8 <HAL_UART_RxCpltCallback+0x5bc>)
 8001f06:	4827      	ldr	r0, [pc, #156]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001f08:	f006 fa7c 	bl	8008404 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
 8001f0c:	230a      	movs	r3, #10
 8001f0e:	2202      	movs	r2, #2
 8001f10:	4925      	ldr	r1, [pc, #148]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x56c>)
 8001f12:	4824      	ldr	r0, [pc, #144]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001f14:	f006 fa76 	bl	8008404 <HAL_UART_Transmit>
 8001f18:	e027      	b.n	8001f6a <HAL_UART_RxCpltCallback+0x52e>
		} else if (strcmp(dir1, "0000") == 0) {
 8001f1a:	4924      	ldr	r1, [pc, #144]	@ (8001fac <HAL_UART_RxCpltCallback+0x570>)
 8001f1c:	4832      	ldr	r0, [pc, #200]	@ (8001fe8 <HAL_UART_RxCpltCallback+0x5ac>)
 8001f1e:	f7fe f95f 	bl	80001e0 <strcmp>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d114      	bne.n	8001f52 <HAL_UART_RxCpltCallback+0x516>
			omega = 0;
 8001f28:	4b30      	ldr	r3, [pc, #192]	@ (8001fec <HAL_UART_RxCpltCallback+0x5b0>)
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
			v_new = 1 * v_new;
 8001f30:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001f36:	6013      	str	r3, [r2, #0]

			HAL_UART_Transmit(&huart3, (uint8_t*) "dir1=0000:", 10, 10);
 8001f38:	230a      	movs	r3, #10
 8001f3a:	220a      	movs	r2, #10
 8001f3c:	492f      	ldr	r1, [pc, #188]	@ (8001ffc <HAL_UART_RxCpltCallback+0x5c0>)
 8001f3e:	4819      	ldr	r0, [pc, #100]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001f40:	f006 fa60 	bl	8008404 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
 8001f44:	230a      	movs	r3, #10
 8001f46:	2202      	movs	r2, #2
 8001f48:	4917      	ldr	r1, [pc, #92]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x56c>)
 8001f4a:	4816      	ldr	r0, [pc, #88]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001f4c:	f006 fa5a 	bl	8008404 <HAL_UART_Transmit>
 8001f50:	e00b      	b.n	8001f6a <HAL_UART_RxCpltCallback+0x52e>
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*) "Error", 5, 10);
 8001f52:	230a      	movs	r3, #10
 8001f54:	2205      	movs	r2, #5
 8001f56:	4923      	ldr	r1, [pc, #140]	@ (8001fe4 <HAL_UART_RxCpltCallback+0x5a8>)
 8001f58:	4812      	ldr	r0, [pc, #72]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001f5a:	f006 fa53 	bl	8008404 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 10);
 8001f5e:	230a      	movs	r3, #10
 8001f60:	2202      	movs	r2, #2
 8001f62:	4911      	ldr	r1, [pc, #68]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x56c>)
 8001f64:	480f      	ldr	r0, [pc, #60]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001f66:	f006 fa4d 	bl	8008404 <HAL_UART_Transmit>
		}

		v_desired = v_new;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x574>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a24      	ldr	r2, [pc, #144]	@ (8002000 <HAL_UART_RxCpltCallback+0x5c4>)
 8001f70:	6013      	str	r3, [r2, #0]
		w_desired = omega;
 8001f72:	4b1e      	ldr	r3, [pc, #120]	@ (8001fec <HAL_UART_RxCpltCallback+0x5b0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a23      	ldr	r2, [pc, #140]	@ (8002004 <HAL_UART_RxCpltCallback+0x5c8>)
 8001f78:	6013      	str	r3, [r2, #0]

		HAL_UART_Transmit(&huart3, (uint8_t*) "\n\n", 2, 10);
 8001f7a:	230a      	movs	r3, #10
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	4922      	ldr	r1, [pc, #136]	@ (8002008 <HAL_UART_RxCpltCallback+0x5cc>)
 8001f80:	4808      	ldr	r0, [pc, #32]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x568>)
 8001f82:	f006 fa3f 	bl	8008404 <HAL_UART_Transmit>



		// Flag
		HAL_UART_Receive_IT(&huart4, rx_data_11, 11);
 8001f86:	220b      	movs	r2, #11
 8001f88:	4920      	ldr	r1, [pc, #128]	@ (800200c <HAL_UART_RxCpltCallback+0x5d0>)
 8001f8a:	4821      	ldr	r0, [pc, #132]	@ (8002010 <HAL_UART_RxCpltCallback+0x5d4>)
 8001f8c:	f006 fac3 	bl	8008516 <HAL_UART_Receive_IT>



    //HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
	//HAL_UART_Receive_IT(&huart4, &rxChar, 1);  // re-arm
}
 8001f90:	bf00      	nop
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bdb0      	pop	{r4, r5, r7, pc}
 8001f98:	20000960 	.word	0x20000960
 8001f9c:	20000970 	.word	0x20000970
 8001fa0:	0800f930 	.word	0x0800f930
 8001fa4:	200005f8 	.word	0x200005f8
 8001fa8:	0800f938 	.word	0x0800f938
 8001fac:	0800f93c 	.word	0x0800f93c
 8001fb0:	200009dc 	.word	0x200009dc
 8001fb4:	0800f980 	.word	0x0800f980
 8001fb8:	0800f944 	.word	0x0800f944
 8001fbc:	3e99999a 	.word	0x3e99999a
 8001fc0:	0800f98c 	.word	0x0800f98c
 8001fc4:	0800f94c 	.word	0x0800f94c
 8001fc8:	3f19999a 	.word	0x3f19999a
 8001fcc:	0800f998 	.word	0x0800f998
 8001fd0:	0800f954 	.word	0x0800f954
 8001fd4:	3f666666 	.word	0x3f666666
 8001fd8:	0800f9a4 	.word	0x0800f9a4
 8001fdc:	0800f95c 	.word	0x0800f95c
 8001fe0:	0800f9b0 	.word	0x0800f9b0
 8001fe4:	0800f9bc 	.word	0x0800f9bc
 8001fe8:	20000968 	.word	0x20000968
 8001fec:	200009e0 	.word	0x200009e0
 8001ff0:	0800f9c4 	.word	0x0800f9c4
 8001ff4:	0800f9d0 	.word	0x0800f9d0
 8001ff8:	0800f9dc 	.word	0x0800f9dc
 8001ffc:	0800f9e8 	.word	0x0800f9e8
 8002000:	20000a50 	.word	0x20000a50
 8002004:	20000a54 	.word	0x20000a54
 8002008:	0800f9f4 	.word	0x0800f9f4
 800200c:	20000954 	.word	0x20000954
 8002010:	200003d8 	.word	0x200003d8

08002014 <HAL_TIM_PeriodElapsedCallback>:


// LZR de
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) {
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1a      	ldr	r2, [pc, #104]	@ (800208c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d12e      	bne.n	8002084 <HAL_TIM_PeriodElapsedCallback+0x70>
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		float time_gap = (float) (HAL_GetTick() - last_interrupt_time) / 1000.0;
 8002026:	f001 fbc9 	bl	80037bc <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	4b18      	ldr	r3, [pc, #96]	@ (8002090 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	ee07 3a90 	vmov	s15, r3
 8002036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800203a:	ee17 0a90 	vmov	r0, s15
 800203e:	f7fe fa9b 	bl	8000578 <__aeabi_f2d>
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002048:	f7fe fc18 	bl	800087c <__aeabi_ddiv>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	f7fe fde0 	bl	8000c18 <__aeabi_d2f>
 8002058:	4603      	mov	r3, r0
 800205a:	60fb      	str	r3, [r7, #12]
		if (time_gap < EPSILON) {
 800205c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002098 <HAL_TIM_PeriodElapsedCallback+0x84>
 8002060:	edd7 7a03 	vldr	s15, [r7, #12]
 8002064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	d501      	bpl.n	8002072 <HAL_TIM_PeriodElapsedCallback+0x5e>
			time_gap = EPSILON;
 800206e:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002070:	60fb      	str	r3, [r7, #12]
		}

		last_interrupt_time = HAL_GetTick();
 8002072:	f001 fba3 	bl	80037bc <HAL_GetTick>
 8002076:	4603      	mov	r3, r0
 8002078:	4a05      	ldr	r2, [pc, #20]	@ (8002090 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800207a:	6013      	str	r3, [r2, #0]
		compute_control(time_gap);
 800207c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002080:	f000 f938 	bl	80022f4 <compute_control>
//		}
//		if (duty_cycle_lb > TIM2_PRD) {
//			duty_cycle_lb = TIM2_PRD;
//		}
	}
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40014400 	.word	0x40014400
 8002090:	200009e4 	.word	0x200009e4
 8002094:	408f4000 	.word	0x408f4000
 8002098:	3a83126f 	.word	0x3a83126f
 800209c:	3a83126f 	.word	0x3a83126f

080020a0 <pwm_mapping>:

int pwm_mapping(int duty_cycle) {
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
//	if(duty_cycle < PWM_MIN) {
//		return PWM_MIN;
//	}
	return (int) ((float) duty_cycle / (float) TIM2_PRD
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020b2:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80020f4 <pwm_mapping+0x54>
 80020b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			* (float) (TIM2_PRD - PWM_MIN) + (float) PWM_MIN);
 80020be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020c2:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80020f8 <pwm_mapping+0x58>
 80020d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020dc:	ee77 7a27 	vadd.f32	s15, s14, s15
	return (int) ((float) duty_cycle / (float) TIM2_PRD
 80020e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020e4:	ee17 3a90 	vmov	r3, s15
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	000003e7 	.word	0x000003e7
 80020f8:	00000258 	.word	0x00000258

080020fc <motor_control>:

void motor_control(int motor, int control, float v_desired) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_cycle = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
	if (fabs(v_desired) > V_DEAD_BAND) {
 800210e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002112:	eef0 7ae7 	vabs.f32	s15, s15
 8002116:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002200 <motor_control+0x104>
 800211a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002122:	dd29      	ble.n	8002178 <motor_control+0x7c>
		if (control > 0) {
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	dd1e      	ble.n	8002168 <motor_control+0x6c>
			duty_cycle = control;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	617b      	str	r3, [r7, #20]
			if (v_desired > 0) {
 800212e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213a:	dd0a      	ble.n	8002152 <motor_control+0x56>
				set_direction(motor, FORWARD);
 800213c:	2301      	movs	r3, #1
 800213e:	4619      	mov	r1, r3
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f86b 	bl	800221c <set_direction>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002146:	2201      	movs	r2, #1
 8002148:	2101      	movs	r1, #1
 800214a:	482e      	ldr	r0, [pc, #184]	@ (8002204 <motor_control+0x108>)
 800214c:	f001 fe5a 	bl	8003e04 <HAL_GPIO_WritePin>
 8002150:	e017      	b.n	8002182 <motor_control+0x86>
			} else {
				set_direction(motor, BACKWARD);
 8002152:	2302      	movs	r3, #2
 8002154:	4619      	mov	r1, r3
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f860 	bl	800221c <set_direction>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800215c:	2200      	movs	r2, #0
 800215e:	2101      	movs	r1, #1
 8002160:	4828      	ldr	r0, [pc, #160]	@ (8002204 <motor_control+0x108>)
 8002162:	f001 fe4f 	bl	8003e04 <HAL_GPIO_WritePin>
 8002166:	e00c      	b.n	8002182 <motor_control+0x86>
			}
		} else {
			duty_cycle = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
			set_direction(motor, BREAK);
 800216c:	2303      	movs	r3, #3
 800216e:	4619      	mov	r1, r3
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f853 	bl	800221c <set_direction>
 8002176:	e004      	b.n	8002182 <motor_control+0x86>
		}
	} else {
		set_direction(motor, BREAK);
 8002178:	2303      	movs	r3, #3
 800217a:	4619      	mov	r1, r3
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 f84d 	bl	800221c <set_direction>
	}

	if (duty_cycle > TIM2_PRD) {
 8002182:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	4293      	cmp	r3, r2
 800218a:	dd02      	ble.n	8002192 <motor_control+0x96>
		duty_cycle = TIM2_PRD;
 800218c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002190:	617b      	str	r3, [r7, #20]
	}

	duty_cycle = pwm_mapping(duty_cycle);
 8002192:	6978      	ldr	r0, [r7, #20]
 8002194:	f7ff ff84 	bl	80020a0 <pwm_mapping>
 8002198:	6178      	str	r0, [r7, #20]
	if (motor == LB) {
 800219a:	2200      	movs	r2, #0
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4293      	cmp	r3, r2
 80021a0:	d107      	bne.n	80021b2 <motor_control+0xb6>
		duty_cycle_lb = duty_cycle;
 80021a2:	4a19      	ldr	r2, [pc, #100]	@ (8002208 <motor_control+0x10c>)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 80021a8:	4b18      	ldr	r3, [pc, #96]	@ (800220c <motor_control+0x110>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	else if (motor == RF) {
		duty_cycle_rf = duty_cycle;
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);

	}
}
 80021b0:	e022      	b.n	80021f8 <motor_control+0xfc>
	else if (motor == RB) {
 80021b2:	2201      	movs	r2, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d107      	bne.n	80021ca <motor_control+0xce>
		duty_cycle_rb = duty_cycle;
 80021ba:	4a15      	ldr	r2, [pc, #84]	@ (8002210 <motor_control+0x114>)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycle);
 80021c0:	4b12      	ldr	r3, [pc, #72]	@ (800220c <motor_control+0x110>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80021c8:	e016      	b.n	80021f8 <motor_control+0xfc>
	else if (motor == LF) {
 80021ca:	2202      	movs	r2, #2
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d107      	bne.n	80021e2 <motor_control+0xe6>
		duty_cycle_lf = duty_cycle;
 80021d2:	4a10      	ldr	r2, [pc, #64]	@ (8002214 <motor_control+0x118>)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 80021d8:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <motor_control+0x110>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021e0:	e00a      	b.n	80021f8 <motor_control+0xfc>
	else if (motor == RF) {
 80021e2:	2203      	movs	r2, #3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d106      	bne.n	80021f8 <motor_control+0xfc>
		duty_cycle_rf = duty_cycle;
 80021ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002218 <motor_control+0x11c>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <motor_control+0x110>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80021f8:	bf00      	nop
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	3d4ccccd 	.word	0x3d4ccccd
 8002204:	48000400 	.word	0x48000400
 8002208:	200009e8 	.word	0x200009e8
 800220c:	2000025c 	.word	0x2000025c
 8002210:	200009ec 	.word	0x200009ec
 8002214:	200009f0 	.word	0x200009f0
 8002218:	200009f4 	.word	0x200009f4

0800221c <set_direction>:

void set_direction(int motor, int direction) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	if (motor == LB){
 8002226:	2200      	movs	r2, #0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4293      	cmp	r3, r2
 800222c:	d114      	bne.n	8002258 <set_direction+0x3c>
		if (direction == FORWARD) {
 800222e:	2201      	movs	r2, #1
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	4293      	cmp	r3, r2
 8002234:	d102      	bne.n	800223c <set_direction+0x20>
			lb_forward();
 8002236:	f7fe fde3 	bl	8000e00 <lb_forward>
		}
		else if (direction == BREAK) {
			rf_stop();
		}
	}
}
 800223a:	e057      	b.n	80022ec <set_direction+0xd0>
		else if (direction == BACKWARD) {
 800223c:	2202      	movs	r2, #2
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	4293      	cmp	r3, r2
 8002242:	d102      	bne.n	800224a <set_direction+0x2e>
			lb_backward();
 8002244:	f7fe fdee 	bl	8000e24 <lb_backward>
}
 8002248:	e050      	b.n	80022ec <set_direction+0xd0>
		else if (direction == BREAK) {
 800224a:	2203      	movs	r2, #3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4293      	cmp	r3, r2
 8002250:	d14c      	bne.n	80022ec <set_direction+0xd0>
			lb_stop();
 8002252:	f7fe fdf9 	bl	8000e48 <lb_stop>
}
 8002256:	e049      	b.n	80022ec <set_direction+0xd0>
	else if (motor == RB) {
 8002258:	2201      	movs	r2, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4293      	cmp	r3, r2
 800225e:	d114      	bne.n	800228a <set_direction+0x6e>
		if (direction == FORWARD) {
 8002260:	2201      	movs	r2, #1
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	4293      	cmp	r3, r2
 8002266:	d102      	bne.n	800226e <set_direction+0x52>
			rb_forward();
 8002268:	f7fe fe00 	bl	8000e6c <rb_forward>
}
 800226c:	e03e      	b.n	80022ec <set_direction+0xd0>
		else if (direction == BACKWARD) {
 800226e:	2202      	movs	r2, #2
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	4293      	cmp	r3, r2
 8002274:	d102      	bne.n	800227c <set_direction+0x60>
			rb_backward();
 8002276:	f7fe fe09 	bl	8000e8c <rb_backward>
}
 800227a:	e037      	b.n	80022ec <set_direction+0xd0>
		else if (direction == BREAK) {
 800227c:	2203      	movs	r2, #3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	4293      	cmp	r3, r2
 8002282:	d133      	bne.n	80022ec <set_direction+0xd0>
			rb_stop();
 8002284:	f7fe fe12 	bl	8000eac <rb_stop>
}
 8002288:	e030      	b.n	80022ec <set_direction+0xd0>
	else if (motor == LF) {
 800228a:	2202      	movs	r2, #2
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4293      	cmp	r3, r2
 8002290:	d114      	bne.n	80022bc <set_direction+0xa0>
		if (direction == FORWARD) {
 8002292:	2201      	movs	r2, #1
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4293      	cmp	r3, r2
 8002298:	d102      	bne.n	80022a0 <set_direction+0x84>
			lf_forward();
 800229a:	f7fe fe17 	bl	8000ecc <lf_forward>
}
 800229e:	e025      	b.n	80022ec <set_direction+0xd0>
		} else if (direction == BACKWARD) {
 80022a0:	2202      	movs	r2, #2
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d102      	bne.n	80022ae <set_direction+0x92>
			lf_backward();
 80022a8:	f7fe fe22 	bl	8000ef0 <lf_backward>
}
 80022ac:	e01e      	b.n	80022ec <set_direction+0xd0>
		} else if (direction == BREAK) {
 80022ae:	2203      	movs	r2, #3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d11a      	bne.n	80022ec <set_direction+0xd0>
			lf_stop();
 80022b6:	f7fe fe2d 	bl	8000f14 <lf_stop>
}
 80022ba:	e017      	b.n	80022ec <set_direction+0xd0>
	else if (motor == RF) {
 80022bc:	2203      	movs	r2, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d113      	bne.n	80022ec <set_direction+0xd0>
		if (direction == FORWARD) {
 80022c4:	2201      	movs	r2, #1
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d102      	bne.n	80022d2 <set_direction+0xb6>
			rf_forward();
 80022cc:	f7fe fe34 	bl	8000f38 <rf_forward>
}
 80022d0:	e00c      	b.n	80022ec <set_direction+0xd0>
		else if (direction == BACKWARD) {
 80022d2:	2202      	movs	r2, #2
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d102      	bne.n	80022e0 <set_direction+0xc4>
			rf_backward();
 80022da:	f7fe fe3d 	bl	8000f58 <rf_backward>
}
 80022de:	e005      	b.n	80022ec <set_direction+0xd0>
		else if (direction == BREAK) {
 80022e0:	2203      	movs	r2, #3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <set_direction+0xd0>
			rf_stop();
 80022e8:	f7fe fe46 	bl	8000f78 <rf_stop>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <compute_control>:
	lb_previous_err = 0.0;
	rb_integral = 0.0;
	rb_previous_err = 0.0;
}

void compute_control(float time_gap) {
 80022f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f8:	b0dd      	sub	sp, #372	@ 0x174
 80022fa:	af10      	add	r7, sp, #64	@ 0x40
 80022fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002300:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002304:	ed83 0a00 	vstr	s0, [r3]
	int lb_control = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	int rb_control = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	int lf_control = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	int rf_control = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	const float Kp = 1000, Ki=7500.0; //Ki = 7500;
 8002320:	4be1      	ldr	r3, [pc, #900]	@ (80026a8 <compute_control+0x3b4>)
 8002322:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002326:	4be1      	ldr	r3, [pc, #900]	@ (80026ac <compute_control+0x3b8>)
 8002328:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	const float Kd = 0.0;
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	if (fabs(v_desired) > V_MAX) {
 8002334:	4bde      	ldr	r3, [pc, #888]	@ (80026b0 <compute_control+0x3bc>)
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	eef0 7ae7 	vabs.f32	s15, s15
 800233e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234a:	dd2b      	ble.n	80023a4 <compute_control+0xb0>
 		v_desired = V_MAX * (v_desired / fabs(v_desired));
 800234c:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe f911 	bl	8000578 <__aeabi_f2d>
 8002356:	4604      	mov	r4, r0
 8002358:	460d      	mov	r5, r1
 800235a:	4bd5      	ldr	r3, [pc, #852]	@ (80026b0 <compute_control+0x3bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe f90a 	bl	8000578 <__aeabi_f2d>
 8002364:	4680      	mov	r8, r0
 8002366:	4689      	mov	r9, r1
 8002368:	4bd1      	ldr	r3, [pc, #836]	@ (80026b0 <compute_control+0x3bc>)
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	eef0 7ae7 	vabs.f32	s15, s15
 8002372:	ee17 0a90 	vmov	r0, s15
 8002376:	f7fe f8ff 	bl	8000578 <__aeabi_f2d>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4640      	mov	r0, r8
 8002380:	4649      	mov	r1, r9
 8002382:	f7fe fa7b 	bl	800087c <__aeabi_ddiv>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4620      	mov	r0, r4
 800238c:	4629      	mov	r1, r5
 800238e:	f7fe f94b 	bl	8000628 <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	f7fe fc3d 	bl	8000c18 <__aeabi_d2f>
 800239e:	4603      	mov	r3, r0
 80023a0:	4ac3      	ldr	r2, [pc, #780]	@ (80026b0 <compute_control+0x3bc>)
 80023a2:	6013      	str	r3, [r2, #0]
 	}

	if (w_desired > W_MAX) {
 80023a4:	4bc3      	ldr	r3, [pc, #780]	@ (80026b4 <compute_control+0x3c0>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80023ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b6:	dd2a      	ble.n	800240e <compute_control+0x11a>
		w_desired = W_MAX * (w_desired / fabs(w_desired));
 80023b8:	4bbf      	ldr	r3, [pc, #764]	@ (80026b8 <compute_control+0x3c4>)
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f8dc 	bl	8000578 <__aeabi_f2d>
 80023c0:	4604      	mov	r4, r0
 80023c2:	460d      	mov	r5, r1
 80023c4:	4bbb      	ldr	r3, [pc, #748]	@ (80026b4 <compute_control+0x3c0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f8d5 	bl	8000578 <__aeabi_f2d>
 80023ce:	4680      	mov	r8, r0
 80023d0:	4689      	mov	r9, r1
 80023d2:	4bb8      	ldr	r3, [pc, #736]	@ (80026b4 <compute_control+0x3c0>)
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	eef0 7ae7 	vabs.f32	s15, s15
 80023dc:	ee17 0a90 	vmov	r0, s15
 80023e0:	f7fe f8ca 	bl	8000578 <__aeabi_f2d>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4640      	mov	r0, r8
 80023ea:	4649      	mov	r1, r9
 80023ec:	f7fe fa46 	bl	800087c <__aeabi_ddiv>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4620      	mov	r0, r4
 80023f6:	4629      	mov	r1, r5
 80023f8:	f7fe f916 	bl	8000628 <__aeabi_dmul>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fc08 	bl	8000c18 <__aeabi_d2f>
 8002408:	4603      	mov	r3, r0
 800240a:	4aaa      	ldr	r2, [pc, #680]	@ (80026b4 <compute_control+0x3c0>)
 800240c:	6013      	str	r3, [r2, #0]
	}


	compute_ideal_speed(v_desired, w_desired, &lb_speed_ideal,
 800240e:	4ba8      	ldr	r3, [pc, #672]	@ (80026b0 <compute_control+0x3bc>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	4ba7      	ldr	r3, [pc, #668]	@ (80026b4 <compute_control+0x3c0>)
 8002416:	ed93 7a00 	vldr	s14, [r3]
 800241a:	4ba8      	ldr	r3, [pc, #672]	@ (80026bc <compute_control+0x3c8>)
 800241c:	4aa8      	ldr	r2, [pc, #672]	@ (80026c0 <compute_control+0x3cc>)
 800241e:	49a9      	ldr	r1, [pc, #676]	@ (80026c4 <compute_control+0x3d0>)
 8002420:	48a9      	ldr	r0, [pc, #676]	@ (80026c8 <compute_control+0x3d4>)
 8002422:	eef0 0a47 	vmov.f32	s1, s14
 8002426:	eeb0 0a67 	vmov.f32	s0, s15
 800242a:	f7fe fc7d 	bl	8000d28 <compute_ideal_speed>
			&rb_speed_ideal, &lf_speed_ideal, &rf_speed_ideal);

	// compute control for left side
	lb_speed_real = compute_real_speed(time_gap, LB);
 800242e:	2200      	movs	r2, #0
 8002430:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002434:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002438:	4610      	mov	r0, r2
 800243a:	ed93 0a00 	vldr	s0, [r3]
 800243e:	f000 fb1b 	bl	8002a78 <compute_real_speed>
 8002442:	eef0 7a40 	vmov.f32	s15, s0
 8002446:	4ba1      	ldr	r3, [pc, #644]	@ (80026cc <compute_control+0x3d8>)
 8002448:	edc3 7a00 	vstr	s15, [r3]
	float lb_error = fabs(lb_speed_ideal) - fabs(lb_speed_real);
 800244c:	4b9e      	ldr	r3, [pc, #632]	@ (80026c8 <compute_control+0x3d4>)
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	eef0 7ae7 	vabs.f32	s15, s15
 8002456:	ee17 0a90 	vmov	r0, s15
 800245a:	f7fe f88d 	bl	8000578 <__aeabi_f2d>
 800245e:	4604      	mov	r4, r0
 8002460:	460d      	mov	r5, r1
 8002462:	4b9a      	ldr	r3, [pc, #616]	@ (80026cc <compute_control+0x3d8>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	eef0 7ae7 	vabs.f32	s15, s15
 800246c:	ee17 0a90 	vmov	r0, s15
 8002470:	f7fe f882 	bl	8000578 <__aeabi_f2d>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4620      	mov	r0, r4
 800247a:	4629      	mov	r1, r5
 800247c:	f7fd ff1c 	bl	80002b8 <__aeabi_dsub>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f7fe fbc6 	bl	8000c18 <__aeabi_d2f>
 800248c:	4603      	mov	r3, r0
 800248e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	lb_integral += lb_error * time_gap;
 8002492:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002496:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800249a:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 800249e:	edd3 7a00 	vldr	s15, [r3]
 80024a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024a6:	4b8a      	ldr	r3, [pc, #552]	@ (80026d0 <compute_control+0x3dc>)
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b0:	4b87      	ldr	r3, [pc, #540]	@ (80026d0 <compute_control+0x3dc>)
 80024b2:	edc3 7a00 	vstr	s15, [r3]
	float lb_derivative = (lb_error - lb_previous_err) / time_gap;
 80024b6:	4b87      	ldr	r3, [pc, #540]	@ (80026d4 <compute_control+0x3e0>)
 80024b8:	edd3 7a00 	vldr	s15, [r3]
 80024bc:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 80024c0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80024c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024cc:	ed93 7a00 	vldr	s14, [r3]
 80024d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d4:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
	lb_previous_err = lb_error;
 80024d8:	4a7e      	ldr	r2, [pc, #504]	@ (80026d4 <compute_control+0x3e0>)
 80024da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80024de:	6013      	str	r3, [r2, #0]
	lb_control = (int) (Kp * lb_error + Ki * lb_integral
 80024e0:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 80024e4:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 80024e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ec:	4b78      	ldr	r3, [pc, #480]	@ (80026d0 <compute_control+0x3dc>)
 80024ee:	edd3 6a00 	vldr	s13, [r3]
 80024f2:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 80024f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024fa:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * lb_derivative);
 80024fe:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 8002502:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8002506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800250a:	ee77 7a27 	vadd.f32	s15, s14, s15
	lb_control = (int) (Kp * lb_error + Ki * lb_integral
 800250e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002512:	ee17 3a90 	vmov	r3, s15
 8002516:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	lf_speed_real = compute_real_speed(time_gap, LF);
 800251a:	2202      	movs	r2, #2
 800251c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002520:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002524:	4610      	mov	r0, r2
 8002526:	ed93 0a00 	vldr	s0, [r3]
 800252a:	f000 faa5 	bl	8002a78 <compute_real_speed>
 800252e:	eef0 7a40 	vmov.f32	s15, s0
 8002532:	4b69      	ldr	r3, [pc, #420]	@ (80026d8 <compute_control+0x3e4>)
 8002534:	edc3 7a00 	vstr	s15, [r3]
	float lf_error = fabs(lf_speed_ideal) - fabs(lf_speed_real);
 8002538:	4b61      	ldr	r3, [pc, #388]	@ (80026c0 <compute_control+0x3cc>)
 800253a:	edd3 7a00 	vldr	s15, [r3]
 800253e:	eef0 7ae7 	vabs.f32	s15, s15
 8002542:	ee17 0a90 	vmov	r0, s15
 8002546:	f7fe f817 	bl	8000578 <__aeabi_f2d>
 800254a:	4604      	mov	r4, r0
 800254c:	460d      	mov	r5, r1
 800254e:	4b62      	ldr	r3, [pc, #392]	@ (80026d8 <compute_control+0x3e4>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	eef0 7ae7 	vabs.f32	s15, s15
 8002558:	ee17 0a90 	vmov	r0, s15
 800255c:	f7fe f80c 	bl	8000578 <__aeabi_f2d>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fd fea6 	bl	80002b8 <__aeabi_dsub>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fb50 	bl	8000c18 <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	lf_integral += lf_error * time_gap;
 800257e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002582:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002586:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 800258a:	edd3 7a00 	vldr	s15, [r3]
 800258e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002592:	4b52      	ldr	r3, [pc, #328]	@ (80026dc <compute_control+0x3e8>)
 8002594:	edd3 7a00 	vldr	s15, [r3]
 8002598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259c:	4b4f      	ldr	r3, [pc, #316]	@ (80026dc <compute_control+0x3e8>)
 800259e:	edc3 7a00 	vstr	s15, [r3]
	float lf_derivative = (lf_error - lf_previous_err) / time_gap;
 80025a2:	4b4f      	ldr	r3, [pc, #316]	@ (80026e0 <compute_control+0x3ec>)
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 80025ac:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80025b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80025b8:	ed93 7a00 	vldr	s14, [r3]
 80025bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025c0:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
	lf_previous_err = lf_error;
 80025c4:	4a46      	ldr	r2, [pc, #280]	@ (80026e0 <compute_control+0x3ec>)
 80025c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80025ca:	6013      	str	r3, [r2, #0]
	lf_control = (int) (Kp * lf_error + Ki * lf_integral
 80025cc:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 80025d0:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 80025d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d8:	4b40      	ldr	r3, [pc, #256]	@ (80026dc <compute_control+0x3e8>)
 80025da:	edd3 6a00 	vldr	s13, [r3]
 80025de:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 80025e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e6:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * lf_derivative);
 80025ea:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 80025ee:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 80025f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f6:	ee77 7a27 	vadd.f32	s15, s14, s15
	lf_control = (int) (Kp * lf_error + Ki * lf_integral
 80025fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025fe:	ee17 3a90 	vmov	r3, s15
 8002602:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

	//compute control for right speed
	rb_speed_real = compute_real_speed(time_gap, RB);
 8002606:	2201      	movs	r2, #1
 8002608:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800260c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002610:	4610      	mov	r0, r2
 8002612:	ed93 0a00 	vldr	s0, [r3]
 8002616:	f000 fa2f 	bl	8002a78 <compute_real_speed>
 800261a:	eef0 7a40 	vmov.f32	s15, s0
 800261e:	4b31      	ldr	r3, [pc, #196]	@ (80026e4 <compute_control+0x3f0>)
 8002620:	edc3 7a00 	vstr	s15, [r3]
	float rb_error = fabs(rb_speed_ideal) - fabs(rb_speed_real);
 8002624:	4b27      	ldr	r3, [pc, #156]	@ (80026c4 <compute_control+0x3d0>)
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	eef0 7ae7 	vabs.f32	s15, s15
 800262e:	ee17 0a90 	vmov	r0, s15
 8002632:	f7fd ffa1 	bl	8000578 <__aeabi_f2d>
 8002636:	4604      	mov	r4, r0
 8002638:	460d      	mov	r5, r1
 800263a:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <compute_control+0x3f0>)
 800263c:	edd3 7a00 	vldr	s15, [r3]
 8002640:	eef0 7ae7 	vabs.f32	s15, s15
 8002644:	ee17 0a90 	vmov	r0, s15
 8002648:	f7fd ff96 	bl	8000578 <__aeabi_f2d>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4620      	mov	r0, r4
 8002652:	4629      	mov	r1, r5
 8002654:	f7fd fe30 	bl	80002b8 <__aeabi_dsub>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f7fe fada 	bl	8000c18 <__aeabi_d2f>
 8002664:	4603      	mov	r3, r0
 8002666:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	rb_integral += rb_error * time_gap;
 800266a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800266e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002672:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800267e:	4b1a      	ldr	r3, [pc, #104]	@ (80026e8 <compute_control+0x3f4>)
 8002680:	edd3 7a00 	vldr	s15, [r3]
 8002684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002688:	4b17      	ldr	r3, [pc, #92]	@ (80026e8 <compute_control+0x3f4>)
 800268a:	edc3 7a00 	vstr	s15, [r3]
	float rb_derivative = (rb_error - rb_previous_err) / time_gap;
 800268e:	4b17      	ldr	r3, [pc, #92]	@ (80026ec <compute_control+0x3f8>)
 8002690:	edd3 7a00 	vldr	s15, [r3]
 8002694:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8002698:	ee77 6a67 	vsub.f32	s13, s14, s15
 800269c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80026a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026a4:	e024      	b.n	80026f0 <compute_control+0x3fc>
 80026a6:	bf00      	nop
 80026a8:	447a0000 	.word	0x447a0000
 80026ac:	45ea6000 	.word	0x45ea6000
 80026b0:	20000a50 	.word	0x20000a50
 80026b4:	20000a54 	.word	0x20000a54
 80026b8:	40400000 	.word	0x40400000
 80026bc:	20000a2c 	.word	0x20000a2c
 80026c0:	20000a28 	.word	0x20000a28
 80026c4:	20000a24 	.word	0x20000a24
 80026c8:	20000a20 	.word	0x20000a20
 80026cc:	20000a10 	.word	0x20000a10
 80026d0:	20000a30 	.word	0x20000a30
 80026d4:	20000a34 	.word	0x20000a34
 80026d8:	20000a18 	.word	0x20000a18
 80026dc:	20000a40 	.word	0x20000a40
 80026e0:	20000a44 	.word	0x20000a44
 80026e4:	20000a14 	.word	0x20000a14
 80026e8:	20000a38 	.word	0x20000a38
 80026ec:	20000a3c 	.word	0x20000a3c
 80026f0:	ed93 7a00 	vldr	s14, [r3]
 80026f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f8:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc
	rb_previous_err = rb_error;
 80026fc:	4ac6      	ldr	r2, [pc, #792]	@ (8002a18 <compute_control+0x724>)
 80026fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002702:	6013      	str	r3, [r2, #0]
	rb_control = (int) (Kp * rb_error + Ki * rb_integral
 8002704:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8002708:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 800270c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002710:	4bc2      	ldr	r3, [pc, #776]	@ (8002a1c <compute_control+0x728>)
 8002712:	edd3 6a00 	vldr	s13, [r3]
 8002716:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 800271a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800271e:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * rb_derivative);
 8002722:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 8002726:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 800272a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272e:	ee77 7a27 	vadd.f32	s15, s14, s15
	rb_control = (int) (Kp * rb_error + Ki * rb_integral
 8002732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002736:	ee17 3a90 	vmov	r3, s15
 800273a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	rf_speed_real = compute_real_speed(time_gap, RF);
 800273e:	2203      	movs	r2, #3
 8002740:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002744:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002748:	4610      	mov	r0, r2
 800274a:	ed93 0a00 	vldr	s0, [r3]
 800274e:	f000 f993 	bl	8002a78 <compute_real_speed>
 8002752:	eef0 7a40 	vmov.f32	s15, s0
 8002756:	4bb2      	ldr	r3, [pc, #712]	@ (8002a20 <compute_control+0x72c>)
 8002758:	edc3 7a00 	vstr	s15, [r3]
	float rf_error = fabs(rf_speed_ideal) - fabs(rf_speed_real);
 800275c:	4bb1      	ldr	r3, [pc, #708]	@ (8002a24 <compute_control+0x730>)
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	eef0 7ae7 	vabs.f32	s15, s15
 8002766:	ee17 0a90 	vmov	r0, s15
 800276a:	f7fd ff05 	bl	8000578 <__aeabi_f2d>
 800276e:	4604      	mov	r4, r0
 8002770:	460d      	mov	r5, r1
 8002772:	4bab      	ldr	r3, [pc, #684]	@ (8002a20 <compute_control+0x72c>)
 8002774:	edd3 7a00 	vldr	s15, [r3]
 8002778:	eef0 7ae7 	vabs.f32	s15, s15
 800277c:	ee17 0a90 	vmov	r0, s15
 8002780:	f7fd fefa 	bl	8000578 <__aeabi_f2d>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4620      	mov	r0, r4
 800278a:	4629      	mov	r1, r5
 800278c:	f7fd fd94 	bl	80002b8 <__aeabi_dsub>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	f7fe fa3e 	bl	8000c18 <__aeabi_d2f>
 800279c:	4603      	mov	r3, r0
 800279e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
	rf_integral += rf_error * time_gap;
 80027a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80027a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80027aa:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 80027ae:	edd3 7a00 	vldr	s15, [r3]
 80027b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027b6:	4b9c      	ldr	r3, [pc, #624]	@ (8002a28 <compute_control+0x734>)
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c0:	4b99      	ldr	r3, [pc, #612]	@ (8002a28 <compute_control+0x734>)
 80027c2:	edc3 7a00 	vstr	s15, [r3]
	float rf_derivative = (rf_error - rf_previous_err) / time_gap;
 80027c6:	4b99      	ldr	r3, [pc, #612]	@ (8002a2c <compute_control+0x738>)
 80027c8:	edd3 7a00 	vldr	s15, [r3]
 80027cc:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 80027d0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80027d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80027dc:	ed93 7a00 	vldr	s14, [r3]
 80027e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027e4:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
	rf_previous_err = rf_error;
 80027e8:	4a90      	ldr	r2, [pc, #576]	@ (8002a2c <compute_control+0x738>)
 80027ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80027ee:	6013      	str	r3, [r2, #0]
	rf_control = (int) (Kp * rf_error + Ki * rf_integral
 80027f0:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 80027f4:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 80027f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002a28 <compute_control+0x734>)
 80027fe:	edd3 6a00 	vldr	s13, [r3]
 8002802:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8002806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800280a:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Kd * rf_derivative);
 800280e:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 8002812:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8002816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281a:	ee77 7a27 	vadd.f32	s15, s14, s15
	rf_control = (int) (Kp * rf_error + Ki * rf_integral
 800281e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002822:	ee17 3a90 	vmov	r3, s15
 8002826:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	motor_control(LB, lb_control, lb_speed_ideal);
 800282a:	2200      	movs	r2, #0
 800282c:	4b80      	ldr	r3, [pc, #512]	@ (8002a30 <compute_control+0x73c>)
 800282e:	edd3 7a00 	vldr	s15, [r3]
 8002832:	eeb0 0a67 	vmov.f32	s0, s15
 8002836:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800283a:	4610      	mov	r0, r2
 800283c:	f7ff fc5e 	bl	80020fc <motor_control>
	motor_control(LF, lf_control, lf_speed_ideal);
 8002840:	2202      	movs	r2, #2
 8002842:	4b7c      	ldr	r3, [pc, #496]	@ (8002a34 <compute_control+0x740>)
 8002844:	edd3 7a00 	vldr	s15, [r3]
 8002848:	eeb0 0a67 	vmov.f32	s0, s15
 800284c:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8002850:	4610      	mov	r0, r2
 8002852:	f7ff fc53 	bl	80020fc <motor_control>
	motor_control(RB, rb_control, rb_speed_ideal);
 8002856:	2201      	movs	r2, #1
 8002858:	4b77      	ldr	r3, [pc, #476]	@ (8002a38 <compute_control+0x744>)
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	eeb0 0a67 	vmov.f32	s0, s15
 8002862:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8002866:	4610      	mov	r0, r2
 8002868:	f7ff fc48 	bl	80020fc <motor_control>
	motor_control(RF, rf_control, rf_speed_ideal);
 800286c:	2203      	movs	r2, #3
 800286e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a24 <compute_control+0x730>)
 8002870:	edd3 7a00 	vldr	s15, [r3]
 8002874:	eeb0 0a67 	vmov.f32	s0, s15
 8002878:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 800287c:	4610      	mov	r0, r2
 800287e:	f7ff fc3d 	bl	80020fc <motor_control>

	char temp_str[200];

	lb_count_current = __HAL_TIM_GET_COUNTER(&htim3);
 8002882:	4b6e      	ldr	r3, [pc, #440]	@ (8002a3c <compute_control+0x748>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	4a6d      	ldr	r2, [pc, #436]	@ (8002a40 <compute_control+0x74c>)
 800288a:	6013      	str	r3, [r2, #0]
	rb_count_current = __HAL_TIM_GET_COUNTER(&htim4);
 800288c:	4b6d      	ldr	r3, [pc, #436]	@ (8002a44 <compute_control+0x750>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	4a6d      	ldr	r2, [pc, #436]	@ (8002a48 <compute_control+0x754>)
 8002894:	6013      	str	r3, [r2, #0]

		sprintf(temp_str,
 8002896:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800289a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	f7fd fe6a 	bl	8000578 <__aeabi_f2d>
 80028a4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80028a8:	4b68      	ldr	r3, [pc, #416]	@ (8002a4c <compute_control+0x758>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fe63 	bl	8000578 <__aeabi_f2d>
 80028b2:	4605      	mov	r5, r0
 80028b4:	460e      	mov	r6, r1
 80028b6:	4b66      	ldr	r3, [pc, #408]	@ (8002a50 <compute_control+0x75c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fd fe5c 	bl	8000578 <__aeabi_f2d>
 80028c0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80028c4:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80028c8:	f7fd fe56 	bl	8000578 <__aeabi_f2d>
 80028cc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80028d0:	4b60      	ldr	r3, [pc, #384]	@ (8002a54 <compute_control+0x760>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fd fe4f 	bl	8000578 <__aeabi_f2d>
 80028da:	e9c7 0100 	strd	r0, r1, [r7]
 80028de:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80028e2:	f7fd fe49 	bl	8000578 <__aeabi_f2d>
 80028e6:	4682      	mov	sl, r0
 80028e8:	468b      	mov	fp, r1
 80028ea:	4b51      	ldr	r3, [pc, #324]	@ (8002a30 <compute_control+0x73c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fe42 	bl	8000578 <__aeabi_f2d>
 80028f4:	4680      	mov	r8, r0
 80028f6:	4689      	mov	r9, r1
 80028f8:	4b57      	ldr	r3, [pc, #348]	@ (8002a58 <compute_control+0x764>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fd fe3b 	bl	8000578 <__aeabi_f2d>
 8002902:	4b56      	ldr	r3, [pc, #344]	@ (8002a5c <compute_control+0x768>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800290a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800290c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002910:	930e      	str	r3, [sp, #56]	@ 0x38
 8002912:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8002916:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 800291a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800291e:	ed97 7b00 	vldr	d7, [r7]
 8002922:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002926:	ed97 7b02 	vldr	d7, [r7, #8]
 800292a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800292e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002932:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002936:	e9cd 5600 	strd	r5, r6, [sp]
 800293a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800293e:	4948      	ldr	r1, [pc, #288]	@ (8002a60 <compute_control+0x76c>)
 8002940:	4620      	mov	r0, r4
 8002942:	f009 fba5 	bl	800c090 <siprintf>
				time_gap, v_desired, w_desired, lb_error, lb_integral,
				lb_derivative, lb_speed_ideal, lb_speed_real, lb_control,
				duty_cycle_lb);
//		log_to_uart(temp_str);
//
		sprintf(temp_str,
 8002946:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800294a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	f7fd fe12 	bl	8000578 <__aeabi_f2d>
 8002954:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002958:	4b3c      	ldr	r3, [pc, #240]	@ (8002a4c <compute_control+0x758>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fd fe0b 	bl	8000578 <__aeabi_f2d>
 8002962:	4605      	mov	r5, r0
 8002964:	460e      	mov	r6, r1
 8002966:	4b3a      	ldr	r3, [pc, #232]	@ (8002a50 <compute_control+0x75c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fe04 	bl	8000578 <__aeabi_f2d>
 8002970:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002974:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8002978:	f7fd fdfe 	bl	8000578 <__aeabi_f2d>
 800297c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002980:	4b26      	ldr	r3, [pc, #152]	@ (8002a1c <compute_control+0x728>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fdf7 	bl	8000578 <__aeabi_f2d>
 800298a:	e9c7 0100 	strd	r0, r1, [r7]
 800298e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002992:	f7fd fdf1 	bl	8000578 <__aeabi_f2d>
 8002996:	4682      	mov	sl, r0
 8002998:	468b      	mov	fp, r1
 800299a:	4b27      	ldr	r3, [pc, #156]	@ (8002a38 <compute_control+0x744>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fdea 	bl	8000578 <__aeabi_f2d>
 80029a4:	4680      	mov	r8, r0
 80029a6:	4689      	mov	r9, r1
 80029a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a64 <compute_control+0x770>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fd fde3 	bl	8000578 <__aeabi_f2d>
 80029b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a68 <compute_control+0x774>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80029ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80029bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80029c2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80029c6:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 80029ca:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80029ce:	ed97 7b00 	vldr	d7, [r7]
 80029d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80029d6:	ed97 7b02 	vldr	d7, [r7, #8]
 80029da:	ed8d 7b04 	vstr	d7, [sp, #16]
 80029de:	ed97 7b04 	vldr	d7, [r7, #16]
 80029e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80029e6:	e9cd 5600 	strd	r5, r6, [sp]
 80029ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ee:	491f      	ldr	r1, [pc, #124]	@ (8002a6c <compute_control+0x778>)
 80029f0:	4620      	mov	r0, r4
 80029f2:	f009 fb4d 	bl	800c090 <siprintf>
//				time_gap, v_desired, w_desired, rf_error, rf_integral,
//				rf_derivative, rf_speed_ideal, rf_speed_real, rf_control,
//				duty_cycle_rf);
//		log_to_uart(temp_str);
//
		sprintf(temp_str, "\r\n");
 80029f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029fa:	491d      	ldr	r1, [pc, #116]	@ (8002a70 <compute_control+0x77c>)
 80029fc:	4618      	mov	r0, r3
 80029fe:	f009 fb47 	bl	800c090 <siprintf>
		log_to_uart(temp_str);
 8002a02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f998 	bl	8002d3c <log_to_uart>
	}
 8002a0c:	bf00      	nop
 8002a0e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8002a12:	46bd      	mov	sp, r7
 8002a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a18:	20000a3c 	.word	0x20000a3c
 8002a1c:	20000a38 	.word	0x20000a38
 8002a20:	20000a1c 	.word	0x20000a1c
 8002a24:	20000a2c 	.word	0x20000a2c
 8002a28:	20000a48 	.word	0x20000a48
 8002a2c:	20000a4c 	.word	0x20000a4c
 8002a30:	20000a20 	.word	0x20000a20
 8002a34:	20000a28 	.word	0x20000a28
 8002a38:	20000a24 	.word	0x20000a24
 8002a3c:	200002a8 	.word	0x200002a8
 8002a40:	20000a08 	.word	0x20000a08
 8002a44:	200002f4 	.word	0x200002f4
 8002a48:	20000a0c 	.word	0x20000a0c
 8002a4c:	20000a50 	.word	0x20000a50
 8002a50:	20000a54 	.word	0x20000a54
 8002a54:	20000a30 	.word	0x20000a30
 8002a58:	20000a10 	.word	0x20000a10
 8002a5c:	200009e8 	.word	0x200009e8
 8002a60:	0800f9f8 	.word	0x0800f9f8
 8002a64:	20000a14 	.word	0x20000a14
 8002a68:	200009ec 	.word	0x200009ec
 8002a6c:	0800fa98 	.word	0x0800fa98
 8002a70:	0800f938 	.word	0x0800f938
 8002a74:	00000000 	.word	0x00000000

08002a78 <compute_real_speed>:


float compute_real_speed(float time_gap, int motor) {
 8002a78:	b5b0      	push	{r4, r5, r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a82:	6038      	str	r0, [r7, #0]
//	char temp_str[50];
	int16_t count_diff = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	817b      	strh	r3, [r7, #10]
	float speed_real = 0.0;
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
	if (motor == LB) {
 8002a8e:	2200      	movs	r2, #0
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d149      	bne.n	8002b2a <compute_real_speed+0xb2>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim3) - lb_count_last);
 8002a96:	4ba0      	ldr	r3, [pc, #640]	@ (8002d18 <compute_real_speed+0x2a0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	4b9f      	ldr	r3, [pc, #636]	@ (8002d1c <compute_real_speed+0x2a4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	817b      	strh	r3, [r7, #10]
		speed_real = -1 * count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 8002aaa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002aae:	425b      	negs	r3, r3
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fd4f 	bl	8000554 <__aeabi_i2d>
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	4b99      	ldr	r3, [pc, #612]	@ (8002d20 <compute_real_speed+0x2a8>)
 8002abc:	f7fd fede 	bl	800087c <__aeabi_ddiv>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	f7fd fbf6 	bl	80002bc <__adddf3>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	a38b      	add	r3, pc, #556	@ (adr r3, 8002d08 <compute_real_speed+0x290>)
 8002ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ade:	f7fd fda3 	bl	8000628 <__aeabi_dmul>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	a389      	add	r3, pc, #548	@ (adr r3, 8002d10 <compute_real_speed+0x298>)
 8002aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af0:	f7fd fd9a 	bl	8000628 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4614      	mov	r4, r2
 8002afa:	461d      	mov	r5, r3
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7fd fd3b 	bl	8000578 <__aeabi_f2d>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4620      	mov	r0, r4
 8002b08:	4629      	mov	r1, r5
 8002b0a:	f7fd feb7 	bl	800087c <__aeabi_ddiv>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	f7fe f87f 	bl	8000c18 <__aeabi_d2f>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	60fb      	str	r3, [r7, #12]
		lb_count_last = __HAL_TIM_GET_COUNTER(&htim3);
 8002b1e:	4b7e      	ldr	r3, [pc, #504]	@ (8002d18 <compute_real_speed+0x2a0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	4a7d      	ldr	r2, [pc, #500]	@ (8002d1c <compute_real_speed+0x2a4>)
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	e0e6      	b.n	8002cf8 <compute_real_speed+0x280>
//		sprintf(temp_str, "LB count diff: %d, speed: %.4f\r\n", count_diff, speed_real);
//		log_to_uart(temp_str);
	}
	else if (motor == RB) {
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d148      	bne.n	8002bc4 <compute_real_speed+0x14c>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim4) - rb_count_last);
 8002b32:	4b7c      	ldr	r3, [pc, #496]	@ (8002d24 <compute_real_speed+0x2ac>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8002d28 <compute_real_speed+0x2b0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	817b      	strh	r3, [r7, #10]
		speed_real = count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 8002b46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fd02 	bl	8000554 <__aeabi_i2d>
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	4b72      	ldr	r3, [pc, #456]	@ (8002d20 <compute_real_speed+0x2a8>)
 8002b56:	f7fd fe91 	bl	800087c <__aeabi_ddiv>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	f7fd fba9 	bl	80002bc <__adddf3>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	a365      	add	r3, pc, #404	@ (adr r3, 8002d08 <compute_real_speed+0x290>)
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	f7fd fd56 	bl	8000628 <__aeabi_dmul>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	a362      	add	r3, pc, #392	@ (adr r3, 8002d10 <compute_real_speed+0x298>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f7fd fd4d 	bl	8000628 <__aeabi_dmul>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4614      	mov	r4, r2
 8002b94:	461d      	mov	r5, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fd fcee 	bl	8000578 <__aeabi_f2d>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	f7fd fe6a 	bl	800087c <__aeabi_ddiv>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4610      	mov	r0, r2
 8002bae:	4619      	mov	r1, r3
 8002bb0:	f7fe f832 	bl	8000c18 <__aeabi_d2f>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	60fb      	str	r3, [r7, #12]
		rb_count_last = __HAL_TIM_GET_COUNTER(&htim4);
 8002bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8002d24 <compute_real_speed+0x2ac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	4a5a      	ldr	r2, [pc, #360]	@ (8002d28 <compute_real_speed+0x2b0>)
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e099      	b.n	8002cf8 <compute_real_speed+0x280>
//		sprintf(temp_str, "RB count diff: %d, speed: %.4f\r\n", count_diff, speed_real);
//		log_to_uart(temp_str);
	}
	else if (motor == LF) {
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d149      	bne.n	8002c60 <compute_real_speed+0x1e8>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim1) - lf_count_last);
 8002bcc:	4b57      	ldr	r3, [pc, #348]	@ (8002d2c <compute_real_speed+0x2b4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	4b56      	ldr	r3, [pc, #344]	@ (8002d30 <compute_real_speed+0x2b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	817b      	strh	r3, [r7, #10]
		speed_real = -1 * count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 8002be0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002be4:	425b      	negs	r3, r3
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fcb4 	bl	8000554 <__aeabi_i2d>
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8002d20 <compute_real_speed+0x2a8>)
 8002bf2:	f7fd fe43 	bl	800087c <__aeabi_ddiv>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	f7fd fb5b 	bl	80002bc <__adddf3>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	a33e      	add	r3, pc, #248	@ (adr r3, 8002d08 <compute_real_speed+0x290>)
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	f7fd fd08 	bl	8000628 <__aeabi_dmul>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	a33b      	add	r3, pc, #236	@ (adr r3, 8002d10 <compute_real_speed+0x298>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd fcff 	bl	8000628 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4614      	mov	r4, r2
 8002c30:	461d      	mov	r5, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fd fca0 	bl	8000578 <__aeabi_f2d>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	4629      	mov	r1, r5
 8002c40:	f7fd fe1c 	bl	800087c <__aeabi_ddiv>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7fd ffe4 	bl	8000c18 <__aeabi_d2f>
 8002c50:	4603      	mov	r3, r0
 8002c52:	60fb      	str	r3, [r7, #12]
		lf_count_last = __HAL_TIM_GET_COUNTER(&htim1);
 8002c54:	4b35      	ldr	r3, [pc, #212]	@ (8002d2c <compute_real_speed+0x2b4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5a:	4a35      	ldr	r2, [pc, #212]	@ (8002d30 <compute_real_speed+0x2b8>)
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e04b      	b.n	8002cf8 <compute_real_speed+0x280>
	}
	else if (motor == RF) {
 8002c60:	2203      	movs	r2, #3
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d147      	bne.n	8002cf8 <compute_real_speed+0x280>
		count_diff = (int16_t) (__HAL_TIM_GET_COUNTER(&htim8) - rf_count_last);
 8002c68:	4b32      	ldr	r3, [pc, #200]	@ (8002d34 <compute_real_speed+0x2bc>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	4b31      	ldr	r3, [pc, #196]	@ (8002d38 <compute_real_speed+0x2c0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	817b      	strh	r3, [r7, #10]
		speed_real = count_diff / 1320.0 * 2 * M_PI * MOTOR_RADIUS / time_gap;
 8002c7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd fc67 	bl	8000554 <__aeabi_i2d>
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	4b25      	ldr	r3, [pc, #148]	@ (8002d20 <compute_real_speed+0x2a8>)
 8002c8c:	f7fd fdf6 	bl	800087c <__aeabi_ddiv>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	f7fd fb0e 	bl	80002bc <__adddf3>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	a317      	add	r3, pc, #92	@ (adr r3, 8002d08 <compute_real_speed+0x290>)
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	f7fd fcbb 	bl	8000628 <__aeabi_dmul>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	a315      	add	r3, pc, #84	@ (adr r3, 8002d10 <compute_real_speed+0x298>)
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f7fd fcb2 	bl	8000628 <__aeabi_dmul>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4614      	mov	r4, r2
 8002cca:	461d      	mov	r5, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7fd fc53 	bl	8000578 <__aeabi_f2d>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	4629      	mov	r1, r5
 8002cda:	f7fd fdcf 	bl	800087c <__aeabi_ddiv>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f7fd ff97 	bl	8000c18 <__aeabi_d2f>
 8002cea:	4603      	mov	r3, r0
 8002cec:	60fb      	str	r3, [r7, #12]
		rf_count_last = __HAL_TIM_GET_COUNTER(&htim8);
 8002cee:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <compute_real_speed+0x2bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	4a10      	ldr	r2, [pc, #64]	@ (8002d38 <compute_real_speed+0x2c0>)
 8002cf6:	6013      	str	r3, [r2, #0]
	}
	return speed_real;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	ee07 3a90 	vmov	s15, r3
}
 8002cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bdb0      	pop	{r4, r5, r7, pc}
 8002d08:	54442d18 	.word	0x54442d18
 8002d0c:	400921fb 	.word	0x400921fb
 8002d10:	25460aa6 	.word	0x25460aa6
 8002d14:	3f9a0275 	.word	0x3f9a0275
 8002d18:	200002a8 	.word	0x200002a8
 8002d1c:	200009f8 	.word	0x200009f8
 8002d20:	4094a000 	.word	0x4094a000
 8002d24:	200002f4 	.word	0x200002f4
 8002d28:	200009fc 	.word	0x200009fc
 8002d2c:	20000210 	.word	0x20000210
 8002d30:	20000a00 	.word	0x20000a00
 8002d34:	20000340 	.word	0x20000340
 8002d38:	20000a04 	.word	0x20000a04

08002d3c <log_to_uart>:

void log_to_uart(const char *msg) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7fd faab 	bl	80002a0 <strlen>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4803      	ldr	r0, [pc, #12]	@ (8002d64 <log_to_uart+0x28>)
 8002d56:	f005 fb55 	bl	8008404 <HAL_UART_Transmit>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200005f8 	.word	0x200005f8

08002d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d6c:	b672      	cpsid	i
}
 8002d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d70:	bf00      	nop
 8002d72:	e7fd      	b.n	8002d70 <Error_Handler+0x8>

08002d74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002db8 <HAL_MspInit+0x44>)
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002db8 <HAL_MspInit+0x44>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6193      	str	r3, [r2, #24]
 8002d86:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <HAL_MspInit+0x44>)
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <HAL_MspInit+0x44>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	4a08      	ldr	r2, [pc, #32]	@ (8002db8 <HAL_MspInit+0x44>)
 8002d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	61d3      	str	r3, [r2, #28]
 8002d9e:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <HAL_MspInit+0x44>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000

08002dbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e00 <HAL_RTC_MspInit+0x44>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d111      	bne.n	8002df2 <HAL_RTC_MspInit+0x36>
 8002dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dd2:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b07      	ldr	r3, [pc, #28]	@ (8002e04 <HAL_RTC_MspInit+0x48>)
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	461a      	mov	r2, r3
 8002dee:	2301      	movs	r3, #1
 8002df0:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002df2:	bf00      	nop
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40002800 	.word	0x40002800
 8002e04:	10908100 	.word	0x10908100

08002e08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b092      	sub	sp, #72	@ 0x48
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a7d      	ldr	r2, [pc, #500]	@ (800301c <HAL_TIM_Encoder_MspInit+0x214>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d14e      	bne.n	8002ec8 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e2a:	4b7d      	ldr	r3, [pc, #500]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	4a7c      	ldr	r2, [pc, #496]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002e30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e34:	6193      	str	r3, [r2, #24]
 8002e36:	4b7a      	ldr	r3, [pc, #488]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e42:	4b77      	ldr	r3, [pc, #476]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	4a76      	ldr	r2, [pc, #472]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002e48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002e4c:	6153      	str	r3, [r2, #20]
 8002e4e:	4b74      	ldr	r3, [pc, #464]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5a:	4b71      	ldr	r3, [pc, #452]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	4a70      	ldr	r2, [pc, #448]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e64:	6153      	str	r3, [r2, #20]
 8002e66:	4b6e      	ldr	r3, [pc, #440]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e72:	2301      	movs	r3, #1
 8002e74:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002e82:	2302      	movs	r3, #2
 8002e84:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e86:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4865      	ldr	r0, [pc, #404]	@ (8003024 <HAL_TIM_Encoder_MspInit+0x21c>)
 8002e8e:	f000 fe2f 	bl	8003af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e96:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002ea4:	2306      	movs	r3, #6
 8002ea6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002eac:	4619      	mov	r1, r3
 8002eae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eb2:	f000 fe1d 	bl	8003af0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2100      	movs	r1, #0
 8002eba:	2019      	movs	r0, #25
 8002ebc:	f000 fd65 	bl	800398a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002ec0:	2019      	movs	r0, #25
 8002ec2:	f000 fd7e 	bl	80039c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002ec6:	e0a5      	b.n	8003014 <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM3)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a56      	ldr	r2, [pc, #344]	@ (8003028 <HAL_TIM_Encoder_MspInit+0x220>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d128      	bne.n	8002f24 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ed2:	4b53      	ldr	r3, [pc, #332]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	4a52      	ldr	r2, [pc, #328]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	61d3      	str	r3, [r2, #28]
 8002ede:	4b50      	ldr	r3, [pc, #320]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eea:	4b4d      	ldr	r3, [pc, #308]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	4a4c      	ldr	r2, [pc, #304]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002ef0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ef4:	6153      	str	r3, [r2, #20]
 8002ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f02:	230c      	movs	r3, #12
 8002f04:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f12:	2302      	movs	r3, #2
 8002f14:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4843      	ldr	r0, [pc, #268]	@ (800302c <HAL_TIM_Encoder_MspInit+0x224>)
 8002f1e:	f000 fde7 	bl	8003af0 <HAL_GPIO_Init>
}
 8002f22:	e077      	b.n	8003014 <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM4)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a41      	ldr	r2, [pc, #260]	@ (8003030 <HAL_TIM_Encoder_MspInit+0x228>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d145      	bne.n	8002fba <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	4a3b      	ldr	r2, [pc, #236]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002f34:	f043 0304 	orr.w	r3, r3, #4
 8002f38:	61d3      	str	r3, [r2, #28]
 8002f3a:	4b39      	ldr	r3, [pc, #228]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f46:	4b36      	ldr	r3, [pc, #216]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	4a35      	ldr	r2, [pc, #212]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002f4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f50:	6153      	str	r3, [r2, #20]
 8002f52:	4b33      	ldr	r3, [pc, #204]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5e:	4b30      	ldr	r3, [pc, #192]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	4a2f      	ldr	r2, [pc, #188]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002f64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f68:	6153      	str	r3, [r2, #20]
 8002f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f7a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	2300      	movs	r3, #0
 8002f86:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f8c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f90:	4619      	mov	r1, r3
 8002f92:	4828      	ldr	r0, [pc, #160]	@ (8003034 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002f94:	f000 fdac 	bl	8003af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f98:	2340      	movs	r3, #64	@ 0x40
 8002f9a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4821      	ldr	r0, [pc, #132]	@ (8003038 <HAL_TIM_Encoder_MspInit+0x230>)
 8002fb4:	f000 fd9c 	bl	8003af0 <HAL_GPIO_Init>
}
 8002fb8:	e02c      	b.n	8003014 <HAL_TIM_Encoder_MspInit+0x20c>
  else if(htim_encoder->Instance==TIM8)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800303c <HAL_TIM_Encoder_MspInit+0x234>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d127      	bne.n	8003014 <HAL_TIM_Encoder_MspInit+0x20c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002fc4:	4b16      	ldr	r3, [pc, #88]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	4a15      	ldr	r2, [pc, #84]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002fca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002fce:	6193      	str	r3, [r2, #24]
 8002fd0:	4b13      	ldr	r3, [pc, #76]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fdc:	4b10      	ldr	r3, [pc, #64]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002fe2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002fe6:	6153      	str	r3, [r2, #20]
 8002fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8003020 <HAL_TIM_Encoder_MspInit+0x218>)
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ff4:	23c0      	movs	r3, #192	@ 0xc0
 8002ff6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003000:	2300      	movs	r3, #0
 8003002:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003004:	2304      	movs	r3, #4
 8003006:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003008:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800300c:	4619      	mov	r1, r3
 800300e:	4805      	ldr	r0, [pc, #20]	@ (8003024 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003010:	f000 fd6e 	bl	8003af0 <HAL_GPIO_Init>
}
 8003014:	bf00      	nop
 8003016:	3748      	adds	r7, #72	@ 0x48
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40021000 	.word	0x40021000
 8003024:	48000800 	.word	0x48000800
 8003028:	40000400 	.word	0x40000400
 800302c:	48001000 	.word	0x48001000
 8003030:	40000800 	.word	0x40000800
 8003034:	48000c00 	.word	0x48000c00
 8003038:	48000400 	.word	0x48000400
 800303c:	40013400 	.word	0x40013400

08003040 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003050:	d10b      	bne.n	800306a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003052:	4b09      	ldr	r3, [pc, #36]	@ (8003078 <HAL_TIM_PWM_MspInit+0x38>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	4a08      	ldr	r2, [pc, #32]	@ (8003078 <HAL_TIM_PWM_MspInit+0x38>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	61d3      	str	r3, [r2, #28]
 800305e:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <HAL_TIM_PWM_MspInit+0x38>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000

0800307c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0d      	ldr	r2, [pc, #52]	@ (80030c0 <HAL_TIM_Base_MspInit+0x44>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d113      	bne.n	80030b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800308e:	4b0d      	ldr	r3, [pc, #52]	@ (80030c4 <HAL_TIM_Base_MspInit+0x48>)
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	4a0c      	ldr	r2, [pc, #48]	@ (80030c4 <HAL_TIM_Base_MspInit+0x48>)
 8003094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003098:	6193      	str	r3, [r2, #24]
 800309a:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <HAL_TIM_Base_MspInit+0x48>)
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80030a6:	2200      	movs	r2, #0
 80030a8:	2100      	movs	r1, #0
 80030aa:	2019      	movs	r0, #25
 80030ac:	f000 fc6d 	bl	800398a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80030b0:	2019      	movs	r0, #25
 80030b2:	f000 fc86 	bl	80039c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40014400 	.word	0x40014400
 80030c4:	40021000 	.word	0x40021000

080030c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	@ 0x28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030e8:	d139      	bne.n	800315e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003168 <HAL_TIM_MspPostInit+0xa0>)
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003168 <HAL_TIM_MspPostInit+0xa0>)
 80030f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030f4:	6153      	str	r3, [r2, #20]
 80030f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003168 <HAL_TIM_MspPostInit+0xa0>)
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003102:	4b19      	ldr	r3, [pc, #100]	@ (8003168 <HAL_TIM_MspPostInit+0xa0>)
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	4a18      	ldr	r2, [pc, #96]	@ (8003168 <HAL_TIM_MspPostInit+0xa0>)
 8003108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800310c:	6153      	str	r3, [r2, #20]
 800310e:	4b16      	ldr	r3, [pc, #88]	@ (8003168 <HAL_TIM_MspPostInit+0xa0>)
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800311a:	2303      	movs	r3, #3
 800311c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311e:	2302      	movs	r3, #2
 8003120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800312a:	2301      	movs	r3, #1
 800312c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312e:	f107 0314 	add.w	r3, r7, #20
 8003132:	4619      	mov	r1, r3
 8003134:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003138:	f000 fcda 	bl	8003af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800313c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003142:	2302      	movs	r3, #2
 8003144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314a:	2300      	movs	r3, #0
 800314c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800314e:	2301      	movs	r3, #1
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003152:	f107 0314 	add.w	r3, r7, #20
 8003156:	4619      	mov	r1, r3
 8003158:	4804      	ldr	r0, [pc, #16]	@ (800316c <HAL_TIM_MspPostInit+0xa4>)
 800315a:	f000 fcc9 	bl	8003af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800315e:	bf00      	nop
 8003160:	3728      	adds	r7, #40	@ 0x28
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	48000400 	.word	0x48000400

08003170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b092      	sub	sp, #72	@ 0x48
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a8f      	ldr	r2, [pc, #572]	@ (80033cc <HAL_UART_MspInit+0x25c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d131      	bne.n	80031f6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003192:	4b8f      	ldr	r3, [pc, #572]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	4a8e      	ldr	r2, [pc, #568]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003198:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800319c:	61d3      	str	r3, [r2, #28]
 800319e:	4b8c      	ldr	r3, [pc, #560]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80031a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031aa:	4b89      	ldr	r3, [pc, #548]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	4a88      	ldr	r2, [pc, #544]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 80031b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80031b4:	6153      	str	r3, [r2, #20]
 80031b6:	4b86      	ldr	r3, [pc, #536]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80031c6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031d0:	2303      	movs	r3, #3
 80031d2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80031d4:	2305      	movs	r3, #5
 80031d6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031dc:	4619      	mov	r1, r3
 80031de:	487d      	ldr	r0, [pc, #500]	@ (80033d4 <HAL_UART_MspInit+0x264>)
 80031e0:	f000 fc86 	bl	8003af0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80031e4:	2200      	movs	r2, #0
 80031e6:	2100      	movs	r1, #0
 80031e8:	2034      	movs	r0, #52	@ 0x34
 80031ea:	f000 fbce 	bl	800398a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80031ee:	2034      	movs	r0, #52	@ 0x34
 80031f0:	f000 fbe7 	bl	80039c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80031f4:	e0e5      	b.n	80033c2 <HAL_UART_MspInit+0x252>
  else if(huart->Instance==UART5)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a77      	ldr	r2, [pc, #476]	@ (80033d8 <HAL_UART_MspInit+0x268>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d14d      	bne.n	800329c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003200:	4b73      	ldr	r3, [pc, #460]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	4a72      	ldr	r2, [pc, #456]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800320a:	61d3      	str	r3, [r2, #28]
 800320c:	4b70      	ldr	r3, [pc, #448]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003218:	4b6d      	ldr	r3, [pc, #436]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	4a6c      	ldr	r2, [pc, #432]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 800321e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003222:	6153      	str	r3, [r2, #20]
 8003224:	4b6a      	ldr	r3, [pc, #424]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003230:	4b67      	ldr	r3, [pc, #412]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	4a66      	ldr	r2, [pc, #408]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800323a:	6153      	str	r3, [r2, #20]
 800323c:	4b64      	ldr	r3, [pc, #400]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003244:	623b      	str	r3, [r7, #32]
 8003246:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800324c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324e:	2302      	movs	r3, #2
 8003250:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003256:	2303      	movs	r3, #3
 8003258:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800325a:	2305      	movs	r3, #5
 800325c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800325e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003262:	4619      	mov	r1, r3
 8003264:	485b      	ldr	r0, [pc, #364]	@ (80033d4 <HAL_UART_MspInit+0x264>)
 8003266:	f000 fc43 	bl	8003af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800326a:	2304      	movs	r3, #4
 800326c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003276:	2303      	movs	r3, #3
 8003278:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800327a:	2305      	movs	r3, #5
 800327c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800327e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003282:	4619      	mov	r1, r3
 8003284:	4855      	ldr	r0, [pc, #340]	@ (80033dc <HAL_UART_MspInit+0x26c>)
 8003286:	f000 fc33 	bl	8003af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	2100      	movs	r1, #0
 800328e:	2035      	movs	r0, #53	@ 0x35
 8003290:	f000 fb7b 	bl	800398a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003294:	2035      	movs	r0, #53	@ 0x35
 8003296:	f000 fb94 	bl	80039c2 <HAL_NVIC_EnableIRQ>
}
 800329a:	e092      	b.n	80033c2 <HAL_UART_MspInit+0x252>
  else if(huart->Instance==USART1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a4f      	ldr	r2, [pc, #316]	@ (80033e0 <HAL_UART_MspInit+0x270>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d130      	bne.n	8003308 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART1_CLK_ENABLE();
 80032a6:	4b4a      	ldr	r3, [pc, #296]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	4a49      	ldr	r2, [pc, #292]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 80032ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032b0:	6193      	str	r3, [r2, #24]
 80032b2:	4b47      	ldr	r3, [pc, #284]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032be:	4b44      	ldr	r3, [pc, #272]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	4a43      	ldr	r2, [pc, #268]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 80032c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80032c8:	6153      	str	r3, [r2, #20]
 80032ca:	4b41      	ldr	r3, [pc, #260]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80032d6:	2330      	movs	r3, #48	@ 0x30
 80032d8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032e2:	2303      	movs	r3, #3
 80032e4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032e6:	2307      	movs	r3, #7
 80032e8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80032ee:	4619      	mov	r1, r3
 80032f0:	4838      	ldr	r0, [pc, #224]	@ (80033d4 <HAL_UART_MspInit+0x264>)
 80032f2:	f000 fbfd 	bl	8003af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2100      	movs	r1, #0
 80032fa:	2025      	movs	r0, #37	@ 0x25
 80032fc:	f000 fb45 	bl	800398a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003300:	2025      	movs	r0, #37	@ 0x25
 8003302:	f000 fb5e 	bl	80039c2 <HAL_NVIC_EnableIRQ>
}
 8003306:	e05c      	b.n	80033c2 <HAL_UART_MspInit+0x252>
  else if(huart->Instance==USART2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a35      	ldr	r2, [pc, #212]	@ (80033e4 <HAL_UART_MspInit+0x274>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d129      	bne.n	8003366 <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003312:	4b2f      	ldr	r3, [pc, #188]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	4a2e      	ldr	r2, [pc, #184]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800331c:	61d3      	str	r3, [r2, #28]
 800331e:	4b2c      	ldr	r3, [pc, #176]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332a:	4b29      	ldr	r3, [pc, #164]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	4a28      	ldr	r2, [pc, #160]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003334:	6153      	str	r3, [r2, #20]
 8003336:	4b26      	ldr	r3, [pc, #152]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003342:	230c      	movs	r3, #12
 8003344:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800334e:	2303      	movs	r3, #3
 8003350:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003352:	2307      	movs	r3, #7
 8003354:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003356:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800335a:	4619      	mov	r1, r3
 800335c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003360:	f000 fbc6 	bl	8003af0 <HAL_GPIO_Init>
}
 8003364:	e02d      	b.n	80033c2 <HAL_UART_MspInit+0x252>
  else if(huart->Instance==USART3)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1f      	ldr	r2, [pc, #124]	@ (80033e8 <HAL_UART_MspInit+0x278>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d128      	bne.n	80033c2 <HAL_UART_MspInit+0x252>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003370:	4b17      	ldr	r3, [pc, #92]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	4a16      	ldr	r2, [pc, #88]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003376:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800337a:	61d3      	str	r3, [r2, #28]
 800337c:	4b14      	ldr	r3, [pc, #80]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003388:	4b11      	ldr	r3, [pc, #68]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	4a10      	ldr	r2, [pc, #64]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 800338e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003392:	6153      	str	r3, [r2, #20]
 8003394:	4b0e      	ldr	r3, [pc, #56]	@ (80033d0 <HAL_UART_MspInit+0x260>)
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80033a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033a4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033ae:	2303      	movs	r3, #3
 80033b0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033b2:	2307      	movs	r3, #7
 80033b4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033ba:	4619      	mov	r1, r3
 80033bc:	4807      	ldr	r0, [pc, #28]	@ (80033dc <HAL_UART_MspInit+0x26c>)
 80033be:	f000 fb97 	bl	8003af0 <HAL_GPIO_Init>
}
 80033c2:	bf00      	nop
 80033c4:	3748      	adds	r7, #72	@ 0x48
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40004c00 	.word	0x40004c00
 80033d0:	40021000 	.word	0x40021000
 80033d4:	48000800 	.word	0x48000800
 80033d8:	40005000 	.word	0x40005000
 80033dc:	48000c00 	.word	0x48000c00
 80033e0:	40013800 	.word	0x40013800
 80033e4:	40004400 	.word	0x40004400
 80033e8:	40004800 	.word	0x40004800

080033ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003430 <HAL_PCD_MspInit+0x44>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d113      	bne.n	8003426 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <HAL_PCD_MspInit+0x48>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	4a0c      	ldr	r2, [pc, #48]	@ (8003434 <HAL_PCD_MspInit+0x48>)
 8003404:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003408:	61d3      	str	r3, [r2, #28]
 800340a:	4b0a      	ldr	r3, [pc, #40]	@ (8003434 <HAL_PCD_MspInit+0x48>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	2100      	movs	r1, #0
 800341a:	2014      	movs	r0, #20
 800341c:	f000 fab5 	bl	800398a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8003420:	2014      	movs	r0, #20
 8003422:	f000 face 	bl	80039c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40005c00 	.word	0x40005c00
 8003434:	40021000 	.word	0x40021000

08003438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800343c:	bf00      	nop
 800343e:	e7fd      	b.n	800343c <NMI_Handler+0x4>

08003440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003444:	bf00      	nop
 8003446:	e7fd      	b.n	8003444 <HardFault_Handler+0x4>

08003448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800344c:	bf00      	nop
 800344e:	e7fd      	b.n	800344c <MemManage_Handler+0x4>

08003450 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <BusFault_Handler+0x4>

08003458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <UsageFault_Handler+0x4>

08003460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800346e:	b480      	push	{r7}
 8003470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800348e:	f000 f981 	bl	8003794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800349c:	4802      	ldr	r0, [pc, #8]	@ (80034a8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800349e:	f000 fdaa 	bl	8003ff6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000680 	.word	0x20000680

080034ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034b0:	4803      	ldr	r0, [pc, #12]	@ (80034c0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80034b2:	f004 f89b 	bl	80075ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80034b6:	4803      	ldr	r0, [pc, #12]	@ (80034c4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80034b8:	f004 f898 	bl	80075ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80034bc:	bf00      	nop
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000210 	.word	0x20000210
 80034c4:	2000038c 	.word	0x2000038c

080034c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034cc:	4802      	ldr	r0, [pc, #8]	@ (80034d8 <USART1_IRQHandler+0x10>)
 80034ce:	f005 f867 	bl	80085a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	200004e8 	.word	0x200004e8

080034dc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80034e0:	4802      	ldr	r0, [pc, #8]	@ (80034ec <UART4_IRQHandler+0x10>)
 80034e2:	f005 f85d 	bl	80085a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	200003d8 	.word	0x200003d8

080034f0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80034f4:	4802      	ldr	r0, [pc, #8]	@ (8003500 <UART5_IRQHandler+0x10>)
 80034f6:	f005 f853 	bl	80085a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000460 	.word	0x20000460

08003504 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return 1;
 8003508:	2301      	movs	r3, #1
}
 800350a:	4618      	mov	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <_kill>:

int _kill(int pid, int sig)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800351e:	f008 fe6d 	bl	800c1fc <__errno>
 8003522:	4603      	mov	r3, r0
 8003524:	2216      	movs	r2, #22
 8003526:	601a      	str	r2, [r3, #0]
  return -1;
 8003528:	f04f 33ff 	mov.w	r3, #4294967295
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <_exit>:

void _exit (int status)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800353c:	f04f 31ff 	mov.w	r1, #4294967295
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ffe7 	bl	8003514 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003546:	bf00      	nop
 8003548:	e7fd      	b.n	8003546 <_exit+0x12>

0800354a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b086      	sub	sp, #24
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	e00a      	b.n	8003572 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800355c:	f3af 8000 	nop.w
 8003560:	4601      	mov	r1, r0
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	60ba      	str	r2, [r7, #8]
 8003568:	b2ca      	uxtb	r2, r1
 800356a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	3301      	adds	r3, #1
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	429a      	cmp	r2, r3
 8003578:	dbf0      	blt.n	800355c <_read+0x12>
  }

  return len;
 800357a:	687b      	ldr	r3, [r7, #4]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	e009      	b.n	80035aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	60ba      	str	r2, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3301      	adds	r3, #1
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	dbf1      	blt.n	8003596 <_write+0x12>
  }
  return len;
 80035b2:	687b      	ldr	r3, [r7, #4]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <_close>:

int _close(int file)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035e4:	605a      	str	r2, [r3, #4]
  return 0;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <_isatty>:

int _isatty(int file)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035fc:	2301      	movs	r3, #1
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800362c:	4a14      	ldr	r2, [pc, #80]	@ (8003680 <_sbrk+0x5c>)
 800362e:	4b15      	ldr	r3, [pc, #84]	@ (8003684 <_sbrk+0x60>)
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003638:	4b13      	ldr	r3, [pc, #76]	@ (8003688 <_sbrk+0x64>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003640:	4b11      	ldr	r3, [pc, #68]	@ (8003688 <_sbrk+0x64>)
 8003642:	4a12      	ldr	r2, [pc, #72]	@ (800368c <_sbrk+0x68>)
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003646:	4b10      	ldr	r3, [pc, #64]	@ (8003688 <_sbrk+0x64>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	429a      	cmp	r2, r3
 8003652:	d207      	bcs.n	8003664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003654:	f008 fdd2 	bl	800c1fc <__errno>
 8003658:	4603      	mov	r3, r0
 800365a:	220c      	movs	r2, #12
 800365c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800365e:	f04f 33ff 	mov.w	r3, #4294967295
 8003662:	e009      	b.n	8003678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003664:	4b08      	ldr	r3, [pc, #32]	@ (8003688 <_sbrk+0x64>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800366a:	4b07      	ldr	r3, [pc, #28]	@ (8003688 <_sbrk+0x64>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	4a05      	ldr	r2, [pc, #20]	@ (8003688 <_sbrk+0x64>)
 8003674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003676:	68fb      	ldr	r3, [r7, #12]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20010000 	.word	0x20010000
 8003684:	00000400 	.word	0x00000400
 8003688:	20000a58 	.word	0x20000a58
 800368c:	20000bb0 	.word	0x20000bb0

08003690 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003694:	4b06      	ldr	r3, [pc, #24]	@ (80036b0 <SystemInit+0x20>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369a:	4a05      	ldr	r2, [pc, #20]	@ (80036b0 <SystemInit+0x20>)
 800369c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80036b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036ec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80036b8:	f7ff ffea 	bl	8003690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036bc:	480c      	ldr	r0, [pc, #48]	@ (80036f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80036be:	490d      	ldr	r1, [pc, #52]	@ (80036f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036c0:	4a0d      	ldr	r2, [pc, #52]	@ (80036f8 <LoopForever+0xe>)
  movs r3, #0
 80036c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036c4:	e002      	b.n	80036cc <LoopCopyDataInit>

080036c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ca:	3304      	adds	r3, #4

080036cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036d0:	d3f9      	bcc.n	80036c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036d2:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80036d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003700 <LoopForever+0x16>)
  movs r3, #0
 80036d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d8:	e001      	b.n	80036de <LoopFillZerobss>

080036da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036dc:	3204      	adds	r2, #4

080036de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036e0:	d3fb      	bcc.n	80036da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036e2:	f008 fd91 	bl	800c208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036e6:	f7fd fc57 	bl	8000f98 <main>

080036ea <LoopForever>:

LoopForever:
    b LoopForever
 80036ea:	e7fe      	b.n	80036ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80036ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80036f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036f4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80036f8:	0800ffb0 	.word	0x0800ffb0
  ldr r2, =_sbss
 80036fc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003700:	20000bac 	.word	0x20000bac

08003704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003704:	e7fe      	b.n	8003704 <ADC1_2_IRQHandler>
	...

08003708 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800370c:	4b08      	ldr	r3, [pc, #32]	@ (8003730 <HAL_Init+0x28>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a07      	ldr	r2, [pc, #28]	@ (8003730 <HAL_Init+0x28>)
 8003712:	f043 0310 	orr.w	r3, r3, #16
 8003716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003718:	2003      	movs	r0, #3
 800371a:	f000 f92b 	bl	8003974 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800371e:	2000      	movs	r0, #0
 8003720:	f000 f808 	bl	8003734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003724:	f7ff fb26 	bl	8002d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40022000 	.word	0x40022000

08003734 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800373c:	4b12      	ldr	r3, [pc, #72]	@ (8003788 <HAL_InitTick+0x54>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b12      	ldr	r3, [pc, #72]	@ (800378c <HAL_InitTick+0x58>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	4619      	mov	r1, r3
 8003746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800374a:	fbb3 f3f1 	udiv	r3, r3, r1
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f943 	bl	80039de <HAL_SYSTICK_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e00e      	b.n	8003780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b0f      	cmp	r3, #15
 8003766:	d80a      	bhi.n	800377e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003768:	2200      	movs	r2, #0
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	f000 f90b 	bl	800398a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003774:	4a06      	ldr	r2, [pc, #24]	@ (8003790 <HAL_InitTick+0x5c>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000000 	.word	0x20000000
 800378c:	20000008 	.word	0x20000008
 8003790:	20000004 	.word	0x20000004

08003794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003798:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <HAL_IncTick+0x20>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_IncTick+0x24>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	4a04      	ldr	r2, [pc, #16]	@ (80037b8 <HAL_IncTick+0x24>)
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000008 	.word	0x20000008
 80037b8:	20000a5c 	.word	0x20000a5c

080037bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return uwTick;  
 80037c0:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <HAL_GetTick+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000a5c 	.word	0x20000a5c

080037d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037f0:	4013      	ands	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003806:	4a04      	ldr	r2, [pc, #16]	@ (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	60d3      	str	r3, [r2, #12]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003820:	4b04      	ldr	r3, [pc, #16]	@ (8003834 <__NVIC_GetPriorityGrouping+0x18>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f003 0307 	and.w	r3, r3, #7
}
 800382a:	4618      	mov	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	2b00      	cmp	r3, #0
 8003848:	db0b      	blt.n	8003862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	f003 021f 	and.w	r2, r3, #31
 8003850:	4907      	ldr	r1, [pc, #28]	@ (8003870 <__NVIC_EnableIRQ+0x38>)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	2001      	movs	r0, #1
 800385a:	fa00 f202 	lsl.w	r2, r0, r2
 800385e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000e100 	.word	0xe000e100

08003874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	6039      	str	r1, [r7, #0]
 800387e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003884:	2b00      	cmp	r3, #0
 8003886:	db0a      	blt.n	800389e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	490c      	ldr	r1, [pc, #48]	@ (80038c0 <__NVIC_SetPriority+0x4c>)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	0112      	lsls	r2, r2, #4
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	440b      	add	r3, r1
 8003898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800389c:	e00a      	b.n	80038b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4908      	ldr	r1, [pc, #32]	@ (80038c4 <__NVIC_SetPriority+0x50>)
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	3b04      	subs	r3, #4
 80038ac:	0112      	lsls	r2, r2, #4
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	440b      	add	r3, r1
 80038b2:	761a      	strb	r2, [r3, #24]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000e100 	.word	0xe000e100
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	@ 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f1c3 0307 	rsb	r3, r3, #7
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	bf28      	it	cs
 80038e6:	2304      	movcs	r3, #4
 80038e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d902      	bls.n	80038f8 <NVIC_EncodePriority+0x30>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3b03      	subs	r3, #3
 80038f6:	e000      	b.n	80038fa <NVIC_EncodePriority+0x32>
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43da      	mvns	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	401a      	ands	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003910:	f04f 31ff 	mov.w	r1, #4294967295
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	43d9      	mvns	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003920:	4313      	orrs	r3, r2
         );
}
 8003922:	4618      	mov	r0, r3
 8003924:	3724      	adds	r7, #36	@ 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3b01      	subs	r3, #1
 800393c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003940:	d301      	bcc.n	8003946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003942:	2301      	movs	r3, #1
 8003944:	e00f      	b.n	8003966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003946:	4a0a      	ldr	r2, [pc, #40]	@ (8003970 <SysTick_Config+0x40>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800394e:	210f      	movs	r1, #15
 8003950:	f04f 30ff 	mov.w	r0, #4294967295
 8003954:	f7ff ff8e 	bl	8003874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003958:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <SysTick_Config+0x40>)
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800395e:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <SysTick_Config+0x40>)
 8003960:	2207      	movs	r2, #7
 8003962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	e000e010 	.word	0xe000e010

08003974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff29 	bl	80037d4 <__NVIC_SetPriorityGrouping>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b086      	sub	sp, #24
 800398e:	af00      	add	r7, sp, #0
 8003990:	4603      	mov	r3, r0
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800399c:	f7ff ff3e 	bl	800381c <__NVIC_GetPriorityGrouping>
 80039a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	6978      	ldr	r0, [r7, #20]
 80039a8:	f7ff ff8e 	bl	80038c8 <NVIC_EncodePriority>
 80039ac:	4602      	mov	r2, r0
 80039ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b2:	4611      	mov	r1, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ff5d 	bl	8003874 <__NVIC_SetPriority>
}
 80039ba:	bf00      	nop
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	4603      	mov	r3, r0
 80039ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ff31 	bl	8003838 <__NVIC_EnableIRQ>
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff ffa2 	bl	8003930 <SysTick_Config>
 80039ec:	4603      	mov	r3, r0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e02e      	b.n	8003a66 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d008      	beq.n	8003a24 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2204      	movs	r2, #4
 8003a16:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e020      	b.n	8003a66 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 020e 	bic.w	r2, r2, #14
 8003a32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d005      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
 8003a92:	e027      	b.n	8003ae4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 020e 	bic.w	r2, r2, #14
 8003aa2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abc:	2101      	movs	r1, #1
 8003abe:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	4798      	blx	r3
    }
  }
  return status;
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003afe:	e160      	b.n	8003dc2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	2101      	movs	r1, #1
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8152 	beq.w	8003dbc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d005      	beq.n	8003b30 <HAL_GPIO_Init+0x40>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d130      	bne.n	8003b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b66:	2201      	movs	r2, #1
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4013      	ands	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	091b      	lsrs	r3, r3, #4
 8003b7c:	f003 0201 	and.w	r2, r3, #1
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d017      	beq.n	8003bce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	2203      	movs	r2, #3
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d123      	bne.n	8003c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	08da      	lsrs	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3208      	adds	r2, #8
 8003be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	220f      	movs	r2, #15
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	08da      	lsrs	r2, r3, #3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3208      	adds	r2, #8
 8003c1c:	6939      	ldr	r1, [r7, #16]
 8003c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0203 	and.w	r2, r3, #3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80ac 	beq.w	8003dbc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c64:	4b5e      	ldr	r3, [pc, #376]	@ (8003de0 <HAL_GPIO_Init+0x2f0>)
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	4a5d      	ldr	r2, [pc, #372]	@ (8003de0 <HAL_GPIO_Init+0x2f0>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6193      	str	r3, [r2, #24]
 8003c70:	4b5b      	ldr	r3, [pc, #364]	@ (8003de0 <HAL_GPIO_Init+0x2f0>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c7c:	4a59      	ldr	r2, [pc, #356]	@ (8003de4 <HAL_GPIO_Init+0x2f4>)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	220f      	movs	r2, #15
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ca6:	d025      	beq.n	8003cf4 <HAL_GPIO_Init+0x204>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a4f      	ldr	r2, [pc, #316]	@ (8003de8 <HAL_GPIO_Init+0x2f8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d01f      	beq.n	8003cf0 <HAL_GPIO_Init+0x200>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a4e      	ldr	r2, [pc, #312]	@ (8003dec <HAL_GPIO_Init+0x2fc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d019      	beq.n	8003cec <HAL_GPIO_Init+0x1fc>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a4d      	ldr	r2, [pc, #308]	@ (8003df0 <HAL_GPIO_Init+0x300>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d013      	beq.n	8003ce8 <HAL_GPIO_Init+0x1f8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a4c      	ldr	r2, [pc, #304]	@ (8003df4 <HAL_GPIO_Init+0x304>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_GPIO_Init+0x1f4>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a4b      	ldr	r2, [pc, #300]	@ (8003df8 <HAL_GPIO_Init+0x308>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d007      	beq.n	8003ce0 <HAL_GPIO_Init+0x1f0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a4a      	ldr	r2, [pc, #296]	@ (8003dfc <HAL_GPIO_Init+0x30c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d101      	bne.n	8003cdc <HAL_GPIO_Init+0x1ec>
 8003cd8:	2306      	movs	r3, #6
 8003cda:	e00c      	b.n	8003cf6 <HAL_GPIO_Init+0x206>
 8003cdc:	2307      	movs	r3, #7
 8003cde:	e00a      	b.n	8003cf6 <HAL_GPIO_Init+0x206>
 8003ce0:	2305      	movs	r3, #5
 8003ce2:	e008      	b.n	8003cf6 <HAL_GPIO_Init+0x206>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	e006      	b.n	8003cf6 <HAL_GPIO_Init+0x206>
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e004      	b.n	8003cf6 <HAL_GPIO_Init+0x206>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e002      	b.n	8003cf6 <HAL_GPIO_Init+0x206>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <HAL_GPIO_Init+0x206>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	f002 0203 	and.w	r2, r2, #3
 8003cfc:	0092      	lsls	r2, r2, #2
 8003cfe:	4093      	lsls	r3, r2
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d06:	4937      	ldr	r1, [pc, #220]	@ (8003de4 <HAL_GPIO_Init+0x2f4>)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	089b      	lsrs	r3, r3, #2
 8003d0c:	3302      	adds	r3, #2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d14:	4b3a      	ldr	r3, [pc, #232]	@ (8003e00 <HAL_GPIO_Init+0x310>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4013      	ands	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003d38:	4a31      	ldr	r2, [pc, #196]	@ (8003e00 <HAL_GPIO_Init+0x310>)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d3e:	4b30      	ldr	r3, [pc, #192]	@ (8003e00 <HAL_GPIO_Init+0x310>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	43db      	mvns	r3, r3
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d62:	4a27      	ldr	r2, [pc, #156]	@ (8003e00 <HAL_GPIO_Init+0x310>)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d68:	4b25      	ldr	r3, [pc, #148]	@ (8003e00 <HAL_GPIO_Init+0x310>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4013      	ands	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e00 <HAL_GPIO_Init+0x310>)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d92:	4b1b      	ldr	r3, [pc, #108]	@ (8003e00 <HAL_GPIO_Init+0x310>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003db6:	4a12      	ldr	r2, [pc, #72]	@ (8003e00 <HAL_GPIO_Init+0x310>)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f47f ae97 	bne.w	8003b00 <HAL_GPIO_Init+0x10>
  }
}
 8003dd2:	bf00      	nop
 8003dd4:	bf00      	nop
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40010000 	.word	0x40010000
 8003de8:	48000400 	.word	0x48000400
 8003dec:	48000800 	.word	0x48000800
 8003df0:	48000c00 	.word	0x48000c00
 8003df4:	48001000 	.word	0x48001000
 8003df8:	48001400 	.word	0x48001400
 8003dfc:	48001800 	.word	0x48001800
 8003e00:	40010400 	.word	0x40010400

08003e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	807b      	strh	r3, [r7, #2]
 8003e10:	4613      	mov	r3, r2
 8003e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e14:	787b      	ldrb	r3, [r7, #1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e1a:	887a      	ldrh	r2, [r7, #2]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e20:	e002      	b.n	8003e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e46:	887a      	ldrh	r2, [r7, #2]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	041a      	lsls	r2, r3, #16
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	43d9      	mvns	r1, r3
 8003e52:	887b      	ldrh	r3, [r7, #2]
 8003e54:	400b      	ands	r3, r1
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	619a      	str	r2, [r3, #24]
}
 8003e5c:	bf00      	nop
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e0b9      	b.n	8003fee <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff faac 	bl	80033ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2203      	movs	r2, #3
 8003e98:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f005 fd2b 	bl	80098fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]
 8003eaa:	e03e      	b.n	8003f2a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003eac:	7bfa      	ldrb	r2, [r7, #15]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	440b      	add	r3, r1
 8003eba:	3311      	adds	r3, #17
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ec0:	7bfa      	ldrb	r2, [r7, #15]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	440b      	add	r3, r1
 8003ece:	3310      	adds	r3, #16
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ed4:	7bfa      	ldrb	r2, [r7, #15]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	440b      	add	r3, r1
 8003ee2:	3313      	adds	r3, #19
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ee8:	7bfa      	ldrb	r2, [r7, #15]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	440b      	add	r3, r1
 8003ef6:	3320      	adds	r3, #32
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003efc:	7bfa      	ldrb	r2, [r7, #15]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	440b      	add	r3, r1
 8003f0a:	3324      	adds	r3, #36	@ 0x24
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	440b      	add	r3, r1
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	3301      	adds	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	791b      	ldrb	r3, [r3, #4]
 8003f2e:	7bfa      	ldrb	r2, [r7, #15]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d3bb      	bcc.n	8003eac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f34:	2300      	movs	r3, #0
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	e044      	b.n	8003fc4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f3a:	7bfa      	ldrb	r2, [r7, #15]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	440b      	add	r3, r1
 8003f48:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	440b      	add	r3, r1
 8003f5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f62:	7bfa      	ldrb	r2, [r7, #15]
 8003f64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f66:	7bfa      	ldrb	r2, [r7, #15]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	440b      	add	r3, r1
 8003f74:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f7c:	7bfa      	ldrb	r2, [r7, #15]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	440b      	add	r3, r1
 8003f8a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f92:	7bfa      	ldrb	r2, [r7, #15]
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	440b      	add	r3, r1
 8003fa0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	440b      	add	r3, r1
 8003fb6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	791b      	ldrb	r3, [r3, #4]
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d3b5      	bcc.n	8003f3a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003fda:	f005 fcaa 	bl	8009932 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f007 f879 	bl	800b0fa <USB_ReadInterrupts>
 8004008:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f930 	bl	800427a <PCD_EP_ISR_Handler>

    return;
 800401a:	e0bd      	b.n	8004198 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004022:	2b00      	cmp	r3, #0
 8004024:	d013      	beq.n	800404e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800402e:	b29a      	uxth	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004038:	b292      	uxth	r2, r2
 800403a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f8d9 	bl	80041f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004044:	2100      	movs	r1, #0
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f8f3 	bl	8004232 <HAL_PCD_SetAddress>

    return;
 800404c:	e0a4      	b.n	8004198 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00c      	beq.n	8004072 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004060:	b29a      	uxth	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800406a:	b292      	uxth	r2, r2
 800406c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004070:	e092      	b.n	8004198 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00c      	beq.n	8004096 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004084:	b29a      	uxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800408e:	b292      	uxth	r2, r2
 8004090:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004094:	e080      	b.n	8004198 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d027      	beq.n	80040f0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0204 	bic.w	r2, r2, #4
 80040b2:	b292      	uxth	r2, r2
 80040b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0208 	bic.w	r2, r2, #8
 80040ca:	b292      	uxth	r2, r2
 80040cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f8a4 	bl	800421e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80040de:	b29a      	uxth	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040e8:	b292      	uxth	r2, r2
 80040ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80040ee:	e053      	b.n	8004198 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d027      	beq.n	800414a <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004102:	b29a      	uxth	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0208 	orr.w	r2, r2, #8
 800410c:	b292      	uxth	r2, r2
 800410e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800411a:	b29a      	uxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004124:	b292      	uxth	r2, r2
 8004126:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004132:	b29a      	uxth	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0204 	orr.w	r2, r2, #4
 800413c:	b292      	uxth	r2, r2
 800413e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f861 	bl	800420a <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004148:	e026      	b.n	8004198 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00f      	beq.n	8004174 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800415c:	b29a      	uxth	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004166:	b292      	uxth	r2, r2
 8004168:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f838 	bl	80041e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004172:	e011      	b.n	8004198 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004186:	b29a      	uxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004190:	b292      	uxth	r2, r2
 8004192:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004196:	bf00      	nop
  }
}
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	460b      	mov	r3, r1
 800423c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_PCD_SetAddress+0x1a>
 8004248:	2302      	movs	r3, #2
 800424a:	e012      	b.n	8004272 <HAL_PCD_SetAddress+0x40>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	4611      	mov	r1, r2
 8004262:	4618      	mov	r0, r3
 8004264:	f006 ff35 	bl	800b0d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b096      	sub	sp, #88	@ 0x58
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004282:	e3ad      	b.n	80049e0 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800428c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004290:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 800429e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f040 816f 	bne.w	8004586 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80042a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d14c      	bne.n	800434e <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80042c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c4:	81fb      	strh	r3, [r7, #14]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	89fb      	ldrh	r3, [r7, #14]
 80042cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3310      	adds	r3, #16
 80042dc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4413      	add	r3, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	4413      	add	r3, r2
 80042f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004304:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	441a      	add	r2, r3
 8004310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004312:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004314:	2100      	movs	r1, #0
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ff4d 	bl	80041b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	7b1b      	ldrb	r3, [r3, #12]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 835c 	beq.w	80049e0 <PCD_EP_ISR_Handler+0x766>
 8004328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f040 8357 	bne.w	80049e0 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	7b1b      	ldrb	r3, [r3, #12]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800433c:	b2da      	uxtb	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	731a      	strb	r2, [r3, #12]
 800434c:	e348      	b.n	80049e0 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004354:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004360:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004368:	2b00      	cmp	r3, #0
 800436a:	d032      	beq.n	80043d2 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004374:	b29b      	uxth	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	4413      	add	r3, r2
 8004386:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004392:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800439e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80043a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f006 fef9 	bl	800b19e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80043b8:	4013      	ands	r3, r2
 80043ba:	823b      	strh	r3, [r7, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	8a3a      	ldrh	r2, [r7, #16]
 80043c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043c6:	b292      	uxth	r2, r2
 80043c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff feff 	bl	80041ce <HAL_PCD_SetupStageCallback>
 80043d0:	e306      	b.n	80049e0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80043d2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f280 8302 	bge.w	80049e0 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80043e8:	4013      	ands	r3, r2
 80043ea:	83fb      	strh	r3, [r7, #30]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	8bfa      	ldrh	r2, [r7, #30]
 80043f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043f6:	b292      	uxth	r2, r2
 80043f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004402:	b29b      	uxth	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4413      	add	r3, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6812      	ldr	r2, [r2, #0]
 8004412:	4413      	add	r3, r2
 8004414:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800441e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004420:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d019      	beq.n	800445e <PCD_EP_ISR_Handler+0x1e4>
 800442a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d015      	beq.n	800445e <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004438:	6959      	ldr	r1, [r3, #20]
 800443a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800443c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800443e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004440:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004442:	b29b      	uxth	r3, r3
 8004444:	f006 feab 	bl	800b19e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444a:	695a      	ldr	r2, [r3, #20]
 800444c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	441a      	add	r2, r3
 8004452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004454:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004456:	2100      	movs	r1, #0
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff fea0 	bl	800419e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004468:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800446c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004470:	2b00      	cmp	r3, #0
 8004472:	f040 82b5 	bne.w	80049e0 <PCD_EP_ISR_Handler+0x766>
 8004476:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800447a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800447e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004482:	f000 82ad 	beq.w	80049e0 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004494:	b29b      	uxth	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	4413      	add	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	801a      	strh	r2, [r3, #0]
 80044b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10a      	bne.n	80044d4 <PCD_EP_ISR_Handler+0x25a>
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	801a      	strh	r2, [r3, #0]
 80044d2:	e039      	b.n	8004548 <PCD_EP_ISR_Handler+0x2ce>
 80044d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80044da:	d818      	bhi.n	800450e <PCD_EP_ISR_Handler+0x294>
 80044dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	085b      	lsrs	r3, r3, #1
 80044e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <PCD_EP_ISR_Handler+0x27c>
 80044f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f2:	3301      	adds	r3, #1
 80044f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044fe:	b29b      	uxth	r3, r3
 8004500:	029b      	lsls	r3, r3, #10
 8004502:	b29b      	uxth	r3, r3
 8004504:	4313      	orrs	r3, r2
 8004506:	b29a      	uxth	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	e01c      	b.n	8004548 <PCD_EP_ISR_Handler+0x2ce>
 800450e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	647b      	str	r3, [r7, #68]	@ 0x44
 8004516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <PCD_EP_ISR_Handler+0x2ae>
 8004522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004524:	3b01      	subs	r3, #1
 8004526:	647b      	str	r3, [r7, #68]	@ 0x44
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29a      	uxth	r2, r3
 800452e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004530:	b29b      	uxth	r3, r3
 8004532:	029b      	lsls	r3, r3, #10
 8004534:	b29b      	uxth	r3, r3
 8004536:	4313      	orrs	r3, r2
 8004538:	b29b      	uxth	r3, r3
 800453a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800453e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004542:	b29a      	uxth	r2, r3
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004558:	827b      	strh	r3, [r7, #18]
 800455a:	8a7b      	ldrh	r3, [r7, #18]
 800455c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004560:	827b      	strh	r3, [r7, #18]
 8004562:	8a7b      	ldrh	r3, [r7, #18]
 8004564:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004568:	827b      	strh	r3, [r7, #18]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	8a7b      	ldrh	r3, [r7, #18]
 8004570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800457c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004580:	b29b      	uxth	r3, r3
 8004582:	8013      	strh	r3, [r2, #0]
 8004584:	e22c      	b.n	80049e0 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800459a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f280 80f6 	bge.w	8004790 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80045ba:	4013      	ands	r3, r2
 80045bc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80045d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80045d6:	b292      	uxth	r2, r2
 80045d8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80045da:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	4413      	add	r3, r2
 80045ee:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80045f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045f2:	7b1b      	ldrb	r3, [r3, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d123      	bne.n	8004640 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004600:	b29b      	uxth	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	4413      	add	r3, r2
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	4413      	add	r3, r2
 8004612:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800461c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004620:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 808e 	beq.w	8004746 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004630:	6959      	ldr	r1, [r3, #20]
 8004632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004634:	88da      	ldrh	r2, [r3, #6]
 8004636:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800463a:	f006 fdb0 	bl	800b19e <USB_ReadPMA>
 800463e:	e082      	b.n	8004746 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004642:	78db      	ldrb	r3, [r3, #3]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d10a      	bne.n	800465e <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004648:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800464c:	461a      	mov	r2, r3
 800464e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f9d3 	bl	80049fc <HAL_PCD_EP_DB_Receive>
 8004656:	4603      	mov	r3, r0
 8004658:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800465c:	e073      	b.n	8004746 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004678:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800468e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800469a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800469e:	b29b      	uxth	r3, r3
 80046a0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d022      	beq.n	8004702 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4413      	add	r3, r2
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	4413      	add	r3, r2
 80046d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046e0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80046e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d02c      	beq.n	8004746 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f2:	6959      	ldr	r1, [r3, #20]
 80046f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f6:	891a      	ldrh	r2, [r3, #8]
 80046f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80046fc:	f006 fd4f 	bl	800b19e <USB_ReadPMA>
 8004700:	e021      	b.n	8004746 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800470a:	b29b      	uxth	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4413      	add	r3, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6812      	ldr	r2, [r2, #0]
 800471a:	4413      	add	r3, r2
 800471c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004726:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800472a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004738:	6959      	ldr	r1, [r3, #20]
 800473a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800473c:	895a      	ldrh	r2, [r3, #10]
 800473e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004742:	f006 fd2c 	bl	800b19e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004748:	69da      	ldr	r2, [r3, #28]
 800474a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800474e:	441a      	add	r2, r3
 8004750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004752:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800475c:	441a      	add	r2, r3
 800475e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004760:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <PCD_EP_ISR_Handler+0x4fc>
 800476a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800476e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	429a      	cmp	r2, r3
 8004774:	d206      	bcs.n	8004784 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	4619      	mov	r1, r3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff fd0e 	bl	800419e <HAL_PCD_DataOutStageCallback>
 8004782:	e005      	b.n	8004790 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800478a:	4618      	mov	r0, r3
 800478c:	f005 f8ef 	bl	800996e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004790:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8121 	beq.w	80049e0 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800479e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	3310      	adds	r3, #16
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	4413      	add	r3, r2
 80047b0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80047c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047cc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80047e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80047ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f0:	78db      	ldrb	r3, [r3, #3]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	f040 80a2 	bne.w	800493c <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80047f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047fa:	2200      	movs	r2, #0
 80047fc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80047fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004800:	7b1b      	ldrb	r3, [r3, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 8093 	beq.w	800492e <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004808:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800480c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d046      	beq.n	80048a2 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004816:	785b      	ldrb	r3, [r3, #1]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d126      	bne.n	800486a <PCD_EP_ISR_Handler+0x5f0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800482a:	b29b      	uxth	r3, r3
 800482c:	461a      	mov	r2, r3
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	4413      	add	r3, r2
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
 8004834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	00da      	lsls	r2, r3, #3
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	4413      	add	r3, r2
 800483e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004842:	623b      	str	r3, [r7, #32]
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800484e:	b29a      	uxth	r2, r3
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	801a      	strh	r2, [r3, #0]
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b29b      	uxth	r3, r3
 800485a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800485e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004862:	b29a      	uxth	r2, r3
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	801a      	strh	r2, [r3, #0]
 8004868:	e061      	b.n	800492e <PCD_EP_ISR_Handler+0x6b4>
 800486a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800486c:	785b      	ldrb	r3, [r3, #1]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d15d      	bne.n	800492e <PCD_EP_ISR_Handler+0x6b4>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004880:	b29b      	uxth	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004886:	4413      	add	r3, r2
 8004888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800488a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	00da      	lsls	r2, r3, #3
 8004890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004892:	4413      	add	r3, r2
 8004894:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004898:	62bb      	str	r3, [r7, #40]	@ 0x28
 800489a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489c:	2200      	movs	r2, #0
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	e045      	b.n	800492e <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d126      	bne.n	80048fe <PCD_EP_ISR_Handler+0x684>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048be:	b29b      	uxth	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c4:	4413      	add	r3, r2
 80048c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	00da      	lsls	r2, r3, #3
 80048ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d0:	4413      	add	r3, r2
 80048d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80048d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fa:	801a      	strh	r2, [r3, #0]
 80048fc:	e017      	b.n	800492e <PCD_EP_ISR_Handler+0x6b4>
 80048fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004900:	785b      	ldrb	r3, [r3, #1]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d113      	bne.n	800492e <PCD_EP_ISR_Handler+0x6b4>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800490e:	b29b      	uxth	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004914:	4413      	add	r3, r2
 8004916:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	00da      	lsls	r2, r3, #3
 800491e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004920:	4413      	add	r3, r2
 8004922:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004926:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492a:	2200      	movs	r2, #0
 800492c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800492e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff fc3e 	bl	80041b6 <HAL_PCD_DataInStageCallback>
 800493a:	e051      	b.n	80049e0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800493c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004944:	2b00      	cmp	r3, #0
 8004946:	d144      	bne.n	80049d2 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004950:	b29b      	uxth	r3, r3
 8004952:	461a      	mov	r2, r3
 8004954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4413      	add	r3, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6812      	ldr	r2, [r2, #0]
 8004960:	4413      	add	r3, r2
 8004962:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800496c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004972:	699a      	ldr	r2, [r3, #24]
 8004974:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004978:	429a      	cmp	r2, r3
 800497a:	d907      	bls.n	800498c <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800497c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800497e:	699a      	ldr	r2, [r3, #24]
 8004980:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004984:	1ad2      	subs	r2, r2, r3
 8004986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004988:	619a      	str	r2, [r3, #24]
 800498a:	e002      	b.n	8004992 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800498c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800498e:	2200      	movs	r2, #0
 8004990:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800499a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	4619      	mov	r1, r3
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff fc08 	bl	80041b6 <HAL_PCD_DataInStageCallback>
 80049a6:	e01b      	b.n	80049e0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80049a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049aa:	695a      	ldr	r2, [r3, #20]
 80049ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80049b0:	441a      	add	r2, r3
 80049b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80049b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b8:	69da      	ldr	r2, [r3, #28]
 80049ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80049be:	441a      	add	r2, r3
 80049c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049c2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049ca:	4618      	mov	r0, r3
 80049cc:	f004 ffcf 	bl	800996e <USB_EPStartXfer>
 80049d0:	e006      	b.n	80049e0 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80049d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80049d6:	461a      	mov	r2, r3
 80049d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f917 	bl	8004c0e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	b21b      	sxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f6ff ac49 	blt.w	8004284 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3758      	adds	r7, #88	@ 0x58
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	4613      	mov	r3, r2
 8004a08:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d07c      	beq.n	8004b0e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a38:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	8b7b      	ldrh	r3, [r7, #26]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d306      	bcc.n	8004a52 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	8b7b      	ldrh	r3, [r7, #26]
 8004a4a:	1ad2      	subs	r2, r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	619a      	str	r2, [r3, #24]
 8004a50:	e002      	b.n	8004a58 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2200      	movs	r2, #0
 8004a56:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d123      	bne.n	8004aa8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7a:	833b      	strh	r3, [r7, #24]
 8004a7c:	8b3b      	ldrh	r3, [r7, #24]
 8004a7e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a82:	833b      	strh	r3, [r7, #24]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	441a      	add	r2, r3
 8004a92:	8b3b      	ldrh	r3, [r7, #24]
 8004a94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01f      	beq.n	8004af2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004acc:	82fb      	strh	r3, [r7, #22]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	441a      	add	r2, r3
 8004adc:	8afb      	ldrh	r3, [r7, #22]
 8004ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004af2:	8b7b      	ldrh	r3, [r7, #26]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8085 	beq.w	8004c04 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6959      	ldr	r1, [r3, #20]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	891a      	ldrh	r2, [r3, #8]
 8004b06:	8b7b      	ldrh	r3, [r7, #26]
 8004b08:	f006 fb49 	bl	800b19e <USB_ReadPMA>
 8004b0c:	e07a      	b.n	8004c04 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4413      	add	r3, r2
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	4413      	add	r3, r2
 8004b28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b32:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	699a      	ldr	r2, [r3, #24]
 8004b38:	8b7b      	ldrh	r3, [r7, #26]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d306      	bcc.n	8004b4c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	8b7b      	ldrh	r3, [r7, #26]
 8004b44:	1ad2      	subs	r2, r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	619a      	str	r2, [r3, #24]
 8004b4a:	e002      	b.n	8004b52 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d123      	bne.n	8004ba2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b74:	83fb      	strh	r3, [r7, #30]
 8004b76:	8bfb      	ldrh	r3, [r7, #30]
 8004b78:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b7c:	83fb      	strh	r3, [r7, #30]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	441a      	add	r2, r3
 8004b8c:	8bfb      	ldrh	r3, [r7, #30]
 8004b8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d11f      	bne.n	8004bec <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc6:	83bb      	strh	r3, [r7, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	441a      	add	r2, r3
 8004bd6:	8bbb      	ldrh	r3, [r7, #28]
 8004bd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004be4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004bec:	8b7b      	ldrh	r3, [r7, #26]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	6959      	ldr	r1, [r3, #20]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	895a      	ldrh	r2, [r3, #10]
 8004bfe:	8b7b      	ldrh	r3, [r7, #26]
 8004c00:	f006 facd 	bl	800b19e <USB_ReadPMA>
    }
  }

  return count;
 8004c04:	8b7b      	ldrh	r3, [r7, #26]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b0a4      	sub	sp, #144	@ 0x90
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 81db 	beq.w	8004fde <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	4413      	add	r3, r2
 8004c42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c4c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	699a      	ldr	r2, [r3, #24]
 8004c54:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d907      	bls.n	8004c6c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	699a      	ldr	r2, [r3, #24]
 8004c60:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c64:	1ad2      	subs	r2, r2, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	619a      	str	r2, [r3, #24]
 8004c6a:	e002      	b.n	8004c72 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f040 80b9 	bne.w	8004dee <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d126      	bne.n	8004cd2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c98:	4413      	add	r3, r2
 8004c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	00da      	lsls	r2, r3, #3
 8004ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004caa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cba:	801a      	strh	r2, [r3, #0]
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cce:	801a      	strh	r2, [r3, #0]
 8004cd0:	e01a      	b.n	8004d08 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	785b      	ldrb	r3, [r3, #1]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d116      	bne.n	8004d08 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cee:	4413      	add	r3, r2
 8004cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	00da      	lsls	r2, r3, #3
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d04:	2200      	movs	r2, #0
 8004d06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	785b      	ldrb	r3, [r3, #1]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d126      	bne.n	8004d64 <HAL_PCD_EP_DB_Transmit+0x156>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	00da      	lsls	r2, r3, #3
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	4413      	add	r3, r2
 8004d38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	801a      	strh	r2, [r3, #0]
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	801a      	strh	r2, [r3, #0]
 8004d62:	e017      	b.n	8004d94 <HAL_PCD_EP_DB_Transmit+0x186>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d113      	bne.n	8004d94 <HAL_PCD_EP_DB_Transmit+0x186>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7a:	4413      	add	r3, r2
 8004d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	00da      	lsls	r2, r3, #3
 8004d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d86:	4413      	add	r3, r2
 8004d88:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d8c:	623b      	str	r3, [r7, #32]
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	2200      	movs	r2, #0
 8004d92:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff fa0b 	bl	80041b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004da0:	88fb      	ldrh	r3, [r7, #6]
 8004da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 82fa 	beq.w	80053a0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc6:	82fb      	strh	r3, [r7, #22]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	441a      	add	r2, r3
 8004dd6:	8afb      	ldrh	r3, [r7, #22]
 8004dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004de0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	8013      	strh	r3, [r2, #0]
 8004dec:	e2d8      	b.n	80053a0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d021      	beq.n	8004e3c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e12:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	441a      	add	r2, r3
 8004e24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	f040 82ac 	bne.w	80053a0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004e50:	441a      	add	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	69da      	ldr	r2, [r3, #28]
 8004e5a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004e5e:	441a      	add	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	6a1a      	ldr	r2, [r3, #32]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d30b      	bcc.n	8004e88 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	6a1a      	ldr	r2, [r3, #32]
 8004e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e80:	1ad2      	subs	r2, r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	621a      	str	r2, [r3, #32]
 8004e86:	e017      	b.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004e90:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004e94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004ea0:	e00a      	b.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	785b      	ldrb	r3, [r3, #1]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d165      	bne.n	8004f8c <HAL_PCD_EP_DB_Transmit+0x37e>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ed4:	4413      	add	r3, r2
 8004ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	00da      	lsls	r2, r3, #3
 8004ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <HAL_PCD_EP_DB_Transmit+0x308>
 8004f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f12:	801a      	strh	r2, [r3, #0]
 8004f14:	e057      	b.n	8004fc6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f1c:	d818      	bhi.n	8004f50 <HAL_PCD_EP_DB_Transmit+0x342>
 8004f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_PCD_EP_DB_Transmit+0x32a>
 8004f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f34:	3301      	adds	r3, #1
 8004f36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	029b      	lsls	r3, r3, #10
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	4313      	orrs	r3, r2
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4c:	801a      	strh	r2, [r3, #0]
 8004f4e:	e03a      	b.n	8004fc6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <HAL_PCD_EP_DB_Transmit+0x35c>
 8004f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f66:	3b01      	subs	r3, #1
 8004f68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	029b      	lsls	r3, r3, #10
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f88:	801a      	strh	r2, [r3, #0]
 8004f8a:	e01c      	b.n	8004fc6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d118      	bne.n	8004fc6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fa8:	4413      	add	r3, r2
 8004faa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	00da      	lsls	r2, r3, #3
 8004fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004fba:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fc4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	6959      	ldr	r1, [r3, #20]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	891a      	ldrh	r2, [r3, #8]
 8004fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f006 f89f 	bl	800b11a <USB_WritePMA>
 8004fdc:	e1e0      	b.n	80053a0 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005002:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800500e:	429a      	cmp	r2, r3
 8005010:	d307      	bcc.n	8005022 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800501a:	1ad2      	subs	r2, r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	619a      	str	r2, [r3, #24]
 8005020:	e002      	b.n	8005028 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2200      	movs	r2, #0
 8005026:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	f040 80c0 	bne.w	80051b2 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d126      	bne.n	8005088 <HAL_PCD_EP_DB_Transmit+0x47a>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005048:	b29b      	uxth	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800504e:	4413      	add	r3, r2
 8005050:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	00da      	lsls	r2, r3, #3
 8005058:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800505a:	4413      	add	r3, r2
 800505c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005060:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005062:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800506c:	b29a      	uxth	r2, r3
 800506e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005070:	801a      	strh	r2, [r3, #0]
 8005072:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29b      	uxth	r3, r3
 8005078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005080:	b29a      	uxth	r2, r3
 8005082:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005084:	801a      	strh	r2, [r3, #0]
 8005086:	e01a      	b.n	80050be <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	785b      	ldrb	r3, [r3, #1]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d116      	bne.n	80050be <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	667b      	str	r3, [r7, #100]	@ 0x64
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800509e:	b29b      	uxth	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050a4:	4413      	add	r3, r2
 80050a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	00da      	lsls	r2, r3, #3
 80050ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050b0:	4413      	add	r3, r2
 80050b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80050b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80050b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050ba:	2200      	movs	r2, #0
 80050bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d12b      	bne.n	8005124 <HAL_PCD_EP_DB_Transmit+0x516>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050da:	b29b      	uxth	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050e0:	4413      	add	r3, r2
 80050e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	00da      	lsls	r2, r3, #3
 80050ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050ec:	4413      	add	r3, r2
 80050ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80050f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005102:	b29a      	uxth	r2, r3
 8005104:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005108:	801a      	strh	r2, [r3, #0]
 800510a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511a:	b29a      	uxth	r2, r3
 800511c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005120:	801a      	strh	r2, [r3, #0]
 8005122:	e017      	b.n	8005154 <HAL_PCD_EP_DB_Transmit+0x546>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d113      	bne.n	8005154 <HAL_PCD_EP_DB_Transmit+0x546>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005134:	b29b      	uxth	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800513a:	4413      	add	r3, r2
 800513c:	677b      	str	r3, [r7, #116]	@ 0x74
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	00da      	lsls	r2, r3, #3
 8005144:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005146:	4413      	add	r3, r2
 8005148:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800514c:	673b      	str	r3, [r7, #112]	@ 0x70
 800514e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005150:	2200      	movs	r2, #0
 8005152:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	4619      	mov	r1, r3
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff f82b 	bl	80041b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005166:	2b00      	cmp	r3, #0
 8005168:	f040 811a 	bne.w	80053a0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005186:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800519c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	8013      	strh	r3, [r2, #0]
 80051b0:	e0f6      	b.n	80053a0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d121      	bne.n	8005200 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	441a      	add	r2, r3
 80051e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80051ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005206:	2b01      	cmp	r3, #1
 8005208:	f040 80ca 	bne.w	80053a0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	695a      	ldr	r2, [r3, #20]
 8005210:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005214:	441a      	add	r2, r3
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	69da      	ldr	r2, [r3, #28]
 800521e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005222:	441a      	add	r2, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	6a1a      	ldr	r2, [r3, #32]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	429a      	cmp	r2, r3
 8005232:	d30b      	bcc.n	800524c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	6a1a      	ldr	r2, [r3, #32]
 8005240:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005244:	1ad2      	subs	r2, r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	621a      	str	r2, [r3, #32]
 800524a:	e017      	b.n	800527c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d108      	bne.n	8005266 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005254:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005258:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005264:	e00a      	b.n	800527c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2200      	movs	r2, #0
 8005272:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	657b      	str	r3, [r7, #84]	@ 0x54
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d165      	bne.n	8005356 <HAL_PCD_EP_DB_Transmit+0x748>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005298:	b29b      	uxth	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800529e:	4413      	add	r3, r2
 80052a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	00da      	lsls	r2, r3, #3
 80052a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052aa:	4413      	add	r3, r2
 80052ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052bc:	b29a      	uxth	r2, r3
 80052be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052c0:	801a      	strh	r2, [r3, #0]
 80052c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <HAL_PCD_EP_DB_Transmit+0x6d2>
 80052ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d8:	b29a      	uxth	r2, r3
 80052da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052dc:	801a      	strh	r2, [r3, #0]
 80052de:	e054      	b.n	800538a <HAL_PCD_EP_DB_Transmit+0x77c>
 80052e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80052e6:	d818      	bhi.n	800531a <HAL_PCD_EP_DB_Transmit+0x70c>
 80052e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_PCD_EP_DB_Transmit+0x6f4>
 80052fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052fe:	3301      	adds	r3, #1
 8005300:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005302:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29a      	uxth	r2, r3
 8005308:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800530a:	b29b      	uxth	r3, r3
 800530c:	029b      	lsls	r3, r3, #10
 800530e:	b29b      	uxth	r3, r3
 8005310:	4313      	orrs	r3, r2
 8005312:	b29a      	uxth	r2, r3
 8005314:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e037      	b.n	800538a <HAL_PCD_EP_DB_Transmit+0x77c>
 800531a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005322:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	2b00      	cmp	r3, #0
 800532c:	d102      	bne.n	8005334 <HAL_PCD_EP_DB_Transmit+0x726>
 800532e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005330:	3b01      	subs	r3, #1
 8005332:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005334:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29a      	uxth	r2, r3
 800533a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800533c:	b29b      	uxth	r3, r3
 800533e:	029b      	lsls	r3, r3, #10
 8005340:	b29b      	uxth	r3, r3
 8005342:	4313      	orrs	r3, r2
 8005344:	b29b      	uxth	r3, r3
 8005346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534e:	b29a      	uxth	r2, r3
 8005350:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	e019      	b.n	800538a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d115      	bne.n	800538a <HAL_PCD_EP_DB_Transmit+0x77c>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005366:	b29b      	uxth	r3, r3
 8005368:	461a      	mov	r2, r3
 800536a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800536c:	4413      	add	r3, r2
 800536e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	00da      	lsls	r2, r3, #3
 8005376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005378:	4413      	add	r3, r2
 800537a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800537e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005384:	b29a      	uxth	r2, r3
 8005386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005388:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	6959      	ldr	r1, [r3, #20]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	895a      	ldrh	r2, [r3, #10]
 8005396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800539a:	b29b      	uxth	r3, r3
 800539c:	f005 febd 	bl	800b11a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ba:	82bb      	strh	r3, [r7, #20]
 80053bc:	8abb      	ldrh	r3, [r7, #20]
 80053be:	f083 0310 	eor.w	r3, r3, #16
 80053c2:	82bb      	strh	r3, [r7, #20]
 80053c4:	8abb      	ldrh	r3, [r7, #20]
 80053c6:	f083 0320 	eor.w	r3, r3, #32
 80053ca:	82bb      	strh	r3, [r7, #20]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	441a      	add	r2, r3
 80053da:	8abb      	ldrh	r3, [r7, #20]
 80053dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3790      	adds	r7, #144	@ 0x90
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8005402:	af00      	add	r7, sp, #0
 8005404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005408:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800540c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800540e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005412:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	f001 b83a 	b.w	8006496 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005422:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005426:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 816f 	beq.w	8005716 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005438:	4bb5      	ldr	r3, [pc, #724]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 030c 	and.w	r3, r3, #12
 8005440:	2b04      	cmp	r3, #4
 8005442:	d00c      	beq.n	800545e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005444:	4bb2      	ldr	r3, [pc, #712]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f003 030c 	and.w	r3, r3, #12
 800544c:	2b08      	cmp	r3, #8
 800544e:	d15c      	bne.n	800550a <HAL_RCC_OscConfig+0x10e>
 8005450:	4baf      	ldr	r3, [pc, #700]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545c:	d155      	bne.n	800550a <HAL_RCC_OscConfig+0x10e>
 800545e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005462:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005466:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800546a:	fa93 f3a3 	rbit	r3, r3
 800546e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 8005472:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005476:	fab3 f383 	clz	r3, r3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b01      	cmp	r3, #1
 8005488:	d102      	bne.n	8005490 <HAL_RCC_OscConfig+0x94>
 800548a:	4ba1      	ldr	r3, [pc, #644]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	e015      	b.n	80054bc <HAL_RCC_OscConfig+0xc0>
 8005490:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005494:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005498:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800549c:	fa93 f3a3 	rbit	r3, r3
 80054a0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80054a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80054a8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80054ac:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80054b0:	fa93 f3a3 	rbit	r3, r3
 80054b4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80054b8:	4b95      	ldr	r3, [pc, #596]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80054c0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80054c4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80054c8:	fa92 f2a2 	rbit	r2, r2
 80054cc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80054d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80054d4:	fab2 f282 	clz	r2, r2
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	f042 0220 	orr.w	r2, r2, #32
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	f002 021f 	and.w	r2, r2, #31
 80054e4:	2101      	movs	r1, #1
 80054e6:	fa01 f202 	lsl.w	r2, r1, r2
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8111 	beq.w	8005714 <HAL_RCC_OscConfig+0x318>
 80054f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f040 8108 	bne.w	8005714 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	f000 bfc6 	b.w	8006496 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800550a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800550e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800551a:	d106      	bne.n	800552a <HAL_RCC_OscConfig+0x12e>
 800551c:	4b7c      	ldr	r3, [pc, #496]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a7b      	ldr	r2, [pc, #492]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 8005522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	e036      	b.n	8005598 <HAL_RCC_OscConfig+0x19c>
 800552a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800552e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10c      	bne.n	8005554 <HAL_RCC_OscConfig+0x158>
 800553a:	4b75      	ldr	r3, [pc, #468]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a74      	ldr	r2, [pc, #464]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 8005540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	4b72      	ldr	r3, [pc, #456]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a71      	ldr	r2, [pc, #452]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 800554c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	e021      	b.n	8005598 <HAL_RCC_OscConfig+0x19c>
 8005554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005558:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005564:	d10c      	bne.n	8005580 <HAL_RCC_OscConfig+0x184>
 8005566:	4b6a      	ldr	r3, [pc, #424]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a69      	ldr	r2, [pc, #420]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 800556c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	4b67      	ldr	r3, [pc, #412]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a66      	ldr	r2, [pc, #408]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 8005578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	e00b      	b.n	8005598 <HAL_RCC_OscConfig+0x19c>
 8005580:	4b63      	ldr	r3, [pc, #396]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a62      	ldr	r2, [pc, #392]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 8005586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	4b60      	ldr	r3, [pc, #384]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a5f      	ldr	r2, [pc, #380]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 8005592:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005596:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800559c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d059      	beq.n	800565c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a8:	f7fe f908 	bl	80037bc <HAL_GetTick>
 80055ac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b0:	e00a      	b.n	80055c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b2:	f7fe f903 	bl	80037bc <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b64      	cmp	r3, #100	@ 0x64
 80055c0:	d902      	bls.n	80055c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	f000 bf67 	b.w	8006496 <HAL_RCC_OscConfig+0x109a>
 80055c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80055cc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80055d4:	fa93 f3a3 	rbit	r3, r3
 80055d8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80055dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e0:	fab3 f383 	clz	r3, r3
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d102      	bne.n	80055fa <HAL_RCC_OscConfig+0x1fe>
 80055f4:	4b46      	ldr	r3, [pc, #280]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	e015      	b.n	8005626 <HAL_RCC_OscConfig+0x22a>
 80055fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80055fe:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005602:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005606:	fa93 f3a3 	rbit	r3, r3
 800560a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800560e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005612:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005616:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800561a:	fa93 f3a3 	rbit	r3, r3
 800561e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005622:	4b3b      	ldr	r3, [pc, #236]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 8005624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005626:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800562a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800562e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8005632:	fa92 f2a2 	rbit	r2, r2
 8005636:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800563a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800563e:	fab2 f282 	clz	r2, r2
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	f042 0220 	orr.w	r2, r2, #32
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	f002 021f 	and.w	r2, r2, #31
 800564e:	2101      	movs	r1, #1
 8005650:	fa01 f202 	lsl.w	r2, r1, r2
 8005654:	4013      	ands	r3, r2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0ab      	beq.n	80055b2 <HAL_RCC_OscConfig+0x1b6>
 800565a:	e05c      	b.n	8005716 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565c:	f7fe f8ae 	bl	80037bc <HAL_GetTick>
 8005660:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005664:	e00a      	b.n	800567c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005666:	f7fe f8a9 	bl	80037bc <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b64      	cmp	r3, #100	@ 0x64
 8005674:	d902      	bls.n	800567c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	f000 bf0d 	b.w	8006496 <HAL_RCC_OscConfig+0x109a>
 800567c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005680:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005684:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005688:	fa93 f3a3 	rbit	r3, r3
 800568c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8005690:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005694:	fab3 f383 	clz	r3, r3
 8005698:	b2db      	uxtb	r3, r3
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d102      	bne.n	80056ae <HAL_RCC_OscConfig+0x2b2>
 80056a8:	4b19      	ldr	r3, [pc, #100]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	e015      	b.n	80056da <HAL_RCC_OscConfig+0x2de>
 80056ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80056b2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80056ba:	fa93 f3a3 	rbit	r3, r3
 80056be:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80056c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80056c6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80056ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80056ce:	fa93 f3a3 	rbit	r3, r3
 80056d2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80056d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005710 <HAL_RCC_OscConfig+0x314>)
 80056d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80056de:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80056e2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80056e6:	fa92 f2a2 	rbit	r2, r2
 80056ea:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80056ee:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80056f2:	fab2 f282 	clz	r2, r2
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	f042 0220 	orr.w	r2, r2, #32
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	f002 021f 	and.w	r2, r2, #31
 8005702:	2101      	movs	r1, #1
 8005704:	fa01 f202 	lsl.w	r2, r1, r2
 8005708:	4013      	ands	r3, r2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1ab      	bne.n	8005666 <HAL_RCC_OscConfig+0x26a>
 800570e:	e002      	b.n	8005716 <HAL_RCC_OscConfig+0x31a>
 8005710:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005716:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800571a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 817f 	beq.w	8005a2a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800572c:	4ba7      	ldr	r3, [pc, #668]	@ (80059cc <HAL_RCC_OscConfig+0x5d0>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 030c 	and.w	r3, r3, #12
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00c      	beq.n	8005752 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005738:	4ba4      	ldr	r3, [pc, #656]	@ (80059cc <HAL_RCC_OscConfig+0x5d0>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 030c 	and.w	r3, r3, #12
 8005740:	2b08      	cmp	r3, #8
 8005742:	d173      	bne.n	800582c <HAL_RCC_OscConfig+0x430>
 8005744:	4ba1      	ldr	r3, [pc, #644]	@ (80059cc <HAL_RCC_OscConfig+0x5d0>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800574c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005750:	d16c      	bne.n	800582c <HAL_RCC_OscConfig+0x430>
 8005752:	2302      	movs	r3, #2
 8005754:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005758:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800575c:	fa93 f3a3 	rbit	r3, r3
 8005760:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8005764:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005768:	fab3 f383 	clz	r3, r3
 800576c:	b2db      	uxtb	r3, r3
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	b2db      	uxtb	r3, r3
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	d102      	bne.n	8005782 <HAL_RCC_OscConfig+0x386>
 800577c:	4b93      	ldr	r3, [pc, #588]	@ (80059cc <HAL_RCC_OscConfig+0x5d0>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	e013      	b.n	80057aa <HAL_RCC_OscConfig+0x3ae>
 8005782:	2302      	movs	r3, #2
 8005784:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005788:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800578c:	fa93 f3a3 	rbit	r3, r3
 8005790:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8005794:	2302      	movs	r3, #2
 8005796:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800579a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800579e:	fa93 f3a3 	rbit	r3, r3
 80057a2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80057a6:	4b89      	ldr	r3, [pc, #548]	@ (80059cc <HAL_RCC_OscConfig+0x5d0>)
 80057a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057aa:	2202      	movs	r2, #2
 80057ac:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80057b0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80057b4:	fa92 f2a2 	rbit	r2, r2
 80057b8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80057bc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80057c0:	fab2 f282 	clz	r2, r2
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	f042 0220 	orr.w	r2, r2, #32
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	f002 021f 	and.w	r2, r2, #31
 80057d0:	2101      	movs	r1, #1
 80057d2:	fa01 f202 	lsl.w	r2, r1, r2
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <HAL_RCC_OscConfig+0x3f6>
 80057dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d002      	beq.n	80057f2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	f000 be52 	b.w	8006496 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f2:	4b76      	ldr	r3, [pc, #472]	@ (80059cc <HAL_RCC_OscConfig+0x5d0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	21f8      	movs	r1, #248	@ 0xf8
 8005808:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8005810:	fa91 f1a1 	rbit	r1, r1
 8005814:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8005818:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800581c:	fab1 f181 	clz	r1, r1
 8005820:	b2c9      	uxtb	r1, r1
 8005822:	408b      	lsls	r3, r1
 8005824:	4969      	ldr	r1, [pc, #420]	@ (80059cc <HAL_RCC_OscConfig+0x5d0>)
 8005826:	4313      	orrs	r3, r2
 8005828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800582a:	e0fe      	b.n	8005a2a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800582c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005830:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 8088 	beq.w	800594e <HAL_RCC_OscConfig+0x552>
 800583e:	2301      	movs	r3, #1
 8005840:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005844:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8005848:	fa93 f3a3 	rbit	r3, r3
 800584c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8005850:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005854:	fab3 f383 	clz	r3, r3
 8005858:	b2db      	uxtb	r3, r3
 800585a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800585e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	461a      	mov	r2, r3
 8005866:	2301      	movs	r3, #1
 8005868:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586a:	f7fd ffa7 	bl	80037bc <HAL_GetTick>
 800586e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005872:	e00a      	b.n	800588a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005874:	f7fd ffa2 	bl	80037bc <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d902      	bls.n	800588a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	f000 be06 	b.w	8006496 <HAL_RCC_OscConfig+0x109a>
 800588a:	2302      	movs	r3, #2
 800588c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005890:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8005894:	fa93 f3a3 	rbit	r3, r3
 8005898:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800589c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a0:	fab3 f383 	clz	r3, r3
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	095b      	lsrs	r3, r3, #5
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d102      	bne.n	80058ba <HAL_RCC_OscConfig+0x4be>
 80058b4:	4b45      	ldr	r3, [pc, #276]	@ (80059cc <HAL_RCC_OscConfig+0x5d0>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	e013      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e6>
 80058ba:	2302      	movs	r3, #2
 80058bc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80058c4:	fa93 f3a3 	rbit	r3, r3
 80058c8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80058cc:	2302      	movs	r3, #2
 80058ce:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80058d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80058d6:	fa93 f3a3 	rbit	r3, r3
 80058da:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80058de:	4b3b      	ldr	r3, [pc, #236]	@ (80059cc <HAL_RCC_OscConfig+0x5d0>)
 80058e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e2:	2202      	movs	r2, #2
 80058e4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80058e8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80058ec:	fa92 f2a2 	rbit	r2, r2
 80058f0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80058f4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80058f8:	fab2 f282 	clz	r2, r2
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	f042 0220 	orr.w	r2, r2, #32
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	f002 021f 	and.w	r2, r2, #31
 8005908:	2101      	movs	r1, #1
 800590a:	fa01 f202 	lsl.w	r2, r1, r2
 800590e:	4013      	ands	r3, r2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0af      	beq.n	8005874 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005914:	4b2d      	ldr	r3, [pc, #180]	@ (80059cc <HAL_RCC_OscConfig+0x5d0>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800591c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005920:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	21f8      	movs	r1, #248	@ 0xf8
 800592a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8005932:	fa91 f1a1 	rbit	r1, r1
 8005936:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800593a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800593e:	fab1 f181 	clz	r1, r1
 8005942:	b2c9      	uxtb	r1, r1
 8005944:	408b      	lsls	r3, r1
 8005946:	4921      	ldr	r1, [pc, #132]	@ (80059cc <HAL_RCC_OscConfig+0x5d0>)
 8005948:	4313      	orrs	r3, r2
 800594a:	600b      	str	r3, [r1, #0]
 800594c:	e06d      	b.n	8005a2a <HAL_RCC_OscConfig+0x62e>
 800594e:	2301      	movs	r3, #1
 8005950:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005954:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8005958:	fa93 f3a3 	rbit	r3, r3
 800595c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8005960:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005964:	fab3 f383 	clz	r3, r3
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800596e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	461a      	mov	r2, r3
 8005976:	2300      	movs	r3, #0
 8005978:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597a:	f7fd ff1f 	bl	80037bc <HAL_GetTick>
 800597e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005982:	e00a      	b.n	800599a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005984:	f7fd ff1a 	bl	80037bc <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d902      	bls.n	800599a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	f000 bd7e 	b.w	8006496 <HAL_RCC_OscConfig+0x109a>
 800599a:	2302      	movs	r3, #2
 800599c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80059a4:	fa93 f3a3 	rbit	r3, r3
 80059a8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80059ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059b0:	fab3 f383 	clz	r3, r3
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	f043 0301 	orr.w	r3, r3, #1
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d105      	bne.n	80059d0 <HAL_RCC_OscConfig+0x5d4>
 80059c4:	4b01      	ldr	r3, [pc, #4]	@ (80059cc <HAL_RCC_OscConfig+0x5d0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	e016      	b.n	80059f8 <HAL_RCC_OscConfig+0x5fc>
 80059ca:	bf00      	nop
 80059cc:	40021000 	.word	0x40021000
 80059d0:	2302      	movs	r3, #2
 80059d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80059da:	fa93 f3a3 	rbit	r3, r3
 80059de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80059e2:	2302      	movs	r3, #2
 80059e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80059e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80059ec:	fa93 f3a3 	rbit	r3, r3
 80059f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80059f4:	4bbf      	ldr	r3, [pc, #764]	@ (8005cf4 <HAL_RCC_OscConfig+0x8f8>)
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	2202      	movs	r2, #2
 80059fa:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80059fe:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005a02:	fa92 f2a2 	rbit	r2, r2
 8005a06:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8005a0a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005a0e:	fab2 f282 	clz	r2, r2
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	f042 0220 	orr.w	r2, r2, #32
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	f002 021f 	and.w	r2, r2, #31
 8005a1e:	2101      	movs	r1, #1
 8005a20:	fa01 f202 	lsl.w	r2, r1, r2
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1ac      	bne.n	8005984 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8113 	beq.w	8005c66 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d07c      	beq.n	8005b4a <HAL_RCC_OscConfig+0x74e>
 8005a50:	2301      	movs	r3, #1
 8005a52:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5a:	fa93 f3a3 	rbit	r3, r3
 8005a5e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8005a62:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a66:	fab3 f383 	clz	r3, r3
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4ba2      	ldr	r3, [pc, #648]	@ (8005cf8 <HAL_RCC_OscConfig+0x8fc>)
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	461a      	mov	r2, r3
 8005a76:	2301      	movs	r3, #1
 8005a78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a7a:	f7fd fe9f 	bl	80037bc <HAL_GetTick>
 8005a7e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a82:	e00a      	b.n	8005a9a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a84:	f7fd fe9a 	bl	80037bc <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d902      	bls.n	8005a9a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	f000 bcfe 	b.w	8006496 <HAL_RCC_OscConfig+0x109a>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aa4:	fa93 f2a3 	rbit	r2, r3
 8005aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005aac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aba:	2202      	movs	r2, #2
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ac2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	fa93 f2a3 	rbit	r2, r3
 8005acc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ada:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005ade:	2202      	movs	r2, #2
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ae6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	fa93 f2a3 	rbit	r2, r3
 8005af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005af4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005af8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005afa:	4b7e      	ldr	r3, [pc, #504]	@ (8005cf4 <HAL_RCC_OscConfig+0x8f8>)
 8005afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b02:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005b06:	2102      	movs	r1, #2
 8005b08:	6019      	str	r1, [r3, #0]
 8005b0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b0e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	fa93 f1a3 	rbit	r1, r3
 8005b18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b1c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005b20:	6019      	str	r1, [r3, #0]
  return result;
 8005b22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b26:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	fab3 f383 	clz	r3, r3
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	f003 031f 	and.w	r3, r3, #31
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d09d      	beq.n	8005a84 <HAL_RCC_OscConfig+0x688>
 8005b48:	e08d      	b.n	8005c66 <HAL_RCC_OscConfig+0x86a>
 8005b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b4e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005b52:	2201      	movs	r2, #1
 8005b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b5a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	fa93 f2a3 	rbit	r2, r3
 8005b64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b68:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005b6c:	601a      	str	r2, [r3, #0]
  return result;
 8005b6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b72:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005b76:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b78:	fab3 f383 	clz	r3, r3
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4b5d      	ldr	r3, [pc, #372]	@ (8005cf8 <HAL_RCC_OscConfig+0x8fc>)
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	461a      	mov	r2, r3
 8005b88:	2300      	movs	r3, #0
 8005b8a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b8c:	f7fd fe16 	bl	80037bc <HAL_GetTick>
 8005b90:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b94:	e00a      	b.n	8005bac <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b96:	f7fd fe11 	bl	80037bc <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d902      	bls.n	8005bac <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	f000 bc75 	b.w	8006496 <HAL_RCC_OscConfig+0x109a>
 8005bac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bb0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bbc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	fa93 f2a3 	rbit	r2, r3
 8005bc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005bd8:	2202      	movs	r2, #2
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005be0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	fa93 f2a3 	rbit	r2, r3
 8005bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bf8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c04:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	fa93 f2a3 	rbit	r2, r3
 8005c0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c12:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005c16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c18:	4b36      	ldr	r3, [pc, #216]	@ (8005cf4 <HAL_RCC_OscConfig+0x8f8>)
 8005c1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005c24:	2102      	movs	r1, #2
 8005c26:	6019      	str	r1, [r3, #0]
 8005c28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c2c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	fa93 f1a3 	rbit	r1, r3
 8005c36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c3a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005c3e:	6019      	str	r1, [r3, #0]
  return result;
 8005c40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c44:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	fab3 f383 	clz	r3, r3
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d197      	bne.n	8005b96 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 81a5 	beq.w	8005fc6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c82:	4b1c      	ldr	r3, [pc, #112]	@ (8005cf4 <HAL_RCC_OscConfig+0x8f8>)
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d116      	bne.n	8005cbc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c8e:	4b19      	ldr	r3, [pc, #100]	@ (8005cf4 <HAL_RCC_OscConfig+0x8f8>)
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	4a18      	ldr	r2, [pc, #96]	@ (8005cf4 <HAL_RCC_OscConfig+0x8f8>)
 8005c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c98:	61d3      	str	r3, [r2, #28]
 8005c9a:	4b16      	ldr	r3, [pc, #88]	@ (8005cf4 <HAL_RCC_OscConfig+0x8f8>)
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8005ca2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ca6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005cb4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8005cfc <HAL_RCC_OscConfig+0x900>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d121      	bne.n	8005d0c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cfc <HAL_RCC_OscConfig+0x900>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8005cfc <HAL_RCC_OscConfig+0x900>)
 8005cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cd2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cd4:	f7fd fd72 	bl	80037bc <HAL_GetTick>
 8005cd8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cdc:	e010      	b.n	8005d00 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cde:	f7fd fd6d 	bl	80037bc <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b64      	cmp	r3, #100	@ 0x64
 8005cec:	d908      	bls.n	8005d00 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e3d1      	b.n	8006496 <HAL_RCC_OscConfig+0x109a>
 8005cf2:	bf00      	nop
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	10908120 	.word	0x10908120
 8005cfc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d00:	4b8d      	ldr	r3, [pc, #564]	@ (8005f38 <HAL_RCC_OscConfig+0xb3c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0e8      	beq.n	8005cde <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005d10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d106      	bne.n	8005d2a <HAL_RCC_OscConfig+0x92e>
 8005d1c:	4b87      	ldr	r3, [pc, #540]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	4a86      	ldr	r2, [pc, #536]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005d22:	f043 0301 	orr.w	r3, r3, #1
 8005d26:	6213      	str	r3, [r2, #32]
 8005d28:	e035      	b.n	8005d96 <HAL_RCC_OscConfig+0x99a>
 8005d2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005d2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10c      	bne.n	8005d54 <HAL_RCC_OscConfig+0x958>
 8005d3a:	4b80      	ldr	r3, [pc, #512]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	4a7f      	ldr	r2, [pc, #508]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	6213      	str	r3, [r2, #32]
 8005d46:	4b7d      	ldr	r3, [pc, #500]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005d4c:	f023 0304 	bic.w	r3, r3, #4
 8005d50:	6213      	str	r3, [r2, #32]
 8005d52:	e020      	b.n	8005d96 <HAL_RCC_OscConfig+0x99a>
 8005d54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005d58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b05      	cmp	r3, #5
 8005d62:	d10c      	bne.n	8005d7e <HAL_RCC_OscConfig+0x982>
 8005d64:	4b75      	ldr	r3, [pc, #468]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	4a74      	ldr	r2, [pc, #464]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005d6a:	f043 0304 	orr.w	r3, r3, #4
 8005d6e:	6213      	str	r3, [r2, #32]
 8005d70:	4b72      	ldr	r3, [pc, #456]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	4a71      	ldr	r2, [pc, #452]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005d76:	f043 0301 	orr.w	r3, r3, #1
 8005d7a:	6213      	str	r3, [r2, #32]
 8005d7c:	e00b      	b.n	8005d96 <HAL_RCC_OscConfig+0x99a>
 8005d7e:	4b6f      	ldr	r3, [pc, #444]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	4a6e      	ldr	r2, [pc, #440]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005d84:	f023 0301 	bic.w	r3, r3, #1
 8005d88:	6213      	str	r3, [r2, #32]
 8005d8a:	4b6c      	ldr	r3, [pc, #432]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	4a6b      	ldr	r2, [pc, #428]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005d90:	f023 0304 	bic.w	r3, r3, #4
 8005d94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005d9a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8081 	beq.w	8005eaa <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005da8:	f7fd fd08 	bl	80037bc <HAL_GetTick>
 8005dac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db0:	e00b      	b.n	8005dca <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005db2:	f7fd fd03 	bl	80037bc <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e365      	b.n	8006496 <HAL_RCC_OscConfig+0x109a>
 8005dca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005dce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005dda:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	fa93 f2a3 	rbit	r2, r3
 8005de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005de8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005df2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005df6:	2202      	movs	r2, #2
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005dfe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	fa93 f2a3 	rbit	r2, r3
 8005e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e0c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005e10:	601a      	str	r2, [r3, #0]
  return result;
 8005e12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e16:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005e1a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e1c:	fab3 f383 	clz	r3, r3
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	095b      	lsrs	r3, r3, #5
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	f043 0302 	orr.w	r3, r3, #2
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d102      	bne.n	8005e36 <HAL_RCC_OscConfig+0xa3a>
 8005e30:	4b42      	ldr	r3, [pc, #264]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	e013      	b.n	8005e5e <HAL_RCC_OscConfig+0xa62>
 8005e36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e3a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005e3e:	2202      	movs	r2, #2
 8005e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e46:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	fa93 f2a3 	rbit	r2, r3
 8005e50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e54:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	4b38      	ldr	r3, [pc, #224]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005e62:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005e66:	2102      	movs	r1, #2
 8005e68:	6011      	str	r1, [r2, #0]
 8005e6a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005e6e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	fa92 f1a2 	rbit	r1, r2
 8005e78:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005e7c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8005e80:	6011      	str	r1, [r2, #0]
  return result;
 8005e82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005e86:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	fab2 f282 	clz	r2, r2
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	f002 021f 	and.w	r2, r2, #31
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d084      	beq.n	8005db2 <HAL_RCC_OscConfig+0x9b6>
 8005ea8:	e083      	b.n	8005fb2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eaa:	f7fd fc87 	bl	80037bc <HAL_GetTick>
 8005eae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eb2:	e00b      	b.n	8005ecc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eb4:	f7fd fc82 	bl	80037bc <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e2e4      	b.n	8006496 <HAL_RCC_OscConfig+0x109a>
 8005ecc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ed0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005edc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	fa93 f2a3 	rbit	r2, r3
 8005ee6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005eea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ef4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005ef8:	2202      	movs	r2, #2
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f00:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	fa93 f2a3 	rbit	r2, r3
 8005f0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f0e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005f12:	601a      	str	r2, [r3, #0]
  return result;
 8005f14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f18:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005f1c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f1e:	fab3 f383 	clz	r3, r3
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	095b      	lsrs	r3, r3, #5
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	f043 0302 	orr.w	r3, r3, #2
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d106      	bne.n	8005f40 <HAL_RCC_OscConfig+0xb44>
 8005f32:	4b02      	ldr	r3, [pc, #8]	@ (8005f3c <HAL_RCC_OscConfig+0xb40>)
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	e017      	b.n	8005f68 <HAL_RCC_OscConfig+0xb6c>
 8005f38:	40007000 	.word	0x40007000
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f44:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005f48:	2202      	movs	r2, #2
 8005f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f50:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	fa93 f2a3 	rbit	r2, r3
 8005f5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f5e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	4bb3      	ldr	r3, [pc, #716]	@ (8006234 <HAL_RCC_OscConfig+0xe38>)
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005f6c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005f70:	2102      	movs	r1, #2
 8005f72:	6011      	str	r1, [r2, #0]
 8005f74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005f78:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005f7c:	6812      	ldr	r2, [r2, #0]
 8005f7e:	fa92 f1a2 	rbit	r1, r2
 8005f82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005f86:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8005f8a:	6011      	str	r1, [r2, #0]
  return result;
 8005f8c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005f90:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8005f94:	6812      	ldr	r2, [r2, #0]
 8005f96:	fab2 f282 	clz	r2, r2
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	f002 021f 	and.w	r2, r2, #31
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8005fac:	4013      	ands	r3, r2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d180      	bne.n	8005eb4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005fb2:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d105      	bne.n	8005fc6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fba:	4b9e      	ldr	r3, [pc, #632]	@ (8006234 <HAL_RCC_OscConfig+0xe38>)
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	4a9d      	ldr	r2, [pc, #628]	@ (8006234 <HAL_RCC_OscConfig+0xe38>)
 8005fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fc4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005fca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 825e 	beq.w	8006494 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fd8:	4b96      	ldr	r3, [pc, #600]	@ (8006234 <HAL_RCC_OscConfig+0xe38>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f003 030c 	and.w	r3, r3, #12
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	f000 821f 	beq.w	8006424 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fe6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005fea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	f040 8170 	bne.w	80062d8 <HAL_RCC_OscConfig+0xedc>
 8005ff8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ffc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006000:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006004:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006006:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800600a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	fa93 f2a3 	rbit	r2, r3
 8006014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006018:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800601c:	601a      	str	r2, [r3, #0]
  return result;
 800601e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006022:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006026:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006028:	fab3 f383 	clz	r3, r3
 800602c:	b2db      	uxtb	r3, r3
 800602e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006032:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	461a      	mov	r2, r3
 800603a:	2300      	movs	r3, #0
 800603c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603e:	f7fd fbbd 	bl	80037bc <HAL_GetTick>
 8006042:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006046:	e009      	b.n	800605c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006048:	f7fd fbb8 	bl	80037bc <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e21c      	b.n	8006496 <HAL_RCC_OscConfig+0x109a>
 800605c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006060:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006064:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800606e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	fa93 f2a3 	rbit	r2, r3
 8006078:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800607c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006080:	601a      	str	r2, [r3, #0]
  return result;
 8006082:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006086:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800608a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800608c:	fab3 f383 	clz	r3, r3
 8006090:	b2db      	uxtb	r3, r3
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	b2db      	uxtb	r3, r3
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	d102      	bne.n	80060a6 <HAL_RCC_OscConfig+0xcaa>
 80060a0:	4b64      	ldr	r3, [pc, #400]	@ (8006234 <HAL_RCC_OscConfig+0xe38>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	e027      	b.n	80060f6 <HAL_RCC_OscConfig+0xcfa>
 80060a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060aa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80060ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060b8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	fa93 f2a3 	rbit	r2, r3
 80060c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060c6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80060d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060de:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	fa93 f2a3 	rbit	r2, r3
 80060e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060ec:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	4b50      	ldr	r3, [pc, #320]	@ (8006234 <HAL_RCC_OscConfig+0xe38>)
 80060f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80060fa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80060fe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006102:	6011      	str	r1, [r2, #0]
 8006104:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006108:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800610c:	6812      	ldr	r2, [r2, #0]
 800610e:	fa92 f1a2 	rbit	r1, r2
 8006112:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006116:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800611a:	6011      	str	r1, [r2, #0]
  return result;
 800611c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006120:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	fab2 f282 	clz	r2, r2
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	f042 0220 	orr.w	r2, r2, #32
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	f002 021f 	and.w	r2, r2, #31
 8006136:	2101      	movs	r1, #1
 8006138:	fa01 f202 	lsl.w	r2, r1, r2
 800613c:	4013      	ands	r3, r2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d182      	bne.n	8006048 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006142:	4b3c      	ldr	r3, [pc, #240]	@ (8006234 <HAL_RCC_OscConfig+0xe38>)
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	f023 020f 	bic.w	r2, r3, #15
 800614a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800614e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006156:	4937      	ldr	r1, [pc, #220]	@ (8006234 <HAL_RCC_OscConfig+0xe38>)
 8006158:	4313      	orrs	r3, r2
 800615a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800615c:	4b35      	ldr	r3, [pc, #212]	@ (8006234 <HAL_RCC_OscConfig+0xe38>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8006164:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006168:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6a19      	ldr	r1, [r3, #32]
 8006170:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006174:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	430b      	orrs	r3, r1
 800617e:	492d      	ldr	r1, [pc, #180]	@ (8006234 <HAL_RCC_OscConfig+0xe38>)
 8006180:	4313      	orrs	r3, r2
 8006182:	604b      	str	r3, [r1, #4]
 8006184:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006188:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800618c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006192:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006196:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	fa93 f2a3 	rbit	r2, r3
 80061a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80061a4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80061a8:	601a      	str	r2, [r3, #0]
  return result;
 80061aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80061ae:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80061b2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061b4:	fab3 f383 	clz	r3, r3
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80061be:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	461a      	mov	r2, r3
 80061c6:	2301      	movs	r3, #1
 80061c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ca:	f7fd faf7 	bl	80037bc <HAL_GetTick>
 80061ce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061d2:	e009      	b.n	80061e8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061d4:	f7fd faf2 	bl	80037bc <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e156      	b.n	8006496 <HAL_RCC_OscConfig+0x109a>
 80061e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80061ec:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80061f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80061f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80061fa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	fa93 f2a3 	rbit	r2, r3
 8006204:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006208:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800620c:	601a      	str	r2, [r3, #0]
  return result;
 800620e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006212:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006216:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006218:	fab3 f383 	clz	r3, r3
 800621c:	b2db      	uxtb	r3, r3
 800621e:	095b      	lsrs	r3, r3, #5
 8006220:	b2db      	uxtb	r3, r3
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b01      	cmp	r3, #1
 800622a:	d105      	bne.n	8006238 <HAL_RCC_OscConfig+0xe3c>
 800622c:	4b01      	ldr	r3, [pc, #4]	@ (8006234 <HAL_RCC_OscConfig+0xe38>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	e02a      	b.n	8006288 <HAL_RCC_OscConfig+0xe8c>
 8006232:	bf00      	nop
 8006234:	40021000 	.word	0x40021000
 8006238:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800623c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006240:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800624a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	fa93 f2a3 	rbit	r2, r3
 8006254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006258:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006262:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006266:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006270:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	fa93 f2a3 	rbit	r2, r3
 800627a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800627e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	4b86      	ldr	r3, [pc, #536]	@ (80064a0 <HAL_RCC_OscConfig+0x10a4>)
 8006286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006288:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800628c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006290:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006294:	6011      	str	r1, [r2, #0]
 8006296:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800629a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800629e:	6812      	ldr	r2, [r2, #0]
 80062a0:	fa92 f1a2 	rbit	r1, r2
 80062a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80062a8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80062ac:	6011      	str	r1, [r2, #0]
  return result;
 80062ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80062b2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	fab2 f282 	clz	r2, r2
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	f042 0220 	orr.w	r2, r2, #32
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	f002 021f 	and.w	r2, r2, #31
 80062c8:	2101      	movs	r1, #1
 80062ca:	fa01 f202 	lsl.w	r2, r1, r2
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f43f af7f 	beq.w	80061d4 <HAL_RCC_OscConfig+0xdd8>
 80062d6:	e0dd      	b.n	8006494 <HAL_RCC_OscConfig+0x1098>
 80062d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80062dc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80062e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80062ea:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	fa93 f2a3 	rbit	r2, r3
 80062f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80062f8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80062fc:	601a      	str	r2, [r3, #0]
  return result;
 80062fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006302:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006306:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006308:	fab3 f383 	clz	r3, r3
 800630c:	b2db      	uxtb	r3, r3
 800630e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006312:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	461a      	mov	r2, r3
 800631a:	2300      	movs	r3, #0
 800631c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631e:	f7fd fa4d 	bl	80037bc <HAL_GetTick>
 8006322:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006326:	e009      	b.n	800633c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006328:	f7fd fa48 	bl	80037bc <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e0ac      	b.n	8006496 <HAL_RCC_OscConfig+0x109a>
 800633c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006340:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006344:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006348:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800634e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	fa93 f2a3 	rbit	r2, r3
 8006358:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800635c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006360:	601a      	str	r2, [r3, #0]
  return result;
 8006362:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006366:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800636a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800636c:	fab3 f383 	clz	r3, r3
 8006370:	b2db      	uxtb	r3, r3
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	b2db      	uxtb	r3, r3
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d102      	bne.n	8006386 <HAL_RCC_OscConfig+0xf8a>
 8006380:	4b47      	ldr	r3, [pc, #284]	@ (80064a0 <HAL_RCC_OscConfig+0x10a4>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	e027      	b.n	80063d6 <HAL_RCC_OscConfig+0xfda>
 8006386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800638a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800638e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006394:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006398:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	fa93 f2a3 	rbit	r2, r3
 80063a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80063a6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80063b0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80063b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80063be:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	fa93 f2a3 	rbit	r2, r3
 80063c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80063cc:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	4b33      	ldr	r3, [pc, #204]	@ (80064a0 <HAL_RCC_OscConfig+0x10a4>)
 80063d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80063da:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80063de:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80063e2:	6011      	str	r1, [r2, #0]
 80063e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80063e8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80063ec:	6812      	ldr	r2, [r2, #0]
 80063ee:	fa92 f1a2 	rbit	r1, r2
 80063f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80063f6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80063fa:	6011      	str	r1, [r2, #0]
  return result;
 80063fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006400:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8006404:	6812      	ldr	r2, [r2, #0]
 8006406:	fab2 f282 	clz	r2, r2
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	f042 0220 	orr.w	r2, r2, #32
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	f002 021f 	and.w	r2, r2, #31
 8006416:	2101      	movs	r1, #1
 8006418:	fa01 f202 	lsl.w	r2, r1, r2
 800641c:	4013      	ands	r3, r2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d182      	bne.n	8006328 <HAL_RCC_OscConfig+0xf2c>
 8006422:	e037      	b.n	8006494 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006424:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006428:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e02e      	b.n	8006496 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006438:	4b19      	ldr	r3, [pc, #100]	@ (80064a0 <HAL_RCC_OscConfig+0x10a4>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006440:	4b17      	ldr	r3, [pc, #92]	@ (80064a0 <HAL_RCC_OscConfig+0x10a4>)
 8006442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006444:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006448:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800644c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8006450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006454:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	429a      	cmp	r2, r3
 800645e:	d117      	bne.n	8006490 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006460:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8006464:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006468:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800646c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006474:	429a      	cmp	r2, r3
 8006476:	d10b      	bne.n	8006490 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800647c:	f003 020f 	and.w	r2, r3, #15
 8006480:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006484:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800648c:	429a      	cmp	r2, r3
 800648e:	d001      	beq.n	8006494 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e000      	b.n	8006496 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40021000 	.word	0x40021000

080064a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b09e      	sub	sp, #120	@ 0x78
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e162      	b.n	8006782 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064bc:	4b90      	ldr	r3, [pc, #576]	@ (8006700 <HAL_RCC_ClockConfig+0x25c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0307 	and.w	r3, r3, #7
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d910      	bls.n	80064ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ca:	4b8d      	ldr	r3, [pc, #564]	@ (8006700 <HAL_RCC_ClockConfig+0x25c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f023 0207 	bic.w	r2, r3, #7
 80064d2:	498b      	ldr	r1, [pc, #556]	@ (8006700 <HAL_RCC_ClockConfig+0x25c>)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064da:	4b89      	ldr	r3, [pc, #548]	@ (8006700 <HAL_RCC_ClockConfig+0x25c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0307 	and.w	r3, r3, #7
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d001      	beq.n	80064ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e14a      	b.n	8006782 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d008      	beq.n	800650a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064f8:	4b82      	ldr	r3, [pc, #520]	@ (8006704 <HAL_RCC_ClockConfig+0x260>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	497f      	ldr	r1, [pc, #508]	@ (8006704 <HAL_RCC_ClockConfig+0x260>)
 8006506:	4313      	orrs	r3, r2
 8006508:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 80dc 	beq.w	80066d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d13c      	bne.n	800659a <HAL_RCC_ClockConfig+0xf6>
 8006520:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006524:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006526:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006528:	fa93 f3a3 	rbit	r3, r3
 800652c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800652e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006530:	fab3 f383 	clz	r3, r3
 8006534:	b2db      	uxtb	r3, r3
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	b2db      	uxtb	r3, r3
 800653a:	f043 0301 	orr.w	r3, r3, #1
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b01      	cmp	r3, #1
 8006542:	d102      	bne.n	800654a <HAL_RCC_ClockConfig+0xa6>
 8006544:	4b6f      	ldr	r3, [pc, #444]	@ (8006704 <HAL_RCC_ClockConfig+0x260>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	e00f      	b.n	800656a <HAL_RCC_ClockConfig+0xc6>
 800654a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800654e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006550:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006552:	fa93 f3a3 	rbit	r3, r3
 8006556:	667b      	str	r3, [r7, #100]	@ 0x64
 8006558:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800655c:	663b      	str	r3, [r7, #96]	@ 0x60
 800655e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006560:	fa93 f3a3 	rbit	r3, r3
 8006564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006566:	4b67      	ldr	r3, [pc, #412]	@ (8006704 <HAL_RCC_ClockConfig+0x260>)
 8006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800656e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006570:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006572:	fa92 f2a2 	rbit	r2, r2
 8006576:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006578:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800657a:	fab2 f282 	clz	r2, r2
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	f042 0220 	orr.w	r2, r2, #32
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	f002 021f 	and.w	r2, r2, #31
 800658a:	2101      	movs	r1, #1
 800658c:	fa01 f202 	lsl.w	r2, r1, r2
 8006590:	4013      	ands	r3, r2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d17b      	bne.n	800668e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e0f3      	b.n	8006782 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d13c      	bne.n	800661c <HAL_RCC_ClockConfig+0x178>
 80065a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065aa:	fa93 f3a3 	rbit	r3, r3
 80065ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80065b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065b2:	fab3 f383 	clz	r3, r3
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d102      	bne.n	80065cc <HAL_RCC_ClockConfig+0x128>
 80065c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006704 <HAL_RCC_ClockConfig+0x260>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	e00f      	b.n	80065ec <HAL_RCC_ClockConfig+0x148>
 80065cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065d4:	fa93 f3a3 	rbit	r3, r3
 80065d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80065da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065de:	643b      	str	r3, [r7, #64]	@ 0x40
 80065e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065e2:	fa93 f3a3 	rbit	r3, r3
 80065e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065e8:	4b46      	ldr	r3, [pc, #280]	@ (8006704 <HAL_RCC_ClockConfig+0x260>)
 80065ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065f0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80065f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065f4:	fa92 f2a2 	rbit	r2, r2
 80065f8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80065fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065fc:	fab2 f282 	clz	r2, r2
 8006600:	b2d2      	uxtb	r2, r2
 8006602:	f042 0220 	orr.w	r2, r2, #32
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	f002 021f 	and.w	r2, r2, #31
 800660c:	2101      	movs	r1, #1
 800660e:	fa01 f202 	lsl.w	r2, r1, r2
 8006612:	4013      	ands	r3, r2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d13a      	bne.n	800668e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e0b2      	b.n	8006782 <HAL_RCC_ClockConfig+0x2de>
 800661c:	2302      	movs	r3, #2
 800661e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	fa93 f3a3 	rbit	r3, r3
 8006626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800662a:	fab3 f383 	clz	r3, r3
 800662e:	b2db      	uxtb	r3, r3
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b01      	cmp	r3, #1
 800663c:	d102      	bne.n	8006644 <HAL_RCC_ClockConfig+0x1a0>
 800663e:	4b31      	ldr	r3, [pc, #196]	@ (8006704 <HAL_RCC_ClockConfig+0x260>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	e00d      	b.n	8006660 <HAL_RCC_ClockConfig+0x1bc>
 8006644:	2302      	movs	r3, #2
 8006646:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664a:	fa93 f3a3 	rbit	r3, r3
 800664e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006650:	2302      	movs	r3, #2
 8006652:	623b      	str	r3, [r7, #32]
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	fa93 f3a3 	rbit	r3, r3
 800665a:	61fb      	str	r3, [r7, #28]
 800665c:	4b29      	ldr	r3, [pc, #164]	@ (8006704 <HAL_RCC_ClockConfig+0x260>)
 800665e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006660:	2202      	movs	r2, #2
 8006662:	61ba      	str	r2, [r7, #24]
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	fa92 f2a2 	rbit	r2, r2
 800666a:	617a      	str	r2, [r7, #20]
  return result;
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	fab2 f282 	clz	r2, r2
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	f042 0220 	orr.w	r2, r2, #32
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	f002 021f 	and.w	r2, r2, #31
 800667e:	2101      	movs	r1, #1
 8006680:	fa01 f202 	lsl.w	r2, r1, r2
 8006684:	4013      	ands	r3, r2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e079      	b.n	8006782 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800668e:	4b1d      	ldr	r3, [pc, #116]	@ (8006704 <HAL_RCC_ClockConfig+0x260>)
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f023 0203 	bic.w	r2, r3, #3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	491a      	ldr	r1, [pc, #104]	@ (8006704 <HAL_RCC_ClockConfig+0x260>)
 800669c:	4313      	orrs	r3, r2
 800669e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066a0:	f7fd f88c 	bl	80037bc <HAL_GetTick>
 80066a4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066a6:	e00a      	b.n	80066be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066a8:	f7fd f888 	bl	80037bc <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e061      	b.n	8006782 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066be:	4b11      	ldr	r3, [pc, #68]	@ (8006704 <HAL_RCC_ClockConfig+0x260>)
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f003 020c 	and.w	r2, r3, #12
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d1eb      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006700 <HAL_RCC_ClockConfig+0x25c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d214      	bcs.n	8006708 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066de:	4b08      	ldr	r3, [pc, #32]	@ (8006700 <HAL_RCC_ClockConfig+0x25c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f023 0207 	bic.w	r2, r3, #7
 80066e6:	4906      	ldr	r1, [pc, #24]	@ (8006700 <HAL_RCC_ClockConfig+0x25c>)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ee:	4b04      	ldr	r3, [pc, #16]	@ (8006700 <HAL_RCC_ClockConfig+0x25c>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d005      	beq.n	8006708 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e040      	b.n	8006782 <HAL_RCC_ClockConfig+0x2de>
 8006700:	40022000 	.word	0x40022000
 8006704:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d008      	beq.n	8006726 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006714:	4b1d      	ldr	r3, [pc, #116]	@ (800678c <HAL_RCC_ClockConfig+0x2e8>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	491a      	ldr	r1, [pc, #104]	@ (800678c <HAL_RCC_ClockConfig+0x2e8>)
 8006722:	4313      	orrs	r3, r2
 8006724:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006732:	4b16      	ldr	r3, [pc, #88]	@ (800678c <HAL_RCC_ClockConfig+0x2e8>)
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	4912      	ldr	r1, [pc, #72]	@ (800678c <HAL_RCC_ClockConfig+0x2e8>)
 8006742:	4313      	orrs	r3, r2
 8006744:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006746:	f000 f829 	bl	800679c <HAL_RCC_GetSysClockFreq>
 800674a:	4601      	mov	r1, r0
 800674c:	4b0f      	ldr	r3, [pc, #60]	@ (800678c <HAL_RCC_ClockConfig+0x2e8>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006754:	22f0      	movs	r2, #240	@ 0xf0
 8006756:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	fa92 f2a2 	rbit	r2, r2
 800675e:	60fa      	str	r2, [r7, #12]
  return result;
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	fab2 f282 	clz	r2, r2
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	40d3      	lsrs	r3, r2
 800676a:	4a09      	ldr	r2, [pc, #36]	@ (8006790 <HAL_RCC_ClockConfig+0x2ec>)
 800676c:	5cd3      	ldrb	r3, [r2, r3]
 800676e:	fa21 f303 	lsr.w	r3, r1, r3
 8006772:	4a08      	ldr	r2, [pc, #32]	@ (8006794 <HAL_RCC_ClockConfig+0x2f0>)
 8006774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006776:	4b08      	ldr	r3, [pc, #32]	@ (8006798 <HAL_RCC_ClockConfig+0x2f4>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f7fc ffda 	bl	8003734 <HAL_InitTick>
  
  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3778      	adds	r7, #120	@ 0x78
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	40021000 	.word	0x40021000
 8006790:	0800fb38 	.word	0x0800fb38
 8006794:	20000000 	.word	0x20000000
 8006798:	20000004 	.word	0x20000004

0800679c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	2300      	movs	r3, #0
 80067a8:	60bb      	str	r3, [r7, #8]
 80067aa:	2300      	movs	r3, #0
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	2300      	movs	r3, #0
 80067b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80067b6:	4b1f      	ldr	r3, [pc, #124]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x98>)
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f003 030c 	and.w	r3, r3, #12
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d002      	beq.n	80067cc <HAL_RCC_GetSysClockFreq+0x30>
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	d003      	beq.n	80067d2 <HAL_RCC_GetSysClockFreq+0x36>
 80067ca:	e029      	b.n	8006820 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006838 <HAL_RCC_GetSysClockFreq+0x9c>)
 80067ce:	613b      	str	r3, [r7, #16]
      break;
 80067d0:	e029      	b.n	8006826 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	0c9b      	lsrs	r3, r3, #18
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	4a18      	ldr	r2, [pc, #96]	@ (800683c <HAL_RCC_GetSysClockFreq+0xa0>)
 80067dc:	5cd3      	ldrb	r3, [r2, r3]
 80067de:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80067e0:	4b14      	ldr	r3, [pc, #80]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x98>)
 80067e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	4a15      	ldr	r2, [pc, #84]	@ (8006840 <HAL_RCC_GetSysClockFreq+0xa4>)
 80067ea:	5cd3      	ldrb	r3, [r2, r3]
 80067ec:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80067f8:	4a0f      	ldr	r2, [pc, #60]	@ (8006838 <HAL_RCC_GetSysClockFreq+0x9c>)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	fb02 f303 	mul.w	r3, r2, r3
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	e007      	b.n	800681a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800680a:	4a0b      	ldr	r2, [pc, #44]	@ (8006838 <HAL_RCC_GetSysClockFreq+0x9c>)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	fb02 f303 	mul.w	r3, r2, r3
 8006818:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	613b      	str	r3, [r7, #16]
      break;
 800681e:	e002      	b.n	8006826 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006820:	4b05      	ldr	r3, [pc, #20]	@ (8006838 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006822:	613b      	str	r3, [r7, #16]
      break;
 8006824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006826:	693b      	ldr	r3, [r7, #16]
}
 8006828:	4618      	mov	r0, r3
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	40021000 	.word	0x40021000
 8006838:	007a1200 	.word	0x007a1200
 800683c:	0800fb50 	.word	0x0800fb50
 8006840:	0800fb60 	.word	0x0800fb60

08006844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006848:	4b03      	ldr	r3, [pc, #12]	@ (8006858 <HAL_RCC_GetHCLKFreq+0x14>)
 800684a:	681b      	ldr	r3, [r3, #0]
}
 800684c:	4618      	mov	r0, r3
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20000000 	.word	0x20000000

0800685c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006862:	f7ff ffef 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 8006866:	4601      	mov	r1, r0
 8006868:	4b0b      	ldr	r3, [pc, #44]	@ (8006898 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006870:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006874:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	fa92 f2a2 	rbit	r2, r2
 800687c:	603a      	str	r2, [r7, #0]
  return result;
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	fab2 f282 	clz	r2, r2
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	40d3      	lsrs	r3, r2
 8006888:	4a04      	ldr	r2, [pc, #16]	@ (800689c <HAL_RCC_GetPCLK1Freq+0x40>)
 800688a:	5cd3      	ldrb	r3, [r2, r3]
 800688c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006890:	4618      	mov	r0, r3
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	40021000 	.word	0x40021000
 800689c:	0800fb48 	.word	0x0800fb48

080068a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80068a6:	f7ff ffcd 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 80068aa:	4601      	mov	r1, r0
 80068ac:	4b0b      	ldr	r3, [pc, #44]	@ (80068dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80068b4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80068b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	fa92 f2a2 	rbit	r2, r2
 80068c0:	603a      	str	r2, [r7, #0]
  return result;
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	fab2 f282 	clz	r2, r2
 80068c8:	b2d2      	uxtb	r2, r2
 80068ca:	40d3      	lsrs	r3, r2
 80068cc:	4a04      	ldr	r2, [pc, #16]	@ (80068e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80068ce:	5cd3      	ldrb	r3, [r2, r3]
 80068d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	40021000 	.word	0x40021000
 80068e0:	0800fb48 	.word	0x0800fb48

080068e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b092      	sub	sp, #72	@ 0x48
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80068f4:	2300      	movs	r3, #0
 80068f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 80d4 	beq.w	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006908:	4b4e      	ldr	r3, [pc, #312]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10e      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006914:	4b4b      	ldr	r3, [pc, #300]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	4a4a      	ldr	r2, [pc, #296]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800691a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800691e:	61d3      	str	r3, [r2, #28]
 8006920:	4b48      	ldr	r3, [pc, #288]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006928:	60bb      	str	r3, [r7, #8]
 800692a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006932:	4b45      	ldr	r3, [pc, #276]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800693a:	2b00      	cmp	r3, #0
 800693c:	d118      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800693e:	4b42      	ldr	r3, [pc, #264]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a41      	ldr	r2, [pc, #260]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006948:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800694a:	f7fc ff37 	bl	80037bc <HAL_GetTick>
 800694e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006950:	e008      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006952:	f7fc ff33 	bl	80037bc <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b64      	cmp	r3, #100	@ 0x64
 800695e:	d901      	bls.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e1d6      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006964:	4b38      	ldr	r3, [pc, #224]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0f0      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006970:	4b34      	ldr	r3, [pc, #208]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006978:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800697a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 8084 	beq.w	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800698a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800698c:	429a      	cmp	r2, r3
 800698e:	d07c      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006990:	4b2c      	ldr	r3, [pc, #176]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006998:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800699a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800699e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	fa93 f3a3 	rbit	r3, r3
 80069a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80069a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069aa:	fab3 f383 	clz	r3, r3
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	461a      	mov	r2, r3
 80069b2:	4b26      	ldr	r3, [pc, #152]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80069b4:	4413      	add	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	461a      	mov	r2, r3
 80069ba:	2301      	movs	r3, #1
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80069c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c6:	fa93 f3a3 	rbit	r3, r3
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80069cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069ce:	fab3 f383 	clz	r3, r3
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	461a      	mov	r2, r3
 80069de:	2300      	movs	r3, #0
 80069e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80069e2:	4a18      	ldr	r2, [pc, #96]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80069e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d04b      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f2:	f7fc fee3 	bl	80037bc <HAL_GetTick>
 80069f6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069f8:	e00a      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069fa:	f7fc fedf 	bl	80037bc <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d901      	bls.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e180      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006a10:	2302      	movs	r3, #2
 8006a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a16:	fa93 f3a3 	rbit	r3, r3
 8006a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	623b      	str	r3, [r7, #32]
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	fa93 f3a3 	rbit	r3, r3
 8006a26:	61fb      	str	r3, [r7, #28]
  return result;
 8006a28:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a2a:	fab3 f383 	clz	r3, r3
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	095b      	lsrs	r3, r3, #5
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f043 0302 	orr.w	r3, r3, #2
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d108      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006a3e:	4b01      	ldr	r3, [pc, #4]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	e00d      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006a44:	40021000 	.word	0x40021000
 8006a48:	40007000 	.word	0x40007000
 8006a4c:	10908100 	.word	0x10908100
 8006a50:	2302      	movs	r3, #2
 8006a52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	fa93 f3a3 	rbit	r3, r3
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	4b9a      	ldr	r3, [pc, #616]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a60:	2202      	movs	r2, #2
 8006a62:	613a      	str	r2, [r7, #16]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	fa92 f2a2 	rbit	r2, r2
 8006a6a:	60fa      	str	r2, [r7, #12]
  return result;
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	fab2 f282 	clz	r2, r2
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	f002 021f 	and.w	r2, r2, #31
 8006a7e:	2101      	movs	r1, #1
 8006a80:	fa01 f202 	lsl.w	r2, r1, r2
 8006a84:	4013      	ands	r3, r2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0b7      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006a8a:	4b8f      	ldr	r3, [pc, #572]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	498c      	ldr	r1, [pc, #560]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d105      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aa4:	4b88      	ldr	r3, [pc, #544]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	4a87      	ldr	r2, [pc, #540]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006aae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d008      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006abc:	4b82      	ldr	r3, [pc, #520]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac0:	f023 0203 	bic.w	r2, r3, #3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	497f      	ldr	r1, [pc, #508]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d008      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ada:	4b7b      	ldr	r3, [pc, #492]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ade:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	4978      	ldr	r1, [pc, #480]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d008      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006af8:	4b73      	ldr	r3, [pc, #460]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	4970      	ldr	r1, [pc, #448]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0320 	and.w	r3, r3, #32
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d008      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b16:	4b6c      	ldr	r3, [pc, #432]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1a:	f023 0210 	bic.w	r2, r3, #16
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	4969      	ldr	r1, [pc, #420]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d008      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006b34:	4b64      	ldr	r3, [pc, #400]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b40:	4961      	ldr	r1, [pc, #388]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d008      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b52:	4b5d      	ldr	r3, [pc, #372]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b56:	f023 0220 	bic.w	r2, r3, #32
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	495a      	ldr	r1, [pc, #360]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d008      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b70:	4b55      	ldr	r3, [pc, #340]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b74:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7c:	4952      	ldr	r1, [pc, #328]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d008      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b8e:	4b4e      	ldr	r3, [pc, #312]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	494b      	ldr	r1, [pc, #300]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d008      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006bac:	4b46      	ldr	r3, [pc, #280]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	4943      	ldr	r1, [pc, #268]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d008      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006bca:	4b3f      	ldr	r3, [pc, #252]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd6:	493c      	ldr	r1, [pc, #240]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d008      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006be8:	4b37      	ldr	r3, [pc, #220]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bec:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf4:	4934      	ldr	r1, [pc, #208]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d008      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006c06:	4b30      	ldr	r3, [pc, #192]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c12:	492d      	ldr	r1, [pc, #180]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d008      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006c24:	4b28      	ldr	r3, [pc, #160]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c30:	4925      	ldr	r1, [pc, #148]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d008      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006c42:	4b21      	ldr	r3, [pc, #132]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c46:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4e:	491e      	ldr	r1, [pc, #120]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d008      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006c60:	4b19      	ldr	r3, [pc, #100]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c64:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6c:	4916      	ldr	r1, [pc, #88]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d008      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006c7e:	4b12      	ldr	r3, [pc, #72]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c82:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8a:	490f      	ldr	r1, [pc, #60]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d008      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca8:	4907      	ldr	r1, [pc, #28]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00c      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006cba:	4b03      	ldr	r3, [pc, #12]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbe:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	e002      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006cc6:	bf00      	nop
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cce:	4913      	ldr	r1, [pc, #76]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d008      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cec:	490b      	ldr	r1, [pc, #44]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d008      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006cfe:	4b07      	ldr	r3, [pc, #28]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d02:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d0a:	4904      	ldr	r1, [pc, #16]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3748      	adds	r7, #72	@ 0x48
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40021000 	.word	0x40021000

08006d20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e073      	b.n	8006e1e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	7f5b      	ldrb	r3, [r3, #29]
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d105      	bne.n	8006d4c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fc f838 	bl	8002dbc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 0310 	and.w	r3, r3, #16
 8006d5c:	2b10      	cmp	r3, #16
 8006d5e:	d055      	beq.n	8006e0c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	22ca      	movs	r2, #202	@ 0xca
 8006d66:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2253      	movs	r2, #83	@ 0x53
 8006d6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f87f 	bl	8006e74 <RTC_EnterInitMode>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d12c      	bne.n	8006dda <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6812      	ldr	r2, [r2, #0]
 8006d8a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006d8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d92:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6899      	ldr	r1, [r3, #8]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	68d2      	ldr	r2, [r2, #12]
 8006dba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6919      	ldr	r1, [r3, #16]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	041a      	lsls	r2, r3, #16
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f886 	bl	8006ee2 <RTC_ExitInitMode>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d110      	bne.n	8006e02 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006dee:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	699a      	ldr	r2, [r3, #24]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	22ff      	movs	r2, #255	@ 0xff
 8006e08:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e0a:	e001      	b.n	8006e10 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d102      	bne.n	8006e1c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a0d      	ldr	r2, [pc, #52]	@ (8006e70 <HAL_RTC_WaitForSynchro+0x48>)
 8006e3a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e3c:	f7fc fcbe 	bl	80037bc <HAL_GetTick>
 8006e40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e42:	e009      	b.n	8006e58 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e44:	f7fc fcba 	bl	80037bc <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e52:	d901      	bls.n	8006e58 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e007      	b.n	8006e68 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0ee      	beq.n	8006e44 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	0001ff5f 	.word	0x0001ff5f

08006e74 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d122      	bne.n	8006ed8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ea0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ea2:	f7fc fc8b 	bl	80037bc <HAL_GetTick>
 8006ea6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ea8:	e00c      	b.n	8006ec4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006eaa:	f7fc fc87 	bl	80037bc <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006eb8:	d904      	bls.n	8006ec4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2204      	movs	r2, #4
 8006ebe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d102      	bne.n	8006ed8 <RTC_EnterInitMode+0x64>
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d1e8      	bne.n	8006eaa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006efc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 0320 	and.w	r3, r3, #32
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7ff ff8b 	bl	8006e28 <HAL_RTC_WaitForSynchro>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d004      	beq.n	8006f22 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e049      	b.n	8006fd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fc f892 	bl	800307c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3304      	adds	r3, #4
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f000 fd7c 	bl	8007a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d001      	beq.n	8006ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e04f      	b.n	8007094 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a23      	ldr	r2, [pc, #140]	@ (80070a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d01d      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x76>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800701e:	d018      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x76>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1f      	ldr	r2, [pc, #124]	@ (80070a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x76>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1e      	ldr	r2, [pc, #120]	@ (80070a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00e      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x76>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a1c      	ldr	r2, [pc, #112]	@ (80070ac <HAL_TIM_Base_Start_IT+0xd0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d009      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x76>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a1b      	ldr	r2, [pc, #108]	@ (80070b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d004      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x76>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a19      	ldr	r2, [pc, #100]	@ (80070b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d115      	bne.n	800707e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	4b17      	ldr	r3, [pc, #92]	@ (80070b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800705a:	4013      	ands	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b06      	cmp	r3, #6
 8007062:	d015      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0xb4>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800706a:	d011      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0201 	orr.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707c:	e008      	b.n	8007090 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f042 0201 	orr.w	r2, r2, #1
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	e000      	b.n	8007092 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007090:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40000400 	.word	0x40000400
 80070a8:	40000800 	.word	0x40000800
 80070ac:	40013400 	.word	0x40013400
 80070b0:	40014000 	.word	0x40014000
 80070b4:	40015000 	.word	0x40015000
 80070b8:	00010007 	.word	0x00010007

080070bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e049      	b.n	8007162 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d106      	bne.n	80070e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fb ffac 	bl	8003040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3304      	adds	r3, #4
 80070f8:	4619      	mov	r1, r3
 80070fa:	4610      	mov	r0, r2
 80070fc:	f000 fcb4 	bl	8007a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d109      	bne.n	8007190 <HAL_TIM_PWM_Start+0x24>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b01      	cmp	r3, #1
 8007186:	bf14      	ite	ne
 8007188:	2301      	movne	r3, #1
 800718a:	2300      	moveq	r3, #0
 800718c:	b2db      	uxtb	r3, r3
 800718e:	e03c      	b.n	800720a <HAL_TIM_PWM_Start+0x9e>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b04      	cmp	r3, #4
 8007194:	d109      	bne.n	80071aa <HAL_TIM_PWM_Start+0x3e>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b01      	cmp	r3, #1
 80071a0:	bf14      	ite	ne
 80071a2:	2301      	movne	r3, #1
 80071a4:	2300      	moveq	r3, #0
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	e02f      	b.n	800720a <HAL_TIM_PWM_Start+0x9e>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d109      	bne.n	80071c4 <HAL_TIM_PWM_Start+0x58>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	bf14      	ite	ne
 80071bc:	2301      	movne	r3, #1
 80071be:	2300      	moveq	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	e022      	b.n	800720a <HAL_TIM_PWM_Start+0x9e>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b0c      	cmp	r3, #12
 80071c8:	d109      	bne.n	80071de <HAL_TIM_PWM_Start+0x72>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	bf14      	ite	ne
 80071d6:	2301      	movne	r3, #1
 80071d8:	2300      	moveq	r3, #0
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	e015      	b.n	800720a <HAL_TIM_PWM_Start+0x9e>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b10      	cmp	r3, #16
 80071e2:	d109      	bne.n	80071f8 <HAL_TIM_PWM_Start+0x8c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	bf14      	ite	ne
 80071f0:	2301      	movne	r3, #1
 80071f2:	2300      	moveq	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	e008      	b.n	800720a <HAL_TIM_PWM_Start+0x9e>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b01      	cmp	r3, #1
 8007202:	bf14      	ite	ne
 8007204:	2301      	movne	r3, #1
 8007206:	2300      	moveq	r3, #0
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e0a1      	b.n	8007356 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d104      	bne.n	8007222 <HAL_TIM_PWM_Start+0xb6>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007220:	e023      	b.n	800726a <HAL_TIM_PWM_Start+0xfe>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b04      	cmp	r3, #4
 8007226:	d104      	bne.n	8007232 <HAL_TIM_PWM_Start+0xc6>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007230:	e01b      	b.n	800726a <HAL_TIM_PWM_Start+0xfe>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b08      	cmp	r3, #8
 8007236:	d104      	bne.n	8007242 <HAL_TIM_PWM_Start+0xd6>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007240:	e013      	b.n	800726a <HAL_TIM_PWM_Start+0xfe>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b0c      	cmp	r3, #12
 8007246:	d104      	bne.n	8007252 <HAL_TIM_PWM_Start+0xe6>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2202      	movs	r2, #2
 800724c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007250:	e00b      	b.n	800726a <HAL_TIM_PWM_Start+0xfe>
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b10      	cmp	r3, #16
 8007256:	d104      	bne.n	8007262 <HAL_TIM_PWM_Start+0xf6>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007260:	e003      	b.n	800726a <HAL_TIM_PWM_Start+0xfe>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2201      	movs	r2, #1
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	f000 ffa8 	bl	80081c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a38      	ldr	r2, [pc, #224]	@ (8007360 <HAL_TIM_PWM_Start+0x1f4>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d018      	beq.n	80072b4 <HAL_TIM_PWM_Start+0x148>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a37      	ldr	r2, [pc, #220]	@ (8007364 <HAL_TIM_PWM_Start+0x1f8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d013      	beq.n	80072b4 <HAL_TIM_PWM_Start+0x148>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a35      	ldr	r2, [pc, #212]	@ (8007368 <HAL_TIM_PWM_Start+0x1fc>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00e      	beq.n	80072b4 <HAL_TIM_PWM_Start+0x148>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a34      	ldr	r2, [pc, #208]	@ (800736c <HAL_TIM_PWM_Start+0x200>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d009      	beq.n	80072b4 <HAL_TIM_PWM_Start+0x148>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a32      	ldr	r2, [pc, #200]	@ (8007370 <HAL_TIM_PWM_Start+0x204>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <HAL_TIM_PWM_Start+0x148>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a31      	ldr	r2, [pc, #196]	@ (8007374 <HAL_TIM_PWM_Start+0x208>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d101      	bne.n	80072b8 <HAL_TIM_PWM_Start+0x14c>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <HAL_TIM_PWM_Start+0x14e>
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a23      	ldr	r2, [pc, #140]	@ (8007360 <HAL_TIM_PWM_Start+0x1f4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d01d      	beq.n	8007314 <HAL_TIM_PWM_Start+0x1a8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072e0:	d018      	beq.n	8007314 <HAL_TIM_PWM_Start+0x1a8>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a24      	ldr	r2, [pc, #144]	@ (8007378 <HAL_TIM_PWM_Start+0x20c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d013      	beq.n	8007314 <HAL_TIM_PWM_Start+0x1a8>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a22      	ldr	r2, [pc, #136]	@ (800737c <HAL_TIM_PWM_Start+0x210>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00e      	beq.n	8007314 <HAL_TIM_PWM_Start+0x1a8>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007364 <HAL_TIM_PWM_Start+0x1f8>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d009      	beq.n	8007314 <HAL_TIM_PWM_Start+0x1a8>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a18      	ldr	r2, [pc, #96]	@ (8007368 <HAL_TIM_PWM_Start+0x1fc>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d004      	beq.n	8007314 <HAL_TIM_PWM_Start+0x1a8>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a19      	ldr	r2, [pc, #100]	@ (8007374 <HAL_TIM_PWM_Start+0x208>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d115      	bne.n	8007340 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	4b19      	ldr	r3, [pc, #100]	@ (8007380 <HAL_TIM_PWM_Start+0x214>)
 800731c:	4013      	ands	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b06      	cmp	r3, #6
 8007324:	d015      	beq.n	8007352 <HAL_TIM_PWM_Start+0x1e6>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800732c:	d011      	beq.n	8007352 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f042 0201 	orr.w	r2, r2, #1
 800733c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800733e:	e008      	b.n	8007352 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0201 	orr.w	r2, r2, #1
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	e000      	b.n	8007354 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007352:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	40012c00 	.word	0x40012c00
 8007364:	40013400 	.word	0x40013400
 8007368:	40014000 	.word	0x40014000
 800736c:	40014400 	.word	0x40014400
 8007370:	40014800 	.word	0x40014800
 8007374:	40015000 	.word	0x40015000
 8007378:	40000400 	.word	0x40000400
 800737c:	40000800 	.word	0x40000800
 8007380:	00010007 	.word	0x00010007

08007384 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e097      	b.n	80074c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d106      	bne.n	80073b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7fb fd2b 	bl	8002e08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	6812      	ldr	r2, [r2, #0]
 80073c4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80073c8:	f023 0307 	bic.w	r3, r3, #7
 80073cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3304      	adds	r3, #4
 80073d6:	4619      	mov	r1, r3
 80073d8:	4610      	mov	r0, r2
 80073da:	f000 fb45 	bl	8007a68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007406:	f023 0303 	bic.w	r3, r3, #3
 800740a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	4313      	orrs	r3, r2
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	4313      	orrs	r3, r2
 800741c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007424:	f023 030c 	bic.w	r3, r3, #12
 8007428:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007430:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007434:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	021b      	lsls	r3, r3, #8
 8007440:	4313      	orrs	r3, r2
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	011a      	lsls	r2, r3, #4
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	031b      	lsls	r3, r3, #12
 8007454:	4313      	orrs	r3, r2
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007462:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800746a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	4313      	orrs	r3, r2
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d110      	bne.n	8007522 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d102      	bne.n	800750c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007506:	7b7b      	ldrb	r3, [r7, #13]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d001      	beq.n	8007510 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e069      	b.n	80075e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007520:	e031      	b.n	8007586 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b04      	cmp	r3, #4
 8007526:	d110      	bne.n	800754a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d102      	bne.n	8007534 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800752e:	7b3b      	ldrb	r3, [r7, #12]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d001      	beq.n	8007538 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e055      	b.n	80075e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007548:	e01d      	b.n	8007586 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d108      	bne.n	8007562 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d105      	bne.n	8007562 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007556:	7b7b      	ldrb	r3, [r7, #13]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d102      	bne.n	8007562 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800755c:	7b3b      	ldrb	r3, [r7, #12]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d001      	beq.n	8007566 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e03e      	b.n	80075e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2202      	movs	r2, #2
 800756a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2202      	movs	r2, #2
 8007572:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2202      	movs	r2, #2
 8007582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_TIM_Encoder_Start+0xc4>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2b04      	cmp	r3, #4
 8007590:	d008      	beq.n	80075a4 <HAL_TIM_Encoder_Start+0xd4>
 8007592:	e00f      	b.n	80075b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2201      	movs	r2, #1
 800759a:	2100      	movs	r1, #0
 800759c:	4618      	mov	r0, r3
 800759e:	f000 fe13 	bl	80081c8 <TIM_CCxChannelCmd>
      break;
 80075a2:	e016      	b.n	80075d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2201      	movs	r2, #1
 80075aa:	2104      	movs	r1, #4
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fe0b 	bl	80081c8 <TIM_CCxChannelCmd>
      break;
 80075b2:	e00e      	b.n	80075d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2201      	movs	r2, #1
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fe03 	bl	80081c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2201      	movs	r2, #1
 80075c8:	2104      	movs	r1, #4
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fdfc 	bl	80081c8 <TIM_CCxChannelCmd>
      break;
 80075d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f042 0201 	orr.w	r2, r2, #1
 80075e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d020      	beq.n	8007650 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01b      	beq.n	8007650 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f06f 0202 	mvn.w	r2, #2
 8007620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f9f8 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 800763c:	e005      	b.n	800764a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f9ea 	bl	8007a18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f9fb 	bl	8007a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f003 0304 	and.w	r3, r3, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	d020      	beq.n	800769c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01b      	beq.n	800769c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f06f 0204 	mvn.w	r2, #4
 800766c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2202      	movs	r2, #2
 8007672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f9d2 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 8007688:	e005      	b.n	8007696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f9c4 	bl	8007a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f9d5 	bl	8007a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f003 0308 	and.w	r3, r3, #8
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d020      	beq.n	80076e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f003 0308 	and.w	r3, r3, #8
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d01b      	beq.n	80076e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f06f 0208 	mvn.w	r2, #8
 80076b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2204      	movs	r2, #4
 80076be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	f003 0303 	and.w	r3, r3, #3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f9ac 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 80076d4:	e005      	b.n	80076e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f99e 	bl	8007a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f9af 	bl	8007a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f003 0310 	and.w	r3, r3, #16
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d020      	beq.n	8007734 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f003 0310 	and.w	r3, r3, #16
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d01b      	beq.n	8007734 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f06f 0210 	mvn.w	r2, #16
 8007704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2208      	movs	r2, #8
 800770a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f986 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 8007720:	e005      	b.n	800772e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f978 	bl	8007a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f989 	bl	8007a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00c      	beq.n	8007758 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b00      	cmp	r3, #0
 8007746:	d007      	beq.n	8007758 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0201 	mvn.w	r2, #1
 8007750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7fa fc5e 	bl	8002014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00c      	beq.n	800777c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007768:	2b00      	cmp	r3, #0
 800776a:	d007      	beq.n	800777c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fde2 	bl	8008340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00c      	beq.n	80077a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800778c:	2b00      	cmp	r3, #0
 800778e:	d007      	beq.n	80077a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fdda 	bl	8008354 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00c      	beq.n	80077c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d007      	beq.n	80077c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80077bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f948 	bl	8007a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00c      	beq.n	80077e8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d007      	beq.n	80077e8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f06f 0220 	mvn.w	r2, #32
 80077e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fda2 	bl	800832c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077e8:	bf00      	nop
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007806:	2b01      	cmp	r3, #1
 8007808:	d101      	bne.n	800780e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800780a:	2302      	movs	r3, #2
 800780c:	e0ff      	b.n	8007a0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b14      	cmp	r3, #20
 800781a:	f200 80f0 	bhi.w	80079fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800781e:	a201      	add	r2, pc, #4	@ (adr r2, 8007824 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007824:	08007879 	.word	0x08007879
 8007828:	080079ff 	.word	0x080079ff
 800782c:	080079ff 	.word	0x080079ff
 8007830:	080079ff 	.word	0x080079ff
 8007834:	080078b9 	.word	0x080078b9
 8007838:	080079ff 	.word	0x080079ff
 800783c:	080079ff 	.word	0x080079ff
 8007840:	080079ff 	.word	0x080079ff
 8007844:	080078fb 	.word	0x080078fb
 8007848:	080079ff 	.word	0x080079ff
 800784c:	080079ff 	.word	0x080079ff
 8007850:	080079ff 	.word	0x080079ff
 8007854:	0800793b 	.word	0x0800793b
 8007858:	080079ff 	.word	0x080079ff
 800785c:	080079ff 	.word	0x080079ff
 8007860:	080079ff 	.word	0x080079ff
 8007864:	0800797d 	.word	0x0800797d
 8007868:	080079ff 	.word	0x080079ff
 800786c:	080079ff 	.word	0x080079ff
 8007870:	080079ff 	.word	0x080079ff
 8007874:	080079bd 	.word	0x080079bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f99c 	bl	8007bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	699a      	ldr	r2, [r3, #24]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0208 	orr.w	r2, r2, #8
 8007892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699a      	ldr	r2, [r3, #24]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 0204 	bic.w	r2, r2, #4
 80078a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6999      	ldr	r1, [r3, #24]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	691a      	ldr	r2, [r3, #16]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	619a      	str	r2, [r3, #24]
      break;
 80078b6:	e0a5      	b.n	8007a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68b9      	ldr	r1, [r7, #8]
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 fa16 	bl	8007cf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	699a      	ldr	r2, [r3, #24]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	699a      	ldr	r2, [r3, #24]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6999      	ldr	r1, [r3, #24]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	021a      	lsls	r2, r3, #8
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	619a      	str	r2, [r3, #24]
      break;
 80078f8:	e084      	b.n	8007a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68b9      	ldr	r1, [r7, #8]
 8007900:	4618      	mov	r0, r3
 8007902:	f000 fa89 	bl	8007e18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	69da      	ldr	r2, [r3, #28]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 0208 	orr.w	r2, r2, #8
 8007914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	69da      	ldr	r2, [r3, #28]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0204 	bic.w	r2, r2, #4
 8007924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69d9      	ldr	r1, [r3, #28]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	691a      	ldr	r2, [r3, #16]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	61da      	str	r2, [r3, #28]
      break;
 8007938:	e064      	b.n	8007a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68b9      	ldr	r1, [r7, #8]
 8007940:	4618      	mov	r0, r3
 8007942:	f000 fafb 	bl	8007f3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	69da      	ldr	r2, [r3, #28]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	69da      	ldr	r2, [r3, #28]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	69d9      	ldr	r1, [r3, #28]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	021a      	lsls	r2, r3, #8
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	61da      	str	r2, [r3, #28]
      break;
 800797a:	e043      	b.n	8007a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68b9      	ldr	r1, [r7, #8]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fb4a 	bl	800801c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0208 	orr.w	r2, r2, #8
 8007996:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0204 	bic.w	r2, r2, #4
 80079a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	691a      	ldr	r2, [r3, #16]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80079ba:	e023      	b.n	8007a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fb94 	bl	80080f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	021a      	lsls	r2, r3, #8
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80079fc:	e002      	b.n	8007a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	75fb      	strb	r3, [r7, #23]
      break;
 8007a02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop

08007a18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a48      	ldr	r2, [pc, #288]	@ (8007b9c <TIM_Base_SetConfig+0x134>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d013      	beq.n	8007aa8 <TIM_Base_SetConfig+0x40>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a86:	d00f      	beq.n	8007aa8 <TIM_Base_SetConfig+0x40>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a45      	ldr	r2, [pc, #276]	@ (8007ba0 <TIM_Base_SetConfig+0x138>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00b      	beq.n	8007aa8 <TIM_Base_SetConfig+0x40>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a44      	ldr	r2, [pc, #272]	@ (8007ba4 <TIM_Base_SetConfig+0x13c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d007      	beq.n	8007aa8 <TIM_Base_SetConfig+0x40>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a43      	ldr	r2, [pc, #268]	@ (8007ba8 <TIM_Base_SetConfig+0x140>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d003      	beq.n	8007aa8 <TIM_Base_SetConfig+0x40>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a42      	ldr	r2, [pc, #264]	@ (8007bac <TIM_Base_SetConfig+0x144>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d108      	bne.n	8007aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a37      	ldr	r2, [pc, #220]	@ (8007b9c <TIM_Base_SetConfig+0x134>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d01f      	beq.n	8007b02 <TIM_Base_SetConfig+0x9a>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ac8:	d01b      	beq.n	8007b02 <TIM_Base_SetConfig+0x9a>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a34      	ldr	r2, [pc, #208]	@ (8007ba0 <TIM_Base_SetConfig+0x138>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d017      	beq.n	8007b02 <TIM_Base_SetConfig+0x9a>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a33      	ldr	r2, [pc, #204]	@ (8007ba4 <TIM_Base_SetConfig+0x13c>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d013      	beq.n	8007b02 <TIM_Base_SetConfig+0x9a>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a32      	ldr	r2, [pc, #200]	@ (8007ba8 <TIM_Base_SetConfig+0x140>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d00f      	beq.n	8007b02 <TIM_Base_SetConfig+0x9a>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a32      	ldr	r2, [pc, #200]	@ (8007bb0 <TIM_Base_SetConfig+0x148>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d00b      	beq.n	8007b02 <TIM_Base_SetConfig+0x9a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a31      	ldr	r2, [pc, #196]	@ (8007bb4 <TIM_Base_SetConfig+0x14c>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d007      	beq.n	8007b02 <TIM_Base_SetConfig+0x9a>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a30      	ldr	r2, [pc, #192]	@ (8007bb8 <TIM_Base_SetConfig+0x150>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d003      	beq.n	8007b02 <TIM_Base_SetConfig+0x9a>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a2b      	ldr	r2, [pc, #172]	@ (8007bac <TIM_Base_SetConfig+0x144>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d108      	bne.n	8007b14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a18      	ldr	r2, [pc, #96]	@ (8007b9c <TIM_Base_SetConfig+0x134>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d013      	beq.n	8007b68 <TIM_Base_SetConfig+0x100>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a19      	ldr	r2, [pc, #100]	@ (8007ba8 <TIM_Base_SetConfig+0x140>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d00f      	beq.n	8007b68 <TIM_Base_SetConfig+0x100>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a19      	ldr	r2, [pc, #100]	@ (8007bb0 <TIM_Base_SetConfig+0x148>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00b      	beq.n	8007b68 <TIM_Base_SetConfig+0x100>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a18      	ldr	r2, [pc, #96]	@ (8007bb4 <TIM_Base_SetConfig+0x14c>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d007      	beq.n	8007b68 <TIM_Base_SetConfig+0x100>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a17      	ldr	r2, [pc, #92]	@ (8007bb8 <TIM_Base_SetConfig+0x150>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d003      	beq.n	8007b68 <TIM_Base_SetConfig+0x100>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a12      	ldr	r2, [pc, #72]	@ (8007bac <TIM_Base_SetConfig+0x144>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d103      	bne.n	8007b70 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	691a      	ldr	r2, [r3, #16]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d105      	bne.n	8007b8e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	f023 0201 	bic.w	r2, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	611a      	str	r2, [r3, #16]
  }
}
 8007b8e:	bf00      	nop
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40012c00 	.word	0x40012c00
 8007ba0:	40000400 	.word	0x40000400
 8007ba4:	40000800 	.word	0x40000800
 8007ba8:	40013400 	.word	0x40013400
 8007bac:	40015000 	.word	0x40015000
 8007bb0:	40014000 	.word	0x40014000
 8007bb4:	40014400 	.word	0x40014400
 8007bb8:	40014800 	.word	0x40014800

08007bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	f023 0201 	bic.w	r2, r3, #1
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f023 0303 	bic.w	r3, r3, #3
 8007bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f023 0302 	bic.w	r3, r3, #2
 8007c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a30      	ldr	r2, [pc, #192]	@ (8007cd8 <TIM_OC1_SetConfig+0x11c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d013      	beq.n	8007c44 <TIM_OC1_SetConfig+0x88>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8007cdc <TIM_OC1_SetConfig+0x120>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d00f      	beq.n	8007c44 <TIM_OC1_SetConfig+0x88>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a2e      	ldr	r2, [pc, #184]	@ (8007ce0 <TIM_OC1_SetConfig+0x124>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d00b      	beq.n	8007c44 <TIM_OC1_SetConfig+0x88>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8007ce4 <TIM_OC1_SetConfig+0x128>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d007      	beq.n	8007c44 <TIM_OC1_SetConfig+0x88>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a2c      	ldr	r2, [pc, #176]	@ (8007ce8 <TIM_OC1_SetConfig+0x12c>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d003      	beq.n	8007c44 <TIM_OC1_SetConfig+0x88>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a2b      	ldr	r2, [pc, #172]	@ (8007cec <TIM_OC1_SetConfig+0x130>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d10c      	bne.n	8007c5e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f023 0308 	bic.w	r3, r3, #8
 8007c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f023 0304 	bic.w	r3, r3, #4
 8007c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a1d      	ldr	r2, [pc, #116]	@ (8007cd8 <TIM_OC1_SetConfig+0x11c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d013      	beq.n	8007c8e <TIM_OC1_SetConfig+0xd2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a1c      	ldr	r2, [pc, #112]	@ (8007cdc <TIM_OC1_SetConfig+0x120>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d00f      	beq.n	8007c8e <TIM_OC1_SetConfig+0xd2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a1b      	ldr	r2, [pc, #108]	@ (8007ce0 <TIM_OC1_SetConfig+0x124>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d00b      	beq.n	8007c8e <TIM_OC1_SetConfig+0xd2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a1a      	ldr	r2, [pc, #104]	@ (8007ce4 <TIM_OC1_SetConfig+0x128>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d007      	beq.n	8007c8e <TIM_OC1_SetConfig+0xd2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a19      	ldr	r2, [pc, #100]	@ (8007ce8 <TIM_OC1_SetConfig+0x12c>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d003      	beq.n	8007c8e <TIM_OC1_SetConfig+0xd2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a18      	ldr	r2, [pc, #96]	@ (8007cec <TIM_OC1_SetConfig+0x130>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d111      	bne.n	8007cb2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	621a      	str	r2, [r3, #32]
}
 8007ccc:	bf00      	nop
 8007cce:	371c      	adds	r7, #28
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	40012c00 	.word	0x40012c00
 8007cdc:	40013400 	.word	0x40013400
 8007ce0:	40014000 	.word	0x40014000
 8007ce4:	40014400 	.word	0x40014400
 8007ce8:	40014800 	.word	0x40014800
 8007cec:	40015000 	.word	0x40015000

08007cf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	f023 0210 	bic.w	r2, r3, #16
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f023 0320 	bic.w	r3, r3, #32
 8007d3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	011b      	lsls	r3, r3, #4
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8007e00 <TIM_OC2_SetConfig+0x110>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d007      	beq.n	8007d64 <TIM_OC2_SetConfig+0x74>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a2b      	ldr	r2, [pc, #172]	@ (8007e04 <TIM_OC2_SetConfig+0x114>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d003      	beq.n	8007d64 <TIM_OC2_SetConfig+0x74>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8007e08 <TIM_OC2_SetConfig+0x118>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d10d      	bne.n	8007d80 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	011b      	lsls	r3, r3, #4
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a1f      	ldr	r2, [pc, #124]	@ (8007e00 <TIM_OC2_SetConfig+0x110>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d013      	beq.n	8007db0 <TIM_OC2_SetConfig+0xc0>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8007e04 <TIM_OC2_SetConfig+0x114>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d00f      	beq.n	8007db0 <TIM_OC2_SetConfig+0xc0>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a1e      	ldr	r2, [pc, #120]	@ (8007e0c <TIM_OC2_SetConfig+0x11c>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d00b      	beq.n	8007db0 <TIM_OC2_SetConfig+0xc0>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8007e10 <TIM_OC2_SetConfig+0x120>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d007      	beq.n	8007db0 <TIM_OC2_SetConfig+0xc0>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a1c      	ldr	r2, [pc, #112]	@ (8007e14 <TIM_OC2_SetConfig+0x124>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d003      	beq.n	8007db0 <TIM_OC2_SetConfig+0xc0>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a17      	ldr	r2, [pc, #92]	@ (8007e08 <TIM_OC2_SetConfig+0x118>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d113      	bne.n	8007dd8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007db6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dbe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	621a      	str	r2, [r3, #32]
}
 8007df2:	bf00      	nop
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	40012c00 	.word	0x40012c00
 8007e04:	40013400 	.word	0x40013400
 8007e08:	40015000 	.word	0x40015000
 8007e0c:	40014000 	.word	0x40014000
 8007e10:	40014400 	.word	0x40014400
 8007e14:	40014800 	.word	0x40014800

08007e18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a1b      	ldr	r3, [r3, #32]
 8007e2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f023 0303 	bic.w	r3, r3, #3
 8007e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	021b      	lsls	r3, r3, #8
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a2b      	ldr	r2, [pc, #172]	@ (8007f24 <TIM_OC3_SetConfig+0x10c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d007      	beq.n	8007e8a <TIM_OC3_SetConfig+0x72>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8007f28 <TIM_OC3_SetConfig+0x110>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <TIM_OC3_SetConfig+0x72>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a29      	ldr	r2, [pc, #164]	@ (8007f2c <TIM_OC3_SetConfig+0x114>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d10d      	bne.n	8007ea6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ea4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a1e      	ldr	r2, [pc, #120]	@ (8007f24 <TIM_OC3_SetConfig+0x10c>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d013      	beq.n	8007ed6 <TIM_OC3_SetConfig+0xbe>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f28 <TIM_OC3_SetConfig+0x110>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d00f      	beq.n	8007ed6 <TIM_OC3_SetConfig+0xbe>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f30 <TIM_OC3_SetConfig+0x118>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d00b      	beq.n	8007ed6 <TIM_OC3_SetConfig+0xbe>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8007f34 <TIM_OC3_SetConfig+0x11c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d007      	beq.n	8007ed6 <TIM_OC3_SetConfig+0xbe>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8007f38 <TIM_OC3_SetConfig+0x120>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d003      	beq.n	8007ed6 <TIM_OC3_SetConfig+0xbe>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a16      	ldr	r2, [pc, #88]	@ (8007f2c <TIM_OC3_SetConfig+0x114>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d113      	bne.n	8007efe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	011b      	lsls	r3, r3, #4
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	bf00      	nop
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	40013400 	.word	0x40013400
 8007f2c:	40015000 	.word	0x40015000
 8007f30:	40014000 	.word	0x40014000
 8007f34:	40014400 	.word	0x40014400
 8007f38:	40014800 	.word	0x40014800

08007f3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a1b      	ldr	r3, [r3, #32]
 8007f50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	031b      	lsls	r3, r3, #12
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8008004 <TIM_OC4_SetConfig+0xc8>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d013      	beq.n	8007fc8 <TIM_OC4_SetConfig+0x8c>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a19      	ldr	r2, [pc, #100]	@ (8008008 <TIM_OC4_SetConfig+0xcc>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d00f      	beq.n	8007fc8 <TIM_OC4_SetConfig+0x8c>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a18      	ldr	r2, [pc, #96]	@ (800800c <TIM_OC4_SetConfig+0xd0>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d00b      	beq.n	8007fc8 <TIM_OC4_SetConfig+0x8c>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a17      	ldr	r2, [pc, #92]	@ (8008010 <TIM_OC4_SetConfig+0xd4>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d007      	beq.n	8007fc8 <TIM_OC4_SetConfig+0x8c>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a16      	ldr	r2, [pc, #88]	@ (8008014 <TIM_OC4_SetConfig+0xd8>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d003      	beq.n	8007fc8 <TIM_OC4_SetConfig+0x8c>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a15      	ldr	r2, [pc, #84]	@ (8008018 <TIM_OC4_SetConfig+0xdc>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d109      	bne.n	8007fdc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	695b      	ldr	r3, [r3, #20]
 8007fd4:	019b      	lsls	r3, r3, #6
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	621a      	str	r2, [r3, #32]
}
 8007ff6:	bf00      	nop
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	40012c00 	.word	0x40012c00
 8008008:	40013400 	.word	0x40013400
 800800c:	40014000 	.word	0x40014000
 8008010:	40014400 	.word	0x40014400
 8008014:	40014800 	.word	0x40014800
 8008018:	40015000 	.word	0x40015000

0800801c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800804a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800804e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008060:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	041b      	lsls	r3, r3, #16
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4313      	orrs	r3, r2
 800806c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a19      	ldr	r2, [pc, #100]	@ (80080d8 <TIM_OC5_SetConfig+0xbc>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d013      	beq.n	800809e <TIM_OC5_SetConfig+0x82>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a18      	ldr	r2, [pc, #96]	@ (80080dc <TIM_OC5_SetConfig+0xc0>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d00f      	beq.n	800809e <TIM_OC5_SetConfig+0x82>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a17      	ldr	r2, [pc, #92]	@ (80080e0 <TIM_OC5_SetConfig+0xc4>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d00b      	beq.n	800809e <TIM_OC5_SetConfig+0x82>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a16      	ldr	r2, [pc, #88]	@ (80080e4 <TIM_OC5_SetConfig+0xc8>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d007      	beq.n	800809e <TIM_OC5_SetConfig+0x82>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a15      	ldr	r2, [pc, #84]	@ (80080e8 <TIM_OC5_SetConfig+0xcc>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d003      	beq.n	800809e <TIM_OC5_SetConfig+0x82>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a14      	ldr	r2, [pc, #80]	@ (80080ec <TIM_OC5_SetConfig+0xd0>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d109      	bne.n	80080b2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	621a      	str	r2, [r3, #32]
}
 80080cc:	bf00      	nop
 80080ce:	371c      	adds	r7, #28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	40012c00 	.word	0x40012c00
 80080dc:	40013400 	.word	0x40013400
 80080e0:	40014000 	.word	0x40014000
 80080e4:	40014400 	.word	0x40014400
 80080e8:	40014800 	.word	0x40014800
 80080ec:	40015000 	.word	0x40015000

080080f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800811e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	021b      	lsls	r3, r3, #8
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	4313      	orrs	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	051b      	lsls	r3, r3, #20
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4313      	orrs	r3, r2
 8008142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a1a      	ldr	r2, [pc, #104]	@ (80081b0 <TIM_OC6_SetConfig+0xc0>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d013      	beq.n	8008174 <TIM_OC6_SetConfig+0x84>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a19      	ldr	r2, [pc, #100]	@ (80081b4 <TIM_OC6_SetConfig+0xc4>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d00f      	beq.n	8008174 <TIM_OC6_SetConfig+0x84>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a18      	ldr	r2, [pc, #96]	@ (80081b8 <TIM_OC6_SetConfig+0xc8>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d00b      	beq.n	8008174 <TIM_OC6_SetConfig+0x84>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a17      	ldr	r2, [pc, #92]	@ (80081bc <TIM_OC6_SetConfig+0xcc>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d007      	beq.n	8008174 <TIM_OC6_SetConfig+0x84>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a16      	ldr	r2, [pc, #88]	@ (80081c0 <TIM_OC6_SetConfig+0xd0>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d003      	beq.n	8008174 <TIM_OC6_SetConfig+0x84>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a15      	ldr	r2, [pc, #84]	@ (80081c4 <TIM_OC6_SetConfig+0xd4>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d109      	bne.n	8008188 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800817a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	029b      	lsls	r3, r3, #10
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	4313      	orrs	r3, r2
 8008186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	621a      	str	r2, [r3, #32]
}
 80081a2:	bf00      	nop
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	40012c00 	.word	0x40012c00
 80081b4:	40013400 	.word	0x40013400
 80081b8:	40014000 	.word	0x40014000
 80081bc:	40014400 	.word	0x40014400
 80081c0:	40014800 	.word	0x40014800
 80081c4:	40015000 	.word	0x40015000

080081c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f003 031f 	and.w	r3, r3, #31
 80081da:	2201      	movs	r2, #1
 80081dc:	fa02 f303 	lsl.w	r3, r2, r3
 80081e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6a1a      	ldr	r2, [r3, #32]
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	43db      	mvns	r3, r3
 80081ea:	401a      	ands	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1a      	ldr	r2, [r3, #32]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f003 031f 	and.w	r3, r3, #31
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008200:	431a      	orrs	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	621a      	str	r2, [r3, #32]
}
 8008206:	bf00      	nop
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
	...

08008214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008224:	2b01      	cmp	r3, #1
 8008226:	d101      	bne.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008228:	2302      	movs	r3, #2
 800822a:	e06d      	b.n	8008308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a30      	ldr	r2, [pc, #192]	@ (8008314 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d009      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a2f      	ldr	r2, [pc, #188]	@ (8008318 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d004      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a2d      	ldr	r2, [pc, #180]	@ (800831c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d108      	bne.n	800827c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008270:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	4313      	orrs	r3, r2
 800827a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	4313      	orrs	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a1e      	ldr	r2, [pc, #120]	@ (8008314 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d01d      	beq.n	80082dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082a8:	d018      	beq.n	80082dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008320 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d013      	beq.n	80082dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a1a      	ldr	r2, [pc, #104]	@ (8008324 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d00e      	beq.n	80082dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a15      	ldr	r2, [pc, #84]	@ (8008318 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d009      	beq.n	80082dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a16      	ldr	r2, [pc, #88]	@ (8008328 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d004      	beq.n	80082dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a11      	ldr	r2, [pc, #68]	@ (800831c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d10c      	bne.n	80082f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	40012c00 	.word	0x40012c00
 8008318:	40013400 	.word	0x40013400
 800831c:	40015000 	.word	0x40015000
 8008320:	40000400 	.word	0x40000400
 8008324:	40000800 	.word	0x40000800
 8008328:	40014000 	.word	0x40014000

0800832c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e040      	b.n	80083fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d106      	bne.n	8008390 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fa fef0 	bl	8003170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2224      	movs	r2, #36	@ 0x24
 8008394:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0201 	bic.w	r2, r2, #1
 80083a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fdd0 	bl	8008f54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fbf9 	bl	8008bac <UART_SetConfig>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d101      	bne.n	80083c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e01b      	b.n	80083fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	689a      	ldr	r2, [r3, #8]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f042 0201 	orr.w	r2, r2, #1
 80083f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fe4f 	bl	8009098 <UART_CheckIdleState>
 80083fa:	4603      	mov	r3, r0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08a      	sub	sp, #40	@ 0x28
 8008408:	af02      	add	r7, sp, #8
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	603b      	str	r3, [r7, #0]
 8008410:	4613      	mov	r3, r2
 8008412:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008418:	2b20      	cmp	r3, #32
 800841a:	d177      	bne.n	800850c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <HAL_UART_Transmit+0x24>
 8008422:	88fb      	ldrh	r3, [r7, #6]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e070      	b.n	800850e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2221      	movs	r2, #33	@ 0x21
 8008438:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800843a:	f7fb f9bf 	bl	80037bc <HAL_GetTick>
 800843e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	88fa      	ldrh	r2, [r7, #6]
 8008444:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	88fa      	ldrh	r2, [r7, #6]
 800844c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008458:	d108      	bne.n	800846c <HAL_UART_Transmit+0x68>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d104      	bne.n	800846c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008462:	2300      	movs	r3, #0
 8008464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	61bb      	str	r3, [r7, #24]
 800846a:	e003      	b.n	8008474 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008470:	2300      	movs	r3, #0
 8008472:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008474:	e02f      	b.n	80084d6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2200      	movs	r2, #0
 800847e:	2180      	movs	r1, #128	@ 0x80
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 feb1 	bl	80091e8 <UART_WaitOnFlagUntilTimeout>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d004      	beq.n	8008496 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2220      	movs	r2, #32
 8008490:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e03b      	b.n	800850e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10b      	bne.n	80084b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	881a      	ldrh	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084a8:	b292      	uxth	r2, r2
 80084aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	3302      	adds	r3, #2
 80084b0:	61bb      	str	r3, [r7, #24]
 80084b2:	e007      	b.n	80084c4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	781a      	ldrb	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	3301      	adds	r3, #1
 80084c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	3b01      	subs	r3, #1
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80084dc:	b29b      	uxth	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1c9      	bne.n	8008476 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2200      	movs	r2, #0
 80084ea:	2140      	movs	r1, #64	@ 0x40
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f000 fe7b 	bl	80091e8 <UART_WaitOnFlagUntilTimeout>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d004      	beq.n	8008502 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2220      	movs	r2, #32
 80084fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e005      	b.n	800850e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2220      	movs	r2, #32
 8008506:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	e000      	b.n	800850e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800850c:	2302      	movs	r3, #2
  }
}
 800850e:	4618      	mov	r0, r3
 8008510:	3720      	adds	r7, #32
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b08a      	sub	sp, #40	@ 0x28
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	4613      	mov	r3, r2
 8008522:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800852a:	2b20      	cmp	r3, #32
 800852c:	d132      	bne.n	8008594 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <HAL_UART_Receive_IT+0x24>
 8008534:	88fb      	ldrh	r3, [r7, #6]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e02b      	b.n	8008596 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d018      	beq.n	8008584 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	613b      	str	r3, [r7, #16]
   return(result);
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008566:	627b      	str	r3, [r7, #36]	@ 0x24
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	461a      	mov	r2, r3
 800856e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008570:	623b      	str	r3, [r7, #32]
 8008572:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	69f9      	ldr	r1, [r7, #28]
 8008576:	6a3a      	ldr	r2, [r7, #32]
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	61bb      	str	r3, [r7, #24]
   return(result);
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e6      	bne.n	8008552 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008584:	88fb      	ldrh	r3, [r7, #6]
 8008586:	461a      	mov	r2, r3
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 fe9a 	bl	80092c4 <UART_Start_Receive_IT>
 8008590:	4603      	mov	r3, r0
 8008592:	e000      	b.n	8008596 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008594:	2302      	movs	r3, #2
  }
}
 8008596:	4618      	mov	r0, r3
 8008598:	3728      	adds	r7, #40	@ 0x28
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b0ba      	sub	sp, #232	@ 0xe8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80085ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80085ce:	4013      	ands	r3, r2
 80085d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80085d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d115      	bne.n	8008608 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80085dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00f      	beq.n	8008608 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ec:	f003 0320 	and.w	r3, r3, #32
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d009      	beq.n	8008608 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 82ab 	beq.w	8008b54 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	4798      	blx	r3
      }
      return;
 8008606:	e2a5      	b.n	8008b54 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 8117 	beq.w	8008840 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d106      	bne.n	800862c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800861e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008622:	4b85      	ldr	r3, [pc, #532]	@ (8008838 <HAL_UART_IRQHandler+0x298>)
 8008624:	4013      	ands	r3, r2
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 810a 	beq.w	8008840 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800862c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	2b00      	cmp	r3, #0
 8008636:	d011      	beq.n	800865c <HAL_UART_IRQHandler+0xbc>
 8008638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800863c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00b      	beq.n	800865c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2201      	movs	r2, #1
 800864a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008652:	f043 0201 	orr.w	r2, r3, #1
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800865c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d011      	beq.n	800868c <HAL_UART_IRQHandler+0xec>
 8008668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00b      	beq.n	800868c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2202      	movs	r2, #2
 800867a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008682:	f043 0204 	orr.w	r2, r3, #4
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800868c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008690:	f003 0304 	and.w	r3, r3, #4
 8008694:	2b00      	cmp	r3, #0
 8008696:	d011      	beq.n	80086bc <HAL_UART_IRQHandler+0x11c>
 8008698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800869c:	f003 0301 	and.w	r3, r3, #1
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00b      	beq.n	80086bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2204      	movs	r2, #4
 80086aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086b2:	f043 0202 	orr.w	r2, r3, #2
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086c0:	f003 0308 	and.w	r3, r3, #8
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d017      	beq.n	80086f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086cc:	f003 0320 	and.w	r3, r3, #32
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d105      	bne.n	80086e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80086d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2208      	movs	r2, #8
 80086e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086ee:	f043 0208 	orr.w	r2, r3, #8
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008700:	2b00      	cmp	r3, #0
 8008702:	d012      	beq.n	800872a <HAL_UART_IRQHandler+0x18a>
 8008704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008708:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00c      	beq.n	800872a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008720:	f043 0220 	orr.w	r2, r3, #32
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 8211 	beq.w	8008b58 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800873a:	f003 0320 	and.w	r3, r3, #32
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00d      	beq.n	800875e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008746:	f003 0320 	and.w	r3, r3, #32
 800874a:	2b00      	cmp	r3, #0
 800874c:	d007      	beq.n	800875e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008764:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008772:	2b40      	cmp	r3, #64	@ 0x40
 8008774:	d005      	beq.n	8008782 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800877a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800877e:	2b00      	cmp	r3, #0
 8008780:	d04f      	beq.n	8008822 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fe64 	bl	8009450 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008792:	2b40      	cmp	r3, #64	@ 0x40
 8008794:	d141      	bne.n	800881a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3308      	adds	r3, #8
 800879c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087a4:	e853 3f00 	ldrex	r3, [r3]
 80087a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80087ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3308      	adds	r3, #8
 80087be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80087c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80087c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80087ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80087da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1d9      	bne.n	8008796 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d013      	beq.n	8008812 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ee:	4a13      	ldr	r2, [pc, #76]	@ (800883c <HAL_UART_IRQHandler+0x29c>)
 80087f0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fb f93b 	bl	8003a72 <HAL_DMA_Abort_IT>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d017      	beq.n	8008832 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800880c:	4610      	mov	r0, r2
 800880e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008810:	e00f      	b.n	8008832 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f9b4 	bl	8008b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008818:	e00b      	b.n	8008832 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f9b0 	bl	8008b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008820:	e007      	b.n	8008832 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f9ac 	bl	8008b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008830:	e192      	b.n	8008b58 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008832:	bf00      	nop
    return;
 8008834:	e190      	b.n	8008b58 <HAL_UART_IRQHandler+0x5b8>
 8008836:	bf00      	nop
 8008838:	04000120 	.word	0x04000120
 800883c:	08009519 	.word	0x08009519

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008844:	2b01      	cmp	r3, #1
 8008846:	f040 814b 	bne.w	8008ae0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800884a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800884e:	f003 0310 	and.w	r3, r3, #16
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 8144 	beq.w	8008ae0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800885c:	f003 0310 	and.w	r3, r3, #16
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 813d 	beq.w	8008ae0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2210      	movs	r2, #16
 800886c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008878:	2b40      	cmp	r3, #64	@ 0x40
 800887a:	f040 80b5 	bne.w	80089e8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800888a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 8164 	beq.w	8008b5c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800889a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800889e:	429a      	cmp	r2, r3
 80088a0:	f080 815c 	bcs.w	8008b5c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	2b20      	cmp	r3, #32
 80088b6:	f000 8086 	beq.w	80089c6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80088ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80088d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80088e8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80088f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80088f4:	e841 2300 	strex	r3, r2, [r1]
 80088f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80088fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1da      	bne.n	80088ba <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3308      	adds	r3, #8
 800890a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008914:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008916:	f023 0301 	bic.w	r3, r3, #1
 800891a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3308      	adds	r3, #8
 8008924:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008928:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800892c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008930:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008934:	e841 2300 	strex	r3, r2, [r1]
 8008938:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800893a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1e1      	bne.n	8008904 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3308      	adds	r3, #8
 8008946:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008948:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800894a:	e853 3f00 	ldrex	r3, [r3]
 800894e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008956:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3308      	adds	r3, #8
 8008960:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008964:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008966:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008968:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800896a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800896c:	e841 2300 	strex	r3, r2, [r1]
 8008970:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008972:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e3      	bne.n	8008940 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2220      	movs	r2, #32
 800897c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800898e:	e853 3f00 	ldrex	r3, [r3]
 8008992:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008996:	f023 0310 	bic.w	r3, r3, #16
 800899a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089aa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80089b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e4      	bne.n	8008986 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fb f818 	bl	80039f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2202      	movs	r2, #2
 80089ca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80089d8:	b29b      	uxth	r3, r3
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	b29b      	uxth	r3, r3
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f8d7 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089e6:	e0b9      	b.n	8008b5c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 80ab 	beq.w	8008b60 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8008a0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f000 80a6 	beq.w	8008b60 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	461a      	mov	r2, r3
 8008a32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a36:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a38:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a3e:	e841 2300 	strex	r3, r2, [r1]
 8008a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1e4      	bne.n	8008a14 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3308      	adds	r3, #8
 8008a50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	e853 3f00 	ldrex	r3, [r3]
 8008a58:	623b      	str	r3, [r7, #32]
   return(result);
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	f023 0301 	bic.w	r3, r3, #1
 8008a60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3308      	adds	r3, #8
 8008a6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a76:	e841 2300 	strex	r3, r2, [r1]
 8008a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1e3      	bne.n	8008a4a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2220      	movs	r2, #32
 8008a86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	e853 3f00 	ldrex	r3, [r3]
 8008aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f023 0310 	bic.w	r3, r3, #16
 8008aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008ab8:	61fb      	str	r3, [r7, #28]
 8008aba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abc:	69b9      	ldr	r1, [r7, #24]
 8008abe:	69fa      	ldr	r2, [r7, #28]
 8008ac0:	e841 2300 	strex	r3, r2, [r1]
 8008ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1e4      	bne.n	8008a96 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ad2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f85b 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ade:	e03f      	b.n	8008b60 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ae4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00e      	beq.n	8008b0a <HAL_UART_IRQHandler+0x56a>
 8008aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008af0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d008      	beq.n	8008b0a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008b00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fef0 	bl	80098e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b08:	e02d      	b.n	8008b66 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00e      	beq.n	8008b34 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d008      	beq.n	8008b34 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d01c      	beq.n	8008b64 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	4798      	blx	r3
    }
    return;
 8008b32:	e017      	b.n	8008b64 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d012      	beq.n	8008b66 <HAL_UART_IRQHandler+0x5c6>
 8008b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00c      	beq.n	8008b66 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fcf9 	bl	8009544 <UART_EndTransmit_IT>
    return;
 8008b52:	e008      	b.n	8008b66 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008b54:	bf00      	nop
 8008b56:	e006      	b.n	8008b66 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008b58:	bf00      	nop
 8008b5a:	e004      	b.n	8008b66 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008b5c:	bf00      	nop
 8008b5e:	e002      	b.n	8008b66 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008b60:	bf00      	nop
 8008b62:	e000      	b.n	8008b66 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008b64:	bf00      	nop
  }

}
 8008b66:	37e8      	adds	r7, #232	@ 0xe8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	431a      	orrs	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	4b92      	ldr	r3, [pc, #584]	@ (8008e20 <UART_SetConfig+0x274>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	6812      	ldr	r2, [r2, #0]
 8008bde:	6979      	ldr	r1, [r7, #20]
 8008be0:	430b      	orrs	r3, r1
 8008be2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68da      	ldr	r2, [r3, #12]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	430a      	orrs	r2, r1
 8008c1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a80      	ldr	r2, [pc, #512]	@ (8008e24 <UART_SetConfig+0x278>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d120      	bne.n	8008c6a <UART_SetConfig+0xbe>
 8008c28:	4b7f      	ldr	r3, [pc, #508]	@ (8008e28 <UART_SetConfig+0x27c>)
 8008c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c2c:	f003 0303 	and.w	r3, r3, #3
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	d817      	bhi.n	8008c64 <UART_SetConfig+0xb8>
 8008c34:	a201      	add	r2, pc, #4	@ (adr r2, 8008c3c <UART_SetConfig+0x90>)
 8008c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3a:	bf00      	nop
 8008c3c:	08008c4d 	.word	0x08008c4d
 8008c40:	08008c59 	.word	0x08008c59
 8008c44:	08008c5f 	.word	0x08008c5f
 8008c48:	08008c53 	.word	0x08008c53
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	77fb      	strb	r3, [r7, #31]
 8008c50:	e0b5      	b.n	8008dbe <UART_SetConfig+0x212>
 8008c52:	2302      	movs	r3, #2
 8008c54:	77fb      	strb	r3, [r7, #31]
 8008c56:	e0b2      	b.n	8008dbe <UART_SetConfig+0x212>
 8008c58:	2304      	movs	r3, #4
 8008c5a:	77fb      	strb	r3, [r7, #31]
 8008c5c:	e0af      	b.n	8008dbe <UART_SetConfig+0x212>
 8008c5e:	2308      	movs	r3, #8
 8008c60:	77fb      	strb	r3, [r7, #31]
 8008c62:	e0ac      	b.n	8008dbe <UART_SetConfig+0x212>
 8008c64:	2310      	movs	r3, #16
 8008c66:	77fb      	strb	r3, [r7, #31]
 8008c68:	e0a9      	b.n	8008dbe <UART_SetConfig+0x212>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a6f      	ldr	r2, [pc, #444]	@ (8008e2c <UART_SetConfig+0x280>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d124      	bne.n	8008cbe <UART_SetConfig+0x112>
 8008c74:	4b6c      	ldr	r3, [pc, #432]	@ (8008e28 <UART_SetConfig+0x27c>)
 8008c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008c7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c80:	d011      	beq.n	8008ca6 <UART_SetConfig+0xfa>
 8008c82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c86:	d817      	bhi.n	8008cb8 <UART_SetConfig+0x10c>
 8008c88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c8c:	d011      	beq.n	8008cb2 <UART_SetConfig+0x106>
 8008c8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c92:	d811      	bhi.n	8008cb8 <UART_SetConfig+0x10c>
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <UART_SetConfig+0xf4>
 8008c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c9c:	d006      	beq.n	8008cac <UART_SetConfig+0x100>
 8008c9e:	e00b      	b.n	8008cb8 <UART_SetConfig+0x10c>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	77fb      	strb	r3, [r7, #31]
 8008ca4:	e08b      	b.n	8008dbe <UART_SetConfig+0x212>
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	77fb      	strb	r3, [r7, #31]
 8008caa:	e088      	b.n	8008dbe <UART_SetConfig+0x212>
 8008cac:	2304      	movs	r3, #4
 8008cae:	77fb      	strb	r3, [r7, #31]
 8008cb0:	e085      	b.n	8008dbe <UART_SetConfig+0x212>
 8008cb2:	2308      	movs	r3, #8
 8008cb4:	77fb      	strb	r3, [r7, #31]
 8008cb6:	e082      	b.n	8008dbe <UART_SetConfig+0x212>
 8008cb8:	2310      	movs	r3, #16
 8008cba:	77fb      	strb	r3, [r7, #31]
 8008cbc:	e07f      	b.n	8008dbe <UART_SetConfig+0x212>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a5b      	ldr	r2, [pc, #364]	@ (8008e30 <UART_SetConfig+0x284>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d124      	bne.n	8008d12 <UART_SetConfig+0x166>
 8008cc8:	4b57      	ldr	r3, [pc, #348]	@ (8008e28 <UART_SetConfig+0x27c>)
 8008cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ccc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008cd0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008cd4:	d011      	beq.n	8008cfa <UART_SetConfig+0x14e>
 8008cd6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008cda:	d817      	bhi.n	8008d0c <UART_SetConfig+0x160>
 8008cdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008ce0:	d011      	beq.n	8008d06 <UART_SetConfig+0x15a>
 8008ce2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008ce6:	d811      	bhi.n	8008d0c <UART_SetConfig+0x160>
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <UART_SetConfig+0x148>
 8008cec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008cf0:	d006      	beq.n	8008d00 <UART_SetConfig+0x154>
 8008cf2:	e00b      	b.n	8008d0c <UART_SetConfig+0x160>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	77fb      	strb	r3, [r7, #31]
 8008cf8:	e061      	b.n	8008dbe <UART_SetConfig+0x212>
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	77fb      	strb	r3, [r7, #31]
 8008cfe:	e05e      	b.n	8008dbe <UART_SetConfig+0x212>
 8008d00:	2304      	movs	r3, #4
 8008d02:	77fb      	strb	r3, [r7, #31]
 8008d04:	e05b      	b.n	8008dbe <UART_SetConfig+0x212>
 8008d06:	2308      	movs	r3, #8
 8008d08:	77fb      	strb	r3, [r7, #31]
 8008d0a:	e058      	b.n	8008dbe <UART_SetConfig+0x212>
 8008d0c:	2310      	movs	r3, #16
 8008d0e:	77fb      	strb	r3, [r7, #31]
 8008d10:	e055      	b.n	8008dbe <UART_SetConfig+0x212>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a47      	ldr	r2, [pc, #284]	@ (8008e34 <UART_SetConfig+0x288>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d124      	bne.n	8008d66 <UART_SetConfig+0x1ba>
 8008d1c:	4b42      	ldr	r3, [pc, #264]	@ (8008e28 <UART_SetConfig+0x27c>)
 8008d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d20:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008d24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d28:	d011      	beq.n	8008d4e <UART_SetConfig+0x1a2>
 8008d2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d2e:	d817      	bhi.n	8008d60 <UART_SetConfig+0x1b4>
 8008d30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d34:	d011      	beq.n	8008d5a <UART_SetConfig+0x1ae>
 8008d36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d3a:	d811      	bhi.n	8008d60 <UART_SetConfig+0x1b4>
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <UART_SetConfig+0x19c>
 8008d40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d44:	d006      	beq.n	8008d54 <UART_SetConfig+0x1a8>
 8008d46:	e00b      	b.n	8008d60 <UART_SetConfig+0x1b4>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	77fb      	strb	r3, [r7, #31]
 8008d4c:	e037      	b.n	8008dbe <UART_SetConfig+0x212>
 8008d4e:	2302      	movs	r3, #2
 8008d50:	77fb      	strb	r3, [r7, #31]
 8008d52:	e034      	b.n	8008dbe <UART_SetConfig+0x212>
 8008d54:	2304      	movs	r3, #4
 8008d56:	77fb      	strb	r3, [r7, #31]
 8008d58:	e031      	b.n	8008dbe <UART_SetConfig+0x212>
 8008d5a:	2308      	movs	r3, #8
 8008d5c:	77fb      	strb	r3, [r7, #31]
 8008d5e:	e02e      	b.n	8008dbe <UART_SetConfig+0x212>
 8008d60:	2310      	movs	r3, #16
 8008d62:	77fb      	strb	r3, [r7, #31]
 8008d64:	e02b      	b.n	8008dbe <UART_SetConfig+0x212>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a33      	ldr	r2, [pc, #204]	@ (8008e38 <UART_SetConfig+0x28c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d124      	bne.n	8008dba <UART_SetConfig+0x20e>
 8008d70:	4b2d      	ldr	r3, [pc, #180]	@ (8008e28 <UART_SetConfig+0x27c>)
 8008d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d74:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008d78:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008d7c:	d011      	beq.n	8008da2 <UART_SetConfig+0x1f6>
 8008d7e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008d82:	d817      	bhi.n	8008db4 <UART_SetConfig+0x208>
 8008d84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d88:	d011      	beq.n	8008dae <UART_SetConfig+0x202>
 8008d8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d8e:	d811      	bhi.n	8008db4 <UART_SetConfig+0x208>
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <UART_SetConfig+0x1f0>
 8008d94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d98:	d006      	beq.n	8008da8 <UART_SetConfig+0x1fc>
 8008d9a:	e00b      	b.n	8008db4 <UART_SetConfig+0x208>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	77fb      	strb	r3, [r7, #31]
 8008da0:	e00d      	b.n	8008dbe <UART_SetConfig+0x212>
 8008da2:	2302      	movs	r3, #2
 8008da4:	77fb      	strb	r3, [r7, #31]
 8008da6:	e00a      	b.n	8008dbe <UART_SetConfig+0x212>
 8008da8:	2304      	movs	r3, #4
 8008daa:	77fb      	strb	r3, [r7, #31]
 8008dac:	e007      	b.n	8008dbe <UART_SetConfig+0x212>
 8008dae:	2308      	movs	r3, #8
 8008db0:	77fb      	strb	r3, [r7, #31]
 8008db2:	e004      	b.n	8008dbe <UART_SetConfig+0x212>
 8008db4:	2310      	movs	r3, #16
 8008db6:	77fb      	strb	r3, [r7, #31]
 8008db8:	e001      	b.n	8008dbe <UART_SetConfig+0x212>
 8008dba:	2310      	movs	r3, #16
 8008dbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dc6:	d16b      	bne.n	8008ea0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8008dc8:	7ffb      	ldrb	r3, [r7, #31]
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	d838      	bhi.n	8008e40 <UART_SetConfig+0x294>
 8008dce:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd4 <UART_SetConfig+0x228>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008df9 	.word	0x08008df9
 8008dd8:	08008e01 	.word	0x08008e01
 8008ddc:	08008e09 	.word	0x08008e09
 8008de0:	08008e41 	.word	0x08008e41
 8008de4:	08008e0f 	.word	0x08008e0f
 8008de8:	08008e41 	.word	0x08008e41
 8008dec:	08008e41 	.word	0x08008e41
 8008df0:	08008e41 	.word	0x08008e41
 8008df4:	08008e17 	.word	0x08008e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008df8:	f7fd fd30 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 8008dfc:	61b8      	str	r0, [r7, #24]
        break;
 8008dfe:	e024      	b.n	8008e4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e00:	f7fd fd4e 	bl	80068a0 <HAL_RCC_GetPCLK2Freq>
 8008e04:	61b8      	str	r0, [r7, #24]
        break;
 8008e06:	e020      	b.n	8008e4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e08:	4b0c      	ldr	r3, [pc, #48]	@ (8008e3c <UART_SetConfig+0x290>)
 8008e0a:	61bb      	str	r3, [r7, #24]
        break;
 8008e0c:	e01d      	b.n	8008e4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e0e:	f7fd fcc5 	bl	800679c <HAL_RCC_GetSysClockFreq>
 8008e12:	61b8      	str	r0, [r7, #24]
        break;
 8008e14:	e019      	b.n	8008e4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e1a:	61bb      	str	r3, [r7, #24]
        break;
 8008e1c:	e015      	b.n	8008e4a <UART_SetConfig+0x29e>
 8008e1e:	bf00      	nop
 8008e20:	efff69f3 	.word	0xefff69f3
 8008e24:	40013800 	.word	0x40013800
 8008e28:	40021000 	.word	0x40021000
 8008e2c:	40004400 	.word	0x40004400
 8008e30:	40004800 	.word	0x40004800
 8008e34:	40004c00 	.word	0x40004c00
 8008e38:	40005000 	.word	0x40005000
 8008e3c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	77bb      	strb	r3, [r7, #30]
        break;
 8008e48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d073      	beq.n	8008f38 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	005a      	lsls	r2, r3, #1
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	085b      	lsrs	r3, r3, #1
 8008e5a:	441a      	add	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	2b0f      	cmp	r3, #15
 8008e6a:	d916      	bls.n	8008e9a <UART_SetConfig+0x2ee>
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e72:	d212      	bcs.n	8008e9a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	f023 030f 	bic.w	r3, r3, #15
 8008e7c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	085b      	lsrs	r3, r3, #1
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	f003 0307 	and.w	r3, r3, #7
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	89fb      	ldrh	r3, [r7, #14]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	89fa      	ldrh	r2, [r7, #14]
 8008e96:	60da      	str	r2, [r3, #12]
 8008e98:	e04e      	b.n	8008f38 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	77bb      	strb	r3, [r7, #30]
 8008e9e:	e04b      	b.n	8008f38 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ea0:	7ffb      	ldrb	r3, [r7, #31]
 8008ea2:	2b08      	cmp	r3, #8
 8008ea4:	d827      	bhi.n	8008ef6 <UART_SetConfig+0x34a>
 8008ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8008eac <UART_SetConfig+0x300>)
 8008ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eac:	08008ed1 	.word	0x08008ed1
 8008eb0:	08008ed9 	.word	0x08008ed9
 8008eb4:	08008ee1 	.word	0x08008ee1
 8008eb8:	08008ef7 	.word	0x08008ef7
 8008ebc:	08008ee7 	.word	0x08008ee7
 8008ec0:	08008ef7 	.word	0x08008ef7
 8008ec4:	08008ef7 	.word	0x08008ef7
 8008ec8:	08008ef7 	.word	0x08008ef7
 8008ecc:	08008eef 	.word	0x08008eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ed0:	f7fd fcc4 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 8008ed4:	61b8      	str	r0, [r7, #24]
        break;
 8008ed6:	e013      	b.n	8008f00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ed8:	f7fd fce2 	bl	80068a0 <HAL_RCC_GetPCLK2Freq>
 8008edc:	61b8      	str	r0, [r7, #24]
        break;
 8008ede:	e00f      	b.n	8008f00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8008f50 <UART_SetConfig+0x3a4>)
 8008ee2:	61bb      	str	r3, [r7, #24]
        break;
 8008ee4:	e00c      	b.n	8008f00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ee6:	f7fd fc59 	bl	800679c <HAL_RCC_GetSysClockFreq>
 8008eea:	61b8      	str	r0, [r7, #24]
        break;
 8008eec:	e008      	b.n	8008f00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ef2:	61bb      	str	r3, [r7, #24]
        break;
 8008ef4:	e004      	b.n	8008f00 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	77bb      	strb	r3, [r7, #30]
        break;
 8008efe:	bf00      	nop
    }

    if (pclk != 0U)
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d018      	beq.n	8008f38 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	085a      	lsrs	r2, r3, #1
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	441a      	add	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	2b0f      	cmp	r3, #15
 8008f1e:	d909      	bls.n	8008f34 <UART_SetConfig+0x388>
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f26:	d205      	bcs.n	8008f34 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	60da      	str	r2, [r3, #12]
 8008f32:	e001      	b.n	8008f38 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008f44:	7fbb      	ldrb	r3, [r7, #30]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3720      	adds	r7, #32
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	007a1200 	.word	0x007a1200

08008f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f60:	f003 0308 	and.w	r3, r3, #8
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00a      	beq.n	8008fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc6:	f003 0304 	and.w	r3, r3, #4
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe8:	f003 0310 	and.w	r3, r3, #16
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00a      	beq.n	8009006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00a      	beq.n	8009028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009030:	2b00      	cmp	r3, #0
 8009032:	d01a      	beq.n	800906a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	430a      	orrs	r2, r1
 8009048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800904e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009052:	d10a      	bne.n	800906a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	430a      	orrs	r2, r1
 8009068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00a      	beq.n	800908c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	430a      	orrs	r2, r1
 800908a:	605a      	str	r2, [r3, #4]
  }
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b098      	sub	sp, #96	@ 0x60
 800909c:	af02      	add	r7, sp, #8
 800909e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090a8:	f7fa fb88 	bl	80037bc <HAL_GetTick>
 80090ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0308 	and.w	r3, r3, #8
 80090b8:	2b08      	cmp	r3, #8
 80090ba:	d12e      	bne.n	800911a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090c4:	2200      	movs	r2, #0
 80090c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f88c 	bl	80091e8 <UART_WaitOnFlagUntilTimeout>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d021      	beq.n	800911a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090de:	e853 3f00 	ldrex	r3, [r3]
 80090e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	461a      	mov	r2, r3
 80090f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80090f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090fc:	e841 2300 	strex	r3, r2, [r1]
 8009100:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1e6      	bne.n	80090d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2220      	movs	r2, #32
 800910c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e062      	b.n	80091e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0304 	and.w	r3, r3, #4
 8009124:	2b04      	cmp	r3, #4
 8009126:	d149      	bne.n	80091bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009128:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009130:	2200      	movs	r2, #0
 8009132:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f856 	bl	80091e8 <UART_WaitOnFlagUntilTimeout>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d03c      	beq.n	80091bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	623b      	str	r3, [r7, #32]
   return(result);
 8009150:	6a3b      	ldr	r3, [r7, #32]
 8009152:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	461a      	mov	r2, r3
 800915e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009160:	633b      	str	r3, [r7, #48]	@ 0x30
 8009162:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009164:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009168:	e841 2300 	strex	r3, r2, [r1]
 800916c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800916e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e6      	bne.n	8009142 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3308      	adds	r3, #8
 800917a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	e853 3f00 	ldrex	r3, [r3]
 8009182:	60fb      	str	r3, [r7, #12]
   return(result);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f023 0301 	bic.w	r3, r3, #1
 800918a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3308      	adds	r3, #8
 8009192:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009194:	61fa      	str	r2, [r7, #28]
 8009196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	69b9      	ldr	r1, [r7, #24]
 800919a:	69fa      	ldr	r2, [r7, #28]
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	617b      	str	r3, [r7, #20]
   return(result);
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e5      	bne.n	8009174 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2220      	movs	r2, #32
 80091ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e011      	b.n	80091e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2220      	movs	r2, #32
 80091c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3758      	adds	r7, #88	@ 0x58
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	4613      	mov	r3, r2
 80091f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091f8:	e04f      	b.n	800929a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009200:	d04b      	beq.n	800929a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009202:	f7fa fadb 	bl	80037bc <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	429a      	cmp	r2, r3
 8009210:	d302      	bcc.n	8009218 <UART_WaitOnFlagUntilTimeout+0x30>
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e04e      	b.n	80092ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 0304 	and.w	r3, r3, #4
 8009226:	2b00      	cmp	r3, #0
 8009228:	d037      	beq.n	800929a <UART_WaitOnFlagUntilTimeout+0xb2>
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b80      	cmp	r3, #128	@ 0x80
 800922e:	d034      	beq.n	800929a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2b40      	cmp	r3, #64	@ 0x40
 8009234:	d031      	beq.n	800929a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	f003 0308 	and.w	r3, r3, #8
 8009240:	2b08      	cmp	r3, #8
 8009242:	d110      	bne.n	8009266 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2208      	movs	r2, #8
 800924a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f8ff 	bl	8009450 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2208      	movs	r2, #8
 8009256:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e029      	b.n	80092ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	69db      	ldr	r3, [r3, #28]
 800926c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009274:	d111      	bne.n	800929a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800927e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 f8e5 	bl	8009450 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2220      	movs	r2, #32
 800928a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e00f      	b.n	80092ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69da      	ldr	r2, [r3, #28]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	4013      	ands	r3, r2
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	bf0c      	ite	eq
 80092aa:	2301      	moveq	r3, #1
 80092ac:	2300      	movne	r3, #0
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	461a      	mov	r2, r3
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d0a0      	beq.n	80091fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b097      	sub	sp, #92	@ 0x5c
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	4613      	mov	r3, r2
 80092d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	88fa      	ldrh	r2, [r7, #6]
 80092dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	88fa      	ldrh	r2, [r7, #6]
 80092e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092f6:	d10e      	bne.n	8009316 <UART_Start_Receive_IT+0x52>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d105      	bne.n	800930c <UART_Start_Receive_IT+0x48>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009306:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800930a:	e02d      	b.n	8009368 <UART_Start_Receive_IT+0xa4>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	22ff      	movs	r2, #255	@ 0xff
 8009310:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009314:	e028      	b.n	8009368 <UART_Start_Receive_IT+0xa4>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10d      	bne.n	800933a <UART_Start_Receive_IT+0x76>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d104      	bne.n	8009330 <UART_Start_Receive_IT+0x6c>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	22ff      	movs	r2, #255	@ 0xff
 800932a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800932e:	e01b      	b.n	8009368 <UART_Start_Receive_IT+0xa4>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	227f      	movs	r2, #127	@ 0x7f
 8009334:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009338:	e016      	b.n	8009368 <UART_Start_Receive_IT+0xa4>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009342:	d10d      	bne.n	8009360 <UART_Start_Receive_IT+0x9c>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d104      	bne.n	8009356 <UART_Start_Receive_IT+0x92>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	227f      	movs	r2, #127	@ 0x7f
 8009350:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009354:	e008      	b.n	8009368 <UART_Start_Receive_IT+0xa4>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	223f      	movs	r2, #63	@ 0x3f
 800935a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800935e:	e003      	b.n	8009368 <UART_Start_Receive_IT+0xa4>
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2222      	movs	r2, #34	@ 0x22
 8009374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3308      	adds	r3, #8
 800937e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009382:	e853 3f00 	ldrex	r3, [r3]
 8009386:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938a:	f043 0301 	orr.w	r3, r3, #1
 800938e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3308      	adds	r3, #8
 8009396:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009398:	64ba      	str	r2, [r7, #72]	@ 0x48
 800939a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800939e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093a0:	e841 2300 	strex	r3, r2, [r1]
 80093a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80093a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e5      	bne.n	8009378 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093b4:	d107      	bne.n	80093c6 <UART_Start_Receive_IT+0x102>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d103      	bne.n	80093c6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	4a21      	ldr	r2, [pc, #132]	@ (8009448 <UART_Start_Receive_IT+0x184>)
 80093c2:	669a      	str	r2, [r3, #104]	@ 0x68
 80093c4:	e002      	b.n	80093cc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	4a20      	ldr	r2, [pc, #128]	@ (800944c <UART_Start_Receive_IT+0x188>)
 80093ca:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d019      	beq.n	8009408 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80093e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093f4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80093f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e6      	bne.n	80093d4 <UART_Start_Receive_IT+0x110>
 8009406:	e018      	b.n	800943a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	613b      	str	r3, [r7, #16]
   return(result);
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	f043 0320 	orr.w	r3, r3, #32
 800941c:	653b      	str	r3, [r7, #80]	@ 0x50
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	461a      	mov	r2, r3
 8009424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009426:	623b      	str	r3, [r7, #32]
 8009428:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	69f9      	ldr	r1, [r7, #28]
 800942c:	6a3a      	ldr	r2, [r7, #32]
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	61bb      	str	r3, [r7, #24]
   return(result);
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e6      	bne.n	8009408 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	375c      	adds	r7, #92	@ 0x5c
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	08009741 	.word	0x08009741
 800944c:	08009599 	.word	0x08009599

08009450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009450:	b480      	push	{r7}
 8009452:	b095      	sub	sp, #84	@ 0x54
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009468:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800946c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009476:	643b      	str	r3, [r7, #64]	@ 0x40
 8009478:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800947c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800947e:	e841 2300 	strex	r3, r2, [r1]
 8009482:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1e6      	bne.n	8009458 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3308      	adds	r3, #8
 8009490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	61fb      	str	r3, [r7, #28]
   return(result);
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	f023 0301 	bic.w	r3, r3, #1
 80094a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3308      	adds	r3, #8
 80094a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80094ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e5      	bne.n	800948a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d118      	bne.n	80094f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	e853 3f00 	ldrex	r3, [r3]
 80094d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	f023 0310 	bic.w	r3, r3, #16
 80094da:	647b      	str	r3, [r7, #68]	@ 0x44
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	461a      	mov	r2, r3
 80094e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094e4:	61bb      	str	r3, [r7, #24]
 80094e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e8:	6979      	ldr	r1, [r7, #20]
 80094ea:	69ba      	ldr	r2, [r7, #24]
 80094ec:	e841 2300 	strex	r3, r2, [r1]
 80094f0:	613b      	str	r3, [r7, #16]
   return(result);
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1e6      	bne.n	80094c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2220      	movs	r2, #32
 80094fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800950c:	bf00      	nop
 800950e:	3754      	adds	r7, #84	@ 0x54
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f7ff fb22 	bl	8008b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800953c:	bf00      	nop
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b088      	sub	sp, #32
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	60bb      	str	r3, [r7, #8]
   return(result);
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009560:	61fb      	str	r3, [r7, #28]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	61bb      	str	r3, [r7, #24]
 800956c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956e:	6979      	ldr	r1, [r7, #20]
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	e841 2300 	strex	r3, r2, [r1]
 8009576:	613b      	str	r3, [r7, #16]
   return(result);
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1e6      	bne.n	800954c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2220      	movs	r2, #32
 8009582:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff faee 	bl	8008b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009590:	bf00      	nop
 8009592:	3720      	adds	r7, #32
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b09c      	sub	sp, #112	@ 0x70
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095b0:	2b22      	cmp	r3, #34	@ 0x22
 80095b2:	f040 80b9 	bne.w	8009728 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80095bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80095c4:	b2d9      	uxtb	r1, r3
 80095c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d0:	400a      	ands	r2, r1
 80095d2:	b2d2      	uxtb	r2, r2
 80095d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	3b01      	subs	r3, #1
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f040 809c 	bne.w	8009738 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800960e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009614:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800961e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009620:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009624:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800962c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e6      	bne.n	8009600 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3308      	adds	r3, #8
 8009638:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963c:	e853 3f00 	ldrex	r3, [r3]
 8009640:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009644:	f023 0301 	bic.w	r3, r3, #1
 8009648:	667b      	str	r3, [r7, #100]	@ 0x64
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	3308      	adds	r3, #8
 8009650:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009652:	647a      	str	r2, [r7, #68]	@ 0x44
 8009654:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009656:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800965a:	e841 2300 	strex	r3, r2, [r1]
 800965e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1e5      	bne.n	8009632 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2220      	movs	r2, #32
 800966a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d018      	beq.n	80096ba <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009690:	e853 3f00 	ldrex	r3, [r3]
 8009694:	623b      	str	r3, [r7, #32]
   return(result);
 8009696:	6a3b      	ldr	r3, [r7, #32]
 8009698:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800969c:	663b      	str	r3, [r7, #96]	@ 0x60
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80096a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1e6      	bne.n	8009688 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d12e      	bne.n	8009720 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	e853 3f00 	ldrex	r3, [r3]
 80096d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f023 0310 	bic.w	r3, r3, #16
 80096dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096e6:	61fb      	str	r3, [r7, #28]
 80096e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ea:	69b9      	ldr	r1, [r7, #24]
 80096ec:	69fa      	ldr	r2, [r7, #28]
 80096ee:	e841 2300 	strex	r3, r2, [r1]
 80096f2:	617b      	str	r3, [r7, #20]
   return(result);
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1e6      	bne.n	80096c8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	69db      	ldr	r3, [r3, #28]
 8009700:	f003 0310 	and.w	r3, r3, #16
 8009704:	2b10      	cmp	r3, #16
 8009706:	d103      	bne.n	8009710 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2210      	movs	r2, #16
 800970e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff fa3b 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800971e:	e00b      	b.n	8009738 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7f8 f98b 	bl	8001a3c <HAL_UART_RxCpltCallback>
}
 8009726:	e007      	b.n	8009738 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	699a      	ldr	r2, [r3, #24]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 0208 	orr.w	r2, r2, #8
 8009736:	619a      	str	r2, [r3, #24]
}
 8009738:	bf00      	nop
 800973a:	3770      	adds	r7, #112	@ 0x70
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b09c      	sub	sp, #112	@ 0x70
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800974e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009758:	2b22      	cmp	r3, #34	@ 0x22
 800975a:	f040 80b9 	bne.w	80098d0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009764:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800976c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800976e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009772:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009776:	4013      	ands	r3, r2
 8009778:	b29a      	uxth	r2, r3
 800977a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800977c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009782:	1c9a      	adds	r2, r3, #2
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800978e:	b29b      	uxth	r3, r3
 8009790:	3b01      	subs	r3, #1
 8009792:	b29a      	uxth	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f040 809c 	bne.w	80098e0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097b0:	e853 3f00 	ldrex	r3, [r3]
 80097b4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80097b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	461a      	mov	r2, r3
 80097c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80097c8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80097ce:	e841 2300 	strex	r3, r2, [r1]
 80097d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80097d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1e6      	bne.n	80097a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	3308      	adds	r3, #8
 80097e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e4:	e853 3f00 	ldrex	r3, [r3]
 80097e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ec:	f023 0301 	bic.w	r3, r3, #1
 80097f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3308      	adds	r3, #8
 80097f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80097fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80097fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009800:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009802:	e841 2300 	strex	r3, r2, [r1]
 8009806:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980a:	2b00      	cmp	r3, #0
 800980c:	d1e5      	bne.n	80097da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2220      	movs	r2, #32
 8009812:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d018      	beq.n	8009862 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	e853 3f00 	ldrex	r3, [r3]
 800983c:	61fb      	str	r3, [r7, #28]
   return(result);
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009844:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	461a      	mov	r2, r3
 800984c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800984e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009850:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009852:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009856:	e841 2300 	strex	r3, r2, [r1]
 800985a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800985c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1e6      	bne.n	8009830 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009866:	2b01      	cmp	r3, #1
 8009868:	d12e      	bne.n	80098c8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	e853 3f00 	ldrex	r3, [r3]
 800987c:	60bb      	str	r3, [r7, #8]
   return(result);
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	f023 0310 	bic.w	r3, r3, #16
 8009884:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800988e:	61bb      	str	r3, [r7, #24]
 8009890:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009892:	6979      	ldr	r1, [r7, #20]
 8009894:	69ba      	ldr	r2, [r7, #24]
 8009896:	e841 2300 	strex	r3, r2, [r1]
 800989a:	613b      	str	r3, [r7, #16]
   return(result);
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1e6      	bne.n	8009870 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	69db      	ldr	r3, [r3, #28]
 80098a8:	f003 0310 	and.w	r3, r3, #16
 80098ac:	2b10      	cmp	r3, #16
 80098ae:	d103      	bne.n	80098b8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2210      	movs	r2, #16
 80098b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff f967 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098c6:	e00b      	b.n	80098e0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7f8 f8b7 	bl	8001a3c <HAL_UART_RxCpltCallback>
}
 80098ce:	e007      	b.n	80098e0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699a      	ldr	r2, [r3, #24]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f042 0208 	orr.w	r2, r2, #8
 80098de:	619a      	str	r2, [r3, #24]
}
 80098e0:	bf00      	nop
 80098e2:	3770      	adds	r7, #112	@ 0x70
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009904:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8009908:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009910:	b29a      	uxth	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	b29b      	uxth	r3, r3
 8009916:	43db      	mvns	r3, r3
 8009918:	b29b      	uxth	r3, r3
 800991a:	4013      	ands	r3, r2
 800991c:	b29a      	uxth	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009932:	b480      	push	{r7}
 8009934:	b085      	sub	sp, #20
 8009936:	af00      	add	r7, sp, #0
 8009938:	60f8      	str	r0, [r7, #12]
 800993a:	1d3b      	adds	r3, r7, #4
 800993c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2201      	movs	r2, #1
 8009944:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b0c2      	sub	sp, #264	@ 0x108
 8009972:	af00      	add	r7, sp, #0
 8009974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009978:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800997c:	6018      	str	r0, [r3, #0]
 800997e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009986:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800998c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	785b      	ldrb	r3, [r3, #1]
 8009994:	2b01      	cmp	r3, #1
 8009996:	f040 86b7 	bne.w	800a708 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800999a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800999e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	699a      	ldr	r2, [r3, #24]
 80099a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d908      	bls.n	80099c8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80099b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80099c6:	e007      	b.n	80099d8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80099c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80099d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	7b1b      	ldrb	r3, [r3, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d13a      	bne.n	8009a5e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80099e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	6959      	ldr	r1, [r3, #20]
 80099f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	88da      	ldrh	r2, [r3, #6]
 8009a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009a0a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009a0e:	6800      	ldr	r0, [r0, #0]
 8009a10:	f001 fb83 	bl	800b11a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	613b      	str	r3, [r7, #16]
 8009a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	461a      	mov	r2, r3
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	4413      	add	r3, r2
 8009a36:	613b      	str	r3, [r7, #16]
 8009a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	00da      	lsls	r2, r3, #3
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	801a      	strh	r2, [r3, #0]
 8009a5a:	f000 be1f 	b.w	800a69c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	78db      	ldrb	r3, [r3, #3]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	f040 8462 	bne.w	800a334 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	6a1a      	ldr	r2, [r3, #32]
 8009a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	f240 83df 	bls.w	800a24c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ab4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009abc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	441a      	add	r2, r3
 8009ad2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009ad6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ada:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ade:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6a1a      	ldr	r2, [r3, #32]
 8009af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009afa:	1ad2      	subs	r2, r2, r3
 8009afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4413      	add	r3, r2
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 81c7 	beq.w	8009ebe <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	785b      	ldrb	r3, [r3, #1]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d177      	bne.n	8009c3c <USB_EPStartXfer+0x2ce>
 8009b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	461a      	mov	r2, r3
 8009b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6c:	4413      	add	r3, r2
 8009b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	00da      	lsls	r2, r3, #3
 8009b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b80:	4413      	add	r3, r2
 8009b82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b96:	801a      	strh	r2, [r3, #0]
 8009b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10a      	bne.n	8009bb6 <USB_EPStartXfer+0x248>
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba2:	881b      	ldrh	r3, [r3, #0]
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb2:	801a      	strh	r2, [r3, #0]
 8009bb4:	e067      	b.n	8009c86 <USB_EPStartXfer+0x318>
 8009bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bba:	2b3e      	cmp	r3, #62	@ 0x3e
 8009bbc:	d81c      	bhi.n	8009bf8 <USB_EPStartXfer+0x28a>
 8009bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc2:	085b      	lsrs	r3, r3, #1
 8009bc4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d004      	beq.n	8009bde <USB_EPStartXfer+0x270>
 8009bd4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009bd8:	3301      	adds	r3, #1
 8009bda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be0:	881b      	ldrh	r3, [r3, #0]
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	029b      	lsls	r3, r3, #10
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf4:	801a      	strh	r2, [r3, #0]
 8009bf6:	e046      	b.n	8009c86 <USB_EPStartXfer+0x318>
 8009bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bfc:	095b      	lsrs	r3, r3, #5
 8009bfe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c06:	f003 031f 	and.w	r3, r3, #31
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d104      	bne.n	8009c18 <USB_EPStartXfer+0x2aa>
 8009c0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009c12:	3b01      	subs	r3, #1
 8009c14:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	029b      	lsls	r3, r3, #10
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c38:	801a      	strh	r2, [r3, #0]
 8009c3a:	e024      	b.n	8009c86 <USB_EPStartXfer+0x318>
 8009c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	785b      	ldrb	r3, [r3, #1]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d11c      	bne.n	8009c86 <USB_EPStartXfer+0x318>
 8009c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c60:	4413      	add	r3, r2
 8009c62:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	00da      	lsls	r2, r3, #3
 8009c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c74:	4413      	add	r3, r2
 8009c76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	895b      	ldrh	r3, [r3, #10]
 8009c92:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6959      	ldr	r1, [r3, #20]
 8009ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009cac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009cb0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009cb4:	6800      	ldr	r0, [r0, #0]
 8009cb6:	f001 fa30 	bl	800b11a <USB_WritePMA>
            ep->xfer_buff += len;
 8009cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	695a      	ldr	r2, [r3, #20]
 8009cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cca:	441a      	add	r2, r3
 8009ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	6a1a      	ldr	r2, [r3, #32]
 8009ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d90f      	bls.n	8009d14 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6a1a      	ldr	r2, [r3, #32]
 8009d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d04:	1ad2      	subs	r2, r2, r3
 8009d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	621a      	str	r2, [r3, #32]
 8009d12:	e00e      	b.n	8009d32 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
 8009d20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	785b      	ldrb	r3, [r3, #1]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d177      	bne.n	8009e32 <USB_EPStartXfer+0x4c4>
 8009d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	61bb      	str	r3, [r7, #24]
 8009d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	461a      	mov	r2, r3
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	4413      	add	r3, r2
 8009d64:	61bb      	str	r3, [r7, #24]
 8009d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	00da      	lsls	r2, r3, #3
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	4413      	add	r3, r2
 8009d78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009d7c:	617b      	str	r3, [r7, #20]
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	881b      	ldrh	r3, [r3, #0]
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	801a      	strh	r2, [r3, #0]
 8009d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10a      	bne.n	8009dac <USB_EPStartXfer+0x43e>
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	881b      	ldrh	r3, [r3, #0]
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	801a      	strh	r2, [r3, #0]
 8009daa:	e06d      	b.n	8009e88 <USB_EPStartXfer+0x51a>
 8009dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db0:	2b3e      	cmp	r3, #62	@ 0x3e
 8009db2:	d81c      	bhi.n	8009dee <USB_EPStartXfer+0x480>
 8009db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db8:	085b      	lsrs	r3, r3, #1
 8009dba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d004      	beq.n	8009dd4 <USB_EPStartXfer+0x466>
 8009dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dce:	3301      	adds	r3, #1
 8009dd0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	881b      	ldrh	r3, [r3, #0]
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	029b      	lsls	r3, r3, #10
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	4313      	orrs	r3, r2
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	801a      	strh	r2, [r3, #0]
 8009dec:	e04c      	b.n	8009e88 <USB_EPStartXfer+0x51a>
 8009dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df2:	095b      	lsrs	r3, r3, #5
 8009df4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dfc:	f003 031f 	and.w	r3, r3, #31
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d104      	bne.n	8009e0e <USB_EPStartXfer+0x4a0>
 8009e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	029b      	lsls	r3, r3, #10
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	801a      	strh	r2, [r3, #0]
 8009e30:	e02a      	b.n	8009e88 <USB_EPStartXfer+0x51a>
 8009e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	785b      	ldrb	r3, [r3, #1]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d122      	bne.n	8009e88 <USB_EPStartXfer+0x51a>
 8009e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	623b      	str	r3, [r7, #32]
 8009e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	461a      	mov	r2, r3
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	4413      	add	r3, r2
 8009e64:	623b      	str	r3, [r7, #32]
 8009e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	00da      	lsls	r2, r3, #3
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	4413      	add	r3, r2
 8009e78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e7c:	61fb      	str	r3, [r7, #28]
 8009e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	891b      	ldrh	r3, [r3, #8]
 8009e94:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	6959      	ldr	r1, [r3, #20]
 8009ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009eae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009eb2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009eb6:	6800      	ldr	r0, [r0, #0]
 8009eb8:	f001 f92f 	bl	800b11a <USB_WritePMA>
 8009ebc:	e3ee      	b.n	800a69c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	785b      	ldrb	r3, [r3, #1]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d177      	bne.n	8009fbe <USB_EPStartXfer+0x650>
 8009ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	461a      	mov	r2, r3
 8009eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009eee:	4413      	add	r3, r2
 8009ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	00da      	lsls	r2, r3, #3
 8009f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f02:	4413      	add	r3, r2
 8009f04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f0c:	881b      	ldrh	r3, [r3, #0]
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f18:	801a      	strh	r2, [r3, #0]
 8009f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10a      	bne.n	8009f38 <USB_EPStartXfer+0x5ca>
 8009f22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f24:	881b      	ldrh	r3, [r3, #0]
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f34:	801a      	strh	r2, [r3, #0]
 8009f36:	e06d      	b.n	800a014 <USB_EPStartXfer+0x6a6>
 8009f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f3e:	d81c      	bhi.n	8009f7a <USB_EPStartXfer+0x60c>
 8009f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f44:	085b      	lsrs	r3, r3, #1
 8009f46:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f4e:	f003 0301 	and.w	r3, r3, #1
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d004      	beq.n	8009f60 <USB_EPStartXfer+0x5f2>
 8009f56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	029b      	lsls	r3, r3, #10
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	4313      	orrs	r3, r2
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f76:	801a      	strh	r2, [r3, #0]
 8009f78:	e04c      	b.n	800a014 <USB_EPStartXfer+0x6a6>
 8009f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f7e:	095b      	lsrs	r3, r3, #5
 8009f80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f88:	f003 031f 	and.w	r3, r3, #31
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d104      	bne.n	8009f9a <USB_EPStartXfer+0x62c>
 8009f90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009f94:	3b01      	subs	r3, #1
 8009f96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	029b      	lsls	r3, r3, #10
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	4313      	orrs	r3, r2
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fba:	801a      	strh	r2, [r3, #0]
 8009fbc:	e02a      	b.n	800a014 <USB_EPStartXfer+0x6a6>
 8009fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	785b      	ldrb	r3, [r3, #1]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d122      	bne.n	800a014 <USB_EPStartXfer+0x6a6>
 8009fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fee:	4413      	add	r3, r2
 8009ff0:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	00da      	lsls	r2, r3, #3
 800a000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a002:	4413      	add	r3, r2
 800a004:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a008:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a00e:	b29a      	uxth	r2, r3
 800a010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a012:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	891b      	ldrh	r3, [r3, #8]
 800a020:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6959      	ldr	r1, [r3, #20]
 800a030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a034:	b29b      	uxth	r3, r3
 800a036:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a03a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a03e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a042:	6800      	ldr	r0, [r0, #0]
 800a044:	f001 f869 	bl	800b11a <USB_WritePMA>
            ep->xfer_buff += len;
 800a048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a04c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	695a      	ldr	r2, [r3, #20]
 800a054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a058:	441a      	add	r2, r3
 800a05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a05e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a06a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6a1a      	ldr	r2, [r3, #32]
 800a072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d90f      	bls.n	800a0a2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	6a1a      	ldr	r2, [r3, #32]
 800a08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a092:	1ad2      	subs	r2, r2, r3
 800a094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	621a      	str	r2, [r3, #32]
 800a0a0:	e00e      	b.n	800a0c0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a0a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a0b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	785b      	ldrb	r3, [r3, #1]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d177      	bne.n	800a1cc <USB_EPStartXfer+0x85e>
 800a0dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fc:	4413      	add	r3, r2
 800a0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	00da      	lsls	r2, r3, #3
 800a10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a110:	4413      	add	r3, r2
 800a112:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a116:	637b      	str	r3, [r7, #52]	@ 0x34
 800a118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a11a:	881b      	ldrh	r3, [r3, #0]
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a122:	b29a      	uxth	r2, r3
 800a124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a126:	801a      	strh	r2, [r3, #0]
 800a128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <USB_EPStartXfer+0x7d8>
 800a130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	b29b      	uxth	r3, r3
 800a136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a13a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a13e:	b29a      	uxth	r2, r3
 800a140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a142:	801a      	strh	r2, [r3, #0]
 800a144:	e067      	b.n	800a216 <USB_EPStartXfer+0x8a8>
 800a146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a14a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a14c:	d81c      	bhi.n	800a188 <USB_EPStartXfer+0x81a>
 800a14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a152:	085b      	lsrs	r3, r3, #1
 800a154:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a15c:	f003 0301 	and.w	r3, r3, #1
 800a160:	2b00      	cmp	r3, #0
 800a162:	d004      	beq.n	800a16e <USB_EPStartXfer+0x800>
 800a164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a168:	3301      	adds	r3, #1
 800a16a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a16e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	b29a      	uxth	r2, r3
 800a174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a178:	b29b      	uxth	r3, r3
 800a17a:	029b      	lsls	r3, r3, #10
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	4313      	orrs	r3, r2
 800a180:	b29a      	uxth	r2, r3
 800a182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a184:	801a      	strh	r2, [r3, #0]
 800a186:	e046      	b.n	800a216 <USB_EPStartXfer+0x8a8>
 800a188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a18c:	095b      	lsrs	r3, r3, #5
 800a18e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a196:	f003 031f 	and.w	r3, r3, #31
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d104      	bne.n	800a1a8 <USB_EPStartXfer+0x83a>
 800a19e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1aa:	881b      	ldrh	r3, [r3, #0]
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	029b      	lsls	r3, r3, #10
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1c8:	801a      	strh	r2, [r3, #0]
 800a1ca:	e024      	b.n	800a216 <USB_EPStartXfer+0x8a8>
 800a1cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	785b      	ldrb	r3, [r3, #1]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d11c      	bne.n	800a216 <USB_EPStartXfer+0x8a8>
 800a1dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1f0:	4413      	add	r3, r2
 800a1f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	00da      	lsls	r2, r3, #3
 800a202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a204:	4413      	add	r3, r2
 800a206:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a210:	b29a      	uxth	r2, r3
 800a212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a214:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a21a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	895b      	ldrh	r3, [r3, #10]
 800a222:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a22a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6959      	ldr	r1, [r3, #20]
 800a232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a236:	b29b      	uxth	r3, r3
 800a238:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a23c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a240:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a244:	6800      	ldr	r0, [r0, #0]
 800a246:	f000 ff68 	bl	800b11a <USB_WritePMA>
 800a24a:	e227      	b.n	800a69c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a24c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6a1b      	ldr	r3, [r3, #32]
 800a258:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a25c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a26a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	4413      	add	r3, r2
 800a276:	881b      	ldrh	r3, [r3, #0]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a27e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a282:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a28a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	441a      	add	r2, r3
 800a2a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a2a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a2b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2d8:	4413      	add	r3, r2
 800a2da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	00da      	lsls	r2, r3, #3
 800a2ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a2f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a2fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a2fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	891b      	ldrh	r3, [r3, #8]
 800a30a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a30e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6959      	ldr	r1, [r3, #20]
 800a31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a31e:	b29b      	uxth	r3, r3
 800a320:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a324:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a328:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a32c:	6800      	ldr	r0, [r0, #0]
 800a32e:	f000 fef4 	bl	800b11a <USB_WritePMA>
 800a332:	e1b3      	b.n	800a69c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	6a1a      	ldr	r2, [r3, #32]
 800a340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a344:	1ad2      	subs	r2, r2, r3
 800a346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a34a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a356:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4413      	add	r3, r2
 800a36c:	881b      	ldrh	r3, [r3, #0]
 800a36e:	b29b      	uxth	r3, r3
 800a370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a374:	2b00      	cmp	r3, #0
 800a376:	f000 80c6 	beq.w	800a506 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a37e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	673b      	str	r3, [r7, #112]	@ 0x70
 800a386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a38a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	785b      	ldrb	r3, [r3, #1]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d177      	bne.n	800a486 <USB_EPStartXfer+0xb18>
 800a396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a39a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3b6:	4413      	add	r3, r2
 800a3b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	00da      	lsls	r2, r3, #3
 800a3c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a3d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3d4:	881b      	ldrh	r3, [r3, #0]
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3e0:	801a      	strh	r2, [r3, #0]
 800a3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d10a      	bne.n	800a400 <USB_EPStartXfer+0xa92>
 800a3ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3ec:	881b      	ldrh	r3, [r3, #0]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3fc:	801a      	strh	r2, [r3, #0]
 800a3fe:	e067      	b.n	800a4d0 <USB_EPStartXfer+0xb62>
 800a400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a404:	2b3e      	cmp	r3, #62	@ 0x3e
 800a406:	d81c      	bhi.n	800a442 <USB_EPStartXfer+0xad4>
 800a408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a40c:	085b      	lsrs	r3, r3, #1
 800a40e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d004      	beq.n	800a428 <USB_EPStartXfer+0xaba>
 800a41e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a422:	3301      	adds	r3, #1
 800a424:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a42a:	881b      	ldrh	r3, [r3, #0]
 800a42c:	b29a      	uxth	r2, r3
 800a42e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a432:	b29b      	uxth	r3, r3
 800a434:	029b      	lsls	r3, r3, #10
 800a436:	b29b      	uxth	r3, r3
 800a438:	4313      	orrs	r3, r2
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a43e:	801a      	strh	r2, [r3, #0]
 800a440:	e046      	b.n	800a4d0 <USB_EPStartXfer+0xb62>
 800a442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a446:	095b      	lsrs	r3, r3, #5
 800a448:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a450:	f003 031f 	and.w	r3, r3, #31
 800a454:	2b00      	cmp	r3, #0
 800a456:	d104      	bne.n	800a462 <USB_EPStartXfer+0xaf4>
 800a458:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a45c:	3b01      	subs	r3, #1
 800a45e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a462:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	b29a      	uxth	r2, r3
 800a468:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	029b      	lsls	r3, r3, #10
 800a470:	b29b      	uxth	r3, r3
 800a472:	4313      	orrs	r3, r2
 800a474:	b29b      	uxth	r3, r3
 800a476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a47a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a47e:	b29a      	uxth	r2, r3
 800a480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a482:	801a      	strh	r2, [r3, #0]
 800a484:	e024      	b.n	800a4d0 <USB_EPStartXfer+0xb62>
 800a486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a48a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	785b      	ldrb	r3, [r3, #1]
 800a492:	2b01      	cmp	r3, #1
 800a494:	d11c      	bne.n	800a4d0 <USB_EPStartXfer+0xb62>
 800a496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4aa:	4413      	add	r3, r2
 800a4ac:	673b      	str	r3, [r7, #112]	@ 0x70
 800a4ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	00da      	lsls	r2, r3, #3
 800a4bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4be:	4413      	add	r3, r2
 800a4c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a4c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a4c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a4d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	895b      	ldrh	r3, [r3, #10]
 800a4dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6959      	ldr	r1, [r3, #20]
 800a4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a4f6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a4fa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a4fe:	6800      	ldr	r0, [r0, #0]
 800a500:	f000 fe0b 	bl	800b11a <USB_WritePMA>
 800a504:	e0ca      	b.n	800a69c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a50a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	785b      	ldrb	r3, [r3, #1]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d177      	bne.n	800a606 <USB_EPStartXfer+0xc98>
 800a516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a51a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a526:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a530:	b29b      	uxth	r3, r3
 800a532:	461a      	mov	r2, r3
 800a534:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a536:	4413      	add	r3, r2
 800a538:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a53a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a53e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	00da      	lsls	r2, r3, #3
 800a548:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a54a:	4413      	add	r3, r2
 800a54c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a550:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a552:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a554:	881b      	ldrh	r3, [r3, #0]
 800a556:	b29b      	uxth	r3, r3
 800a558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a560:	801a      	strh	r2, [r3, #0]
 800a562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10a      	bne.n	800a580 <USB_EPStartXfer+0xc12>
 800a56a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a56c:	881b      	ldrh	r3, [r3, #0]
 800a56e:	b29b      	uxth	r3, r3
 800a570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a578:	b29a      	uxth	r2, r3
 800a57a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a57c:	801a      	strh	r2, [r3, #0]
 800a57e:	e073      	b.n	800a668 <USB_EPStartXfer+0xcfa>
 800a580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a584:	2b3e      	cmp	r3, #62	@ 0x3e
 800a586:	d81c      	bhi.n	800a5c2 <USB_EPStartXfer+0xc54>
 800a588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a58c:	085b      	lsrs	r3, r3, #1
 800a58e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d004      	beq.n	800a5a8 <USB_EPStartXfer+0xc3a>
 800a59e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a5a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5aa:	881b      	ldrh	r3, [r3, #0]
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	029b      	lsls	r3, r3, #10
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5be:	801a      	strh	r2, [r3, #0]
 800a5c0:	e052      	b.n	800a668 <USB_EPStartXfer+0xcfa>
 800a5c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5c6:	095b      	lsrs	r3, r3, #5
 800a5c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5d0:	f003 031f 	and.w	r3, r3, #31
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d104      	bne.n	800a5e2 <USB_EPStartXfer+0xc74>
 800a5d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a5e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5e4:	881b      	ldrh	r3, [r3, #0]
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	029b      	lsls	r3, r3, #10
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a602:	801a      	strh	r2, [r3, #0]
 800a604:	e030      	b.n	800a668 <USB_EPStartXfer+0xcfa>
 800a606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a60a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	785b      	ldrb	r3, [r3, #1]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d128      	bne.n	800a668 <USB_EPStartXfer+0xcfa>
 800a616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a61a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a628:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a632:	b29b      	uxth	r3, r3
 800a634:	461a      	mov	r2, r3
 800a636:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a63a:	4413      	add	r3, r2
 800a63c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	00da      	lsls	r2, r3, #3
 800a64e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a652:	4413      	add	r3, r2
 800a654:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a658:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a660:	b29a      	uxth	r2, r3
 800a662:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a666:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a66c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	891b      	ldrh	r3, [r3, #8]
 800a674:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a67c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	6959      	ldr	r1, [r3, #20]
 800a684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a688:	b29b      	uxth	r3, r3
 800a68a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a68e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a692:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a696:	6800      	ldr	r0, [r0, #0]
 800a698:	f000 fd3f 	bl	800b11a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a69c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	4413      	add	r3, r2
 800a6b6:	881b      	ldrh	r3, [r3, #0]
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6c2:	817b      	strh	r3, [r7, #10]
 800a6c4:	897b      	ldrh	r3, [r7, #10]
 800a6c6:	f083 0310 	eor.w	r3, r3, #16
 800a6ca:	817b      	strh	r3, [r7, #10]
 800a6cc:	897b      	ldrh	r3, [r7, #10]
 800a6ce:	f083 0320 	eor.w	r3, r3, #32
 800a6d2:	817b      	strh	r3, [r7, #10]
 800a6d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	441a      	add	r2, r3
 800a6ee:	897b      	ldrh	r3, [r7, #10]
 800a6f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a700:	b29b      	uxth	r3, r3
 800a702:	8013      	strh	r3, [r2, #0]
 800a704:	f000 bcdf 	b.w	800b0c6 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a70c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	7b1b      	ldrb	r3, [r3, #12]
 800a714:	2b00      	cmp	r3, #0
 800a716:	f040 80bc 	bne.w	800a892 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a71a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a71e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	699a      	ldr	r2, [r3, #24]
 800a726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a72a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	429a      	cmp	r2, r3
 800a734:	d917      	bls.n	800a766 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a73a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a74a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	699a      	ldr	r2, [r3, #24]
 800a752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a756:	1ad2      	subs	r2, r2, r3
 800a758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a75c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	619a      	str	r2, [r3, #24]
 800a764:	e00e      	b.n	800a784 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a76a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	699b      	ldr	r3, [r3, #24]
 800a772:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a77a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2200      	movs	r2, #0
 800a782:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a788:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a796:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a7ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	00da      	lsls	r2, r3, #3
 800a7bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a7c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a7ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7dc:	801a      	strh	r2, [r3, #0]
 800a7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10d      	bne.n	800a802 <USB_EPStartXfer+0xe94>
 800a7e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7ea:	881b      	ldrh	r3, [r3, #0]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7fc:	801a      	strh	r2, [r3, #0]
 800a7fe:	f000 bc28 	b.w	800b052 <USB_EPStartXfer+0x16e4>
 800a802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a806:	2b3e      	cmp	r3, #62	@ 0x3e
 800a808:	d81f      	bhi.n	800a84a <USB_EPStartXfer+0xedc>
 800a80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a80e:	085b      	lsrs	r3, r3, #1
 800a810:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d004      	beq.n	800a82a <USB_EPStartXfer+0xebc>
 800a820:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a824:	3301      	adds	r3, #1
 800a826:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a82a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a82e:	881b      	ldrh	r3, [r3, #0]
 800a830:	b29a      	uxth	r2, r3
 800a832:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a836:	b29b      	uxth	r3, r3
 800a838:	029b      	lsls	r3, r3, #10
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	4313      	orrs	r3, r2
 800a83e:	b29a      	uxth	r2, r3
 800a840:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a844:	801a      	strh	r2, [r3, #0]
 800a846:	f000 bc04 	b.w	800b052 <USB_EPStartXfer+0x16e4>
 800a84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a84e:	095b      	lsrs	r3, r3, #5
 800a850:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a858:	f003 031f 	and.w	r3, r3, #31
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d104      	bne.n	800a86a <USB_EPStartXfer+0xefc>
 800a860:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a864:	3b01      	subs	r3, #1
 800a866:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a86a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a86e:	881b      	ldrh	r3, [r3, #0]
 800a870:	b29a      	uxth	r2, r3
 800a872:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a876:	b29b      	uxth	r3, r3
 800a878:	029b      	lsls	r3, r3, #10
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	4313      	orrs	r3, r2
 800a87e:	b29b      	uxth	r3, r3
 800a880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a888:	b29a      	uxth	r2, r3
 800a88a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a88e:	801a      	strh	r2, [r3, #0]
 800a890:	e3df      	b.n	800b052 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	78db      	ldrb	r3, [r3, #3]
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	f040 8218 	bne.w	800acd4 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a8a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	785b      	ldrb	r3, [r3, #1]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f040 809d 	bne.w	800a9f0 <USB_EPStartXfer+0x1082>
 800a8b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a8c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8da:	4413      	add	r3, r2
 800a8dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a8e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	00da      	lsls	r2, r3, #3
 800a8ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a8f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a8fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a900:	881b      	ldrh	r3, [r3, #0]
 800a902:	b29b      	uxth	r3, r3
 800a904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a908:	b29a      	uxth	r2, r3
 800a90a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a90e:	801a      	strh	r2, [r3, #0]
 800a910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10c      	bne.n	800a93a <USB_EPStartXfer+0xfcc>
 800a920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a924:	881b      	ldrh	r3, [r3, #0]
 800a926:	b29b      	uxth	r3, r3
 800a928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a92c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a930:	b29a      	uxth	r2, r3
 800a932:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a936:	801a      	strh	r2, [r3, #0]
 800a938:	e08f      	b.n	800aa5a <USB_EPStartXfer+0x10ec>
 800a93a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a93e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	2b3e      	cmp	r3, #62	@ 0x3e
 800a948:	d826      	bhi.n	800a998 <USB_EPStartXfer+0x102a>
 800a94a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a94e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	085b      	lsrs	r3, r3, #1
 800a958:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a95c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	f003 0301 	and.w	r3, r3, #1
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d004      	beq.n	800a97a <USB_EPStartXfer+0x100c>
 800a970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a974:	3301      	adds	r3, #1
 800a976:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a97a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a97e:	881b      	ldrh	r3, [r3, #0]
 800a980:	b29a      	uxth	r2, r3
 800a982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a986:	b29b      	uxth	r3, r3
 800a988:	029b      	lsls	r3, r3, #10
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	4313      	orrs	r3, r2
 800a98e:	b29a      	uxth	r2, r3
 800a990:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a994:	801a      	strh	r2, [r3, #0]
 800a996:	e060      	b.n	800aa5a <USB_EPStartXfer+0x10ec>
 800a998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a99c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	095b      	lsrs	r3, r3, #5
 800a9a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a9aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	f003 031f 	and.w	r3, r3, #31
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d104      	bne.n	800a9c8 <USB_EPStartXfer+0x105a>
 800a9be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a9c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a9cc:	881b      	ldrh	r3, [r3, #0]
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	029b      	lsls	r3, r3, #10
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a9ec:	801a      	strh	r2, [r3, #0]
 800a9ee:	e034      	b.n	800aa5a <USB_EPStartXfer+0x10ec>
 800a9f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	785b      	ldrb	r3, [r3, #1]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d12c      	bne.n	800aa5a <USB_EPStartXfer+0x10ec>
 800aa00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa24:	4413      	add	r3, r2
 800aa26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	00da      	lsls	r2, r3, #3
 800aa38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa3c:	4413      	add	r3, r2
 800aa3e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aa58:	801a      	strh	r2, [r3, #0]
 800aa5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800aa68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	785b      	ldrb	r3, [r3, #1]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f040 809d 	bne.w	800abb4 <USB_EPStartXfer+0x1246>
 800aa7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aa88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	461a      	mov	r2, r3
 800aa9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aaa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	00da      	lsls	r2, r3, #3
 800aab2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aab6:	4413      	add	r3, r2
 800aab8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aabc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aac4:	881b      	ldrh	r3, [r3, #0]
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aacc:	b29a      	uxth	r2, r3
 800aace:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aad2:	801a      	strh	r2, [r3, #0]
 800aad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	691b      	ldr	r3, [r3, #16]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10c      	bne.n	800aafe <USB_EPStartXfer+0x1190>
 800aae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aafa:	801a      	strh	r2, [r3, #0]
 800aafc:	e088      	b.n	800ac10 <USB_EPStartXfer+0x12a2>
 800aafe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab0c:	d826      	bhi.n	800ab5c <USB_EPStartXfer+0x11ee>
 800ab0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	085b      	lsrs	r3, r3, #1
 800ab1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ab20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	f003 0301 	and.w	r3, r3, #1
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d004      	beq.n	800ab3e <USB_EPStartXfer+0x11d0>
 800ab34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab38:	3301      	adds	r3, #1
 800ab3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ab3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab42:	881b      	ldrh	r3, [r3, #0]
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	029b      	lsls	r3, r3, #10
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	4313      	orrs	r3, r2
 800ab52:	b29a      	uxth	r2, r3
 800ab54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab58:	801a      	strh	r2, [r3, #0]
 800ab5a:	e059      	b.n	800ac10 <USB_EPStartXfer+0x12a2>
 800ab5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	095b      	lsrs	r3, r3, #5
 800ab6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ab6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	f003 031f 	and.w	r3, r3, #31
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d104      	bne.n	800ab8c <USB_EPStartXfer+0x121e>
 800ab82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab86:	3b01      	subs	r3, #1
 800ab88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ab8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab90:	881b      	ldrh	r3, [r3, #0]
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	029b      	lsls	r3, r3, #10
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abaa:	b29a      	uxth	r2, r3
 800abac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800abb0:	801a      	strh	r2, [r3, #0]
 800abb2:	e02d      	b.n	800ac10 <USB_EPStartXfer+0x12a2>
 800abb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	785b      	ldrb	r3, [r3, #1]
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d125      	bne.n	800ac10 <USB_EPStartXfer+0x12a2>
 800abc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	461a      	mov	r2, r3
 800abd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800abda:	4413      	add	r3, r2
 800abdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800abe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	00da      	lsls	r2, r3, #3
 800abee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800abf2:	4413      	add	r3, r2
 800abf4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800abf8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800abfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac0e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ac10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	69db      	ldr	r3, [r3, #28]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 8218 	beq.w	800b052 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ac22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4413      	add	r3, r2
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac42:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ac46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d005      	beq.n	800ac5a <USB_EPStartXfer+0x12ec>
 800ac4e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ac52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10d      	bne.n	800ac76 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ac5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f040 81f5 	bne.w	800b052 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ac6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f040 81ee 	bne.w	800b052 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ac76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac9c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800aca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	441a      	add	r2, r3
 800acba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800acbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800acce:	b29b      	uxth	r3, r3
 800acd0:	8013      	strh	r3, [r2, #0]
 800acd2:	e1be      	b.n	800b052 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800acd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	78db      	ldrb	r3, [r3, #3]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	f040 81b4 	bne.w	800b04e <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ace6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	699a      	ldr	r2, [r3, #24]
 800acf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d917      	bls.n	800ad32 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800ad02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	691b      	ldr	r3, [r3, #16]
 800ad0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800ad12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	699a      	ldr	r2, [r3, #24]
 800ad1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad22:	1ad2      	subs	r2, r2, r3
 800ad24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	619a      	str	r2, [r3, #24]
 800ad30:	e00e      	b.n	800ad50 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800ad32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	699b      	ldr	r3, [r3, #24]
 800ad3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800ad42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ad50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	785b      	ldrb	r3, [r3, #1]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f040 8085 	bne.w	800ae6c <USB_EPStartXfer+0x14fe>
 800ad62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ad70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	461a      	mov	r2, r3
 800ad82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ad86:	4413      	add	r3, r2
 800ad88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ad8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	00da      	lsls	r2, r3, #3
 800ad9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ad9e:	4413      	add	r3, r2
 800ada0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ada4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ada8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	b29b      	uxth	r3, r3
 800adb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adb4:	b29a      	uxth	r2, r3
 800adb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800adba:	801a      	strh	r2, [r3, #0]
 800adbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10c      	bne.n	800adde <USB_EPStartXfer+0x1470>
 800adc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800adc8:	881b      	ldrh	r3, [r3, #0]
 800adca:	b29b      	uxth	r3, r3
 800adcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800add0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800add4:	b29a      	uxth	r2, r3
 800add6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800adda:	801a      	strh	r2, [r3, #0]
 800addc:	e077      	b.n	800aece <USB_EPStartXfer+0x1560>
 800adde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ade2:	2b3e      	cmp	r3, #62	@ 0x3e
 800ade4:	d81e      	bhi.n	800ae24 <USB_EPStartXfer+0x14b6>
 800ade6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adea:	085b      	lsrs	r3, r3, #1
 800adec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800adf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf4:	f003 0301 	and.w	r3, r3, #1
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d004      	beq.n	800ae06 <USB_EPStartXfer+0x1498>
 800adfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae00:	3301      	adds	r3, #1
 800ae02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae0a:	881b      	ldrh	r3, [r3, #0]
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	029b      	lsls	r3, r3, #10
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae20:	801a      	strh	r2, [r3, #0]
 800ae22:	e054      	b.n	800aece <USB_EPStartXfer+0x1560>
 800ae24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae28:	095b      	lsrs	r3, r3, #5
 800ae2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae32:	f003 031f 	and.w	r3, r3, #31
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d104      	bne.n	800ae44 <USB_EPStartXfer+0x14d6>
 800ae3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	b29a      	uxth	r2, r3
 800ae4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	029b      	lsls	r3, r3, #10
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	4313      	orrs	r3, r2
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae68:	801a      	strh	r2, [r3, #0]
 800ae6a:	e030      	b.n	800aece <USB_EPStartXfer+0x1560>
 800ae6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	785b      	ldrb	r3, [r3, #1]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d128      	bne.n	800aece <USB_EPStartXfer+0x1560>
 800ae7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ae8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aea0:	4413      	add	r3, r2
 800aea2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	00da      	lsls	r2, r3, #3
 800aeb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aeb8:	4413      	add	r3, r2
 800aeba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aebe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aec6:	b29a      	uxth	r2, r3
 800aec8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800aecc:	801a      	strh	r2, [r3, #0]
 800aece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aedc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	785b      	ldrb	r3, [r3, #1]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f040 8085 	bne.w	800aff8 <USB_EPStartXfer+0x168a>
 800aeee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aefc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	461a      	mov	r2, r3
 800af0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800af12:	4413      	add	r3, r2
 800af14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800af18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	00da      	lsls	r2, r3, #3
 800af26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800af2a:	4413      	add	r3, r2
 800af2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800af30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800af34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af40:	b29a      	uxth	r2, r3
 800af42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800af46:	801a      	strh	r2, [r3, #0]
 800af48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10c      	bne.n	800af6a <USB_EPStartXfer+0x15fc>
 800af50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800af54:	881b      	ldrh	r3, [r3, #0]
 800af56:	b29b      	uxth	r3, r3
 800af58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af60:	b29a      	uxth	r2, r3
 800af62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800af66:	801a      	strh	r2, [r3, #0]
 800af68:	e073      	b.n	800b052 <USB_EPStartXfer+0x16e4>
 800af6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af6e:	2b3e      	cmp	r3, #62	@ 0x3e
 800af70:	d81e      	bhi.n	800afb0 <USB_EPStartXfer+0x1642>
 800af72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af76:	085b      	lsrs	r3, r3, #1
 800af78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800af7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	2b00      	cmp	r3, #0
 800af86:	d004      	beq.n	800af92 <USB_EPStartXfer+0x1624>
 800af88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af8c:	3301      	adds	r3, #1
 800af8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800af92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	b29a      	uxth	r2, r3
 800af9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	029b      	lsls	r3, r3, #10
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	4313      	orrs	r3, r2
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800afac:	801a      	strh	r2, [r3, #0]
 800afae:	e050      	b.n	800b052 <USB_EPStartXfer+0x16e4>
 800afb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afb4:	095b      	lsrs	r3, r3, #5
 800afb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800afba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afbe:	f003 031f 	and.w	r3, r3, #31
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d104      	bne.n	800afd0 <USB_EPStartXfer+0x1662>
 800afc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800afca:	3b01      	subs	r3, #1
 800afcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800afd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800afd4:	881b      	ldrh	r3, [r3, #0]
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800afdc:	b29b      	uxth	r3, r3
 800afde:	029b      	lsls	r3, r3, #10
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	4313      	orrs	r3, r2
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afee:	b29a      	uxth	r2, r3
 800aff0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aff4:	801a      	strh	r2, [r3, #0]
 800aff6:	e02c      	b.n	800b052 <USB_EPStartXfer+0x16e4>
 800aff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800affc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	785b      	ldrb	r3, [r3, #1]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d124      	bne.n	800b052 <USB_EPStartXfer+0x16e4>
 800b008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b00c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b016:	b29b      	uxth	r3, r3
 800b018:	461a      	mov	r2, r3
 800b01a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b01e:	4413      	add	r3, r2
 800b020:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	00da      	lsls	r2, r3, #3
 800b032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b036:	4413      	add	r3, r2
 800b038:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b03c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b044:	b29a      	uxth	r2, r3
 800b046:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b04a:	801a      	strh	r2, [r3, #0]
 800b04c:	e001      	b.n	800b052 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	e03a      	b.n	800b0c8 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	b29b      	uxth	r3, r3
 800b070:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b078:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b07c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b080:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b084:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b088:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b08c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b090:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b098:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	441a      	add	r2, r3
 800b0ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b0b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b0d2:	b480      	push	{r7}
 800b0d4:	b083      	sub	sp, #12
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	460b      	mov	r3, r1
 800b0dc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b0de:	78fb      	ldrb	r3, [r7, #3]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d103      	bne.n	800b0ec <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2280      	movs	r2, #128	@ 0x80
 800b0e8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b085      	sub	sp, #20
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b108:	b29b      	uxth	r3, r3
 800b10a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b10c:	68fb      	ldr	r3, [r7, #12]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3714      	adds	r7, #20
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b08b      	sub	sp, #44	@ 0x2c
 800b11e:	af00      	add	r7, sp, #0
 800b120:	60f8      	str	r0, [r7, #12]
 800b122:	60b9      	str	r1, [r7, #8]
 800b124:	4611      	mov	r1, r2
 800b126:	461a      	mov	r2, r3
 800b128:	460b      	mov	r3, r1
 800b12a:	80fb      	strh	r3, [r7, #6]
 800b12c:	4613      	mov	r3, r2
 800b12e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b130:	88bb      	ldrh	r3, [r7, #4]
 800b132:	3301      	adds	r3, #1
 800b134:	085b      	lsrs	r3, r3, #1
 800b136:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b140:	88fa      	ldrh	r2, [r7, #6]
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	4413      	add	r3, r2
 800b146:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b14a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b150:	e01b      	b.n	800b18a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	3301      	adds	r3, #1
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	021b      	lsls	r3, r3, #8
 800b160:	b21a      	sxth	r2, r3
 800b162:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b166:	4313      	orrs	r3, r2
 800b168:	b21b      	sxth	r3, r3
 800b16a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b16c:	6a3b      	ldr	r3, [r7, #32]
 800b16e:	8a7a      	ldrh	r2, [r7, #18]
 800b170:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	3302      	adds	r3, #2
 800b176:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	3301      	adds	r3, #1
 800b17c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	3301      	adds	r3, #1
 800b182:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b186:	3b01      	subs	r3, #1
 800b188:	627b      	str	r3, [r7, #36]	@ 0x24
 800b18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1e0      	bne.n	800b152 <USB_WritePMA+0x38>
  }
}
 800b190:	bf00      	nop
 800b192:	bf00      	nop
 800b194:	372c      	adds	r7, #44	@ 0x2c
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b08b      	sub	sp, #44	@ 0x2c
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	60f8      	str	r0, [r7, #12]
 800b1a6:	60b9      	str	r1, [r7, #8]
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	80fb      	strh	r3, [r7, #6]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b1b4:	88bb      	ldrh	r3, [r7, #4]
 800b1b6:	085b      	lsrs	r3, r3, #1
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b1c4:	88fa      	ldrh	r2, [r7, #6]
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1ce:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1d4:	e018      	b.n	800b208 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b1d6:	6a3b      	ldr	r3, [r7, #32]
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	3302      	adds	r3, #2
 800b1e2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	0a1b      	lsrs	r3, r3, #8
 800b1f6:	b2da      	uxtb	r2, r3
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	3301      	adds	r3, #1
 800b200:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b204:	3b01      	subs	r3, #1
 800b206:	627b      	str	r3, [r7, #36]	@ 0x24
 800b208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1e3      	bne.n	800b1d6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b20e:	88bb      	ldrh	r3, [r7, #4]
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	b29b      	uxth	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d007      	beq.n	800b22a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b21a:	6a3b      	ldr	r3, [r7, #32]
 800b21c:	881b      	ldrh	r3, [r3, #0]
 800b21e:	b29b      	uxth	r3, r3
 800b220:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	b2da      	uxtb	r2, r3
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	701a      	strb	r2, [r3, #0]
  }
}
 800b22a:	bf00      	nop
 800b22c:	372c      	adds	r7, #44	@ 0x2c
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <__cvt>:
 800b236:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b23a:	ec57 6b10 	vmov	r6, r7, d0
 800b23e:	2f00      	cmp	r7, #0
 800b240:	460c      	mov	r4, r1
 800b242:	4619      	mov	r1, r3
 800b244:	463b      	mov	r3, r7
 800b246:	bfbb      	ittet	lt
 800b248:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b24c:	461f      	movlt	r7, r3
 800b24e:	2300      	movge	r3, #0
 800b250:	232d      	movlt	r3, #45	@ 0x2d
 800b252:	700b      	strb	r3, [r1, #0]
 800b254:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b256:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b25a:	4691      	mov	r9, r2
 800b25c:	f023 0820 	bic.w	r8, r3, #32
 800b260:	bfbc      	itt	lt
 800b262:	4632      	movlt	r2, r6
 800b264:	4616      	movlt	r6, r2
 800b266:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b26a:	d005      	beq.n	800b278 <__cvt+0x42>
 800b26c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b270:	d100      	bne.n	800b274 <__cvt+0x3e>
 800b272:	3401      	adds	r4, #1
 800b274:	2102      	movs	r1, #2
 800b276:	e000      	b.n	800b27a <__cvt+0x44>
 800b278:	2103      	movs	r1, #3
 800b27a:	ab03      	add	r3, sp, #12
 800b27c:	9301      	str	r3, [sp, #4]
 800b27e:	ab02      	add	r3, sp, #8
 800b280:	9300      	str	r3, [sp, #0]
 800b282:	ec47 6b10 	vmov	d0, r6, r7
 800b286:	4653      	mov	r3, sl
 800b288:	4622      	mov	r2, r4
 800b28a:	f001 f875 	bl	800c378 <_dtoa_r>
 800b28e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b292:	4605      	mov	r5, r0
 800b294:	d119      	bne.n	800b2ca <__cvt+0x94>
 800b296:	f019 0f01 	tst.w	r9, #1
 800b29a:	d00e      	beq.n	800b2ba <__cvt+0x84>
 800b29c:	eb00 0904 	add.w	r9, r0, r4
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	4639      	mov	r1, r7
 800b2a8:	f7f5 fc26 	bl	8000af8 <__aeabi_dcmpeq>
 800b2ac:	b108      	cbz	r0, 800b2b2 <__cvt+0x7c>
 800b2ae:	f8cd 900c 	str.w	r9, [sp, #12]
 800b2b2:	2230      	movs	r2, #48	@ 0x30
 800b2b4:	9b03      	ldr	r3, [sp, #12]
 800b2b6:	454b      	cmp	r3, r9
 800b2b8:	d31e      	bcc.n	800b2f8 <__cvt+0xc2>
 800b2ba:	9b03      	ldr	r3, [sp, #12]
 800b2bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2be:	1b5b      	subs	r3, r3, r5
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	6013      	str	r3, [r2, #0]
 800b2c4:	b004      	add	sp, #16
 800b2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b2ce:	eb00 0904 	add.w	r9, r0, r4
 800b2d2:	d1e5      	bne.n	800b2a0 <__cvt+0x6a>
 800b2d4:	7803      	ldrb	r3, [r0, #0]
 800b2d6:	2b30      	cmp	r3, #48	@ 0x30
 800b2d8:	d10a      	bne.n	800b2f0 <__cvt+0xba>
 800b2da:	2200      	movs	r2, #0
 800b2dc:	2300      	movs	r3, #0
 800b2de:	4630      	mov	r0, r6
 800b2e0:	4639      	mov	r1, r7
 800b2e2:	f7f5 fc09 	bl	8000af8 <__aeabi_dcmpeq>
 800b2e6:	b918      	cbnz	r0, 800b2f0 <__cvt+0xba>
 800b2e8:	f1c4 0401 	rsb	r4, r4, #1
 800b2ec:	f8ca 4000 	str.w	r4, [sl]
 800b2f0:	f8da 3000 	ldr.w	r3, [sl]
 800b2f4:	4499      	add	r9, r3
 800b2f6:	e7d3      	b.n	800b2a0 <__cvt+0x6a>
 800b2f8:	1c59      	adds	r1, r3, #1
 800b2fa:	9103      	str	r1, [sp, #12]
 800b2fc:	701a      	strb	r2, [r3, #0]
 800b2fe:	e7d9      	b.n	800b2b4 <__cvt+0x7e>

0800b300 <__exponent>:
 800b300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b302:	2900      	cmp	r1, #0
 800b304:	bfba      	itte	lt
 800b306:	4249      	neglt	r1, r1
 800b308:	232d      	movlt	r3, #45	@ 0x2d
 800b30a:	232b      	movge	r3, #43	@ 0x2b
 800b30c:	2909      	cmp	r1, #9
 800b30e:	7002      	strb	r2, [r0, #0]
 800b310:	7043      	strb	r3, [r0, #1]
 800b312:	dd29      	ble.n	800b368 <__exponent+0x68>
 800b314:	f10d 0307 	add.w	r3, sp, #7
 800b318:	461d      	mov	r5, r3
 800b31a:	270a      	movs	r7, #10
 800b31c:	461a      	mov	r2, r3
 800b31e:	fbb1 f6f7 	udiv	r6, r1, r7
 800b322:	fb07 1416 	mls	r4, r7, r6, r1
 800b326:	3430      	adds	r4, #48	@ 0x30
 800b328:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b32c:	460c      	mov	r4, r1
 800b32e:	2c63      	cmp	r4, #99	@ 0x63
 800b330:	f103 33ff 	add.w	r3, r3, #4294967295
 800b334:	4631      	mov	r1, r6
 800b336:	dcf1      	bgt.n	800b31c <__exponent+0x1c>
 800b338:	3130      	adds	r1, #48	@ 0x30
 800b33a:	1e94      	subs	r4, r2, #2
 800b33c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b340:	1c41      	adds	r1, r0, #1
 800b342:	4623      	mov	r3, r4
 800b344:	42ab      	cmp	r3, r5
 800b346:	d30a      	bcc.n	800b35e <__exponent+0x5e>
 800b348:	f10d 0309 	add.w	r3, sp, #9
 800b34c:	1a9b      	subs	r3, r3, r2
 800b34e:	42ac      	cmp	r4, r5
 800b350:	bf88      	it	hi
 800b352:	2300      	movhi	r3, #0
 800b354:	3302      	adds	r3, #2
 800b356:	4403      	add	r3, r0
 800b358:	1a18      	subs	r0, r3, r0
 800b35a:	b003      	add	sp, #12
 800b35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b35e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b362:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b366:	e7ed      	b.n	800b344 <__exponent+0x44>
 800b368:	2330      	movs	r3, #48	@ 0x30
 800b36a:	3130      	adds	r1, #48	@ 0x30
 800b36c:	7083      	strb	r3, [r0, #2]
 800b36e:	70c1      	strb	r1, [r0, #3]
 800b370:	1d03      	adds	r3, r0, #4
 800b372:	e7f1      	b.n	800b358 <__exponent+0x58>

0800b374 <_printf_float>:
 800b374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b378:	b08d      	sub	sp, #52	@ 0x34
 800b37a:	460c      	mov	r4, r1
 800b37c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b380:	4616      	mov	r6, r2
 800b382:	461f      	mov	r7, r3
 800b384:	4605      	mov	r5, r0
 800b386:	f000 feef 	bl	800c168 <_localeconv_r>
 800b38a:	6803      	ldr	r3, [r0, #0]
 800b38c:	9304      	str	r3, [sp, #16]
 800b38e:	4618      	mov	r0, r3
 800b390:	f7f4 ff86 	bl	80002a0 <strlen>
 800b394:	2300      	movs	r3, #0
 800b396:	930a      	str	r3, [sp, #40]	@ 0x28
 800b398:	f8d8 3000 	ldr.w	r3, [r8]
 800b39c:	9005      	str	r0, [sp, #20]
 800b39e:	3307      	adds	r3, #7
 800b3a0:	f023 0307 	bic.w	r3, r3, #7
 800b3a4:	f103 0208 	add.w	r2, r3, #8
 800b3a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b3ac:	f8d4 b000 	ldr.w	fp, [r4]
 800b3b0:	f8c8 2000 	str.w	r2, [r8]
 800b3b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b3bc:	9307      	str	r3, [sp, #28]
 800b3be:	f8cd 8018 	str.w	r8, [sp, #24]
 800b3c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b3c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3ca:	4b9c      	ldr	r3, [pc, #624]	@ (800b63c <_printf_float+0x2c8>)
 800b3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b3d0:	f7f5 fbc4 	bl	8000b5c <__aeabi_dcmpun>
 800b3d4:	bb70      	cbnz	r0, 800b434 <_printf_float+0xc0>
 800b3d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3da:	4b98      	ldr	r3, [pc, #608]	@ (800b63c <_printf_float+0x2c8>)
 800b3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e0:	f7f5 fb9e 	bl	8000b20 <__aeabi_dcmple>
 800b3e4:	bb30      	cbnz	r0, 800b434 <_printf_float+0xc0>
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	4640      	mov	r0, r8
 800b3ec:	4649      	mov	r1, r9
 800b3ee:	f7f5 fb8d 	bl	8000b0c <__aeabi_dcmplt>
 800b3f2:	b110      	cbz	r0, 800b3fa <_printf_float+0x86>
 800b3f4:	232d      	movs	r3, #45	@ 0x2d
 800b3f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3fa:	4a91      	ldr	r2, [pc, #580]	@ (800b640 <_printf_float+0x2cc>)
 800b3fc:	4b91      	ldr	r3, [pc, #580]	@ (800b644 <_printf_float+0x2d0>)
 800b3fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b402:	bf94      	ite	ls
 800b404:	4690      	movls	r8, r2
 800b406:	4698      	movhi	r8, r3
 800b408:	2303      	movs	r3, #3
 800b40a:	6123      	str	r3, [r4, #16]
 800b40c:	f02b 0304 	bic.w	r3, fp, #4
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	f04f 0900 	mov.w	r9, #0
 800b416:	9700      	str	r7, [sp, #0]
 800b418:	4633      	mov	r3, r6
 800b41a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b41c:	4621      	mov	r1, r4
 800b41e:	4628      	mov	r0, r5
 800b420:	f000 f9d2 	bl	800b7c8 <_printf_common>
 800b424:	3001      	adds	r0, #1
 800b426:	f040 808d 	bne.w	800b544 <_printf_float+0x1d0>
 800b42a:	f04f 30ff 	mov.w	r0, #4294967295
 800b42e:	b00d      	add	sp, #52	@ 0x34
 800b430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b434:	4642      	mov	r2, r8
 800b436:	464b      	mov	r3, r9
 800b438:	4640      	mov	r0, r8
 800b43a:	4649      	mov	r1, r9
 800b43c:	f7f5 fb8e 	bl	8000b5c <__aeabi_dcmpun>
 800b440:	b140      	cbz	r0, 800b454 <_printf_float+0xe0>
 800b442:	464b      	mov	r3, r9
 800b444:	2b00      	cmp	r3, #0
 800b446:	bfbc      	itt	lt
 800b448:	232d      	movlt	r3, #45	@ 0x2d
 800b44a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b44e:	4a7e      	ldr	r2, [pc, #504]	@ (800b648 <_printf_float+0x2d4>)
 800b450:	4b7e      	ldr	r3, [pc, #504]	@ (800b64c <_printf_float+0x2d8>)
 800b452:	e7d4      	b.n	800b3fe <_printf_float+0x8a>
 800b454:	6863      	ldr	r3, [r4, #4]
 800b456:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b45a:	9206      	str	r2, [sp, #24]
 800b45c:	1c5a      	adds	r2, r3, #1
 800b45e:	d13b      	bne.n	800b4d8 <_printf_float+0x164>
 800b460:	2306      	movs	r3, #6
 800b462:	6063      	str	r3, [r4, #4]
 800b464:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b468:	2300      	movs	r3, #0
 800b46a:	6022      	str	r2, [r4, #0]
 800b46c:	9303      	str	r3, [sp, #12]
 800b46e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b470:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b474:	ab09      	add	r3, sp, #36	@ 0x24
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	6861      	ldr	r1, [r4, #4]
 800b47a:	ec49 8b10 	vmov	d0, r8, r9
 800b47e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b482:	4628      	mov	r0, r5
 800b484:	f7ff fed7 	bl	800b236 <__cvt>
 800b488:	9b06      	ldr	r3, [sp, #24]
 800b48a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b48c:	2b47      	cmp	r3, #71	@ 0x47
 800b48e:	4680      	mov	r8, r0
 800b490:	d129      	bne.n	800b4e6 <_printf_float+0x172>
 800b492:	1cc8      	adds	r0, r1, #3
 800b494:	db02      	blt.n	800b49c <_printf_float+0x128>
 800b496:	6863      	ldr	r3, [r4, #4]
 800b498:	4299      	cmp	r1, r3
 800b49a:	dd41      	ble.n	800b520 <_printf_float+0x1ac>
 800b49c:	f1aa 0a02 	sub.w	sl, sl, #2
 800b4a0:	fa5f fa8a 	uxtb.w	sl, sl
 800b4a4:	3901      	subs	r1, #1
 800b4a6:	4652      	mov	r2, sl
 800b4a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b4ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800b4ae:	f7ff ff27 	bl	800b300 <__exponent>
 800b4b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4b4:	1813      	adds	r3, r2, r0
 800b4b6:	2a01      	cmp	r2, #1
 800b4b8:	4681      	mov	r9, r0
 800b4ba:	6123      	str	r3, [r4, #16]
 800b4bc:	dc02      	bgt.n	800b4c4 <_printf_float+0x150>
 800b4be:	6822      	ldr	r2, [r4, #0]
 800b4c0:	07d2      	lsls	r2, r2, #31
 800b4c2:	d501      	bpl.n	800b4c8 <_printf_float+0x154>
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	6123      	str	r3, [r4, #16]
 800b4c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d0a2      	beq.n	800b416 <_printf_float+0xa2>
 800b4d0:	232d      	movs	r3, #45	@ 0x2d
 800b4d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4d6:	e79e      	b.n	800b416 <_printf_float+0xa2>
 800b4d8:	9a06      	ldr	r2, [sp, #24]
 800b4da:	2a47      	cmp	r2, #71	@ 0x47
 800b4dc:	d1c2      	bne.n	800b464 <_printf_float+0xf0>
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1c0      	bne.n	800b464 <_printf_float+0xf0>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e7bd      	b.n	800b462 <_printf_float+0xee>
 800b4e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b4ea:	d9db      	bls.n	800b4a4 <_printf_float+0x130>
 800b4ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b4f0:	d118      	bne.n	800b524 <_printf_float+0x1b0>
 800b4f2:	2900      	cmp	r1, #0
 800b4f4:	6863      	ldr	r3, [r4, #4]
 800b4f6:	dd0b      	ble.n	800b510 <_printf_float+0x19c>
 800b4f8:	6121      	str	r1, [r4, #16]
 800b4fa:	b913      	cbnz	r3, 800b502 <_printf_float+0x18e>
 800b4fc:	6822      	ldr	r2, [r4, #0]
 800b4fe:	07d0      	lsls	r0, r2, #31
 800b500:	d502      	bpl.n	800b508 <_printf_float+0x194>
 800b502:	3301      	adds	r3, #1
 800b504:	440b      	add	r3, r1
 800b506:	6123      	str	r3, [r4, #16]
 800b508:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b50a:	f04f 0900 	mov.w	r9, #0
 800b50e:	e7db      	b.n	800b4c8 <_printf_float+0x154>
 800b510:	b913      	cbnz	r3, 800b518 <_printf_float+0x1a4>
 800b512:	6822      	ldr	r2, [r4, #0]
 800b514:	07d2      	lsls	r2, r2, #31
 800b516:	d501      	bpl.n	800b51c <_printf_float+0x1a8>
 800b518:	3302      	adds	r3, #2
 800b51a:	e7f4      	b.n	800b506 <_printf_float+0x192>
 800b51c:	2301      	movs	r3, #1
 800b51e:	e7f2      	b.n	800b506 <_printf_float+0x192>
 800b520:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b526:	4299      	cmp	r1, r3
 800b528:	db05      	blt.n	800b536 <_printf_float+0x1c2>
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	6121      	str	r1, [r4, #16]
 800b52e:	07d8      	lsls	r0, r3, #31
 800b530:	d5ea      	bpl.n	800b508 <_printf_float+0x194>
 800b532:	1c4b      	adds	r3, r1, #1
 800b534:	e7e7      	b.n	800b506 <_printf_float+0x192>
 800b536:	2900      	cmp	r1, #0
 800b538:	bfd4      	ite	le
 800b53a:	f1c1 0202 	rsble	r2, r1, #2
 800b53e:	2201      	movgt	r2, #1
 800b540:	4413      	add	r3, r2
 800b542:	e7e0      	b.n	800b506 <_printf_float+0x192>
 800b544:	6823      	ldr	r3, [r4, #0]
 800b546:	055a      	lsls	r2, r3, #21
 800b548:	d407      	bmi.n	800b55a <_printf_float+0x1e6>
 800b54a:	6923      	ldr	r3, [r4, #16]
 800b54c:	4642      	mov	r2, r8
 800b54e:	4631      	mov	r1, r6
 800b550:	4628      	mov	r0, r5
 800b552:	47b8      	blx	r7
 800b554:	3001      	adds	r0, #1
 800b556:	d12b      	bne.n	800b5b0 <_printf_float+0x23c>
 800b558:	e767      	b.n	800b42a <_printf_float+0xb6>
 800b55a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b55e:	f240 80dd 	bls.w	800b71c <_printf_float+0x3a8>
 800b562:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b566:	2200      	movs	r2, #0
 800b568:	2300      	movs	r3, #0
 800b56a:	f7f5 fac5 	bl	8000af8 <__aeabi_dcmpeq>
 800b56e:	2800      	cmp	r0, #0
 800b570:	d033      	beq.n	800b5da <_printf_float+0x266>
 800b572:	4a37      	ldr	r2, [pc, #220]	@ (800b650 <_printf_float+0x2dc>)
 800b574:	2301      	movs	r3, #1
 800b576:	4631      	mov	r1, r6
 800b578:	4628      	mov	r0, r5
 800b57a:	47b8      	blx	r7
 800b57c:	3001      	adds	r0, #1
 800b57e:	f43f af54 	beq.w	800b42a <_printf_float+0xb6>
 800b582:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b586:	4543      	cmp	r3, r8
 800b588:	db02      	blt.n	800b590 <_printf_float+0x21c>
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	07d8      	lsls	r0, r3, #31
 800b58e:	d50f      	bpl.n	800b5b0 <_printf_float+0x23c>
 800b590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b594:	4631      	mov	r1, r6
 800b596:	4628      	mov	r0, r5
 800b598:	47b8      	blx	r7
 800b59a:	3001      	adds	r0, #1
 800b59c:	f43f af45 	beq.w	800b42a <_printf_float+0xb6>
 800b5a0:	f04f 0900 	mov.w	r9, #0
 800b5a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5a8:	f104 0a1a 	add.w	sl, r4, #26
 800b5ac:	45c8      	cmp	r8, r9
 800b5ae:	dc09      	bgt.n	800b5c4 <_printf_float+0x250>
 800b5b0:	6823      	ldr	r3, [r4, #0]
 800b5b2:	079b      	lsls	r3, r3, #30
 800b5b4:	f100 8103 	bmi.w	800b7be <_printf_float+0x44a>
 800b5b8:	68e0      	ldr	r0, [r4, #12]
 800b5ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5bc:	4298      	cmp	r0, r3
 800b5be:	bfb8      	it	lt
 800b5c0:	4618      	movlt	r0, r3
 800b5c2:	e734      	b.n	800b42e <_printf_float+0xba>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	4652      	mov	r2, sl
 800b5c8:	4631      	mov	r1, r6
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	47b8      	blx	r7
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	f43f af2b 	beq.w	800b42a <_printf_float+0xb6>
 800b5d4:	f109 0901 	add.w	r9, r9, #1
 800b5d8:	e7e8      	b.n	800b5ac <_printf_float+0x238>
 800b5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	dc39      	bgt.n	800b654 <_printf_float+0x2e0>
 800b5e0:	4a1b      	ldr	r2, [pc, #108]	@ (800b650 <_printf_float+0x2dc>)
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	4631      	mov	r1, r6
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	47b8      	blx	r7
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	f43f af1d 	beq.w	800b42a <_printf_float+0xb6>
 800b5f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b5f4:	ea59 0303 	orrs.w	r3, r9, r3
 800b5f8:	d102      	bne.n	800b600 <_printf_float+0x28c>
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	07d9      	lsls	r1, r3, #31
 800b5fe:	d5d7      	bpl.n	800b5b0 <_printf_float+0x23c>
 800b600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b604:	4631      	mov	r1, r6
 800b606:	4628      	mov	r0, r5
 800b608:	47b8      	blx	r7
 800b60a:	3001      	adds	r0, #1
 800b60c:	f43f af0d 	beq.w	800b42a <_printf_float+0xb6>
 800b610:	f04f 0a00 	mov.w	sl, #0
 800b614:	f104 0b1a 	add.w	fp, r4, #26
 800b618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b61a:	425b      	negs	r3, r3
 800b61c:	4553      	cmp	r3, sl
 800b61e:	dc01      	bgt.n	800b624 <_printf_float+0x2b0>
 800b620:	464b      	mov	r3, r9
 800b622:	e793      	b.n	800b54c <_printf_float+0x1d8>
 800b624:	2301      	movs	r3, #1
 800b626:	465a      	mov	r2, fp
 800b628:	4631      	mov	r1, r6
 800b62a:	4628      	mov	r0, r5
 800b62c:	47b8      	blx	r7
 800b62e:	3001      	adds	r0, #1
 800b630:	f43f aefb 	beq.w	800b42a <_printf_float+0xb6>
 800b634:	f10a 0a01 	add.w	sl, sl, #1
 800b638:	e7ee      	b.n	800b618 <_printf_float+0x2a4>
 800b63a:	bf00      	nop
 800b63c:	7fefffff 	.word	0x7fefffff
 800b640:	0800fb70 	.word	0x0800fb70
 800b644:	0800fb74 	.word	0x0800fb74
 800b648:	0800fb78 	.word	0x0800fb78
 800b64c:	0800fb7c 	.word	0x0800fb7c
 800b650:	0800fb80 	.word	0x0800fb80
 800b654:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b656:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b65a:	4553      	cmp	r3, sl
 800b65c:	bfa8      	it	ge
 800b65e:	4653      	movge	r3, sl
 800b660:	2b00      	cmp	r3, #0
 800b662:	4699      	mov	r9, r3
 800b664:	dc36      	bgt.n	800b6d4 <_printf_float+0x360>
 800b666:	f04f 0b00 	mov.w	fp, #0
 800b66a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b66e:	f104 021a 	add.w	r2, r4, #26
 800b672:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b674:	9306      	str	r3, [sp, #24]
 800b676:	eba3 0309 	sub.w	r3, r3, r9
 800b67a:	455b      	cmp	r3, fp
 800b67c:	dc31      	bgt.n	800b6e2 <_printf_float+0x36e>
 800b67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b680:	459a      	cmp	sl, r3
 800b682:	dc3a      	bgt.n	800b6fa <_printf_float+0x386>
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	07da      	lsls	r2, r3, #31
 800b688:	d437      	bmi.n	800b6fa <_printf_float+0x386>
 800b68a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b68c:	ebaa 0903 	sub.w	r9, sl, r3
 800b690:	9b06      	ldr	r3, [sp, #24]
 800b692:	ebaa 0303 	sub.w	r3, sl, r3
 800b696:	4599      	cmp	r9, r3
 800b698:	bfa8      	it	ge
 800b69a:	4699      	movge	r9, r3
 800b69c:	f1b9 0f00 	cmp.w	r9, #0
 800b6a0:	dc33      	bgt.n	800b70a <_printf_float+0x396>
 800b6a2:	f04f 0800 	mov.w	r8, #0
 800b6a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6aa:	f104 0b1a 	add.w	fp, r4, #26
 800b6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6b0:	ebaa 0303 	sub.w	r3, sl, r3
 800b6b4:	eba3 0309 	sub.w	r3, r3, r9
 800b6b8:	4543      	cmp	r3, r8
 800b6ba:	f77f af79 	ble.w	800b5b0 <_printf_float+0x23c>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	465a      	mov	r2, fp
 800b6c2:	4631      	mov	r1, r6
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	47b8      	blx	r7
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	f43f aeae 	beq.w	800b42a <_printf_float+0xb6>
 800b6ce:	f108 0801 	add.w	r8, r8, #1
 800b6d2:	e7ec      	b.n	800b6ae <_printf_float+0x33a>
 800b6d4:	4642      	mov	r2, r8
 800b6d6:	4631      	mov	r1, r6
 800b6d8:	4628      	mov	r0, r5
 800b6da:	47b8      	blx	r7
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d1c2      	bne.n	800b666 <_printf_float+0x2f2>
 800b6e0:	e6a3      	b.n	800b42a <_printf_float+0xb6>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	4631      	mov	r1, r6
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	9206      	str	r2, [sp, #24]
 800b6ea:	47b8      	blx	r7
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	f43f ae9c 	beq.w	800b42a <_printf_float+0xb6>
 800b6f2:	9a06      	ldr	r2, [sp, #24]
 800b6f4:	f10b 0b01 	add.w	fp, fp, #1
 800b6f8:	e7bb      	b.n	800b672 <_printf_float+0x2fe>
 800b6fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6fe:	4631      	mov	r1, r6
 800b700:	4628      	mov	r0, r5
 800b702:	47b8      	blx	r7
 800b704:	3001      	adds	r0, #1
 800b706:	d1c0      	bne.n	800b68a <_printf_float+0x316>
 800b708:	e68f      	b.n	800b42a <_printf_float+0xb6>
 800b70a:	9a06      	ldr	r2, [sp, #24]
 800b70c:	464b      	mov	r3, r9
 800b70e:	4442      	add	r2, r8
 800b710:	4631      	mov	r1, r6
 800b712:	4628      	mov	r0, r5
 800b714:	47b8      	blx	r7
 800b716:	3001      	adds	r0, #1
 800b718:	d1c3      	bne.n	800b6a2 <_printf_float+0x32e>
 800b71a:	e686      	b.n	800b42a <_printf_float+0xb6>
 800b71c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b720:	f1ba 0f01 	cmp.w	sl, #1
 800b724:	dc01      	bgt.n	800b72a <_printf_float+0x3b6>
 800b726:	07db      	lsls	r3, r3, #31
 800b728:	d536      	bpl.n	800b798 <_printf_float+0x424>
 800b72a:	2301      	movs	r3, #1
 800b72c:	4642      	mov	r2, r8
 800b72e:	4631      	mov	r1, r6
 800b730:	4628      	mov	r0, r5
 800b732:	47b8      	blx	r7
 800b734:	3001      	adds	r0, #1
 800b736:	f43f ae78 	beq.w	800b42a <_printf_float+0xb6>
 800b73a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b73e:	4631      	mov	r1, r6
 800b740:	4628      	mov	r0, r5
 800b742:	47b8      	blx	r7
 800b744:	3001      	adds	r0, #1
 800b746:	f43f ae70 	beq.w	800b42a <_printf_float+0xb6>
 800b74a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b74e:	2200      	movs	r2, #0
 800b750:	2300      	movs	r3, #0
 800b752:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b756:	f7f5 f9cf 	bl	8000af8 <__aeabi_dcmpeq>
 800b75a:	b9c0      	cbnz	r0, 800b78e <_printf_float+0x41a>
 800b75c:	4653      	mov	r3, sl
 800b75e:	f108 0201 	add.w	r2, r8, #1
 800b762:	4631      	mov	r1, r6
 800b764:	4628      	mov	r0, r5
 800b766:	47b8      	blx	r7
 800b768:	3001      	adds	r0, #1
 800b76a:	d10c      	bne.n	800b786 <_printf_float+0x412>
 800b76c:	e65d      	b.n	800b42a <_printf_float+0xb6>
 800b76e:	2301      	movs	r3, #1
 800b770:	465a      	mov	r2, fp
 800b772:	4631      	mov	r1, r6
 800b774:	4628      	mov	r0, r5
 800b776:	47b8      	blx	r7
 800b778:	3001      	adds	r0, #1
 800b77a:	f43f ae56 	beq.w	800b42a <_printf_float+0xb6>
 800b77e:	f108 0801 	add.w	r8, r8, #1
 800b782:	45d0      	cmp	r8, sl
 800b784:	dbf3      	blt.n	800b76e <_printf_float+0x3fa>
 800b786:	464b      	mov	r3, r9
 800b788:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b78c:	e6df      	b.n	800b54e <_printf_float+0x1da>
 800b78e:	f04f 0800 	mov.w	r8, #0
 800b792:	f104 0b1a 	add.w	fp, r4, #26
 800b796:	e7f4      	b.n	800b782 <_printf_float+0x40e>
 800b798:	2301      	movs	r3, #1
 800b79a:	4642      	mov	r2, r8
 800b79c:	e7e1      	b.n	800b762 <_printf_float+0x3ee>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	464a      	mov	r2, r9
 800b7a2:	4631      	mov	r1, r6
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	47b8      	blx	r7
 800b7a8:	3001      	adds	r0, #1
 800b7aa:	f43f ae3e 	beq.w	800b42a <_printf_float+0xb6>
 800b7ae:	f108 0801 	add.w	r8, r8, #1
 800b7b2:	68e3      	ldr	r3, [r4, #12]
 800b7b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b7b6:	1a5b      	subs	r3, r3, r1
 800b7b8:	4543      	cmp	r3, r8
 800b7ba:	dcf0      	bgt.n	800b79e <_printf_float+0x42a>
 800b7bc:	e6fc      	b.n	800b5b8 <_printf_float+0x244>
 800b7be:	f04f 0800 	mov.w	r8, #0
 800b7c2:	f104 0919 	add.w	r9, r4, #25
 800b7c6:	e7f4      	b.n	800b7b2 <_printf_float+0x43e>

0800b7c8 <_printf_common>:
 800b7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7cc:	4616      	mov	r6, r2
 800b7ce:	4698      	mov	r8, r3
 800b7d0:	688a      	ldr	r2, [r1, #8]
 800b7d2:	690b      	ldr	r3, [r1, #16]
 800b7d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	bfb8      	it	lt
 800b7dc:	4613      	movlt	r3, r2
 800b7de:	6033      	str	r3, [r6, #0]
 800b7e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	b10a      	cbz	r2, 800b7ee <_printf_common+0x26>
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	6033      	str	r3, [r6, #0]
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	0699      	lsls	r1, r3, #26
 800b7f2:	bf42      	ittt	mi
 800b7f4:	6833      	ldrmi	r3, [r6, #0]
 800b7f6:	3302      	addmi	r3, #2
 800b7f8:	6033      	strmi	r3, [r6, #0]
 800b7fa:	6825      	ldr	r5, [r4, #0]
 800b7fc:	f015 0506 	ands.w	r5, r5, #6
 800b800:	d106      	bne.n	800b810 <_printf_common+0x48>
 800b802:	f104 0a19 	add.w	sl, r4, #25
 800b806:	68e3      	ldr	r3, [r4, #12]
 800b808:	6832      	ldr	r2, [r6, #0]
 800b80a:	1a9b      	subs	r3, r3, r2
 800b80c:	42ab      	cmp	r3, r5
 800b80e:	dc26      	bgt.n	800b85e <_printf_common+0x96>
 800b810:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b814:	6822      	ldr	r2, [r4, #0]
 800b816:	3b00      	subs	r3, #0
 800b818:	bf18      	it	ne
 800b81a:	2301      	movne	r3, #1
 800b81c:	0692      	lsls	r2, r2, #26
 800b81e:	d42b      	bmi.n	800b878 <_printf_common+0xb0>
 800b820:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b824:	4641      	mov	r1, r8
 800b826:	4638      	mov	r0, r7
 800b828:	47c8      	blx	r9
 800b82a:	3001      	adds	r0, #1
 800b82c:	d01e      	beq.n	800b86c <_printf_common+0xa4>
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	6922      	ldr	r2, [r4, #16]
 800b832:	f003 0306 	and.w	r3, r3, #6
 800b836:	2b04      	cmp	r3, #4
 800b838:	bf02      	ittt	eq
 800b83a:	68e5      	ldreq	r5, [r4, #12]
 800b83c:	6833      	ldreq	r3, [r6, #0]
 800b83e:	1aed      	subeq	r5, r5, r3
 800b840:	68a3      	ldr	r3, [r4, #8]
 800b842:	bf0c      	ite	eq
 800b844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b848:	2500      	movne	r5, #0
 800b84a:	4293      	cmp	r3, r2
 800b84c:	bfc4      	itt	gt
 800b84e:	1a9b      	subgt	r3, r3, r2
 800b850:	18ed      	addgt	r5, r5, r3
 800b852:	2600      	movs	r6, #0
 800b854:	341a      	adds	r4, #26
 800b856:	42b5      	cmp	r5, r6
 800b858:	d11a      	bne.n	800b890 <_printf_common+0xc8>
 800b85a:	2000      	movs	r0, #0
 800b85c:	e008      	b.n	800b870 <_printf_common+0xa8>
 800b85e:	2301      	movs	r3, #1
 800b860:	4652      	mov	r2, sl
 800b862:	4641      	mov	r1, r8
 800b864:	4638      	mov	r0, r7
 800b866:	47c8      	blx	r9
 800b868:	3001      	adds	r0, #1
 800b86a:	d103      	bne.n	800b874 <_printf_common+0xac>
 800b86c:	f04f 30ff 	mov.w	r0, #4294967295
 800b870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b874:	3501      	adds	r5, #1
 800b876:	e7c6      	b.n	800b806 <_printf_common+0x3e>
 800b878:	18e1      	adds	r1, r4, r3
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	2030      	movs	r0, #48	@ 0x30
 800b87e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b882:	4422      	add	r2, r4
 800b884:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b888:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b88c:	3302      	adds	r3, #2
 800b88e:	e7c7      	b.n	800b820 <_printf_common+0x58>
 800b890:	2301      	movs	r3, #1
 800b892:	4622      	mov	r2, r4
 800b894:	4641      	mov	r1, r8
 800b896:	4638      	mov	r0, r7
 800b898:	47c8      	blx	r9
 800b89a:	3001      	adds	r0, #1
 800b89c:	d0e6      	beq.n	800b86c <_printf_common+0xa4>
 800b89e:	3601      	adds	r6, #1
 800b8a0:	e7d9      	b.n	800b856 <_printf_common+0x8e>
	...

0800b8a4 <_printf_i>:
 800b8a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8a8:	7e0f      	ldrb	r7, [r1, #24]
 800b8aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8ac:	2f78      	cmp	r7, #120	@ 0x78
 800b8ae:	4691      	mov	r9, r2
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	469a      	mov	sl, r3
 800b8b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8ba:	d807      	bhi.n	800b8cc <_printf_i+0x28>
 800b8bc:	2f62      	cmp	r7, #98	@ 0x62
 800b8be:	d80a      	bhi.n	800b8d6 <_printf_i+0x32>
 800b8c0:	2f00      	cmp	r7, #0
 800b8c2:	f000 80d2 	beq.w	800ba6a <_printf_i+0x1c6>
 800b8c6:	2f58      	cmp	r7, #88	@ 0x58
 800b8c8:	f000 80b9 	beq.w	800ba3e <_printf_i+0x19a>
 800b8cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b8d4:	e03a      	b.n	800b94c <_printf_i+0xa8>
 800b8d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b8da:	2b15      	cmp	r3, #21
 800b8dc:	d8f6      	bhi.n	800b8cc <_printf_i+0x28>
 800b8de:	a101      	add	r1, pc, #4	@ (adr r1, 800b8e4 <_printf_i+0x40>)
 800b8e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8e4:	0800b93d 	.word	0x0800b93d
 800b8e8:	0800b951 	.word	0x0800b951
 800b8ec:	0800b8cd 	.word	0x0800b8cd
 800b8f0:	0800b8cd 	.word	0x0800b8cd
 800b8f4:	0800b8cd 	.word	0x0800b8cd
 800b8f8:	0800b8cd 	.word	0x0800b8cd
 800b8fc:	0800b951 	.word	0x0800b951
 800b900:	0800b8cd 	.word	0x0800b8cd
 800b904:	0800b8cd 	.word	0x0800b8cd
 800b908:	0800b8cd 	.word	0x0800b8cd
 800b90c:	0800b8cd 	.word	0x0800b8cd
 800b910:	0800ba51 	.word	0x0800ba51
 800b914:	0800b97b 	.word	0x0800b97b
 800b918:	0800ba0b 	.word	0x0800ba0b
 800b91c:	0800b8cd 	.word	0x0800b8cd
 800b920:	0800b8cd 	.word	0x0800b8cd
 800b924:	0800ba73 	.word	0x0800ba73
 800b928:	0800b8cd 	.word	0x0800b8cd
 800b92c:	0800b97b 	.word	0x0800b97b
 800b930:	0800b8cd 	.word	0x0800b8cd
 800b934:	0800b8cd 	.word	0x0800b8cd
 800b938:	0800ba13 	.word	0x0800ba13
 800b93c:	6833      	ldr	r3, [r6, #0]
 800b93e:	1d1a      	adds	r2, r3, #4
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	6032      	str	r2, [r6, #0]
 800b944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b948:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b94c:	2301      	movs	r3, #1
 800b94e:	e09d      	b.n	800ba8c <_printf_i+0x1e8>
 800b950:	6833      	ldr	r3, [r6, #0]
 800b952:	6820      	ldr	r0, [r4, #0]
 800b954:	1d19      	adds	r1, r3, #4
 800b956:	6031      	str	r1, [r6, #0]
 800b958:	0606      	lsls	r6, r0, #24
 800b95a:	d501      	bpl.n	800b960 <_printf_i+0xbc>
 800b95c:	681d      	ldr	r5, [r3, #0]
 800b95e:	e003      	b.n	800b968 <_printf_i+0xc4>
 800b960:	0645      	lsls	r5, r0, #25
 800b962:	d5fb      	bpl.n	800b95c <_printf_i+0xb8>
 800b964:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b968:	2d00      	cmp	r5, #0
 800b96a:	da03      	bge.n	800b974 <_printf_i+0xd0>
 800b96c:	232d      	movs	r3, #45	@ 0x2d
 800b96e:	426d      	negs	r5, r5
 800b970:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b974:	4859      	ldr	r0, [pc, #356]	@ (800badc <_printf_i+0x238>)
 800b976:	230a      	movs	r3, #10
 800b978:	e011      	b.n	800b99e <_printf_i+0xfa>
 800b97a:	6821      	ldr	r1, [r4, #0]
 800b97c:	6833      	ldr	r3, [r6, #0]
 800b97e:	0608      	lsls	r0, r1, #24
 800b980:	f853 5b04 	ldr.w	r5, [r3], #4
 800b984:	d402      	bmi.n	800b98c <_printf_i+0xe8>
 800b986:	0649      	lsls	r1, r1, #25
 800b988:	bf48      	it	mi
 800b98a:	b2ad      	uxthmi	r5, r5
 800b98c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b98e:	4853      	ldr	r0, [pc, #332]	@ (800badc <_printf_i+0x238>)
 800b990:	6033      	str	r3, [r6, #0]
 800b992:	bf14      	ite	ne
 800b994:	230a      	movne	r3, #10
 800b996:	2308      	moveq	r3, #8
 800b998:	2100      	movs	r1, #0
 800b99a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b99e:	6866      	ldr	r6, [r4, #4]
 800b9a0:	60a6      	str	r6, [r4, #8]
 800b9a2:	2e00      	cmp	r6, #0
 800b9a4:	bfa2      	ittt	ge
 800b9a6:	6821      	ldrge	r1, [r4, #0]
 800b9a8:	f021 0104 	bicge.w	r1, r1, #4
 800b9ac:	6021      	strge	r1, [r4, #0]
 800b9ae:	b90d      	cbnz	r5, 800b9b4 <_printf_i+0x110>
 800b9b0:	2e00      	cmp	r6, #0
 800b9b2:	d04b      	beq.n	800ba4c <_printf_i+0x1a8>
 800b9b4:	4616      	mov	r6, r2
 800b9b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9ba:	fb03 5711 	mls	r7, r3, r1, r5
 800b9be:	5dc7      	ldrb	r7, [r0, r7]
 800b9c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9c4:	462f      	mov	r7, r5
 800b9c6:	42bb      	cmp	r3, r7
 800b9c8:	460d      	mov	r5, r1
 800b9ca:	d9f4      	bls.n	800b9b6 <_printf_i+0x112>
 800b9cc:	2b08      	cmp	r3, #8
 800b9ce:	d10b      	bne.n	800b9e8 <_printf_i+0x144>
 800b9d0:	6823      	ldr	r3, [r4, #0]
 800b9d2:	07df      	lsls	r7, r3, #31
 800b9d4:	d508      	bpl.n	800b9e8 <_printf_i+0x144>
 800b9d6:	6923      	ldr	r3, [r4, #16]
 800b9d8:	6861      	ldr	r1, [r4, #4]
 800b9da:	4299      	cmp	r1, r3
 800b9dc:	bfde      	ittt	le
 800b9de:	2330      	movle	r3, #48	@ 0x30
 800b9e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b9e8:	1b92      	subs	r2, r2, r6
 800b9ea:	6122      	str	r2, [r4, #16]
 800b9ec:	f8cd a000 	str.w	sl, [sp]
 800b9f0:	464b      	mov	r3, r9
 800b9f2:	aa03      	add	r2, sp, #12
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	4640      	mov	r0, r8
 800b9f8:	f7ff fee6 	bl	800b7c8 <_printf_common>
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	d14a      	bne.n	800ba96 <_printf_i+0x1f2>
 800ba00:	f04f 30ff 	mov.w	r0, #4294967295
 800ba04:	b004      	add	sp, #16
 800ba06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	f043 0320 	orr.w	r3, r3, #32
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	4833      	ldr	r0, [pc, #204]	@ (800bae0 <_printf_i+0x23c>)
 800ba14:	2778      	movs	r7, #120	@ 0x78
 800ba16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba1a:	6823      	ldr	r3, [r4, #0]
 800ba1c:	6831      	ldr	r1, [r6, #0]
 800ba1e:	061f      	lsls	r7, r3, #24
 800ba20:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba24:	d402      	bmi.n	800ba2c <_printf_i+0x188>
 800ba26:	065f      	lsls	r7, r3, #25
 800ba28:	bf48      	it	mi
 800ba2a:	b2ad      	uxthmi	r5, r5
 800ba2c:	6031      	str	r1, [r6, #0]
 800ba2e:	07d9      	lsls	r1, r3, #31
 800ba30:	bf44      	itt	mi
 800ba32:	f043 0320 	orrmi.w	r3, r3, #32
 800ba36:	6023      	strmi	r3, [r4, #0]
 800ba38:	b11d      	cbz	r5, 800ba42 <_printf_i+0x19e>
 800ba3a:	2310      	movs	r3, #16
 800ba3c:	e7ac      	b.n	800b998 <_printf_i+0xf4>
 800ba3e:	4827      	ldr	r0, [pc, #156]	@ (800badc <_printf_i+0x238>)
 800ba40:	e7e9      	b.n	800ba16 <_printf_i+0x172>
 800ba42:	6823      	ldr	r3, [r4, #0]
 800ba44:	f023 0320 	bic.w	r3, r3, #32
 800ba48:	6023      	str	r3, [r4, #0]
 800ba4a:	e7f6      	b.n	800ba3a <_printf_i+0x196>
 800ba4c:	4616      	mov	r6, r2
 800ba4e:	e7bd      	b.n	800b9cc <_printf_i+0x128>
 800ba50:	6833      	ldr	r3, [r6, #0]
 800ba52:	6825      	ldr	r5, [r4, #0]
 800ba54:	6961      	ldr	r1, [r4, #20]
 800ba56:	1d18      	adds	r0, r3, #4
 800ba58:	6030      	str	r0, [r6, #0]
 800ba5a:	062e      	lsls	r6, r5, #24
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	d501      	bpl.n	800ba64 <_printf_i+0x1c0>
 800ba60:	6019      	str	r1, [r3, #0]
 800ba62:	e002      	b.n	800ba6a <_printf_i+0x1c6>
 800ba64:	0668      	lsls	r0, r5, #25
 800ba66:	d5fb      	bpl.n	800ba60 <_printf_i+0x1bc>
 800ba68:	8019      	strh	r1, [r3, #0]
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	6123      	str	r3, [r4, #16]
 800ba6e:	4616      	mov	r6, r2
 800ba70:	e7bc      	b.n	800b9ec <_printf_i+0x148>
 800ba72:	6833      	ldr	r3, [r6, #0]
 800ba74:	1d1a      	adds	r2, r3, #4
 800ba76:	6032      	str	r2, [r6, #0]
 800ba78:	681e      	ldr	r6, [r3, #0]
 800ba7a:	6862      	ldr	r2, [r4, #4]
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f7f4 fbbe 	bl	8000200 <memchr>
 800ba84:	b108      	cbz	r0, 800ba8a <_printf_i+0x1e6>
 800ba86:	1b80      	subs	r0, r0, r6
 800ba88:	6060      	str	r0, [r4, #4]
 800ba8a:	6863      	ldr	r3, [r4, #4]
 800ba8c:	6123      	str	r3, [r4, #16]
 800ba8e:	2300      	movs	r3, #0
 800ba90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba94:	e7aa      	b.n	800b9ec <_printf_i+0x148>
 800ba96:	6923      	ldr	r3, [r4, #16]
 800ba98:	4632      	mov	r2, r6
 800ba9a:	4649      	mov	r1, r9
 800ba9c:	4640      	mov	r0, r8
 800ba9e:	47d0      	blx	sl
 800baa0:	3001      	adds	r0, #1
 800baa2:	d0ad      	beq.n	800ba00 <_printf_i+0x15c>
 800baa4:	6823      	ldr	r3, [r4, #0]
 800baa6:	079b      	lsls	r3, r3, #30
 800baa8:	d413      	bmi.n	800bad2 <_printf_i+0x22e>
 800baaa:	68e0      	ldr	r0, [r4, #12]
 800baac:	9b03      	ldr	r3, [sp, #12]
 800baae:	4298      	cmp	r0, r3
 800bab0:	bfb8      	it	lt
 800bab2:	4618      	movlt	r0, r3
 800bab4:	e7a6      	b.n	800ba04 <_printf_i+0x160>
 800bab6:	2301      	movs	r3, #1
 800bab8:	4632      	mov	r2, r6
 800baba:	4649      	mov	r1, r9
 800babc:	4640      	mov	r0, r8
 800babe:	47d0      	blx	sl
 800bac0:	3001      	adds	r0, #1
 800bac2:	d09d      	beq.n	800ba00 <_printf_i+0x15c>
 800bac4:	3501      	adds	r5, #1
 800bac6:	68e3      	ldr	r3, [r4, #12]
 800bac8:	9903      	ldr	r1, [sp, #12]
 800baca:	1a5b      	subs	r3, r3, r1
 800bacc:	42ab      	cmp	r3, r5
 800bace:	dcf2      	bgt.n	800bab6 <_printf_i+0x212>
 800bad0:	e7eb      	b.n	800baaa <_printf_i+0x206>
 800bad2:	2500      	movs	r5, #0
 800bad4:	f104 0619 	add.w	r6, r4, #25
 800bad8:	e7f5      	b.n	800bac6 <_printf_i+0x222>
 800bada:	bf00      	nop
 800badc:	0800fb82 	.word	0x0800fb82
 800bae0:	0800fb93 	.word	0x0800fb93

0800bae4 <_scanf_float>:
 800bae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae8:	b087      	sub	sp, #28
 800baea:	4617      	mov	r7, r2
 800baec:	9303      	str	r3, [sp, #12]
 800baee:	688b      	ldr	r3, [r1, #8]
 800baf0:	1e5a      	subs	r2, r3, #1
 800baf2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800baf6:	bf81      	itttt	hi
 800baf8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bafc:	eb03 0b05 	addhi.w	fp, r3, r5
 800bb00:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bb04:	608b      	strhi	r3, [r1, #8]
 800bb06:	680b      	ldr	r3, [r1, #0]
 800bb08:	460a      	mov	r2, r1
 800bb0a:	f04f 0500 	mov.w	r5, #0
 800bb0e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bb12:	f842 3b1c 	str.w	r3, [r2], #28
 800bb16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bb1a:	4680      	mov	r8, r0
 800bb1c:	460c      	mov	r4, r1
 800bb1e:	bf98      	it	ls
 800bb20:	f04f 0b00 	movls.w	fp, #0
 800bb24:	9201      	str	r2, [sp, #4]
 800bb26:	4616      	mov	r6, r2
 800bb28:	46aa      	mov	sl, r5
 800bb2a:	46a9      	mov	r9, r5
 800bb2c:	9502      	str	r5, [sp, #8]
 800bb2e:	68a2      	ldr	r2, [r4, #8]
 800bb30:	b152      	cbz	r2, 800bb48 <_scanf_float+0x64>
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	2b4e      	cmp	r3, #78	@ 0x4e
 800bb38:	d864      	bhi.n	800bc04 <_scanf_float+0x120>
 800bb3a:	2b40      	cmp	r3, #64	@ 0x40
 800bb3c:	d83c      	bhi.n	800bbb8 <_scanf_float+0xd4>
 800bb3e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bb42:	b2c8      	uxtb	r0, r1
 800bb44:	280e      	cmp	r0, #14
 800bb46:	d93a      	bls.n	800bbbe <_scanf_float+0xda>
 800bb48:	f1b9 0f00 	cmp.w	r9, #0
 800bb4c:	d003      	beq.n	800bb56 <_scanf_float+0x72>
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb5a:	f1ba 0f01 	cmp.w	sl, #1
 800bb5e:	f200 8117 	bhi.w	800bd90 <_scanf_float+0x2ac>
 800bb62:	9b01      	ldr	r3, [sp, #4]
 800bb64:	429e      	cmp	r6, r3
 800bb66:	f200 8108 	bhi.w	800bd7a <_scanf_float+0x296>
 800bb6a:	2001      	movs	r0, #1
 800bb6c:	b007      	add	sp, #28
 800bb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb72:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bb76:	2a0d      	cmp	r2, #13
 800bb78:	d8e6      	bhi.n	800bb48 <_scanf_float+0x64>
 800bb7a:	a101      	add	r1, pc, #4	@ (adr r1, 800bb80 <_scanf_float+0x9c>)
 800bb7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bb80:	0800bcc7 	.word	0x0800bcc7
 800bb84:	0800bb49 	.word	0x0800bb49
 800bb88:	0800bb49 	.word	0x0800bb49
 800bb8c:	0800bb49 	.word	0x0800bb49
 800bb90:	0800bd27 	.word	0x0800bd27
 800bb94:	0800bcff 	.word	0x0800bcff
 800bb98:	0800bb49 	.word	0x0800bb49
 800bb9c:	0800bb49 	.word	0x0800bb49
 800bba0:	0800bcd5 	.word	0x0800bcd5
 800bba4:	0800bb49 	.word	0x0800bb49
 800bba8:	0800bb49 	.word	0x0800bb49
 800bbac:	0800bb49 	.word	0x0800bb49
 800bbb0:	0800bb49 	.word	0x0800bb49
 800bbb4:	0800bc8d 	.word	0x0800bc8d
 800bbb8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bbbc:	e7db      	b.n	800bb76 <_scanf_float+0x92>
 800bbbe:	290e      	cmp	r1, #14
 800bbc0:	d8c2      	bhi.n	800bb48 <_scanf_float+0x64>
 800bbc2:	a001      	add	r0, pc, #4	@ (adr r0, 800bbc8 <_scanf_float+0xe4>)
 800bbc4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bbc8:	0800bc7d 	.word	0x0800bc7d
 800bbcc:	0800bb49 	.word	0x0800bb49
 800bbd0:	0800bc7d 	.word	0x0800bc7d
 800bbd4:	0800bd13 	.word	0x0800bd13
 800bbd8:	0800bb49 	.word	0x0800bb49
 800bbdc:	0800bc25 	.word	0x0800bc25
 800bbe0:	0800bc63 	.word	0x0800bc63
 800bbe4:	0800bc63 	.word	0x0800bc63
 800bbe8:	0800bc63 	.word	0x0800bc63
 800bbec:	0800bc63 	.word	0x0800bc63
 800bbf0:	0800bc63 	.word	0x0800bc63
 800bbf4:	0800bc63 	.word	0x0800bc63
 800bbf8:	0800bc63 	.word	0x0800bc63
 800bbfc:	0800bc63 	.word	0x0800bc63
 800bc00:	0800bc63 	.word	0x0800bc63
 800bc04:	2b6e      	cmp	r3, #110	@ 0x6e
 800bc06:	d809      	bhi.n	800bc1c <_scanf_float+0x138>
 800bc08:	2b60      	cmp	r3, #96	@ 0x60
 800bc0a:	d8b2      	bhi.n	800bb72 <_scanf_float+0x8e>
 800bc0c:	2b54      	cmp	r3, #84	@ 0x54
 800bc0e:	d07b      	beq.n	800bd08 <_scanf_float+0x224>
 800bc10:	2b59      	cmp	r3, #89	@ 0x59
 800bc12:	d199      	bne.n	800bb48 <_scanf_float+0x64>
 800bc14:	2d07      	cmp	r5, #7
 800bc16:	d197      	bne.n	800bb48 <_scanf_float+0x64>
 800bc18:	2508      	movs	r5, #8
 800bc1a:	e02c      	b.n	800bc76 <_scanf_float+0x192>
 800bc1c:	2b74      	cmp	r3, #116	@ 0x74
 800bc1e:	d073      	beq.n	800bd08 <_scanf_float+0x224>
 800bc20:	2b79      	cmp	r3, #121	@ 0x79
 800bc22:	e7f6      	b.n	800bc12 <_scanf_float+0x12e>
 800bc24:	6821      	ldr	r1, [r4, #0]
 800bc26:	05c8      	lsls	r0, r1, #23
 800bc28:	d51b      	bpl.n	800bc62 <_scanf_float+0x17e>
 800bc2a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bc2e:	6021      	str	r1, [r4, #0]
 800bc30:	f109 0901 	add.w	r9, r9, #1
 800bc34:	f1bb 0f00 	cmp.w	fp, #0
 800bc38:	d003      	beq.n	800bc42 <_scanf_float+0x15e>
 800bc3a:	3201      	adds	r2, #1
 800bc3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc40:	60a2      	str	r2, [r4, #8]
 800bc42:	68a3      	ldr	r3, [r4, #8]
 800bc44:	3b01      	subs	r3, #1
 800bc46:	60a3      	str	r3, [r4, #8]
 800bc48:	6923      	ldr	r3, [r4, #16]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	6123      	str	r3, [r4, #16]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	3b01      	subs	r3, #1
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	607b      	str	r3, [r7, #4]
 800bc56:	f340 8087 	ble.w	800bd68 <_scanf_float+0x284>
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	603b      	str	r3, [r7, #0]
 800bc60:	e765      	b.n	800bb2e <_scanf_float+0x4a>
 800bc62:	eb1a 0105 	adds.w	r1, sl, r5
 800bc66:	f47f af6f 	bne.w	800bb48 <_scanf_float+0x64>
 800bc6a:	6822      	ldr	r2, [r4, #0]
 800bc6c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bc70:	6022      	str	r2, [r4, #0]
 800bc72:	460d      	mov	r5, r1
 800bc74:	468a      	mov	sl, r1
 800bc76:	f806 3b01 	strb.w	r3, [r6], #1
 800bc7a:	e7e2      	b.n	800bc42 <_scanf_float+0x15e>
 800bc7c:	6822      	ldr	r2, [r4, #0]
 800bc7e:	0610      	lsls	r0, r2, #24
 800bc80:	f57f af62 	bpl.w	800bb48 <_scanf_float+0x64>
 800bc84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bc88:	6022      	str	r2, [r4, #0]
 800bc8a:	e7f4      	b.n	800bc76 <_scanf_float+0x192>
 800bc8c:	f1ba 0f00 	cmp.w	sl, #0
 800bc90:	d10e      	bne.n	800bcb0 <_scanf_float+0x1cc>
 800bc92:	f1b9 0f00 	cmp.w	r9, #0
 800bc96:	d10e      	bne.n	800bcb6 <_scanf_float+0x1d2>
 800bc98:	6822      	ldr	r2, [r4, #0]
 800bc9a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bc9e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bca2:	d108      	bne.n	800bcb6 <_scanf_float+0x1d2>
 800bca4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bca8:	6022      	str	r2, [r4, #0]
 800bcaa:	f04f 0a01 	mov.w	sl, #1
 800bcae:	e7e2      	b.n	800bc76 <_scanf_float+0x192>
 800bcb0:	f1ba 0f02 	cmp.w	sl, #2
 800bcb4:	d055      	beq.n	800bd62 <_scanf_float+0x27e>
 800bcb6:	2d01      	cmp	r5, #1
 800bcb8:	d002      	beq.n	800bcc0 <_scanf_float+0x1dc>
 800bcba:	2d04      	cmp	r5, #4
 800bcbc:	f47f af44 	bne.w	800bb48 <_scanf_float+0x64>
 800bcc0:	3501      	adds	r5, #1
 800bcc2:	b2ed      	uxtb	r5, r5
 800bcc4:	e7d7      	b.n	800bc76 <_scanf_float+0x192>
 800bcc6:	f1ba 0f01 	cmp.w	sl, #1
 800bcca:	f47f af3d 	bne.w	800bb48 <_scanf_float+0x64>
 800bcce:	f04f 0a02 	mov.w	sl, #2
 800bcd2:	e7d0      	b.n	800bc76 <_scanf_float+0x192>
 800bcd4:	b97d      	cbnz	r5, 800bcf6 <_scanf_float+0x212>
 800bcd6:	f1b9 0f00 	cmp.w	r9, #0
 800bcda:	f47f af38 	bne.w	800bb4e <_scanf_float+0x6a>
 800bcde:	6822      	ldr	r2, [r4, #0]
 800bce0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bce4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bce8:	f040 8108 	bne.w	800befc <_scanf_float+0x418>
 800bcec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bcf0:	6022      	str	r2, [r4, #0]
 800bcf2:	2501      	movs	r5, #1
 800bcf4:	e7bf      	b.n	800bc76 <_scanf_float+0x192>
 800bcf6:	2d03      	cmp	r5, #3
 800bcf8:	d0e2      	beq.n	800bcc0 <_scanf_float+0x1dc>
 800bcfa:	2d05      	cmp	r5, #5
 800bcfc:	e7de      	b.n	800bcbc <_scanf_float+0x1d8>
 800bcfe:	2d02      	cmp	r5, #2
 800bd00:	f47f af22 	bne.w	800bb48 <_scanf_float+0x64>
 800bd04:	2503      	movs	r5, #3
 800bd06:	e7b6      	b.n	800bc76 <_scanf_float+0x192>
 800bd08:	2d06      	cmp	r5, #6
 800bd0a:	f47f af1d 	bne.w	800bb48 <_scanf_float+0x64>
 800bd0e:	2507      	movs	r5, #7
 800bd10:	e7b1      	b.n	800bc76 <_scanf_float+0x192>
 800bd12:	6822      	ldr	r2, [r4, #0]
 800bd14:	0591      	lsls	r1, r2, #22
 800bd16:	f57f af17 	bpl.w	800bb48 <_scanf_float+0x64>
 800bd1a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bd1e:	6022      	str	r2, [r4, #0]
 800bd20:	f8cd 9008 	str.w	r9, [sp, #8]
 800bd24:	e7a7      	b.n	800bc76 <_scanf_float+0x192>
 800bd26:	6822      	ldr	r2, [r4, #0]
 800bd28:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bd2c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bd30:	d006      	beq.n	800bd40 <_scanf_float+0x25c>
 800bd32:	0550      	lsls	r0, r2, #21
 800bd34:	f57f af08 	bpl.w	800bb48 <_scanf_float+0x64>
 800bd38:	f1b9 0f00 	cmp.w	r9, #0
 800bd3c:	f000 80de 	beq.w	800befc <_scanf_float+0x418>
 800bd40:	0591      	lsls	r1, r2, #22
 800bd42:	bf58      	it	pl
 800bd44:	9902      	ldrpl	r1, [sp, #8]
 800bd46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bd4a:	bf58      	it	pl
 800bd4c:	eba9 0101 	subpl.w	r1, r9, r1
 800bd50:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bd54:	bf58      	it	pl
 800bd56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bd5a:	6022      	str	r2, [r4, #0]
 800bd5c:	f04f 0900 	mov.w	r9, #0
 800bd60:	e789      	b.n	800bc76 <_scanf_float+0x192>
 800bd62:	f04f 0a03 	mov.w	sl, #3
 800bd66:	e786      	b.n	800bc76 <_scanf_float+0x192>
 800bd68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bd6c:	4639      	mov	r1, r7
 800bd6e:	4640      	mov	r0, r8
 800bd70:	4798      	blx	r3
 800bd72:	2800      	cmp	r0, #0
 800bd74:	f43f aedb 	beq.w	800bb2e <_scanf_float+0x4a>
 800bd78:	e6e6      	b.n	800bb48 <_scanf_float+0x64>
 800bd7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd82:	463a      	mov	r2, r7
 800bd84:	4640      	mov	r0, r8
 800bd86:	4798      	blx	r3
 800bd88:	6923      	ldr	r3, [r4, #16]
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	6123      	str	r3, [r4, #16]
 800bd8e:	e6e8      	b.n	800bb62 <_scanf_float+0x7e>
 800bd90:	1e6b      	subs	r3, r5, #1
 800bd92:	2b06      	cmp	r3, #6
 800bd94:	d824      	bhi.n	800bde0 <_scanf_float+0x2fc>
 800bd96:	2d02      	cmp	r5, #2
 800bd98:	d836      	bhi.n	800be08 <_scanf_float+0x324>
 800bd9a:	9b01      	ldr	r3, [sp, #4]
 800bd9c:	429e      	cmp	r6, r3
 800bd9e:	f67f aee4 	bls.w	800bb6a <_scanf_float+0x86>
 800bda2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bda6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bdaa:	463a      	mov	r2, r7
 800bdac:	4640      	mov	r0, r8
 800bdae:	4798      	blx	r3
 800bdb0:	6923      	ldr	r3, [r4, #16]
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	6123      	str	r3, [r4, #16]
 800bdb6:	e7f0      	b.n	800bd9a <_scanf_float+0x2b6>
 800bdb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bdbc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bdc0:	463a      	mov	r2, r7
 800bdc2:	4640      	mov	r0, r8
 800bdc4:	4798      	blx	r3
 800bdc6:	6923      	ldr	r3, [r4, #16]
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	6123      	str	r3, [r4, #16]
 800bdcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdd0:	fa5f fa8a 	uxtb.w	sl, sl
 800bdd4:	f1ba 0f02 	cmp.w	sl, #2
 800bdd8:	d1ee      	bne.n	800bdb8 <_scanf_float+0x2d4>
 800bdda:	3d03      	subs	r5, #3
 800bddc:	b2ed      	uxtb	r5, r5
 800bdde:	1b76      	subs	r6, r6, r5
 800bde0:	6823      	ldr	r3, [r4, #0]
 800bde2:	05da      	lsls	r2, r3, #23
 800bde4:	d530      	bpl.n	800be48 <_scanf_float+0x364>
 800bde6:	055b      	lsls	r3, r3, #21
 800bde8:	d511      	bpl.n	800be0e <_scanf_float+0x32a>
 800bdea:	9b01      	ldr	r3, [sp, #4]
 800bdec:	429e      	cmp	r6, r3
 800bdee:	f67f aebc 	bls.w	800bb6a <_scanf_float+0x86>
 800bdf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bdf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bdfa:	463a      	mov	r2, r7
 800bdfc:	4640      	mov	r0, r8
 800bdfe:	4798      	blx	r3
 800be00:	6923      	ldr	r3, [r4, #16]
 800be02:	3b01      	subs	r3, #1
 800be04:	6123      	str	r3, [r4, #16]
 800be06:	e7f0      	b.n	800bdea <_scanf_float+0x306>
 800be08:	46aa      	mov	sl, r5
 800be0a:	46b3      	mov	fp, r6
 800be0c:	e7de      	b.n	800bdcc <_scanf_float+0x2e8>
 800be0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800be12:	6923      	ldr	r3, [r4, #16]
 800be14:	2965      	cmp	r1, #101	@ 0x65
 800be16:	f103 33ff 	add.w	r3, r3, #4294967295
 800be1a:	f106 35ff 	add.w	r5, r6, #4294967295
 800be1e:	6123      	str	r3, [r4, #16]
 800be20:	d00c      	beq.n	800be3c <_scanf_float+0x358>
 800be22:	2945      	cmp	r1, #69	@ 0x45
 800be24:	d00a      	beq.n	800be3c <_scanf_float+0x358>
 800be26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800be2a:	463a      	mov	r2, r7
 800be2c:	4640      	mov	r0, r8
 800be2e:	4798      	blx	r3
 800be30:	6923      	ldr	r3, [r4, #16]
 800be32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800be36:	3b01      	subs	r3, #1
 800be38:	1eb5      	subs	r5, r6, #2
 800be3a:	6123      	str	r3, [r4, #16]
 800be3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800be40:	463a      	mov	r2, r7
 800be42:	4640      	mov	r0, r8
 800be44:	4798      	blx	r3
 800be46:	462e      	mov	r6, r5
 800be48:	6822      	ldr	r2, [r4, #0]
 800be4a:	f012 0210 	ands.w	r2, r2, #16
 800be4e:	d001      	beq.n	800be54 <_scanf_float+0x370>
 800be50:	2000      	movs	r0, #0
 800be52:	e68b      	b.n	800bb6c <_scanf_float+0x88>
 800be54:	7032      	strb	r2, [r6, #0]
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800be5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be60:	d11c      	bne.n	800be9c <_scanf_float+0x3b8>
 800be62:	9b02      	ldr	r3, [sp, #8]
 800be64:	454b      	cmp	r3, r9
 800be66:	eba3 0209 	sub.w	r2, r3, r9
 800be6a:	d123      	bne.n	800beb4 <_scanf_float+0x3d0>
 800be6c:	9901      	ldr	r1, [sp, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	4640      	mov	r0, r8
 800be72:	f002 fbf9 	bl	800e668 <_strtod_r>
 800be76:	9b03      	ldr	r3, [sp, #12]
 800be78:	6821      	ldr	r1, [r4, #0]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f011 0f02 	tst.w	r1, #2
 800be80:	ec57 6b10 	vmov	r6, r7, d0
 800be84:	f103 0204 	add.w	r2, r3, #4
 800be88:	d01f      	beq.n	800beca <_scanf_float+0x3e6>
 800be8a:	9903      	ldr	r1, [sp, #12]
 800be8c:	600a      	str	r2, [r1, #0]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	e9c3 6700 	strd	r6, r7, [r3]
 800be94:	68e3      	ldr	r3, [r4, #12]
 800be96:	3301      	adds	r3, #1
 800be98:	60e3      	str	r3, [r4, #12]
 800be9a:	e7d9      	b.n	800be50 <_scanf_float+0x36c>
 800be9c:	9b04      	ldr	r3, [sp, #16]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d0e4      	beq.n	800be6c <_scanf_float+0x388>
 800bea2:	9905      	ldr	r1, [sp, #20]
 800bea4:	230a      	movs	r3, #10
 800bea6:	3101      	adds	r1, #1
 800bea8:	4640      	mov	r0, r8
 800beaa:	f002 fc5d 	bl	800e768 <_strtol_r>
 800beae:	9b04      	ldr	r3, [sp, #16]
 800beb0:	9e05      	ldr	r6, [sp, #20]
 800beb2:	1ac2      	subs	r2, r0, r3
 800beb4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800beb8:	429e      	cmp	r6, r3
 800beba:	bf28      	it	cs
 800bebc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bec0:	4910      	ldr	r1, [pc, #64]	@ (800bf04 <_scanf_float+0x420>)
 800bec2:	4630      	mov	r0, r6
 800bec4:	f000 f8e4 	bl	800c090 <siprintf>
 800bec8:	e7d0      	b.n	800be6c <_scanf_float+0x388>
 800beca:	f011 0f04 	tst.w	r1, #4
 800bece:	9903      	ldr	r1, [sp, #12]
 800bed0:	600a      	str	r2, [r1, #0]
 800bed2:	d1dc      	bne.n	800be8e <_scanf_float+0x3aa>
 800bed4:	681d      	ldr	r5, [r3, #0]
 800bed6:	4632      	mov	r2, r6
 800bed8:	463b      	mov	r3, r7
 800beda:	4630      	mov	r0, r6
 800bedc:	4639      	mov	r1, r7
 800bede:	f7f4 fe3d 	bl	8000b5c <__aeabi_dcmpun>
 800bee2:	b128      	cbz	r0, 800bef0 <_scanf_float+0x40c>
 800bee4:	4808      	ldr	r0, [pc, #32]	@ (800bf08 <_scanf_float+0x424>)
 800bee6:	f000 f9b7 	bl	800c258 <nanf>
 800beea:	ed85 0a00 	vstr	s0, [r5]
 800beee:	e7d1      	b.n	800be94 <_scanf_float+0x3b0>
 800bef0:	4630      	mov	r0, r6
 800bef2:	4639      	mov	r1, r7
 800bef4:	f7f4 fe90 	bl	8000c18 <__aeabi_d2f>
 800bef8:	6028      	str	r0, [r5, #0]
 800befa:	e7cb      	b.n	800be94 <_scanf_float+0x3b0>
 800befc:	f04f 0900 	mov.w	r9, #0
 800bf00:	e629      	b.n	800bb56 <_scanf_float+0x72>
 800bf02:	bf00      	nop
 800bf04:	0800fba4 	.word	0x0800fba4
 800bf08:	0800ff3d 	.word	0x0800ff3d

0800bf0c <std>:
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	b510      	push	{r4, lr}
 800bf10:	4604      	mov	r4, r0
 800bf12:	e9c0 3300 	strd	r3, r3, [r0]
 800bf16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf1a:	6083      	str	r3, [r0, #8]
 800bf1c:	8181      	strh	r1, [r0, #12]
 800bf1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf20:	81c2      	strh	r2, [r0, #14]
 800bf22:	6183      	str	r3, [r0, #24]
 800bf24:	4619      	mov	r1, r3
 800bf26:	2208      	movs	r2, #8
 800bf28:	305c      	adds	r0, #92	@ 0x5c
 800bf2a:	f000 f914 	bl	800c156 <memset>
 800bf2e:	4b0d      	ldr	r3, [pc, #52]	@ (800bf64 <std+0x58>)
 800bf30:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf32:	4b0d      	ldr	r3, [pc, #52]	@ (800bf68 <std+0x5c>)
 800bf34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf36:	4b0d      	ldr	r3, [pc, #52]	@ (800bf6c <std+0x60>)
 800bf38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf70 <std+0x64>)
 800bf3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bf74 <std+0x68>)
 800bf40:	6224      	str	r4, [r4, #32]
 800bf42:	429c      	cmp	r4, r3
 800bf44:	d006      	beq.n	800bf54 <std+0x48>
 800bf46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf4a:	4294      	cmp	r4, r2
 800bf4c:	d002      	beq.n	800bf54 <std+0x48>
 800bf4e:	33d0      	adds	r3, #208	@ 0xd0
 800bf50:	429c      	cmp	r4, r3
 800bf52:	d105      	bne.n	800bf60 <std+0x54>
 800bf54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf5c:	f000 b978 	b.w	800c250 <__retarget_lock_init_recursive>
 800bf60:	bd10      	pop	{r4, pc}
 800bf62:	bf00      	nop
 800bf64:	0800c0d1 	.word	0x0800c0d1
 800bf68:	0800c0f3 	.word	0x0800c0f3
 800bf6c:	0800c12b 	.word	0x0800c12b
 800bf70:	0800c14f 	.word	0x0800c14f
 800bf74:	20000a60 	.word	0x20000a60

0800bf78 <stdio_exit_handler>:
 800bf78:	4a02      	ldr	r2, [pc, #8]	@ (800bf84 <stdio_exit_handler+0xc>)
 800bf7a:	4903      	ldr	r1, [pc, #12]	@ (800bf88 <stdio_exit_handler+0x10>)
 800bf7c:	4803      	ldr	r0, [pc, #12]	@ (800bf8c <stdio_exit_handler+0x14>)
 800bf7e:	f000 b869 	b.w	800c054 <_fwalk_sglue>
 800bf82:	bf00      	nop
 800bf84:	2000000c 	.word	0x2000000c
 800bf88:	0800eb25 	.word	0x0800eb25
 800bf8c:	2000001c 	.word	0x2000001c

0800bf90 <cleanup_stdio>:
 800bf90:	6841      	ldr	r1, [r0, #4]
 800bf92:	4b0c      	ldr	r3, [pc, #48]	@ (800bfc4 <cleanup_stdio+0x34>)
 800bf94:	4299      	cmp	r1, r3
 800bf96:	b510      	push	{r4, lr}
 800bf98:	4604      	mov	r4, r0
 800bf9a:	d001      	beq.n	800bfa0 <cleanup_stdio+0x10>
 800bf9c:	f002 fdc2 	bl	800eb24 <_fflush_r>
 800bfa0:	68a1      	ldr	r1, [r4, #8]
 800bfa2:	4b09      	ldr	r3, [pc, #36]	@ (800bfc8 <cleanup_stdio+0x38>)
 800bfa4:	4299      	cmp	r1, r3
 800bfa6:	d002      	beq.n	800bfae <cleanup_stdio+0x1e>
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f002 fdbb 	bl	800eb24 <_fflush_r>
 800bfae:	68e1      	ldr	r1, [r4, #12]
 800bfb0:	4b06      	ldr	r3, [pc, #24]	@ (800bfcc <cleanup_stdio+0x3c>)
 800bfb2:	4299      	cmp	r1, r3
 800bfb4:	d004      	beq.n	800bfc0 <cleanup_stdio+0x30>
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfbc:	f002 bdb2 	b.w	800eb24 <_fflush_r>
 800bfc0:	bd10      	pop	{r4, pc}
 800bfc2:	bf00      	nop
 800bfc4:	20000a60 	.word	0x20000a60
 800bfc8:	20000ac8 	.word	0x20000ac8
 800bfcc:	20000b30 	.word	0x20000b30

0800bfd0 <global_stdio_init.part.0>:
 800bfd0:	b510      	push	{r4, lr}
 800bfd2:	4b0b      	ldr	r3, [pc, #44]	@ (800c000 <global_stdio_init.part.0+0x30>)
 800bfd4:	4c0b      	ldr	r4, [pc, #44]	@ (800c004 <global_stdio_init.part.0+0x34>)
 800bfd6:	4a0c      	ldr	r2, [pc, #48]	@ (800c008 <global_stdio_init.part.0+0x38>)
 800bfd8:	601a      	str	r2, [r3, #0]
 800bfda:	4620      	mov	r0, r4
 800bfdc:	2200      	movs	r2, #0
 800bfde:	2104      	movs	r1, #4
 800bfe0:	f7ff ff94 	bl	800bf0c <std>
 800bfe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bfe8:	2201      	movs	r2, #1
 800bfea:	2109      	movs	r1, #9
 800bfec:	f7ff ff8e 	bl	800bf0c <std>
 800bff0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bff4:	2202      	movs	r2, #2
 800bff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bffa:	2112      	movs	r1, #18
 800bffc:	f7ff bf86 	b.w	800bf0c <std>
 800c000:	20000b98 	.word	0x20000b98
 800c004:	20000a60 	.word	0x20000a60
 800c008:	0800bf79 	.word	0x0800bf79

0800c00c <__sfp_lock_acquire>:
 800c00c:	4801      	ldr	r0, [pc, #4]	@ (800c014 <__sfp_lock_acquire+0x8>)
 800c00e:	f000 b920 	b.w	800c252 <__retarget_lock_acquire_recursive>
 800c012:	bf00      	nop
 800c014:	20000ba1 	.word	0x20000ba1

0800c018 <__sfp_lock_release>:
 800c018:	4801      	ldr	r0, [pc, #4]	@ (800c020 <__sfp_lock_release+0x8>)
 800c01a:	f000 b91b 	b.w	800c254 <__retarget_lock_release_recursive>
 800c01e:	bf00      	nop
 800c020:	20000ba1 	.word	0x20000ba1

0800c024 <__sinit>:
 800c024:	b510      	push	{r4, lr}
 800c026:	4604      	mov	r4, r0
 800c028:	f7ff fff0 	bl	800c00c <__sfp_lock_acquire>
 800c02c:	6a23      	ldr	r3, [r4, #32]
 800c02e:	b11b      	cbz	r3, 800c038 <__sinit+0x14>
 800c030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c034:	f7ff bff0 	b.w	800c018 <__sfp_lock_release>
 800c038:	4b04      	ldr	r3, [pc, #16]	@ (800c04c <__sinit+0x28>)
 800c03a:	6223      	str	r3, [r4, #32]
 800c03c:	4b04      	ldr	r3, [pc, #16]	@ (800c050 <__sinit+0x2c>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1f5      	bne.n	800c030 <__sinit+0xc>
 800c044:	f7ff ffc4 	bl	800bfd0 <global_stdio_init.part.0>
 800c048:	e7f2      	b.n	800c030 <__sinit+0xc>
 800c04a:	bf00      	nop
 800c04c:	0800bf91 	.word	0x0800bf91
 800c050:	20000b98 	.word	0x20000b98

0800c054 <_fwalk_sglue>:
 800c054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c058:	4607      	mov	r7, r0
 800c05a:	4688      	mov	r8, r1
 800c05c:	4614      	mov	r4, r2
 800c05e:	2600      	movs	r6, #0
 800c060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c064:	f1b9 0901 	subs.w	r9, r9, #1
 800c068:	d505      	bpl.n	800c076 <_fwalk_sglue+0x22>
 800c06a:	6824      	ldr	r4, [r4, #0]
 800c06c:	2c00      	cmp	r4, #0
 800c06e:	d1f7      	bne.n	800c060 <_fwalk_sglue+0xc>
 800c070:	4630      	mov	r0, r6
 800c072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c076:	89ab      	ldrh	r3, [r5, #12]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d907      	bls.n	800c08c <_fwalk_sglue+0x38>
 800c07c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c080:	3301      	adds	r3, #1
 800c082:	d003      	beq.n	800c08c <_fwalk_sglue+0x38>
 800c084:	4629      	mov	r1, r5
 800c086:	4638      	mov	r0, r7
 800c088:	47c0      	blx	r8
 800c08a:	4306      	orrs	r6, r0
 800c08c:	3568      	adds	r5, #104	@ 0x68
 800c08e:	e7e9      	b.n	800c064 <_fwalk_sglue+0x10>

0800c090 <siprintf>:
 800c090:	b40e      	push	{r1, r2, r3}
 800c092:	b500      	push	{lr}
 800c094:	b09c      	sub	sp, #112	@ 0x70
 800c096:	ab1d      	add	r3, sp, #116	@ 0x74
 800c098:	9002      	str	r0, [sp, #8]
 800c09a:	9006      	str	r0, [sp, #24]
 800c09c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c0a0:	4809      	ldr	r0, [pc, #36]	@ (800c0c8 <siprintf+0x38>)
 800c0a2:	9107      	str	r1, [sp, #28]
 800c0a4:	9104      	str	r1, [sp, #16]
 800c0a6:	4909      	ldr	r1, [pc, #36]	@ (800c0cc <siprintf+0x3c>)
 800c0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ac:	9105      	str	r1, [sp, #20]
 800c0ae:	6800      	ldr	r0, [r0, #0]
 800c0b0:	9301      	str	r3, [sp, #4]
 800c0b2:	a902      	add	r1, sp, #8
 800c0b4:	f002 fbb6 	bl	800e824 <_svfiprintf_r>
 800c0b8:	9b02      	ldr	r3, [sp, #8]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	701a      	strb	r2, [r3, #0]
 800c0be:	b01c      	add	sp, #112	@ 0x70
 800c0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0c4:	b003      	add	sp, #12
 800c0c6:	4770      	bx	lr
 800c0c8:	20000018 	.word	0x20000018
 800c0cc:	ffff0208 	.word	0xffff0208

0800c0d0 <__sread>:
 800c0d0:	b510      	push	{r4, lr}
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0d8:	f000 f86c 	bl	800c1b4 <_read_r>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	bfab      	itete	ge
 800c0e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c0e2:	89a3      	ldrhlt	r3, [r4, #12]
 800c0e4:	181b      	addge	r3, r3, r0
 800c0e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c0ea:	bfac      	ite	ge
 800c0ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c0ee:	81a3      	strhlt	r3, [r4, #12]
 800c0f0:	bd10      	pop	{r4, pc}

0800c0f2 <__swrite>:
 800c0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f6:	461f      	mov	r7, r3
 800c0f8:	898b      	ldrh	r3, [r1, #12]
 800c0fa:	05db      	lsls	r3, r3, #23
 800c0fc:	4605      	mov	r5, r0
 800c0fe:	460c      	mov	r4, r1
 800c100:	4616      	mov	r6, r2
 800c102:	d505      	bpl.n	800c110 <__swrite+0x1e>
 800c104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c108:	2302      	movs	r3, #2
 800c10a:	2200      	movs	r2, #0
 800c10c:	f000 f840 	bl	800c190 <_lseek_r>
 800c110:	89a3      	ldrh	r3, [r4, #12]
 800c112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c116:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c11a:	81a3      	strh	r3, [r4, #12]
 800c11c:	4632      	mov	r2, r6
 800c11e:	463b      	mov	r3, r7
 800c120:	4628      	mov	r0, r5
 800c122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c126:	f000 b857 	b.w	800c1d8 <_write_r>

0800c12a <__sseek>:
 800c12a:	b510      	push	{r4, lr}
 800c12c:	460c      	mov	r4, r1
 800c12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c132:	f000 f82d 	bl	800c190 <_lseek_r>
 800c136:	1c43      	adds	r3, r0, #1
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	bf15      	itete	ne
 800c13c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c13e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c142:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c146:	81a3      	strheq	r3, [r4, #12]
 800c148:	bf18      	it	ne
 800c14a:	81a3      	strhne	r3, [r4, #12]
 800c14c:	bd10      	pop	{r4, pc}

0800c14e <__sclose>:
 800c14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c152:	f000 b80d 	b.w	800c170 <_close_r>

0800c156 <memset>:
 800c156:	4402      	add	r2, r0
 800c158:	4603      	mov	r3, r0
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d100      	bne.n	800c160 <memset+0xa>
 800c15e:	4770      	bx	lr
 800c160:	f803 1b01 	strb.w	r1, [r3], #1
 800c164:	e7f9      	b.n	800c15a <memset+0x4>
	...

0800c168 <_localeconv_r>:
 800c168:	4800      	ldr	r0, [pc, #0]	@ (800c16c <_localeconv_r+0x4>)
 800c16a:	4770      	bx	lr
 800c16c:	20000158 	.word	0x20000158

0800c170 <_close_r>:
 800c170:	b538      	push	{r3, r4, r5, lr}
 800c172:	4d06      	ldr	r5, [pc, #24]	@ (800c18c <_close_r+0x1c>)
 800c174:	2300      	movs	r3, #0
 800c176:	4604      	mov	r4, r0
 800c178:	4608      	mov	r0, r1
 800c17a:	602b      	str	r3, [r5, #0]
 800c17c:	f7f7 fa1e 	bl	80035bc <_close>
 800c180:	1c43      	adds	r3, r0, #1
 800c182:	d102      	bne.n	800c18a <_close_r+0x1a>
 800c184:	682b      	ldr	r3, [r5, #0]
 800c186:	b103      	cbz	r3, 800c18a <_close_r+0x1a>
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	bd38      	pop	{r3, r4, r5, pc}
 800c18c:	20000b9c 	.word	0x20000b9c

0800c190 <_lseek_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	4d07      	ldr	r5, [pc, #28]	@ (800c1b0 <_lseek_r+0x20>)
 800c194:	4604      	mov	r4, r0
 800c196:	4608      	mov	r0, r1
 800c198:	4611      	mov	r1, r2
 800c19a:	2200      	movs	r2, #0
 800c19c:	602a      	str	r2, [r5, #0]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	f7f7 fa33 	bl	800360a <_lseek>
 800c1a4:	1c43      	adds	r3, r0, #1
 800c1a6:	d102      	bne.n	800c1ae <_lseek_r+0x1e>
 800c1a8:	682b      	ldr	r3, [r5, #0]
 800c1aa:	b103      	cbz	r3, 800c1ae <_lseek_r+0x1e>
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	bd38      	pop	{r3, r4, r5, pc}
 800c1b0:	20000b9c 	.word	0x20000b9c

0800c1b4 <_read_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4d07      	ldr	r5, [pc, #28]	@ (800c1d4 <_read_r+0x20>)
 800c1b8:	4604      	mov	r4, r0
 800c1ba:	4608      	mov	r0, r1
 800c1bc:	4611      	mov	r1, r2
 800c1be:	2200      	movs	r2, #0
 800c1c0:	602a      	str	r2, [r5, #0]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	f7f7 f9c1 	bl	800354a <_read>
 800c1c8:	1c43      	adds	r3, r0, #1
 800c1ca:	d102      	bne.n	800c1d2 <_read_r+0x1e>
 800c1cc:	682b      	ldr	r3, [r5, #0]
 800c1ce:	b103      	cbz	r3, 800c1d2 <_read_r+0x1e>
 800c1d0:	6023      	str	r3, [r4, #0]
 800c1d2:	bd38      	pop	{r3, r4, r5, pc}
 800c1d4:	20000b9c 	.word	0x20000b9c

0800c1d8 <_write_r>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	4d07      	ldr	r5, [pc, #28]	@ (800c1f8 <_write_r+0x20>)
 800c1dc:	4604      	mov	r4, r0
 800c1de:	4608      	mov	r0, r1
 800c1e0:	4611      	mov	r1, r2
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	602a      	str	r2, [r5, #0]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	f7f7 f9cc 	bl	8003584 <_write>
 800c1ec:	1c43      	adds	r3, r0, #1
 800c1ee:	d102      	bne.n	800c1f6 <_write_r+0x1e>
 800c1f0:	682b      	ldr	r3, [r5, #0]
 800c1f2:	b103      	cbz	r3, 800c1f6 <_write_r+0x1e>
 800c1f4:	6023      	str	r3, [r4, #0]
 800c1f6:	bd38      	pop	{r3, r4, r5, pc}
 800c1f8:	20000b9c 	.word	0x20000b9c

0800c1fc <__errno>:
 800c1fc:	4b01      	ldr	r3, [pc, #4]	@ (800c204 <__errno+0x8>)
 800c1fe:	6818      	ldr	r0, [r3, #0]
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	20000018 	.word	0x20000018

0800c208 <__libc_init_array>:
 800c208:	b570      	push	{r4, r5, r6, lr}
 800c20a:	4d0d      	ldr	r5, [pc, #52]	@ (800c240 <__libc_init_array+0x38>)
 800c20c:	4c0d      	ldr	r4, [pc, #52]	@ (800c244 <__libc_init_array+0x3c>)
 800c20e:	1b64      	subs	r4, r4, r5
 800c210:	10a4      	asrs	r4, r4, #2
 800c212:	2600      	movs	r6, #0
 800c214:	42a6      	cmp	r6, r4
 800c216:	d109      	bne.n	800c22c <__libc_init_array+0x24>
 800c218:	4d0b      	ldr	r5, [pc, #44]	@ (800c248 <__libc_init_array+0x40>)
 800c21a:	4c0c      	ldr	r4, [pc, #48]	@ (800c24c <__libc_init_array+0x44>)
 800c21c:	f003 fb72 	bl	800f904 <_init>
 800c220:	1b64      	subs	r4, r4, r5
 800c222:	10a4      	asrs	r4, r4, #2
 800c224:	2600      	movs	r6, #0
 800c226:	42a6      	cmp	r6, r4
 800c228:	d105      	bne.n	800c236 <__libc_init_array+0x2e>
 800c22a:	bd70      	pop	{r4, r5, r6, pc}
 800c22c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c230:	4798      	blx	r3
 800c232:	3601      	adds	r6, #1
 800c234:	e7ee      	b.n	800c214 <__libc_init_array+0xc>
 800c236:	f855 3b04 	ldr.w	r3, [r5], #4
 800c23a:	4798      	blx	r3
 800c23c:	3601      	adds	r6, #1
 800c23e:	e7f2      	b.n	800c226 <__libc_init_array+0x1e>
 800c240:	0800ffa8 	.word	0x0800ffa8
 800c244:	0800ffa8 	.word	0x0800ffa8
 800c248:	0800ffa8 	.word	0x0800ffa8
 800c24c:	0800ffac 	.word	0x0800ffac

0800c250 <__retarget_lock_init_recursive>:
 800c250:	4770      	bx	lr

0800c252 <__retarget_lock_acquire_recursive>:
 800c252:	4770      	bx	lr

0800c254 <__retarget_lock_release_recursive>:
 800c254:	4770      	bx	lr
	...

0800c258 <nanf>:
 800c258:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c260 <nanf+0x8>
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	7fc00000 	.word	0x7fc00000

0800c264 <quorem>:
 800c264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c268:	6903      	ldr	r3, [r0, #16]
 800c26a:	690c      	ldr	r4, [r1, #16]
 800c26c:	42a3      	cmp	r3, r4
 800c26e:	4607      	mov	r7, r0
 800c270:	db7e      	blt.n	800c370 <quorem+0x10c>
 800c272:	3c01      	subs	r4, #1
 800c274:	f101 0814 	add.w	r8, r1, #20
 800c278:	00a3      	lsls	r3, r4, #2
 800c27a:	f100 0514 	add.w	r5, r0, #20
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c284:	9301      	str	r3, [sp, #4]
 800c286:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c28a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c28e:	3301      	adds	r3, #1
 800c290:	429a      	cmp	r2, r3
 800c292:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c296:	fbb2 f6f3 	udiv	r6, r2, r3
 800c29a:	d32e      	bcc.n	800c2fa <quorem+0x96>
 800c29c:	f04f 0a00 	mov.w	sl, #0
 800c2a0:	46c4      	mov	ip, r8
 800c2a2:	46ae      	mov	lr, r5
 800c2a4:	46d3      	mov	fp, sl
 800c2a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c2aa:	b298      	uxth	r0, r3
 800c2ac:	fb06 a000 	mla	r0, r6, r0, sl
 800c2b0:	0c02      	lsrs	r2, r0, #16
 800c2b2:	0c1b      	lsrs	r3, r3, #16
 800c2b4:	fb06 2303 	mla	r3, r6, r3, r2
 800c2b8:	f8de 2000 	ldr.w	r2, [lr]
 800c2bc:	b280      	uxth	r0, r0
 800c2be:	b292      	uxth	r2, r2
 800c2c0:	1a12      	subs	r2, r2, r0
 800c2c2:	445a      	add	r2, fp
 800c2c4:	f8de 0000 	ldr.w	r0, [lr]
 800c2c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c2d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c2d6:	b292      	uxth	r2, r2
 800c2d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c2dc:	45e1      	cmp	r9, ip
 800c2de:	f84e 2b04 	str.w	r2, [lr], #4
 800c2e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c2e6:	d2de      	bcs.n	800c2a6 <quorem+0x42>
 800c2e8:	9b00      	ldr	r3, [sp, #0]
 800c2ea:	58eb      	ldr	r3, [r5, r3]
 800c2ec:	b92b      	cbnz	r3, 800c2fa <quorem+0x96>
 800c2ee:	9b01      	ldr	r3, [sp, #4]
 800c2f0:	3b04      	subs	r3, #4
 800c2f2:	429d      	cmp	r5, r3
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	d32f      	bcc.n	800c358 <quorem+0xf4>
 800c2f8:	613c      	str	r4, [r7, #16]
 800c2fa:	4638      	mov	r0, r7
 800c2fc:	f001 f9c4 	bl	800d688 <__mcmp>
 800c300:	2800      	cmp	r0, #0
 800c302:	db25      	blt.n	800c350 <quorem+0xec>
 800c304:	4629      	mov	r1, r5
 800c306:	2000      	movs	r0, #0
 800c308:	f858 2b04 	ldr.w	r2, [r8], #4
 800c30c:	f8d1 c000 	ldr.w	ip, [r1]
 800c310:	fa1f fe82 	uxth.w	lr, r2
 800c314:	fa1f f38c 	uxth.w	r3, ip
 800c318:	eba3 030e 	sub.w	r3, r3, lr
 800c31c:	4403      	add	r3, r0
 800c31e:	0c12      	lsrs	r2, r2, #16
 800c320:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c324:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c328:	b29b      	uxth	r3, r3
 800c32a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c32e:	45c1      	cmp	r9, r8
 800c330:	f841 3b04 	str.w	r3, [r1], #4
 800c334:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c338:	d2e6      	bcs.n	800c308 <quorem+0xa4>
 800c33a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c33e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c342:	b922      	cbnz	r2, 800c34e <quorem+0xea>
 800c344:	3b04      	subs	r3, #4
 800c346:	429d      	cmp	r5, r3
 800c348:	461a      	mov	r2, r3
 800c34a:	d30b      	bcc.n	800c364 <quorem+0x100>
 800c34c:	613c      	str	r4, [r7, #16]
 800c34e:	3601      	adds	r6, #1
 800c350:	4630      	mov	r0, r6
 800c352:	b003      	add	sp, #12
 800c354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c358:	6812      	ldr	r2, [r2, #0]
 800c35a:	3b04      	subs	r3, #4
 800c35c:	2a00      	cmp	r2, #0
 800c35e:	d1cb      	bne.n	800c2f8 <quorem+0x94>
 800c360:	3c01      	subs	r4, #1
 800c362:	e7c6      	b.n	800c2f2 <quorem+0x8e>
 800c364:	6812      	ldr	r2, [r2, #0]
 800c366:	3b04      	subs	r3, #4
 800c368:	2a00      	cmp	r2, #0
 800c36a:	d1ef      	bne.n	800c34c <quorem+0xe8>
 800c36c:	3c01      	subs	r4, #1
 800c36e:	e7ea      	b.n	800c346 <quorem+0xe2>
 800c370:	2000      	movs	r0, #0
 800c372:	e7ee      	b.n	800c352 <quorem+0xee>
 800c374:	0000      	movs	r0, r0
	...

0800c378 <_dtoa_r>:
 800c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37c:	69c7      	ldr	r7, [r0, #28]
 800c37e:	b099      	sub	sp, #100	@ 0x64
 800c380:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c384:	ec55 4b10 	vmov	r4, r5, d0
 800c388:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c38a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c38c:	4683      	mov	fp, r0
 800c38e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c390:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c392:	b97f      	cbnz	r7, 800c3b4 <_dtoa_r+0x3c>
 800c394:	2010      	movs	r0, #16
 800c396:	f000 fdfd 	bl	800cf94 <malloc>
 800c39a:	4602      	mov	r2, r0
 800c39c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c3a0:	b920      	cbnz	r0, 800c3ac <_dtoa_r+0x34>
 800c3a2:	4ba7      	ldr	r3, [pc, #668]	@ (800c640 <_dtoa_r+0x2c8>)
 800c3a4:	21ef      	movs	r1, #239	@ 0xef
 800c3a6:	48a7      	ldr	r0, [pc, #668]	@ (800c644 <_dtoa_r+0x2cc>)
 800c3a8:	f002 fc36 	bl	800ec18 <__assert_func>
 800c3ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c3b0:	6007      	str	r7, [r0, #0]
 800c3b2:	60c7      	str	r7, [r0, #12]
 800c3b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c3b8:	6819      	ldr	r1, [r3, #0]
 800c3ba:	b159      	cbz	r1, 800c3d4 <_dtoa_r+0x5c>
 800c3bc:	685a      	ldr	r2, [r3, #4]
 800c3be:	604a      	str	r2, [r1, #4]
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	4093      	lsls	r3, r2
 800c3c4:	608b      	str	r3, [r1, #8]
 800c3c6:	4658      	mov	r0, fp
 800c3c8:	f000 feda 	bl	800d180 <_Bfree>
 800c3cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	601a      	str	r2, [r3, #0]
 800c3d4:	1e2b      	subs	r3, r5, #0
 800c3d6:	bfb9      	ittee	lt
 800c3d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c3dc:	9303      	strlt	r3, [sp, #12]
 800c3de:	2300      	movge	r3, #0
 800c3e0:	6033      	strge	r3, [r6, #0]
 800c3e2:	9f03      	ldr	r7, [sp, #12]
 800c3e4:	4b98      	ldr	r3, [pc, #608]	@ (800c648 <_dtoa_r+0x2d0>)
 800c3e6:	bfbc      	itt	lt
 800c3e8:	2201      	movlt	r2, #1
 800c3ea:	6032      	strlt	r2, [r6, #0]
 800c3ec:	43bb      	bics	r3, r7
 800c3ee:	d112      	bne.n	800c416 <_dtoa_r+0x9e>
 800c3f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c3f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c3f6:	6013      	str	r3, [r2, #0]
 800c3f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c3fc:	4323      	orrs	r3, r4
 800c3fe:	f000 854d 	beq.w	800ce9c <_dtoa_r+0xb24>
 800c402:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c404:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c65c <_dtoa_r+0x2e4>
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f000 854f 	beq.w	800ceac <_dtoa_r+0xb34>
 800c40e:	f10a 0303 	add.w	r3, sl, #3
 800c412:	f000 bd49 	b.w	800cea8 <_dtoa_r+0xb30>
 800c416:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c41a:	2200      	movs	r2, #0
 800c41c:	ec51 0b17 	vmov	r0, r1, d7
 800c420:	2300      	movs	r3, #0
 800c422:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c426:	f7f4 fb67 	bl	8000af8 <__aeabi_dcmpeq>
 800c42a:	4680      	mov	r8, r0
 800c42c:	b158      	cbz	r0, 800c446 <_dtoa_r+0xce>
 800c42e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c430:	2301      	movs	r3, #1
 800c432:	6013      	str	r3, [r2, #0]
 800c434:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c436:	b113      	cbz	r3, 800c43e <_dtoa_r+0xc6>
 800c438:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c43a:	4b84      	ldr	r3, [pc, #528]	@ (800c64c <_dtoa_r+0x2d4>)
 800c43c:	6013      	str	r3, [r2, #0]
 800c43e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c660 <_dtoa_r+0x2e8>
 800c442:	f000 bd33 	b.w	800ceac <_dtoa_r+0xb34>
 800c446:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c44a:	aa16      	add	r2, sp, #88	@ 0x58
 800c44c:	a917      	add	r1, sp, #92	@ 0x5c
 800c44e:	4658      	mov	r0, fp
 800c450:	f001 fa3a 	bl	800d8c8 <__d2b>
 800c454:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c458:	4681      	mov	r9, r0
 800c45a:	2e00      	cmp	r6, #0
 800c45c:	d077      	beq.n	800c54e <_dtoa_r+0x1d6>
 800c45e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c460:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c46c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c470:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c474:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c478:	4619      	mov	r1, r3
 800c47a:	2200      	movs	r2, #0
 800c47c:	4b74      	ldr	r3, [pc, #464]	@ (800c650 <_dtoa_r+0x2d8>)
 800c47e:	f7f3 ff1b 	bl	80002b8 <__aeabi_dsub>
 800c482:	a369      	add	r3, pc, #420	@ (adr r3, 800c628 <_dtoa_r+0x2b0>)
 800c484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c488:	f7f4 f8ce 	bl	8000628 <__aeabi_dmul>
 800c48c:	a368      	add	r3, pc, #416	@ (adr r3, 800c630 <_dtoa_r+0x2b8>)
 800c48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c492:	f7f3 ff13 	bl	80002bc <__adddf3>
 800c496:	4604      	mov	r4, r0
 800c498:	4630      	mov	r0, r6
 800c49a:	460d      	mov	r5, r1
 800c49c:	f7f4 f85a 	bl	8000554 <__aeabi_i2d>
 800c4a0:	a365      	add	r3, pc, #404	@ (adr r3, 800c638 <_dtoa_r+0x2c0>)
 800c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a6:	f7f4 f8bf 	bl	8000628 <__aeabi_dmul>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	f7f3 ff03 	bl	80002bc <__adddf3>
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	460d      	mov	r5, r1
 800c4ba:	f7f4 fb65 	bl	8000b88 <__aeabi_d2iz>
 800c4be:	2200      	movs	r2, #0
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	f7f4 fb20 	bl	8000b0c <__aeabi_dcmplt>
 800c4cc:	b140      	cbz	r0, 800c4e0 <_dtoa_r+0x168>
 800c4ce:	4638      	mov	r0, r7
 800c4d0:	f7f4 f840 	bl	8000554 <__aeabi_i2d>
 800c4d4:	4622      	mov	r2, r4
 800c4d6:	462b      	mov	r3, r5
 800c4d8:	f7f4 fb0e 	bl	8000af8 <__aeabi_dcmpeq>
 800c4dc:	b900      	cbnz	r0, 800c4e0 <_dtoa_r+0x168>
 800c4de:	3f01      	subs	r7, #1
 800c4e0:	2f16      	cmp	r7, #22
 800c4e2:	d851      	bhi.n	800c588 <_dtoa_r+0x210>
 800c4e4:	4b5b      	ldr	r3, [pc, #364]	@ (800c654 <_dtoa_r+0x2dc>)
 800c4e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4f2:	f7f4 fb0b 	bl	8000b0c <__aeabi_dcmplt>
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d048      	beq.n	800c58c <_dtoa_r+0x214>
 800c4fa:	3f01      	subs	r7, #1
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	9312      	str	r3, [sp, #72]	@ 0x48
 800c500:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c502:	1b9b      	subs	r3, r3, r6
 800c504:	1e5a      	subs	r2, r3, #1
 800c506:	bf44      	itt	mi
 800c508:	f1c3 0801 	rsbmi	r8, r3, #1
 800c50c:	2300      	movmi	r3, #0
 800c50e:	9208      	str	r2, [sp, #32]
 800c510:	bf54      	ite	pl
 800c512:	f04f 0800 	movpl.w	r8, #0
 800c516:	9308      	strmi	r3, [sp, #32]
 800c518:	2f00      	cmp	r7, #0
 800c51a:	db39      	blt.n	800c590 <_dtoa_r+0x218>
 800c51c:	9b08      	ldr	r3, [sp, #32]
 800c51e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c520:	443b      	add	r3, r7
 800c522:	9308      	str	r3, [sp, #32]
 800c524:	2300      	movs	r3, #0
 800c526:	930a      	str	r3, [sp, #40]	@ 0x28
 800c528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c52a:	2b09      	cmp	r3, #9
 800c52c:	d864      	bhi.n	800c5f8 <_dtoa_r+0x280>
 800c52e:	2b05      	cmp	r3, #5
 800c530:	bfc4      	itt	gt
 800c532:	3b04      	subgt	r3, #4
 800c534:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c538:	f1a3 0302 	sub.w	r3, r3, #2
 800c53c:	bfcc      	ite	gt
 800c53e:	2400      	movgt	r4, #0
 800c540:	2401      	movle	r4, #1
 800c542:	2b03      	cmp	r3, #3
 800c544:	d863      	bhi.n	800c60e <_dtoa_r+0x296>
 800c546:	e8df f003 	tbb	[pc, r3]
 800c54a:	372a      	.short	0x372a
 800c54c:	5535      	.short	0x5535
 800c54e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c552:	441e      	add	r6, r3
 800c554:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c558:	2b20      	cmp	r3, #32
 800c55a:	bfc1      	itttt	gt
 800c55c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c560:	409f      	lslgt	r7, r3
 800c562:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c566:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c56a:	bfd6      	itet	le
 800c56c:	f1c3 0320 	rsble	r3, r3, #32
 800c570:	ea47 0003 	orrgt.w	r0, r7, r3
 800c574:	fa04 f003 	lslle.w	r0, r4, r3
 800c578:	f7f3 ffdc 	bl	8000534 <__aeabi_ui2d>
 800c57c:	2201      	movs	r2, #1
 800c57e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c582:	3e01      	subs	r6, #1
 800c584:	9214      	str	r2, [sp, #80]	@ 0x50
 800c586:	e777      	b.n	800c478 <_dtoa_r+0x100>
 800c588:	2301      	movs	r3, #1
 800c58a:	e7b8      	b.n	800c4fe <_dtoa_r+0x186>
 800c58c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c58e:	e7b7      	b.n	800c500 <_dtoa_r+0x188>
 800c590:	427b      	negs	r3, r7
 800c592:	930a      	str	r3, [sp, #40]	@ 0x28
 800c594:	2300      	movs	r3, #0
 800c596:	eba8 0807 	sub.w	r8, r8, r7
 800c59a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c59c:	e7c4      	b.n	800c528 <_dtoa_r+0x1b0>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	dc35      	bgt.n	800c614 <_dtoa_r+0x29c>
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	9307      	str	r3, [sp, #28]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c5b2:	e00b      	b.n	800c5cc <_dtoa_r+0x254>
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	e7f3      	b.n	800c5a0 <_dtoa_r+0x228>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5be:	18fb      	adds	r3, r7, r3
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	9307      	str	r3, [sp, #28]
 800c5c8:	bfb8      	it	lt
 800c5ca:	2301      	movlt	r3, #1
 800c5cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	2204      	movs	r2, #4
 800c5d4:	f102 0514 	add.w	r5, r2, #20
 800c5d8:	429d      	cmp	r5, r3
 800c5da:	d91f      	bls.n	800c61c <_dtoa_r+0x2a4>
 800c5dc:	6041      	str	r1, [r0, #4]
 800c5de:	4658      	mov	r0, fp
 800c5e0:	f000 fd8e 	bl	800d100 <_Balloc>
 800c5e4:	4682      	mov	sl, r0
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d13c      	bne.n	800c664 <_dtoa_r+0x2ec>
 800c5ea:	4b1b      	ldr	r3, [pc, #108]	@ (800c658 <_dtoa_r+0x2e0>)
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	f240 11af 	movw	r1, #431	@ 0x1af
 800c5f2:	e6d8      	b.n	800c3a6 <_dtoa_r+0x2e>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e7e0      	b.n	800c5ba <_dtoa_r+0x242>
 800c5f8:	2401      	movs	r4, #1
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c600:	f04f 33ff 	mov.w	r3, #4294967295
 800c604:	9300      	str	r3, [sp, #0]
 800c606:	9307      	str	r3, [sp, #28]
 800c608:	2200      	movs	r2, #0
 800c60a:	2312      	movs	r3, #18
 800c60c:	e7d0      	b.n	800c5b0 <_dtoa_r+0x238>
 800c60e:	2301      	movs	r3, #1
 800c610:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c612:	e7f5      	b.n	800c600 <_dtoa_r+0x288>
 800c614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	9307      	str	r3, [sp, #28]
 800c61a:	e7d7      	b.n	800c5cc <_dtoa_r+0x254>
 800c61c:	3101      	adds	r1, #1
 800c61e:	0052      	lsls	r2, r2, #1
 800c620:	e7d8      	b.n	800c5d4 <_dtoa_r+0x25c>
 800c622:	bf00      	nop
 800c624:	f3af 8000 	nop.w
 800c628:	636f4361 	.word	0x636f4361
 800c62c:	3fd287a7 	.word	0x3fd287a7
 800c630:	8b60c8b3 	.word	0x8b60c8b3
 800c634:	3fc68a28 	.word	0x3fc68a28
 800c638:	509f79fb 	.word	0x509f79fb
 800c63c:	3fd34413 	.word	0x3fd34413
 800c640:	0800fbb6 	.word	0x0800fbb6
 800c644:	0800fbcd 	.word	0x0800fbcd
 800c648:	7ff00000 	.word	0x7ff00000
 800c64c:	0800fb81 	.word	0x0800fb81
 800c650:	3ff80000 	.word	0x3ff80000
 800c654:	0800fcc8 	.word	0x0800fcc8
 800c658:	0800fc25 	.word	0x0800fc25
 800c65c:	0800fbb2 	.word	0x0800fbb2
 800c660:	0800fb80 	.word	0x0800fb80
 800c664:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c668:	6018      	str	r0, [r3, #0]
 800c66a:	9b07      	ldr	r3, [sp, #28]
 800c66c:	2b0e      	cmp	r3, #14
 800c66e:	f200 80a4 	bhi.w	800c7ba <_dtoa_r+0x442>
 800c672:	2c00      	cmp	r4, #0
 800c674:	f000 80a1 	beq.w	800c7ba <_dtoa_r+0x442>
 800c678:	2f00      	cmp	r7, #0
 800c67a:	dd33      	ble.n	800c6e4 <_dtoa_r+0x36c>
 800c67c:	4bad      	ldr	r3, [pc, #692]	@ (800c934 <_dtoa_r+0x5bc>)
 800c67e:	f007 020f 	and.w	r2, r7, #15
 800c682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c686:	ed93 7b00 	vldr	d7, [r3]
 800c68a:	05f8      	lsls	r0, r7, #23
 800c68c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c690:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c694:	d516      	bpl.n	800c6c4 <_dtoa_r+0x34c>
 800c696:	4ba8      	ldr	r3, [pc, #672]	@ (800c938 <_dtoa_r+0x5c0>)
 800c698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c69c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6a0:	f7f4 f8ec 	bl	800087c <__aeabi_ddiv>
 800c6a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6a8:	f004 040f 	and.w	r4, r4, #15
 800c6ac:	2603      	movs	r6, #3
 800c6ae:	4da2      	ldr	r5, [pc, #648]	@ (800c938 <_dtoa_r+0x5c0>)
 800c6b0:	b954      	cbnz	r4, 800c6c8 <_dtoa_r+0x350>
 800c6b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ba:	f7f4 f8df 	bl	800087c <__aeabi_ddiv>
 800c6be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6c2:	e028      	b.n	800c716 <_dtoa_r+0x39e>
 800c6c4:	2602      	movs	r6, #2
 800c6c6:	e7f2      	b.n	800c6ae <_dtoa_r+0x336>
 800c6c8:	07e1      	lsls	r1, r4, #31
 800c6ca:	d508      	bpl.n	800c6de <_dtoa_r+0x366>
 800c6cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6d4:	f7f3 ffa8 	bl	8000628 <__aeabi_dmul>
 800c6d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6dc:	3601      	adds	r6, #1
 800c6de:	1064      	asrs	r4, r4, #1
 800c6e0:	3508      	adds	r5, #8
 800c6e2:	e7e5      	b.n	800c6b0 <_dtoa_r+0x338>
 800c6e4:	f000 80d2 	beq.w	800c88c <_dtoa_r+0x514>
 800c6e8:	427c      	negs	r4, r7
 800c6ea:	4b92      	ldr	r3, [pc, #584]	@ (800c934 <_dtoa_r+0x5bc>)
 800c6ec:	4d92      	ldr	r5, [pc, #584]	@ (800c938 <_dtoa_r+0x5c0>)
 800c6ee:	f004 020f 	and.w	r2, r4, #15
 800c6f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6fe:	f7f3 ff93 	bl	8000628 <__aeabi_dmul>
 800c702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c706:	1124      	asrs	r4, r4, #4
 800c708:	2300      	movs	r3, #0
 800c70a:	2602      	movs	r6, #2
 800c70c:	2c00      	cmp	r4, #0
 800c70e:	f040 80b2 	bne.w	800c876 <_dtoa_r+0x4fe>
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1d3      	bne.n	800c6be <_dtoa_r+0x346>
 800c716:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c718:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f000 80b7 	beq.w	800c890 <_dtoa_r+0x518>
 800c722:	4b86      	ldr	r3, [pc, #536]	@ (800c93c <_dtoa_r+0x5c4>)
 800c724:	2200      	movs	r2, #0
 800c726:	4620      	mov	r0, r4
 800c728:	4629      	mov	r1, r5
 800c72a:	f7f4 f9ef 	bl	8000b0c <__aeabi_dcmplt>
 800c72e:	2800      	cmp	r0, #0
 800c730:	f000 80ae 	beq.w	800c890 <_dtoa_r+0x518>
 800c734:	9b07      	ldr	r3, [sp, #28]
 800c736:	2b00      	cmp	r3, #0
 800c738:	f000 80aa 	beq.w	800c890 <_dtoa_r+0x518>
 800c73c:	9b00      	ldr	r3, [sp, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	dd37      	ble.n	800c7b2 <_dtoa_r+0x43a>
 800c742:	1e7b      	subs	r3, r7, #1
 800c744:	9304      	str	r3, [sp, #16]
 800c746:	4620      	mov	r0, r4
 800c748:	4b7d      	ldr	r3, [pc, #500]	@ (800c940 <_dtoa_r+0x5c8>)
 800c74a:	2200      	movs	r2, #0
 800c74c:	4629      	mov	r1, r5
 800c74e:	f7f3 ff6b 	bl	8000628 <__aeabi_dmul>
 800c752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c756:	9c00      	ldr	r4, [sp, #0]
 800c758:	3601      	adds	r6, #1
 800c75a:	4630      	mov	r0, r6
 800c75c:	f7f3 fefa 	bl	8000554 <__aeabi_i2d>
 800c760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c764:	f7f3 ff60 	bl	8000628 <__aeabi_dmul>
 800c768:	4b76      	ldr	r3, [pc, #472]	@ (800c944 <_dtoa_r+0x5cc>)
 800c76a:	2200      	movs	r2, #0
 800c76c:	f7f3 fda6 	bl	80002bc <__adddf3>
 800c770:	4605      	mov	r5, r0
 800c772:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c776:	2c00      	cmp	r4, #0
 800c778:	f040 808d 	bne.w	800c896 <_dtoa_r+0x51e>
 800c77c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c780:	4b71      	ldr	r3, [pc, #452]	@ (800c948 <_dtoa_r+0x5d0>)
 800c782:	2200      	movs	r2, #0
 800c784:	f7f3 fd98 	bl	80002b8 <__aeabi_dsub>
 800c788:	4602      	mov	r2, r0
 800c78a:	460b      	mov	r3, r1
 800c78c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c790:	462a      	mov	r2, r5
 800c792:	4633      	mov	r3, r6
 800c794:	f7f4 f9d8 	bl	8000b48 <__aeabi_dcmpgt>
 800c798:	2800      	cmp	r0, #0
 800c79a:	f040 828b 	bne.w	800ccb4 <_dtoa_r+0x93c>
 800c79e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7a2:	462a      	mov	r2, r5
 800c7a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c7a8:	f7f4 f9b0 	bl	8000b0c <__aeabi_dcmplt>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	f040 8128 	bne.w	800ca02 <_dtoa_r+0x68a>
 800c7b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c7b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c7ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f2c0 815a 	blt.w	800ca76 <_dtoa_r+0x6fe>
 800c7c2:	2f0e      	cmp	r7, #14
 800c7c4:	f300 8157 	bgt.w	800ca76 <_dtoa_r+0x6fe>
 800c7c8:	4b5a      	ldr	r3, [pc, #360]	@ (800c934 <_dtoa_r+0x5bc>)
 800c7ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c7ce:	ed93 7b00 	vldr	d7, [r3]
 800c7d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	ed8d 7b00 	vstr	d7, [sp]
 800c7da:	da03      	bge.n	800c7e4 <_dtoa_r+0x46c>
 800c7dc:	9b07      	ldr	r3, [sp, #28]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f340 8101 	ble.w	800c9e6 <_dtoa_r+0x66e>
 800c7e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c7e8:	4656      	mov	r6, sl
 800c7ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	f7f4 f843 	bl	800087c <__aeabi_ddiv>
 800c7f6:	f7f4 f9c7 	bl	8000b88 <__aeabi_d2iz>
 800c7fa:	4680      	mov	r8, r0
 800c7fc:	f7f3 feaa 	bl	8000554 <__aeabi_i2d>
 800c800:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c804:	f7f3 ff10 	bl	8000628 <__aeabi_dmul>
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	4620      	mov	r0, r4
 800c80e:	4629      	mov	r1, r5
 800c810:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c814:	f7f3 fd50 	bl	80002b8 <__aeabi_dsub>
 800c818:	f806 4b01 	strb.w	r4, [r6], #1
 800c81c:	9d07      	ldr	r5, [sp, #28]
 800c81e:	eba6 040a 	sub.w	r4, r6, sl
 800c822:	42a5      	cmp	r5, r4
 800c824:	4602      	mov	r2, r0
 800c826:	460b      	mov	r3, r1
 800c828:	f040 8117 	bne.w	800ca5a <_dtoa_r+0x6e2>
 800c82c:	f7f3 fd46 	bl	80002bc <__adddf3>
 800c830:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c834:	4604      	mov	r4, r0
 800c836:	460d      	mov	r5, r1
 800c838:	f7f4 f986 	bl	8000b48 <__aeabi_dcmpgt>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	f040 80f9 	bne.w	800ca34 <_dtoa_r+0x6bc>
 800c842:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c846:	4620      	mov	r0, r4
 800c848:	4629      	mov	r1, r5
 800c84a:	f7f4 f955 	bl	8000af8 <__aeabi_dcmpeq>
 800c84e:	b118      	cbz	r0, 800c858 <_dtoa_r+0x4e0>
 800c850:	f018 0f01 	tst.w	r8, #1
 800c854:	f040 80ee 	bne.w	800ca34 <_dtoa_r+0x6bc>
 800c858:	4649      	mov	r1, r9
 800c85a:	4658      	mov	r0, fp
 800c85c:	f000 fc90 	bl	800d180 <_Bfree>
 800c860:	2300      	movs	r3, #0
 800c862:	7033      	strb	r3, [r6, #0]
 800c864:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c866:	3701      	adds	r7, #1
 800c868:	601f      	str	r7, [r3, #0]
 800c86a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 831d 	beq.w	800ceac <_dtoa_r+0xb34>
 800c872:	601e      	str	r6, [r3, #0]
 800c874:	e31a      	b.n	800ceac <_dtoa_r+0xb34>
 800c876:	07e2      	lsls	r2, r4, #31
 800c878:	d505      	bpl.n	800c886 <_dtoa_r+0x50e>
 800c87a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c87e:	f7f3 fed3 	bl	8000628 <__aeabi_dmul>
 800c882:	3601      	adds	r6, #1
 800c884:	2301      	movs	r3, #1
 800c886:	1064      	asrs	r4, r4, #1
 800c888:	3508      	adds	r5, #8
 800c88a:	e73f      	b.n	800c70c <_dtoa_r+0x394>
 800c88c:	2602      	movs	r6, #2
 800c88e:	e742      	b.n	800c716 <_dtoa_r+0x39e>
 800c890:	9c07      	ldr	r4, [sp, #28]
 800c892:	9704      	str	r7, [sp, #16]
 800c894:	e761      	b.n	800c75a <_dtoa_r+0x3e2>
 800c896:	4b27      	ldr	r3, [pc, #156]	@ (800c934 <_dtoa_r+0x5bc>)
 800c898:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c89a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c89e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c8a2:	4454      	add	r4, sl
 800c8a4:	2900      	cmp	r1, #0
 800c8a6:	d053      	beq.n	800c950 <_dtoa_r+0x5d8>
 800c8a8:	4928      	ldr	r1, [pc, #160]	@ (800c94c <_dtoa_r+0x5d4>)
 800c8aa:	2000      	movs	r0, #0
 800c8ac:	f7f3 ffe6 	bl	800087c <__aeabi_ddiv>
 800c8b0:	4633      	mov	r3, r6
 800c8b2:	462a      	mov	r2, r5
 800c8b4:	f7f3 fd00 	bl	80002b8 <__aeabi_dsub>
 800c8b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c8bc:	4656      	mov	r6, sl
 800c8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8c2:	f7f4 f961 	bl	8000b88 <__aeabi_d2iz>
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	f7f3 fe44 	bl	8000554 <__aeabi_i2d>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8d4:	f7f3 fcf0 	bl	80002b8 <__aeabi_dsub>
 800c8d8:	3530      	adds	r5, #48	@ 0x30
 800c8da:	4602      	mov	r2, r0
 800c8dc:	460b      	mov	r3, r1
 800c8de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8e2:	f806 5b01 	strb.w	r5, [r6], #1
 800c8e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c8ea:	f7f4 f90f 	bl	8000b0c <__aeabi_dcmplt>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d171      	bne.n	800c9d6 <_dtoa_r+0x65e>
 800c8f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8f6:	4911      	ldr	r1, [pc, #68]	@ (800c93c <_dtoa_r+0x5c4>)
 800c8f8:	2000      	movs	r0, #0
 800c8fa:	f7f3 fcdd 	bl	80002b8 <__aeabi_dsub>
 800c8fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c902:	f7f4 f903 	bl	8000b0c <__aeabi_dcmplt>
 800c906:	2800      	cmp	r0, #0
 800c908:	f040 8095 	bne.w	800ca36 <_dtoa_r+0x6be>
 800c90c:	42a6      	cmp	r6, r4
 800c90e:	f43f af50 	beq.w	800c7b2 <_dtoa_r+0x43a>
 800c912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c916:	4b0a      	ldr	r3, [pc, #40]	@ (800c940 <_dtoa_r+0x5c8>)
 800c918:	2200      	movs	r2, #0
 800c91a:	f7f3 fe85 	bl	8000628 <__aeabi_dmul>
 800c91e:	4b08      	ldr	r3, [pc, #32]	@ (800c940 <_dtoa_r+0x5c8>)
 800c920:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c924:	2200      	movs	r2, #0
 800c926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c92a:	f7f3 fe7d 	bl	8000628 <__aeabi_dmul>
 800c92e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c932:	e7c4      	b.n	800c8be <_dtoa_r+0x546>
 800c934:	0800fcc8 	.word	0x0800fcc8
 800c938:	0800fca0 	.word	0x0800fca0
 800c93c:	3ff00000 	.word	0x3ff00000
 800c940:	40240000 	.word	0x40240000
 800c944:	401c0000 	.word	0x401c0000
 800c948:	40140000 	.word	0x40140000
 800c94c:	3fe00000 	.word	0x3fe00000
 800c950:	4631      	mov	r1, r6
 800c952:	4628      	mov	r0, r5
 800c954:	f7f3 fe68 	bl	8000628 <__aeabi_dmul>
 800c958:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c95c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c95e:	4656      	mov	r6, sl
 800c960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c964:	f7f4 f910 	bl	8000b88 <__aeabi_d2iz>
 800c968:	4605      	mov	r5, r0
 800c96a:	f7f3 fdf3 	bl	8000554 <__aeabi_i2d>
 800c96e:	4602      	mov	r2, r0
 800c970:	460b      	mov	r3, r1
 800c972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c976:	f7f3 fc9f 	bl	80002b8 <__aeabi_dsub>
 800c97a:	3530      	adds	r5, #48	@ 0x30
 800c97c:	f806 5b01 	strb.w	r5, [r6], #1
 800c980:	4602      	mov	r2, r0
 800c982:	460b      	mov	r3, r1
 800c984:	42a6      	cmp	r6, r4
 800c986:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c98a:	f04f 0200 	mov.w	r2, #0
 800c98e:	d124      	bne.n	800c9da <_dtoa_r+0x662>
 800c990:	4bac      	ldr	r3, [pc, #688]	@ (800cc44 <_dtoa_r+0x8cc>)
 800c992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c996:	f7f3 fc91 	bl	80002bc <__adddf3>
 800c99a:	4602      	mov	r2, r0
 800c99c:	460b      	mov	r3, r1
 800c99e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9a2:	f7f4 f8d1 	bl	8000b48 <__aeabi_dcmpgt>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	d145      	bne.n	800ca36 <_dtoa_r+0x6be>
 800c9aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c9ae:	49a5      	ldr	r1, [pc, #660]	@ (800cc44 <_dtoa_r+0x8cc>)
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	f7f3 fc81 	bl	80002b8 <__aeabi_dsub>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9be:	f7f4 f8a5 	bl	8000b0c <__aeabi_dcmplt>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	f43f aef5 	beq.w	800c7b2 <_dtoa_r+0x43a>
 800c9c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c9ca:	1e73      	subs	r3, r6, #1
 800c9cc:	9315      	str	r3, [sp, #84]	@ 0x54
 800c9ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c9d2:	2b30      	cmp	r3, #48	@ 0x30
 800c9d4:	d0f8      	beq.n	800c9c8 <_dtoa_r+0x650>
 800c9d6:	9f04      	ldr	r7, [sp, #16]
 800c9d8:	e73e      	b.n	800c858 <_dtoa_r+0x4e0>
 800c9da:	4b9b      	ldr	r3, [pc, #620]	@ (800cc48 <_dtoa_r+0x8d0>)
 800c9dc:	f7f3 fe24 	bl	8000628 <__aeabi_dmul>
 800c9e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9e4:	e7bc      	b.n	800c960 <_dtoa_r+0x5e8>
 800c9e6:	d10c      	bne.n	800ca02 <_dtoa_r+0x68a>
 800c9e8:	4b98      	ldr	r3, [pc, #608]	@ (800cc4c <_dtoa_r+0x8d4>)
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9f0:	f7f3 fe1a 	bl	8000628 <__aeabi_dmul>
 800c9f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9f8:	f7f4 f89c 	bl	8000b34 <__aeabi_dcmpge>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	f000 8157 	beq.w	800ccb0 <_dtoa_r+0x938>
 800ca02:	2400      	movs	r4, #0
 800ca04:	4625      	mov	r5, r4
 800ca06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca08:	43db      	mvns	r3, r3
 800ca0a:	9304      	str	r3, [sp, #16]
 800ca0c:	4656      	mov	r6, sl
 800ca0e:	2700      	movs	r7, #0
 800ca10:	4621      	mov	r1, r4
 800ca12:	4658      	mov	r0, fp
 800ca14:	f000 fbb4 	bl	800d180 <_Bfree>
 800ca18:	2d00      	cmp	r5, #0
 800ca1a:	d0dc      	beq.n	800c9d6 <_dtoa_r+0x65e>
 800ca1c:	b12f      	cbz	r7, 800ca2a <_dtoa_r+0x6b2>
 800ca1e:	42af      	cmp	r7, r5
 800ca20:	d003      	beq.n	800ca2a <_dtoa_r+0x6b2>
 800ca22:	4639      	mov	r1, r7
 800ca24:	4658      	mov	r0, fp
 800ca26:	f000 fbab 	bl	800d180 <_Bfree>
 800ca2a:	4629      	mov	r1, r5
 800ca2c:	4658      	mov	r0, fp
 800ca2e:	f000 fba7 	bl	800d180 <_Bfree>
 800ca32:	e7d0      	b.n	800c9d6 <_dtoa_r+0x65e>
 800ca34:	9704      	str	r7, [sp, #16]
 800ca36:	4633      	mov	r3, r6
 800ca38:	461e      	mov	r6, r3
 800ca3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca3e:	2a39      	cmp	r2, #57	@ 0x39
 800ca40:	d107      	bne.n	800ca52 <_dtoa_r+0x6da>
 800ca42:	459a      	cmp	sl, r3
 800ca44:	d1f8      	bne.n	800ca38 <_dtoa_r+0x6c0>
 800ca46:	9a04      	ldr	r2, [sp, #16]
 800ca48:	3201      	adds	r2, #1
 800ca4a:	9204      	str	r2, [sp, #16]
 800ca4c:	2230      	movs	r2, #48	@ 0x30
 800ca4e:	f88a 2000 	strb.w	r2, [sl]
 800ca52:	781a      	ldrb	r2, [r3, #0]
 800ca54:	3201      	adds	r2, #1
 800ca56:	701a      	strb	r2, [r3, #0]
 800ca58:	e7bd      	b.n	800c9d6 <_dtoa_r+0x65e>
 800ca5a:	4b7b      	ldr	r3, [pc, #492]	@ (800cc48 <_dtoa_r+0x8d0>)
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f7f3 fde3 	bl	8000628 <__aeabi_dmul>
 800ca62:	2200      	movs	r2, #0
 800ca64:	2300      	movs	r3, #0
 800ca66:	4604      	mov	r4, r0
 800ca68:	460d      	mov	r5, r1
 800ca6a:	f7f4 f845 	bl	8000af8 <__aeabi_dcmpeq>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	f43f aebb 	beq.w	800c7ea <_dtoa_r+0x472>
 800ca74:	e6f0      	b.n	800c858 <_dtoa_r+0x4e0>
 800ca76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ca78:	2a00      	cmp	r2, #0
 800ca7a:	f000 80db 	beq.w	800cc34 <_dtoa_r+0x8bc>
 800ca7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca80:	2a01      	cmp	r2, #1
 800ca82:	f300 80bf 	bgt.w	800cc04 <_dtoa_r+0x88c>
 800ca86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ca88:	2a00      	cmp	r2, #0
 800ca8a:	f000 80b7 	beq.w	800cbfc <_dtoa_r+0x884>
 800ca8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ca92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ca94:	4646      	mov	r6, r8
 800ca96:	9a08      	ldr	r2, [sp, #32]
 800ca98:	2101      	movs	r1, #1
 800ca9a:	441a      	add	r2, r3
 800ca9c:	4658      	mov	r0, fp
 800ca9e:	4498      	add	r8, r3
 800caa0:	9208      	str	r2, [sp, #32]
 800caa2:	f000 fc6b 	bl	800d37c <__i2b>
 800caa6:	4605      	mov	r5, r0
 800caa8:	b15e      	cbz	r6, 800cac2 <_dtoa_r+0x74a>
 800caaa:	9b08      	ldr	r3, [sp, #32]
 800caac:	2b00      	cmp	r3, #0
 800caae:	dd08      	ble.n	800cac2 <_dtoa_r+0x74a>
 800cab0:	42b3      	cmp	r3, r6
 800cab2:	9a08      	ldr	r2, [sp, #32]
 800cab4:	bfa8      	it	ge
 800cab6:	4633      	movge	r3, r6
 800cab8:	eba8 0803 	sub.w	r8, r8, r3
 800cabc:	1af6      	subs	r6, r6, r3
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	9308      	str	r3, [sp, #32]
 800cac2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cac4:	b1f3      	cbz	r3, 800cb04 <_dtoa_r+0x78c>
 800cac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f000 80b7 	beq.w	800cc3c <_dtoa_r+0x8c4>
 800cace:	b18c      	cbz	r4, 800caf4 <_dtoa_r+0x77c>
 800cad0:	4629      	mov	r1, r5
 800cad2:	4622      	mov	r2, r4
 800cad4:	4658      	mov	r0, fp
 800cad6:	f000 fd11 	bl	800d4fc <__pow5mult>
 800cada:	464a      	mov	r2, r9
 800cadc:	4601      	mov	r1, r0
 800cade:	4605      	mov	r5, r0
 800cae0:	4658      	mov	r0, fp
 800cae2:	f000 fc61 	bl	800d3a8 <__multiply>
 800cae6:	4649      	mov	r1, r9
 800cae8:	9004      	str	r0, [sp, #16]
 800caea:	4658      	mov	r0, fp
 800caec:	f000 fb48 	bl	800d180 <_Bfree>
 800caf0:	9b04      	ldr	r3, [sp, #16]
 800caf2:	4699      	mov	r9, r3
 800caf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caf6:	1b1a      	subs	r2, r3, r4
 800caf8:	d004      	beq.n	800cb04 <_dtoa_r+0x78c>
 800cafa:	4649      	mov	r1, r9
 800cafc:	4658      	mov	r0, fp
 800cafe:	f000 fcfd 	bl	800d4fc <__pow5mult>
 800cb02:	4681      	mov	r9, r0
 800cb04:	2101      	movs	r1, #1
 800cb06:	4658      	mov	r0, fp
 800cb08:	f000 fc38 	bl	800d37c <__i2b>
 800cb0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb0e:	4604      	mov	r4, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f000 81cf 	beq.w	800ceb4 <_dtoa_r+0xb3c>
 800cb16:	461a      	mov	r2, r3
 800cb18:	4601      	mov	r1, r0
 800cb1a:	4658      	mov	r0, fp
 800cb1c:	f000 fcee 	bl	800d4fc <__pow5mult>
 800cb20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	4604      	mov	r4, r0
 800cb26:	f300 8095 	bgt.w	800cc54 <_dtoa_r+0x8dc>
 800cb2a:	9b02      	ldr	r3, [sp, #8]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f040 8087 	bne.w	800cc40 <_dtoa_r+0x8c8>
 800cb32:	9b03      	ldr	r3, [sp, #12]
 800cb34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f040 8089 	bne.w	800cc50 <_dtoa_r+0x8d8>
 800cb3e:	9b03      	ldr	r3, [sp, #12]
 800cb40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cb44:	0d1b      	lsrs	r3, r3, #20
 800cb46:	051b      	lsls	r3, r3, #20
 800cb48:	b12b      	cbz	r3, 800cb56 <_dtoa_r+0x7de>
 800cb4a:	9b08      	ldr	r3, [sp, #32]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	9308      	str	r3, [sp, #32]
 800cb50:	f108 0801 	add.w	r8, r8, #1
 800cb54:	2301      	movs	r3, #1
 800cb56:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f000 81b0 	beq.w	800cec0 <_dtoa_r+0xb48>
 800cb60:	6923      	ldr	r3, [r4, #16]
 800cb62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb66:	6918      	ldr	r0, [r3, #16]
 800cb68:	f000 fbbc 	bl	800d2e4 <__hi0bits>
 800cb6c:	f1c0 0020 	rsb	r0, r0, #32
 800cb70:	9b08      	ldr	r3, [sp, #32]
 800cb72:	4418      	add	r0, r3
 800cb74:	f010 001f 	ands.w	r0, r0, #31
 800cb78:	d077      	beq.n	800cc6a <_dtoa_r+0x8f2>
 800cb7a:	f1c0 0320 	rsb	r3, r0, #32
 800cb7e:	2b04      	cmp	r3, #4
 800cb80:	dd6b      	ble.n	800cc5a <_dtoa_r+0x8e2>
 800cb82:	9b08      	ldr	r3, [sp, #32]
 800cb84:	f1c0 001c 	rsb	r0, r0, #28
 800cb88:	4403      	add	r3, r0
 800cb8a:	4480      	add	r8, r0
 800cb8c:	4406      	add	r6, r0
 800cb8e:	9308      	str	r3, [sp, #32]
 800cb90:	f1b8 0f00 	cmp.w	r8, #0
 800cb94:	dd05      	ble.n	800cba2 <_dtoa_r+0x82a>
 800cb96:	4649      	mov	r1, r9
 800cb98:	4642      	mov	r2, r8
 800cb9a:	4658      	mov	r0, fp
 800cb9c:	f000 fd08 	bl	800d5b0 <__lshift>
 800cba0:	4681      	mov	r9, r0
 800cba2:	9b08      	ldr	r3, [sp, #32]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	dd05      	ble.n	800cbb4 <_dtoa_r+0x83c>
 800cba8:	4621      	mov	r1, r4
 800cbaa:	461a      	mov	r2, r3
 800cbac:	4658      	mov	r0, fp
 800cbae:	f000 fcff 	bl	800d5b0 <__lshift>
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d059      	beq.n	800cc6e <_dtoa_r+0x8f6>
 800cbba:	4621      	mov	r1, r4
 800cbbc:	4648      	mov	r0, r9
 800cbbe:	f000 fd63 	bl	800d688 <__mcmp>
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	da53      	bge.n	800cc6e <_dtoa_r+0x8f6>
 800cbc6:	1e7b      	subs	r3, r7, #1
 800cbc8:	9304      	str	r3, [sp, #16]
 800cbca:	4649      	mov	r1, r9
 800cbcc:	2300      	movs	r3, #0
 800cbce:	220a      	movs	r2, #10
 800cbd0:	4658      	mov	r0, fp
 800cbd2:	f000 faf7 	bl	800d1c4 <__multadd>
 800cbd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbd8:	4681      	mov	r9, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f000 8172 	beq.w	800cec4 <_dtoa_r+0xb4c>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	4629      	mov	r1, r5
 800cbe4:	220a      	movs	r2, #10
 800cbe6:	4658      	mov	r0, fp
 800cbe8:	f000 faec 	bl	800d1c4 <__multadd>
 800cbec:	9b00      	ldr	r3, [sp, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	4605      	mov	r5, r0
 800cbf2:	dc67      	bgt.n	800ccc4 <_dtoa_r+0x94c>
 800cbf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbf6:	2b02      	cmp	r3, #2
 800cbf8:	dc41      	bgt.n	800cc7e <_dtoa_r+0x906>
 800cbfa:	e063      	b.n	800ccc4 <_dtoa_r+0x94c>
 800cbfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cbfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cc02:	e746      	b.n	800ca92 <_dtoa_r+0x71a>
 800cc04:	9b07      	ldr	r3, [sp, #28]
 800cc06:	1e5c      	subs	r4, r3, #1
 800cc08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc0a:	42a3      	cmp	r3, r4
 800cc0c:	bfbf      	itttt	lt
 800cc0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cc10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cc12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cc14:	1ae3      	sublt	r3, r4, r3
 800cc16:	bfb4      	ite	lt
 800cc18:	18d2      	addlt	r2, r2, r3
 800cc1a:	1b1c      	subge	r4, r3, r4
 800cc1c:	9b07      	ldr	r3, [sp, #28]
 800cc1e:	bfbc      	itt	lt
 800cc20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cc22:	2400      	movlt	r4, #0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	bfb5      	itete	lt
 800cc28:	eba8 0603 	sublt.w	r6, r8, r3
 800cc2c:	9b07      	ldrge	r3, [sp, #28]
 800cc2e:	2300      	movlt	r3, #0
 800cc30:	4646      	movge	r6, r8
 800cc32:	e730      	b.n	800ca96 <_dtoa_r+0x71e>
 800cc34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cc36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cc38:	4646      	mov	r6, r8
 800cc3a:	e735      	b.n	800caa8 <_dtoa_r+0x730>
 800cc3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cc3e:	e75c      	b.n	800cafa <_dtoa_r+0x782>
 800cc40:	2300      	movs	r3, #0
 800cc42:	e788      	b.n	800cb56 <_dtoa_r+0x7de>
 800cc44:	3fe00000 	.word	0x3fe00000
 800cc48:	40240000 	.word	0x40240000
 800cc4c:	40140000 	.word	0x40140000
 800cc50:	9b02      	ldr	r3, [sp, #8]
 800cc52:	e780      	b.n	800cb56 <_dtoa_r+0x7de>
 800cc54:	2300      	movs	r3, #0
 800cc56:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc58:	e782      	b.n	800cb60 <_dtoa_r+0x7e8>
 800cc5a:	d099      	beq.n	800cb90 <_dtoa_r+0x818>
 800cc5c:	9a08      	ldr	r2, [sp, #32]
 800cc5e:	331c      	adds	r3, #28
 800cc60:	441a      	add	r2, r3
 800cc62:	4498      	add	r8, r3
 800cc64:	441e      	add	r6, r3
 800cc66:	9208      	str	r2, [sp, #32]
 800cc68:	e792      	b.n	800cb90 <_dtoa_r+0x818>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	e7f6      	b.n	800cc5c <_dtoa_r+0x8e4>
 800cc6e:	9b07      	ldr	r3, [sp, #28]
 800cc70:	9704      	str	r7, [sp, #16]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	dc20      	bgt.n	800ccb8 <_dtoa_r+0x940>
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc7a:	2b02      	cmp	r3, #2
 800cc7c:	dd1e      	ble.n	800ccbc <_dtoa_r+0x944>
 800cc7e:	9b00      	ldr	r3, [sp, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	f47f aec0 	bne.w	800ca06 <_dtoa_r+0x68e>
 800cc86:	4621      	mov	r1, r4
 800cc88:	2205      	movs	r2, #5
 800cc8a:	4658      	mov	r0, fp
 800cc8c:	f000 fa9a 	bl	800d1c4 <__multadd>
 800cc90:	4601      	mov	r1, r0
 800cc92:	4604      	mov	r4, r0
 800cc94:	4648      	mov	r0, r9
 800cc96:	f000 fcf7 	bl	800d688 <__mcmp>
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	f77f aeb3 	ble.w	800ca06 <_dtoa_r+0x68e>
 800cca0:	4656      	mov	r6, sl
 800cca2:	2331      	movs	r3, #49	@ 0x31
 800cca4:	f806 3b01 	strb.w	r3, [r6], #1
 800cca8:	9b04      	ldr	r3, [sp, #16]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	9304      	str	r3, [sp, #16]
 800ccae:	e6ae      	b.n	800ca0e <_dtoa_r+0x696>
 800ccb0:	9c07      	ldr	r4, [sp, #28]
 800ccb2:	9704      	str	r7, [sp, #16]
 800ccb4:	4625      	mov	r5, r4
 800ccb6:	e7f3      	b.n	800cca0 <_dtoa_r+0x928>
 800ccb8:	9b07      	ldr	r3, [sp, #28]
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	f000 8104 	beq.w	800cecc <_dtoa_r+0xb54>
 800ccc4:	2e00      	cmp	r6, #0
 800ccc6:	dd05      	ble.n	800ccd4 <_dtoa_r+0x95c>
 800ccc8:	4629      	mov	r1, r5
 800ccca:	4632      	mov	r2, r6
 800cccc:	4658      	mov	r0, fp
 800ccce:	f000 fc6f 	bl	800d5b0 <__lshift>
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d05a      	beq.n	800cd90 <_dtoa_r+0xa18>
 800ccda:	6869      	ldr	r1, [r5, #4]
 800ccdc:	4658      	mov	r0, fp
 800ccde:	f000 fa0f 	bl	800d100 <_Balloc>
 800cce2:	4606      	mov	r6, r0
 800cce4:	b928      	cbnz	r0, 800ccf2 <_dtoa_r+0x97a>
 800cce6:	4b84      	ldr	r3, [pc, #528]	@ (800cef8 <_dtoa_r+0xb80>)
 800cce8:	4602      	mov	r2, r0
 800ccea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ccee:	f7ff bb5a 	b.w	800c3a6 <_dtoa_r+0x2e>
 800ccf2:	692a      	ldr	r2, [r5, #16]
 800ccf4:	3202      	adds	r2, #2
 800ccf6:	0092      	lsls	r2, r2, #2
 800ccf8:	f105 010c 	add.w	r1, r5, #12
 800ccfc:	300c      	adds	r0, #12
 800ccfe:	f001 ff75 	bl	800ebec <memcpy>
 800cd02:	2201      	movs	r2, #1
 800cd04:	4631      	mov	r1, r6
 800cd06:	4658      	mov	r0, fp
 800cd08:	f000 fc52 	bl	800d5b0 <__lshift>
 800cd0c:	f10a 0301 	add.w	r3, sl, #1
 800cd10:	9307      	str	r3, [sp, #28]
 800cd12:	9b00      	ldr	r3, [sp, #0]
 800cd14:	4453      	add	r3, sl
 800cd16:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd18:	9b02      	ldr	r3, [sp, #8]
 800cd1a:	f003 0301 	and.w	r3, r3, #1
 800cd1e:	462f      	mov	r7, r5
 800cd20:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd22:	4605      	mov	r5, r0
 800cd24:	9b07      	ldr	r3, [sp, #28]
 800cd26:	4621      	mov	r1, r4
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	4648      	mov	r0, r9
 800cd2c:	9300      	str	r3, [sp, #0]
 800cd2e:	f7ff fa99 	bl	800c264 <quorem>
 800cd32:	4639      	mov	r1, r7
 800cd34:	9002      	str	r0, [sp, #8]
 800cd36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cd3a:	4648      	mov	r0, r9
 800cd3c:	f000 fca4 	bl	800d688 <__mcmp>
 800cd40:	462a      	mov	r2, r5
 800cd42:	9008      	str	r0, [sp, #32]
 800cd44:	4621      	mov	r1, r4
 800cd46:	4658      	mov	r0, fp
 800cd48:	f000 fcba 	bl	800d6c0 <__mdiff>
 800cd4c:	68c2      	ldr	r2, [r0, #12]
 800cd4e:	4606      	mov	r6, r0
 800cd50:	bb02      	cbnz	r2, 800cd94 <_dtoa_r+0xa1c>
 800cd52:	4601      	mov	r1, r0
 800cd54:	4648      	mov	r0, r9
 800cd56:	f000 fc97 	bl	800d688 <__mcmp>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	4631      	mov	r1, r6
 800cd5e:	4658      	mov	r0, fp
 800cd60:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd62:	f000 fa0d 	bl	800d180 <_Bfree>
 800cd66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd6a:	9e07      	ldr	r6, [sp, #28]
 800cd6c:	ea43 0102 	orr.w	r1, r3, r2
 800cd70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd72:	4319      	orrs	r1, r3
 800cd74:	d110      	bne.n	800cd98 <_dtoa_r+0xa20>
 800cd76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cd7a:	d029      	beq.n	800cdd0 <_dtoa_r+0xa58>
 800cd7c:	9b08      	ldr	r3, [sp, #32]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	dd02      	ble.n	800cd88 <_dtoa_r+0xa10>
 800cd82:	9b02      	ldr	r3, [sp, #8]
 800cd84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cd88:	9b00      	ldr	r3, [sp, #0]
 800cd8a:	f883 8000 	strb.w	r8, [r3]
 800cd8e:	e63f      	b.n	800ca10 <_dtoa_r+0x698>
 800cd90:	4628      	mov	r0, r5
 800cd92:	e7bb      	b.n	800cd0c <_dtoa_r+0x994>
 800cd94:	2201      	movs	r2, #1
 800cd96:	e7e1      	b.n	800cd5c <_dtoa_r+0x9e4>
 800cd98:	9b08      	ldr	r3, [sp, #32]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	db04      	blt.n	800cda8 <_dtoa_r+0xa30>
 800cd9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cda0:	430b      	orrs	r3, r1
 800cda2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cda4:	430b      	orrs	r3, r1
 800cda6:	d120      	bne.n	800cdea <_dtoa_r+0xa72>
 800cda8:	2a00      	cmp	r2, #0
 800cdaa:	dded      	ble.n	800cd88 <_dtoa_r+0xa10>
 800cdac:	4649      	mov	r1, r9
 800cdae:	2201      	movs	r2, #1
 800cdb0:	4658      	mov	r0, fp
 800cdb2:	f000 fbfd 	bl	800d5b0 <__lshift>
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	4681      	mov	r9, r0
 800cdba:	f000 fc65 	bl	800d688 <__mcmp>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	dc03      	bgt.n	800cdca <_dtoa_r+0xa52>
 800cdc2:	d1e1      	bne.n	800cd88 <_dtoa_r+0xa10>
 800cdc4:	f018 0f01 	tst.w	r8, #1
 800cdc8:	d0de      	beq.n	800cd88 <_dtoa_r+0xa10>
 800cdca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cdce:	d1d8      	bne.n	800cd82 <_dtoa_r+0xa0a>
 800cdd0:	9a00      	ldr	r2, [sp, #0]
 800cdd2:	2339      	movs	r3, #57	@ 0x39
 800cdd4:	7013      	strb	r3, [r2, #0]
 800cdd6:	4633      	mov	r3, r6
 800cdd8:	461e      	mov	r6, r3
 800cdda:	3b01      	subs	r3, #1
 800cddc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cde0:	2a39      	cmp	r2, #57	@ 0x39
 800cde2:	d052      	beq.n	800ce8a <_dtoa_r+0xb12>
 800cde4:	3201      	adds	r2, #1
 800cde6:	701a      	strb	r2, [r3, #0]
 800cde8:	e612      	b.n	800ca10 <_dtoa_r+0x698>
 800cdea:	2a00      	cmp	r2, #0
 800cdec:	dd07      	ble.n	800cdfe <_dtoa_r+0xa86>
 800cdee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cdf2:	d0ed      	beq.n	800cdd0 <_dtoa_r+0xa58>
 800cdf4:	9a00      	ldr	r2, [sp, #0]
 800cdf6:	f108 0301 	add.w	r3, r8, #1
 800cdfa:	7013      	strb	r3, [r2, #0]
 800cdfc:	e608      	b.n	800ca10 <_dtoa_r+0x698>
 800cdfe:	9b07      	ldr	r3, [sp, #28]
 800ce00:	9a07      	ldr	r2, [sp, #28]
 800ce02:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ce06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d028      	beq.n	800ce5e <_dtoa_r+0xae6>
 800ce0c:	4649      	mov	r1, r9
 800ce0e:	2300      	movs	r3, #0
 800ce10:	220a      	movs	r2, #10
 800ce12:	4658      	mov	r0, fp
 800ce14:	f000 f9d6 	bl	800d1c4 <__multadd>
 800ce18:	42af      	cmp	r7, r5
 800ce1a:	4681      	mov	r9, r0
 800ce1c:	f04f 0300 	mov.w	r3, #0
 800ce20:	f04f 020a 	mov.w	r2, #10
 800ce24:	4639      	mov	r1, r7
 800ce26:	4658      	mov	r0, fp
 800ce28:	d107      	bne.n	800ce3a <_dtoa_r+0xac2>
 800ce2a:	f000 f9cb 	bl	800d1c4 <__multadd>
 800ce2e:	4607      	mov	r7, r0
 800ce30:	4605      	mov	r5, r0
 800ce32:	9b07      	ldr	r3, [sp, #28]
 800ce34:	3301      	adds	r3, #1
 800ce36:	9307      	str	r3, [sp, #28]
 800ce38:	e774      	b.n	800cd24 <_dtoa_r+0x9ac>
 800ce3a:	f000 f9c3 	bl	800d1c4 <__multadd>
 800ce3e:	4629      	mov	r1, r5
 800ce40:	4607      	mov	r7, r0
 800ce42:	2300      	movs	r3, #0
 800ce44:	220a      	movs	r2, #10
 800ce46:	4658      	mov	r0, fp
 800ce48:	f000 f9bc 	bl	800d1c4 <__multadd>
 800ce4c:	4605      	mov	r5, r0
 800ce4e:	e7f0      	b.n	800ce32 <_dtoa_r+0xaba>
 800ce50:	9b00      	ldr	r3, [sp, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	bfcc      	ite	gt
 800ce56:	461e      	movgt	r6, r3
 800ce58:	2601      	movle	r6, #1
 800ce5a:	4456      	add	r6, sl
 800ce5c:	2700      	movs	r7, #0
 800ce5e:	4649      	mov	r1, r9
 800ce60:	2201      	movs	r2, #1
 800ce62:	4658      	mov	r0, fp
 800ce64:	f000 fba4 	bl	800d5b0 <__lshift>
 800ce68:	4621      	mov	r1, r4
 800ce6a:	4681      	mov	r9, r0
 800ce6c:	f000 fc0c 	bl	800d688 <__mcmp>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	dcb0      	bgt.n	800cdd6 <_dtoa_r+0xa5e>
 800ce74:	d102      	bne.n	800ce7c <_dtoa_r+0xb04>
 800ce76:	f018 0f01 	tst.w	r8, #1
 800ce7a:	d1ac      	bne.n	800cdd6 <_dtoa_r+0xa5e>
 800ce7c:	4633      	mov	r3, r6
 800ce7e:	461e      	mov	r6, r3
 800ce80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce84:	2a30      	cmp	r2, #48	@ 0x30
 800ce86:	d0fa      	beq.n	800ce7e <_dtoa_r+0xb06>
 800ce88:	e5c2      	b.n	800ca10 <_dtoa_r+0x698>
 800ce8a:	459a      	cmp	sl, r3
 800ce8c:	d1a4      	bne.n	800cdd8 <_dtoa_r+0xa60>
 800ce8e:	9b04      	ldr	r3, [sp, #16]
 800ce90:	3301      	adds	r3, #1
 800ce92:	9304      	str	r3, [sp, #16]
 800ce94:	2331      	movs	r3, #49	@ 0x31
 800ce96:	f88a 3000 	strb.w	r3, [sl]
 800ce9a:	e5b9      	b.n	800ca10 <_dtoa_r+0x698>
 800ce9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ce9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cefc <_dtoa_r+0xb84>
 800cea2:	b11b      	cbz	r3, 800ceac <_dtoa_r+0xb34>
 800cea4:	f10a 0308 	add.w	r3, sl, #8
 800cea8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ceaa:	6013      	str	r3, [r2, #0]
 800ceac:	4650      	mov	r0, sl
 800ceae:	b019      	add	sp, #100	@ 0x64
 800ceb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	f77f ae37 	ble.w	800cb2a <_dtoa_r+0x7b2>
 800cebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cebe:	930a      	str	r3, [sp, #40]	@ 0x28
 800cec0:	2001      	movs	r0, #1
 800cec2:	e655      	b.n	800cb70 <_dtoa_r+0x7f8>
 800cec4:	9b00      	ldr	r3, [sp, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f77f aed6 	ble.w	800cc78 <_dtoa_r+0x900>
 800cecc:	4656      	mov	r6, sl
 800cece:	4621      	mov	r1, r4
 800ced0:	4648      	mov	r0, r9
 800ced2:	f7ff f9c7 	bl	800c264 <quorem>
 800ced6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ceda:	f806 8b01 	strb.w	r8, [r6], #1
 800cede:	9b00      	ldr	r3, [sp, #0]
 800cee0:	eba6 020a 	sub.w	r2, r6, sl
 800cee4:	4293      	cmp	r3, r2
 800cee6:	ddb3      	ble.n	800ce50 <_dtoa_r+0xad8>
 800cee8:	4649      	mov	r1, r9
 800ceea:	2300      	movs	r3, #0
 800ceec:	220a      	movs	r2, #10
 800ceee:	4658      	mov	r0, fp
 800cef0:	f000 f968 	bl	800d1c4 <__multadd>
 800cef4:	4681      	mov	r9, r0
 800cef6:	e7ea      	b.n	800cece <_dtoa_r+0xb56>
 800cef8:	0800fc25 	.word	0x0800fc25
 800cefc:	0800fba9 	.word	0x0800fba9

0800cf00 <_free_r>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4605      	mov	r5, r0
 800cf04:	2900      	cmp	r1, #0
 800cf06:	d041      	beq.n	800cf8c <_free_r+0x8c>
 800cf08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf0c:	1f0c      	subs	r4, r1, #4
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	bfb8      	it	lt
 800cf12:	18e4      	addlt	r4, r4, r3
 800cf14:	f000 f8e8 	bl	800d0e8 <__malloc_lock>
 800cf18:	4a1d      	ldr	r2, [pc, #116]	@ (800cf90 <_free_r+0x90>)
 800cf1a:	6813      	ldr	r3, [r2, #0]
 800cf1c:	b933      	cbnz	r3, 800cf2c <_free_r+0x2c>
 800cf1e:	6063      	str	r3, [r4, #4]
 800cf20:	6014      	str	r4, [r2, #0]
 800cf22:	4628      	mov	r0, r5
 800cf24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf28:	f000 b8e4 	b.w	800d0f4 <__malloc_unlock>
 800cf2c:	42a3      	cmp	r3, r4
 800cf2e:	d908      	bls.n	800cf42 <_free_r+0x42>
 800cf30:	6820      	ldr	r0, [r4, #0]
 800cf32:	1821      	adds	r1, r4, r0
 800cf34:	428b      	cmp	r3, r1
 800cf36:	bf01      	itttt	eq
 800cf38:	6819      	ldreq	r1, [r3, #0]
 800cf3a:	685b      	ldreq	r3, [r3, #4]
 800cf3c:	1809      	addeq	r1, r1, r0
 800cf3e:	6021      	streq	r1, [r4, #0]
 800cf40:	e7ed      	b.n	800cf1e <_free_r+0x1e>
 800cf42:	461a      	mov	r2, r3
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	b10b      	cbz	r3, 800cf4c <_free_r+0x4c>
 800cf48:	42a3      	cmp	r3, r4
 800cf4a:	d9fa      	bls.n	800cf42 <_free_r+0x42>
 800cf4c:	6811      	ldr	r1, [r2, #0]
 800cf4e:	1850      	adds	r0, r2, r1
 800cf50:	42a0      	cmp	r0, r4
 800cf52:	d10b      	bne.n	800cf6c <_free_r+0x6c>
 800cf54:	6820      	ldr	r0, [r4, #0]
 800cf56:	4401      	add	r1, r0
 800cf58:	1850      	adds	r0, r2, r1
 800cf5a:	4283      	cmp	r3, r0
 800cf5c:	6011      	str	r1, [r2, #0]
 800cf5e:	d1e0      	bne.n	800cf22 <_free_r+0x22>
 800cf60:	6818      	ldr	r0, [r3, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	6053      	str	r3, [r2, #4]
 800cf66:	4408      	add	r0, r1
 800cf68:	6010      	str	r0, [r2, #0]
 800cf6a:	e7da      	b.n	800cf22 <_free_r+0x22>
 800cf6c:	d902      	bls.n	800cf74 <_free_r+0x74>
 800cf6e:	230c      	movs	r3, #12
 800cf70:	602b      	str	r3, [r5, #0]
 800cf72:	e7d6      	b.n	800cf22 <_free_r+0x22>
 800cf74:	6820      	ldr	r0, [r4, #0]
 800cf76:	1821      	adds	r1, r4, r0
 800cf78:	428b      	cmp	r3, r1
 800cf7a:	bf04      	itt	eq
 800cf7c:	6819      	ldreq	r1, [r3, #0]
 800cf7e:	685b      	ldreq	r3, [r3, #4]
 800cf80:	6063      	str	r3, [r4, #4]
 800cf82:	bf04      	itt	eq
 800cf84:	1809      	addeq	r1, r1, r0
 800cf86:	6021      	streq	r1, [r4, #0]
 800cf88:	6054      	str	r4, [r2, #4]
 800cf8a:	e7ca      	b.n	800cf22 <_free_r+0x22>
 800cf8c:	bd38      	pop	{r3, r4, r5, pc}
 800cf8e:	bf00      	nop
 800cf90:	20000ba8 	.word	0x20000ba8

0800cf94 <malloc>:
 800cf94:	4b02      	ldr	r3, [pc, #8]	@ (800cfa0 <malloc+0xc>)
 800cf96:	4601      	mov	r1, r0
 800cf98:	6818      	ldr	r0, [r3, #0]
 800cf9a:	f000 b825 	b.w	800cfe8 <_malloc_r>
 800cf9e:	bf00      	nop
 800cfa0:	20000018 	.word	0x20000018

0800cfa4 <sbrk_aligned>:
 800cfa4:	b570      	push	{r4, r5, r6, lr}
 800cfa6:	4e0f      	ldr	r6, [pc, #60]	@ (800cfe4 <sbrk_aligned+0x40>)
 800cfa8:	460c      	mov	r4, r1
 800cfaa:	6831      	ldr	r1, [r6, #0]
 800cfac:	4605      	mov	r5, r0
 800cfae:	b911      	cbnz	r1, 800cfb6 <sbrk_aligned+0x12>
 800cfb0:	f001 fe0c 	bl	800ebcc <_sbrk_r>
 800cfb4:	6030      	str	r0, [r6, #0]
 800cfb6:	4621      	mov	r1, r4
 800cfb8:	4628      	mov	r0, r5
 800cfba:	f001 fe07 	bl	800ebcc <_sbrk_r>
 800cfbe:	1c43      	adds	r3, r0, #1
 800cfc0:	d103      	bne.n	800cfca <sbrk_aligned+0x26>
 800cfc2:	f04f 34ff 	mov.w	r4, #4294967295
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	bd70      	pop	{r4, r5, r6, pc}
 800cfca:	1cc4      	adds	r4, r0, #3
 800cfcc:	f024 0403 	bic.w	r4, r4, #3
 800cfd0:	42a0      	cmp	r0, r4
 800cfd2:	d0f8      	beq.n	800cfc6 <sbrk_aligned+0x22>
 800cfd4:	1a21      	subs	r1, r4, r0
 800cfd6:	4628      	mov	r0, r5
 800cfd8:	f001 fdf8 	bl	800ebcc <_sbrk_r>
 800cfdc:	3001      	adds	r0, #1
 800cfde:	d1f2      	bne.n	800cfc6 <sbrk_aligned+0x22>
 800cfe0:	e7ef      	b.n	800cfc2 <sbrk_aligned+0x1e>
 800cfe2:	bf00      	nop
 800cfe4:	20000ba4 	.word	0x20000ba4

0800cfe8 <_malloc_r>:
 800cfe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfec:	1ccd      	adds	r5, r1, #3
 800cfee:	f025 0503 	bic.w	r5, r5, #3
 800cff2:	3508      	adds	r5, #8
 800cff4:	2d0c      	cmp	r5, #12
 800cff6:	bf38      	it	cc
 800cff8:	250c      	movcc	r5, #12
 800cffa:	2d00      	cmp	r5, #0
 800cffc:	4606      	mov	r6, r0
 800cffe:	db01      	blt.n	800d004 <_malloc_r+0x1c>
 800d000:	42a9      	cmp	r1, r5
 800d002:	d904      	bls.n	800d00e <_malloc_r+0x26>
 800d004:	230c      	movs	r3, #12
 800d006:	6033      	str	r3, [r6, #0]
 800d008:	2000      	movs	r0, #0
 800d00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d00e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d0e4 <_malloc_r+0xfc>
 800d012:	f000 f869 	bl	800d0e8 <__malloc_lock>
 800d016:	f8d8 3000 	ldr.w	r3, [r8]
 800d01a:	461c      	mov	r4, r3
 800d01c:	bb44      	cbnz	r4, 800d070 <_malloc_r+0x88>
 800d01e:	4629      	mov	r1, r5
 800d020:	4630      	mov	r0, r6
 800d022:	f7ff ffbf 	bl	800cfa4 <sbrk_aligned>
 800d026:	1c43      	adds	r3, r0, #1
 800d028:	4604      	mov	r4, r0
 800d02a:	d158      	bne.n	800d0de <_malloc_r+0xf6>
 800d02c:	f8d8 4000 	ldr.w	r4, [r8]
 800d030:	4627      	mov	r7, r4
 800d032:	2f00      	cmp	r7, #0
 800d034:	d143      	bne.n	800d0be <_malloc_r+0xd6>
 800d036:	2c00      	cmp	r4, #0
 800d038:	d04b      	beq.n	800d0d2 <_malloc_r+0xea>
 800d03a:	6823      	ldr	r3, [r4, #0]
 800d03c:	4639      	mov	r1, r7
 800d03e:	4630      	mov	r0, r6
 800d040:	eb04 0903 	add.w	r9, r4, r3
 800d044:	f001 fdc2 	bl	800ebcc <_sbrk_r>
 800d048:	4581      	cmp	r9, r0
 800d04a:	d142      	bne.n	800d0d2 <_malloc_r+0xea>
 800d04c:	6821      	ldr	r1, [r4, #0]
 800d04e:	1a6d      	subs	r5, r5, r1
 800d050:	4629      	mov	r1, r5
 800d052:	4630      	mov	r0, r6
 800d054:	f7ff ffa6 	bl	800cfa4 <sbrk_aligned>
 800d058:	3001      	adds	r0, #1
 800d05a:	d03a      	beq.n	800d0d2 <_malloc_r+0xea>
 800d05c:	6823      	ldr	r3, [r4, #0]
 800d05e:	442b      	add	r3, r5
 800d060:	6023      	str	r3, [r4, #0]
 800d062:	f8d8 3000 	ldr.w	r3, [r8]
 800d066:	685a      	ldr	r2, [r3, #4]
 800d068:	bb62      	cbnz	r2, 800d0c4 <_malloc_r+0xdc>
 800d06a:	f8c8 7000 	str.w	r7, [r8]
 800d06e:	e00f      	b.n	800d090 <_malloc_r+0xa8>
 800d070:	6822      	ldr	r2, [r4, #0]
 800d072:	1b52      	subs	r2, r2, r5
 800d074:	d420      	bmi.n	800d0b8 <_malloc_r+0xd0>
 800d076:	2a0b      	cmp	r2, #11
 800d078:	d917      	bls.n	800d0aa <_malloc_r+0xc2>
 800d07a:	1961      	adds	r1, r4, r5
 800d07c:	42a3      	cmp	r3, r4
 800d07e:	6025      	str	r5, [r4, #0]
 800d080:	bf18      	it	ne
 800d082:	6059      	strne	r1, [r3, #4]
 800d084:	6863      	ldr	r3, [r4, #4]
 800d086:	bf08      	it	eq
 800d088:	f8c8 1000 	streq.w	r1, [r8]
 800d08c:	5162      	str	r2, [r4, r5]
 800d08e:	604b      	str	r3, [r1, #4]
 800d090:	4630      	mov	r0, r6
 800d092:	f000 f82f 	bl	800d0f4 <__malloc_unlock>
 800d096:	f104 000b 	add.w	r0, r4, #11
 800d09a:	1d23      	adds	r3, r4, #4
 800d09c:	f020 0007 	bic.w	r0, r0, #7
 800d0a0:	1ac2      	subs	r2, r0, r3
 800d0a2:	bf1c      	itt	ne
 800d0a4:	1a1b      	subne	r3, r3, r0
 800d0a6:	50a3      	strne	r3, [r4, r2]
 800d0a8:	e7af      	b.n	800d00a <_malloc_r+0x22>
 800d0aa:	6862      	ldr	r2, [r4, #4]
 800d0ac:	42a3      	cmp	r3, r4
 800d0ae:	bf0c      	ite	eq
 800d0b0:	f8c8 2000 	streq.w	r2, [r8]
 800d0b4:	605a      	strne	r2, [r3, #4]
 800d0b6:	e7eb      	b.n	800d090 <_malloc_r+0xa8>
 800d0b8:	4623      	mov	r3, r4
 800d0ba:	6864      	ldr	r4, [r4, #4]
 800d0bc:	e7ae      	b.n	800d01c <_malloc_r+0x34>
 800d0be:	463c      	mov	r4, r7
 800d0c0:	687f      	ldr	r7, [r7, #4]
 800d0c2:	e7b6      	b.n	800d032 <_malloc_r+0x4a>
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	42a3      	cmp	r3, r4
 800d0ca:	d1fb      	bne.n	800d0c4 <_malloc_r+0xdc>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	6053      	str	r3, [r2, #4]
 800d0d0:	e7de      	b.n	800d090 <_malloc_r+0xa8>
 800d0d2:	230c      	movs	r3, #12
 800d0d4:	6033      	str	r3, [r6, #0]
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f000 f80c 	bl	800d0f4 <__malloc_unlock>
 800d0dc:	e794      	b.n	800d008 <_malloc_r+0x20>
 800d0de:	6005      	str	r5, [r0, #0]
 800d0e0:	e7d6      	b.n	800d090 <_malloc_r+0xa8>
 800d0e2:	bf00      	nop
 800d0e4:	20000ba8 	.word	0x20000ba8

0800d0e8 <__malloc_lock>:
 800d0e8:	4801      	ldr	r0, [pc, #4]	@ (800d0f0 <__malloc_lock+0x8>)
 800d0ea:	f7ff b8b2 	b.w	800c252 <__retarget_lock_acquire_recursive>
 800d0ee:	bf00      	nop
 800d0f0:	20000ba0 	.word	0x20000ba0

0800d0f4 <__malloc_unlock>:
 800d0f4:	4801      	ldr	r0, [pc, #4]	@ (800d0fc <__malloc_unlock+0x8>)
 800d0f6:	f7ff b8ad 	b.w	800c254 <__retarget_lock_release_recursive>
 800d0fa:	bf00      	nop
 800d0fc:	20000ba0 	.word	0x20000ba0

0800d100 <_Balloc>:
 800d100:	b570      	push	{r4, r5, r6, lr}
 800d102:	69c6      	ldr	r6, [r0, #28]
 800d104:	4604      	mov	r4, r0
 800d106:	460d      	mov	r5, r1
 800d108:	b976      	cbnz	r6, 800d128 <_Balloc+0x28>
 800d10a:	2010      	movs	r0, #16
 800d10c:	f7ff ff42 	bl	800cf94 <malloc>
 800d110:	4602      	mov	r2, r0
 800d112:	61e0      	str	r0, [r4, #28]
 800d114:	b920      	cbnz	r0, 800d120 <_Balloc+0x20>
 800d116:	4b18      	ldr	r3, [pc, #96]	@ (800d178 <_Balloc+0x78>)
 800d118:	4818      	ldr	r0, [pc, #96]	@ (800d17c <_Balloc+0x7c>)
 800d11a:	216b      	movs	r1, #107	@ 0x6b
 800d11c:	f001 fd7c 	bl	800ec18 <__assert_func>
 800d120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d124:	6006      	str	r6, [r0, #0]
 800d126:	60c6      	str	r6, [r0, #12]
 800d128:	69e6      	ldr	r6, [r4, #28]
 800d12a:	68f3      	ldr	r3, [r6, #12]
 800d12c:	b183      	cbz	r3, 800d150 <_Balloc+0x50>
 800d12e:	69e3      	ldr	r3, [r4, #28]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d136:	b9b8      	cbnz	r0, 800d168 <_Balloc+0x68>
 800d138:	2101      	movs	r1, #1
 800d13a:	fa01 f605 	lsl.w	r6, r1, r5
 800d13e:	1d72      	adds	r2, r6, #5
 800d140:	0092      	lsls	r2, r2, #2
 800d142:	4620      	mov	r0, r4
 800d144:	f001 fd86 	bl	800ec54 <_calloc_r>
 800d148:	b160      	cbz	r0, 800d164 <_Balloc+0x64>
 800d14a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d14e:	e00e      	b.n	800d16e <_Balloc+0x6e>
 800d150:	2221      	movs	r2, #33	@ 0x21
 800d152:	2104      	movs	r1, #4
 800d154:	4620      	mov	r0, r4
 800d156:	f001 fd7d 	bl	800ec54 <_calloc_r>
 800d15a:	69e3      	ldr	r3, [r4, #28]
 800d15c:	60f0      	str	r0, [r6, #12]
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d1e4      	bne.n	800d12e <_Balloc+0x2e>
 800d164:	2000      	movs	r0, #0
 800d166:	bd70      	pop	{r4, r5, r6, pc}
 800d168:	6802      	ldr	r2, [r0, #0]
 800d16a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d16e:	2300      	movs	r3, #0
 800d170:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d174:	e7f7      	b.n	800d166 <_Balloc+0x66>
 800d176:	bf00      	nop
 800d178:	0800fbb6 	.word	0x0800fbb6
 800d17c:	0800fc36 	.word	0x0800fc36

0800d180 <_Bfree>:
 800d180:	b570      	push	{r4, r5, r6, lr}
 800d182:	69c6      	ldr	r6, [r0, #28]
 800d184:	4605      	mov	r5, r0
 800d186:	460c      	mov	r4, r1
 800d188:	b976      	cbnz	r6, 800d1a8 <_Bfree+0x28>
 800d18a:	2010      	movs	r0, #16
 800d18c:	f7ff ff02 	bl	800cf94 <malloc>
 800d190:	4602      	mov	r2, r0
 800d192:	61e8      	str	r0, [r5, #28]
 800d194:	b920      	cbnz	r0, 800d1a0 <_Bfree+0x20>
 800d196:	4b09      	ldr	r3, [pc, #36]	@ (800d1bc <_Bfree+0x3c>)
 800d198:	4809      	ldr	r0, [pc, #36]	@ (800d1c0 <_Bfree+0x40>)
 800d19a:	218f      	movs	r1, #143	@ 0x8f
 800d19c:	f001 fd3c 	bl	800ec18 <__assert_func>
 800d1a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1a4:	6006      	str	r6, [r0, #0]
 800d1a6:	60c6      	str	r6, [r0, #12]
 800d1a8:	b13c      	cbz	r4, 800d1ba <_Bfree+0x3a>
 800d1aa:	69eb      	ldr	r3, [r5, #28]
 800d1ac:	6862      	ldr	r2, [r4, #4]
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1b4:	6021      	str	r1, [r4, #0]
 800d1b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1ba:	bd70      	pop	{r4, r5, r6, pc}
 800d1bc:	0800fbb6 	.word	0x0800fbb6
 800d1c0:	0800fc36 	.word	0x0800fc36

0800d1c4 <__multadd>:
 800d1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c8:	690d      	ldr	r5, [r1, #16]
 800d1ca:	4607      	mov	r7, r0
 800d1cc:	460c      	mov	r4, r1
 800d1ce:	461e      	mov	r6, r3
 800d1d0:	f101 0c14 	add.w	ip, r1, #20
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	f8dc 3000 	ldr.w	r3, [ip]
 800d1da:	b299      	uxth	r1, r3
 800d1dc:	fb02 6101 	mla	r1, r2, r1, r6
 800d1e0:	0c1e      	lsrs	r6, r3, #16
 800d1e2:	0c0b      	lsrs	r3, r1, #16
 800d1e4:	fb02 3306 	mla	r3, r2, r6, r3
 800d1e8:	b289      	uxth	r1, r1
 800d1ea:	3001      	adds	r0, #1
 800d1ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d1f0:	4285      	cmp	r5, r0
 800d1f2:	f84c 1b04 	str.w	r1, [ip], #4
 800d1f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d1fa:	dcec      	bgt.n	800d1d6 <__multadd+0x12>
 800d1fc:	b30e      	cbz	r6, 800d242 <__multadd+0x7e>
 800d1fe:	68a3      	ldr	r3, [r4, #8]
 800d200:	42ab      	cmp	r3, r5
 800d202:	dc19      	bgt.n	800d238 <__multadd+0x74>
 800d204:	6861      	ldr	r1, [r4, #4]
 800d206:	4638      	mov	r0, r7
 800d208:	3101      	adds	r1, #1
 800d20a:	f7ff ff79 	bl	800d100 <_Balloc>
 800d20e:	4680      	mov	r8, r0
 800d210:	b928      	cbnz	r0, 800d21e <__multadd+0x5a>
 800d212:	4602      	mov	r2, r0
 800d214:	4b0c      	ldr	r3, [pc, #48]	@ (800d248 <__multadd+0x84>)
 800d216:	480d      	ldr	r0, [pc, #52]	@ (800d24c <__multadd+0x88>)
 800d218:	21ba      	movs	r1, #186	@ 0xba
 800d21a:	f001 fcfd 	bl	800ec18 <__assert_func>
 800d21e:	6922      	ldr	r2, [r4, #16]
 800d220:	3202      	adds	r2, #2
 800d222:	f104 010c 	add.w	r1, r4, #12
 800d226:	0092      	lsls	r2, r2, #2
 800d228:	300c      	adds	r0, #12
 800d22a:	f001 fcdf 	bl	800ebec <memcpy>
 800d22e:	4621      	mov	r1, r4
 800d230:	4638      	mov	r0, r7
 800d232:	f7ff ffa5 	bl	800d180 <_Bfree>
 800d236:	4644      	mov	r4, r8
 800d238:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d23c:	3501      	adds	r5, #1
 800d23e:	615e      	str	r6, [r3, #20]
 800d240:	6125      	str	r5, [r4, #16]
 800d242:	4620      	mov	r0, r4
 800d244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d248:	0800fc25 	.word	0x0800fc25
 800d24c:	0800fc36 	.word	0x0800fc36

0800d250 <__s2b>:
 800d250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d254:	460c      	mov	r4, r1
 800d256:	4615      	mov	r5, r2
 800d258:	461f      	mov	r7, r3
 800d25a:	2209      	movs	r2, #9
 800d25c:	3308      	adds	r3, #8
 800d25e:	4606      	mov	r6, r0
 800d260:	fb93 f3f2 	sdiv	r3, r3, r2
 800d264:	2100      	movs	r1, #0
 800d266:	2201      	movs	r2, #1
 800d268:	429a      	cmp	r2, r3
 800d26a:	db09      	blt.n	800d280 <__s2b+0x30>
 800d26c:	4630      	mov	r0, r6
 800d26e:	f7ff ff47 	bl	800d100 <_Balloc>
 800d272:	b940      	cbnz	r0, 800d286 <__s2b+0x36>
 800d274:	4602      	mov	r2, r0
 800d276:	4b19      	ldr	r3, [pc, #100]	@ (800d2dc <__s2b+0x8c>)
 800d278:	4819      	ldr	r0, [pc, #100]	@ (800d2e0 <__s2b+0x90>)
 800d27a:	21d3      	movs	r1, #211	@ 0xd3
 800d27c:	f001 fccc 	bl	800ec18 <__assert_func>
 800d280:	0052      	lsls	r2, r2, #1
 800d282:	3101      	adds	r1, #1
 800d284:	e7f0      	b.n	800d268 <__s2b+0x18>
 800d286:	9b08      	ldr	r3, [sp, #32]
 800d288:	6143      	str	r3, [r0, #20]
 800d28a:	2d09      	cmp	r5, #9
 800d28c:	f04f 0301 	mov.w	r3, #1
 800d290:	6103      	str	r3, [r0, #16]
 800d292:	dd16      	ble.n	800d2c2 <__s2b+0x72>
 800d294:	f104 0909 	add.w	r9, r4, #9
 800d298:	46c8      	mov	r8, r9
 800d29a:	442c      	add	r4, r5
 800d29c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d2a0:	4601      	mov	r1, r0
 800d2a2:	3b30      	subs	r3, #48	@ 0x30
 800d2a4:	220a      	movs	r2, #10
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	f7ff ff8c 	bl	800d1c4 <__multadd>
 800d2ac:	45a0      	cmp	r8, r4
 800d2ae:	d1f5      	bne.n	800d29c <__s2b+0x4c>
 800d2b0:	f1a5 0408 	sub.w	r4, r5, #8
 800d2b4:	444c      	add	r4, r9
 800d2b6:	1b2d      	subs	r5, r5, r4
 800d2b8:	1963      	adds	r3, r4, r5
 800d2ba:	42bb      	cmp	r3, r7
 800d2bc:	db04      	blt.n	800d2c8 <__s2b+0x78>
 800d2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c2:	340a      	adds	r4, #10
 800d2c4:	2509      	movs	r5, #9
 800d2c6:	e7f6      	b.n	800d2b6 <__s2b+0x66>
 800d2c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2cc:	4601      	mov	r1, r0
 800d2ce:	3b30      	subs	r3, #48	@ 0x30
 800d2d0:	220a      	movs	r2, #10
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	f7ff ff76 	bl	800d1c4 <__multadd>
 800d2d8:	e7ee      	b.n	800d2b8 <__s2b+0x68>
 800d2da:	bf00      	nop
 800d2dc:	0800fc25 	.word	0x0800fc25
 800d2e0:	0800fc36 	.word	0x0800fc36

0800d2e4 <__hi0bits>:
 800d2e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	bf36      	itet	cc
 800d2ec:	0403      	lslcc	r3, r0, #16
 800d2ee:	2000      	movcs	r0, #0
 800d2f0:	2010      	movcc	r0, #16
 800d2f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2f6:	bf3c      	itt	cc
 800d2f8:	021b      	lslcc	r3, r3, #8
 800d2fa:	3008      	addcc	r0, #8
 800d2fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d300:	bf3c      	itt	cc
 800d302:	011b      	lslcc	r3, r3, #4
 800d304:	3004      	addcc	r0, #4
 800d306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d30a:	bf3c      	itt	cc
 800d30c:	009b      	lslcc	r3, r3, #2
 800d30e:	3002      	addcc	r0, #2
 800d310:	2b00      	cmp	r3, #0
 800d312:	db05      	blt.n	800d320 <__hi0bits+0x3c>
 800d314:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d318:	f100 0001 	add.w	r0, r0, #1
 800d31c:	bf08      	it	eq
 800d31e:	2020      	moveq	r0, #32
 800d320:	4770      	bx	lr

0800d322 <__lo0bits>:
 800d322:	6803      	ldr	r3, [r0, #0]
 800d324:	4602      	mov	r2, r0
 800d326:	f013 0007 	ands.w	r0, r3, #7
 800d32a:	d00b      	beq.n	800d344 <__lo0bits+0x22>
 800d32c:	07d9      	lsls	r1, r3, #31
 800d32e:	d421      	bmi.n	800d374 <__lo0bits+0x52>
 800d330:	0798      	lsls	r0, r3, #30
 800d332:	bf49      	itett	mi
 800d334:	085b      	lsrmi	r3, r3, #1
 800d336:	089b      	lsrpl	r3, r3, #2
 800d338:	2001      	movmi	r0, #1
 800d33a:	6013      	strmi	r3, [r2, #0]
 800d33c:	bf5c      	itt	pl
 800d33e:	6013      	strpl	r3, [r2, #0]
 800d340:	2002      	movpl	r0, #2
 800d342:	4770      	bx	lr
 800d344:	b299      	uxth	r1, r3
 800d346:	b909      	cbnz	r1, 800d34c <__lo0bits+0x2a>
 800d348:	0c1b      	lsrs	r3, r3, #16
 800d34a:	2010      	movs	r0, #16
 800d34c:	b2d9      	uxtb	r1, r3
 800d34e:	b909      	cbnz	r1, 800d354 <__lo0bits+0x32>
 800d350:	3008      	adds	r0, #8
 800d352:	0a1b      	lsrs	r3, r3, #8
 800d354:	0719      	lsls	r1, r3, #28
 800d356:	bf04      	itt	eq
 800d358:	091b      	lsreq	r3, r3, #4
 800d35a:	3004      	addeq	r0, #4
 800d35c:	0799      	lsls	r1, r3, #30
 800d35e:	bf04      	itt	eq
 800d360:	089b      	lsreq	r3, r3, #2
 800d362:	3002      	addeq	r0, #2
 800d364:	07d9      	lsls	r1, r3, #31
 800d366:	d403      	bmi.n	800d370 <__lo0bits+0x4e>
 800d368:	085b      	lsrs	r3, r3, #1
 800d36a:	f100 0001 	add.w	r0, r0, #1
 800d36e:	d003      	beq.n	800d378 <__lo0bits+0x56>
 800d370:	6013      	str	r3, [r2, #0]
 800d372:	4770      	bx	lr
 800d374:	2000      	movs	r0, #0
 800d376:	4770      	bx	lr
 800d378:	2020      	movs	r0, #32
 800d37a:	4770      	bx	lr

0800d37c <__i2b>:
 800d37c:	b510      	push	{r4, lr}
 800d37e:	460c      	mov	r4, r1
 800d380:	2101      	movs	r1, #1
 800d382:	f7ff febd 	bl	800d100 <_Balloc>
 800d386:	4602      	mov	r2, r0
 800d388:	b928      	cbnz	r0, 800d396 <__i2b+0x1a>
 800d38a:	4b05      	ldr	r3, [pc, #20]	@ (800d3a0 <__i2b+0x24>)
 800d38c:	4805      	ldr	r0, [pc, #20]	@ (800d3a4 <__i2b+0x28>)
 800d38e:	f240 1145 	movw	r1, #325	@ 0x145
 800d392:	f001 fc41 	bl	800ec18 <__assert_func>
 800d396:	2301      	movs	r3, #1
 800d398:	6144      	str	r4, [r0, #20]
 800d39a:	6103      	str	r3, [r0, #16]
 800d39c:	bd10      	pop	{r4, pc}
 800d39e:	bf00      	nop
 800d3a0:	0800fc25 	.word	0x0800fc25
 800d3a4:	0800fc36 	.word	0x0800fc36

0800d3a8 <__multiply>:
 800d3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ac:	4614      	mov	r4, r2
 800d3ae:	690a      	ldr	r2, [r1, #16]
 800d3b0:	6923      	ldr	r3, [r4, #16]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	bfa8      	it	ge
 800d3b6:	4623      	movge	r3, r4
 800d3b8:	460f      	mov	r7, r1
 800d3ba:	bfa4      	itt	ge
 800d3bc:	460c      	movge	r4, r1
 800d3be:	461f      	movge	r7, r3
 800d3c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d3c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d3c8:	68a3      	ldr	r3, [r4, #8]
 800d3ca:	6861      	ldr	r1, [r4, #4]
 800d3cc:	eb0a 0609 	add.w	r6, sl, r9
 800d3d0:	42b3      	cmp	r3, r6
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	bfb8      	it	lt
 800d3d6:	3101      	addlt	r1, #1
 800d3d8:	f7ff fe92 	bl	800d100 <_Balloc>
 800d3dc:	b930      	cbnz	r0, 800d3ec <__multiply+0x44>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	4b44      	ldr	r3, [pc, #272]	@ (800d4f4 <__multiply+0x14c>)
 800d3e2:	4845      	ldr	r0, [pc, #276]	@ (800d4f8 <__multiply+0x150>)
 800d3e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d3e8:	f001 fc16 	bl	800ec18 <__assert_func>
 800d3ec:	f100 0514 	add.w	r5, r0, #20
 800d3f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d3f4:	462b      	mov	r3, r5
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	4543      	cmp	r3, r8
 800d3fa:	d321      	bcc.n	800d440 <__multiply+0x98>
 800d3fc:	f107 0114 	add.w	r1, r7, #20
 800d400:	f104 0214 	add.w	r2, r4, #20
 800d404:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d408:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d40c:	9302      	str	r3, [sp, #8]
 800d40e:	1b13      	subs	r3, r2, r4
 800d410:	3b15      	subs	r3, #21
 800d412:	f023 0303 	bic.w	r3, r3, #3
 800d416:	3304      	adds	r3, #4
 800d418:	f104 0715 	add.w	r7, r4, #21
 800d41c:	42ba      	cmp	r2, r7
 800d41e:	bf38      	it	cc
 800d420:	2304      	movcc	r3, #4
 800d422:	9301      	str	r3, [sp, #4]
 800d424:	9b02      	ldr	r3, [sp, #8]
 800d426:	9103      	str	r1, [sp, #12]
 800d428:	428b      	cmp	r3, r1
 800d42a:	d80c      	bhi.n	800d446 <__multiply+0x9e>
 800d42c:	2e00      	cmp	r6, #0
 800d42e:	dd03      	ble.n	800d438 <__multiply+0x90>
 800d430:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d434:	2b00      	cmp	r3, #0
 800d436:	d05b      	beq.n	800d4f0 <__multiply+0x148>
 800d438:	6106      	str	r6, [r0, #16]
 800d43a:	b005      	add	sp, #20
 800d43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d440:	f843 2b04 	str.w	r2, [r3], #4
 800d444:	e7d8      	b.n	800d3f8 <__multiply+0x50>
 800d446:	f8b1 a000 	ldrh.w	sl, [r1]
 800d44a:	f1ba 0f00 	cmp.w	sl, #0
 800d44e:	d024      	beq.n	800d49a <__multiply+0xf2>
 800d450:	f104 0e14 	add.w	lr, r4, #20
 800d454:	46a9      	mov	r9, r5
 800d456:	f04f 0c00 	mov.w	ip, #0
 800d45a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d45e:	f8d9 3000 	ldr.w	r3, [r9]
 800d462:	fa1f fb87 	uxth.w	fp, r7
 800d466:	b29b      	uxth	r3, r3
 800d468:	fb0a 330b 	mla	r3, sl, fp, r3
 800d46c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d470:	f8d9 7000 	ldr.w	r7, [r9]
 800d474:	4463      	add	r3, ip
 800d476:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d47a:	fb0a c70b 	mla	r7, sl, fp, ip
 800d47e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d482:	b29b      	uxth	r3, r3
 800d484:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d488:	4572      	cmp	r2, lr
 800d48a:	f849 3b04 	str.w	r3, [r9], #4
 800d48e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d492:	d8e2      	bhi.n	800d45a <__multiply+0xb2>
 800d494:	9b01      	ldr	r3, [sp, #4]
 800d496:	f845 c003 	str.w	ip, [r5, r3]
 800d49a:	9b03      	ldr	r3, [sp, #12]
 800d49c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d4a0:	3104      	adds	r1, #4
 800d4a2:	f1b9 0f00 	cmp.w	r9, #0
 800d4a6:	d021      	beq.n	800d4ec <__multiply+0x144>
 800d4a8:	682b      	ldr	r3, [r5, #0]
 800d4aa:	f104 0c14 	add.w	ip, r4, #20
 800d4ae:	46ae      	mov	lr, r5
 800d4b0:	f04f 0a00 	mov.w	sl, #0
 800d4b4:	f8bc b000 	ldrh.w	fp, [ip]
 800d4b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d4bc:	fb09 770b 	mla	r7, r9, fp, r7
 800d4c0:	4457      	add	r7, sl
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d4c8:	f84e 3b04 	str.w	r3, [lr], #4
 800d4cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d4d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4d4:	f8be 3000 	ldrh.w	r3, [lr]
 800d4d8:	fb09 330a 	mla	r3, r9, sl, r3
 800d4dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d4e0:	4562      	cmp	r2, ip
 800d4e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4e6:	d8e5      	bhi.n	800d4b4 <__multiply+0x10c>
 800d4e8:	9f01      	ldr	r7, [sp, #4]
 800d4ea:	51eb      	str	r3, [r5, r7]
 800d4ec:	3504      	adds	r5, #4
 800d4ee:	e799      	b.n	800d424 <__multiply+0x7c>
 800d4f0:	3e01      	subs	r6, #1
 800d4f2:	e79b      	b.n	800d42c <__multiply+0x84>
 800d4f4:	0800fc25 	.word	0x0800fc25
 800d4f8:	0800fc36 	.word	0x0800fc36

0800d4fc <__pow5mult>:
 800d4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d500:	4615      	mov	r5, r2
 800d502:	f012 0203 	ands.w	r2, r2, #3
 800d506:	4607      	mov	r7, r0
 800d508:	460e      	mov	r6, r1
 800d50a:	d007      	beq.n	800d51c <__pow5mult+0x20>
 800d50c:	4c25      	ldr	r4, [pc, #148]	@ (800d5a4 <__pow5mult+0xa8>)
 800d50e:	3a01      	subs	r2, #1
 800d510:	2300      	movs	r3, #0
 800d512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d516:	f7ff fe55 	bl	800d1c4 <__multadd>
 800d51a:	4606      	mov	r6, r0
 800d51c:	10ad      	asrs	r5, r5, #2
 800d51e:	d03d      	beq.n	800d59c <__pow5mult+0xa0>
 800d520:	69fc      	ldr	r4, [r7, #28]
 800d522:	b97c      	cbnz	r4, 800d544 <__pow5mult+0x48>
 800d524:	2010      	movs	r0, #16
 800d526:	f7ff fd35 	bl	800cf94 <malloc>
 800d52a:	4602      	mov	r2, r0
 800d52c:	61f8      	str	r0, [r7, #28]
 800d52e:	b928      	cbnz	r0, 800d53c <__pow5mult+0x40>
 800d530:	4b1d      	ldr	r3, [pc, #116]	@ (800d5a8 <__pow5mult+0xac>)
 800d532:	481e      	ldr	r0, [pc, #120]	@ (800d5ac <__pow5mult+0xb0>)
 800d534:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d538:	f001 fb6e 	bl	800ec18 <__assert_func>
 800d53c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d540:	6004      	str	r4, [r0, #0]
 800d542:	60c4      	str	r4, [r0, #12]
 800d544:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d54c:	b94c      	cbnz	r4, 800d562 <__pow5mult+0x66>
 800d54e:	f240 2171 	movw	r1, #625	@ 0x271
 800d552:	4638      	mov	r0, r7
 800d554:	f7ff ff12 	bl	800d37c <__i2b>
 800d558:	2300      	movs	r3, #0
 800d55a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d55e:	4604      	mov	r4, r0
 800d560:	6003      	str	r3, [r0, #0]
 800d562:	f04f 0900 	mov.w	r9, #0
 800d566:	07eb      	lsls	r3, r5, #31
 800d568:	d50a      	bpl.n	800d580 <__pow5mult+0x84>
 800d56a:	4631      	mov	r1, r6
 800d56c:	4622      	mov	r2, r4
 800d56e:	4638      	mov	r0, r7
 800d570:	f7ff ff1a 	bl	800d3a8 <__multiply>
 800d574:	4631      	mov	r1, r6
 800d576:	4680      	mov	r8, r0
 800d578:	4638      	mov	r0, r7
 800d57a:	f7ff fe01 	bl	800d180 <_Bfree>
 800d57e:	4646      	mov	r6, r8
 800d580:	106d      	asrs	r5, r5, #1
 800d582:	d00b      	beq.n	800d59c <__pow5mult+0xa0>
 800d584:	6820      	ldr	r0, [r4, #0]
 800d586:	b938      	cbnz	r0, 800d598 <__pow5mult+0x9c>
 800d588:	4622      	mov	r2, r4
 800d58a:	4621      	mov	r1, r4
 800d58c:	4638      	mov	r0, r7
 800d58e:	f7ff ff0b 	bl	800d3a8 <__multiply>
 800d592:	6020      	str	r0, [r4, #0]
 800d594:	f8c0 9000 	str.w	r9, [r0]
 800d598:	4604      	mov	r4, r0
 800d59a:	e7e4      	b.n	800d566 <__pow5mult+0x6a>
 800d59c:	4630      	mov	r0, r6
 800d59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5a2:	bf00      	nop
 800d5a4:	0800fc90 	.word	0x0800fc90
 800d5a8:	0800fbb6 	.word	0x0800fbb6
 800d5ac:	0800fc36 	.word	0x0800fc36

0800d5b0 <__lshift>:
 800d5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b4:	460c      	mov	r4, r1
 800d5b6:	6849      	ldr	r1, [r1, #4]
 800d5b8:	6923      	ldr	r3, [r4, #16]
 800d5ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5be:	68a3      	ldr	r3, [r4, #8]
 800d5c0:	4607      	mov	r7, r0
 800d5c2:	4691      	mov	r9, r2
 800d5c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5c8:	f108 0601 	add.w	r6, r8, #1
 800d5cc:	42b3      	cmp	r3, r6
 800d5ce:	db0b      	blt.n	800d5e8 <__lshift+0x38>
 800d5d0:	4638      	mov	r0, r7
 800d5d2:	f7ff fd95 	bl	800d100 <_Balloc>
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	b948      	cbnz	r0, 800d5ee <__lshift+0x3e>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	4b28      	ldr	r3, [pc, #160]	@ (800d680 <__lshift+0xd0>)
 800d5de:	4829      	ldr	r0, [pc, #164]	@ (800d684 <__lshift+0xd4>)
 800d5e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d5e4:	f001 fb18 	bl	800ec18 <__assert_func>
 800d5e8:	3101      	adds	r1, #1
 800d5ea:	005b      	lsls	r3, r3, #1
 800d5ec:	e7ee      	b.n	800d5cc <__lshift+0x1c>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	f100 0114 	add.w	r1, r0, #20
 800d5f4:	f100 0210 	add.w	r2, r0, #16
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	4553      	cmp	r3, sl
 800d5fc:	db33      	blt.n	800d666 <__lshift+0xb6>
 800d5fe:	6920      	ldr	r0, [r4, #16]
 800d600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d604:	f104 0314 	add.w	r3, r4, #20
 800d608:	f019 091f 	ands.w	r9, r9, #31
 800d60c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d610:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d614:	d02b      	beq.n	800d66e <__lshift+0xbe>
 800d616:	f1c9 0e20 	rsb	lr, r9, #32
 800d61a:	468a      	mov	sl, r1
 800d61c:	2200      	movs	r2, #0
 800d61e:	6818      	ldr	r0, [r3, #0]
 800d620:	fa00 f009 	lsl.w	r0, r0, r9
 800d624:	4310      	orrs	r0, r2
 800d626:	f84a 0b04 	str.w	r0, [sl], #4
 800d62a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d62e:	459c      	cmp	ip, r3
 800d630:	fa22 f20e 	lsr.w	r2, r2, lr
 800d634:	d8f3      	bhi.n	800d61e <__lshift+0x6e>
 800d636:	ebac 0304 	sub.w	r3, ip, r4
 800d63a:	3b15      	subs	r3, #21
 800d63c:	f023 0303 	bic.w	r3, r3, #3
 800d640:	3304      	adds	r3, #4
 800d642:	f104 0015 	add.w	r0, r4, #21
 800d646:	4584      	cmp	ip, r0
 800d648:	bf38      	it	cc
 800d64a:	2304      	movcc	r3, #4
 800d64c:	50ca      	str	r2, [r1, r3]
 800d64e:	b10a      	cbz	r2, 800d654 <__lshift+0xa4>
 800d650:	f108 0602 	add.w	r6, r8, #2
 800d654:	3e01      	subs	r6, #1
 800d656:	4638      	mov	r0, r7
 800d658:	612e      	str	r6, [r5, #16]
 800d65a:	4621      	mov	r1, r4
 800d65c:	f7ff fd90 	bl	800d180 <_Bfree>
 800d660:	4628      	mov	r0, r5
 800d662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d666:	f842 0f04 	str.w	r0, [r2, #4]!
 800d66a:	3301      	adds	r3, #1
 800d66c:	e7c5      	b.n	800d5fa <__lshift+0x4a>
 800d66e:	3904      	subs	r1, #4
 800d670:	f853 2b04 	ldr.w	r2, [r3], #4
 800d674:	f841 2f04 	str.w	r2, [r1, #4]!
 800d678:	459c      	cmp	ip, r3
 800d67a:	d8f9      	bhi.n	800d670 <__lshift+0xc0>
 800d67c:	e7ea      	b.n	800d654 <__lshift+0xa4>
 800d67e:	bf00      	nop
 800d680:	0800fc25 	.word	0x0800fc25
 800d684:	0800fc36 	.word	0x0800fc36

0800d688 <__mcmp>:
 800d688:	690a      	ldr	r2, [r1, #16]
 800d68a:	4603      	mov	r3, r0
 800d68c:	6900      	ldr	r0, [r0, #16]
 800d68e:	1a80      	subs	r0, r0, r2
 800d690:	b530      	push	{r4, r5, lr}
 800d692:	d10e      	bne.n	800d6b2 <__mcmp+0x2a>
 800d694:	3314      	adds	r3, #20
 800d696:	3114      	adds	r1, #20
 800d698:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d69c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d6a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d6a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d6a8:	4295      	cmp	r5, r2
 800d6aa:	d003      	beq.n	800d6b4 <__mcmp+0x2c>
 800d6ac:	d205      	bcs.n	800d6ba <__mcmp+0x32>
 800d6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b2:	bd30      	pop	{r4, r5, pc}
 800d6b4:	42a3      	cmp	r3, r4
 800d6b6:	d3f3      	bcc.n	800d6a0 <__mcmp+0x18>
 800d6b8:	e7fb      	b.n	800d6b2 <__mcmp+0x2a>
 800d6ba:	2001      	movs	r0, #1
 800d6bc:	e7f9      	b.n	800d6b2 <__mcmp+0x2a>
	...

0800d6c0 <__mdiff>:
 800d6c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c4:	4689      	mov	r9, r1
 800d6c6:	4606      	mov	r6, r0
 800d6c8:	4611      	mov	r1, r2
 800d6ca:	4648      	mov	r0, r9
 800d6cc:	4614      	mov	r4, r2
 800d6ce:	f7ff ffdb 	bl	800d688 <__mcmp>
 800d6d2:	1e05      	subs	r5, r0, #0
 800d6d4:	d112      	bne.n	800d6fc <__mdiff+0x3c>
 800d6d6:	4629      	mov	r1, r5
 800d6d8:	4630      	mov	r0, r6
 800d6da:	f7ff fd11 	bl	800d100 <_Balloc>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	b928      	cbnz	r0, 800d6ee <__mdiff+0x2e>
 800d6e2:	4b3f      	ldr	r3, [pc, #252]	@ (800d7e0 <__mdiff+0x120>)
 800d6e4:	f240 2137 	movw	r1, #567	@ 0x237
 800d6e8:	483e      	ldr	r0, [pc, #248]	@ (800d7e4 <__mdiff+0x124>)
 800d6ea:	f001 fa95 	bl	800ec18 <__assert_func>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6f4:	4610      	mov	r0, r2
 800d6f6:	b003      	add	sp, #12
 800d6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6fc:	bfbc      	itt	lt
 800d6fe:	464b      	movlt	r3, r9
 800d700:	46a1      	movlt	r9, r4
 800d702:	4630      	mov	r0, r6
 800d704:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d708:	bfba      	itte	lt
 800d70a:	461c      	movlt	r4, r3
 800d70c:	2501      	movlt	r5, #1
 800d70e:	2500      	movge	r5, #0
 800d710:	f7ff fcf6 	bl	800d100 <_Balloc>
 800d714:	4602      	mov	r2, r0
 800d716:	b918      	cbnz	r0, 800d720 <__mdiff+0x60>
 800d718:	4b31      	ldr	r3, [pc, #196]	@ (800d7e0 <__mdiff+0x120>)
 800d71a:	f240 2145 	movw	r1, #581	@ 0x245
 800d71e:	e7e3      	b.n	800d6e8 <__mdiff+0x28>
 800d720:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d724:	6926      	ldr	r6, [r4, #16]
 800d726:	60c5      	str	r5, [r0, #12]
 800d728:	f109 0310 	add.w	r3, r9, #16
 800d72c:	f109 0514 	add.w	r5, r9, #20
 800d730:	f104 0e14 	add.w	lr, r4, #20
 800d734:	f100 0b14 	add.w	fp, r0, #20
 800d738:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d73c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d740:	9301      	str	r3, [sp, #4]
 800d742:	46d9      	mov	r9, fp
 800d744:	f04f 0c00 	mov.w	ip, #0
 800d748:	9b01      	ldr	r3, [sp, #4]
 800d74a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d74e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d752:	9301      	str	r3, [sp, #4]
 800d754:	fa1f f38a 	uxth.w	r3, sl
 800d758:	4619      	mov	r1, r3
 800d75a:	b283      	uxth	r3, r0
 800d75c:	1acb      	subs	r3, r1, r3
 800d75e:	0c00      	lsrs	r0, r0, #16
 800d760:	4463      	add	r3, ip
 800d762:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d766:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d770:	4576      	cmp	r6, lr
 800d772:	f849 3b04 	str.w	r3, [r9], #4
 800d776:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d77a:	d8e5      	bhi.n	800d748 <__mdiff+0x88>
 800d77c:	1b33      	subs	r3, r6, r4
 800d77e:	3b15      	subs	r3, #21
 800d780:	f023 0303 	bic.w	r3, r3, #3
 800d784:	3415      	adds	r4, #21
 800d786:	3304      	adds	r3, #4
 800d788:	42a6      	cmp	r6, r4
 800d78a:	bf38      	it	cc
 800d78c:	2304      	movcc	r3, #4
 800d78e:	441d      	add	r5, r3
 800d790:	445b      	add	r3, fp
 800d792:	461e      	mov	r6, r3
 800d794:	462c      	mov	r4, r5
 800d796:	4544      	cmp	r4, r8
 800d798:	d30e      	bcc.n	800d7b8 <__mdiff+0xf8>
 800d79a:	f108 0103 	add.w	r1, r8, #3
 800d79e:	1b49      	subs	r1, r1, r5
 800d7a0:	f021 0103 	bic.w	r1, r1, #3
 800d7a4:	3d03      	subs	r5, #3
 800d7a6:	45a8      	cmp	r8, r5
 800d7a8:	bf38      	it	cc
 800d7aa:	2100      	movcc	r1, #0
 800d7ac:	440b      	add	r3, r1
 800d7ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d7b2:	b191      	cbz	r1, 800d7da <__mdiff+0x11a>
 800d7b4:	6117      	str	r7, [r2, #16]
 800d7b6:	e79d      	b.n	800d6f4 <__mdiff+0x34>
 800d7b8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d7bc:	46e6      	mov	lr, ip
 800d7be:	0c08      	lsrs	r0, r1, #16
 800d7c0:	fa1c fc81 	uxtah	ip, ip, r1
 800d7c4:	4471      	add	r1, lr
 800d7c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d7ca:	b289      	uxth	r1, r1
 800d7cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d7d0:	f846 1b04 	str.w	r1, [r6], #4
 800d7d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d7d8:	e7dd      	b.n	800d796 <__mdiff+0xd6>
 800d7da:	3f01      	subs	r7, #1
 800d7dc:	e7e7      	b.n	800d7ae <__mdiff+0xee>
 800d7de:	bf00      	nop
 800d7e0:	0800fc25 	.word	0x0800fc25
 800d7e4:	0800fc36 	.word	0x0800fc36

0800d7e8 <__ulp>:
 800d7e8:	b082      	sub	sp, #8
 800d7ea:	ed8d 0b00 	vstr	d0, [sp]
 800d7ee:	9a01      	ldr	r2, [sp, #4]
 800d7f0:	4b0f      	ldr	r3, [pc, #60]	@ (800d830 <__ulp+0x48>)
 800d7f2:	4013      	ands	r3, r2
 800d7f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	dc08      	bgt.n	800d80e <__ulp+0x26>
 800d7fc:	425b      	negs	r3, r3
 800d7fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d802:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d806:	da04      	bge.n	800d812 <__ulp+0x2a>
 800d808:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d80c:	4113      	asrs	r3, r2
 800d80e:	2200      	movs	r2, #0
 800d810:	e008      	b.n	800d824 <__ulp+0x3c>
 800d812:	f1a2 0314 	sub.w	r3, r2, #20
 800d816:	2b1e      	cmp	r3, #30
 800d818:	bfda      	itte	le
 800d81a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d81e:	40da      	lsrle	r2, r3
 800d820:	2201      	movgt	r2, #1
 800d822:	2300      	movs	r3, #0
 800d824:	4619      	mov	r1, r3
 800d826:	4610      	mov	r0, r2
 800d828:	ec41 0b10 	vmov	d0, r0, r1
 800d82c:	b002      	add	sp, #8
 800d82e:	4770      	bx	lr
 800d830:	7ff00000 	.word	0x7ff00000

0800d834 <__b2d>:
 800d834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d838:	6906      	ldr	r6, [r0, #16]
 800d83a:	f100 0814 	add.w	r8, r0, #20
 800d83e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d842:	1f37      	subs	r7, r6, #4
 800d844:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d848:	4610      	mov	r0, r2
 800d84a:	f7ff fd4b 	bl	800d2e4 <__hi0bits>
 800d84e:	f1c0 0320 	rsb	r3, r0, #32
 800d852:	280a      	cmp	r0, #10
 800d854:	600b      	str	r3, [r1, #0]
 800d856:	491b      	ldr	r1, [pc, #108]	@ (800d8c4 <__b2d+0x90>)
 800d858:	dc15      	bgt.n	800d886 <__b2d+0x52>
 800d85a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d85e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d862:	45b8      	cmp	r8, r7
 800d864:	ea43 0501 	orr.w	r5, r3, r1
 800d868:	bf34      	ite	cc
 800d86a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d86e:	2300      	movcs	r3, #0
 800d870:	3015      	adds	r0, #21
 800d872:	fa02 f000 	lsl.w	r0, r2, r0
 800d876:	fa23 f30c 	lsr.w	r3, r3, ip
 800d87a:	4303      	orrs	r3, r0
 800d87c:	461c      	mov	r4, r3
 800d87e:	ec45 4b10 	vmov	d0, r4, r5
 800d882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d886:	45b8      	cmp	r8, r7
 800d888:	bf3a      	itte	cc
 800d88a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d88e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d892:	2300      	movcs	r3, #0
 800d894:	380b      	subs	r0, #11
 800d896:	d012      	beq.n	800d8be <__b2d+0x8a>
 800d898:	f1c0 0120 	rsb	r1, r0, #32
 800d89c:	fa23 f401 	lsr.w	r4, r3, r1
 800d8a0:	4082      	lsls	r2, r0
 800d8a2:	4322      	orrs	r2, r4
 800d8a4:	4547      	cmp	r7, r8
 800d8a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d8aa:	bf8c      	ite	hi
 800d8ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d8b0:	2200      	movls	r2, #0
 800d8b2:	4083      	lsls	r3, r0
 800d8b4:	40ca      	lsrs	r2, r1
 800d8b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d8ba:	4313      	orrs	r3, r2
 800d8bc:	e7de      	b.n	800d87c <__b2d+0x48>
 800d8be:	ea42 0501 	orr.w	r5, r2, r1
 800d8c2:	e7db      	b.n	800d87c <__b2d+0x48>
 800d8c4:	3ff00000 	.word	0x3ff00000

0800d8c8 <__d2b>:
 800d8c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8cc:	460f      	mov	r7, r1
 800d8ce:	2101      	movs	r1, #1
 800d8d0:	ec59 8b10 	vmov	r8, r9, d0
 800d8d4:	4616      	mov	r6, r2
 800d8d6:	f7ff fc13 	bl	800d100 <_Balloc>
 800d8da:	4604      	mov	r4, r0
 800d8dc:	b930      	cbnz	r0, 800d8ec <__d2b+0x24>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	4b23      	ldr	r3, [pc, #140]	@ (800d970 <__d2b+0xa8>)
 800d8e2:	4824      	ldr	r0, [pc, #144]	@ (800d974 <__d2b+0xac>)
 800d8e4:	f240 310f 	movw	r1, #783	@ 0x30f
 800d8e8:	f001 f996 	bl	800ec18 <__assert_func>
 800d8ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8f4:	b10d      	cbz	r5, 800d8fa <__d2b+0x32>
 800d8f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8fa:	9301      	str	r3, [sp, #4]
 800d8fc:	f1b8 0300 	subs.w	r3, r8, #0
 800d900:	d023      	beq.n	800d94a <__d2b+0x82>
 800d902:	4668      	mov	r0, sp
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	f7ff fd0c 	bl	800d322 <__lo0bits>
 800d90a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d90e:	b1d0      	cbz	r0, 800d946 <__d2b+0x7e>
 800d910:	f1c0 0320 	rsb	r3, r0, #32
 800d914:	fa02 f303 	lsl.w	r3, r2, r3
 800d918:	430b      	orrs	r3, r1
 800d91a:	40c2      	lsrs	r2, r0
 800d91c:	6163      	str	r3, [r4, #20]
 800d91e:	9201      	str	r2, [sp, #4]
 800d920:	9b01      	ldr	r3, [sp, #4]
 800d922:	61a3      	str	r3, [r4, #24]
 800d924:	2b00      	cmp	r3, #0
 800d926:	bf0c      	ite	eq
 800d928:	2201      	moveq	r2, #1
 800d92a:	2202      	movne	r2, #2
 800d92c:	6122      	str	r2, [r4, #16]
 800d92e:	b1a5      	cbz	r5, 800d95a <__d2b+0x92>
 800d930:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d934:	4405      	add	r5, r0
 800d936:	603d      	str	r5, [r7, #0]
 800d938:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d93c:	6030      	str	r0, [r6, #0]
 800d93e:	4620      	mov	r0, r4
 800d940:	b003      	add	sp, #12
 800d942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d946:	6161      	str	r1, [r4, #20]
 800d948:	e7ea      	b.n	800d920 <__d2b+0x58>
 800d94a:	a801      	add	r0, sp, #4
 800d94c:	f7ff fce9 	bl	800d322 <__lo0bits>
 800d950:	9b01      	ldr	r3, [sp, #4]
 800d952:	6163      	str	r3, [r4, #20]
 800d954:	3020      	adds	r0, #32
 800d956:	2201      	movs	r2, #1
 800d958:	e7e8      	b.n	800d92c <__d2b+0x64>
 800d95a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d95e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d962:	6038      	str	r0, [r7, #0]
 800d964:	6918      	ldr	r0, [r3, #16]
 800d966:	f7ff fcbd 	bl	800d2e4 <__hi0bits>
 800d96a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d96e:	e7e5      	b.n	800d93c <__d2b+0x74>
 800d970:	0800fc25 	.word	0x0800fc25
 800d974:	0800fc36 	.word	0x0800fc36

0800d978 <__ratio>:
 800d978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97c:	b085      	sub	sp, #20
 800d97e:	e9cd 1000 	strd	r1, r0, [sp]
 800d982:	a902      	add	r1, sp, #8
 800d984:	f7ff ff56 	bl	800d834 <__b2d>
 800d988:	9800      	ldr	r0, [sp, #0]
 800d98a:	a903      	add	r1, sp, #12
 800d98c:	ec55 4b10 	vmov	r4, r5, d0
 800d990:	f7ff ff50 	bl	800d834 <__b2d>
 800d994:	9b01      	ldr	r3, [sp, #4]
 800d996:	6919      	ldr	r1, [r3, #16]
 800d998:	9b00      	ldr	r3, [sp, #0]
 800d99a:	691b      	ldr	r3, [r3, #16]
 800d99c:	1ac9      	subs	r1, r1, r3
 800d99e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d9a2:	1a9b      	subs	r3, r3, r2
 800d9a4:	ec5b ab10 	vmov	sl, fp, d0
 800d9a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	bfce      	itee	gt
 800d9b0:	462a      	movgt	r2, r5
 800d9b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d9b6:	465a      	movle	r2, fp
 800d9b8:	462f      	mov	r7, r5
 800d9ba:	46d9      	mov	r9, fp
 800d9bc:	bfcc      	ite	gt
 800d9be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d9c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d9c6:	464b      	mov	r3, r9
 800d9c8:	4652      	mov	r2, sl
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	4639      	mov	r1, r7
 800d9ce:	f7f2 ff55 	bl	800087c <__aeabi_ddiv>
 800d9d2:	ec41 0b10 	vmov	d0, r0, r1
 800d9d6:	b005      	add	sp, #20
 800d9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d9dc <__copybits>:
 800d9dc:	3901      	subs	r1, #1
 800d9de:	b570      	push	{r4, r5, r6, lr}
 800d9e0:	1149      	asrs	r1, r1, #5
 800d9e2:	6914      	ldr	r4, [r2, #16]
 800d9e4:	3101      	adds	r1, #1
 800d9e6:	f102 0314 	add.w	r3, r2, #20
 800d9ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d9ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d9f2:	1f05      	subs	r5, r0, #4
 800d9f4:	42a3      	cmp	r3, r4
 800d9f6:	d30c      	bcc.n	800da12 <__copybits+0x36>
 800d9f8:	1aa3      	subs	r3, r4, r2
 800d9fa:	3b11      	subs	r3, #17
 800d9fc:	f023 0303 	bic.w	r3, r3, #3
 800da00:	3211      	adds	r2, #17
 800da02:	42a2      	cmp	r2, r4
 800da04:	bf88      	it	hi
 800da06:	2300      	movhi	r3, #0
 800da08:	4418      	add	r0, r3
 800da0a:	2300      	movs	r3, #0
 800da0c:	4288      	cmp	r0, r1
 800da0e:	d305      	bcc.n	800da1c <__copybits+0x40>
 800da10:	bd70      	pop	{r4, r5, r6, pc}
 800da12:	f853 6b04 	ldr.w	r6, [r3], #4
 800da16:	f845 6f04 	str.w	r6, [r5, #4]!
 800da1a:	e7eb      	b.n	800d9f4 <__copybits+0x18>
 800da1c:	f840 3b04 	str.w	r3, [r0], #4
 800da20:	e7f4      	b.n	800da0c <__copybits+0x30>

0800da22 <__any_on>:
 800da22:	f100 0214 	add.w	r2, r0, #20
 800da26:	6900      	ldr	r0, [r0, #16]
 800da28:	114b      	asrs	r3, r1, #5
 800da2a:	4298      	cmp	r0, r3
 800da2c:	b510      	push	{r4, lr}
 800da2e:	db11      	blt.n	800da54 <__any_on+0x32>
 800da30:	dd0a      	ble.n	800da48 <__any_on+0x26>
 800da32:	f011 011f 	ands.w	r1, r1, #31
 800da36:	d007      	beq.n	800da48 <__any_on+0x26>
 800da38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800da3c:	fa24 f001 	lsr.w	r0, r4, r1
 800da40:	fa00 f101 	lsl.w	r1, r0, r1
 800da44:	428c      	cmp	r4, r1
 800da46:	d10b      	bne.n	800da60 <__any_on+0x3e>
 800da48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d803      	bhi.n	800da58 <__any_on+0x36>
 800da50:	2000      	movs	r0, #0
 800da52:	bd10      	pop	{r4, pc}
 800da54:	4603      	mov	r3, r0
 800da56:	e7f7      	b.n	800da48 <__any_on+0x26>
 800da58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da5c:	2900      	cmp	r1, #0
 800da5e:	d0f5      	beq.n	800da4c <__any_on+0x2a>
 800da60:	2001      	movs	r0, #1
 800da62:	e7f6      	b.n	800da52 <__any_on+0x30>

0800da64 <sulp>:
 800da64:	b570      	push	{r4, r5, r6, lr}
 800da66:	4604      	mov	r4, r0
 800da68:	460d      	mov	r5, r1
 800da6a:	ec45 4b10 	vmov	d0, r4, r5
 800da6e:	4616      	mov	r6, r2
 800da70:	f7ff feba 	bl	800d7e8 <__ulp>
 800da74:	ec51 0b10 	vmov	r0, r1, d0
 800da78:	b17e      	cbz	r6, 800da9a <sulp+0x36>
 800da7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800da7e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800da82:	2b00      	cmp	r3, #0
 800da84:	dd09      	ble.n	800da9a <sulp+0x36>
 800da86:	051b      	lsls	r3, r3, #20
 800da88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800da8c:	2400      	movs	r4, #0
 800da8e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800da92:	4622      	mov	r2, r4
 800da94:	462b      	mov	r3, r5
 800da96:	f7f2 fdc7 	bl	8000628 <__aeabi_dmul>
 800da9a:	ec41 0b10 	vmov	d0, r0, r1
 800da9e:	bd70      	pop	{r4, r5, r6, pc}

0800daa0 <_strtod_l>:
 800daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa4:	b09f      	sub	sp, #124	@ 0x7c
 800daa6:	460c      	mov	r4, r1
 800daa8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800daaa:	2200      	movs	r2, #0
 800daac:	921a      	str	r2, [sp, #104]	@ 0x68
 800daae:	9005      	str	r0, [sp, #20]
 800dab0:	f04f 0a00 	mov.w	sl, #0
 800dab4:	f04f 0b00 	mov.w	fp, #0
 800dab8:	460a      	mov	r2, r1
 800daba:	9219      	str	r2, [sp, #100]	@ 0x64
 800dabc:	7811      	ldrb	r1, [r2, #0]
 800dabe:	292b      	cmp	r1, #43	@ 0x2b
 800dac0:	d04a      	beq.n	800db58 <_strtod_l+0xb8>
 800dac2:	d838      	bhi.n	800db36 <_strtod_l+0x96>
 800dac4:	290d      	cmp	r1, #13
 800dac6:	d832      	bhi.n	800db2e <_strtod_l+0x8e>
 800dac8:	2908      	cmp	r1, #8
 800daca:	d832      	bhi.n	800db32 <_strtod_l+0x92>
 800dacc:	2900      	cmp	r1, #0
 800dace:	d03b      	beq.n	800db48 <_strtod_l+0xa8>
 800dad0:	2200      	movs	r2, #0
 800dad2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dad4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dad6:	782a      	ldrb	r2, [r5, #0]
 800dad8:	2a30      	cmp	r2, #48	@ 0x30
 800dada:	f040 80b3 	bne.w	800dc44 <_strtod_l+0x1a4>
 800dade:	786a      	ldrb	r2, [r5, #1]
 800dae0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dae4:	2a58      	cmp	r2, #88	@ 0x58
 800dae6:	d16e      	bne.n	800dbc6 <_strtod_l+0x126>
 800dae8:	9302      	str	r3, [sp, #8]
 800daea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	ab1a      	add	r3, sp, #104	@ 0x68
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	4a8e      	ldr	r2, [pc, #568]	@ (800dd2c <_strtod_l+0x28c>)
 800daf4:	9805      	ldr	r0, [sp, #20]
 800daf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800daf8:	a919      	add	r1, sp, #100	@ 0x64
 800dafa:	f001 f927 	bl	800ed4c <__gethex>
 800dafe:	f010 060f 	ands.w	r6, r0, #15
 800db02:	4604      	mov	r4, r0
 800db04:	d005      	beq.n	800db12 <_strtod_l+0x72>
 800db06:	2e06      	cmp	r6, #6
 800db08:	d128      	bne.n	800db5c <_strtod_l+0xbc>
 800db0a:	3501      	adds	r5, #1
 800db0c:	2300      	movs	r3, #0
 800db0e:	9519      	str	r5, [sp, #100]	@ 0x64
 800db10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800db14:	2b00      	cmp	r3, #0
 800db16:	f040 858e 	bne.w	800e636 <_strtod_l+0xb96>
 800db1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db1c:	b1cb      	cbz	r3, 800db52 <_strtod_l+0xb2>
 800db1e:	4652      	mov	r2, sl
 800db20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800db24:	ec43 2b10 	vmov	d0, r2, r3
 800db28:	b01f      	add	sp, #124	@ 0x7c
 800db2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db2e:	2920      	cmp	r1, #32
 800db30:	d1ce      	bne.n	800dad0 <_strtod_l+0x30>
 800db32:	3201      	adds	r2, #1
 800db34:	e7c1      	b.n	800daba <_strtod_l+0x1a>
 800db36:	292d      	cmp	r1, #45	@ 0x2d
 800db38:	d1ca      	bne.n	800dad0 <_strtod_l+0x30>
 800db3a:	2101      	movs	r1, #1
 800db3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800db3e:	1c51      	adds	r1, r2, #1
 800db40:	9119      	str	r1, [sp, #100]	@ 0x64
 800db42:	7852      	ldrb	r2, [r2, #1]
 800db44:	2a00      	cmp	r2, #0
 800db46:	d1c5      	bne.n	800dad4 <_strtod_l+0x34>
 800db48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800db4a:	9419      	str	r4, [sp, #100]	@ 0x64
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	f040 8570 	bne.w	800e632 <_strtod_l+0xb92>
 800db52:	4652      	mov	r2, sl
 800db54:	465b      	mov	r3, fp
 800db56:	e7e5      	b.n	800db24 <_strtod_l+0x84>
 800db58:	2100      	movs	r1, #0
 800db5a:	e7ef      	b.n	800db3c <_strtod_l+0x9c>
 800db5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800db5e:	b13a      	cbz	r2, 800db70 <_strtod_l+0xd0>
 800db60:	2135      	movs	r1, #53	@ 0x35
 800db62:	a81c      	add	r0, sp, #112	@ 0x70
 800db64:	f7ff ff3a 	bl	800d9dc <__copybits>
 800db68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db6a:	9805      	ldr	r0, [sp, #20]
 800db6c:	f7ff fb08 	bl	800d180 <_Bfree>
 800db70:	3e01      	subs	r6, #1
 800db72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800db74:	2e04      	cmp	r6, #4
 800db76:	d806      	bhi.n	800db86 <_strtod_l+0xe6>
 800db78:	e8df f006 	tbb	[pc, r6]
 800db7c:	201d0314 	.word	0x201d0314
 800db80:	14          	.byte	0x14
 800db81:	00          	.byte	0x00
 800db82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800db86:	05e1      	lsls	r1, r4, #23
 800db88:	bf48      	it	mi
 800db8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800db8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db92:	0d1b      	lsrs	r3, r3, #20
 800db94:	051b      	lsls	r3, r3, #20
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1bb      	bne.n	800db12 <_strtod_l+0x72>
 800db9a:	f7fe fb2f 	bl	800c1fc <__errno>
 800db9e:	2322      	movs	r3, #34	@ 0x22
 800dba0:	6003      	str	r3, [r0, #0]
 800dba2:	e7b6      	b.n	800db12 <_strtod_l+0x72>
 800dba4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800dba8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dbac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800dbb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dbb4:	e7e7      	b.n	800db86 <_strtod_l+0xe6>
 800dbb6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800dd34 <_strtod_l+0x294>
 800dbba:	e7e4      	b.n	800db86 <_strtod_l+0xe6>
 800dbbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dbc0:	f04f 3aff 	mov.w	sl, #4294967295
 800dbc4:	e7df      	b.n	800db86 <_strtod_l+0xe6>
 800dbc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbc8:	1c5a      	adds	r2, r3, #1
 800dbca:	9219      	str	r2, [sp, #100]	@ 0x64
 800dbcc:	785b      	ldrb	r3, [r3, #1]
 800dbce:	2b30      	cmp	r3, #48	@ 0x30
 800dbd0:	d0f9      	beq.n	800dbc6 <_strtod_l+0x126>
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d09d      	beq.n	800db12 <_strtod_l+0x72>
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbdc:	930c      	str	r3, [sp, #48]	@ 0x30
 800dbde:	2300      	movs	r3, #0
 800dbe0:	9308      	str	r3, [sp, #32]
 800dbe2:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbe4:	461f      	mov	r7, r3
 800dbe6:	220a      	movs	r2, #10
 800dbe8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dbea:	7805      	ldrb	r5, [r0, #0]
 800dbec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800dbf0:	b2d9      	uxtb	r1, r3
 800dbf2:	2909      	cmp	r1, #9
 800dbf4:	d928      	bls.n	800dc48 <_strtod_l+0x1a8>
 800dbf6:	494e      	ldr	r1, [pc, #312]	@ (800dd30 <_strtod_l+0x290>)
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	f000 ffd5 	bl	800eba8 <strncmp>
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	d032      	beq.n	800dc68 <_strtod_l+0x1c8>
 800dc02:	2000      	movs	r0, #0
 800dc04:	462a      	mov	r2, r5
 800dc06:	4681      	mov	r9, r0
 800dc08:	463d      	mov	r5, r7
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2a65      	cmp	r2, #101	@ 0x65
 800dc0e:	d001      	beq.n	800dc14 <_strtod_l+0x174>
 800dc10:	2a45      	cmp	r2, #69	@ 0x45
 800dc12:	d114      	bne.n	800dc3e <_strtod_l+0x19e>
 800dc14:	b91d      	cbnz	r5, 800dc1e <_strtod_l+0x17e>
 800dc16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc18:	4302      	orrs	r2, r0
 800dc1a:	d095      	beq.n	800db48 <_strtod_l+0xa8>
 800dc1c:	2500      	movs	r5, #0
 800dc1e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dc20:	1c62      	adds	r2, r4, #1
 800dc22:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc24:	7862      	ldrb	r2, [r4, #1]
 800dc26:	2a2b      	cmp	r2, #43	@ 0x2b
 800dc28:	d077      	beq.n	800dd1a <_strtod_l+0x27a>
 800dc2a:	2a2d      	cmp	r2, #45	@ 0x2d
 800dc2c:	d07b      	beq.n	800dd26 <_strtod_l+0x286>
 800dc2e:	f04f 0c00 	mov.w	ip, #0
 800dc32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dc36:	2909      	cmp	r1, #9
 800dc38:	f240 8082 	bls.w	800dd40 <_strtod_l+0x2a0>
 800dc3c:	9419      	str	r4, [sp, #100]	@ 0x64
 800dc3e:	f04f 0800 	mov.w	r8, #0
 800dc42:	e0a2      	b.n	800dd8a <_strtod_l+0x2ea>
 800dc44:	2300      	movs	r3, #0
 800dc46:	e7c7      	b.n	800dbd8 <_strtod_l+0x138>
 800dc48:	2f08      	cmp	r7, #8
 800dc4a:	bfd5      	itete	le
 800dc4c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800dc4e:	9908      	ldrgt	r1, [sp, #32]
 800dc50:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc54:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dc58:	f100 0001 	add.w	r0, r0, #1
 800dc5c:	bfd4      	ite	le
 800dc5e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800dc60:	9308      	strgt	r3, [sp, #32]
 800dc62:	3701      	adds	r7, #1
 800dc64:	9019      	str	r0, [sp, #100]	@ 0x64
 800dc66:	e7bf      	b.n	800dbe8 <_strtod_l+0x148>
 800dc68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc6e:	785a      	ldrb	r2, [r3, #1]
 800dc70:	b37f      	cbz	r7, 800dcd2 <_strtod_l+0x232>
 800dc72:	4681      	mov	r9, r0
 800dc74:	463d      	mov	r5, r7
 800dc76:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800dc7a:	2b09      	cmp	r3, #9
 800dc7c:	d912      	bls.n	800dca4 <_strtod_l+0x204>
 800dc7e:	2301      	movs	r3, #1
 800dc80:	e7c4      	b.n	800dc0c <_strtod_l+0x16c>
 800dc82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc84:	1c5a      	adds	r2, r3, #1
 800dc86:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc88:	785a      	ldrb	r2, [r3, #1]
 800dc8a:	3001      	adds	r0, #1
 800dc8c:	2a30      	cmp	r2, #48	@ 0x30
 800dc8e:	d0f8      	beq.n	800dc82 <_strtod_l+0x1e2>
 800dc90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dc94:	2b08      	cmp	r3, #8
 800dc96:	f200 84d3 	bhi.w	800e640 <_strtod_l+0xba0>
 800dc9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc9c:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc9e:	4681      	mov	r9, r0
 800dca0:	2000      	movs	r0, #0
 800dca2:	4605      	mov	r5, r0
 800dca4:	3a30      	subs	r2, #48	@ 0x30
 800dca6:	f100 0301 	add.w	r3, r0, #1
 800dcaa:	d02a      	beq.n	800dd02 <_strtod_l+0x262>
 800dcac:	4499      	add	r9, r3
 800dcae:	eb00 0c05 	add.w	ip, r0, r5
 800dcb2:	462b      	mov	r3, r5
 800dcb4:	210a      	movs	r1, #10
 800dcb6:	4563      	cmp	r3, ip
 800dcb8:	d10d      	bne.n	800dcd6 <_strtod_l+0x236>
 800dcba:	1c69      	adds	r1, r5, #1
 800dcbc:	4401      	add	r1, r0
 800dcbe:	4428      	add	r0, r5
 800dcc0:	2808      	cmp	r0, #8
 800dcc2:	dc16      	bgt.n	800dcf2 <_strtod_l+0x252>
 800dcc4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dcc6:	230a      	movs	r3, #10
 800dcc8:	fb03 2300 	mla	r3, r3, r0, r2
 800dccc:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcce:	2300      	movs	r3, #0
 800dcd0:	e018      	b.n	800dd04 <_strtod_l+0x264>
 800dcd2:	4638      	mov	r0, r7
 800dcd4:	e7da      	b.n	800dc8c <_strtod_l+0x1ec>
 800dcd6:	2b08      	cmp	r3, #8
 800dcd8:	f103 0301 	add.w	r3, r3, #1
 800dcdc:	dc03      	bgt.n	800dce6 <_strtod_l+0x246>
 800dcde:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dce0:	434e      	muls	r6, r1
 800dce2:	960a      	str	r6, [sp, #40]	@ 0x28
 800dce4:	e7e7      	b.n	800dcb6 <_strtod_l+0x216>
 800dce6:	2b10      	cmp	r3, #16
 800dce8:	bfde      	ittt	le
 800dcea:	9e08      	ldrle	r6, [sp, #32]
 800dcec:	434e      	mulle	r6, r1
 800dcee:	9608      	strle	r6, [sp, #32]
 800dcf0:	e7e1      	b.n	800dcb6 <_strtod_l+0x216>
 800dcf2:	280f      	cmp	r0, #15
 800dcf4:	dceb      	bgt.n	800dcce <_strtod_l+0x22e>
 800dcf6:	9808      	ldr	r0, [sp, #32]
 800dcf8:	230a      	movs	r3, #10
 800dcfa:	fb03 2300 	mla	r3, r3, r0, r2
 800dcfe:	9308      	str	r3, [sp, #32]
 800dd00:	e7e5      	b.n	800dcce <_strtod_l+0x22e>
 800dd02:	4629      	mov	r1, r5
 800dd04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd06:	1c50      	adds	r0, r2, #1
 800dd08:	9019      	str	r0, [sp, #100]	@ 0x64
 800dd0a:	7852      	ldrb	r2, [r2, #1]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	460d      	mov	r5, r1
 800dd10:	e7b1      	b.n	800dc76 <_strtod_l+0x1d6>
 800dd12:	f04f 0900 	mov.w	r9, #0
 800dd16:	2301      	movs	r3, #1
 800dd18:	e77d      	b.n	800dc16 <_strtod_l+0x176>
 800dd1a:	f04f 0c00 	mov.w	ip, #0
 800dd1e:	1ca2      	adds	r2, r4, #2
 800dd20:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd22:	78a2      	ldrb	r2, [r4, #2]
 800dd24:	e785      	b.n	800dc32 <_strtod_l+0x192>
 800dd26:	f04f 0c01 	mov.w	ip, #1
 800dd2a:	e7f8      	b.n	800dd1e <_strtod_l+0x27e>
 800dd2c:	0800fda8 	.word	0x0800fda8
 800dd30:	0800fd90 	.word	0x0800fd90
 800dd34:	7ff00000 	.word	0x7ff00000
 800dd38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd3a:	1c51      	adds	r1, r2, #1
 800dd3c:	9119      	str	r1, [sp, #100]	@ 0x64
 800dd3e:	7852      	ldrb	r2, [r2, #1]
 800dd40:	2a30      	cmp	r2, #48	@ 0x30
 800dd42:	d0f9      	beq.n	800dd38 <_strtod_l+0x298>
 800dd44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dd48:	2908      	cmp	r1, #8
 800dd4a:	f63f af78 	bhi.w	800dc3e <_strtod_l+0x19e>
 800dd4e:	3a30      	subs	r2, #48	@ 0x30
 800dd50:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd54:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dd56:	f04f 080a 	mov.w	r8, #10
 800dd5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd5c:	1c56      	adds	r6, r2, #1
 800dd5e:	9619      	str	r6, [sp, #100]	@ 0x64
 800dd60:	7852      	ldrb	r2, [r2, #1]
 800dd62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dd66:	f1be 0f09 	cmp.w	lr, #9
 800dd6a:	d939      	bls.n	800dde0 <_strtod_l+0x340>
 800dd6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dd6e:	1a76      	subs	r6, r6, r1
 800dd70:	2e08      	cmp	r6, #8
 800dd72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dd76:	dc03      	bgt.n	800dd80 <_strtod_l+0x2e0>
 800dd78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dd7a:	4588      	cmp	r8, r1
 800dd7c:	bfa8      	it	ge
 800dd7e:	4688      	movge	r8, r1
 800dd80:	f1bc 0f00 	cmp.w	ip, #0
 800dd84:	d001      	beq.n	800dd8a <_strtod_l+0x2ea>
 800dd86:	f1c8 0800 	rsb	r8, r8, #0
 800dd8a:	2d00      	cmp	r5, #0
 800dd8c:	d14e      	bne.n	800de2c <_strtod_l+0x38c>
 800dd8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd90:	4308      	orrs	r0, r1
 800dd92:	f47f aebe 	bne.w	800db12 <_strtod_l+0x72>
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f47f aed6 	bne.w	800db48 <_strtod_l+0xa8>
 800dd9c:	2a69      	cmp	r2, #105	@ 0x69
 800dd9e:	d028      	beq.n	800ddf2 <_strtod_l+0x352>
 800dda0:	dc25      	bgt.n	800ddee <_strtod_l+0x34e>
 800dda2:	2a49      	cmp	r2, #73	@ 0x49
 800dda4:	d025      	beq.n	800ddf2 <_strtod_l+0x352>
 800dda6:	2a4e      	cmp	r2, #78	@ 0x4e
 800dda8:	f47f aece 	bne.w	800db48 <_strtod_l+0xa8>
 800ddac:	499b      	ldr	r1, [pc, #620]	@ (800e01c <_strtod_l+0x57c>)
 800ddae:	a819      	add	r0, sp, #100	@ 0x64
 800ddb0:	f001 f9ee 	bl	800f190 <__match>
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	f43f aec7 	beq.w	800db48 <_strtod_l+0xa8>
 800ddba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	2b28      	cmp	r3, #40	@ 0x28
 800ddc0:	d12e      	bne.n	800de20 <_strtod_l+0x380>
 800ddc2:	4997      	ldr	r1, [pc, #604]	@ (800e020 <_strtod_l+0x580>)
 800ddc4:	aa1c      	add	r2, sp, #112	@ 0x70
 800ddc6:	a819      	add	r0, sp, #100	@ 0x64
 800ddc8:	f001 f9f6 	bl	800f1b8 <__hexnan>
 800ddcc:	2805      	cmp	r0, #5
 800ddce:	d127      	bne.n	800de20 <_strtod_l+0x380>
 800ddd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ddd2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ddd6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ddda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ddde:	e698      	b.n	800db12 <_strtod_l+0x72>
 800dde0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dde2:	fb08 2101 	mla	r1, r8, r1, r2
 800dde6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ddea:	920e      	str	r2, [sp, #56]	@ 0x38
 800ddec:	e7b5      	b.n	800dd5a <_strtod_l+0x2ba>
 800ddee:	2a6e      	cmp	r2, #110	@ 0x6e
 800ddf0:	e7da      	b.n	800dda8 <_strtod_l+0x308>
 800ddf2:	498c      	ldr	r1, [pc, #560]	@ (800e024 <_strtod_l+0x584>)
 800ddf4:	a819      	add	r0, sp, #100	@ 0x64
 800ddf6:	f001 f9cb 	bl	800f190 <__match>
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	f43f aea4 	beq.w	800db48 <_strtod_l+0xa8>
 800de00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de02:	4989      	ldr	r1, [pc, #548]	@ (800e028 <_strtod_l+0x588>)
 800de04:	3b01      	subs	r3, #1
 800de06:	a819      	add	r0, sp, #100	@ 0x64
 800de08:	9319      	str	r3, [sp, #100]	@ 0x64
 800de0a:	f001 f9c1 	bl	800f190 <__match>
 800de0e:	b910      	cbnz	r0, 800de16 <_strtod_l+0x376>
 800de10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de12:	3301      	adds	r3, #1
 800de14:	9319      	str	r3, [sp, #100]	@ 0x64
 800de16:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e038 <_strtod_l+0x598>
 800de1a:	f04f 0a00 	mov.w	sl, #0
 800de1e:	e678      	b.n	800db12 <_strtod_l+0x72>
 800de20:	4882      	ldr	r0, [pc, #520]	@ (800e02c <_strtod_l+0x58c>)
 800de22:	f000 fef1 	bl	800ec08 <nan>
 800de26:	ec5b ab10 	vmov	sl, fp, d0
 800de2a:	e672      	b.n	800db12 <_strtod_l+0x72>
 800de2c:	eba8 0309 	sub.w	r3, r8, r9
 800de30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800de32:	9309      	str	r3, [sp, #36]	@ 0x24
 800de34:	2f00      	cmp	r7, #0
 800de36:	bf08      	it	eq
 800de38:	462f      	moveq	r7, r5
 800de3a:	2d10      	cmp	r5, #16
 800de3c:	462c      	mov	r4, r5
 800de3e:	bfa8      	it	ge
 800de40:	2410      	movge	r4, #16
 800de42:	f7f2 fb77 	bl	8000534 <__aeabi_ui2d>
 800de46:	2d09      	cmp	r5, #9
 800de48:	4682      	mov	sl, r0
 800de4a:	468b      	mov	fp, r1
 800de4c:	dc13      	bgt.n	800de76 <_strtod_l+0x3d6>
 800de4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de50:	2b00      	cmp	r3, #0
 800de52:	f43f ae5e 	beq.w	800db12 <_strtod_l+0x72>
 800de56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de58:	dd78      	ble.n	800df4c <_strtod_l+0x4ac>
 800de5a:	2b16      	cmp	r3, #22
 800de5c:	dc5f      	bgt.n	800df1e <_strtod_l+0x47e>
 800de5e:	4974      	ldr	r1, [pc, #464]	@ (800e030 <_strtod_l+0x590>)
 800de60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de68:	4652      	mov	r2, sl
 800de6a:	465b      	mov	r3, fp
 800de6c:	f7f2 fbdc 	bl	8000628 <__aeabi_dmul>
 800de70:	4682      	mov	sl, r0
 800de72:	468b      	mov	fp, r1
 800de74:	e64d      	b.n	800db12 <_strtod_l+0x72>
 800de76:	4b6e      	ldr	r3, [pc, #440]	@ (800e030 <_strtod_l+0x590>)
 800de78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800de80:	f7f2 fbd2 	bl	8000628 <__aeabi_dmul>
 800de84:	4682      	mov	sl, r0
 800de86:	9808      	ldr	r0, [sp, #32]
 800de88:	468b      	mov	fp, r1
 800de8a:	f7f2 fb53 	bl	8000534 <__aeabi_ui2d>
 800de8e:	4602      	mov	r2, r0
 800de90:	460b      	mov	r3, r1
 800de92:	4650      	mov	r0, sl
 800de94:	4659      	mov	r1, fp
 800de96:	f7f2 fa11 	bl	80002bc <__adddf3>
 800de9a:	2d0f      	cmp	r5, #15
 800de9c:	4682      	mov	sl, r0
 800de9e:	468b      	mov	fp, r1
 800dea0:	ddd5      	ble.n	800de4e <_strtod_l+0x3ae>
 800dea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dea4:	1b2c      	subs	r4, r5, r4
 800dea6:	441c      	add	r4, r3
 800dea8:	2c00      	cmp	r4, #0
 800deaa:	f340 8096 	ble.w	800dfda <_strtod_l+0x53a>
 800deae:	f014 030f 	ands.w	r3, r4, #15
 800deb2:	d00a      	beq.n	800deca <_strtod_l+0x42a>
 800deb4:	495e      	ldr	r1, [pc, #376]	@ (800e030 <_strtod_l+0x590>)
 800deb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800deba:	4652      	mov	r2, sl
 800debc:	465b      	mov	r3, fp
 800debe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dec2:	f7f2 fbb1 	bl	8000628 <__aeabi_dmul>
 800dec6:	4682      	mov	sl, r0
 800dec8:	468b      	mov	fp, r1
 800deca:	f034 040f 	bics.w	r4, r4, #15
 800dece:	d073      	beq.n	800dfb8 <_strtod_l+0x518>
 800ded0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ded4:	dd48      	ble.n	800df68 <_strtod_l+0x4c8>
 800ded6:	2400      	movs	r4, #0
 800ded8:	46a0      	mov	r8, r4
 800deda:	940a      	str	r4, [sp, #40]	@ 0x28
 800dedc:	46a1      	mov	r9, r4
 800dede:	9a05      	ldr	r2, [sp, #20]
 800dee0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e038 <_strtod_l+0x598>
 800dee4:	2322      	movs	r3, #34	@ 0x22
 800dee6:	6013      	str	r3, [r2, #0]
 800dee8:	f04f 0a00 	mov.w	sl, #0
 800deec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800deee:	2b00      	cmp	r3, #0
 800def0:	f43f ae0f 	beq.w	800db12 <_strtod_l+0x72>
 800def4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800def6:	9805      	ldr	r0, [sp, #20]
 800def8:	f7ff f942 	bl	800d180 <_Bfree>
 800defc:	9805      	ldr	r0, [sp, #20]
 800defe:	4649      	mov	r1, r9
 800df00:	f7ff f93e 	bl	800d180 <_Bfree>
 800df04:	9805      	ldr	r0, [sp, #20]
 800df06:	4641      	mov	r1, r8
 800df08:	f7ff f93a 	bl	800d180 <_Bfree>
 800df0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800df0e:	9805      	ldr	r0, [sp, #20]
 800df10:	f7ff f936 	bl	800d180 <_Bfree>
 800df14:	9805      	ldr	r0, [sp, #20]
 800df16:	4621      	mov	r1, r4
 800df18:	f7ff f932 	bl	800d180 <_Bfree>
 800df1c:	e5f9      	b.n	800db12 <_strtod_l+0x72>
 800df1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800df24:	4293      	cmp	r3, r2
 800df26:	dbbc      	blt.n	800dea2 <_strtod_l+0x402>
 800df28:	4c41      	ldr	r4, [pc, #260]	@ (800e030 <_strtod_l+0x590>)
 800df2a:	f1c5 050f 	rsb	r5, r5, #15
 800df2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800df32:	4652      	mov	r2, sl
 800df34:	465b      	mov	r3, fp
 800df36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df3a:	f7f2 fb75 	bl	8000628 <__aeabi_dmul>
 800df3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df40:	1b5d      	subs	r5, r3, r5
 800df42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800df46:	e9d4 2300 	ldrd	r2, r3, [r4]
 800df4a:	e78f      	b.n	800de6c <_strtod_l+0x3cc>
 800df4c:	3316      	adds	r3, #22
 800df4e:	dba8      	blt.n	800dea2 <_strtod_l+0x402>
 800df50:	4b37      	ldr	r3, [pc, #220]	@ (800e030 <_strtod_l+0x590>)
 800df52:	eba9 0808 	sub.w	r8, r9, r8
 800df56:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800df5a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800df5e:	4650      	mov	r0, sl
 800df60:	4659      	mov	r1, fp
 800df62:	f7f2 fc8b 	bl	800087c <__aeabi_ddiv>
 800df66:	e783      	b.n	800de70 <_strtod_l+0x3d0>
 800df68:	4b32      	ldr	r3, [pc, #200]	@ (800e034 <_strtod_l+0x594>)
 800df6a:	9308      	str	r3, [sp, #32]
 800df6c:	2300      	movs	r3, #0
 800df6e:	1124      	asrs	r4, r4, #4
 800df70:	4650      	mov	r0, sl
 800df72:	4659      	mov	r1, fp
 800df74:	461e      	mov	r6, r3
 800df76:	2c01      	cmp	r4, #1
 800df78:	dc21      	bgt.n	800dfbe <_strtod_l+0x51e>
 800df7a:	b10b      	cbz	r3, 800df80 <_strtod_l+0x4e0>
 800df7c:	4682      	mov	sl, r0
 800df7e:	468b      	mov	fp, r1
 800df80:	492c      	ldr	r1, [pc, #176]	@ (800e034 <_strtod_l+0x594>)
 800df82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800df86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800df8a:	4652      	mov	r2, sl
 800df8c:	465b      	mov	r3, fp
 800df8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df92:	f7f2 fb49 	bl	8000628 <__aeabi_dmul>
 800df96:	4b28      	ldr	r3, [pc, #160]	@ (800e038 <_strtod_l+0x598>)
 800df98:	460a      	mov	r2, r1
 800df9a:	400b      	ands	r3, r1
 800df9c:	4927      	ldr	r1, [pc, #156]	@ (800e03c <_strtod_l+0x59c>)
 800df9e:	428b      	cmp	r3, r1
 800dfa0:	4682      	mov	sl, r0
 800dfa2:	d898      	bhi.n	800ded6 <_strtod_l+0x436>
 800dfa4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dfa8:	428b      	cmp	r3, r1
 800dfaa:	bf86      	itte	hi
 800dfac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e040 <_strtod_l+0x5a0>
 800dfb0:	f04f 3aff 	movhi.w	sl, #4294967295
 800dfb4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dfb8:	2300      	movs	r3, #0
 800dfba:	9308      	str	r3, [sp, #32]
 800dfbc:	e07a      	b.n	800e0b4 <_strtod_l+0x614>
 800dfbe:	07e2      	lsls	r2, r4, #31
 800dfc0:	d505      	bpl.n	800dfce <_strtod_l+0x52e>
 800dfc2:	9b08      	ldr	r3, [sp, #32]
 800dfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc8:	f7f2 fb2e 	bl	8000628 <__aeabi_dmul>
 800dfcc:	2301      	movs	r3, #1
 800dfce:	9a08      	ldr	r2, [sp, #32]
 800dfd0:	3208      	adds	r2, #8
 800dfd2:	3601      	adds	r6, #1
 800dfd4:	1064      	asrs	r4, r4, #1
 800dfd6:	9208      	str	r2, [sp, #32]
 800dfd8:	e7cd      	b.n	800df76 <_strtod_l+0x4d6>
 800dfda:	d0ed      	beq.n	800dfb8 <_strtod_l+0x518>
 800dfdc:	4264      	negs	r4, r4
 800dfde:	f014 020f 	ands.w	r2, r4, #15
 800dfe2:	d00a      	beq.n	800dffa <_strtod_l+0x55a>
 800dfe4:	4b12      	ldr	r3, [pc, #72]	@ (800e030 <_strtod_l+0x590>)
 800dfe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfea:	4650      	mov	r0, sl
 800dfec:	4659      	mov	r1, fp
 800dfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff2:	f7f2 fc43 	bl	800087c <__aeabi_ddiv>
 800dff6:	4682      	mov	sl, r0
 800dff8:	468b      	mov	fp, r1
 800dffa:	1124      	asrs	r4, r4, #4
 800dffc:	d0dc      	beq.n	800dfb8 <_strtod_l+0x518>
 800dffe:	2c1f      	cmp	r4, #31
 800e000:	dd20      	ble.n	800e044 <_strtod_l+0x5a4>
 800e002:	2400      	movs	r4, #0
 800e004:	46a0      	mov	r8, r4
 800e006:	940a      	str	r4, [sp, #40]	@ 0x28
 800e008:	46a1      	mov	r9, r4
 800e00a:	9a05      	ldr	r2, [sp, #20]
 800e00c:	2322      	movs	r3, #34	@ 0x22
 800e00e:	f04f 0a00 	mov.w	sl, #0
 800e012:	f04f 0b00 	mov.w	fp, #0
 800e016:	6013      	str	r3, [r2, #0]
 800e018:	e768      	b.n	800deec <_strtod_l+0x44c>
 800e01a:	bf00      	nop
 800e01c:	0800fb7d 	.word	0x0800fb7d
 800e020:	0800fd94 	.word	0x0800fd94
 800e024:	0800fb75 	.word	0x0800fb75
 800e028:	0800fbac 	.word	0x0800fbac
 800e02c:	0800ff3d 	.word	0x0800ff3d
 800e030:	0800fcc8 	.word	0x0800fcc8
 800e034:	0800fca0 	.word	0x0800fca0
 800e038:	7ff00000 	.word	0x7ff00000
 800e03c:	7ca00000 	.word	0x7ca00000
 800e040:	7fefffff 	.word	0x7fefffff
 800e044:	f014 0310 	ands.w	r3, r4, #16
 800e048:	bf18      	it	ne
 800e04a:	236a      	movne	r3, #106	@ 0x6a
 800e04c:	4ea9      	ldr	r6, [pc, #676]	@ (800e2f4 <_strtod_l+0x854>)
 800e04e:	9308      	str	r3, [sp, #32]
 800e050:	4650      	mov	r0, sl
 800e052:	4659      	mov	r1, fp
 800e054:	2300      	movs	r3, #0
 800e056:	07e2      	lsls	r2, r4, #31
 800e058:	d504      	bpl.n	800e064 <_strtod_l+0x5c4>
 800e05a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e05e:	f7f2 fae3 	bl	8000628 <__aeabi_dmul>
 800e062:	2301      	movs	r3, #1
 800e064:	1064      	asrs	r4, r4, #1
 800e066:	f106 0608 	add.w	r6, r6, #8
 800e06a:	d1f4      	bne.n	800e056 <_strtod_l+0x5b6>
 800e06c:	b10b      	cbz	r3, 800e072 <_strtod_l+0x5d2>
 800e06e:	4682      	mov	sl, r0
 800e070:	468b      	mov	fp, r1
 800e072:	9b08      	ldr	r3, [sp, #32]
 800e074:	b1b3      	cbz	r3, 800e0a4 <_strtod_l+0x604>
 800e076:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e07a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e07e:	2b00      	cmp	r3, #0
 800e080:	4659      	mov	r1, fp
 800e082:	dd0f      	ble.n	800e0a4 <_strtod_l+0x604>
 800e084:	2b1f      	cmp	r3, #31
 800e086:	dd55      	ble.n	800e134 <_strtod_l+0x694>
 800e088:	2b34      	cmp	r3, #52	@ 0x34
 800e08a:	bfde      	ittt	le
 800e08c:	f04f 33ff 	movle.w	r3, #4294967295
 800e090:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e094:	4093      	lslle	r3, r2
 800e096:	f04f 0a00 	mov.w	sl, #0
 800e09a:	bfcc      	ite	gt
 800e09c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e0a0:	ea03 0b01 	andle.w	fp, r3, r1
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	4650      	mov	r0, sl
 800e0aa:	4659      	mov	r1, fp
 800e0ac:	f7f2 fd24 	bl	8000af8 <__aeabi_dcmpeq>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	d1a6      	bne.n	800e002 <_strtod_l+0x562>
 800e0b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0b6:	9300      	str	r3, [sp, #0]
 800e0b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e0ba:	9805      	ldr	r0, [sp, #20]
 800e0bc:	462b      	mov	r3, r5
 800e0be:	463a      	mov	r2, r7
 800e0c0:	f7ff f8c6 	bl	800d250 <__s2b>
 800e0c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	f43f af05 	beq.w	800ded6 <_strtod_l+0x436>
 800e0cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0ce:	2a00      	cmp	r2, #0
 800e0d0:	eba9 0308 	sub.w	r3, r9, r8
 800e0d4:	bfa8      	it	ge
 800e0d6:	2300      	movge	r3, #0
 800e0d8:	9312      	str	r3, [sp, #72]	@ 0x48
 800e0da:	2400      	movs	r4, #0
 800e0dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e0e0:	9316      	str	r3, [sp, #88]	@ 0x58
 800e0e2:	46a0      	mov	r8, r4
 800e0e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0e6:	9805      	ldr	r0, [sp, #20]
 800e0e8:	6859      	ldr	r1, [r3, #4]
 800e0ea:	f7ff f809 	bl	800d100 <_Balloc>
 800e0ee:	4681      	mov	r9, r0
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	f43f aef4 	beq.w	800dede <_strtod_l+0x43e>
 800e0f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0f8:	691a      	ldr	r2, [r3, #16]
 800e0fa:	3202      	adds	r2, #2
 800e0fc:	f103 010c 	add.w	r1, r3, #12
 800e100:	0092      	lsls	r2, r2, #2
 800e102:	300c      	adds	r0, #12
 800e104:	f000 fd72 	bl	800ebec <memcpy>
 800e108:	ec4b ab10 	vmov	d0, sl, fp
 800e10c:	9805      	ldr	r0, [sp, #20]
 800e10e:	aa1c      	add	r2, sp, #112	@ 0x70
 800e110:	a91b      	add	r1, sp, #108	@ 0x6c
 800e112:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e116:	f7ff fbd7 	bl	800d8c8 <__d2b>
 800e11a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e11c:	2800      	cmp	r0, #0
 800e11e:	f43f aede 	beq.w	800dede <_strtod_l+0x43e>
 800e122:	9805      	ldr	r0, [sp, #20]
 800e124:	2101      	movs	r1, #1
 800e126:	f7ff f929 	bl	800d37c <__i2b>
 800e12a:	4680      	mov	r8, r0
 800e12c:	b948      	cbnz	r0, 800e142 <_strtod_l+0x6a2>
 800e12e:	f04f 0800 	mov.w	r8, #0
 800e132:	e6d4      	b.n	800dede <_strtod_l+0x43e>
 800e134:	f04f 32ff 	mov.w	r2, #4294967295
 800e138:	fa02 f303 	lsl.w	r3, r2, r3
 800e13c:	ea03 0a0a 	and.w	sl, r3, sl
 800e140:	e7b0      	b.n	800e0a4 <_strtod_l+0x604>
 800e142:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e144:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e146:	2d00      	cmp	r5, #0
 800e148:	bfab      	itete	ge
 800e14a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e14c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e14e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e150:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e152:	bfac      	ite	ge
 800e154:	18ef      	addge	r7, r5, r3
 800e156:	1b5e      	sublt	r6, r3, r5
 800e158:	9b08      	ldr	r3, [sp, #32]
 800e15a:	1aed      	subs	r5, r5, r3
 800e15c:	4415      	add	r5, r2
 800e15e:	4b66      	ldr	r3, [pc, #408]	@ (800e2f8 <_strtod_l+0x858>)
 800e160:	3d01      	subs	r5, #1
 800e162:	429d      	cmp	r5, r3
 800e164:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e168:	da50      	bge.n	800e20c <_strtod_l+0x76c>
 800e16a:	1b5b      	subs	r3, r3, r5
 800e16c:	2b1f      	cmp	r3, #31
 800e16e:	eba2 0203 	sub.w	r2, r2, r3
 800e172:	f04f 0101 	mov.w	r1, #1
 800e176:	dc3d      	bgt.n	800e1f4 <_strtod_l+0x754>
 800e178:	fa01 f303 	lsl.w	r3, r1, r3
 800e17c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e17e:	2300      	movs	r3, #0
 800e180:	9310      	str	r3, [sp, #64]	@ 0x40
 800e182:	18bd      	adds	r5, r7, r2
 800e184:	9b08      	ldr	r3, [sp, #32]
 800e186:	42af      	cmp	r7, r5
 800e188:	4416      	add	r6, r2
 800e18a:	441e      	add	r6, r3
 800e18c:	463b      	mov	r3, r7
 800e18e:	bfa8      	it	ge
 800e190:	462b      	movge	r3, r5
 800e192:	42b3      	cmp	r3, r6
 800e194:	bfa8      	it	ge
 800e196:	4633      	movge	r3, r6
 800e198:	2b00      	cmp	r3, #0
 800e19a:	bfc2      	ittt	gt
 800e19c:	1aed      	subgt	r5, r5, r3
 800e19e:	1af6      	subgt	r6, r6, r3
 800e1a0:	1aff      	subgt	r7, r7, r3
 800e1a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	dd16      	ble.n	800e1d6 <_strtod_l+0x736>
 800e1a8:	4641      	mov	r1, r8
 800e1aa:	9805      	ldr	r0, [sp, #20]
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	f7ff f9a5 	bl	800d4fc <__pow5mult>
 800e1b2:	4680      	mov	r8, r0
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	d0ba      	beq.n	800e12e <_strtod_l+0x68e>
 800e1b8:	4601      	mov	r1, r0
 800e1ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e1bc:	9805      	ldr	r0, [sp, #20]
 800e1be:	f7ff f8f3 	bl	800d3a8 <__multiply>
 800e1c2:	900e      	str	r0, [sp, #56]	@ 0x38
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	f43f ae8a 	beq.w	800dede <_strtod_l+0x43e>
 800e1ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1cc:	9805      	ldr	r0, [sp, #20]
 800e1ce:	f7fe ffd7 	bl	800d180 <_Bfree>
 800e1d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1d6:	2d00      	cmp	r5, #0
 800e1d8:	dc1d      	bgt.n	800e216 <_strtod_l+0x776>
 800e1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	dd23      	ble.n	800e228 <_strtod_l+0x788>
 800e1e0:	4649      	mov	r1, r9
 800e1e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e1e4:	9805      	ldr	r0, [sp, #20]
 800e1e6:	f7ff f989 	bl	800d4fc <__pow5mult>
 800e1ea:	4681      	mov	r9, r0
 800e1ec:	b9e0      	cbnz	r0, 800e228 <_strtod_l+0x788>
 800e1ee:	f04f 0900 	mov.w	r9, #0
 800e1f2:	e674      	b.n	800dede <_strtod_l+0x43e>
 800e1f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e1f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e1fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e200:	35e2      	adds	r5, #226	@ 0xe2
 800e202:	fa01 f305 	lsl.w	r3, r1, r5
 800e206:	9310      	str	r3, [sp, #64]	@ 0x40
 800e208:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e20a:	e7ba      	b.n	800e182 <_strtod_l+0x6e2>
 800e20c:	2300      	movs	r3, #0
 800e20e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e210:	2301      	movs	r3, #1
 800e212:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e214:	e7b5      	b.n	800e182 <_strtod_l+0x6e2>
 800e216:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e218:	9805      	ldr	r0, [sp, #20]
 800e21a:	462a      	mov	r2, r5
 800e21c:	f7ff f9c8 	bl	800d5b0 <__lshift>
 800e220:	901a      	str	r0, [sp, #104]	@ 0x68
 800e222:	2800      	cmp	r0, #0
 800e224:	d1d9      	bne.n	800e1da <_strtod_l+0x73a>
 800e226:	e65a      	b.n	800dede <_strtod_l+0x43e>
 800e228:	2e00      	cmp	r6, #0
 800e22a:	dd07      	ble.n	800e23c <_strtod_l+0x79c>
 800e22c:	4649      	mov	r1, r9
 800e22e:	9805      	ldr	r0, [sp, #20]
 800e230:	4632      	mov	r2, r6
 800e232:	f7ff f9bd 	bl	800d5b0 <__lshift>
 800e236:	4681      	mov	r9, r0
 800e238:	2800      	cmp	r0, #0
 800e23a:	d0d8      	beq.n	800e1ee <_strtod_l+0x74e>
 800e23c:	2f00      	cmp	r7, #0
 800e23e:	dd08      	ble.n	800e252 <_strtod_l+0x7b2>
 800e240:	4641      	mov	r1, r8
 800e242:	9805      	ldr	r0, [sp, #20]
 800e244:	463a      	mov	r2, r7
 800e246:	f7ff f9b3 	bl	800d5b0 <__lshift>
 800e24a:	4680      	mov	r8, r0
 800e24c:	2800      	cmp	r0, #0
 800e24e:	f43f ae46 	beq.w	800dede <_strtod_l+0x43e>
 800e252:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e254:	9805      	ldr	r0, [sp, #20]
 800e256:	464a      	mov	r2, r9
 800e258:	f7ff fa32 	bl	800d6c0 <__mdiff>
 800e25c:	4604      	mov	r4, r0
 800e25e:	2800      	cmp	r0, #0
 800e260:	f43f ae3d 	beq.w	800dede <_strtod_l+0x43e>
 800e264:	68c3      	ldr	r3, [r0, #12]
 800e266:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e268:	2300      	movs	r3, #0
 800e26a:	60c3      	str	r3, [r0, #12]
 800e26c:	4641      	mov	r1, r8
 800e26e:	f7ff fa0b 	bl	800d688 <__mcmp>
 800e272:	2800      	cmp	r0, #0
 800e274:	da46      	bge.n	800e304 <_strtod_l+0x864>
 800e276:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e278:	ea53 030a 	orrs.w	r3, r3, sl
 800e27c:	d16c      	bne.n	800e358 <_strtod_l+0x8b8>
 800e27e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e282:	2b00      	cmp	r3, #0
 800e284:	d168      	bne.n	800e358 <_strtod_l+0x8b8>
 800e286:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e28a:	0d1b      	lsrs	r3, r3, #20
 800e28c:	051b      	lsls	r3, r3, #20
 800e28e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e292:	d961      	bls.n	800e358 <_strtod_l+0x8b8>
 800e294:	6963      	ldr	r3, [r4, #20]
 800e296:	b913      	cbnz	r3, 800e29e <_strtod_l+0x7fe>
 800e298:	6923      	ldr	r3, [r4, #16]
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	dd5c      	ble.n	800e358 <_strtod_l+0x8b8>
 800e29e:	4621      	mov	r1, r4
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	9805      	ldr	r0, [sp, #20]
 800e2a4:	f7ff f984 	bl	800d5b0 <__lshift>
 800e2a8:	4641      	mov	r1, r8
 800e2aa:	4604      	mov	r4, r0
 800e2ac:	f7ff f9ec 	bl	800d688 <__mcmp>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	dd51      	ble.n	800e358 <_strtod_l+0x8b8>
 800e2b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e2b8:	9a08      	ldr	r2, [sp, #32]
 800e2ba:	0d1b      	lsrs	r3, r3, #20
 800e2bc:	051b      	lsls	r3, r3, #20
 800e2be:	2a00      	cmp	r2, #0
 800e2c0:	d06b      	beq.n	800e39a <_strtod_l+0x8fa>
 800e2c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e2c6:	d868      	bhi.n	800e39a <_strtod_l+0x8fa>
 800e2c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e2cc:	f67f ae9d 	bls.w	800e00a <_strtod_l+0x56a>
 800e2d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e2fc <_strtod_l+0x85c>)
 800e2d2:	4650      	mov	r0, sl
 800e2d4:	4659      	mov	r1, fp
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f7f2 f9a6 	bl	8000628 <__aeabi_dmul>
 800e2dc:	4b08      	ldr	r3, [pc, #32]	@ (800e300 <_strtod_l+0x860>)
 800e2de:	400b      	ands	r3, r1
 800e2e0:	4682      	mov	sl, r0
 800e2e2:	468b      	mov	fp, r1
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f47f ae05 	bne.w	800def4 <_strtod_l+0x454>
 800e2ea:	9a05      	ldr	r2, [sp, #20]
 800e2ec:	2322      	movs	r3, #34	@ 0x22
 800e2ee:	6013      	str	r3, [r2, #0]
 800e2f0:	e600      	b.n	800def4 <_strtod_l+0x454>
 800e2f2:	bf00      	nop
 800e2f4:	0800fdc0 	.word	0x0800fdc0
 800e2f8:	fffffc02 	.word	0xfffffc02
 800e2fc:	39500000 	.word	0x39500000
 800e300:	7ff00000 	.word	0x7ff00000
 800e304:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e308:	d165      	bne.n	800e3d6 <_strtod_l+0x936>
 800e30a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e30c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e310:	b35a      	cbz	r2, 800e36a <_strtod_l+0x8ca>
 800e312:	4a9f      	ldr	r2, [pc, #636]	@ (800e590 <_strtod_l+0xaf0>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d12b      	bne.n	800e370 <_strtod_l+0x8d0>
 800e318:	9b08      	ldr	r3, [sp, #32]
 800e31a:	4651      	mov	r1, sl
 800e31c:	b303      	cbz	r3, 800e360 <_strtod_l+0x8c0>
 800e31e:	4b9d      	ldr	r3, [pc, #628]	@ (800e594 <_strtod_l+0xaf4>)
 800e320:	465a      	mov	r2, fp
 800e322:	4013      	ands	r3, r2
 800e324:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e328:	f04f 32ff 	mov.w	r2, #4294967295
 800e32c:	d81b      	bhi.n	800e366 <_strtod_l+0x8c6>
 800e32e:	0d1b      	lsrs	r3, r3, #20
 800e330:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e334:	fa02 f303 	lsl.w	r3, r2, r3
 800e338:	4299      	cmp	r1, r3
 800e33a:	d119      	bne.n	800e370 <_strtod_l+0x8d0>
 800e33c:	4b96      	ldr	r3, [pc, #600]	@ (800e598 <_strtod_l+0xaf8>)
 800e33e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e340:	429a      	cmp	r2, r3
 800e342:	d102      	bne.n	800e34a <_strtod_l+0x8aa>
 800e344:	3101      	adds	r1, #1
 800e346:	f43f adca 	beq.w	800dede <_strtod_l+0x43e>
 800e34a:	4b92      	ldr	r3, [pc, #584]	@ (800e594 <_strtod_l+0xaf4>)
 800e34c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e34e:	401a      	ands	r2, r3
 800e350:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e354:	f04f 0a00 	mov.w	sl, #0
 800e358:	9b08      	ldr	r3, [sp, #32]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d1b8      	bne.n	800e2d0 <_strtod_l+0x830>
 800e35e:	e5c9      	b.n	800def4 <_strtod_l+0x454>
 800e360:	f04f 33ff 	mov.w	r3, #4294967295
 800e364:	e7e8      	b.n	800e338 <_strtod_l+0x898>
 800e366:	4613      	mov	r3, r2
 800e368:	e7e6      	b.n	800e338 <_strtod_l+0x898>
 800e36a:	ea53 030a 	orrs.w	r3, r3, sl
 800e36e:	d0a1      	beq.n	800e2b4 <_strtod_l+0x814>
 800e370:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e372:	b1db      	cbz	r3, 800e3ac <_strtod_l+0x90c>
 800e374:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e376:	4213      	tst	r3, r2
 800e378:	d0ee      	beq.n	800e358 <_strtod_l+0x8b8>
 800e37a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e37c:	9a08      	ldr	r2, [sp, #32]
 800e37e:	4650      	mov	r0, sl
 800e380:	4659      	mov	r1, fp
 800e382:	b1bb      	cbz	r3, 800e3b4 <_strtod_l+0x914>
 800e384:	f7ff fb6e 	bl	800da64 <sulp>
 800e388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e38c:	ec53 2b10 	vmov	r2, r3, d0
 800e390:	f7f1 ff94 	bl	80002bc <__adddf3>
 800e394:	4682      	mov	sl, r0
 800e396:	468b      	mov	fp, r1
 800e398:	e7de      	b.n	800e358 <_strtod_l+0x8b8>
 800e39a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e39e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e3a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e3a6:	f04f 3aff 	mov.w	sl, #4294967295
 800e3aa:	e7d5      	b.n	800e358 <_strtod_l+0x8b8>
 800e3ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e3ae:	ea13 0f0a 	tst.w	r3, sl
 800e3b2:	e7e1      	b.n	800e378 <_strtod_l+0x8d8>
 800e3b4:	f7ff fb56 	bl	800da64 <sulp>
 800e3b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3bc:	ec53 2b10 	vmov	r2, r3, d0
 800e3c0:	f7f1 ff7a 	bl	80002b8 <__aeabi_dsub>
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	4682      	mov	sl, r0
 800e3ca:	468b      	mov	fp, r1
 800e3cc:	f7f2 fb94 	bl	8000af8 <__aeabi_dcmpeq>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	d0c1      	beq.n	800e358 <_strtod_l+0x8b8>
 800e3d4:	e619      	b.n	800e00a <_strtod_l+0x56a>
 800e3d6:	4641      	mov	r1, r8
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f7ff facd 	bl	800d978 <__ratio>
 800e3de:	ec57 6b10 	vmov	r6, r7, d0
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e3e8:	4630      	mov	r0, r6
 800e3ea:	4639      	mov	r1, r7
 800e3ec:	f7f2 fb98 	bl	8000b20 <__aeabi_dcmple>
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	d06f      	beq.n	800e4d4 <_strtod_l+0xa34>
 800e3f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d17a      	bne.n	800e4f0 <_strtod_l+0xa50>
 800e3fa:	f1ba 0f00 	cmp.w	sl, #0
 800e3fe:	d158      	bne.n	800e4b2 <_strtod_l+0xa12>
 800e400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e406:	2b00      	cmp	r3, #0
 800e408:	d15a      	bne.n	800e4c0 <_strtod_l+0xa20>
 800e40a:	4b64      	ldr	r3, [pc, #400]	@ (800e59c <_strtod_l+0xafc>)
 800e40c:	2200      	movs	r2, #0
 800e40e:	4630      	mov	r0, r6
 800e410:	4639      	mov	r1, r7
 800e412:	f7f2 fb7b 	bl	8000b0c <__aeabi_dcmplt>
 800e416:	2800      	cmp	r0, #0
 800e418:	d159      	bne.n	800e4ce <_strtod_l+0xa2e>
 800e41a:	4630      	mov	r0, r6
 800e41c:	4639      	mov	r1, r7
 800e41e:	4b60      	ldr	r3, [pc, #384]	@ (800e5a0 <_strtod_l+0xb00>)
 800e420:	2200      	movs	r2, #0
 800e422:	f7f2 f901 	bl	8000628 <__aeabi_dmul>
 800e426:	4606      	mov	r6, r0
 800e428:	460f      	mov	r7, r1
 800e42a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e42e:	9606      	str	r6, [sp, #24]
 800e430:	9307      	str	r3, [sp, #28]
 800e432:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e436:	4d57      	ldr	r5, [pc, #348]	@ (800e594 <_strtod_l+0xaf4>)
 800e438:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e43c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e43e:	401d      	ands	r5, r3
 800e440:	4b58      	ldr	r3, [pc, #352]	@ (800e5a4 <_strtod_l+0xb04>)
 800e442:	429d      	cmp	r5, r3
 800e444:	f040 80b2 	bne.w	800e5ac <_strtod_l+0xb0c>
 800e448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e44a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e44e:	ec4b ab10 	vmov	d0, sl, fp
 800e452:	f7ff f9c9 	bl	800d7e8 <__ulp>
 800e456:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e45a:	ec51 0b10 	vmov	r0, r1, d0
 800e45e:	f7f2 f8e3 	bl	8000628 <__aeabi_dmul>
 800e462:	4652      	mov	r2, sl
 800e464:	465b      	mov	r3, fp
 800e466:	f7f1 ff29 	bl	80002bc <__adddf3>
 800e46a:	460b      	mov	r3, r1
 800e46c:	4949      	ldr	r1, [pc, #292]	@ (800e594 <_strtod_l+0xaf4>)
 800e46e:	4a4e      	ldr	r2, [pc, #312]	@ (800e5a8 <_strtod_l+0xb08>)
 800e470:	4019      	ands	r1, r3
 800e472:	4291      	cmp	r1, r2
 800e474:	4682      	mov	sl, r0
 800e476:	d942      	bls.n	800e4fe <_strtod_l+0xa5e>
 800e478:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e47a:	4b47      	ldr	r3, [pc, #284]	@ (800e598 <_strtod_l+0xaf8>)
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d103      	bne.n	800e488 <_strtod_l+0x9e8>
 800e480:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e482:	3301      	adds	r3, #1
 800e484:	f43f ad2b 	beq.w	800dede <_strtod_l+0x43e>
 800e488:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e598 <_strtod_l+0xaf8>
 800e48c:	f04f 3aff 	mov.w	sl, #4294967295
 800e490:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e492:	9805      	ldr	r0, [sp, #20]
 800e494:	f7fe fe74 	bl	800d180 <_Bfree>
 800e498:	9805      	ldr	r0, [sp, #20]
 800e49a:	4649      	mov	r1, r9
 800e49c:	f7fe fe70 	bl	800d180 <_Bfree>
 800e4a0:	9805      	ldr	r0, [sp, #20]
 800e4a2:	4641      	mov	r1, r8
 800e4a4:	f7fe fe6c 	bl	800d180 <_Bfree>
 800e4a8:	9805      	ldr	r0, [sp, #20]
 800e4aa:	4621      	mov	r1, r4
 800e4ac:	f7fe fe68 	bl	800d180 <_Bfree>
 800e4b0:	e618      	b.n	800e0e4 <_strtod_l+0x644>
 800e4b2:	f1ba 0f01 	cmp.w	sl, #1
 800e4b6:	d103      	bne.n	800e4c0 <_strtod_l+0xa20>
 800e4b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	f43f ada5 	beq.w	800e00a <_strtod_l+0x56a>
 800e4c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e570 <_strtod_l+0xad0>
 800e4c4:	4f35      	ldr	r7, [pc, #212]	@ (800e59c <_strtod_l+0xafc>)
 800e4c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e4ca:	2600      	movs	r6, #0
 800e4cc:	e7b1      	b.n	800e432 <_strtod_l+0x992>
 800e4ce:	4f34      	ldr	r7, [pc, #208]	@ (800e5a0 <_strtod_l+0xb00>)
 800e4d0:	2600      	movs	r6, #0
 800e4d2:	e7aa      	b.n	800e42a <_strtod_l+0x98a>
 800e4d4:	4b32      	ldr	r3, [pc, #200]	@ (800e5a0 <_strtod_l+0xb00>)
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	4639      	mov	r1, r7
 800e4da:	2200      	movs	r2, #0
 800e4dc:	f7f2 f8a4 	bl	8000628 <__aeabi_dmul>
 800e4e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	460f      	mov	r7, r1
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d09f      	beq.n	800e42a <_strtod_l+0x98a>
 800e4ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e4ee:	e7a0      	b.n	800e432 <_strtod_l+0x992>
 800e4f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e578 <_strtod_l+0xad8>
 800e4f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e4f8:	ec57 6b17 	vmov	r6, r7, d7
 800e4fc:	e799      	b.n	800e432 <_strtod_l+0x992>
 800e4fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e502:	9b08      	ldr	r3, [sp, #32]
 800e504:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d1c1      	bne.n	800e490 <_strtod_l+0x9f0>
 800e50c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e510:	0d1b      	lsrs	r3, r3, #20
 800e512:	051b      	lsls	r3, r3, #20
 800e514:	429d      	cmp	r5, r3
 800e516:	d1bb      	bne.n	800e490 <_strtod_l+0x9f0>
 800e518:	4630      	mov	r0, r6
 800e51a:	4639      	mov	r1, r7
 800e51c:	f7f2 fbcc 	bl	8000cb8 <__aeabi_d2lz>
 800e520:	f7f2 f854 	bl	80005cc <__aeabi_l2d>
 800e524:	4602      	mov	r2, r0
 800e526:	460b      	mov	r3, r1
 800e528:	4630      	mov	r0, r6
 800e52a:	4639      	mov	r1, r7
 800e52c:	f7f1 fec4 	bl	80002b8 <__aeabi_dsub>
 800e530:	460b      	mov	r3, r1
 800e532:	4602      	mov	r2, r0
 800e534:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e538:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e53e:	ea46 060a 	orr.w	r6, r6, sl
 800e542:	431e      	orrs	r6, r3
 800e544:	d06f      	beq.n	800e626 <_strtod_l+0xb86>
 800e546:	a30e      	add	r3, pc, #56	@ (adr r3, 800e580 <_strtod_l+0xae0>)
 800e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54c:	f7f2 fade 	bl	8000b0c <__aeabi_dcmplt>
 800e550:	2800      	cmp	r0, #0
 800e552:	f47f accf 	bne.w	800def4 <_strtod_l+0x454>
 800e556:	a30c      	add	r3, pc, #48	@ (adr r3, 800e588 <_strtod_l+0xae8>)
 800e558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e560:	f7f2 faf2 	bl	8000b48 <__aeabi_dcmpgt>
 800e564:	2800      	cmp	r0, #0
 800e566:	d093      	beq.n	800e490 <_strtod_l+0x9f0>
 800e568:	e4c4      	b.n	800def4 <_strtod_l+0x454>
 800e56a:	bf00      	nop
 800e56c:	f3af 8000 	nop.w
 800e570:	00000000 	.word	0x00000000
 800e574:	bff00000 	.word	0xbff00000
 800e578:	00000000 	.word	0x00000000
 800e57c:	3ff00000 	.word	0x3ff00000
 800e580:	94a03595 	.word	0x94a03595
 800e584:	3fdfffff 	.word	0x3fdfffff
 800e588:	35afe535 	.word	0x35afe535
 800e58c:	3fe00000 	.word	0x3fe00000
 800e590:	000fffff 	.word	0x000fffff
 800e594:	7ff00000 	.word	0x7ff00000
 800e598:	7fefffff 	.word	0x7fefffff
 800e59c:	3ff00000 	.word	0x3ff00000
 800e5a0:	3fe00000 	.word	0x3fe00000
 800e5a4:	7fe00000 	.word	0x7fe00000
 800e5a8:	7c9fffff 	.word	0x7c9fffff
 800e5ac:	9b08      	ldr	r3, [sp, #32]
 800e5ae:	b323      	cbz	r3, 800e5fa <_strtod_l+0xb5a>
 800e5b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e5b4:	d821      	bhi.n	800e5fa <_strtod_l+0xb5a>
 800e5b6:	a328      	add	r3, pc, #160	@ (adr r3, 800e658 <_strtod_l+0xbb8>)
 800e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5bc:	4630      	mov	r0, r6
 800e5be:	4639      	mov	r1, r7
 800e5c0:	f7f2 faae 	bl	8000b20 <__aeabi_dcmple>
 800e5c4:	b1a0      	cbz	r0, 800e5f0 <_strtod_l+0xb50>
 800e5c6:	4639      	mov	r1, r7
 800e5c8:	4630      	mov	r0, r6
 800e5ca:	f7f2 fb05 	bl	8000bd8 <__aeabi_d2uiz>
 800e5ce:	2801      	cmp	r0, #1
 800e5d0:	bf38      	it	cc
 800e5d2:	2001      	movcc	r0, #1
 800e5d4:	f7f1 ffae 	bl	8000534 <__aeabi_ui2d>
 800e5d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5da:	4606      	mov	r6, r0
 800e5dc:	460f      	mov	r7, r1
 800e5de:	b9fb      	cbnz	r3, 800e620 <_strtod_l+0xb80>
 800e5e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e5e4:	9014      	str	r0, [sp, #80]	@ 0x50
 800e5e6:	9315      	str	r3, [sp, #84]	@ 0x54
 800e5e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e5ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e5f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e5f6:	1b5b      	subs	r3, r3, r5
 800e5f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e5fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e5fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e602:	f7ff f8f1 	bl	800d7e8 <__ulp>
 800e606:	4650      	mov	r0, sl
 800e608:	ec53 2b10 	vmov	r2, r3, d0
 800e60c:	4659      	mov	r1, fp
 800e60e:	f7f2 f80b 	bl	8000628 <__aeabi_dmul>
 800e612:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e616:	f7f1 fe51 	bl	80002bc <__adddf3>
 800e61a:	4682      	mov	sl, r0
 800e61c:	468b      	mov	fp, r1
 800e61e:	e770      	b.n	800e502 <_strtod_l+0xa62>
 800e620:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e624:	e7e0      	b.n	800e5e8 <_strtod_l+0xb48>
 800e626:	a30e      	add	r3, pc, #56	@ (adr r3, 800e660 <_strtod_l+0xbc0>)
 800e628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e62c:	f7f2 fa6e 	bl	8000b0c <__aeabi_dcmplt>
 800e630:	e798      	b.n	800e564 <_strtod_l+0xac4>
 800e632:	2300      	movs	r3, #0
 800e634:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e636:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e638:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e63a:	6013      	str	r3, [r2, #0]
 800e63c:	f7ff ba6d 	b.w	800db1a <_strtod_l+0x7a>
 800e640:	2a65      	cmp	r2, #101	@ 0x65
 800e642:	f43f ab66 	beq.w	800dd12 <_strtod_l+0x272>
 800e646:	2a45      	cmp	r2, #69	@ 0x45
 800e648:	f43f ab63 	beq.w	800dd12 <_strtod_l+0x272>
 800e64c:	2301      	movs	r3, #1
 800e64e:	f7ff bb9e 	b.w	800dd8e <_strtod_l+0x2ee>
 800e652:	bf00      	nop
 800e654:	f3af 8000 	nop.w
 800e658:	ffc00000 	.word	0xffc00000
 800e65c:	41dfffff 	.word	0x41dfffff
 800e660:	94a03595 	.word	0x94a03595
 800e664:	3fcfffff 	.word	0x3fcfffff

0800e668 <_strtod_r>:
 800e668:	4b01      	ldr	r3, [pc, #4]	@ (800e670 <_strtod_r+0x8>)
 800e66a:	f7ff ba19 	b.w	800daa0 <_strtod_l>
 800e66e:	bf00      	nop
 800e670:	20000068 	.word	0x20000068

0800e674 <_strtol_l.constprop.0>:
 800e674:	2b24      	cmp	r3, #36	@ 0x24
 800e676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e67a:	4686      	mov	lr, r0
 800e67c:	4690      	mov	r8, r2
 800e67e:	d801      	bhi.n	800e684 <_strtol_l.constprop.0+0x10>
 800e680:	2b01      	cmp	r3, #1
 800e682:	d106      	bne.n	800e692 <_strtol_l.constprop.0+0x1e>
 800e684:	f7fd fdba 	bl	800c1fc <__errno>
 800e688:	2316      	movs	r3, #22
 800e68a:	6003      	str	r3, [r0, #0]
 800e68c:	2000      	movs	r0, #0
 800e68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e692:	4834      	ldr	r0, [pc, #208]	@ (800e764 <_strtol_l.constprop.0+0xf0>)
 800e694:	460d      	mov	r5, r1
 800e696:	462a      	mov	r2, r5
 800e698:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e69c:	5d06      	ldrb	r6, [r0, r4]
 800e69e:	f016 0608 	ands.w	r6, r6, #8
 800e6a2:	d1f8      	bne.n	800e696 <_strtol_l.constprop.0+0x22>
 800e6a4:	2c2d      	cmp	r4, #45	@ 0x2d
 800e6a6:	d12d      	bne.n	800e704 <_strtol_l.constprop.0+0x90>
 800e6a8:	782c      	ldrb	r4, [r5, #0]
 800e6aa:	2601      	movs	r6, #1
 800e6ac:	1c95      	adds	r5, r2, #2
 800e6ae:	f033 0210 	bics.w	r2, r3, #16
 800e6b2:	d109      	bne.n	800e6c8 <_strtol_l.constprop.0+0x54>
 800e6b4:	2c30      	cmp	r4, #48	@ 0x30
 800e6b6:	d12a      	bne.n	800e70e <_strtol_l.constprop.0+0x9a>
 800e6b8:	782a      	ldrb	r2, [r5, #0]
 800e6ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e6be:	2a58      	cmp	r2, #88	@ 0x58
 800e6c0:	d125      	bne.n	800e70e <_strtol_l.constprop.0+0x9a>
 800e6c2:	786c      	ldrb	r4, [r5, #1]
 800e6c4:	2310      	movs	r3, #16
 800e6c6:	3502      	adds	r5, #2
 800e6c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e6cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	fbbc f9f3 	udiv	r9, ip, r3
 800e6d6:	4610      	mov	r0, r2
 800e6d8:	fb03 ca19 	mls	sl, r3, r9, ip
 800e6dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e6e0:	2f09      	cmp	r7, #9
 800e6e2:	d81b      	bhi.n	800e71c <_strtol_l.constprop.0+0xa8>
 800e6e4:	463c      	mov	r4, r7
 800e6e6:	42a3      	cmp	r3, r4
 800e6e8:	dd27      	ble.n	800e73a <_strtol_l.constprop.0+0xc6>
 800e6ea:	1c57      	adds	r7, r2, #1
 800e6ec:	d007      	beq.n	800e6fe <_strtol_l.constprop.0+0x8a>
 800e6ee:	4581      	cmp	r9, r0
 800e6f0:	d320      	bcc.n	800e734 <_strtol_l.constprop.0+0xc0>
 800e6f2:	d101      	bne.n	800e6f8 <_strtol_l.constprop.0+0x84>
 800e6f4:	45a2      	cmp	sl, r4
 800e6f6:	db1d      	blt.n	800e734 <_strtol_l.constprop.0+0xc0>
 800e6f8:	fb00 4003 	mla	r0, r0, r3, r4
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e702:	e7eb      	b.n	800e6dc <_strtol_l.constprop.0+0x68>
 800e704:	2c2b      	cmp	r4, #43	@ 0x2b
 800e706:	bf04      	itt	eq
 800e708:	782c      	ldrbeq	r4, [r5, #0]
 800e70a:	1c95      	addeq	r5, r2, #2
 800e70c:	e7cf      	b.n	800e6ae <_strtol_l.constprop.0+0x3a>
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1da      	bne.n	800e6c8 <_strtol_l.constprop.0+0x54>
 800e712:	2c30      	cmp	r4, #48	@ 0x30
 800e714:	bf0c      	ite	eq
 800e716:	2308      	moveq	r3, #8
 800e718:	230a      	movne	r3, #10
 800e71a:	e7d5      	b.n	800e6c8 <_strtol_l.constprop.0+0x54>
 800e71c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e720:	2f19      	cmp	r7, #25
 800e722:	d801      	bhi.n	800e728 <_strtol_l.constprop.0+0xb4>
 800e724:	3c37      	subs	r4, #55	@ 0x37
 800e726:	e7de      	b.n	800e6e6 <_strtol_l.constprop.0+0x72>
 800e728:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e72c:	2f19      	cmp	r7, #25
 800e72e:	d804      	bhi.n	800e73a <_strtol_l.constprop.0+0xc6>
 800e730:	3c57      	subs	r4, #87	@ 0x57
 800e732:	e7d8      	b.n	800e6e6 <_strtol_l.constprop.0+0x72>
 800e734:	f04f 32ff 	mov.w	r2, #4294967295
 800e738:	e7e1      	b.n	800e6fe <_strtol_l.constprop.0+0x8a>
 800e73a:	1c53      	adds	r3, r2, #1
 800e73c:	d108      	bne.n	800e750 <_strtol_l.constprop.0+0xdc>
 800e73e:	2322      	movs	r3, #34	@ 0x22
 800e740:	f8ce 3000 	str.w	r3, [lr]
 800e744:	4660      	mov	r0, ip
 800e746:	f1b8 0f00 	cmp.w	r8, #0
 800e74a:	d0a0      	beq.n	800e68e <_strtol_l.constprop.0+0x1a>
 800e74c:	1e69      	subs	r1, r5, #1
 800e74e:	e006      	b.n	800e75e <_strtol_l.constprop.0+0xea>
 800e750:	b106      	cbz	r6, 800e754 <_strtol_l.constprop.0+0xe0>
 800e752:	4240      	negs	r0, r0
 800e754:	f1b8 0f00 	cmp.w	r8, #0
 800e758:	d099      	beq.n	800e68e <_strtol_l.constprop.0+0x1a>
 800e75a:	2a00      	cmp	r2, #0
 800e75c:	d1f6      	bne.n	800e74c <_strtol_l.constprop.0+0xd8>
 800e75e:	f8c8 1000 	str.w	r1, [r8]
 800e762:	e794      	b.n	800e68e <_strtol_l.constprop.0+0x1a>
 800e764:	0800fde9 	.word	0x0800fde9

0800e768 <_strtol_r>:
 800e768:	f7ff bf84 	b.w	800e674 <_strtol_l.constprop.0>

0800e76c <__ssputs_r>:
 800e76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e770:	688e      	ldr	r6, [r1, #8]
 800e772:	461f      	mov	r7, r3
 800e774:	42be      	cmp	r6, r7
 800e776:	680b      	ldr	r3, [r1, #0]
 800e778:	4682      	mov	sl, r0
 800e77a:	460c      	mov	r4, r1
 800e77c:	4690      	mov	r8, r2
 800e77e:	d82d      	bhi.n	800e7dc <__ssputs_r+0x70>
 800e780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e784:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e788:	d026      	beq.n	800e7d8 <__ssputs_r+0x6c>
 800e78a:	6965      	ldr	r5, [r4, #20]
 800e78c:	6909      	ldr	r1, [r1, #16]
 800e78e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e792:	eba3 0901 	sub.w	r9, r3, r1
 800e796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e79a:	1c7b      	adds	r3, r7, #1
 800e79c:	444b      	add	r3, r9
 800e79e:	106d      	asrs	r5, r5, #1
 800e7a0:	429d      	cmp	r5, r3
 800e7a2:	bf38      	it	cc
 800e7a4:	461d      	movcc	r5, r3
 800e7a6:	0553      	lsls	r3, r2, #21
 800e7a8:	d527      	bpl.n	800e7fa <__ssputs_r+0x8e>
 800e7aa:	4629      	mov	r1, r5
 800e7ac:	f7fe fc1c 	bl	800cfe8 <_malloc_r>
 800e7b0:	4606      	mov	r6, r0
 800e7b2:	b360      	cbz	r0, 800e80e <__ssputs_r+0xa2>
 800e7b4:	6921      	ldr	r1, [r4, #16]
 800e7b6:	464a      	mov	r2, r9
 800e7b8:	f000 fa18 	bl	800ebec <memcpy>
 800e7bc:	89a3      	ldrh	r3, [r4, #12]
 800e7be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e7c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7c6:	81a3      	strh	r3, [r4, #12]
 800e7c8:	6126      	str	r6, [r4, #16]
 800e7ca:	6165      	str	r5, [r4, #20]
 800e7cc:	444e      	add	r6, r9
 800e7ce:	eba5 0509 	sub.w	r5, r5, r9
 800e7d2:	6026      	str	r6, [r4, #0]
 800e7d4:	60a5      	str	r5, [r4, #8]
 800e7d6:	463e      	mov	r6, r7
 800e7d8:	42be      	cmp	r6, r7
 800e7da:	d900      	bls.n	800e7de <__ssputs_r+0x72>
 800e7dc:	463e      	mov	r6, r7
 800e7de:	6820      	ldr	r0, [r4, #0]
 800e7e0:	4632      	mov	r2, r6
 800e7e2:	4641      	mov	r1, r8
 800e7e4:	f000 f9c6 	bl	800eb74 <memmove>
 800e7e8:	68a3      	ldr	r3, [r4, #8]
 800e7ea:	1b9b      	subs	r3, r3, r6
 800e7ec:	60a3      	str	r3, [r4, #8]
 800e7ee:	6823      	ldr	r3, [r4, #0]
 800e7f0:	4433      	add	r3, r6
 800e7f2:	6023      	str	r3, [r4, #0]
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7fa:	462a      	mov	r2, r5
 800e7fc:	f000 fd89 	bl	800f312 <_realloc_r>
 800e800:	4606      	mov	r6, r0
 800e802:	2800      	cmp	r0, #0
 800e804:	d1e0      	bne.n	800e7c8 <__ssputs_r+0x5c>
 800e806:	6921      	ldr	r1, [r4, #16]
 800e808:	4650      	mov	r0, sl
 800e80a:	f7fe fb79 	bl	800cf00 <_free_r>
 800e80e:	230c      	movs	r3, #12
 800e810:	f8ca 3000 	str.w	r3, [sl]
 800e814:	89a3      	ldrh	r3, [r4, #12]
 800e816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e81a:	81a3      	strh	r3, [r4, #12]
 800e81c:	f04f 30ff 	mov.w	r0, #4294967295
 800e820:	e7e9      	b.n	800e7f6 <__ssputs_r+0x8a>
	...

0800e824 <_svfiprintf_r>:
 800e824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e828:	4698      	mov	r8, r3
 800e82a:	898b      	ldrh	r3, [r1, #12]
 800e82c:	061b      	lsls	r3, r3, #24
 800e82e:	b09d      	sub	sp, #116	@ 0x74
 800e830:	4607      	mov	r7, r0
 800e832:	460d      	mov	r5, r1
 800e834:	4614      	mov	r4, r2
 800e836:	d510      	bpl.n	800e85a <_svfiprintf_r+0x36>
 800e838:	690b      	ldr	r3, [r1, #16]
 800e83a:	b973      	cbnz	r3, 800e85a <_svfiprintf_r+0x36>
 800e83c:	2140      	movs	r1, #64	@ 0x40
 800e83e:	f7fe fbd3 	bl	800cfe8 <_malloc_r>
 800e842:	6028      	str	r0, [r5, #0]
 800e844:	6128      	str	r0, [r5, #16]
 800e846:	b930      	cbnz	r0, 800e856 <_svfiprintf_r+0x32>
 800e848:	230c      	movs	r3, #12
 800e84a:	603b      	str	r3, [r7, #0]
 800e84c:	f04f 30ff 	mov.w	r0, #4294967295
 800e850:	b01d      	add	sp, #116	@ 0x74
 800e852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e856:	2340      	movs	r3, #64	@ 0x40
 800e858:	616b      	str	r3, [r5, #20]
 800e85a:	2300      	movs	r3, #0
 800e85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e85e:	2320      	movs	r3, #32
 800e860:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e864:	f8cd 800c 	str.w	r8, [sp, #12]
 800e868:	2330      	movs	r3, #48	@ 0x30
 800e86a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ea08 <_svfiprintf_r+0x1e4>
 800e86e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e872:	f04f 0901 	mov.w	r9, #1
 800e876:	4623      	mov	r3, r4
 800e878:	469a      	mov	sl, r3
 800e87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e87e:	b10a      	cbz	r2, 800e884 <_svfiprintf_r+0x60>
 800e880:	2a25      	cmp	r2, #37	@ 0x25
 800e882:	d1f9      	bne.n	800e878 <_svfiprintf_r+0x54>
 800e884:	ebba 0b04 	subs.w	fp, sl, r4
 800e888:	d00b      	beq.n	800e8a2 <_svfiprintf_r+0x7e>
 800e88a:	465b      	mov	r3, fp
 800e88c:	4622      	mov	r2, r4
 800e88e:	4629      	mov	r1, r5
 800e890:	4638      	mov	r0, r7
 800e892:	f7ff ff6b 	bl	800e76c <__ssputs_r>
 800e896:	3001      	adds	r0, #1
 800e898:	f000 80a7 	beq.w	800e9ea <_svfiprintf_r+0x1c6>
 800e89c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e89e:	445a      	add	r2, fp
 800e8a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	f000 809f 	beq.w	800e9ea <_svfiprintf_r+0x1c6>
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8b6:	f10a 0a01 	add.w	sl, sl, #1
 800e8ba:	9304      	str	r3, [sp, #16]
 800e8bc:	9307      	str	r3, [sp, #28]
 800e8be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8c4:	4654      	mov	r4, sl
 800e8c6:	2205      	movs	r2, #5
 800e8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8cc:	484e      	ldr	r0, [pc, #312]	@ (800ea08 <_svfiprintf_r+0x1e4>)
 800e8ce:	f7f1 fc97 	bl	8000200 <memchr>
 800e8d2:	9a04      	ldr	r2, [sp, #16]
 800e8d4:	b9d8      	cbnz	r0, 800e90e <_svfiprintf_r+0xea>
 800e8d6:	06d0      	lsls	r0, r2, #27
 800e8d8:	bf44      	itt	mi
 800e8da:	2320      	movmi	r3, #32
 800e8dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8e0:	0711      	lsls	r1, r2, #28
 800e8e2:	bf44      	itt	mi
 800e8e4:	232b      	movmi	r3, #43	@ 0x2b
 800e8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8ea:	f89a 3000 	ldrb.w	r3, [sl]
 800e8ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8f0:	d015      	beq.n	800e91e <_svfiprintf_r+0xfa>
 800e8f2:	9a07      	ldr	r2, [sp, #28]
 800e8f4:	4654      	mov	r4, sl
 800e8f6:	2000      	movs	r0, #0
 800e8f8:	f04f 0c0a 	mov.w	ip, #10
 800e8fc:	4621      	mov	r1, r4
 800e8fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e902:	3b30      	subs	r3, #48	@ 0x30
 800e904:	2b09      	cmp	r3, #9
 800e906:	d94b      	bls.n	800e9a0 <_svfiprintf_r+0x17c>
 800e908:	b1b0      	cbz	r0, 800e938 <_svfiprintf_r+0x114>
 800e90a:	9207      	str	r2, [sp, #28]
 800e90c:	e014      	b.n	800e938 <_svfiprintf_r+0x114>
 800e90e:	eba0 0308 	sub.w	r3, r0, r8
 800e912:	fa09 f303 	lsl.w	r3, r9, r3
 800e916:	4313      	orrs	r3, r2
 800e918:	9304      	str	r3, [sp, #16]
 800e91a:	46a2      	mov	sl, r4
 800e91c:	e7d2      	b.n	800e8c4 <_svfiprintf_r+0xa0>
 800e91e:	9b03      	ldr	r3, [sp, #12]
 800e920:	1d19      	adds	r1, r3, #4
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	9103      	str	r1, [sp, #12]
 800e926:	2b00      	cmp	r3, #0
 800e928:	bfbb      	ittet	lt
 800e92a:	425b      	neglt	r3, r3
 800e92c:	f042 0202 	orrlt.w	r2, r2, #2
 800e930:	9307      	strge	r3, [sp, #28]
 800e932:	9307      	strlt	r3, [sp, #28]
 800e934:	bfb8      	it	lt
 800e936:	9204      	strlt	r2, [sp, #16]
 800e938:	7823      	ldrb	r3, [r4, #0]
 800e93a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e93c:	d10a      	bne.n	800e954 <_svfiprintf_r+0x130>
 800e93e:	7863      	ldrb	r3, [r4, #1]
 800e940:	2b2a      	cmp	r3, #42	@ 0x2a
 800e942:	d132      	bne.n	800e9aa <_svfiprintf_r+0x186>
 800e944:	9b03      	ldr	r3, [sp, #12]
 800e946:	1d1a      	adds	r2, r3, #4
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	9203      	str	r2, [sp, #12]
 800e94c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e950:	3402      	adds	r4, #2
 800e952:	9305      	str	r3, [sp, #20]
 800e954:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ea18 <_svfiprintf_r+0x1f4>
 800e958:	7821      	ldrb	r1, [r4, #0]
 800e95a:	2203      	movs	r2, #3
 800e95c:	4650      	mov	r0, sl
 800e95e:	f7f1 fc4f 	bl	8000200 <memchr>
 800e962:	b138      	cbz	r0, 800e974 <_svfiprintf_r+0x150>
 800e964:	9b04      	ldr	r3, [sp, #16]
 800e966:	eba0 000a 	sub.w	r0, r0, sl
 800e96a:	2240      	movs	r2, #64	@ 0x40
 800e96c:	4082      	lsls	r2, r0
 800e96e:	4313      	orrs	r3, r2
 800e970:	3401      	adds	r4, #1
 800e972:	9304      	str	r3, [sp, #16]
 800e974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e978:	4824      	ldr	r0, [pc, #144]	@ (800ea0c <_svfiprintf_r+0x1e8>)
 800e97a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e97e:	2206      	movs	r2, #6
 800e980:	f7f1 fc3e 	bl	8000200 <memchr>
 800e984:	2800      	cmp	r0, #0
 800e986:	d036      	beq.n	800e9f6 <_svfiprintf_r+0x1d2>
 800e988:	4b21      	ldr	r3, [pc, #132]	@ (800ea10 <_svfiprintf_r+0x1ec>)
 800e98a:	bb1b      	cbnz	r3, 800e9d4 <_svfiprintf_r+0x1b0>
 800e98c:	9b03      	ldr	r3, [sp, #12]
 800e98e:	3307      	adds	r3, #7
 800e990:	f023 0307 	bic.w	r3, r3, #7
 800e994:	3308      	adds	r3, #8
 800e996:	9303      	str	r3, [sp, #12]
 800e998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e99a:	4433      	add	r3, r6
 800e99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e99e:	e76a      	b.n	800e876 <_svfiprintf_r+0x52>
 800e9a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9a4:	460c      	mov	r4, r1
 800e9a6:	2001      	movs	r0, #1
 800e9a8:	e7a8      	b.n	800e8fc <_svfiprintf_r+0xd8>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	3401      	adds	r4, #1
 800e9ae:	9305      	str	r3, [sp, #20]
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	f04f 0c0a 	mov.w	ip, #10
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9bc:	3a30      	subs	r2, #48	@ 0x30
 800e9be:	2a09      	cmp	r2, #9
 800e9c0:	d903      	bls.n	800e9ca <_svfiprintf_r+0x1a6>
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d0c6      	beq.n	800e954 <_svfiprintf_r+0x130>
 800e9c6:	9105      	str	r1, [sp, #20]
 800e9c8:	e7c4      	b.n	800e954 <_svfiprintf_r+0x130>
 800e9ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e7f0      	b.n	800e9b6 <_svfiprintf_r+0x192>
 800e9d4:	ab03      	add	r3, sp, #12
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	462a      	mov	r2, r5
 800e9da:	4b0e      	ldr	r3, [pc, #56]	@ (800ea14 <_svfiprintf_r+0x1f0>)
 800e9dc:	a904      	add	r1, sp, #16
 800e9de:	4638      	mov	r0, r7
 800e9e0:	f7fc fcc8 	bl	800b374 <_printf_float>
 800e9e4:	1c42      	adds	r2, r0, #1
 800e9e6:	4606      	mov	r6, r0
 800e9e8:	d1d6      	bne.n	800e998 <_svfiprintf_r+0x174>
 800e9ea:	89ab      	ldrh	r3, [r5, #12]
 800e9ec:	065b      	lsls	r3, r3, #25
 800e9ee:	f53f af2d 	bmi.w	800e84c <_svfiprintf_r+0x28>
 800e9f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9f4:	e72c      	b.n	800e850 <_svfiprintf_r+0x2c>
 800e9f6:	ab03      	add	r3, sp, #12
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	462a      	mov	r2, r5
 800e9fc:	4b05      	ldr	r3, [pc, #20]	@ (800ea14 <_svfiprintf_r+0x1f0>)
 800e9fe:	a904      	add	r1, sp, #16
 800ea00:	4638      	mov	r0, r7
 800ea02:	f7fc ff4f 	bl	800b8a4 <_printf_i>
 800ea06:	e7ed      	b.n	800e9e4 <_svfiprintf_r+0x1c0>
 800ea08:	0800fee9 	.word	0x0800fee9
 800ea0c:	0800fef3 	.word	0x0800fef3
 800ea10:	0800b375 	.word	0x0800b375
 800ea14:	0800e76d 	.word	0x0800e76d
 800ea18:	0800feef 	.word	0x0800feef

0800ea1c <__sflush_r>:
 800ea1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea24:	0716      	lsls	r6, r2, #28
 800ea26:	4605      	mov	r5, r0
 800ea28:	460c      	mov	r4, r1
 800ea2a:	d454      	bmi.n	800ead6 <__sflush_r+0xba>
 800ea2c:	684b      	ldr	r3, [r1, #4]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	dc02      	bgt.n	800ea38 <__sflush_r+0x1c>
 800ea32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	dd48      	ble.n	800eaca <__sflush_r+0xae>
 800ea38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea3a:	2e00      	cmp	r6, #0
 800ea3c:	d045      	beq.n	800eaca <__sflush_r+0xae>
 800ea3e:	2300      	movs	r3, #0
 800ea40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ea44:	682f      	ldr	r7, [r5, #0]
 800ea46:	6a21      	ldr	r1, [r4, #32]
 800ea48:	602b      	str	r3, [r5, #0]
 800ea4a:	d030      	beq.n	800eaae <__sflush_r+0x92>
 800ea4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ea4e:	89a3      	ldrh	r3, [r4, #12]
 800ea50:	0759      	lsls	r1, r3, #29
 800ea52:	d505      	bpl.n	800ea60 <__sflush_r+0x44>
 800ea54:	6863      	ldr	r3, [r4, #4]
 800ea56:	1ad2      	subs	r2, r2, r3
 800ea58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea5a:	b10b      	cbz	r3, 800ea60 <__sflush_r+0x44>
 800ea5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ea5e:	1ad2      	subs	r2, r2, r3
 800ea60:	2300      	movs	r3, #0
 800ea62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea64:	6a21      	ldr	r1, [r4, #32]
 800ea66:	4628      	mov	r0, r5
 800ea68:	47b0      	blx	r6
 800ea6a:	1c43      	adds	r3, r0, #1
 800ea6c:	89a3      	ldrh	r3, [r4, #12]
 800ea6e:	d106      	bne.n	800ea7e <__sflush_r+0x62>
 800ea70:	6829      	ldr	r1, [r5, #0]
 800ea72:	291d      	cmp	r1, #29
 800ea74:	d82b      	bhi.n	800eace <__sflush_r+0xb2>
 800ea76:	4a2a      	ldr	r2, [pc, #168]	@ (800eb20 <__sflush_r+0x104>)
 800ea78:	410a      	asrs	r2, r1
 800ea7a:	07d6      	lsls	r6, r2, #31
 800ea7c:	d427      	bmi.n	800eace <__sflush_r+0xb2>
 800ea7e:	2200      	movs	r2, #0
 800ea80:	6062      	str	r2, [r4, #4]
 800ea82:	04d9      	lsls	r1, r3, #19
 800ea84:	6922      	ldr	r2, [r4, #16]
 800ea86:	6022      	str	r2, [r4, #0]
 800ea88:	d504      	bpl.n	800ea94 <__sflush_r+0x78>
 800ea8a:	1c42      	adds	r2, r0, #1
 800ea8c:	d101      	bne.n	800ea92 <__sflush_r+0x76>
 800ea8e:	682b      	ldr	r3, [r5, #0]
 800ea90:	b903      	cbnz	r3, 800ea94 <__sflush_r+0x78>
 800ea92:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea96:	602f      	str	r7, [r5, #0]
 800ea98:	b1b9      	cbz	r1, 800eaca <__sflush_r+0xae>
 800ea9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea9e:	4299      	cmp	r1, r3
 800eaa0:	d002      	beq.n	800eaa8 <__sflush_r+0x8c>
 800eaa2:	4628      	mov	r0, r5
 800eaa4:	f7fe fa2c 	bl	800cf00 <_free_r>
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800eaac:	e00d      	b.n	800eaca <__sflush_r+0xae>
 800eaae:	2301      	movs	r3, #1
 800eab0:	4628      	mov	r0, r5
 800eab2:	47b0      	blx	r6
 800eab4:	4602      	mov	r2, r0
 800eab6:	1c50      	adds	r0, r2, #1
 800eab8:	d1c9      	bne.n	800ea4e <__sflush_r+0x32>
 800eaba:	682b      	ldr	r3, [r5, #0]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d0c6      	beq.n	800ea4e <__sflush_r+0x32>
 800eac0:	2b1d      	cmp	r3, #29
 800eac2:	d001      	beq.n	800eac8 <__sflush_r+0xac>
 800eac4:	2b16      	cmp	r3, #22
 800eac6:	d11e      	bne.n	800eb06 <__sflush_r+0xea>
 800eac8:	602f      	str	r7, [r5, #0]
 800eaca:	2000      	movs	r0, #0
 800eacc:	e022      	b.n	800eb14 <__sflush_r+0xf8>
 800eace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ead2:	b21b      	sxth	r3, r3
 800ead4:	e01b      	b.n	800eb0e <__sflush_r+0xf2>
 800ead6:	690f      	ldr	r7, [r1, #16]
 800ead8:	2f00      	cmp	r7, #0
 800eada:	d0f6      	beq.n	800eaca <__sflush_r+0xae>
 800eadc:	0793      	lsls	r3, r2, #30
 800eade:	680e      	ldr	r6, [r1, #0]
 800eae0:	bf08      	it	eq
 800eae2:	694b      	ldreq	r3, [r1, #20]
 800eae4:	600f      	str	r7, [r1, #0]
 800eae6:	bf18      	it	ne
 800eae8:	2300      	movne	r3, #0
 800eaea:	eba6 0807 	sub.w	r8, r6, r7
 800eaee:	608b      	str	r3, [r1, #8]
 800eaf0:	f1b8 0f00 	cmp.w	r8, #0
 800eaf4:	dde9      	ble.n	800eaca <__sflush_r+0xae>
 800eaf6:	6a21      	ldr	r1, [r4, #32]
 800eaf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eafa:	4643      	mov	r3, r8
 800eafc:	463a      	mov	r2, r7
 800eafe:	4628      	mov	r0, r5
 800eb00:	47b0      	blx	r6
 800eb02:	2800      	cmp	r0, #0
 800eb04:	dc08      	bgt.n	800eb18 <__sflush_r+0xfc>
 800eb06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb0e:	81a3      	strh	r3, [r4, #12]
 800eb10:	f04f 30ff 	mov.w	r0, #4294967295
 800eb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb18:	4407      	add	r7, r0
 800eb1a:	eba8 0800 	sub.w	r8, r8, r0
 800eb1e:	e7e7      	b.n	800eaf0 <__sflush_r+0xd4>
 800eb20:	dfbffffe 	.word	0xdfbffffe

0800eb24 <_fflush_r>:
 800eb24:	b538      	push	{r3, r4, r5, lr}
 800eb26:	690b      	ldr	r3, [r1, #16]
 800eb28:	4605      	mov	r5, r0
 800eb2a:	460c      	mov	r4, r1
 800eb2c:	b913      	cbnz	r3, 800eb34 <_fflush_r+0x10>
 800eb2e:	2500      	movs	r5, #0
 800eb30:	4628      	mov	r0, r5
 800eb32:	bd38      	pop	{r3, r4, r5, pc}
 800eb34:	b118      	cbz	r0, 800eb3e <_fflush_r+0x1a>
 800eb36:	6a03      	ldr	r3, [r0, #32]
 800eb38:	b90b      	cbnz	r3, 800eb3e <_fflush_r+0x1a>
 800eb3a:	f7fd fa73 	bl	800c024 <__sinit>
 800eb3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d0f3      	beq.n	800eb2e <_fflush_r+0xa>
 800eb46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eb48:	07d0      	lsls	r0, r2, #31
 800eb4a:	d404      	bmi.n	800eb56 <_fflush_r+0x32>
 800eb4c:	0599      	lsls	r1, r3, #22
 800eb4e:	d402      	bmi.n	800eb56 <_fflush_r+0x32>
 800eb50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb52:	f7fd fb7e 	bl	800c252 <__retarget_lock_acquire_recursive>
 800eb56:	4628      	mov	r0, r5
 800eb58:	4621      	mov	r1, r4
 800eb5a:	f7ff ff5f 	bl	800ea1c <__sflush_r>
 800eb5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb60:	07da      	lsls	r2, r3, #31
 800eb62:	4605      	mov	r5, r0
 800eb64:	d4e4      	bmi.n	800eb30 <_fflush_r+0xc>
 800eb66:	89a3      	ldrh	r3, [r4, #12]
 800eb68:	059b      	lsls	r3, r3, #22
 800eb6a:	d4e1      	bmi.n	800eb30 <_fflush_r+0xc>
 800eb6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb6e:	f7fd fb71 	bl	800c254 <__retarget_lock_release_recursive>
 800eb72:	e7dd      	b.n	800eb30 <_fflush_r+0xc>

0800eb74 <memmove>:
 800eb74:	4288      	cmp	r0, r1
 800eb76:	b510      	push	{r4, lr}
 800eb78:	eb01 0402 	add.w	r4, r1, r2
 800eb7c:	d902      	bls.n	800eb84 <memmove+0x10>
 800eb7e:	4284      	cmp	r4, r0
 800eb80:	4623      	mov	r3, r4
 800eb82:	d807      	bhi.n	800eb94 <memmove+0x20>
 800eb84:	1e43      	subs	r3, r0, #1
 800eb86:	42a1      	cmp	r1, r4
 800eb88:	d008      	beq.n	800eb9c <memmove+0x28>
 800eb8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb92:	e7f8      	b.n	800eb86 <memmove+0x12>
 800eb94:	4402      	add	r2, r0
 800eb96:	4601      	mov	r1, r0
 800eb98:	428a      	cmp	r2, r1
 800eb9a:	d100      	bne.n	800eb9e <memmove+0x2a>
 800eb9c:	bd10      	pop	{r4, pc}
 800eb9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eba6:	e7f7      	b.n	800eb98 <memmove+0x24>

0800eba8 <strncmp>:
 800eba8:	b510      	push	{r4, lr}
 800ebaa:	b16a      	cbz	r2, 800ebc8 <strncmp+0x20>
 800ebac:	3901      	subs	r1, #1
 800ebae:	1884      	adds	r4, r0, r2
 800ebb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d103      	bne.n	800ebc4 <strncmp+0x1c>
 800ebbc:	42a0      	cmp	r0, r4
 800ebbe:	d001      	beq.n	800ebc4 <strncmp+0x1c>
 800ebc0:	2a00      	cmp	r2, #0
 800ebc2:	d1f5      	bne.n	800ebb0 <strncmp+0x8>
 800ebc4:	1ad0      	subs	r0, r2, r3
 800ebc6:	bd10      	pop	{r4, pc}
 800ebc8:	4610      	mov	r0, r2
 800ebca:	e7fc      	b.n	800ebc6 <strncmp+0x1e>

0800ebcc <_sbrk_r>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	4d06      	ldr	r5, [pc, #24]	@ (800ebe8 <_sbrk_r+0x1c>)
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	4608      	mov	r0, r1
 800ebd6:	602b      	str	r3, [r5, #0]
 800ebd8:	f7f4 fd24 	bl	8003624 <_sbrk>
 800ebdc:	1c43      	adds	r3, r0, #1
 800ebde:	d102      	bne.n	800ebe6 <_sbrk_r+0x1a>
 800ebe0:	682b      	ldr	r3, [r5, #0]
 800ebe2:	b103      	cbz	r3, 800ebe6 <_sbrk_r+0x1a>
 800ebe4:	6023      	str	r3, [r4, #0]
 800ebe6:	bd38      	pop	{r3, r4, r5, pc}
 800ebe8:	20000b9c 	.word	0x20000b9c

0800ebec <memcpy>:
 800ebec:	440a      	add	r2, r1
 800ebee:	4291      	cmp	r1, r2
 800ebf0:	f100 33ff 	add.w	r3, r0, #4294967295
 800ebf4:	d100      	bne.n	800ebf8 <memcpy+0xc>
 800ebf6:	4770      	bx	lr
 800ebf8:	b510      	push	{r4, lr}
 800ebfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec02:	4291      	cmp	r1, r2
 800ec04:	d1f9      	bne.n	800ebfa <memcpy+0xe>
 800ec06:	bd10      	pop	{r4, pc}

0800ec08 <nan>:
 800ec08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ec10 <nan+0x8>
 800ec0c:	4770      	bx	lr
 800ec0e:	bf00      	nop
 800ec10:	00000000 	.word	0x00000000
 800ec14:	7ff80000 	.word	0x7ff80000

0800ec18 <__assert_func>:
 800ec18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec1a:	4614      	mov	r4, r2
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	4b09      	ldr	r3, [pc, #36]	@ (800ec44 <__assert_func+0x2c>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	4605      	mov	r5, r0
 800ec24:	68d8      	ldr	r0, [r3, #12]
 800ec26:	b954      	cbnz	r4, 800ec3e <__assert_func+0x26>
 800ec28:	4b07      	ldr	r3, [pc, #28]	@ (800ec48 <__assert_func+0x30>)
 800ec2a:	461c      	mov	r4, r3
 800ec2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec30:	9100      	str	r1, [sp, #0]
 800ec32:	462b      	mov	r3, r5
 800ec34:	4905      	ldr	r1, [pc, #20]	@ (800ec4c <__assert_func+0x34>)
 800ec36:	f000 fba7 	bl	800f388 <fiprintf>
 800ec3a:	f000 fbb7 	bl	800f3ac <abort>
 800ec3e:	4b04      	ldr	r3, [pc, #16]	@ (800ec50 <__assert_func+0x38>)
 800ec40:	e7f4      	b.n	800ec2c <__assert_func+0x14>
 800ec42:	bf00      	nop
 800ec44:	20000018 	.word	0x20000018
 800ec48:	0800ff3d 	.word	0x0800ff3d
 800ec4c:	0800ff0f 	.word	0x0800ff0f
 800ec50:	0800ff02 	.word	0x0800ff02

0800ec54 <_calloc_r>:
 800ec54:	b570      	push	{r4, r5, r6, lr}
 800ec56:	fba1 5402 	umull	r5, r4, r1, r2
 800ec5a:	b93c      	cbnz	r4, 800ec6c <_calloc_r+0x18>
 800ec5c:	4629      	mov	r1, r5
 800ec5e:	f7fe f9c3 	bl	800cfe8 <_malloc_r>
 800ec62:	4606      	mov	r6, r0
 800ec64:	b928      	cbnz	r0, 800ec72 <_calloc_r+0x1e>
 800ec66:	2600      	movs	r6, #0
 800ec68:	4630      	mov	r0, r6
 800ec6a:	bd70      	pop	{r4, r5, r6, pc}
 800ec6c:	220c      	movs	r2, #12
 800ec6e:	6002      	str	r2, [r0, #0]
 800ec70:	e7f9      	b.n	800ec66 <_calloc_r+0x12>
 800ec72:	462a      	mov	r2, r5
 800ec74:	4621      	mov	r1, r4
 800ec76:	f7fd fa6e 	bl	800c156 <memset>
 800ec7a:	e7f5      	b.n	800ec68 <_calloc_r+0x14>

0800ec7c <rshift>:
 800ec7c:	6903      	ldr	r3, [r0, #16]
 800ec7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ec82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec86:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ec8a:	f100 0414 	add.w	r4, r0, #20
 800ec8e:	dd45      	ble.n	800ed1c <rshift+0xa0>
 800ec90:	f011 011f 	ands.w	r1, r1, #31
 800ec94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ec98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ec9c:	d10c      	bne.n	800ecb8 <rshift+0x3c>
 800ec9e:	f100 0710 	add.w	r7, r0, #16
 800eca2:	4629      	mov	r1, r5
 800eca4:	42b1      	cmp	r1, r6
 800eca6:	d334      	bcc.n	800ed12 <rshift+0x96>
 800eca8:	1a9b      	subs	r3, r3, r2
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	1eea      	subs	r2, r5, #3
 800ecae:	4296      	cmp	r6, r2
 800ecb0:	bf38      	it	cc
 800ecb2:	2300      	movcc	r3, #0
 800ecb4:	4423      	add	r3, r4
 800ecb6:	e015      	b.n	800ece4 <rshift+0x68>
 800ecb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ecbc:	f1c1 0820 	rsb	r8, r1, #32
 800ecc0:	40cf      	lsrs	r7, r1
 800ecc2:	f105 0e04 	add.w	lr, r5, #4
 800ecc6:	46a1      	mov	r9, r4
 800ecc8:	4576      	cmp	r6, lr
 800ecca:	46f4      	mov	ip, lr
 800eccc:	d815      	bhi.n	800ecfa <rshift+0x7e>
 800ecce:	1a9a      	subs	r2, r3, r2
 800ecd0:	0092      	lsls	r2, r2, #2
 800ecd2:	3a04      	subs	r2, #4
 800ecd4:	3501      	adds	r5, #1
 800ecd6:	42ae      	cmp	r6, r5
 800ecd8:	bf38      	it	cc
 800ecda:	2200      	movcc	r2, #0
 800ecdc:	18a3      	adds	r3, r4, r2
 800ecde:	50a7      	str	r7, [r4, r2]
 800ece0:	b107      	cbz	r7, 800ece4 <rshift+0x68>
 800ece2:	3304      	adds	r3, #4
 800ece4:	1b1a      	subs	r2, r3, r4
 800ece6:	42a3      	cmp	r3, r4
 800ece8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ecec:	bf08      	it	eq
 800ecee:	2300      	moveq	r3, #0
 800ecf0:	6102      	str	r2, [r0, #16]
 800ecf2:	bf08      	it	eq
 800ecf4:	6143      	streq	r3, [r0, #20]
 800ecf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecfa:	f8dc c000 	ldr.w	ip, [ip]
 800ecfe:	fa0c fc08 	lsl.w	ip, ip, r8
 800ed02:	ea4c 0707 	orr.w	r7, ip, r7
 800ed06:	f849 7b04 	str.w	r7, [r9], #4
 800ed0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed0e:	40cf      	lsrs	r7, r1
 800ed10:	e7da      	b.n	800ecc8 <rshift+0x4c>
 800ed12:	f851 cb04 	ldr.w	ip, [r1], #4
 800ed16:	f847 cf04 	str.w	ip, [r7, #4]!
 800ed1a:	e7c3      	b.n	800eca4 <rshift+0x28>
 800ed1c:	4623      	mov	r3, r4
 800ed1e:	e7e1      	b.n	800ece4 <rshift+0x68>

0800ed20 <__hexdig_fun>:
 800ed20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ed24:	2b09      	cmp	r3, #9
 800ed26:	d802      	bhi.n	800ed2e <__hexdig_fun+0xe>
 800ed28:	3820      	subs	r0, #32
 800ed2a:	b2c0      	uxtb	r0, r0
 800ed2c:	4770      	bx	lr
 800ed2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ed32:	2b05      	cmp	r3, #5
 800ed34:	d801      	bhi.n	800ed3a <__hexdig_fun+0x1a>
 800ed36:	3847      	subs	r0, #71	@ 0x47
 800ed38:	e7f7      	b.n	800ed2a <__hexdig_fun+0xa>
 800ed3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ed3e:	2b05      	cmp	r3, #5
 800ed40:	d801      	bhi.n	800ed46 <__hexdig_fun+0x26>
 800ed42:	3827      	subs	r0, #39	@ 0x27
 800ed44:	e7f1      	b.n	800ed2a <__hexdig_fun+0xa>
 800ed46:	2000      	movs	r0, #0
 800ed48:	4770      	bx	lr
	...

0800ed4c <__gethex>:
 800ed4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed50:	b085      	sub	sp, #20
 800ed52:	468a      	mov	sl, r1
 800ed54:	9302      	str	r3, [sp, #8]
 800ed56:	680b      	ldr	r3, [r1, #0]
 800ed58:	9001      	str	r0, [sp, #4]
 800ed5a:	4690      	mov	r8, r2
 800ed5c:	1c9c      	adds	r4, r3, #2
 800ed5e:	46a1      	mov	r9, r4
 800ed60:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ed64:	2830      	cmp	r0, #48	@ 0x30
 800ed66:	d0fa      	beq.n	800ed5e <__gethex+0x12>
 800ed68:	eba9 0303 	sub.w	r3, r9, r3
 800ed6c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ed70:	f7ff ffd6 	bl	800ed20 <__hexdig_fun>
 800ed74:	4605      	mov	r5, r0
 800ed76:	2800      	cmp	r0, #0
 800ed78:	d168      	bne.n	800ee4c <__gethex+0x100>
 800ed7a:	49a0      	ldr	r1, [pc, #640]	@ (800effc <__gethex+0x2b0>)
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	4648      	mov	r0, r9
 800ed80:	f7ff ff12 	bl	800eba8 <strncmp>
 800ed84:	4607      	mov	r7, r0
 800ed86:	2800      	cmp	r0, #0
 800ed88:	d167      	bne.n	800ee5a <__gethex+0x10e>
 800ed8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ed8e:	4626      	mov	r6, r4
 800ed90:	f7ff ffc6 	bl	800ed20 <__hexdig_fun>
 800ed94:	2800      	cmp	r0, #0
 800ed96:	d062      	beq.n	800ee5e <__gethex+0x112>
 800ed98:	4623      	mov	r3, r4
 800ed9a:	7818      	ldrb	r0, [r3, #0]
 800ed9c:	2830      	cmp	r0, #48	@ 0x30
 800ed9e:	4699      	mov	r9, r3
 800eda0:	f103 0301 	add.w	r3, r3, #1
 800eda4:	d0f9      	beq.n	800ed9a <__gethex+0x4e>
 800eda6:	f7ff ffbb 	bl	800ed20 <__hexdig_fun>
 800edaa:	fab0 f580 	clz	r5, r0
 800edae:	096d      	lsrs	r5, r5, #5
 800edb0:	f04f 0b01 	mov.w	fp, #1
 800edb4:	464a      	mov	r2, r9
 800edb6:	4616      	mov	r6, r2
 800edb8:	3201      	adds	r2, #1
 800edba:	7830      	ldrb	r0, [r6, #0]
 800edbc:	f7ff ffb0 	bl	800ed20 <__hexdig_fun>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d1f8      	bne.n	800edb6 <__gethex+0x6a>
 800edc4:	498d      	ldr	r1, [pc, #564]	@ (800effc <__gethex+0x2b0>)
 800edc6:	2201      	movs	r2, #1
 800edc8:	4630      	mov	r0, r6
 800edca:	f7ff feed 	bl	800eba8 <strncmp>
 800edce:	2800      	cmp	r0, #0
 800edd0:	d13f      	bne.n	800ee52 <__gethex+0x106>
 800edd2:	b944      	cbnz	r4, 800ede6 <__gethex+0x9a>
 800edd4:	1c74      	adds	r4, r6, #1
 800edd6:	4622      	mov	r2, r4
 800edd8:	4616      	mov	r6, r2
 800edda:	3201      	adds	r2, #1
 800eddc:	7830      	ldrb	r0, [r6, #0]
 800edde:	f7ff ff9f 	bl	800ed20 <__hexdig_fun>
 800ede2:	2800      	cmp	r0, #0
 800ede4:	d1f8      	bne.n	800edd8 <__gethex+0x8c>
 800ede6:	1ba4      	subs	r4, r4, r6
 800ede8:	00a7      	lsls	r7, r4, #2
 800edea:	7833      	ldrb	r3, [r6, #0]
 800edec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800edf0:	2b50      	cmp	r3, #80	@ 0x50
 800edf2:	d13e      	bne.n	800ee72 <__gethex+0x126>
 800edf4:	7873      	ldrb	r3, [r6, #1]
 800edf6:	2b2b      	cmp	r3, #43	@ 0x2b
 800edf8:	d033      	beq.n	800ee62 <__gethex+0x116>
 800edfa:	2b2d      	cmp	r3, #45	@ 0x2d
 800edfc:	d034      	beq.n	800ee68 <__gethex+0x11c>
 800edfe:	1c71      	adds	r1, r6, #1
 800ee00:	2400      	movs	r4, #0
 800ee02:	7808      	ldrb	r0, [r1, #0]
 800ee04:	f7ff ff8c 	bl	800ed20 <__hexdig_fun>
 800ee08:	1e43      	subs	r3, r0, #1
 800ee0a:	b2db      	uxtb	r3, r3
 800ee0c:	2b18      	cmp	r3, #24
 800ee0e:	d830      	bhi.n	800ee72 <__gethex+0x126>
 800ee10:	f1a0 0210 	sub.w	r2, r0, #16
 800ee14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ee18:	f7ff ff82 	bl	800ed20 <__hexdig_fun>
 800ee1c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ee20:	fa5f fc8c 	uxtb.w	ip, ip
 800ee24:	f1bc 0f18 	cmp.w	ip, #24
 800ee28:	f04f 030a 	mov.w	r3, #10
 800ee2c:	d91e      	bls.n	800ee6c <__gethex+0x120>
 800ee2e:	b104      	cbz	r4, 800ee32 <__gethex+0xe6>
 800ee30:	4252      	negs	r2, r2
 800ee32:	4417      	add	r7, r2
 800ee34:	f8ca 1000 	str.w	r1, [sl]
 800ee38:	b1ed      	cbz	r5, 800ee76 <__gethex+0x12a>
 800ee3a:	f1bb 0f00 	cmp.w	fp, #0
 800ee3e:	bf0c      	ite	eq
 800ee40:	2506      	moveq	r5, #6
 800ee42:	2500      	movne	r5, #0
 800ee44:	4628      	mov	r0, r5
 800ee46:	b005      	add	sp, #20
 800ee48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4c:	2500      	movs	r5, #0
 800ee4e:	462c      	mov	r4, r5
 800ee50:	e7b0      	b.n	800edb4 <__gethex+0x68>
 800ee52:	2c00      	cmp	r4, #0
 800ee54:	d1c7      	bne.n	800ede6 <__gethex+0x9a>
 800ee56:	4627      	mov	r7, r4
 800ee58:	e7c7      	b.n	800edea <__gethex+0x9e>
 800ee5a:	464e      	mov	r6, r9
 800ee5c:	462f      	mov	r7, r5
 800ee5e:	2501      	movs	r5, #1
 800ee60:	e7c3      	b.n	800edea <__gethex+0x9e>
 800ee62:	2400      	movs	r4, #0
 800ee64:	1cb1      	adds	r1, r6, #2
 800ee66:	e7cc      	b.n	800ee02 <__gethex+0xb6>
 800ee68:	2401      	movs	r4, #1
 800ee6a:	e7fb      	b.n	800ee64 <__gethex+0x118>
 800ee6c:	fb03 0002 	mla	r0, r3, r2, r0
 800ee70:	e7ce      	b.n	800ee10 <__gethex+0xc4>
 800ee72:	4631      	mov	r1, r6
 800ee74:	e7de      	b.n	800ee34 <__gethex+0xe8>
 800ee76:	eba6 0309 	sub.w	r3, r6, r9
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	4629      	mov	r1, r5
 800ee7e:	2b07      	cmp	r3, #7
 800ee80:	dc0a      	bgt.n	800ee98 <__gethex+0x14c>
 800ee82:	9801      	ldr	r0, [sp, #4]
 800ee84:	f7fe f93c 	bl	800d100 <_Balloc>
 800ee88:	4604      	mov	r4, r0
 800ee8a:	b940      	cbnz	r0, 800ee9e <__gethex+0x152>
 800ee8c:	4b5c      	ldr	r3, [pc, #368]	@ (800f000 <__gethex+0x2b4>)
 800ee8e:	4602      	mov	r2, r0
 800ee90:	21e4      	movs	r1, #228	@ 0xe4
 800ee92:	485c      	ldr	r0, [pc, #368]	@ (800f004 <__gethex+0x2b8>)
 800ee94:	f7ff fec0 	bl	800ec18 <__assert_func>
 800ee98:	3101      	adds	r1, #1
 800ee9a:	105b      	asrs	r3, r3, #1
 800ee9c:	e7ef      	b.n	800ee7e <__gethex+0x132>
 800ee9e:	f100 0a14 	add.w	sl, r0, #20
 800eea2:	2300      	movs	r3, #0
 800eea4:	4655      	mov	r5, sl
 800eea6:	469b      	mov	fp, r3
 800eea8:	45b1      	cmp	r9, r6
 800eeaa:	d337      	bcc.n	800ef1c <__gethex+0x1d0>
 800eeac:	f845 bb04 	str.w	fp, [r5], #4
 800eeb0:	eba5 050a 	sub.w	r5, r5, sl
 800eeb4:	10ad      	asrs	r5, r5, #2
 800eeb6:	6125      	str	r5, [r4, #16]
 800eeb8:	4658      	mov	r0, fp
 800eeba:	f7fe fa13 	bl	800d2e4 <__hi0bits>
 800eebe:	016d      	lsls	r5, r5, #5
 800eec0:	f8d8 6000 	ldr.w	r6, [r8]
 800eec4:	1a2d      	subs	r5, r5, r0
 800eec6:	42b5      	cmp	r5, r6
 800eec8:	dd54      	ble.n	800ef74 <__gethex+0x228>
 800eeca:	1bad      	subs	r5, r5, r6
 800eecc:	4629      	mov	r1, r5
 800eece:	4620      	mov	r0, r4
 800eed0:	f7fe fda7 	bl	800da22 <__any_on>
 800eed4:	4681      	mov	r9, r0
 800eed6:	b178      	cbz	r0, 800eef8 <__gethex+0x1ac>
 800eed8:	1e6b      	subs	r3, r5, #1
 800eeda:	1159      	asrs	r1, r3, #5
 800eedc:	f003 021f 	and.w	r2, r3, #31
 800eee0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800eee4:	f04f 0901 	mov.w	r9, #1
 800eee8:	fa09 f202 	lsl.w	r2, r9, r2
 800eeec:	420a      	tst	r2, r1
 800eeee:	d003      	beq.n	800eef8 <__gethex+0x1ac>
 800eef0:	454b      	cmp	r3, r9
 800eef2:	dc36      	bgt.n	800ef62 <__gethex+0x216>
 800eef4:	f04f 0902 	mov.w	r9, #2
 800eef8:	4629      	mov	r1, r5
 800eefa:	4620      	mov	r0, r4
 800eefc:	f7ff febe 	bl	800ec7c <rshift>
 800ef00:	442f      	add	r7, r5
 800ef02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef06:	42bb      	cmp	r3, r7
 800ef08:	da42      	bge.n	800ef90 <__gethex+0x244>
 800ef0a:	9801      	ldr	r0, [sp, #4]
 800ef0c:	4621      	mov	r1, r4
 800ef0e:	f7fe f937 	bl	800d180 <_Bfree>
 800ef12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef14:	2300      	movs	r3, #0
 800ef16:	6013      	str	r3, [r2, #0]
 800ef18:	25a3      	movs	r5, #163	@ 0xa3
 800ef1a:	e793      	b.n	800ee44 <__gethex+0xf8>
 800ef1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ef20:	2a2e      	cmp	r2, #46	@ 0x2e
 800ef22:	d012      	beq.n	800ef4a <__gethex+0x1fe>
 800ef24:	2b20      	cmp	r3, #32
 800ef26:	d104      	bne.n	800ef32 <__gethex+0x1e6>
 800ef28:	f845 bb04 	str.w	fp, [r5], #4
 800ef2c:	f04f 0b00 	mov.w	fp, #0
 800ef30:	465b      	mov	r3, fp
 800ef32:	7830      	ldrb	r0, [r6, #0]
 800ef34:	9303      	str	r3, [sp, #12]
 800ef36:	f7ff fef3 	bl	800ed20 <__hexdig_fun>
 800ef3a:	9b03      	ldr	r3, [sp, #12]
 800ef3c:	f000 000f 	and.w	r0, r0, #15
 800ef40:	4098      	lsls	r0, r3
 800ef42:	ea4b 0b00 	orr.w	fp, fp, r0
 800ef46:	3304      	adds	r3, #4
 800ef48:	e7ae      	b.n	800eea8 <__gethex+0x15c>
 800ef4a:	45b1      	cmp	r9, r6
 800ef4c:	d8ea      	bhi.n	800ef24 <__gethex+0x1d8>
 800ef4e:	492b      	ldr	r1, [pc, #172]	@ (800effc <__gethex+0x2b0>)
 800ef50:	9303      	str	r3, [sp, #12]
 800ef52:	2201      	movs	r2, #1
 800ef54:	4630      	mov	r0, r6
 800ef56:	f7ff fe27 	bl	800eba8 <strncmp>
 800ef5a:	9b03      	ldr	r3, [sp, #12]
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d1e1      	bne.n	800ef24 <__gethex+0x1d8>
 800ef60:	e7a2      	b.n	800eea8 <__gethex+0x15c>
 800ef62:	1ea9      	subs	r1, r5, #2
 800ef64:	4620      	mov	r0, r4
 800ef66:	f7fe fd5c 	bl	800da22 <__any_on>
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	d0c2      	beq.n	800eef4 <__gethex+0x1a8>
 800ef6e:	f04f 0903 	mov.w	r9, #3
 800ef72:	e7c1      	b.n	800eef8 <__gethex+0x1ac>
 800ef74:	da09      	bge.n	800ef8a <__gethex+0x23e>
 800ef76:	1b75      	subs	r5, r6, r5
 800ef78:	4621      	mov	r1, r4
 800ef7a:	9801      	ldr	r0, [sp, #4]
 800ef7c:	462a      	mov	r2, r5
 800ef7e:	f7fe fb17 	bl	800d5b0 <__lshift>
 800ef82:	1b7f      	subs	r7, r7, r5
 800ef84:	4604      	mov	r4, r0
 800ef86:	f100 0a14 	add.w	sl, r0, #20
 800ef8a:	f04f 0900 	mov.w	r9, #0
 800ef8e:	e7b8      	b.n	800ef02 <__gethex+0x1b6>
 800ef90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ef94:	42bd      	cmp	r5, r7
 800ef96:	dd6f      	ble.n	800f078 <__gethex+0x32c>
 800ef98:	1bed      	subs	r5, r5, r7
 800ef9a:	42ae      	cmp	r6, r5
 800ef9c:	dc34      	bgt.n	800f008 <__gethex+0x2bc>
 800ef9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800efa2:	2b02      	cmp	r3, #2
 800efa4:	d022      	beq.n	800efec <__gethex+0x2a0>
 800efa6:	2b03      	cmp	r3, #3
 800efa8:	d024      	beq.n	800eff4 <__gethex+0x2a8>
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d115      	bne.n	800efda <__gethex+0x28e>
 800efae:	42ae      	cmp	r6, r5
 800efb0:	d113      	bne.n	800efda <__gethex+0x28e>
 800efb2:	2e01      	cmp	r6, #1
 800efb4:	d10b      	bne.n	800efce <__gethex+0x282>
 800efb6:	9a02      	ldr	r2, [sp, #8]
 800efb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800efbc:	6013      	str	r3, [r2, #0]
 800efbe:	2301      	movs	r3, #1
 800efc0:	6123      	str	r3, [r4, #16]
 800efc2:	f8ca 3000 	str.w	r3, [sl]
 800efc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efc8:	2562      	movs	r5, #98	@ 0x62
 800efca:	601c      	str	r4, [r3, #0]
 800efcc:	e73a      	b.n	800ee44 <__gethex+0xf8>
 800efce:	1e71      	subs	r1, r6, #1
 800efd0:	4620      	mov	r0, r4
 800efd2:	f7fe fd26 	bl	800da22 <__any_on>
 800efd6:	2800      	cmp	r0, #0
 800efd8:	d1ed      	bne.n	800efb6 <__gethex+0x26a>
 800efda:	9801      	ldr	r0, [sp, #4]
 800efdc:	4621      	mov	r1, r4
 800efde:	f7fe f8cf 	bl	800d180 <_Bfree>
 800efe2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800efe4:	2300      	movs	r3, #0
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	2550      	movs	r5, #80	@ 0x50
 800efea:	e72b      	b.n	800ee44 <__gethex+0xf8>
 800efec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d1f3      	bne.n	800efda <__gethex+0x28e>
 800eff2:	e7e0      	b.n	800efb6 <__gethex+0x26a>
 800eff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1dd      	bne.n	800efb6 <__gethex+0x26a>
 800effa:	e7ee      	b.n	800efda <__gethex+0x28e>
 800effc:	0800fd90 	.word	0x0800fd90
 800f000:	0800fc25 	.word	0x0800fc25
 800f004:	0800ff3e 	.word	0x0800ff3e
 800f008:	1e6f      	subs	r7, r5, #1
 800f00a:	f1b9 0f00 	cmp.w	r9, #0
 800f00e:	d130      	bne.n	800f072 <__gethex+0x326>
 800f010:	b127      	cbz	r7, 800f01c <__gethex+0x2d0>
 800f012:	4639      	mov	r1, r7
 800f014:	4620      	mov	r0, r4
 800f016:	f7fe fd04 	bl	800da22 <__any_on>
 800f01a:	4681      	mov	r9, r0
 800f01c:	117a      	asrs	r2, r7, #5
 800f01e:	2301      	movs	r3, #1
 800f020:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f024:	f007 071f 	and.w	r7, r7, #31
 800f028:	40bb      	lsls	r3, r7
 800f02a:	4213      	tst	r3, r2
 800f02c:	4629      	mov	r1, r5
 800f02e:	4620      	mov	r0, r4
 800f030:	bf18      	it	ne
 800f032:	f049 0902 	orrne.w	r9, r9, #2
 800f036:	f7ff fe21 	bl	800ec7c <rshift>
 800f03a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f03e:	1b76      	subs	r6, r6, r5
 800f040:	2502      	movs	r5, #2
 800f042:	f1b9 0f00 	cmp.w	r9, #0
 800f046:	d047      	beq.n	800f0d8 <__gethex+0x38c>
 800f048:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f04c:	2b02      	cmp	r3, #2
 800f04e:	d015      	beq.n	800f07c <__gethex+0x330>
 800f050:	2b03      	cmp	r3, #3
 800f052:	d017      	beq.n	800f084 <__gethex+0x338>
 800f054:	2b01      	cmp	r3, #1
 800f056:	d109      	bne.n	800f06c <__gethex+0x320>
 800f058:	f019 0f02 	tst.w	r9, #2
 800f05c:	d006      	beq.n	800f06c <__gethex+0x320>
 800f05e:	f8da 3000 	ldr.w	r3, [sl]
 800f062:	ea49 0903 	orr.w	r9, r9, r3
 800f066:	f019 0f01 	tst.w	r9, #1
 800f06a:	d10e      	bne.n	800f08a <__gethex+0x33e>
 800f06c:	f045 0510 	orr.w	r5, r5, #16
 800f070:	e032      	b.n	800f0d8 <__gethex+0x38c>
 800f072:	f04f 0901 	mov.w	r9, #1
 800f076:	e7d1      	b.n	800f01c <__gethex+0x2d0>
 800f078:	2501      	movs	r5, #1
 800f07a:	e7e2      	b.n	800f042 <__gethex+0x2f6>
 800f07c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f07e:	f1c3 0301 	rsb	r3, r3, #1
 800f082:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f086:	2b00      	cmp	r3, #0
 800f088:	d0f0      	beq.n	800f06c <__gethex+0x320>
 800f08a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f08e:	f104 0314 	add.w	r3, r4, #20
 800f092:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f096:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f09a:	f04f 0c00 	mov.w	ip, #0
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f0a8:	d01b      	beq.n	800f0e2 <__gethex+0x396>
 800f0aa:	3201      	adds	r2, #1
 800f0ac:	6002      	str	r2, [r0, #0]
 800f0ae:	2d02      	cmp	r5, #2
 800f0b0:	f104 0314 	add.w	r3, r4, #20
 800f0b4:	d13c      	bne.n	800f130 <__gethex+0x3e4>
 800f0b6:	f8d8 2000 	ldr.w	r2, [r8]
 800f0ba:	3a01      	subs	r2, #1
 800f0bc:	42b2      	cmp	r2, r6
 800f0be:	d109      	bne.n	800f0d4 <__gethex+0x388>
 800f0c0:	1171      	asrs	r1, r6, #5
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f0c8:	f006 061f 	and.w	r6, r6, #31
 800f0cc:	fa02 f606 	lsl.w	r6, r2, r6
 800f0d0:	421e      	tst	r6, r3
 800f0d2:	d13a      	bne.n	800f14a <__gethex+0x3fe>
 800f0d4:	f045 0520 	orr.w	r5, r5, #32
 800f0d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0da:	601c      	str	r4, [r3, #0]
 800f0dc:	9b02      	ldr	r3, [sp, #8]
 800f0de:	601f      	str	r7, [r3, #0]
 800f0e0:	e6b0      	b.n	800ee44 <__gethex+0xf8>
 800f0e2:	4299      	cmp	r1, r3
 800f0e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f0e8:	d8d9      	bhi.n	800f09e <__gethex+0x352>
 800f0ea:	68a3      	ldr	r3, [r4, #8]
 800f0ec:	459b      	cmp	fp, r3
 800f0ee:	db17      	blt.n	800f120 <__gethex+0x3d4>
 800f0f0:	6861      	ldr	r1, [r4, #4]
 800f0f2:	9801      	ldr	r0, [sp, #4]
 800f0f4:	3101      	adds	r1, #1
 800f0f6:	f7fe f803 	bl	800d100 <_Balloc>
 800f0fa:	4681      	mov	r9, r0
 800f0fc:	b918      	cbnz	r0, 800f106 <__gethex+0x3ba>
 800f0fe:	4b1a      	ldr	r3, [pc, #104]	@ (800f168 <__gethex+0x41c>)
 800f100:	4602      	mov	r2, r0
 800f102:	2184      	movs	r1, #132	@ 0x84
 800f104:	e6c5      	b.n	800ee92 <__gethex+0x146>
 800f106:	6922      	ldr	r2, [r4, #16]
 800f108:	3202      	adds	r2, #2
 800f10a:	f104 010c 	add.w	r1, r4, #12
 800f10e:	0092      	lsls	r2, r2, #2
 800f110:	300c      	adds	r0, #12
 800f112:	f7ff fd6b 	bl	800ebec <memcpy>
 800f116:	4621      	mov	r1, r4
 800f118:	9801      	ldr	r0, [sp, #4]
 800f11a:	f7fe f831 	bl	800d180 <_Bfree>
 800f11e:	464c      	mov	r4, r9
 800f120:	6923      	ldr	r3, [r4, #16]
 800f122:	1c5a      	adds	r2, r3, #1
 800f124:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f128:	6122      	str	r2, [r4, #16]
 800f12a:	2201      	movs	r2, #1
 800f12c:	615a      	str	r2, [r3, #20]
 800f12e:	e7be      	b.n	800f0ae <__gethex+0x362>
 800f130:	6922      	ldr	r2, [r4, #16]
 800f132:	455a      	cmp	r2, fp
 800f134:	dd0b      	ble.n	800f14e <__gethex+0x402>
 800f136:	2101      	movs	r1, #1
 800f138:	4620      	mov	r0, r4
 800f13a:	f7ff fd9f 	bl	800ec7c <rshift>
 800f13e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f142:	3701      	adds	r7, #1
 800f144:	42bb      	cmp	r3, r7
 800f146:	f6ff aee0 	blt.w	800ef0a <__gethex+0x1be>
 800f14a:	2501      	movs	r5, #1
 800f14c:	e7c2      	b.n	800f0d4 <__gethex+0x388>
 800f14e:	f016 061f 	ands.w	r6, r6, #31
 800f152:	d0fa      	beq.n	800f14a <__gethex+0x3fe>
 800f154:	4453      	add	r3, sl
 800f156:	f1c6 0620 	rsb	r6, r6, #32
 800f15a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f15e:	f7fe f8c1 	bl	800d2e4 <__hi0bits>
 800f162:	42b0      	cmp	r0, r6
 800f164:	dbe7      	blt.n	800f136 <__gethex+0x3ea>
 800f166:	e7f0      	b.n	800f14a <__gethex+0x3fe>
 800f168:	0800fc25 	.word	0x0800fc25

0800f16c <L_shift>:
 800f16c:	f1c2 0208 	rsb	r2, r2, #8
 800f170:	0092      	lsls	r2, r2, #2
 800f172:	b570      	push	{r4, r5, r6, lr}
 800f174:	f1c2 0620 	rsb	r6, r2, #32
 800f178:	6843      	ldr	r3, [r0, #4]
 800f17a:	6804      	ldr	r4, [r0, #0]
 800f17c:	fa03 f506 	lsl.w	r5, r3, r6
 800f180:	432c      	orrs	r4, r5
 800f182:	40d3      	lsrs	r3, r2
 800f184:	6004      	str	r4, [r0, #0]
 800f186:	f840 3f04 	str.w	r3, [r0, #4]!
 800f18a:	4288      	cmp	r0, r1
 800f18c:	d3f4      	bcc.n	800f178 <L_shift+0xc>
 800f18e:	bd70      	pop	{r4, r5, r6, pc}

0800f190 <__match>:
 800f190:	b530      	push	{r4, r5, lr}
 800f192:	6803      	ldr	r3, [r0, #0]
 800f194:	3301      	adds	r3, #1
 800f196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f19a:	b914      	cbnz	r4, 800f1a2 <__match+0x12>
 800f19c:	6003      	str	r3, [r0, #0]
 800f19e:	2001      	movs	r0, #1
 800f1a0:	bd30      	pop	{r4, r5, pc}
 800f1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f1aa:	2d19      	cmp	r5, #25
 800f1ac:	bf98      	it	ls
 800f1ae:	3220      	addls	r2, #32
 800f1b0:	42a2      	cmp	r2, r4
 800f1b2:	d0f0      	beq.n	800f196 <__match+0x6>
 800f1b4:	2000      	movs	r0, #0
 800f1b6:	e7f3      	b.n	800f1a0 <__match+0x10>

0800f1b8 <__hexnan>:
 800f1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1bc:	680b      	ldr	r3, [r1, #0]
 800f1be:	6801      	ldr	r1, [r0, #0]
 800f1c0:	115e      	asrs	r6, r3, #5
 800f1c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f1c6:	f013 031f 	ands.w	r3, r3, #31
 800f1ca:	b087      	sub	sp, #28
 800f1cc:	bf18      	it	ne
 800f1ce:	3604      	addne	r6, #4
 800f1d0:	2500      	movs	r5, #0
 800f1d2:	1f37      	subs	r7, r6, #4
 800f1d4:	4682      	mov	sl, r0
 800f1d6:	4690      	mov	r8, r2
 800f1d8:	9301      	str	r3, [sp, #4]
 800f1da:	f846 5c04 	str.w	r5, [r6, #-4]
 800f1de:	46b9      	mov	r9, r7
 800f1e0:	463c      	mov	r4, r7
 800f1e2:	9502      	str	r5, [sp, #8]
 800f1e4:	46ab      	mov	fp, r5
 800f1e6:	784a      	ldrb	r2, [r1, #1]
 800f1e8:	1c4b      	adds	r3, r1, #1
 800f1ea:	9303      	str	r3, [sp, #12]
 800f1ec:	b342      	cbz	r2, 800f240 <__hexnan+0x88>
 800f1ee:	4610      	mov	r0, r2
 800f1f0:	9105      	str	r1, [sp, #20]
 800f1f2:	9204      	str	r2, [sp, #16]
 800f1f4:	f7ff fd94 	bl	800ed20 <__hexdig_fun>
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d151      	bne.n	800f2a0 <__hexnan+0xe8>
 800f1fc:	9a04      	ldr	r2, [sp, #16]
 800f1fe:	9905      	ldr	r1, [sp, #20]
 800f200:	2a20      	cmp	r2, #32
 800f202:	d818      	bhi.n	800f236 <__hexnan+0x7e>
 800f204:	9b02      	ldr	r3, [sp, #8]
 800f206:	459b      	cmp	fp, r3
 800f208:	dd13      	ble.n	800f232 <__hexnan+0x7a>
 800f20a:	454c      	cmp	r4, r9
 800f20c:	d206      	bcs.n	800f21c <__hexnan+0x64>
 800f20e:	2d07      	cmp	r5, #7
 800f210:	dc04      	bgt.n	800f21c <__hexnan+0x64>
 800f212:	462a      	mov	r2, r5
 800f214:	4649      	mov	r1, r9
 800f216:	4620      	mov	r0, r4
 800f218:	f7ff ffa8 	bl	800f16c <L_shift>
 800f21c:	4544      	cmp	r4, r8
 800f21e:	d952      	bls.n	800f2c6 <__hexnan+0x10e>
 800f220:	2300      	movs	r3, #0
 800f222:	f1a4 0904 	sub.w	r9, r4, #4
 800f226:	f844 3c04 	str.w	r3, [r4, #-4]
 800f22a:	f8cd b008 	str.w	fp, [sp, #8]
 800f22e:	464c      	mov	r4, r9
 800f230:	461d      	mov	r5, r3
 800f232:	9903      	ldr	r1, [sp, #12]
 800f234:	e7d7      	b.n	800f1e6 <__hexnan+0x2e>
 800f236:	2a29      	cmp	r2, #41	@ 0x29
 800f238:	d157      	bne.n	800f2ea <__hexnan+0x132>
 800f23a:	3102      	adds	r1, #2
 800f23c:	f8ca 1000 	str.w	r1, [sl]
 800f240:	f1bb 0f00 	cmp.w	fp, #0
 800f244:	d051      	beq.n	800f2ea <__hexnan+0x132>
 800f246:	454c      	cmp	r4, r9
 800f248:	d206      	bcs.n	800f258 <__hexnan+0xa0>
 800f24a:	2d07      	cmp	r5, #7
 800f24c:	dc04      	bgt.n	800f258 <__hexnan+0xa0>
 800f24e:	462a      	mov	r2, r5
 800f250:	4649      	mov	r1, r9
 800f252:	4620      	mov	r0, r4
 800f254:	f7ff ff8a 	bl	800f16c <L_shift>
 800f258:	4544      	cmp	r4, r8
 800f25a:	d936      	bls.n	800f2ca <__hexnan+0x112>
 800f25c:	f1a8 0204 	sub.w	r2, r8, #4
 800f260:	4623      	mov	r3, r4
 800f262:	f853 1b04 	ldr.w	r1, [r3], #4
 800f266:	f842 1f04 	str.w	r1, [r2, #4]!
 800f26a:	429f      	cmp	r7, r3
 800f26c:	d2f9      	bcs.n	800f262 <__hexnan+0xaa>
 800f26e:	1b3b      	subs	r3, r7, r4
 800f270:	f023 0303 	bic.w	r3, r3, #3
 800f274:	3304      	adds	r3, #4
 800f276:	3401      	adds	r4, #1
 800f278:	3e03      	subs	r6, #3
 800f27a:	42b4      	cmp	r4, r6
 800f27c:	bf88      	it	hi
 800f27e:	2304      	movhi	r3, #4
 800f280:	4443      	add	r3, r8
 800f282:	2200      	movs	r2, #0
 800f284:	f843 2b04 	str.w	r2, [r3], #4
 800f288:	429f      	cmp	r7, r3
 800f28a:	d2fb      	bcs.n	800f284 <__hexnan+0xcc>
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	b91b      	cbnz	r3, 800f298 <__hexnan+0xe0>
 800f290:	4547      	cmp	r7, r8
 800f292:	d128      	bne.n	800f2e6 <__hexnan+0x12e>
 800f294:	2301      	movs	r3, #1
 800f296:	603b      	str	r3, [r7, #0]
 800f298:	2005      	movs	r0, #5
 800f29a:	b007      	add	sp, #28
 800f29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a0:	3501      	adds	r5, #1
 800f2a2:	2d08      	cmp	r5, #8
 800f2a4:	f10b 0b01 	add.w	fp, fp, #1
 800f2a8:	dd06      	ble.n	800f2b8 <__hexnan+0x100>
 800f2aa:	4544      	cmp	r4, r8
 800f2ac:	d9c1      	bls.n	800f232 <__hexnan+0x7a>
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2b4:	2501      	movs	r5, #1
 800f2b6:	3c04      	subs	r4, #4
 800f2b8:	6822      	ldr	r2, [r4, #0]
 800f2ba:	f000 000f 	and.w	r0, r0, #15
 800f2be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f2c2:	6020      	str	r0, [r4, #0]
 800f2c4:	e7b5      	b.n	800f232 <__hexnan+0x7a>
 800f2c6:	2508      	movs	r5, #8
 800f2c8:	e7b3      	b.n	800f232 <__hexnan+0x7a>
 800f2ca:	9b01      	ldr	r3, [sp, #4]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d0dd      	beq.n	800f28c <__hexnan+0xd4>
 800f2d0:	f1c3 0320 	rsb	r3, r3, #32
 800f2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2d8:	40da      	lsrs	r2, r3
 800f2da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f2de:	4013      	ands	r3, r2
 800f2e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f2e4:	e7d2      	b.n	800f28c <__hexnan+0xd4>
 800f2e6:	3f04      	subs	r7, #4
 800f2e8:	e7d0      	b.n	800f28c <__hexnan+0xd4>
 800f2ea:	2004      	movs	r0, #4
 800f2ec:	e7d5      	b.n	800f29a <__hexnan+0xe2>

0800f2ee <__ascii_mbtowc>:
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	b901      	cbnz	r1, 800f2f4 <__ascii_mbtowc+0x6>
 800f2f2:	a901      	add	r1, sp, #4
 800f2f4:	b142      	cbz	r2, 800f308 <__ascii_mbtowc+0x1a>
 800f2f6:	b14b      	cbz	r3, 800f30c <__ascii_mbtowc+0x1e>
 800f2f8:	7813      	ldrb	r3, [r2, #0]
 800f2fa:	600b      	str	r3, [r1, #0]
 800f2fc:	7812      	ldrb	r2, [r2, #0]
 800f2fe:	1e10      	subs	r0, r2, #0
 800f300:	bf18      	it	ne
 800f302:	2001      	movne	r0, #1
 800f304:	b002      	add	sp, #8
 800f306:	4770      	bx	lr
 800f308:	4610      	mov	r0, r2
 800f30a:	e7fb      	b.n	800f304 <__ascii_mbtowc+0x16>
 800f30c:	f06f 0001 	mvn.w	r0, #1
 800f310:	e7f8      	b.n	800f304 <__ascii_mbtowc+0x16>

0800f312 <_realloc_r>:
 800f312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f316:	4680      	mov	r8, r0
 800f318:	4615      	mov	r5, r2
 800f31a:	460c      	mov	r4, r1
 800f31c:	b921      	cbnz	r1, 800f328 <_realloc_r+0x16>
 800f31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f322:	4611      	mov	r1, r2
 800f324:	f7fd be60 	b.w	800cfe8 <_malloc_r>
 800f328:	b92a      	cbnz	r2, 800f336 <_realloc_r+0x24>
 800f32a:	f7fd fde9 	bl	800cf00 <_free_r>
 800f32e:	2400      	movs	r4, #0
 800f330:	4620      	mov	r0, r4
 800f332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f336:	f000 f840 	bl	800f3ba <_malloc_usable_size_r>
 800f33a:	4285      	cmp	r5, r0
 800f33c:	4606      	mov	r6, r0
 800f33e:	d802      	bhi.n	800f346 <_realloc_r+0x34>
 800f340:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f344:	d8f4      	bhi.n	800f330 <_realloc_r+0x1e>
 800f346:	4629      	mov	r1, r5
 800f348:	4640      	mov	r0, r8
 800f34a:	f7fd fe4d 	bl	800cfe8 <_malloc_r>
 800f34e:	4607      	mov	r7, r0
 800f350:	2800      	cmp	r0, #0
 800f352:	d0ec      	beq.n	800f32e <_realloc_r+0x1c>
 800f354:	42b5      	cmp	r5, r6
 800f356:	462a      	mov	r2, r5
 800f358:	4621      	mov	r1, r4
 800f35a:	bf28      	it	cs
 800f35c:	4632      	movcs	r2, r6
 800f35e:	f7ff fc45 	bl	800ebec <memcpy>
 800f362:	4621      	mov	r1, r4
 800f364:	4640      	mov	r0, r8
 800f366:	f7fd fdcb 	bl	800cf00 <_free_r>
 800f36a:	463c      	mov	r4, r7
 800f36c:	e7e0      	b.n	800f330 <_realloc_r+0x1e>

0800f36e <__ascii_wctomb>:
 800f36e:	4603      	mov	r3, r0
 800f370:	4608      	mov	r0, r1
 800f372:	b141      	cbz	r1, 800f386 <__ascii_wctomb+0x18>
 800f374:	2aff      	cmp	r2, #255	@ 0xff
 800f376:	d904      	bls.n	800f382 <__ascii_wctomb+0x14>
 800f378:	228a      	movs	r2, #138	@ 0x8a
 800f37a:	601a      	str	r2, [r3, #0]
 800f37c:	f04f 30ff 	mov.w	r0, #4294967295
 800f380:	4770      	bx	lr
 800f382:	700a      	strb	r2, [r1, #0]
 800f384:	2001      	movs	r0, #1
 800f386:	4770      	bx	lr

0800f388 <fiprintf>:
 800f388:	b40e      	push	{r1, r2, r3}
 800f38a:	b503      	push	{r0, r1, lr}
 800f38c:	4601      	mov	r1, r0
 800f38e:	ab03      	add	r3, sp, #12
 800f390:	4805      	ldr	r0, [pc, #20]	@ (800f3a8 <fiprintf+0x20>)
 800f392:	f853 2b04 	ldr.w	r2, [r3], #4
 800f396:	6800      	ldr	r0, [r0, #0]
 800f398:	9301      	str	r3, [sp, #4]
 800f39a:	f000 f83f 	bl	800f41c <_vfiprintf_r>
 800f39e:	b002      	add	sp, #8
 800f3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3a4:	b003      	add	sp, #12
 800f3a6:	4770      	bx	lr
 800f3a8:	20000018 	.word	0x20000018

0800f3ac <abort>:
 800f3ac:	b508      	push	{r3, lr}
 800f3ae:	2006      	movs	r0, #6
 800f3b0:	f000 fa08 	bl	800f7c4 <raise>
 800f3b4:	2001      	movs	r0, #1
 800f3b6:	f7f4 f8bd 	bl	8003534 <_exit>

0800f3ba <_malloc_usable_size_r>:
 800f3ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3be:	1f18      	subs	r0, r3, #4
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	bfbc      	itt	lt
 800f3c4:	580b      	ldrlt	r3, [r1, r0]
 800f3c6:	18c0      	addlt	r0, r0, r3
 800f3c8:	4770      	bx	lr

0800f3ca <__sfputc_r>:
 800f3ca:	6893      	ldr	r3, [r2, #8]
 800f3cc:	3b01      	subs	r3, #1
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	b410      	push	{r4}
 800f3d2:	6093      	str	r3, [r2, #8]
 800f3d4:	da08      	bge.n	800f3e8 <__sfputc_r+0x1e>
 800f3d6:	6994      	ldr	r4, [r2, #24]
 800f3d8:	42a3      	cmp	r3, r4
 800f3da:	db01      	blt.n	800f3e0 <__sfputc_r+0x16>
 800f3dc:	290a      	cmp	r1, #10
 800f3de:	d103      	bne.n	800f3e8 <__sfputc_r+0x1e>
 800f3e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3e4:	f000 b932 	b.w	800f64c <__swbuf_r>
 800f3e8:	6813      	ldr	r3, [r2, #0]
 800f3ea:	1c58      	adds	r0, r3, #1
 800f3ec:	6010      	str	r0, [r2, #0]
 800f3ee:	7019      	strb	r1, [r3, #0]
 800f3f0:	4608      	mov	r0, r1
 800f3f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3f6:	4770      	bx	lr

0800f3f8 <__sfputs_r>:
 800f3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3fa:	4606      	mov	r6, r0
 800f3fc:	460f      	mov	r7, r1
 800f3fe:	4614      	mov	r4, r2
 800f400:	18d5      	adds	r5, r2, r3
 800f402:	42ac      	cmp	r4, r5
 800f404:	d101      	bne.n	800f40a <__sfputs_r+0x12>
 800f406:	2000      	movs	r0, #0
 800f408:	e007      	b.n	800f41a <__sfputs_r+0x22>
 800f40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f40e:	463a      	mov	r2, r7
 800f410:	4630      	mov	r0, r6
 800f412:	f7ff ffda 	bl	800f3ca <__sfputc_r>
 800f416:	1c43      	adds	r3, r0, #1
 800f418:	d1f3      	bne.n	800f402 <__sfputs_r+0xa>
 800f41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f41c <_vfiprintf_r>:
 800f41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f420:	460d      	mov	r5, r1
 800f422:	b09d      	sub	sp, #116	@ 0x74
 800f424:	4614      	mov	r4, r2
 800f426:	4698      	mov	r8, r3
 800f428:	4606      	mov	r6, r0
 800f42a:	b118      	cbz	r0, 800f434 <_vfiprintf_r+0x18>
 800f42c:	6a03      	ldr	r3, [r0, #32]
 800f42e:	b90b      	cbnz	r3, 800f434 <_vfiprintf_r+0x18>
 800f430:	f7fc fdf8 	bl	800c024 <__sinit>
 800f434:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f436:	07d9      	lsls	r1, r3, #31
 800f438:	d405      	bmi.n	800f446 <_vfiprintf_r+0x2a>
 800f43a:	89ab      	ldrh	r3, [r5, #12]
 800f43c:	059a      	lsls	r2, r3, #22
 800f43e:	d402      	bmi.n	800f446 <_vfiprintf_r+0x2a>
 800f440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f442:	f7fc ff06 	bl	800c252 <__retarget_lock_acquire_recursive>
 800f446:	89ab      	ldrh	r3, [r5, #12]
 800f448:	071b      	lsls	r3, r3, #28
 800f44a:	d501      	bpl.n	800f450 <_vfiprintf_r+0x34>
 800f44c:	692b      	ldr	r3, [r5, #16]
 800f44e:	b99b      	cbnz	r3, 800f478 <_vfiprintf_r+0x5c>
 800f450:	4629      	mov	r1, r5
 800f452:	4630      	mov	r0, r6
 800f454:	f000 f938 	bl	800f6c8 <__swsetup_r>
 800f458:	b170      	cbz	r0, 800f478 <_vfiprintf_r+0x5c>
 800f45a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f45c:	07dc      	lsls	r4, r3, #31
 800f45e:	d504      	bpl.n	800f46a <_vfiprintf_r+0x4e>
 800f460:	f04f 30ff 	mov.w	r0, #4294967295
 800f464:	b01d      	add	sp, #116	@ 0x74
 800f466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f46a:	89ab      	ldrh	r3, [r5, #12]
 800f46c:	0598      	lsls	r0, r3, #22
 800f46e:	d4f7      	bmi.n	800f460 <_vfiprintf_r+0x44>
 800f470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f472:	f7fc feef 	bl	800c254 <__retarget_lock_release_recursive>
 800f476:	e7f3      	b.n	800f460 <_vfiprintf_r+0x44>
 800f478:	2300      	movs	r3, #0
 800f47a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f47c:	2320      	movs	r3, #32
 800f47e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f482:	f8cd 800c 	str.w	r8, [sp, #12]
 800f486:	2330      	movs	r3, #48	@ 0x30
 800f488:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f638 <_vfiprintf_r+0x21c>
 800f48c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f490:	f04f 0901 	mov.w	r9, #1
 800f494:	4623      	mov	r3, r4
 800f496:	469a      	mov	sl, r3
 800f498:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f49c:	b10a      	cbz	r2, 800f4a2 <_vfiprintf_r+0x86>
 800f49e:	2a25      	cmp	r2, #37	@ 0x25
 800f4a0:	d1f9      	bne.n	800f496 <_vfiprintf_r+0x7a>
 800f4a2:	ebba 0b04 	subs.w	fp, sl, r4
 800f4a6:	d00b      	beq.n	800f4c0 <_vfiprintf_r+0xa4>
 800f4a8:	465b      	mov	r3, fp
 800f4aa:	4622      	mov	r2, r4
 800f4ac:	4629      	mov	r1, r5
 800f4ae:	4630      	mov	r0, r6
 800f4b0:	f7ff ffa2 	bl	800f3f8 <__sfputs_r>
 800f4b4:	3001      	adds	r0, #1
 800f4b6:	f000 80a7 	beq.w	800f608 <_vfiprintf_r+0x1ec>
 800f4ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4bc:	445a      	add	r2, fp
 800f4be:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4c0:	f89a 3000 	ldrb.w	r3, [sl]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	f000 809f 	beq.w	800f608 <_vfiprintf_r+0x1ec>
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f4d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4d4:	f10a 0a01 	add.w	sl, sl, #1
 800f4d8:	9304      	str	r3, [sp, #16]
 800f4da:	9307      	str	r3, [sp, #28]
 800f4dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f4e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800f4e2:	4654      	mov	r4, sl
 800f4e4:	2205      	movs	r2, #5
 800f4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4ea:	4853      	ldr	r0, [pc, #332]	@ (800f638 <_vfiprintf_r+0x21c>)
 800f4ec:	f7f0 fe88 	bl	8000200 <memchr>
 800f4f0:	9a04      	ldr	r2, [sp, #16]
 800f4f2:	b9d8      	cbnz	r0, 800f52c <_vfiprintf_r+0x110>
 800f4f4:	06d1      	lsls	r1, r2, #27
 800f4f6:	bf44      	itt	mi
 800f4f8:	2320      	movmi	r3, #32
 800f4fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4fe:	0713      	lsls	r3, r2, #28
 800f500:	bf44      	itt	mi
 800f502:	232b      	movmi	r3, #43	@ 0x2b
 800f504:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f508:	f89a 3000 	ldrb.w	r3, [sl]
 800f50c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f50e:	d015      	beq.n	800f53c <_vfiprintf_r+0x120>
 800f510:	9a07      	ldr	r2, [sp, #28]
 800f512:	4654      	mov	r4, sl
 800f514:	2000      	movs	r0, #0
 800f516:	f04f 0c0a 	mov.w	ip, #10
 800f51a:	4621      	mov	r1, r4
 800f51c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f520:	3b30      	subs	r3, #48	@ 0x30
 800f522:	2b09      	cmp	r3, #9
 800f524:	d94b      	bls.n	800f5be <_vfiprintf_r+0x1a2>
 800f526:	b1b0      	cbz	r0, 800f556 <_vfiprintf_r+0x13a>
 800f528:	9207      	str	r2, [sp, #28]
 800f52a:	e014      	b.n	800f556 <_vfiprintf_r+0x13a>
 800f52c:	eba0 0308 	sub.w	r3, r0, r8
 800f530:	fa09 f303 	lsl.w	r3, r9, r3
 800f534:	4313      	orrs	r3, r2
 800f536:	9304      	str	r3, [sp, #16]
 800f538:	46a2      	mov	sl, r4
 800f53a:	e7d2      	b.n	800f4e2 <_vfiprintf_r+0xc6>
 800f53c:	9b03      	ldr	r3, [sp, #12]
 800f53e:	1d19      	adds	r1, r3, #4
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	9103      	str	r1, [sp, #12]
 800f544:	2b00      	cmp	r3, #0
 800f546:	bfbb      	ittet	lt
 800f548:	425b      	neglt	r3, r3
 800f54a:	f042 0202 	orrlt.w	r2, r2, #2
 800f54e:	9307      	strge	r3, [sp, #28]
 800f550:	9307      	strlt	r3, [sp, #28]
 800f552:	bfb8      	it	lt
 800f554:	9204      	strlt	r2, [sp, #16]
 800f556:	7823      	ldrb	r3, [r4, #0]
 800f558:	2b2e      	cmp	r3, #46	@ 0x2e
 800f55a:	d10a      	bne.n	800f572 <_vfiprintf_r+0x156>
 800f55c:	7863      	ldrb	r3, [r4, #1]
 800f55e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f560:	d132      	bne.n	800f5c8 <_vfiprintf_r+0x1ac>
 800f562:	9b03      	ldr	r3, [sp, #12]
 800f564:	1d1a      	adds	r2, r3, #4
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	9203      	str	r2, [sp, #12]
 800f56a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f56e:	3402      	adds	r4, #2
 800f570:	9305      	str	r3, [sp, #20]
 800f572:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f648 <_vfiprintf_r+0x22c>
 800f576:	7821      	ldrb	r1, [r4, #0]
 800f578:	2203      	movs	r2, #3
 800f57a:	4650      	mov	r0, sl
 800f57c:	f7f0 fe40 	bl	8000200 <memchr>
 800f580:	b138      	cbz	r0, 800f592 <_vfiprintf_r+0x176>
 800f582:	9b04      	ldr	r3, [sp, #16]
 800f584:	eba0 000a 	sub.w	r0, r0, sl
 800f588:	2240      	movs	r2, #64	@ 0x40
 800f58a:	4082      	lsls	r2, r0
 800f58c:	4313      	orrs	r3, r2
 800f58e:	3401      	adds	r4, #1
 800f590:	9304      	str	r3, [sp, #16]
 800f592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f596:	4829      	ldr	r0, [pc, #164]	@ (800f63c <_vfiprintf_r+0x220>)
 800f598:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f59c:	2206      	movs	r2, #6
 800f59e:	f7f0 fe2f 	bl	8000200 <memchr>
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	d03f      	beq.n	800f626 <_vfiprintf_r+0x20a>
 800f5a6:	4b26      	ldr	r3, [pc, #152]	@ (800f640 <_vfiprintf_r+0x224>)
 800f5a8:	bb1b      	cbnz	r3, 800f5f2 <_vfiprintf_r+0x1d6>
 800f5aa:	9b03      	ldr	r3, [sp, #12]
 800f5ac:	3307      	adds	r3, #7
 800f5ae:	f023 0307 	bic.w	r3, r3, #7
 800f5b2:	3308      	adds	r3, #8
 800f5b4:	9303      	str	r3, [sp, #12]
 800f5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5b8:	443b      	add	r3, r7
 800f5ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5bc:	e76a      	b.n	800f494 <_vfiprintf_r+0x78>
 800f5be:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5c2:	460c      	mov	r4, r1
 800f5c4:	2001      	movs	r0, #1
 800f5c6:	e7a8      	b.n	800f51a <_vfiprintf_r+0xfe>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	3401      	adds	r4, #1
 800f5cc:	9305      	str	r3, [sp, #20]
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	f04f 0c0a 	mov.w	ip, #10
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5da:	3a30      	subs	r2, #48	@ 0x30
 800f5dc:	2a09      	cmp	r2, #9
 800f5de:	d903      	bls.n	800f5e8 <_vfiprintf_r+0x1cc>
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d0c6      	beq.n	800f572 <_vfiprintf_r+0x156>
 800f5e4:	9105      	str	r1, [sp, #20]
 800f5e6:	e7c4      	b.n	800f572 <_vfiprintf_r+0x156>
 800f5e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5ec:	4604      	mov	r4, r0
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	e7f0      	b.n	800f5d4 <_vfiprintf_r+0x1b8>
 800f5f2:	ab03      	add	r3, sp, #12
 800f5f4:	9300      	str	r3, [sp, #0]
 800f5f6:	462a      	mov	r2, r5
 800f5f8:	4b12      	ldr	r3, [pc, #72]	@ (800f644 <_vfiprintf_r+0x228>)
 800f5fa:	a904      	add	r1, sp, #16
 800f5fc:	4630      	mov	r0, r6
 800f5fe:	f7fb feb9 	bl	800b374 <_printf_float>
 800f602:	4607      	mov	r7, r0
 800f604:	1c78      	adds	r0, r7, #1
 800f606:	d1d6      	bne.n	800f5b6 <_vfiprintf_r+0x19a>
 800f608:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f60a:	07d9      	lsls	r1, r3, #31
 800f60c:	d405      	bmi.n	800f61a <_vfiprintf_r+0x1fe>
 800f60e:	89ab      	ldrh	r3, [r5, #12]
 800f610:	059a      	lsls	r2, r3, #22
 800f612:	d402      	bmi.n	800f61a <_vfiprintf_r+0x1fe>
 800f614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f616:	f7fc fe1d 	bl	800c254 <__retarget_lock_release_recursive>
 800f61a:	89ab      	ldrh	r3, [r5, #12]
 800f61c:	065b      	lsls	r3, r3, #25
 800f61e:	f53f af1f 	bmi.w	800f460 <_vfiprintf_r+0x44>
 800f622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f624:	e71e      	b.n	800f464 <_vfiprintf_r+0x48>
 800f626:	ab03      	add	r3, sp, #12
 800f628:	9300      	str	r3, [sp, #0]
 800f62a:	462a      	mov	r2, r5
 800f62c:	4b05      	ldr	r3, [pc, #20]	@ (800f644 <_vfiprintf_r+0x228>)
 800f62e:	a904      	add	r1, sp, #16
 800f630:	4630      	mov	r0, r6
 800f632:	f7fc f937 	bl	800b8a4 <_printf_i>
 800f636:	e7e4      	b.n	800f602 <_vfiprintf_r+0x1e6>
 800f638:	0800fee9 	.word	0x0800fee9
 800f63c:	0800fef3 	.word	0x0800fef3
 800f640:	0800b375 	.word	0x0800b375
 800f644:	0800f3f9 	.word	0x0800f3f9
 800f648:	0800feef 	.word	0x0800feef

0800f64c <__swbuf_r>:
 800f64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f64e:	460e      	mov	r6, r1
 800f650:	4614      	mov	r4, r2
 800f652:	4605      	mov	r5, r0
 800f654:	b118      	cbz	r0, 800f65e <__swbuf_r+0x12>
 800f656:	6a03      	ldr	r3, [r0, #32]
 800f658:	b90b      	cbnz	r3, 800f65e <__swbuf_r+0x12>
 800f65a:	f7fc fce3 	bl	800c024 <__sinit>
 800f65e:	69a3      	ldr	r3, [r4, #24]
 800f660:	60a3      	str	r3, [r4, #8]
 800f662:	89a3      	ldrh	r3, [r4, #12]
 800f664:	071a      	lsls	r2, r3, #28
 800f666:	d501      	bpl.n	800f66c <__swbuf_r+0x20>
 800f668:	6923      	ldr	r3, [r4, #16]
 800f66a:	b943      	cbnz	r3, 800f67e <__swbuf_r+0x32>
 800f66c:	4621      	mov	r1, r4
 800f66e:	4628      	mov	r0, r5
 800f670:	f000 f82a 	bl	800f6c8 <__swsetup_r>
 800f674:	b118      	cbz	r0, 800f67e <__swbuf_r+0x32>
 800f676:	f04f 37ff 	mov.w	r7, #4294967295
 800f67a:	4638      	mov	r0, r7
 800f67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f67e:	6823      	ldr	r3, [r4, #0]
 800f680:	6922      	ldr	r2, [r4, #16]
 800f682:	1a98      	subs	r0, r3, r2
 800f684:	6963      	ldr	r3, [r4, #20]
 800f686:	b2f6      	uxtb	r6, r6
 800f688:	4283      	cmp	r3, r0
 800f68a:	4637      	mov	r7, r6
 800f68c:	dc05      	bgt.n	800f69a <__swbuf_r+0x4e>
 800f68e:	4621      	mov	r1, r4
 800f690:	4628      	mov	r0, r5
 800f692:	f7ff fa47 	bl	800eb24 <_fflush_r>
 800f696:	2800      	cmp	r0, #0
 800f698:	d1ed      	bne.n	800f676 <__swbuf_r+0x2a>
 800f69a:	68a3      	ldr	r3, [r4, #8]
 800f69c:	3b01      	subs	r3, #1
 800f69e:	60a3      	str	r3, [r4, #8]
 800f6a0:	6823      	ldr	r3, [r4, #0]
 800f6a2:	1c5a      	adds	r2, r3, #1
 800f6a4:	6022      	str	r2, [r4, #0]
 800f6a6:	701e      	strb	r6, [r3, #0]
 800f6a8:	6962      	ldr	r2, [r4, #20]
 800f6aa:	1c43      	adds	r3, r0, #1
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d004      	beq.n	800f6ba <__swbuf_r+0x6e>
 800f6b0:	89a3      	ldrh	r3, [r4, #12]
 800f6b2:	07db      	lsls	r3, r3, #31
 800f6b4:	d5e1      	bpl.n	800f67a <__swbuf_r+0x2e>
 800f6b6:	2e0a      	cmp	r6, #10
 800f6b8:	d1df      	bne.n	800f67a <__swbuf_r+0x2e>
 800f6ba:	4621      	mov	r1, r4
 800f6bc:	4628      	mov	r0, r5
 800f6be:	f7ff fa31 	bl	800eb24 <_fflush_r>
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	d0d9      	beq.n	800f67a <__swbuf_r+0x2e>
 800f6c6:	e7d6      	b.n	800f676 <__swbuf_r+0x2a>

0800f6c8 <__swsetup_r>:
 800f6c8:	b538      	push	{r3, r4, r5, lr}
 800f6ca:	4b29      	ldr	r3, [pc, #164]	@ (800f770 <__swsetup_r+0xa8>)
 800f6cc:	4605      	mov	r5, r0
 800f6ce:	6818      	ldr	r0, [r3, #0]
 800f6d0:	460c      	mov	r4, r1
 800f6d2:	b118      	cbz	r0, 800f6dc <__swsetup_r+0x14>
 800f6d4:	6a03      	ldr	r3, [r0, #32]
 800f6d6:	b90b      	cbnz	r3, 800f6dc <__swsetup_r+0x14>
 800f6d8:	f7fc fca4 	bl	800c024 <__sinit>
 800f6dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6e0:	0719      	lsls	r1, r3, #28
 800f6e2:	d422      	bmi.n	800f72a <__swsetup_r+0x62>
 800f6e4:	06da      	lsls	r2, r3, #27
 800f6e6:	d407      	bmi.n	800f6f8 <__swsetup_r+0x30>
 800f6e8:	2209      	movs	r2, #9
 800f6ea:	602a      	str	r2, [r5, #0]
 800f6ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6f0:	81a3      	strh	r3, [r4, #12]
 800f6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f6f6:	e033      	b.n	800f760 <__swsetup_r+0x98>
 800f6f8:	0758      	lsls	r0, r3, #29
 800f6fa:	d512      	bpl.n	800f722 <__swsetup_r+0x5a>
 800f6fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6fe:	b141      	cbz	r1, 800f712 <__swsetup_r+0x4a>
 800f700:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f704:	4299      	cmp	r1, r3
 800f706:	d002      	beq.n	800f70e <__swsetup_r+0x46>
 800f708:	4628      	mov	r0, r5
 800f70a:	f7fd fbf9 	bl	800cf00 <_free_r>
 800f70e:	2300      	movs	r3, #0
 800f710:	6363      	str	r3, [r4, #52]	@ 0x34
 800f712:	89a3      	ldrh	r3, [r4, #12]
 800f714:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f718:	81a3      	strh	r3, [r4, #12]
 800f71a:	2300      	movs	r3, #0
 800f71c:	6063      	str	r3, [r4, #4]
 800f71e:	6923      	ldr	r3, [r4, #16]
 800f720:	6023      	str	r3, [r4, #0]
 800f722:	89a3      	ldrh	r3, [r4, #12]
 800f724:	f043 0308 	orr.w	r3, r3, #8
 800f728:	81a3      	strh	r3, [r4, #12]
 800f72a:	6923      	ldr	r3, [r4, #16]
 800f72c:	b94b      	cbnz	r3, 800f742 <__swsetup_r+0x7a>
 800f72e:	89a3      	ldrh	r3, [r4, #12]
 800f730:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f738:	d003      	beq.n	800f742 <__swsetup_r+0x7a>
 800f73a:	4621      	mov	r1, r4
 800f73c:	4628      	mov	r0, r5
 800f73e:	f000 f883 	bl	800f848 <__smakebuf_r>
 800f742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f746:	f013 0201 	ands.w	r2, r3, #1
 800f74a:	d00a      	beq.n	800f762 <__swsetup_r+0x9a>
 800f74c:	2200      	movs	r2, #0
 800f74e:	60a2      	str	r2, [r4, #8]
 800f750:	6962      	ldr	r2, [r4, #20]
 800f752:	4252      	negs	r2, r2
 800f754:	61a2      	str	r2, [r4, #24]
 800f756:	6922      	ldr	r2, [r4, #16]
 800f758:	b942      	cbnz	r2, 800f76c <__swsetup_r+0xa4>
 800f75a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f75e:	d1c5      	bne.n	800f6ec <__swsetup_r+0x24>
 800f760:	bd38      	pop	{r3, r4, r5, pc}
 800f762:	0799      	lsls	r1, r3, #30
 800f764:	bf58      	it	pl
 800f766:	6962      	ldrpl	r2, [r4, #20]
 800f768:	60a2      	str	r2, [r4, #8]
 800f76a:	e7f4      	b.n	800f756 <__swsetup_r+0x8e>
 800f76c:	2000      	movs	r0, #0
 800f76e:	e7f7      	b.n	800f760 <__swsetup_r+0x98>
 800f770:	20000018 	.word	0x20000018

0800f774 <_raise_r>:
 800f774:	291f      	cmp	r1, #31
 800f776:	b538      	push	{r3, r4, r5, lr}
 800f778:	4605      	mov	r5, r0
 800f77a:	460c      	mov	r4, r1
 800f77c:	d904      	bls.n	800f788 <_raise_r+0x14>
 800f77e:	2316      	movs	r3, #22
 800f780:	6003      	str	r3, [r0, #0]
 800f782:	f04f 30ff 	mov.w	r0, #4294967295
 800f786:	bd38      	pop	{r3, r4, r5, pc}
 800f788:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f78a:	b112      	cbz	r2, 800f792 <_raise_r+0x1e>
 800f78c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f790:	b94b      	cbnz	r3, 800f7a6 <_raise_r+0x32>
 800f792:	4628      	mov	r0, r5
 800f794:	f000 f830 	bl	800f7f8 <_getpid_r>
 800f798:	4622      	mov	r2, r4
 800f79a:	4601      	mov	r1, r0
 800f79c:	4628      	mov	r0, r5
 800f79e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7a2:	f000 b817 	b.w	800f7d4 <_kill_r>
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d00a      	beq.n	800f7c0 <_raise_r+0x4c>
 800f7aa:	1c59      	adds	r1, r3, #1
 800f7ac:	d103      	bne.n	800f7b6 <_raise_r+0x42>
 800f7ae:	2316      	movs	r3, #22
 800f7b0:	6003      	str	r3, [r0, #0]
 800f7b2:	2001      	movs	r0, #1
 800f7b4:	e7e7      	b.n	800f786 <_raise_r+0x12>
 800f7b6:	2100      	movs	r1, #0
 800f7b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f7bc:	4620      	mov	r0, r4
 800f7be:	4798      	blx	r3
 800f7c0:	2000      	movs	r0, #0
 800f7c2:	e7e0      	b.n	800f786 <_raise_r+0x12>

0800f7c4 <raise>:
 800f7c4:	4b02      	ldr	r3, [pc, #8]	@ (800f7d0 <raise+0xc>)
 800f7c6:	4601      	mov	r1, r0
 800f7c8:	6818      	ldr	r0, [r3, #0]
 800f7ca:	f7ff bfd3 	b.w	800f774 <_raise_r>
 800f7ce:	bf00      	nop
 800f7d0:	20000018 	.word	0x20000018

0800f7d4 <_kill_r>:
 800f7d4:	b538      	push	{r3, r4, r5, lr}
 800f7d6:	4d07      	ldr	r5, [pc, #28]	@ (800f7f4 <_kill_r+0x20>)
 800f7d8:	2300      	movs	r3, #0
 800f7da:	4604      	mov	r4, r0
 800f7dc:	4608      	mov	r0, r1
 800f7de:	4611      	mov	r1, r2
 800f7e0:	602b      	str	r3, [r5, #0]
 800f7e2:	f7f3 fe97 	bl	8003514 <_kill>
 800f7e6:	1c43      	adds	r3, r0, #1
 800f7e8:	d102      	bne.n	800f7f0 <_kill_r+0x1c>
 800f7ea:	682b      	ldr	r3, [r5, #0]
 800f7ec:	b103      	cbz	r3, 800f7f0 <_kill_r+0x1c>
 800f7ee:	6023      	str	r3, [r4, #0]
 800f7f0:	bd38      	pop	{r3, r4, r5, pc}
 800f7f2:	bf00      	nop
 800f7f4:	20000b9c 	.word	0x20000b9c

0800f7f8 <_getpid_r>:
 800f7f8:	f7f3 be84 	b.w	8003504 <_getpid>

0800f7fc <__swhatbuf_r>:
 800f7fc:	b570      	push	{r4, r5, r6, lr}
 800f7fe:	460c      	mov	r4, r1
 800f800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f804:	2900      	cmp	r1, #0
 800f806:	b096      	sub	sp, #88	@ 0x58
 800f808:	4615      	mov	r5, r2
 800f80a:	461e      	mov	r6, r3
 800f80c:	da0d      	bge.n	800f82a <__swhatbuf_r+0x2e>
 800f80e:	89a3      	ldrh	r3, [r4, #12]
 800f810:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f814:	f04f 0100 	mov.w	r1, #0
 800f818:	bf14      	ite	ne
 800f81a:	2340      	movne	r3, #64	@ 0x40
 800f81c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f820:	2000      	movs	r0, #0
 800f822:	6031      	str	r1, [r6, #0]
 800f824:	602b      	str	r3, [r5, #0]
 800f826:	b016      	add	sp, #88	@ 0x58
 800f828:	bd70      	pop	{r4, r5, r6, pc}
 800f82a:	466a      	mov	r2, sp
 800f82c:	f000 f848 	bl	800f8c0 <_fstat_r>
 800f830:	2800      	cmp	r0, #0
 800f832:	dbec      	blt.n	800f80e <__swhatbuf_r+0x12>
 800f834:	9901      	ldr	r1, [sp, #4]
 800f836:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f83a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f83e:	4259      	negs	r1, r3
 800f840:	4159      	adcs	r1, r3
 800f842:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f846:	e7eb      	b.n	800f820 <__swhatbuf_r+0x24>

0800f848 <__smakebuf_r>:
 800f848:	898b      	ldrh	r3, [r1, #12]
 800f84a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f84c:	079d      	lsls	r5, r3, #30
 800f84e:	4606      	mov	r6, r0
 800f850:	460c      	mov	r4, r1
 800f852:	d507      	bpl.n	800f864 <__smakebuf_r+0x1c>
 800f854:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	6123      	str	r3, [r4, #16]
 800f85c:	2301      	movs	r3, #1
 800f85e:	6163      	str	r3, [r4, #20]
 800f860:	b003      	add	sp, #12
 800f862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f864:	ab01      	add	r3, sp, #4
 800f866:	466a      	mov	r2, sp
 800f868:	f7ff ffc8 	bl	800f7fc <__swhatbuf_r>
 800f86c:	9f00      	ldr	r7, [sp, #0]
 800f86e:	4605      	mov	r5, r0
 800f870:	4639      	mov	r1, r7
 800f872:	4630      	mov	r0, r6
 800f874:	f7fd fbb8 	bl	800cfe8 <_malloc_r>
 800f878:	b948      	cbnz	r0, 800f88e <__smakebuf_r+0x46>
 800f87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f87e:	059a      	lsls	r2, r3, #22
 800f880:	d4ee      	bmi.n	800f860 <__smakebuf_r+0x18>
 800f882:	f023 0303 	bic.w	r3, r3, #3
 800f886:	f043 0302 	orr.w	r3, r3, #2
 800f88a:	81a3      	strh	r3, [r4, #12]
 800f88c:	e7e2      	b.n	800f854 <__smakebuf_r+0xc>
 800f88e:	89a3      	ldrh	r3, [r4, #12]
 800f890:	6020      	str	r0, [r4, #0]
 800f892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f896:	81a3      	strh	r3, [r4, #12]
 800f898:	9b01      	ldr	r3, [sp, #4]
 800f89a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f89e:	b15b      	cbz	r3, 800f8b8 <__smakebuf_r+0x70>
 800f8a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	f000 f81d 	bl	800f8e4 <_isatty_r>
 800f8aa:	b128      	cbz	r0, 800f8b8 <__smakebuf_r+0x70>
 800f8ac:	89a3      	ldrh	r3, [r4, #12]
 800f8ae:	f023 0303 	bic.w	r3, r3, #3
 800f8b2:	f043 0301 	orr.w	r3, r3, #1
 800f8b6:	81a3      	strh	r3, [r4, #12]
 800f8b8:	89a3      	ldrh	r3, [r4, #12]
 800f8ba:	431d      	orrs	r5, r3
 800f8bc:	81a5      	strh	r5, [r4, #12]
 800f8be:	e7cf      	b.n	800f860 <__smakebuf_r+0x18>

0800f8c0 <_fstat_r>:
 800f8c0:	b538      	push	{r3, r4, r5, lr}
 800f8c2:	4d07      	ldr	r5, [pc, #28]	@ (800f8e0 <_fstat_r+0x20>)
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	4604      	mov	r4, r0
 800f8c8:	4608      	mov	r0, r1
 800f8ca:	4611      	mov	r1, r2
 800f8cc:	602b      	str	r3, [r5, #0]
 800f8ce:	f7f3 fe81 	bl	80035d4 <_fstat>
 800f8d2:	1c43      	adds	r3, r0, #1
 800f8d4:	d102      	bne.n	800f8dc <_fstat_r+0x1c>
 800f8d6:	682b      	ldr	r3, [r5, #0]
 800f8d8:	b103      	cbz	r3, 800f8dc <_fstat_r+0x1c>
 800f8da:	6023      	str	r3, [r4, #0]
 800f8dc:	bd38      	pop	{r3, r4, r5, pc}
 800f8de:	bf00      	nop
 800f8e0:	20000b9c 	.word	0x20000b9c

0800f8e4 <_isatty_r>:
 800f8e4:	b538      	push	{r3, r4, r5, lr}
 800f8e6:	4d06      	ldr	r5, [pc, #24]	@ (800f900 <_isatty_r+0x1c>)
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	4608      	mov	r0, r1
 800f8ee:	602b      	str	r3, [r5, #0]
 800f8f0:	f7f3 fe80 	bl	80035f4 <_isatty>
 800f8f4:	1c43      	adds	r3, r0, #1
 800f8f6:	d102      	bne.n	800f8fe <_isatty_r+0x1a>
 800f8f8:	682b      	ldr	r3, [r5, #0]
 800f8fa:	b103      	cbz	r3, 800f8fe <_isatty_r+0x1a>
 800f8fc:	6023      	str	r3, [r4, #0]
 800f8fe:	bd38      	pop	{r3, r4, r5, pc}
 800f900:	20000b9c 	.word	0x20000b9c

0800f904 <_init>:
 800f904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f906:	bf00      	nop
 800f908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f90a:	bc08      	pop	{r3}
 800f90c:	469e      	mov	lr, r3
 800f90e:	4770      	bx	lr

0800f910 <_fini>:
 800f910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f912:	bf00      	nop
 800f914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f916:	bc08      	pop	{r3}
 800f918:	469e      	mov	lr, r3
 800f91a:	4770      	bx	lr
